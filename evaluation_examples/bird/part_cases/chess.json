[
  {
    "id": 0,
    "db_id": "california_schools",
    "nlq": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
    "gold": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "infer_predictions": [
      [
        "SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` > 0;",
        "SELECT MAX(free_rate) AS HighestEligibleFreeRate FROM (SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` AS free_rate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` IS NOT NULL AND `Enrollment (K-12)` > 0);",
        "WITH EligibleRates AS (SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` AS rate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` > 0) SELECT MAX(rate) AS HighestEligibleFreeRate FROM EligibleRates;",
        "SELECT MAX(rate) AS HighestEligibleFreeRate FROM (SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` AS rate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` > 0);",
        "SELECT MAX(`Free Meal Count (K-12)` * 1.0 / `Enrollment (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` > 0;",
        "SELECT MAX(free_rate) AS HighestEligibleFreeRate FROM (SELECT `Free Meal Count (K-12)` * 1.0 / `Enrollment (K-12)` AS free_rate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` > 0);",
        "SELECT MAX(`Free Meal Count (K-12)` / NULLIF(`Enrollment (K-12)`, 0)) AS HighestEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda';",
        "SELECT MAX(free_rate) AS HighestEligibleFreeRate FROM (SELECT `Free Meal Count (K-12)` / NULLIF(`Enrollment (K-12)`, 0) AS free_rate FROM frpm WHERE `County Name` = 'Alameda');",
        "WITH CalculatedRates AS (SELECT `Free Meal Count (K-12)` / NULLIF(`Enrollment (K-12)`, 0) AS rate FROM frpm WHERE `County Name` = 'Alameda') SELECT MAX(rate) AS HighestEligibleFreeRate FROM CalculatedRates;",
        "SELECT MAX(`Free Meal Count (K-12)` / CASE WHEN `Enrollment (K-12)` > 0 THEN `Enrollment (K-12)` ELSE NULL END) AS HighestEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda';"
      ]
    ]
  },
  {
    "id": 1,
    "db_id": "california_schools",
    "nlq": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
    "gold": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
    "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "infer_predictions": [
      [
        "SELECT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` IS NOT NULL AND T1.`Free Meal Count (Ages 5-17)` IS NOT NULL ORDER BY EligibleFreeRate ASC LIMIT 3",
        "SELECT MIN(T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) AS LowestFreeRate FROM frpm T1 INNER JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` > 0 GROUP BY T1.CDSCode ORDER BY LowestFreeRate ASC LIMIT 3",
        "WITH Rates AS (SELECT T1.CDSCode, T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS Rate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` > 0) SELECT Rate FROM Rates ORDER BY Rate ASC LIMIT 3",
        "SELECT TOP 3 T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS FreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` IS NOT NULL ORDER BY FreeRate ASC",
        "SELECT EligibleFreeRate FROM (SELECT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` > 0) ORDER BY EligibleFreeRate ASC LIMIT 3",
        "SELECT * FROM (SELECT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS Rate FROM frpm T1 INNER JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` > 0) AS SubQuery ORDER BY Rate ASC LIMIT 3",
        "SELECT DISTINCT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS Rate FROM frpm T1, schools T2 WHERE T1.CDSCode = T2.CDSCode AND T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` IS NOT NULL ORDER BY Rate ASC LIMIT 3",
        "SELECT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS Rate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` > 0 ORDER BY Rate ASC LIMIT 3",
        "SELECT Rate FROM (SELECT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS Rate FROM frpm T1 LEFT JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` > 0) ORDER BY Rate ASC LIMIT 3",
        "SELECT T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)` AS FreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsName = 'Continuation School' AND T1.`Enrollment (Ages 5-17)` IS NOT NULL AND T1.`Free Meal Count (Ages 5-17)` IS NOT NULL ORDER BY FreeRate LIMIT 3"
      ]
    ]
  },
  {
    "id": 2,
    "db_id": "california_schools",
    "nlq": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
    "gold": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
    "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm",
    "infer_predictions": [
      [
        "SELECT s.Zip FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.District = 'Fresno County Office of Education';",
        "SELECT Zip FROM schools JOIN frpm USING (CDSCode) WHERE `Charter School (Y/N)` = 1 AND District = 'Fresno County Office of Education';",
        "SELECT Zip FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE `Charter School (Y/N)` = 1 AND District = 'Fresno County Office of Education';",
        "SELECT s.Zip FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.District = 'Fresno County Office of Education';",
        "SELECT s.Zip FROM schools s, frpm f WHERE s.CDSCode = f.CDSCode AND f.`Charter School (Y/N)` = 1 AND s.District = 'Fresno County Office of Education';",
        "SELECT s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.District LIKE 'Fresno County Office of Education';",
        "SELECT s.Zip FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.District = 'Fresno County Office of Education';",
        "SELECT Zip FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE `Charter School (Y/N)` = 1 AND District = 'Fresno County Office of Education';",
        "SELECT s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.District = 'Fresno County Office of Education';",
        "SELECT s.Zip FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.District = 'Fresno County Office of Education';"
      ]
    ]
  },
  {
    "id": 3,
    "db_id": "california_schools",
    "nlq": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?",
    "gold": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.MailStreet FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`FRPM Count (K-12)` IS NOT NULL ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1;",
        "SELECT MailStreet FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1);",
        "SELECT MailStreet FROM schools INNER JOIN (SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` IS NOT NULL ORDER BY `FRPM Count (K-12)` DESC LIMIT 1) AS HighestFRPM ON schools.CDSCode = HighestFRPM.CDSCode;",
        "SELECT s.MailStreet FROM schools s, frpm f WHERE s.CDSCode = f.CDSCode AND f.`FRPM Count (K-12)` IS NOT NULL ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1;",
        "SELECT MailStreet FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` IS NOT NULL ORDER BY `FRPM Count (K-12)` DESC LIMIT 1);",
        "SELECT T2.MailStreet FROM (SELECT * FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1) T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode;",
        "SELECT MailStreet FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` IS NOT NULL ORDER BY `FRPM Count (K-12)` DESC LIMIT 1);",
        "SELECT s.MailStreet FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1;",
        "SELECT MailStreet FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC, CDSCode LIMIT 1);",
        "SELECT MailStreet FROM schools JOIN frpm USING (CDSCode) WHERE `FRPM Count (K-12)` IS NOT NULL ORDER BY `FRPM Count (K-12)` DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 4,
    "db_id": "california_schools",
    "nlq": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
    "gold": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
    "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the frpm",
    "infer_predictions": [
      [
        "SELECT S.Phone FROM schools S JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.Charter = 1 AND S.FundingType = 'Directly funded' AND S.OpenDate > '2000-01-01';",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1) AND Charter = 1 AND FundingType = 'Directly funded' AND OpenDate > '2000-01-01';",
        "SELECT Phone FROM schools WHERE Charter = 1 AND FundingType = 'Directly funded' AND OpenDate > '2000-01-01' AND CDSCode IN (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1);",
        "SELECT Phone FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Charter = 1 AND schools.FundingType = 'Directly funded' AND schools.OpenDate > '2000-01-01';",
        "SELECT Phone FROM schools AS S JOIN frpm AS F ON S.CDSCode = F.CDSCode WHERE S.Charter = 1 AND S.FundingType = 'Directly funded' AND S.OpenDate > '2000-01-01';",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1) AND Charter = 1 AND FundingType = 'Directly funded' AND strftime('%Y-%m-%d', OpenDate) > '2000-01-01';",
        "SELECT Phone FROM schools WHERE EXISTS (SELECT 1 FROM frpm WHERE schools.CDSCode = frpm.CDSCode AND `Charter School (Y/N)` = 1) AND Charter = 1 AND FundingType = 'Directly funded' AND OpenDate > '2000-01-01';",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1) AND Charter = 1 AND FundingType = 'Directly funded' AND julianday(OpenDate) > julianday('2000-01-01');",
        "SELECT Phone FROM schools WHERE Charter = 1 AND FundingType = 'Directly funded' AND OpenDate > '2000-01-01' AND CDSCode IN (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1);",
        "SELECT Phone FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Charter = 1 AND schools.FundingType = 'Directly funded' AND date(schools.OpenDate) > date('2000-01-01');"
      ]
    ]
  },
  {
    "id": 6,
    "db_id": "california_schools",
    "nlq": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
    "gold": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500",
    "evidence": "Magnet schools or offer a magnet program means that Magnet = 1",
    "infer_predictions": [
      [
        "SELECT T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr > 500 AND T2.Magnet = 1;",
        "SELECT School FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr > 500) AND Magnet = 1;",
        "SELECT School FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1;",
        "SELECT schools.School FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1;",
        "SELECT T2.School FROM schools AS T2 JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE T1.NumTstTakr > 500 AND T2.Magnet = 1;",
        "SELECT School FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr > 500) AND Magnet IS NOT NULL AND Magnet = 1;",
        "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr > 500 AND T2.Magnet = 1;",
        "SELECT School FROM schools WHERE EXISTS (SELECT 1 FROM satscores WHERE satscores.cds = schools.CDSCode AND NumTstTakr > 500) AND Magnet = 1;",
        "SELECT T2.School FROM schools T2, satscores T1 WHERE T2.CDSCode = T1.cds AND T1.NumTstTakr > 500 AND T2.Magnet = 1;",
        "SELECT School FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr > 500) AND Magnet = 1;"
      ]
    ]
  },
  {
    "id": 7,
    "db_id": "california_schools",
    "nlq": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
    "gold": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL ORDER BY T1.NumGE1500 DESC LIMIT 1;",
        "SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE NumGE1500 IS NOT NULL ORDER BY NumGE1500 DESC LIMIT 1);",
        "SELECT Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 IS NOT NULL ORDER BY satscores.NumGE1500 DESC LIMIT 1;",
        "WITH RankedSchools AS (SELECT T2.Phone, T1.NumGE1500 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL ORDER BY T1.NumGE1500 DESC) SELECT Phone FROM RankedSchools LIMIT 1;",
        "SELECT T2.Phone FROM satscores T1, schools T2 WHERE T1.cds = T2.CDSCode AND T1.NumGE1500 IS NOT NULL ORDER BY T1.NumGE1500 DESC LIMIT 1;",
        "SELECT Phone FROM (SELECT T2.Phone, T1.NumGE1500 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL) ORDER BY NumGE1500 DESC LIMIT 1;",
        "SELECT MAX(T2.Phone) FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL GROUP BY T1.NumGE1500 ORDER BY T1.NumGE1500 DESC LIMIT 1;",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 IS NOT NULL ORDER BY NumGE1500 DESC LIMIT 1);",
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL ORDER BY T1.NumGE1500 DESC FETCH FIRST 1 ROW ONLY;",
        "SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY NumGE1500 DESC NULLS LAST LIMIT 1);"
      ]
    ]
  },
  {
    "id": 9,
    "db_id": "california_schools",
    "nlq": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?",
    "gold": "SELECT COUNT(T2.`School Code`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';",
        "SELECT COUNT(T1.CDSCode) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';",
        "SELECT COUNT(*) FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';",
        "SELECT COUNT(T1.CDSCode) FROM schools T1, satscores T2 WHERE T1.CDSCode = T2.cds AND T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';",
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType LIKE 'Directly funded';",
        "SELECT COUNT(*) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';",
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';",
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';",
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';",
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';"
      ]
    ]
  },
  {
    "id": 10,
    "db_id": "california_schools",
    "nlq": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?",
    "gold": "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores T1 JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);",
        "SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);",
        "SELECT `FRPM Count (Ages 5-17)` FROM frpm WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL));",
        "WITH HighestScore AS (SELECT cds FROM satscores WHERE AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL)) SELECT `FRPM Count (Ages 5-17)` FROM frpm JOIN HighestScore ON frpm.CDSCode = HighestScore.cds;",
        "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores T1 INNER JOIN frpm T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1;",
        "SELECT `FRPM Count (Ages 5-17)` FROM frpm WHERE CDSCode IN (SELECT cds FROM satscores ORDER BY AvgScrRead DESC LIMIT 1);",
        "SELECT T2.`FRPM Count (Ages 5-17)` FROM (SELECT cds FROM satscores WHERE AvgScrRead IS NOT NULL ORDER BY AvgScrRead DESC LIMIT 1) T1 JOIN frpm T2 ON T1.cds = T2.CDSCode;",
        "SELECT `FRPM Count (Ages 5-17)` FROM frpm WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrRead DESC LIMIT 1);",
        "WITH MaxScore AS (SELECT MAX(AvgScrRead) AS MaxRead FROM satscores WHERE AvgScrRead IS NOT NULL) SELECT `FRPM Count (Ages 5-17)` FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (SELECT MaxRead FROM MaxScore);",
        "SELECT `FRPM Count (Ages 5-17)` FROM frpm WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL));"
      ]
    ]
  },
  {
    "id": 11,
    "db_id": "california_schools",
    "nlq": "Please list the codes of the schools with a total enrollment of over 500.",
    "gold": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
    "evidence": "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`",
    "infer_predictions": [
      [
        "SELECT CDSCode FROM frpm WHERE (COALESCE(`Enrollment (K-12)`, 0) + COALESCE(`Enrollment (Ages 5-17)`, 0)) > 500;",
        "SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500;",
        "SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` IS NOT NULL AND `Enrollment (Ages 5-17)` IS NOT NULL) AND (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500;",
        "SELECT CDSCode FROM frpm WHERE IFNULL(`Enrollment (K-12)`, 0) + IFNULL(`Enrollment (Ages 5-17)`, 0) > 500;",
        "SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500 AND `Enrollment (K-12)` IS NOT NULL AND `Enrollment (Ages 5-17)` IS NOT NULL;",
        "SELECT CDSCode FROM frpm WHERE (IFNULL(`Enrollment (K-12)`, 0) + IFNULL(`Enrollment (Ages 5-17)`, 0)) > 500;",
        "SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500 AND `Enrollment (K-12)` > 0 AND `Enrollment (Ages 5-17)` > 0;",
        "SELECT CDSCode FROM frpm WHERE (COALESCE(`Enrollment (K-12)`, 0) + COALESCE(`Enrollment (Ages 5-17)`, 0)) > 500;",
        "SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` IS NOT NULL AND `Enrollment (Ages 5-17)` IS NOT NULL) AND (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500;",
        "SELECT CDSCode FROM frpm WHERE (IFNULL(`Enrollment (K-12)`, 0) + IFNULL(`Enrollment (Ages 5-17)`, 0)) > 500;"
      ]
    ]
  },
  {
    "id": 12,
    "db_id": "california_schools",
    "nlq": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "gold": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
    "evidence": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "infer_predictions": [
      [
        "SELECT MAX(T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM satscores T1 JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 / T1.NumTstTakr > 0.3;",
        "SELECT MAX(free_rate) AS HighestEligibleFreeRate FROM (SELECT T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)` AS free_rate FROM satscores T1 INNER JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 / T1.NumTstTakr > 0.3);",
        "WITH EligibleSchools AS (SELECT T1.cds FROM satscores T1 WHERE T1.NumGE1500 / T1.NumTstTakr > 0.3) SELECT MAX(T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm T2 JOIN EligibleSchools ON T2.CDSCode = EligibleSchools.cds;",
        "SELECT MAX(T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM satscores T1, frpm T2 WHERE T1.cds = T2.CDSCode AND T1.NumGE1500 / T1.NumTstTakr > 0.3;",
        "SELECT MAX(eligible_free_rate) AS HighestEligibleFreeRate FROM (SELECT T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)` AS eligible_free_rate FROM satscores T1 JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 * 1.0 / T1.NumTstTakr > 0.3);",
        "SELECT MAX(eligible_free_rate) FROM (SELECT T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)` AS eligible_free_rate FROM satscores T1 JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 * 1.0 / T1.NumTstTakr > 0.3) AS subquery;",
        "WITH HighExcellence AS (SELECT cds FROM satscores WHERE NumGE1500 * 1.0 / NumTstTakr > 0.3) SELECT MAX(`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm WHERE CDSCode IN (SELECT cds FROM HighExcellence);",
        "SELECT MAX(T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM satscores T1 LEFT JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 / T1.NumTstTakr > 0.3;",
        "SELECT MAX(T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM satscores T1 RIGHT JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 / T1.NumTstTakr > 0.3;",
        "SELECT MAX(T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM satscores T1 CROSS JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 / T1.NumTstTakr > 0.3;"
      ]
    ]
  },
  {
    "id": 13,
    "db_id": "california_schools",
    "nlq": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.",
    "gold": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
    "evidence": "Excellence rate = NumGE1500 / NumTstTakr",
    "infer_predictions": [
      [
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumTstTakr IS NOT NULL ORDER BY (CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr) DESC LIMIT 3",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL ORDER BY (NumGE1500 * 1.0 / NumTstTakr) DESC LIMIT 3)",
        "SELECT T2.Phone FROM satscores T1 INNER JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumTstTakr IS NOT NULL ORDER BY (T1.NumGE1500 * 1.0 / T1.NumTstTakr) DESC LIMIT 3",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL ORDER BY (CAST(NumGE1500 AS REAL) / NumTstTakr) DESC LIMIT 3)",
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumTstTakr IS NOT NULL ORDER BY (T1.NumGE1500 / CAST(T1.NumTstTakr AS REAL)) DESC LIMIT 3",
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumTstTakr IS NOT NULL ORDER BY (T1.NumGE1500 / T1.NumTstTakr * 1.0) DESC LIMIT 3",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL ORDER BY (NumGE1500 / NumTstTakr * 1.0) DESC LIMIT 3)",
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumTstTakr IS NOT NULL ORDER BY (T1.NumGE1500 * 1.0 / CAST(T1.NumTstTakr AS REAL)) DESC LIMIT 3",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL ORDER BY (CAST(NumGE1500 AS REAL) / CAST(NumTstTakr AS REAL)) DESC LIMIT 3)",
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumTstTakr IS NOT NULL ORDER BY (T1.NumGE1500 / CAST(T1.NumTstTakr AS REAL)) DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 14,
    "db_id": "california_schools",
    "nlq": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
    "gold": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T1.NCESSchool FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (Ages 5-17)` IS NOT NULL ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5;",
        "SELECT NCESSchool FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5);",
        "SELECT schools.NCESSchool FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Enrollment (Ages 5-17)` IS NOT NULL ORDER BY frpm.`Enrollment (Ages 5-17)` DESC LIMIT 5;",
        "SELECT NCESSchool FROM schools JOIN frpm USING (CDSCode) WHERE `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5;",
        "SELECT NCESSchool FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5) AND `Enrollment (Ages 5-17)` IS NOT NULL;",
        "SELECT s.NCESSchool FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Enrollment (Ages 5-17)` > 0 ORDER BY f.`Enrollment (Ages 5-17)` DESC LIMIT 5;",
        "SELECT NCESSchool FROM schools WHERE EXISTS (SELECT 1 FROM frpm WHERE schools.CDSCode = frpm.CDSCode AND `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5);",
        "SELECT NCESSchool FROM schools INNER JOIN (SELECT CDSCode FROM frpm WHERE `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5) AS TopSchools ON schools.CDSCode = TopSchools.CDSCode;",
        "SELECT NCESSchool FROM (SELECT NCESSchool, `Enrollment (Ages 5-17)` FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5);",
        "SELECT NCESSchool FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Enrollment (Ages 5-17)` DESC FETCH FIRST 5 ROWS ONLY;"
      ]
    ]
  },
  {
    "id": 15,
    "db_id": "california_schools",
    "nlq": "Which active district has the highest average score in Reading?",
    "gold": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T1.District FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' AND T2.AvgScrRead IS NOT NULL GROUP BY T1.District ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 1;",
        "SELECT District FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE StatusType = 'Active' AND AvgScrRead IS NOT NULL GROUP BY District ORDER BY AVG(AvgScrRead) DESC LIMIT 1;",
        "SELECT TOP 1 T1.District FROM schools T1, satscores T2 WHERE T1.CDSCode = T2.cds AND T1.StatusType = 'Active' AND T2.AvgScrRead IS NOT NULL GROUP BY T1.District ORDER BY AVG(T2.AvgScrRead) DESC;",
        "SELECT District FROM (SELECT District, AVG(AvgScrRead) AS AverageReadingScore FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE StatusType = 'Active' AND AvgScrRead IS NOT NULL GROUP BY District) AS SubQuery ORDER BY AverageReadingScore DESC LIMIT 1;",
        "WITH DistrictScores AS (SELECT District, AVG(AvgScrRead) AS AvgReading FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE StatusType = 'Active' AND AvgScrRead IS NOT NULL GROUP BY District) SELECT District FROM DistrictScores ORDER BY AvgReading DESC LIMIT 1;",
        "SELECT District FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.StatusType = 'Active' AND satscores.AvgScrRead IS NOT NULL GROUP BY schools.District ORDER BY AVG(satscores.AvgScrRead) DESC FETCH FIRST 1 ROW ONLY;",
        "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' AND T2.AvgScrRead > 0 GROUP BY T1.District ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 1;",
        "SELECT T1.District FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' GROUP BY T1.District HAVING AVG(T2.AvgScrRead) IS NOT NULL ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 1;",
        "SELECT District FROM schools INNER JOIN satscores USING (CDSCode) WHERE StatusType = 'Active' AND AvgScrRead IS NOT NULL GROUP BY District ORDER BY AVG(AvgScrRead) DESC LIMIT 1;",
        "SELECT FIRST(District) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE StatusType = 'Active' AND AvgScrRead IS NOT NULL GROUP BY District ORDER BY AVG(AvgScrRead) DESC;"
      ]
    ]
  },
  {
    "id": 18,
    "db_id": "california_schools",
    "nlq": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
    "gold": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresco' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(T1.CDSCode) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(*) FROM schools T1, satscores T2 WHERE T1.CDSCode = T2.cds AND T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(DISTINCT T1.CDSCode) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(*) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(*) FROM schools T1 LEFT JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(*) FROM schools T1 RIGHT JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;",
        "SELECT COUNT(*) FROM schools T1 CROSS JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250;"
      ]
    ]
  },
  {
    "id": 19,
    "db_id": "california_schools",
    "nlq": "What is the phone number of the school that has the highest average score in Math?",
    "gold": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 1;",
        "SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1);",
        "SELECT T2.Phone FROM satscores T1 INNER JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 1;",
        "SELECT Phone FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1);",
        "SELECT MAX(T1.AvgScrMath), T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode GROUP BY T2.Phone ORDER BY MAX(T1.AvgScrMath) DESC LIMIT 1;",
        "SELECT T2.Phone FROM (SELECT cds, AvgScrMath FROM satscores ORDER BY AvgScrMath DESC LIMIT 1) AS HighestScore JOIN schools T2 ON HighestScore.cds = T2.CDSCode;",
        "SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1);",
        "SELECT T2.Phone FROM satscores T1, schools T2 WHERE T1.cds = T2.CDSCode AND T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 1;",
        "SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores));",
        "SELECT T2.Phone FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 20,
    "db_id": "california_schools",
    "nlq": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
    "gold": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(CDSCode) AS SchoolCount FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(*) AS NumberOfSchools FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';",
        "SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12';"
      ]
    ]
  },
  {
    "id": 22,
    "db_id": "california_schools",
    "nlq": "Which school in Contra Costa has the highest number of test takers?",
    "gold": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.cname = 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1;",
        "SELECT School FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1);",
        "SELECT T2.School FROM satscores T1 INNER JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.cname = 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1;",
        "SELECT MAX(T1.NumTstTakr), T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.cname = 'Contra Costa' GROUP BY T2.School ORDER BY MAX(T1.NumTstTakr) DESC LIMIT 1;",
        "SELECT School FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1);",
        "SELECT T2.School FROM satscores T1, schools T2 WHERE T1.cds = T2.CDSCode AND T1.cname = 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1;",
        "SELECT T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.cname = 'Contra Costa' ORDER BY T1.NumTstTakr DESC FETCH FIRST 1 ROW ONLY;",
        "SELECT T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.cname = 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1;",
        "SELECT School FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1);",
        "SELECT T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.cname LIKE 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 23,
    "db_id": "california_schools",
    "nlq": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "gold": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
    "evidence": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "infer_predictions": [
      [
        "SELECT T1.`School Name`, T2.Street FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL AND ABS(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30;",
        "SELECT T1.`School Name`, T2.Street FROM frpm T1 INNER JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30 AND T1.`Enrollment (K-12)` > 0 AND T1.`Enrollment (Ages 5-17)` > 0;",
        "SELECT `School Name`, Street FROM frpm JOIN schools USING (CDSCode) WHERE `Enrollment (K-12)` > `Enrollment (Ages 5-17)` + 30 AND `Enrollment (K-12)` IS NOT NULL AND `Enrollment (Ages 5-17)` IS NOT NULL;",
        "SELECT T1.`School Name`, T2.Street FROM frpm AS T1, schools AS T2 WHERE T1.CDSCode = T2.CDSCode AND T1.`Enrollment (K-12)` > T1.`Enrollment (Ages 5-17)` + 30 AND T1.`Enrollment (K-12)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL;",
        "SELECT T1.`School Name`, T2.Street FROM frpm T1, schools T2 WHERE T1.CDSCode = T2.CDSCode AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30 AND T1.`Enrollment (K-12)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL;",
        "SELECT T1.`School Name`, T2.Street FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` > T1.`Enrollment (Ages 5-17)` + 30;",
        "SELECT T1.`School Name`, T2.Street FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30;",
        "SELECT T1.`School Name`, T2.Street FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > 30 AND T1.`Enrollment (K-12)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL;",
        "SELECT T1.`School Name`, T2.Street FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` > T1.`Enrollment (Ages 5-17)` + 30 AND T1.`Enrollment (K-12)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL;",
        "SELECT T1.`School Name`, T2.Street FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > 30 AND T1.`Enrollment (K-12)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 24,
    "db_id": "california_schools",
    "nlq": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "gold": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
    "evidence": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)",
    "infer_predictions": [
      [
        "SELECT T3.School FROM schools T3 JOIN frpm T1 ON T3.CDSCode = T1.CDSCode JOIN satscores T2 ON T3.CDSCode = T2.cds WHERE T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` > 0.1 AND T2.NumGE1500 > 0;",
        "SELECT School FROM schools WHERE CDSCode IN (SELECT T1.CDSCode FROM frpm T1 WHERE T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` > 0.1) AND CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 > 0);",
        "SELECT School FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)` > 0.1 AND satscores.NumGE1500 > 0;",
        "SELECT T3.School FROM schools T3, frpm T1, satscores T2 WHERE T3.CDSCode = T1.CDSCode AND T3.CDSCode = T2.cds AND T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` > 0.1 AND T2.NumGE1500 > 0;",
        "SELECT DISTINCT School FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Free Meal Count (K-12)` / `Enrollment (K-12)` > 0.1) AND CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 > 0);",
        "SELECT School FROM schools WHERE EXISTS (SELECT 1 FROM frpm WHERE frpm.CDSCode = schools.CDSCode AND `Free Meal Count (K-12)` / `Enrollment (K-12)` > 0.1) AND EXISTS (SELECT 1 FROM satscores WHERE satscores.cds = schools.CDSCode AND NumGE1500 > 0);",
        "SELECT T3.School FROM schools T3 JOIN (SELECT CDSCode FROM frpm WHERE `Free Meal Count (K-12)` / `Enrollment (K-12)` > 0.1) T1 ON T3.CDSCode = T1.CDSCode JOIN (SELECT cds FROM satscores WHERE NumGE1500 > 0) T2 ON T3.CDSCode = T2.cds;",
        "SELECT School FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Free Meal Count (K-12)` / `Enrollment (K-12)` > 0.1 INTERSECT SELECT cds FROM satscores WHERE NumGE1500 > 0);",
        "SELECT School FROM schools AS T3 JOIN frpm AS T1 ON T3.CDSCode = T1.CDSCode JOIN satscores AS T2 ON T3.CDSCode = T2.cds WHERE T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` > 0.1 AND T2.NumGE1500 > 0;",
        "SELECT T3.School FROM schools T3 WHERE EXISTS (SELECT * FROM frpm T1 WHERE T1.CDSCode = T3.CDSCode AND T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` > 0.1) AND EXISTS (SELECT * FROM satscores T2 WHERE T2.cds = T3.CDSCode AND T2.NumGE1500 > 0)"
      ]
    ]
  },
  {
    "id": 27,
    "db_id": "california_schools",
    "nlq": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "gold": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
    "evidence": "Communication number refers to phone number.",
    "infer_predictions": [
      [
        "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01') AND T2.AvgScrWrite IS NOT NULL;",
        "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01') AND T2.AvgScrWrite IS NOT NULL;",
        "SELECT School, AvgScrWrite, Phone FROM schools JOIN satscores ON CDSCode = cds WHERE (OpenDate > '1991-12-31' OR ClosedDate < '2000-01-01') AND AvgScrWrite IS NOT NULL;",
        "SELECT schools.School, satscores.AvgScrWrite, schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE (schools.OpenDate > '1991-12-31' OR schools.ClosedDate < '2000-01-01') AND satscores.AvgScrWrite IS NOT NULL;",
        "SELECT School, AvgScrWrite, Phone FROM schools, satscores WHERE schools.CDSCode = satscores.cds AND (schools.OpenDate > '1991-12-31' OR schools.ClosedDate < '2000-01-01') AND satscores.AvgScrWrite IS NOT NULL;",
        "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01') AND T2.AvgScrWrite IS NOT NULL;",
        "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools T1, satscores T2 WHERE T1.CDSCode = T2.cds AND (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01') AND T2.AvgScrWrite IS NOT NULL;",
        "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01') AND T2.AvgScrWrite IS NOT NULL;",
        "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01') AND T2.AvgScrWrite IS NOT NULL;",
        "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE (T1.OpenDate > '1991-12-31' OR T1.ClosedDate < '2000-01-01') AND T2.AvgScrWrite IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 28,
    "db_id": "california_schools",
    "nlq": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "gold": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "infer_predictions": [
      [
        "SELECT T1.School, T1.DOCType FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Locally funded' AND (T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM schools T4 JOIN frpm T3 ON T4.CDSCode = T3.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "SELECT School, DOCType FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM frpm JOIN schools ON schools.CDSCode = frpm.CDSCode WHERE FundingType = 'Locally funded')) AND FundingType = 'Locally funded'",
        "SELECT S.School, S.DOCType FROM schools S INNER JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.FundingType = 'Locally funded' AND (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(F2.`Enrollment (K-12)` - F2.`Enrollment (Ages 5-17)`) FROM schools S2 JOIN frpm F2 ON S2.CDSCode = F2.CDSCode WHERE S2.FundingType = 'Locally funded')",
        "SELECT S.School, S.DOCType FROM schools S, frpm F WHERE S.CDSCode = F.CDSCode AND S.FundingType = 'Locally funded' AND (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE FundingType = 'Locally funded')",
        "SELECT S.School, S.DOCType FROM schools S JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.FundingType = 'Locally funded' HAVING (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE FundingType = 'Locally funded')",
        "SELECT S.School, S.DOCType FROM schools S JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.FundingType = 'Locally funded' AND (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM frpm F2 JOIN schools S2 ON F2.CDSCode = S2.CDSCode WHERE S2.FundingType = 'Locally funded')",
        "SELECT S.School, S.DOCType FROM schools S JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.FundingType = 'Locally funded' AND (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(F2.`Enrollment (K-12)` - F2.`Enrollment (Ages 5-17)`) FROM frpm F2 JOIN schools S2 ON F2.CDSCode = S2.CDSCode WHERE S2.FundingType = 'Locally funded')",
        "SELECT S.School, S.DOCType FROM schools S JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.FundingType = 'Locally funded' AND (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.FundingType = 'Locally funded')",
        "SELECT S.School, S.DOCType FROM schools S JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.FundingType = 'Locally funded' AND (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM frpm F2 INNER JOIN schools S2 ON F2.CDSCode = S2.CDSCode WHERE S2.FundingType = 'Locally funded')",
        "SELECT S.School, S.DOCType FROM schools S JOIN frpm F ON S.CDSCode = F.CDSCode WHERE S.FundingType = 'Locally funded' AND (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(F2.`Enrollment (K-12)` - F2.`Enrollment (Ages 5-17)`) FROM schools S2 INNER JOIN frpm F2 ON S2.CDSCode = F2.CDSCode WHERE S2.FundingType = 'Locally funded')"
      ]
    ]
  },
  {
    "id": 29,
    "db_id": "california_schools",
    "nlq": "When did the first-through-twelfth-grade school with the largest enrollment open?",
    "gold": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "evidence": "K-12 means First-through-twelfth-grade",
    "infer_predictions": [
      [
        "SELECT T1.OpenDate FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSserved = 'K-12' ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1",
        "SELECT OpenDate FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1) AND GSserved = 'K-12'",
        "SELECT OpenDate FROM schools WHERE GSserved = 'K-12' AND CDSCode = (SELECT CDSCode FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1)",
        "SELECT T1.OpenDate FROM schools T1 INNER JOIN (SELECT CDSCode, `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1) T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSserved = 'K-12'",
        "SELECT OpenDate FROM schools WHERE GSserved = 'K-12' AND CDSCode = (SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` = (SELECT MAX(`Enrollment (K-12)`) FROM frpm))",
        "SELECT OpenDate FROM (SELECT T1.OpenDate, T2.`Enrollment (K-12)` FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSserved = 'K-12' ORDER BY T2.`Enrollment (K-12)` DESC) WHERE rowid = 1",
        "SELECT OpenDate FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` >= ALL (SELECT `Enrollment (K-12)` FROM frpm)) AND GSserved = 'K-12'",
        "SELECT T1.OpenDate FROM schools T1, frpm T2 WHERE T1.CDSCode = T2.CDSCode AND T1.GSserved = 'K-12' ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1",
        "SELECT OpenDate FROM schools WHERE GSserved = 'K-12' AND CDSCode = (SELECT CDSCode FROM frpm ORDER BY `Enrollment (K-12)` DESC, CDSCode ASC LIMIT 1)",
        "SELECT OpenDate FROM schools WHERE GSserved = 'K-12' AND CDSCode = (SELECT CDSCode FROM frpm SORT BY `Enrollment (K-12)` DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 30,
    "db_id": "california_schools",
    "nlq": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
    "gold": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5",
    "evidence": "K-12 refers to students in grades 1 through 12.",
    "infer_predictions": [
      [
        "SELECT T2.City FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5",
        "SELECT City FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` IS NOT NULL ORDER BY `Enrollment (K-12)` ASC LIMIT 5)",
        "SELECT T2.City FROM schools T2 INNER JOIN frpm T1 ON T2.CDSCode = T1.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` LIMIT 5",
        "SELECT City FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm ORDER BY `Enrollment (K-12)` ASC LIMIT 5) AND `Enrollment (K-12)` IS NOT NULL",
        "SELECT T2.City FROM schools T2, frpm T1 WHERE T2.CDSCode = T1.CDSCode AND T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5",
        "SELECT City FROM (SELECT T2.City, T1.`Enrollment (K-12)` FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` ASC) AS SubQuery LIMIT 5",
        "SELECT T2.City FROM schools T2 JOIN (SELECT CDSCode, `Enrollment (K-12)` FROM frpm WHERE `Enrollment (K-12)` IS NOT NULL ORDER BY `Enrollment (K-12)` ASC LIMIT 5) T1 ON T2.CDSCode = T1.CDSCode",
        "SELECT T2.City FROM schools T2 JOIN frpm T1 ON T2.CDSCode = T1.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` ASC FETCH FIRST 5 ROWS ONLY",
        "SELECT City FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` IS NOT NULL ORDER BY `Enrollment (K-12)` ASC FETCH FIRST 5 ROWS ONLY)",
        "SELECT T2.City FROM schools T2 JOIN frpm T1 ON T2.CDSCode = T1.CDSCode WHERE T1.`Enrollment (K-12)` > 0 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5"
      ]
    ]
  },
  {
    "id": 31,
    "db_id": "california_schools",
    "nlq": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "gold": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
    "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "infer_predictions": [
      [
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 INNER JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1, schools T2 WHERE T1.CDSCode = T2.CDSCode AND T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 USING (CDSCode) WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` > 0 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE NOT T1.`Enrollment (K-12)` IS NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
        "SELECT T1.CDSCode, T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` AS EligibleFreeRate FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9"
      ]
    ]
  },
  {
    "id": 32,
    "db_id": "california_schools",
    "nlq": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "gold": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
    "evidence": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`",
    "infer_predictions": [
      [
        "SELECT (T2.`FRPM Count (K-12)` / T2.`Enrollment (K-12)`) AS Meal_Rate FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '66' AND T2.`Enrollment (K-12)` IS NOT NULL AND T2.`FRPM Count (K-12)` IS NOT NULL ORDER BY T2.`FRPM Count (K-12)` DESC LIMIT 5",
        "SELECT Meal_Rate FROM (SELECT T2.CDSCode, (T2.`FRPM Count (K-12)` / T2.`Enrollment (K-12)`) AS Meal_Rate FROM schools T1 INNER JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '66' AND T2.`Enrollment (K-12)` > 0 ORDER BY T2.`FRPM Count (K-12)` DESC) AS SubQuery LIMIT 5",
        "SELECT (frpm.`FRPM Count (K-12)` / frpm.`Enrollment (K-12)`) AS Meal_Rate FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.SOC = '66' AND frpm.`Enrollment (K-12)` > 0 AND frpm.`FRPM Count (K-12)` > 0 ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5",
        "SELECT Meal_Rate FROM (SELECT (frpm.`FRPM Count (K-12)` / frpm.`Enrollment (K-12)`) AS Meal_Rate FROM schools, frpm WHERE schools.CDSCode = frpm.CDSCode AND schools.SOC = '66' ORDER BY frpm.`FRPM Count (K-12)` DESC) WHERE ROWNUM <= 5",
        "SELECT TOP 5 (frpm.`FRPM Count (K-12)` / frpm.`Enrollment (K-12)`) AS Meal_Rate FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.SOC = '66' AND frpm.`Enrollment (K-12)` IS NOT NULL AND frpm.`FRPM Count (K-12)` IS NOT NULL ORDER BY frpm.`FRPM Count (K-12)` DESC",
        "SELECT Meal_Rate FROM (SELECT T1.CDSCode, (T2.`FRPM Count (K-12)` / T2.`Enrollment (K-12)`) AS Meal_Rate FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '66' ORDER BY T2.`FRPM Count (K-12)` DESC LIMIT 5) AS TopSchools",
        "SELECT (T2.`FRPM Count (K-12)` / T2.`Enrollment (K-12)`) AS Meal_Rate FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '66' AND T2.`Enrollment (K-12)` > 0 AND T2.`FRPM Count (K-12)` > 0 ORDER BY T2.`FRPM Count (K-12)` DESC LIMIT 5",
        "SELECT Meal_Rate FROM (SELECT T1.CDSCode, (T2.`FRPM Count (K-12)` / T2.`Enrollment (K-12)`) AS Meal_Rate FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '66' AND T2.`Enrollment (K-12)` IS NOT NULL AND T2.`FRPM Count (K-12)` IS NOT NULL ORDER BY T2.`FRPM Count (K-12)` DESC) AS RankedSchools LIMIT 5",
        "SELECT (frpm.`FRPM Count (K-12)` / frpm.`Enrollment (K-12)`) AS Meal_Rate FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.SOC = '66' AND frpm.`Enrollment (K-12)` IS NOT NULL AND frpm.`FRPM Count (K-12)` IS NOT NULL ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5",
        "SELECT Meal_Rate FROM (SELECT T1.CDSCode, (T2.`FRPM Count (K-12)` / T2.`Enrollment (K-12)`) AS Meal_Rate FROM schools T1 INNER JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '66' AND T2.`Enrollment (K-12)` > 0 ORDER BY T2.`FRPM Count (K-12)` DESC) AS TopFive LIMIT 5"
      ]
    ]
  },
  {
    "id": 33,
    "db_id": "california_schools",
    "nlq": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
    "gold": "SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.School, T2.Website FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
        "SELECT School, Website FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Free Meal Count (Ages 5-17)` >= 1900 AND `Free Meal Count (Ages 5-17)` <= 2000);",
        "SELECT s.School, s.Website FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
        "SELECT School, Website FROM schools WHERE EXISTS (SELECT 1 FROM frpm WHERE `Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND schools.CDSCode = frpm.CDSCode);",
        "SELECT s.School, s.Website FROM schools s, frpm f WHERE s.CDSCode = f.CDSCode AND f.`Free Meal Count (Ages 5-17)` >= 1900 AND f.`Free Meal Count (Ages 5-17)` <= 2000;",
        "SELECT School, Website FROM schools JOIN frpm USING (CDSCode) WHERE `Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
        "SELECT s.School, s.Website FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Free Meal Count (Ages 5-17)` > 1899 AND f.`Free Meal Count (Ages 5-17)` < 2001;",
        "SELECT School, Website FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Free Meal Count (Ages 5-17)` > 1899 AND `Free Meal Count (Ages 5-17)` < 2001);",
        "SELECT s.School, s.Website FROM schools s LEFT JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
        "SELECT School, Website FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE `Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000)"
      ]
    ]
  },
  {
    "id": 36,
    "db_id": "california_schools",
    "nlq": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "gold": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "evidence": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500",
    "infer_predictions": [
      [
        "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)",
        "SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3 FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL))",
        "SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3 FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL))",
        "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 INNER JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)",
        "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1, schools T2 WHERE T1.cds = T2.CDSCode AND T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)",
        "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 >= ALL (SELECT NumGE1500 FROM satscores WHERE NumGE1500 IS NOT NULL)",
        "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)",
        "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(T1.NumGE1500) FROM satscores T1 WHERE T1.NumGE1500 IS NOT NULL)",
        "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLaine3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL) AND T1.NumGE1500 IS NOT NULL"
      ]
    ]
  },
  {
    "id": 37,
    "db_id": "california_schools",
    "nlq": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "gold": "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools AS T2 INNER JOIN (SELECT cds, CAST(NumGE1500 AS REAL) / NumTstTakr AS rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) AS T1 ON T2.CDSCode = T1.cds WHERE T1.rate = (SELECT MIN(CAST(NumGE1500 AS REAL) / NumTstTakr) AS min_rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) ORDER BY T2.CDSCode",
    "evidence": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
    "infer_predictions": [
      [
        "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr > 0 AND T1.NumGE1500 IS NOT NULL ORDER BY (CAST(T1.NumGE1500 AS FLOAT) / T1.NumTstTakr) ASC LIMIT 1;",
        "SELECT Street, City, Zip, State FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE NumTstTakr > 0 AND NumGE1500 IS NOT NULL ORDER BY NumGE1500 * 1.0 / NumTstTakr LIMIT 1);",
        "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools T2 INNER JOIN (SELECT cds, NumGE1500, NumTstTakr FROM satscores WHERE NumTstTakr > 0 AND NumGE1500 IS NOT NULL ORDER BY NumGE1500 * 1.0 / NumTstTakr ASC LIMIT 1) T1 ON T2.CDSCode = T1.cds;",
        "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools T2, (SELECT cds FROM satscores WHERE NumTstTakr > 0 AND NumGE1500 IS NOT NULL ORDER BY NumGE1500 / CAST(NumTstTakr AS FLOAT) ASC LIMIT 1) T1 WHERE T2.CDSCode = T1.cds;",
        "SELECT Street, City, Zip, State FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr > 0 AND NumGE1500 IS NOT NULL ORDER BY NumGE1500 / NumTstTakr ASC LIMIT 1);",
        "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools T2 JOIN (SELECT cds FROM satscores WHERE NumTstTakr > 0 AND NumGE1500 IS NOT NULL ORDER BY NumGE1500 * 1.0 / NumTstTakr ASC LIMIT 1) T1 ON T2.CDSCode = T1.cds;",
        "SELECT Street, City, Zip, State FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE NumTstTakr > 0 AND NumGE1500 IS NOT NULL ORDER BY NumGE1500 / CAST(NumTstTakr AS FLOAT) ASC LIMIT 1);",
        "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools T2 JOIN satscores T1 ON T2.CDSCode = T1.cds WHERE T1.NumTstTakr > 0 AND T1.NumGE1500 IS NOT NULL ORDER BY T1.NumGE1500 / CAST(T1.NumTstTakr AS FLOAT) ASC LIMIT 1;",
        "SELECT Street, City, Zip, State FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE NumTstTakr > 0 AND NumGE1500 IS NOT NULL ORDER BY NumGE1500 * 1.0 / NumTstTakr LIMIT 1);",
        "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools T2 INNER JOIN (SELECT cds FROM satscores WHERE NumTstTakr > 0 AND NumGE1500 IS NOT NULL ORDER BY NumGE1500 / NumTstTakr ASC LIMIT 1) T1 ON T2.CDSCode = T1.cds;"
      ]
    ]
  },
  {
    "id": 39,
    "db_id": "california_schools",
    "nlq": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "gold": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
    "evidence": "between 1/1/1980 and 12/31/1980 means the year = 1980",
    "infer_predictions": [
      [
        "SELECT AVG(T2.NumTstTakr) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'Fresno' AND strftime('%Y', T1.OpenDate) = '1980';",
        "SELECT AVG(T2.NumTstTakr) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'Fresno' AND T1.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
        "SELECT AVG(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE City = 'Fresno' AND strftime('%Y', OpenDate) = '1980');",
        "SELECT AVG(T2.NumTstTakr) AS AverageTestTakers FROM schools T1, satscores T2 WHERE T1.CDSCode = T2.cds AND T1.City = 'Fresno' AND T1.OpenDate LIKE '1980%';",
        "SELECT AVG(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE City = 'Fresno' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31');",
        "SELECT AVG(T2.NumTstTakr) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'Fresno' AND T1.OpenDate >= '1980-01-01' AND T1.OpenDate <= '1980-12-31';",
        "SELECT AVG(T2.NumTstTakr) FROM schools T1 LEFT JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'Fresno' AND T1.OpenDate LIKE '1980%';",
        "SELECT AVG(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE City = 'Fresno' AND YEAR(OpenDate) = 1980);",
        "SELECT AVG(T2.NumTstTakr) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'Fresno' AND YEAR(T1.OpenDate) = 1980;",
        "SELECT AVG(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE City = 'Fresno' AND OpenDate LIKE '1980%');"
      ]
    ]
  },
  {
    "id": 41,
    "db_id": "california_schools",
    "nlq": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "gold": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
    "evidence": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
    "infer_predictions": [
      [
        "SELECT T1.School FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' AND T2.AvgScrRead IS NOT NULL AND T1.School IN (SELECT School FROM (SELECT School, RANK() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS rank FROM schools JOIN satscores ON CDSCode = cds WHERE Virtual = 'F' AND AvgScrRead IS NOT NULL) WHERE rank <= 5)",
        "SELECT School FROM (SELECT T1.School, T1.County, T2.AvgScrRead, RANK() OVER (PARTITION BY T1.County ORDER BY T2.AvgScrRead DESC) AS ranking FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' AND T2.AvgScrRead IS NOT NULL) WHERE ranking <= 5",
        "SELECT School FROM (SELECT School, County, AvgScrRead, DENSE_RANK() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS dense_rank FROM schools JOIN satscores ON CDSCode = cds WHERE Virtual = 'F' AND AvgScrRead IS NOT NULL) WHERE dense_rank <= 5",
        "SELECT distinct School FROM (SELECT School, County, AvgScrRead, ROW_NUMBER() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS row_num FROM schools JOIN satscores ON CDSCode = cds WHERE Virtual = 'F' AND AvgScrRead IS NOT NULL) sub WHERE row_num <= 5",
        "SELECT T1.School FROM schools T1, satscores T2 WHERE T1.CDSCode = T2.cds AND T1.Virtual = 'F' AND T2.AvgScrRead IS NOT NULL AND (SELECT COUNT(*) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE County = T1.County AND Virtual = 'F') AND AvgScrRead > T2.AvgScrRead) < 5",
        "SELECT School FROM (SELECT School, County, AvgScrRead, NTILE(5) OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS tile FROM schools JOIN satscores ON CDSCode = cds WHERE Virtual = 'F' AND AvgScrRead IS NOT NULL) WHERE tile = 1",
        "SELECT School FROM (SELECT School, County, AvgScrRead, PERCENT_RANK() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS perc_rank FROM schools JOIN satscores ON CDSCode = cds WHERE Virtual = 'F' AND AvgScrRead IS NOT NULL) WHERE perc_rank <= 0.2",
        "SELECT School FROM (SELECT School, County, AvgScrRead, CUME_DIST() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS cume_dist FROM schools JOIN satscores ON CDSCode = cds WHERE Virtual = 'F' AND AvgScrRead IS NOT NULL) WHERE cume_dist <= 0.2",
        "SELECT T1.School FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' AND T2.AvgScrRead IS NOT NULL ORDER BY T1.County, T2.AvgScrRead DESC LIMIT 5",
        "SELECT School FROM (SELECT School, County, AvgScrRead, RANK() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS rank FROM schools JOIN satscores ON CDSCode = cds WHERE Virtual = 'F' AND AvgScrRead IS NOT NULL) sub WHERE rank <= 5"
      ]
    ]
  },
  {
    "id": 42,
    "db_id": "california_schools",
    "nlq": "What is the type of education offered in the school who scored the highest average in Math?",
    "gold": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.EdOpsName FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL);",
        "SELECT EdOpsName FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL));",
        "SELECT T2.EdOpsName FROM schools T2 INNER JOIN satscores T1 ON T2.CDSCode = T1.cds WHERE T1.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL);",
        "SELECT EdOpsName FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1);",
        "SELECT T2.EdOpsName FROM schools T2, satscores T1 WHERE T2.CDSCode = T1.cds AND T1.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL);",
        "SELECT EdOpsName FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1);",
        "SELECT T2.EdOpsName FROM schools T2 JOIN satscores T1 ON T2.CDSCode = T1.cds WHERE T1.AvgScrMath = (SELECT MAX(T1.AvgScrMath) FROM satscores T1 WHERE T1.AvgScrMath IS NOT NULL);",
        "SELECT EdOpsName FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores));",
        "SELECT T2.EdOpsName FROM schools T2 JOIN satscores T1 ON T2.CDSCode = T1.cds ORDER BY T1.AvgScrMath DESC LIMIT 1;",
        "SELECT EdOpsName FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL) LIMIT 1);"
      ]
    ]
  },
  {
    "id": 43,
    "db_id": "california_schools",
    "nlq": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
    "gold": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1",
    "evidence": "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite",
    "infer_predictions": [
      [
        "SELECT T1.AvgScrMath FROM satscores T1 WHERE T1.cds = (SELECT cds FROM satscores WHERE (AvgScrMath + AvgScrRead + AvgScrWrite) IS NOT NULL ORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) ASC LIMIT 1)",
        "SELECT AvgScrMath FROM satscores WHERE cds IN (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL ORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) ASC LIMIT 1)",
        "SELECT T1.AvgScrMath FROM satscores T1 JOIN (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL ORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) ASC LIMIT 1) T2 ON T1.cds = T2.cds",
        "SELECT T1.AvgScrMath FROM satscores T1 WHERE T1.cds = (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL ORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) ASC LIMIT 1)",
        "WITH RankedScores AS (SELECT cds, (AvgScrMath + AvgScrRead + AvgScrWrite) AS TotalScore FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL) SELECT AvgScrMath FROM satscores WHERE cds = (SELECT cds FROM RankedScores ORDER BY TotalScore ASC LIMIT 1)",
        "SELECT T1.AvgScrMath FROM satscores T1 INNER JOIN (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL ORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) ASC LIMIT 1) T2 ON T1.cds = T2.cds",
        "SELECT T1.AvgScrMath FROM satscores T1 WHERE T1.cds = (SELECT cds FROM (SELECT cds, (AvgScrMath + AvgScrRead + AvgScrWrite) AS TotalScore FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL) ORDER BY TotalScore ASC LIMIT 1)",
        "SELECT T1.AvgScrMath FROM satscores T1 WHERE T1.cds = (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL ORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) ASC LIMIT 1)",
        "SELECT T1.AvgScrMath FROM satscores T1 WHERE T1.cds = (SELECT cds FROM satscores ORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) ASC LIMIT 1)",
        "SELECT T1.AvgScrMath FROM satscores T1 WHERE T1.cds = (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL ORDER BY (AvgScrMath + AvgScrRead + AvgScrWrite) ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 44,
    "db_id": "california_schools",
    "nlq": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.",
    "gold": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)",
        "SELECT City, AvgScrWrite FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)",
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1 INNER JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)",
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1, schools T2 WHERE T1.cds = T2.CDSCode AND T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)",
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(T1.NumGE1500) FROM satscores T1 WHERE T1.NumGE1500 IS NOT NULL)",
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)",
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL) AND T1.NumGE1500 IS NOT NULL",
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL) ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL) ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL) ORDER BY T1.NumGE1500 DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 46,
    "db_id": "california_schools",
    "nlq": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "gold": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "evidence": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
    "infer_predictions": [
      [
        "SELECT T1.CDSCode FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = '31' AND T2.`Enrollment (K-12)` IS NOT NULL ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1;",
        "SELECT T1.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = '31' AND T2.`Enrollment (K-12)` IS NOT NULL ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1;",
        "SELECT schools.CDSCode FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.DOC = '31' AND frpm.`Enrollment (K-12)` IS NOT NULL ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 1;",
        "SELECT CDSCode FROM schools INNER JOIN frpm USING (CDSCode) WHERE DOC = '31' AND `Enrollment (K-12)` IS NOT NULL ORDER BY `Enrollment (K-12)` DESC LIMIT 1;",
        "SELECT CDSCode FROM schools, frpm WHERE schools.CDSCode = frpm.CDSCode AND DOC = '31' AND `Enrollment (K-12)` IS NOT NULL ORDER BY `Enrollment (K-12)` DESC LIMIT 1;",
        "SELECT T1.CDSCode FROM schools T1, frpm T2 WHERE T1.CDSCode = T2.CDSCode AND T1.DOC = '31' AND T2.`Enrollment (K-12)` > 0 ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1;",
        "SELECT T1.CDSCode FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = '31' ORDER BY T2.`Enrollment (K-12)` DESC NULLS LAST LIMIT 1;",
        "SELECT T1.CDSCode FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = '31' AND T2.`Enrollment (K-12)` IS NOT NULL ORDER BY T2.`Enrollment (K-12)` DESC FETCH FIRST ROW ONLY;",
        "SELECT MAX(T2.`Enrollment (K-12)`) AS MaxEnrollment, T1.CDSCode FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = '31' GROUP BY T1.CDSCode ORDER BY MaxEnrollment DESC LIMIT 1;",
        "SELECT T1.CDSCode FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = '31' AND T2.`Enrollment (K-12)` IS NOT NULL ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 47,
    "db_id": "california_schools",
    "nlq": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "gold": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
    "evidence": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12",
    "infer_predictions": [
      [
        "SELECT COUNT(*) / 12 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980';",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980') / 12 AS Monthly_Average;",
        "SELECT COUNT(*) / 12.0 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980';",
        "SELECT AVG(Count) AS Monthly_Average FROM (SELECT COUNT(*) AS Count FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980' GROUP BY strftime('%m', OpenDate));",
        "SELECT COUNT(*) / 12 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
        "SELECT (COUNT(*) / 12) AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980';",
        "SELECT COUNT(*) / 12 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND OpenDate LIKE '1980%';",
        "SELECT COUNT(*) / 12 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980';",
        "SELECT COUNT(*) / 12 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980';",
        "SELECT COUNT(*) / 12 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980';"
      ]
    ]
  },
  {
    "id": 48,
    "db_id": "california_schools",
    "nlq": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "gold": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
    "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
    "infer_predictions": [
      [
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND StatusType = 'Merged' AND DOC = '54') * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND StatusType = 'Merged' AND DOC = '52') AS ratio FROM schools LIMIT 1;",
        "WITH Unified AS (SELECT COUNT(*) AS count FROM schools WHERE County = 'Orange' AND StatusType = 'Merged' AND DOC = '54'), Elementary AS (SELECT COUNT(*) AS count FROM schools WHERE County = 'Orange' AND StatusType = 'Merged' AND DOC = '52') SELECT (SELECT count FROM Unified) * 1.0 / (SELECT count FROM Elementary) AS ratio;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '54' AND StatusType = 'Merged') / CAST((SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '52' AND StatusType = 'Merged') AS FLOAT) AS ratio;",
        "SELECT u.count * 1.0 / e.count AS ratio FROM (SELECT COUNT(*) AS count FROM schools WHERE County = 'Orange' AND DOC = '54' AND StatusType = 'Merged') u, (SELECT COUNT(*) AS count FROM schools WHERE County = 'Orange' AND DOC = '52' AND StatusType = 'Merged') e;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND StatusType = 'Merged' AND DOC = '54') * 1.0 / NULLIF((SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND StatusType = 'Merged' AND DOC = '52'), 0) AS ratio;",
        "SELECT Unified.count / CAST(Elementary.count AS REAL) AS ratio FROM (SELECT COUNT(*) AS count FROM schools WHERE County = 'Orange' AND DOC = '54' AND StatusType = 'Merged') Unified CROSS JOIN (SELECT COUNT(*) AS count FROM schools WHERE County = 'Orange' AND DOC = '52' AND StatusType = 'Merged') Elementary;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '54' AND StatusType = 'Merged') * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '52' AND StatusType = 'Merged') AS ratio FROM dual;",
        "SELECT (COUNT(CASE WHEN DOC = '54' THEN 1 END) * 1.0 / COUNT(CASE WHEN DOC = '52' THEN 1 END)) AS ratio FROM schools WHERE County = 'Orange' AND StatusType = 'Merged';",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '54' AND StatusType = 'Merged') * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '52' AND StatusType = 'Merged') AS ratio FROM schools WHERE County = 'Orange' GROUP BY County;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '54' AND StatusType = 'Merged') / CAST((SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = '52' AND StatusType = 'Merged') AS FLOAT) AS ratio FROM schools WHERE County = 'Orange' AND StatusType = 'Merged' GROUP BY County;"
      ]
    ]
  },
  {
    "id": 49,
    "db_id": "california_schools",
    "nlq": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "gold": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
    "infer_predictions": [
      [
        "SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County, School, ClosedDate ORDER BY COUNT(*) DESC LIMIT 1;",
        "SELECT T1.County, T1.School, T1.ClosedDate FROM schools AS T1 WHERE T1.StatusType = 'Closed' GROUP BY T1.County, T1.School, T1.ClosedDate HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM schools WHERE StatusType = 'Closed' GROUP BY County));",
        "SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' ORDER BY (SELECT COUNT(*) FROM schools AS T2 WHERE T2.County = schools.County AND T2.StatusType = 'Closed') DESC LIMIT 1;",
        "WITH ClosedSchools AS (SELECT County, School, ClosedDate, COUNT(*) OVER (PARTITION BY County) AS CountyClosedCount FROM schools WHERE StatusType = 'Closed') SELECT County, School, ClosedDate FROM ClosedSchools WHERE CountyClosedCount = (SELECT MAX(CountyClosedCount) FROM ClosedSchools);",
        "SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' AND County IN (SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1);",
        "SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' ORDER BY (SELECT COUNT(*) FROM schools T2 WHERE T2.StatusType = 'Closed' AND T2.County = schools.County) DESC LIMIT 1;",
        "SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County, School, ClosedDate HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT County, COUNT(*) AS Cnt FROM schools WHERE StatusType = 'Closed' GROUP BY County));",
        "SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' AND County = (SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1);",
        "SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County, School, ClosedDate ORDER BY COUNT(County) DESC LIMIT 1;",
        "SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County, School, ClosedDate HAVING COUNT(County) = (SELECT MAX(Cnt) FROM (SELECT County, COUNT(*) AS Cnt FROM schools WHERE StatusType = 'Closed' GROUP BY County));"
      ]
    ]
  },
  {
    "id": 50,
    "db_id": "california_schools",
    "nlq": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "gold": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "evidence": "Postal street and mailing street are synonyms.",
    "infer_predictions": [
      [
        "SELECT T2.StreetAbr, T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 1 OFFSET 6",
        "SELECT School, StreetAbr FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 6)",
        "SELECT T2.School, T2.StreetAbr FROM schools T2 INNER JOIN (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 6) T1 ON T2.CDSCode = T1.cds",
        "SELECT School, StreetAbr FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 6)",
        "SELECT T2.School, T2.StreetAbr FROM schools T2 JOIN satscores T1 ON T2.CDSCode = T1.cds WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 1 OFFSET 6",
        "SELECT School, StreetAbr FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 6)",
        "SELECT T2.School, T2.StreetAbr FROM schools T2, satscores T1 WHERE T2.CDSCode = T1.cds AND T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 1 OFFSET 6",
        "SELECT T2.School, T2.StreetAbr FROM schools T2 JOIN (SELECT cds FROM satscores WHERE AvgScrMath IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 6) T1 ON T2.CDSCode = T1.cds",
        "SELECT School, StreetAbr FROM schools WHERE CDSCode IN (SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 6)",
        "SELECT T2.School, T2.StreetAbr FROM schools T2 INNER JOIN satscores T1 ON T2.CDSCode = T1.cds ORDER BY T1.AvgScrMath DESC LIMIT 1 OFFSET 6"
      ]
    ]
  },
  {
    "id": 51,
    "db_id": "california_schools",
    "nlq": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
    "gold": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.MailStreet, T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1;",
        "SELECT MailStreet, School FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL));",
        "SELECT T2.MailStreet, T2.School FROM satscores T1 INNER JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);",
        "SELECT MailStreet, School FROM schools WHERE CDSCode IN (SELECT cds FROM satscores ORDER BY AvgScrRead ASC LIMIT 1);",
        "SELECT T2.MailStreet, T2.School FROM satscores T1, schools T2 WHERE T1.cds = T2.CDSCode AND T1.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);",
        "SELECT T2.MailStreet, T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead ASC LIMIT 1;",
        "SELECT T2.MailStreet, T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead LIMIT 1;",
        "SELECT T2.MailStreet, T2.School FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores);",
        "SELECT MailStreet, School FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrRead LIMIT 1);",
        "SELECT T2.MailStreet, T2.School FROM satscores T1 LEFT JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 53,
    "db_id": "california_schools",
    "nlq": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "gold": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT SUM(T2.NumTstTakr) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno';",
        "SELECT SUM(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE MailCity = 'Fresno');",
        "SELECT TOTAL(T2.NumTstTakr) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno';",
        "SELECT SUM(NumTstTakr) AS TotalTestTakers FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE MailCity LIKE 'Fresno');",
        "SELECT SUM(NumTstTakr) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno';",
        "SELECT SUM(s.NumTstTakr) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.MailCity = 'Fresno';",
        "SELECT SUM(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE MailCity = 'Fresno');",
        "SELECT SUM(NumTstTakr) FROM satscores s INNER JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.MailCity = 'Fresno';",
        "SELECT SUM(NumTstTakr) FROM satscores, schools WHERE satscores.cds = schools.CDSCode AND schools.MailCity = 'Fresno';",
        "SELECT SUM(NumTstTakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno';"
      ]
    ]
  },
  {
    "id": 55,
    "db_id": "california_schools",
    "nlq": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
    "gold": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
    "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)",
    "infer_predictions": [
      [
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio;",
        "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') FROM schools WHERE County = 'Colusa' AND MailState = 'CA';",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') * 1.0 / COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA';",
        "SELECT Colusa_count / Humboldt_count AS ratio FROM (SELECT COUNT(*) AS Colusa_count FROM schools WHERE County = 'Colusa' AND MailState = 'CA'), (SELECT COUNT(*) AS Humboldt_count FROM schools WHERE County = 'Humboldt' AND MailState = 'CA');",
        "SELECT (SELECT COUNT(CDSCode) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') / (SELECT COUNT(CDSCode) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS school_ratio;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio;",
        "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio;"
      ]
    ]
  },
  {
    "id": 58,
    "db_id": "california_schools",
    "nlq": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.",
    "gold": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704';",
        "SELECT s.School, s.Phone, s.Ext FROM schools AS s WHERE s.Zip = '95203-3704';",
        "SELECT School, Phone, Ext FROM schools WHERE Zip LIKE '95203-3704';",
        "SELECT School, Phone, Ext FROM schools WHERE Zip IN ('95203-3704');",
        "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704' AND Phone IS NOT NULL AND Ext IS NOT NULL;",
        "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704' AND Phone <> '' AND Ext <> '';",
        "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704' ORDER BY School;",
        "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704' LIMIT 1;",
        "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704' AND School IS NOT NULL;",
        "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704' AND Ext IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 98,
    "db_id": "financial",
    "nlq": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "gold": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
    "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
    "infer_predictions": [
      [
        "SELECT T1.account_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date LIKE '1997%' AND T2.frequency = 'POPLATEK TYDNE' AND T1.amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%')",
        "SELECT account_id FROM loan WHERE amount = (SELECT MIN(amount) FROM loan WHERE date BETWEEN '1997-01-01' AND '1997-12-31') AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE') AND date LIKE '1997%'",
        "SELECT T1.account_id FROM loan T1 INNER JOIN account T2 ON T1.account_id = T2.account_id WHERE strftime('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' AND T1.amount = (SELECT MIN(amount) FROM loan WHERE strftime('%Y', date) = '1997')",
        "SELECT account_id FROM loan WHERE date LIKE '1997%' AND amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%') AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE')",
        "SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.date >= '1997-01-01' AND T1.date <= '1997-12-31' AND T2.frequency = 'POPLATEK TYDNE' AND T1.amount = (SELECT MIN(T3.amount) FROM loan T3 WHERE T3.date >= '1997-01-01' AND T3.date <= '1997-12-31')",
        "SELECT T1.account_id FROM loan T1, account T2 WHERE T1.account_id = T2.account_id AND T1.date LIKE '1997%' AND T2.frequency = 'POPLATEK TYDNE' AND T1.amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%')",
        "SELECT account_id FROM loan WHERE strftime('%Y', date) = '1997' AND amount = (SELECT MIN(amount) FROM loan WHERE strftime('%Y', date) = '1997') AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE')",
        "SELECT T1.account_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE YEAR(T1.date) = 1997 AND T2.frequency = 'POPLATEK TYDNE' AND T1.amount = (SELECT MIN(amount) FROM loan WHERE YEAR(date) = 1997)",
        "SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.date LIKE '1997%' AND T2.frequency = 'POPLATEK TYDNE' AND T1.amount = (SELECT MIN(T3.amount) FROM loan T3 WHERE T3.date LIKE '1997%')",
        "SELECT account_id FROM loan WHERE date LIKE '1997%' AND amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%') AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE')"
      ]
    ]
  },
  {
    "id": 99,
    "db_id": "financial",
    "nlq": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "gold": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
    "evidence": "Loan validity more than 12 months refers to duration > 12",
    "infer_predictions": [
      [
        "SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount = (SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993'))",
        "SELECT account_id FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993') AND amount = (SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993'))",
        "SELECT T1.account_id FROM loan T1 INNER JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount = (SELECT MAX(T3.amount) FROM loan T3 WHERE T3.duration > 12 AND T3.account_id IN (SELECT T4.account_id FROM account T4 WHERE strftime('%Y', T4.date) = '1993'))",
        "SELECT T1.account_id FROM loan T1, account T2 WHERE T1.account_id = T2.account_id AND T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount = (SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993'))",
        "SELECT account_id FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993') ORDER BY amount DESC LIMIT 1",
        "SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' ORDER BY T1.amount DESC LIMIT 1",
        "SELECT account_id FROM (SELECT account_id, MAX(amount) AS max_amount FROM loan WHERE duration > 12 GROUP BY account_id) AS MaxLoans WHERE account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993') ORDER BY max_amount DESC LIMIT 1",
        "SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount = (SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993')) GROUP BY T1.account_id HAVING MAX(T1.amount)",
        "SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount >= ALL (SELECT amount FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993'))",
        "SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount = (SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993')) ORDER BY T1.amount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 101,
    "db_id": "financial",
    "nlq": "List out the accounts who have the earliest trading date in 1995 ?",
    "gold": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31')",
        "SELECT T1.account_id FROM trans T1 INNER JOIN (SELECT MIN(date) AS min_date FROM trans WHERE strftime('%Y', date) = '1995') T2 ON T1.date = T2.min_date",
        "SELECT account_id FROM trans WHERE date IN (SELECT MIN(date) FROM trans WHERE strftime('%Y', date) = '1995')",
        "SELECT DISTINCT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE strftime('%Y', date) = '1995')",
        "SELECT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE date LIKE '1995%')",
        "SELECT T1.account_id FROM trans T1 WHERE T1.date = (SELECT MIN(T2.date) FROM trans T2 WHERE T2.date LIKE '1995%')",
        "SELECT account_id FROM trans WHERE strftime('%Y', date) = '1995' AND date = (SELECT MIN(date) FROM trans WHERE strftime('%Y', date) = '1995')",
        "SELECT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE date >= '1995-01-01' AND date <= '1995-12-31')",
        "SELECT DISTINCT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE YEAR(date) = 1995)",
        "SELECT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31')"
      ]
    ]
  },
  {
    "id": 102,
    "db_id": "financial",
    "nlq": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
    "gold": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT DISTINCT T1.account_id FROM account T1 JOIN trans T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.balance > 3000;",
        "SELECT DISTINCT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.balance > 3000;",
        "SELECT DISTINCT a.account_id FROM account a, trans t WHERE a.account_id = t.account_id AND a.date < '1997-01-01' AND t.balance > 3000;",
        "SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date < '1997-01-01' AND t.balance > 3000;",
        "SELECT DISTINCT account_id FROM account JOIN trans USING (account_id) WHERE date < '1997-01-01' AND balance > 3000;",
        "SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE strftime('%Y', a.date) < '1997' AND t.balance > 3000;",
        "SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE substr(a.date, 1, 4) < '1997' AND t.balance > 3000;",
        "SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date < date('1997-01-01') AND t.balance > 3000;",
        "SELECT DISTINCT account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE date < '1997-01-01' AND balance > 3000;",
        "SELECT DISTINCT account.account_id FROM account, trans WHERE account.account_id = trans.account_id AND account.date < '1997-01-01' AND trans.balance > 3000;"
      ]
    ]
  },
  {
    "id": 195,
    "db_id": "toxicology",
    "nlq": "What is the most common bond type?",
    "gold": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "evidence": "most common bond type refers MAX(COUNT(bond_type))",
    "infer_predictions": [
      [
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1;",
        "SELECT T1.bond_type FROM (SELECT bond_type, COUNT(*) AS cnt FROM bond GROUP BY bond_type) T1 ORDER BY T1.cnt DESC LIMIT 1;",
        "WITH BondCounts AS (SELECT bond_type, COUNT(*) AS count FROM bond GROUP BY bond_type) SELECT bond_type FROM BondCounts WHERE count = (SELECT MAX(count) FROM BondCounts);",
        "SELECT bond_type FROM bond WHERE bond_type IS NOT NULL GROUP BY bond_type HAVING COUNT(bond_type) = (SELECT MAX(COUNT(bond_type)) FROM bond GROUP BY bond_type);",
        "SELECT bond_type FROM (SELECT bond_type, COUNT(bond_type) AS type_count FROM bond GROUP BY bond_type ORDER BY type_count DESC) WHERE ROWNUM = 1;",
        "SELECT TOP 1 bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC;",
        "SELECT bond_type FROM bond GROUP BY bond_type HAVING COUNT(bond_type) = (SELECT MAX(cnt) FROM (SELECT COUNT(bond_type) AS cnt FROM bond GROUP BY bond_type) T);",
        "WITH CTE AS (SELECT bond_type, COUNT(*) AS num FROM bond GROUP BY bond_type) SELECT bond_type FROM CTE WHERE num = (SELECT MAX(num) FROM CTE);",
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;",
        "SELECT bond_type FROM (SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon;"
      ]
    ]
  },
  {
    "id": 205,
    "db_id": "toxicology",
    "nlq": "Identify by their ID the molecules in which there is carbon.",
    "gold": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
    "evidence": "carbon refers to element = 'c';",
    "infer_predictions": [
      [
        "SELECT DISTINCT molecule_id FROM atom WHERE element = 'c';",
        "SELECT molecule_id FROM atom WHERE element = 'c' GROUP BY molecule_id;",
        "SELECT DISTINCT a.molecule_id FROM atom AS a WHERE a.element = 'c';",
        "SELECT molecule_id FROM (SELECT DISTINCT molecule_id FROM atom WHERE element = 'c') AS subquery;",
        "SELECT DISTINCT molecule_id FROM atom WHERE element LIKE 'c';",
        "SELECT molecule_id FROM atom WHERE element = 'c' AND molecule_id IS NOT NULL GROUP BY molecule_id;",
        "SELECT DISTINCT a.molecule_id FROM atom a WHERE a.element = 'c';",
        "SELECT molecule_id FROM atom GROUP BY molecule_id HAVING element = 'c';",
        "SELECT DISTINCT molecule_id FROM atom WHERE element IN ('c');",
        "SELECT molecule_id FROM atom WHERE element = 'c' AND molecule_id IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 206,
    "db_id": "toxicology",
    "nlq": "What elements are in the TR004_8_9 bond atoms?",
    "gold": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
    "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
    "infer_predictions": [
      [
        "SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id WHERE C.bond_id = 'TR004_8_9' UNION SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR004_8_9';",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR004_8_9');",
        "SELECT DISTINCT A.element FROM atom A, connected C WHERE A.atom_id = C.atom_id AND C.bond_id = 'TR004_8_9' UNION SELECT DISTINCT A.element FROM atom A, connected C WHERE A.atom_id = C.atom_id2 AND C.bond_id = 'TR004_8_9';",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9') OR atom_id IN (SELECT atom_id2 FROM connected WHERE bond_id = 'TR004_8_9');",
        "WITH BondAtoms AS (SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR004_8_9') SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM BondAtoms);",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9' UNION ALL SELECT atom_id2 FROM connected WHERE bond_id = 'TR004_8_9');",
        "SELECT DISTINCT A.element FROM atom A INNER JOIN connected C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR004_8_9';",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT CASE WHEN atom_id = atom_id THEN atom_id ELSE atom_id2 END FROM connected WHERE bond_id = 'TR004_8_9');",
        "WITH ConnectedAtoms AS (SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR004_8_9') SELECT DISTINCT element FROM atom JOIN ConnectedAtoms ON atom.atom_id = ConnectedAtoms.atom_id;",
        "SELECT DISTINCT element FROM atom WHERE EXISTS (SELECT 1 FROM connected WHERE bond_id = 'TR004_8_9' AND (atom_id = atom.atom_id OR atom_id2 = atom.atom_id));"
      ]
    ]
  },
  {
    "id": 207,
    "db_id": "toxicology",
    "nlq": "What elements are in a double type bond?",
    "gold": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
    "evidence": "double type bond refers to bond_type = '=';",
    "infer_predictions": [
      [
        "SELECT DISTINCT T3.element FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id JOIN atom T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '=';",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '=')) OR atom_id IN (SELECT atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '='));",
        "SELECT DISTINCT A.element FROM atom A INNER JOIN connected C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 INNER JOIN bond B ON C.bond_id = B.bond_id WHERE B.bond_type = '=';",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '=' UNION SELECT bond_id FROM bond WHERE bond_type = '=')) OR atom_id IN (SELECT atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '=' UNION SELECT bond_id FROM bond WHERE bond_type = '='));",
        "SELECT DISTINCT element FROM atom WHERE EXISTS (SELECT 1 FROM connected WHERE (atom_id = atom.atom_id OR atom_id2 = atom.atom_id) AND bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '='));",
        "SELECT DISTINCT element FROM atom A WHERE A.atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '=')) OR A.atom_id IN (SELECT atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '='));",
        "SELECT DISTINCT A.element FROM atom A, connected C, bond B WHERE (A.atom_id = C.atom_id OR A.atom_id = C.atom_id2) AND C.bond_id = B.bond_id AND B.bond_type = '=';",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '=') OR atom_id IN (SELECT atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = '=');",
        "SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 JOIN bond B ON C.bond_id = B.bond_id WHERE B.bond_type = '=';",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '=')) UNION SELECT element FROM atom WHERE atom_id IN (SELECT atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '='));"
      ]
    ]
  },
  {
    "id": 214,
    "db_id": "toxicology",
    "nlq": "What type of label is not on molecules with atoms with tin?",
    "gold": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
    "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "infer_predictions": [
      [
        "SELECT DISTINCT T2.label FROM molecule T2 WHERE T2.molecule_id NOT IN (SELECT T1.molecule_id FROM atom T1 WHERE T1.element = 'sn');",
        "SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn');",
        "SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'sn');",
        "SELECT DISTINCT label FROM molecule AS M WHERE NOT EXISTS (SELECT 1 FROM atom AS A WHERE A.molecule_id = M.molecule_id AND A.element = 'sn');",
        "SELECT DISTINCT M.label FROM molecule M LEFT JOIN atom A ON M.molecule_id = A.molecule_id WHERE A.element != 'sn' OR A.element IS NULL GROUP BY M.molecule_id HAVING COUNT(A.atom_id) = COUNT(CASE WHEN A.element != 'sn' THEN 1 ELSE NULL END);",
        "SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') AND label IS NOT NULL;",
        "SELECT DISTINCT M.label FROM molecule M WHERE NOT EXISTS (SELECT * FROM atom A WHERE A.molecule_id = M.molecule_id AND A.element = 'sn');",
        "SELECT DISTINCT label FROM molecule EXCEPT SELECT DISTINCT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'sn';",
        "SELECT DISTINCT label FROM molecule M WHERE M.molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn');",
        "SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') ORDER BY label;"
      ]
    ]
  },
  {
    "id": 215,
    "db_id": "toxicology",
    "nlq": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "gold": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
    "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.atom_id) FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T1.element IN ('i', 's') AND T3.bond_type = '-'",
        "SELECT COUNT(DISTINCT atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-'",
        "SELECT COUNT(DISTINCT A.atom_id) FROM atom A, connected C, bond B WHERE A.atom_id = C.atom_id AND C.bond_id = B.bond_id AND A.element IN ('i', 's') AND B.bond_type = '-'",
        "SELECT COUNT(DISTINCT A.atom_id) FROM atom A JOIN connected C ON A.atom_id = C.atom_id JOIN bond B ON C.bond_id = B.bond_id WHERE A.element IN ('i', 's') AND B.bond_type = '-'",
        "SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element IN ('i', 's') AND atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-'))",
        "SELECT COUNT(DISTINCT A.atom_id) FROM atom A WHERE A.element IN ('i', 's') AND EXISTS (SELECT 1 FROM connected C JOIN bond B ON C.bond_id = B.bond_id WHERE C.atom_id = A.atom_id AND B.bond_type = '-')",
        "SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element IN ('i', 's') AND atom_id IN (SELECT connected.atom_id FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-')",
        "SELECT COUNT(DISTINCT atom_id) FROM (SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-')",
        "SELECT COUNT(DISTINCT atom_id) FROM atom WHERE (element = 'i' OR element = 's') AND atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-'))",
        "SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element IN ('i', 's') AND EXISTS (SELECT * FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = atom.atom_id AND bond.bond_type = '-')"
      ]
    ]
  },
  {
    "id": 343,
    "db_id": "card_games",
    "nlq": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
    "gold": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
    "evidence": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;",
    "infer_predictions": [
      [
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank IS NOT NULL AND edhrecRank < 100;",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank BETWEEN 1 AND 99;",
        "SELECT name FROM cards WHERE '2015' = frameVersion AND edhrecRank < 100;",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100 ORDER BY edhrecRank;",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100 ORDER BY edhrecRank DESC;",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100 AND edhrecRank IS NOT NULL ORDER BY edhrecRank;",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100 AND edhrecRank IS NOT NULL ORDER BY edhrecRank DESC;",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100 AND edhrecRank > 0;",
        "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100 AND edhrecRank > 0 ORDER BY edhrecRank;"
      ]
    ]
  },
  {
    "id": 351,
    "db_id": "card_games",
    "nlq": "Name all the cards which have alternative language in Japanese.",
    "gold": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "evidence": "Japanese' is the language;",
    "infer_predictions": [
      [
        "SELECT T2.name FROM cards T2 JOIN foreign_data T1 ON T2.uuid = T1.uuid WHERE T1.language = 'Japanese';",
        "SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese');",
        "SELECT T2.name FROM cards T2 INNER JOIN foreign_data T1 ON T2.uuid = T1.uuid AND T1.language = 'Japanese';",
        "SELECT name FROM cards WHERE EXISTS (SELECT 1 FROM foreign_data WHERE cards.uuid = foreign_data.uuid AND language = 'Japanese');",
        "SELECT T2.name FROM cards T2, foreign_data T1 WHERE T2.uuid = T1.uuid AND T1.language = 'Japanese';",
        "SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language LIKE 'Japanese');",
        "SELECT T2.name FROM cards T2 JOIN foreign_data T1 ON T2.uuid = T1.uuid WHERE T1.language = 'Japanese' GROUP BY T2.name;",
        "SELECT DISTINCT T2.name FROM cards T2 JOIN foreign_data T1 ON T2.uuid = T1.uuid WHERE T1.language = 'Japanese';",
        "SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese') ORDER BY name;",
        "SELECT T2.name FROM cards T2 LEFT JOIN foreign_data T1 ON T2.uuid = T1.uuid WHERE T1.language = 'Japanese';"
      ]
    ]
  },
  {
    "id": 354,
    "db_id": "card_games",
    "nlq": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
    "gold": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
    "evidence": "Aaron Boyd' is artist;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';",
        "SELECT COUNT(DISTINCT T1.types) FROM cards AS T1 WHERE T1.artist = 'Aaron Boyd';",
        "SELECT COUNT(DISTINCT types) AS NumberOfTypes FROM cards WHERE artist = 'Aaron Boyd';",
        "SELECT DISTINCT COUNT(types) FROM cards WHERE artist = 'Aaron Boyd';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT types FROM cards WHERE artist = 'Aaron Boyd');",
        "SELECT COUNT(DISTINCT types) FROM cards WHERE artist LIKE 'Aaron Boyd';",
        "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd' GROUP BY artist;",
        "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd' AND types IS NOT NULL;",
        "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd' AND types != '';",
        "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd' AND types <> '';"
      ]
    ]
  },
  {
    "id": 360,
    "db_id": "card_games",
    "nlq": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
    "gold": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
    "evidence": "Angel of Mercy' is the name of card;",
    "infer_predictions": [
      [
        "SELECT DISTINCT T2.language FROM cards T1 JOIN set_translations T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy';",
        "SELECT DISTINCT language FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Angel of Mercy');",
        "SELECT language FROM (SELECT DISTINCT language, setCode FROM set_translations) AS T2 WHERE T2.setCode = (SELECT setCode FROM cards WHERE name = 'Angel of Mercy');",
        "SELECT DISTINCT T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy';",
        "SELECT DISTINCT language FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Angel of Mercy');",
        "SELECT language FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Angel of Mercy') GROUP BY language;",
        "SELECT DISTINCT language FROM set_translations, cards WHERE cards.setCode = set_translations.setCode AND cards.name = 'Angel of Mercy';",
        "SELECT DISTINCT language FROM set_translations JOIN cards ON cards.setCode = set_translations.setCode WHERE cards.name = 'Angel of Mercy';",
        "SELECT DISTINCT T2.language FROM cards T1, set_translations T2 WHERE T1.setCode = T2.setCode AND T1.name = 'Angel of Mercy';",
        "SELECT DISTINCT language FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Angel of Mercy') ORDER BY language;"
      ]
    ]
  },
  {
    "id": 367,
    "db_id": "card_games",
    "nlq": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "gold": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "infer_predictions": [
      [
        "SELECT DISTINCT T1.artist FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian';",
        "SELECT DISTINCT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Phyrexian');",
        "SELECT DISTINCT artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';",
        "SELECT DISTINCT T1.artist FROM cards AS T1, foreign_data AS T2 WHERE T1.uuid = T2.uuid AND T2.language = 'Phyrexian';",
        "SELECT DISTINCT artist FROM cards WHERE EXISTS (SELECT 1 FROM foreign_data WHERE foreign_data.uuid = cards.uuid AND language = 'Phyrexian');",
        "SELECT DISTINCT T1.artist FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid AND T2.language = 'Phyrexian';",
        "SELECT DISTINCT artist FROM cards JOIN foreign_data USING (uuid) WHERE language = 'Phyrexian';",
        "SELECT DISTINCT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language LIKE 'Phyrexian');",
        "SELECT DISTINCT T1.artist FROM cards T1 INNER JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian';",
        "SELECT DISTINCT artist FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'Phyrexian';"
      ]
    ]
  },
  {
    "id": 369,
    "db_id": "card_games",
    "nlq": "How many cards that illusrtated in German have been reprinted?",
    "gold": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1",
    "evidence": "German' is the language; reprinted refers to isReprint = 1;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German';",
        "SELECT COUNT(*) FROM (SELECT T1.uuid FROM cards T1 INNER JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German' GROUP BY T1.uuid);",
        "SELECT COUNT(DISTINCT uuid) FROM cards NATURAL JOIN foreign_data WHERE isReprint = 1 AND language = 'German';",
        "SELECT COUNT(DISTINCT cards.uuid) FROM cards, foreign_data WHERE cards.uuid = foreign_data.uuid AND cards.isReprint = 1 AND foreign_data.language = 'German';",
        "SELECT COUNT(DISTINCT T1.uuid) FROM cards T1, foreign_data T2 WHERE T1.uuid = T2.uuid AND T1.isReprint = 1 AND T2.language = 'German';",
        "SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German';",
        "SELECT COUNT(DISTINCT T1.uuid) FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid AND T1.isReprint = 1 WHERE T2.language = 'German';",
        "SELECT COUNT(DISTINCT T1.uuid) FROM cards T1 INNER JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German';",
        "SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German';",
        "SELECT COUNT(DISTINCT T1.uuid) FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German';"
      ]
    ]
  },
  {
    "id": 531,
    "db_id": "codebase_community",
    "nlq": "Which user has a higher reputation, Harlan or Jarrod Dixon? Output one of them or both.",
    "gold": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
    "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
    "infer_predictions": [
      [
        "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation IS NOT NULL ORDER BY Reputation DESC LIMIT 1;",
        "SELECT T1.DisplayName FROM (SELECT DisplayName, MAX(Reputation) AS MaxRep FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName) T1 ORDER BY T1.MaxRep DESC LIMIT 1;",
        "WITH RankedUsers AS (SELECT DisplayName, Reputation, RANK() OVER (ORDER BY Reputation DESC) AS rank FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation IS NOT NULL) SELECT DisplayName FROM RankedUsers WHERE rank = 1;",
        "SELECT DisplayName FROM users WHERE DisplayName = 'Harlan' OR DisplayName = 'Jarrod Dixon' ORDER BY Reputation DESC LIMIT 1;",
        "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = (SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon'));",
        "SELECT TOP 1 DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation IS NOT NULL ORDER BY Reputation DESC;",
        "SELECT DisplayName FROM (SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC) WHERE rowid = 1;",
        "WITH CTE AS (SELECT DisplayName, MAX(Reputation) AS MaxReputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName) SELECT DisplayName FROM CTE ORDER BY MaxReputation DESC LIMIT 1;",
        "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation IS NOT NULL ORDER BY Reputation DESC FETCH FIRST 1 ROW ONLY;",
        "SELECT DisplayName FROM users WHERE (DisplayName = 'Harlan' OR DisplayName = 'Jarrod Dixon') AND Reputation IS NOT NULL ORDER BY Reputation DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 532,
    "db_id": "codebase_community",
    "nlq": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "gold": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
    "evidence": "account created in the year 2011 refers to year(CreationDate) = 2011",
    "infer_predictions": [
      [
        "SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2011';",
        "SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2011' AND CreationDate IS NOT NULL;",
        "SELECT DisplayName FROM users AS T1 WHERE strftime('%Y', T1.CreationDate) = '2011';",
        "SELECT T1.DisplayName FROM users T1 WHERE strftime('%Y', T1.CreationDate) = '2011';",
        "SELECT DisplayName FROM users WHERE CAST(strftime('%Y', CreationDate) AS INTEGER) = 2011;",
        "SELECT DisplayName FROM users WHERE SUBSTR(CreationDate, 1, 4) = '2011';",
        "SELECT DisplayName FROM users WHERE CreationDate LIKE '2011%';",
        "SELECT DisplayName FROM users WHERE CreationDate BETWEEN '2011-01-01' AND '2011-12-31';",
        "SELECT DisplayName FROM users WHERE CreationDate >= '2011-01-01' AND CreationDate <= '2011-12-31';",
        "SELECT DisplayName FROM users WHERE CreationDate LIKE '2011-%%';"
      ]
    ]
  },
  {
    "id": 533,
    "db_id": "codebase_community",
    "nlq": "How many users last accessed the website after 2014/9/1?",
    "gold": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
    "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'",
    "infer_predictions": [
      [
        "SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01';",
        "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01';",
        "SELECT COUNT(Id) AS NumberOfUsers FROM users WHERE LastAccessDate > '2014-09-01';",
        "SELECT COUNT(Id) FROM users AS T1 WHERE T1.LastAccessDate > '2014-09-01';",
        "SELECT COUNT(*) FROM users WHERE LastAccessDate > date('2014-09-01');",
        "SELECT COUNT(Id) FROM users WHERE strftime('%Y-%m-%d', LastAccessDate) > '2014-09-01';",
        "SELECT COUNT(Id) FROM users WHERE LastAccessDate > datetime('2014-09-01');",
        "SELECT COUNT(*) AS UserCount FROM users WHERE LastAccessDate > '2014-09-01';",
        "SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';",
        "SELECT COUNT(*) FROM (SELECT Id FROM users WHERE LastAccessDate > '2014-09-01') AS RecentAccess;"
      ]
    ]
  },
  {
    "id": 534,
    "db_id": "codebase_community",
    "nlq": "What is the display name of the user who has the most number of views?",
    "gold": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "evidence": "user who has the most number of view refers to Max(Views)",
    "infer_predictions": [
      [
        "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users WHERE Views IS NOT NULL)",
        "SELECT T1.DisplayName FROM users T1 WHERE T1.Views = (SELECT MAX(T2.Views) FROM users T2 WHERE T2.Views IS NOT NULL)",
        "SELECT DisplayName FROM users WHERE Views IN (SELECT MAX(Views) FROM users WHERE Views IS NOT NULL)",
        "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1",
        "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)",
        "SELECT TOP 1 DisplayName FROM users ORDER BY Views DESC",
        "SELECT DisplayName FROM (SELECT DisplayName, RANK() OVER (ORDER BY Views DESC) AS rank FROM users WHERE Views IS NOT NULL) WHERE rank = 1",
        "SELECT DisplayName FROM users WHERE Views >= ALL (SELECT Views FROM users WHERE Views IS NOT NULL)",
        "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users WHERE Views IS NOT NULL) LIMIT 1",
        "SELECT DisplayName FROM users WHERE Id = (SELECT Id FROM users WHERE Views = (SELECT MAX(Views) FROM users WHERE Views IS NOT NULL))"
      ]
    ]
  },
  {
    "id": 535,
    "db_id": "codebase_community",
    "nlq": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
    "gold": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1",
    "evidence": "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;",
        "SELECT COUNT(Id) AS NumberOfUsers FROM users WHERE UpVotes > 100 AND DownVotes > 1;",
        "SELECT COUNT(*) AS UserCount FROM users WHERE UpVotes > 100 AND DownVotes > 1;",
        "SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1;",
        "SELECT COUNT(*) FROM users u WHERE u.UpVotes > 100 AND u.DownVotes > 1;",
        "WITH FilteredUsers AS (SELECT * FROM users WHERE UpVotes > 100) SELECT COUNT(*) FROM FilteredUsers WHERE DownVotes > 1;",
        "WITH QualifiedUsers AS (SELECT Id FROM users WHERE UpVotes > 100 AND DownVotes > 1) SELECT COUNT(*) FROM QualifiedUsers;",
        "SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1;",
        "SELECT COUNT(*) FROM (SELECT Id FROM users WHERE UpVotes > 100 AND DownVotes > 1) AS Filtered;",
        "WITH CTE AS (SELECT Id FROM users WHERE UpVotes > 100 AND DownVotes > 1) SELECT COUNT(Id) FROM CTE;"
      ]
    ]
  },
  {
    "id": 536,
    "db_id": "codebase_community",
    "nlq": "How many users with more than 10 views created their account after the year 2013?",
    "gold": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
    "evidence": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013';",
        "SELECT COUNT(Id) FROM users WHERE Views > 10 AND CAST(strftime('%Y', CreationDate) AS INTEGER) > 2013;",
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND substr(CreationDate, 1, 4) > '2013';",
        "SELECT COUNT(Id) AS NumberOfUsers FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013';",
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND date(CreationDate) > date('2013-12-31');",
        "SELECT COUNT(Id) FROM users WHERE Views > 10 AND year(CreationDate) > 2013;",
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2014-01-01';",
        "SELECT COUNT(Id) FROM users WHERE Views > 10 AND CAST(substr(CreationDate, 1, 4) AS INTEGER) > 2013;",
        "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate LIKE '201_%' AND CreationDate > '2013-12-31';",
        "SELECT COUNT(Id) FROM users WHERE Views > 10 AND CreationDate > '2013-12-31 23:59:59';"
      ]
    ]
  },
  {
    "id": 537,
    "db_id": "codebase_community",
    "nlq": "How many posts does the user csgillespie own?",
    "gold": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
        "SELECT COUNT(p.Id) AS NumberOfPosts FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
        "SELECT COUNT(*) AS TotalPosts FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';",
        "SELECT COUNT(posts.Id) FROM posts, users WHERE posts.OwnerUserId = users.Id AND users.DisplayName = 'csgillespie';",
        "SELECT COUNT(*) FROM posts p WHERE EXISTS (SELECT 1 FROM users u WHERE u.Id = p.OwnerUserId AND u.DisplayName = 'csgillespie');",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND OwnerUserId IS NOT NULL;",
        "SELECT COUNT(*) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id AND users.DisplayName = 'csgillespie';",
        "SELECT COUNT(*) FROM posts p WHERE p.OwnerUserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'csgillespie');",
        "SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' AND p.OwnerUserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 538,
    "db_id": "codebase_community",
    "nlq": "Please list the titles of the posts owned by the user csgillespie?",
    "gold": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "infer_predictions": [
      [
        "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
        "SELECT p.Title FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "SELECT Title FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
        "SELECT p.Title FROM posts p, users u WHERE p.OwnerUserId = u.Id AND u.DisplayName = 'csgillespie';",
        "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName LIKE 'csgillespie');",
        "SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id AND u.DisplayName = 'csgillespie';",
        "SELECT Title FROM posts WHERE EXISTS (SELECT 1 FROM users WHERE Id = OwnerUserId AND DisplayName = 'csgillespie');",
        "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND OwnerUserId IS NOT NULL;",
        "SELECT p.Title FROM posts p WHERE p.OwnerUserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'csgillespie');",
        "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') LIMIT 100;"
      ]
    ]
  },
  {
    "id": 539,
    "db_id": "codebase_community",
    "nlq": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "gold": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts';",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');",
        "SELECT u.DisplayName FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');",
        "SELECT users.DisplayName FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Eliciting priors from experts';",
        "SELECT u.DisplayName FROM users u, posts p WHERE u.Id = p.OwnerUserId AND p.Title = 'Eliciting priors from experts';",
        "SELECT DisplayName FROM users JOIN posts ON users.Id = posts.OwnerUserId AND posts.Title = 'Eliciting priors from experts';",
        "SELECT u.DisplayName FROM users u JOIN (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts') p ON u.Id = p.OwnerUserId;",
        "SELECT DisplayName FROM users WHERE Id = (SELECT p.OwnerUserId FROM posts p WHERE p.Title = 'Eliciting priors from experts');",
        "SELECT u.DisplayName FROM users u WHERE u.Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts')"
      ]
    ]
  },
  {
    "id": 540,
    "db_id": "codebase_community",
    "nlq": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "gold": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "infer_predictions": [
      [
        "SELECT T2.Title FROM posts T2 JOIN users T1 ON T2.OwnerUserId = T1.Id WHERE T1.DisplayName = 'csgillespie' AND T2.ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId = T1.Id)",
        "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ORDER BY ViewCount DESC LIMIT 1",
        "SELECT Title FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie'))",
        "SELECT p.Title FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1",
        "SELECT p.Title FROM posts p, users u WHERE p.OwnerUserId = u.Id AND u.DisplayName = 'csgillespie' AND p.ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId = u.Id)",
        "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ViewCount >= ALL (SELECT ViewCount FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie'))",
        "SELECT TOP 1 Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ORDER BY ViewCount DESC",
        "SELECT Title FROM posts WHERE Id = (SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ORDER BY ViewCount DESC LIMIT 1)",
        "SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' AND p.ViewCount = (SELECT MAX(ViewCount) FROM posts p2 WHERE p2.OwnerUserId = u.Id)",
        "SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie'))"
      ]
    ]
  },
  {
    "id": 541,
    "db_id": "codebase_community",
    "nlq": "What is the display name of the user who is the owner of the most valuable post?",
    "gold": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1",
    "evidence": "most valuable post refers to Max(FavoriteCount)",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL)",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL))",
        "SELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL)",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts))",
        "SELECT T2.DisplayName FROM users T2 WHERE T2.Id = (SELECT T1.OwnerUserId FROM posts T1 WHERE T1.FavoriteCount = (SELECT MAX(T1.FavoriteCount) FROM posts T1))",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1)",
        "SELECT T2.DisplayName FROM users T2 JOIN (SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)) T1 ON T2.Id = T1.OwnerUserId",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE FavoriteCount >= ALL (SELECT FavoriteCount FROM posts WHERE FavoriteCount IS NOT NULL))",
        "SELECT T2.DisplayName FROM users T2 JOIN posts T1 ON T2.Id = T1.OwnerUserId WHERE T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL)",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL))"
      ]
    ]
  },
  {
    "id": 542,
    "db_id": "codebase_community",
    "nlq": "What is the total number of comments of all the posts owned by csgillespie?",
    "gold": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)",
    "infer_predictions": [
      [
        "SELECT SUM(P.CommentCount) FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.CommentCount IS NOT NULL;",
        "SELECT SUM(CommentCount) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND CommentCount IS NOT NULL;",
        "SELECT TOTAL(CommentCount) AS TotalComments FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' AND posts.CommentCount IS NOT NULL;",
        "SELECT SUM(P.CommentCount) AS TotalComments FROM posts P, users U WHERE P.OwnerUserId = U.Id AND U.DisplayName = 'csgillespie' AND P.CommentCount IS NOT NULL;",
        "SELECT SUM(CommentCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND CommentCount IS NOT NULL;",
        "SELECT SUM(P.CommentCount) FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.CommentCount IS NOT NULL;",
        "SELECT SUM(CommentCount) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' AND posts.CommentCount IS NOT NULL;",
        "SELECT SUM(CommentCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND CommentCount IS NOT NULL;",
        "SELECT SUM(P.CommentCount) FROM posts P LEFT JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.CommentCount IS NOT NULL;",
        "SELECT SUM(CommentCount) AS TotalComments FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND CommentCount IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 543,
    "db_id": "codebase_community",
    "nlq": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
    "gold": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)",
    "infer_predictions": [
      [
        "SELECT MAX(P.AnswerCount) FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.AnswerCount IS NOT NULL;",
        "SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND AnswerCount IS NOT NULL;",
        "SELECT MAX(P.AnswerCount) AS MaxAnswers FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.AnswerCount IS NOT NULL;",
        "SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND AnswerCount IS NOT NULL;",
        "SELECT MAX(P.AnswerCount) FROM posts P, users U WHERE P.OwnerUserId = U.Id AND U.DisplayName = 'csgillespie' AND P.AnswerCount IS NOT NULL;",
        "SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND AnswerCount > 0;",
        "SELECT MAX(P.AnswerCount) FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.AnswerCount > 0;",
        "SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND AnswerCount > 0;",
        "SELECT MAX(P.AnswerCount) FROM posts P, users U WHERE P.OwnerUserId = U.Id AND U.DisplayName = 'csgillespie' AND P.AnswerCount > 0;",
        "SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND AnswerCount IS NOT NULL ORDER BY AnswerCount DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 544,
    "db_id": "codebase_community",
    "nlq": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "gold": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM posts T1 JOIN users T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation';",
        "SELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.LastEditorUserId WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation';",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT LastEditorUserId FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation');",
        "SELECT u.DisplayName FROM users u, posts p WHERE u.Id = p.LastEditorUserId AND p.Title = 'Examples for teaching: Correlation does not mean causation';",
        "SELECT DisplayName FROM users WHERE Id = (SELECT LastEditorUserId FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation');",
        "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation';",
        "SELECT DisplayName FROM users JOIN posts ON users.Id = posts.LastEditorUserId AND posts.Title = 'Examples for teaching: Correlation does not mean causation';",
        "SELECT u.DisplayName FROM users u INNER JOIN posts p ON p.LastEditorUserId = u.Id WHERE p.Title = 'Examples for teaching: Correlation does not mean causation';",
        "SELECT users.DisplayName FROM users JOIN posts ON users.Id = posts.LastEditorUserId WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation';",
        "SELECT DisplayName FROM users WHERE Id = (SELECT p.LastEditorUserId FROM posts p WHERE p.Title = 'Examples for teaching: Correlation does not mean causation');"
      ]
    ]
  },
  {
    "id": 545,
    "db_id": "codebase_community",
    "nlq": "Among the posts owned by csgillespie, how many of them are root posts?",
    "gold": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL",
    "evidence": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;",
        "SELECT COUNT(P.Id) AS RootPostCount FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.ParentId IS NULL;",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;",
        "SELECT COUNT(*) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' AND posts.ParentId IS NULL;",
        "SELECT COUNT(*) FROM posts P WHERE P.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND P.ParentId IS NULL;",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;",
        "SELECT COUNT(*) AS NumberOfRootPosts FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;",
        "SELECT COUNT(*) FROM posts P WHERE EXISTS (SELECT 1 FROM users U WHERE U.Id = P.OwnerUserId AND U.DisplayName = 'csgillespie') AND P.ParentId IS NULL;",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;",
        "SELECT COUNT(*) FROM posts, users WHERE posts.OwnerUserId = users.Id AND users.DisplayName = 'csgillespie' AND posts.ParentId IS NULL;"
      ]
    ]
  },
  {
    "id": 546,
    "db_id": "codebase_community",
    "nlq": "Please list the display names of all the users who owns a post that is well-finished.",
    "gold": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL",
    "evidence": "the post that is well-finished refers to ClosedDate IS NOT Null",
    "infer_predictions": [
      [
        "SELECT DISTINCT U.DisplayName FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.ClosedDate IS NOT NULL;",
        "SELECT DISTINCT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL);",
        "SELECT DISTINCT DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.ClosedDate IS NOT NULL;",
        "SELECT DISTINCT users.DisplayName FROM users, posts WHERE users.Id = posts.OwnerUserId AND posts.ClosedDate IS NOT NULL;",
        "SELECT DISTINCT U.DisplayName FROM users U, posts P WHERE U.Id = P.OwnerUserId AND P.ClosedDate IS NOT NULL;",
        "SELECT DISTINCT DisplayName FROM users WHERE EXISTS (SELECT 1 FROM posts WHERE OwnerUserId = users.Id AND ClosedDate IS NOT NULL);",
        "SELECT DISTINCT U.DisplayName FROM users U WHERE EXISTS (SELECT 1 FROM posts P WHERE P.OwnerUserId = U.Id AND P.ClosedDate IS NOT NULL);",
        "SELECT DISTINCT U.DisplayName FROM users U INNER JOIN posts P ON U.Id = P.OwnerUserId AND P.ClosedDate IS NOT NULL;",
        "SELECT DISTINCT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL);",
        "SELECT DISTINCT U.DisplayName FROM users U WHERE U.Id IN (SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 547,
    "db_id": "codebase_community",
    "nlq": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "gold": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
    "evidence": "elder users refers to Age > 65; Score of over 19 refers to Score > = 20",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;",
        "SELECT COUNT(p.Id) FROM posts AS p JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20;",
        "SELECT COUNT(*) FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20;",
        "SELECT COUNT(post.Id) FROM posts post, users usr WHERE post.OwnerUserId = usr.Id AND usr.Age > 65 AND post.Score >= 20;",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;",
        "SELECT COUNT(*) FROM posts p WHERE EXISTS (SELECT 1 FROM users u WHERE u.Id = p.OwnerUserId AND u.Age > 65) AND p.Score >= 20;",
        "SELECT COUNT(*) FROM posts p WHERE p.OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND p.Score >= 20;",
        "SELECT COUNT(*) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age > 65 AND posts.Score >= 20;",
        "SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20;",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;"
      ]
    ]
  },
  {
    "id": 548,
    "db_id": "codebase_community",
    "nlq": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "gold": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "infer_predictions": [
      [
        "SELECT T2.Location FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts';",
        "SELECT Location FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');",
        "SELECT users.Location FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Eliciting priors from experts';",
        "SELECT Location FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');",
        "SELECT u.Location FROM users u, posts p WHERE u.Id = p.OwnerUserId AND p.Title = 'Eliciting priors from experts';",
        "SELECT Location FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Eliciting priors from experts';",
        "SELECT Location FROM users WHERE Id = (SELECT p.OwnerUserId FROM posts p WHERE p.Title = 'Eliciting priors from experts');",
        "SELECT u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';",
        "SELECT Location FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts' LIMIT 1);",
        "SELECT Location FROM users u WHERE u.Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');"
      ]
    ]
  },
  {
    "id": 549,
    "db_id": "codebase_community",
    "nlq": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "gold": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "infer_predictions": [
      [
        "SELECT P.Body FROM posts P JOIN tags T ON P.Id = T.ExcerptPostId WHERE T.TagName = 'bayesian';",
        "SELECT Body FROM posts WHERE Id IN (SELECT ExcerptPostId FROM tags WHERE TagName = 'bayesian');",
        "SELECT posts.Body FROM posts INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian';",
        "SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE TagName = 'bayesian');",
        "SELECT P.Body FROM posts P, tags T WHERE P.Id = T.ExcerptPostId AND T.TagName = 'bayesian';",
        "SELECT Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId AND tags.TagName = 'bayesian';",
        "SELECT P.Body FROM posts AS P JOIN tags AS T ON P.Id = T.ExcerptPostId WHERE T.TagName = 'bayesian';",
        "SELECT Body FROM posts WHERE Id = (SELECT T.ExcerptPostId FROM tags T WHERE T.TagName = 'bayesian');",
        "SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId AND tags.TagName = 'bayesian';",
        "SELECT P.Body FROM posts P INNER JOIN tags T ON P.Id = T.ExcerptPostId AND T.TagName = 'bayesian';"
      ]
    ]
  },
  {
    "id": 550,
    "db_id": "codebase_community",
    "nlq": "From which post is the most popular tag excerpted from? Please give the body of the post.",
    "gold": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )",
    "evidence": "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId",
    "infer_predictions": [
      [
        "SELECT T2.Body FROM tags T1 JOIN posts T2 ON T1.ExcerptPostId = T2.Id WHERE T1.Count = (SELECT MAX(Count) FROM tags) AND T1.Count IS NOT NULL;",
        "SELECT posts.Body FROM posts INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.Count = (SELECT MAX(Count) FROM tags WHERE Count IS NOT NULL);",
        "SELECT Body FROM posts WHERE Id IN (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags WHERE Count IS NOT NULL));",
        "SELECT P.Body FROM posts P, tags T WHERE P.Id = T.ExcerptPostId AND T.Count = (SELECT MAX(Count) FROM tags WHERE Count IS NOT NULL);",
        "SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1);",
        "SELECT P.Body FROM posts P JOIN tags T ON P.Id = T.ExcerptPostId WHERE T.Count = (SELECT MAX(T2.Count) FROM tags T2);",
        "SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.Count = (SELECT MAX(tags.Count) FROM tags);",
        "SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags));",
        "SELECT P.Body FROM posts P INNER JOIN (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags)) T ON P.Id = T.ExcerptPostId;",
        "SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags) LIMIT 1);"
      ]
    ]
  },
  {
    "id": 551,
    "db_id": "codebase_community",
    "nlq": "How many badges has the user csgillespie obtained?",
    "gold": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
        "SELECT COUNT(b.Id) AS BadgeCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "SELECT COUNT(b.Id) FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "SELECT COUNT(*) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
        "SELECT COUNT(b.Id) FROM badges b, users u WHERE b.UserId = u.Id AND u.DisplayName = 'csgillespie';",
        "SELECT COUNT(*) FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "SELECT COUNT(b.Id) FROM badges b LEFT JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND UserId IS NOT NULL;",
        "SELECT COUNT(*) FROM badges b INNER JOIN users u ON b.UserId = u.Id AND u.DisplayName = 'csgillespie';",
        "SELECT COUNT(b.Id) FROM badges b LEFT OUTER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';"
      ]
    ]
  },
  {
    "id": 552,
    "db_id": "codebase_community",
    "nlq": "Please list the names of the badges obtained by csgillespie.",
    "gold": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'csgillespie';",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie';",
        "SELECT Name FROM badges, users WHERE badges.UserId = users.Id AND users.DisplayName = 'csgillespie';",
        "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'csgillespie';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
        "SELECT T2.Name FROM users T1, badges T2 WHERE T1.Id = T2.UserId AND T1.DisplayName = 'csgillespie';",
        "SELECT Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "SELECT b.Name FROM badges b, users u WHERE b.UserId = u.Id AND u.DisplayName = 'csgillespie';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND UserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 553,
    "db_id": "codebase_community",
    "nlq": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
    "gold": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011';",
        "SELECT COUNT(b.Id) FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie' AND strftime('%Y', b.Date) = '2011';",
        "SELECT COUNT(*) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011';",
        "SELECT COUNT(*) AS BadgeCount FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie' AND strftime('%Y', badges.Date) = '2011';",
        "SELECT COUNT(badges.Id) FROM badges, users WHERE badges.UserId = users.Id AND users.DisplayName = 'csgillespie' AND strftime('%Y', badges.Date) = '2011';",
        "SELECT COUNT(*) FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie' AND strftime('%Y', b.Date) = '2011';",
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND Date LIKE '2011%';",
        "SELECT COUNT(*) FROM badges b, users u WHERE b.UserId = u.Id AND u.DisplayName = 'csgillespie' AND strftime('%Y', b.Date) = '2011';",
        "SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND substr(Date, 1, 4) = '2011';",
        "SELECT COUNT(*) FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie' AND substr(b.Date, 1, 4) = '2011';"
      ]
    ]
  },
  {
    "id": 554,
    "db_id": "codebase_community",
    "nlq": "What is the display name of the user who has obtained the most number of badges?",
    "gold": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "evidence": "who obtained the most number of badges refers to UserID with Max(Count(Id))",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM (SELECT UserId, COUNT(Id) AS BadgeCount FROM badges GROUP BY UserId) AS T1 JOIN users AS T2 ON T1.UserId = T2.Id ORDER BY T1.BadgeCount DESC LIMIT 1;",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1);",
        "WITH BadgeCounts AS (SELECT UserId, COUNT(Id) AS TotalBadges FROM badges GROUP BY UserId) SELECT DisplayName FROM users JOIN BadgeCounts ON users.Id = BadgeCounts.UserId ORDER BY TotalBadges DESC LIMIT 1;",
        "SELECT users.DisplayName FROM users INNER JOIN (SELECT UserId, COUNT(*) AS BadgeCount FROM badges GROUP BY UserId) AS BadgeSummary ON users.Id = BadgeSummary.UserId ORDER BY BadgeSummary.BadgeCount DESC LIMIT 1;",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Id) = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(Id) AS BadgeCount FROM badges GROUP BY UserId)));",
        "SELECT u.DisplayName FROM users u WHERE u.Id = (SELECT b.UserId FROM badges b GROUP BY b.UserId ORDER BY COUNT(b.Id) DESC LIMIT 1);",
        "SELECT TOP 1 DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC);",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM (SELECT UserId, COUNT(Id) AS BadgeCount FROM badges GROUP BY UserId ORDER BY BadgeCount DESC LIMIT 1) AS MaxBadge);",
        "WITH RankedUsers AS (SELECT UserId, RANK() OVER (ORDER BY COUNT(Id) DESC) AS Rank FROM badges GROUP BY UserId) SELECT users.DisplayName FROM users JOIN RankedUsers ON users.Id = RankedUsers.UserId WHERE RankedUsers.Rank = 1;",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(*) DESC LIMIT 1);"
      ]
    ]
  },
  {
    "id": 555,
    "db_id": "codebase_community",
    "nlq": "What is the average score of the posts owned by the user csgillespie?",
    "gold": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)",
    "infer_predictions": [
      [
        "SELECT AVG(P.Score) FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.Score IS NOT NULL;",
        "SELECT AVG(Score) AS AverageScore FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND Score IS NOT NULL;",
        "SELECT AVG(posts.Score) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgi...\n    "
      ]
    ]
  },
  {
    "id": 556,
    "db_id": "codebase_community",
    "nlq": "What is the average number of badges obtained by a user with over 200 views?",
    "gold": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200",
    "evidence": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))",
    "infer_predictions": [
      [
        "SELECT AVG(badge_count) FROM (SELECT COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(total_badges) FROM (SELECT COUNT(b.Id) AS total_badges FROM users u INNER JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(badge_count) FROM (SELECT u.Id, COUNT(b.Id) AS badge_count FROM users u, badges b WHERE u.Id = b.UserId AND u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(count_badges) FROM (SELECT COUNT(b.Id) AS count_badges FROM users u LEFT JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(number_of_badges) FROM (SELECT u.Id, COUNT(b.Id) AS number_of_badges FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(badge_total) FROM (SELECT COUNT(b.Id) AS badge_total FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(badge_count) FROM (SELECT u.Id, COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(badge_count) FROM (SELECT COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(badge_count) FROM (SELECT COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)",
        "SELECT AVG(badge_count) FROM (SELECT COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)"
      ]
    ]
  },
  {
    "id": 557,
    "db_id": "codebase_community",
    "nlq": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "gold": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "evidence": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100",
    "infer_predictions": [
      [
        "SELECT (COUNT(*) FILTER (WHERE U.Age > 65) * 100.0 / COUNT(*)) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5;",
        "SELECT (SUM(CASE WHEN U.Age > 65 THEN 1 ELSE 0 END) * 100.0 / COUNT(P.Id)) AS Percentage FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5;",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM posts WHERE Score > 5)) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5 AND U.Age > 65;",
        "SELECT (COUNT(CASE WHEN U.Age > 65 THEN 1 END) * 100.0 / COUNT(P.Id)) AS Percentage FROM posts P LEFT JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5;",
        "SELECT (100.0 * (SELECT COUNT(*) FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5 AND U.Age > 65) / COUNT(*)) AS Percentage FROM posts WHERE Score > 5;",
        "SELECT (100.0 * COUNT(CASE WHEN U.Age > 65 THEN 1 END) / COUNT(P.Id)) AS Percentage FROM posts P LEFT JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5;",
        "SELECT (100.0 * COUNT(P.Id) FILTER (WHERE U.Age > 65) / COUNT(P.Id)) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5;",
        "SELECT (100.0 * COUNT(P.Id) / (SELECT COUNT(*) FROM posts WHERE Score > 5)) AS ElderPercentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5 AND U.Age > 65;",
        "SELECT (100.0 * COUNT(P.Id) / (SELECT COUNT(*) FROM posts WHERE Score > 5)) AS ElderPercentage FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5 AND U.Age > 65;",
        "SELECT (100.0 * COUNT(P.Id) / (SELECT COUNT(*) FROM posts WHERE Score > 5)) AS ElderPercentage FROM posts P LEFT JOIN users U ON P.OwnerUserId = U.Id WHERE P.Score > 5 AND U.Age > 65;"
      ]
    ]
  },
  {
    "id": 558,
    "db_id": "codebase_community",
    "nlq": "How many votes did the user No.58 take on 2010/7/19?",
    "gold": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
    "evidence": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "SELECT COUNT(Id) AS VoteCount FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "SELECT COUNT(*) AS TotalVotes FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = DATE('2010-07-19');",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND strftime('%Y-%m-%d', CreationDate) = '2010-07-19';",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate LIKE '2010-07-19';",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';"
      ]
    ]
  },
  {
    "id": 559,
    "db_id": "codebase_community",
    "nlq": "Indicate the creation date of the maximum number of votes.",
    "gold": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
    "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))",
    "infer_predictions": [
      [
        "SELECT CreationDate FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;",
        "SELECT T1.CreationDate FROM (SELECT CreationDate, COUNT(Id) AS VoteCount FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate) T1 ORDER BY T1.VoteCount DESC LIMIT 1;",
        "SELECT CreationDate FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate HAVING COUNT(Id) = (SELECT MAX(VoteCount) FROM (SELECT COUNT(Id) AS VoteCount FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate) T2);",
        "WITH VoteCounts AS (SELECT CreationDate, COUNT(Id) AS VoteCount FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate) SELECT CreationDate FROM VoteCounts WHERE VoteCount = (SELECT MAX(VoteCount) FROM VoteCounts);",
        "SELECT TOP 1 CreationDate FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate ORDER BY COUNT(Id) DESC;",
        "SELECT CreationDate FROM (SELECT CreationDate, COUNT(Id) AS VoteCount FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate ORDER BY VoteCount DESC) T1 LIMIT 1;",
        "SELECT CreationDate FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate ORDER BY COUNT(Id) DESC FETCH FIRST 1 ROW ONLY;",
        "WITH RankedDates AS (SELECT CreationDate, RANK() OVER (ORDER BY COUNT(Id) DESC) AS Rank FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate) SELECT CreationDate FROM RankedDates WHERE Rank = 1;",
        "SELECT CreationDate FROM votes GROUP BY CreationDate HAVING COUNT(Id) = (SELECT MAX(COUNT(Id)) FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate);",
        "SELECT CreationDate, COUNT(Id) AS VoteCount INTO #TempVoteCounts FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate; SELECT CreationDate FROM #TempVoteCounts WHERE VoteCount = (SELECT MAX(VoteCount) FROM #TempVoteCounts);"
      ]
    ]
  },
  {
    "id": 560,
    "db_id": "codebase_community",
    "nlq": "Give the number of \"Revival\" badges.",
    "gold": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
    "evidence": "number refers to Id; 'Revival' is the Name of badge",
    "infer_predictions": [
      [
        "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival';",
        "SELECT COUNT(*) FROM badges WHERE Name = 'Revival';",
        "SELECT COUNT(badges.Id) FROM badges WHERE badges.Name = 'Revival';",
        "SELECT COUNT(Id) AS RevivalCount FROM badges WHERE Name = 'Revival';",
        "SELECT COUNT(Id) FROM badges WHERE Name LIKE 'Revival';",
        "SELECT COUNT(Id) FROM badges b WHERE b.Name = 'Revival';",
        "SELECT COUNT(*) FROM badges WHERE Name = 'Revival' AND Name IS NOT NULL;",
        "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival' AND Id IS NOT NULL;",
        "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival' AND Name IS NOT NULL AND Id IS NOT NULL;",
        "SELECT COUNT(*) FROM badges b WHERE b.Name = 'Revival' AND b.Name IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 561,
    "db_id": "codebase_community",
    "nlq": "What is the title for the post which got the highest score comment?",
    "gold": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )",
    "evidence": "highest score comment refers to Max(comments.Score)",
    "infer_predictions": [
      [
        "SELECT T2.Title FROM posts T2 JOIN (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments)) T1 ON T2.Id = T1.PostId;",
        "SELECT Title FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments));",
        "SELECT p.Title FROM posts p WHERE p.Id = (SELECT c.PostId FROM comments c ORDER BY c.Score DESC LIMIT 1);",
        "SELECT Title FROM posts WHERE Id = (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments));",
        "SELECT p.Title FROM posts p INNER JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments);",
        "SELECT Title FROM posts WHERE Id = (SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1);",
        "SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(c.Score) FROM comments c);",
        "SELECT Title FROM posts WHERE Id = (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments WHERE Score IS NOT NULL));",
        "SELECT p.Title FROM posts p WHERE p.Id = (SELECT c.PostId FROM comments c WHERE c.Score = (SELECT MAX(Score) FROM comments));",
        "SELECT Title FROM posts WHERE Id = (SELECT PostId FROM comments WHERE Score IN (SELECT MAX(Score) FROM comments));"
      ]
    ]
  },
  {
    "id": 562,
    "db_id": "codebase_community",
    "nlq": "For the post which got 1910 view counts, how many comments does it get?",
    "gold": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910);",
        "SELECT COUNT(C.Id) AS NumberOfComments FROM comments C JOIN posts P ON C.PostId = P.Id WHERE P.ViewCount = 1910;",
        "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount = 1910);",
        "SELECT COUNT(comment.Id) FROM comments comment INNER JOIN posts post ON comment.PostId = post.Id WHERE post.ViewCount = 1910;",
        "SELECT COUNT(*) FROM comments, posts WHERE comments.PostId = posts.Id AND posts.ViewCount = 1910;",
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910 AND Id IS NOT NULL);",
        "SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910);",
        "SELECT COUNT(*) FROM comments WHERE EXISTS (SELECT 1 FROM posts WHERE posts.Id = comments.PostId AND posts.ViewCount = 1910);",
        "SELECT COUNT(comments.Id) FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount = 1910;",
        "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount = 1910;"
      ]
    ]
  },
  {
    "id": 563,
    "db_id": "codebase_community",
    "nlq": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "gold": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
    "infer_predictions": [
      [
        "SELECT T2.FavoriteCount FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.UserId = 3025 AND T1.CreationDate = '2014-04-23 20:29:39.0';",
        "SELECT FavoriteCount FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39.0');",
        "SELECT posts.FavoriteCount FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE comments.UserId = 3025 AND comments.CreationDate = '2014-04-23 20:29:39.0';",
        "SELECT p.FavoriteCount FROM posts p WHERE p.Id = (SELECT c.PostId FROM comments c WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39.0');",
        "SELECT FavoriteCount FROM posts WHERE Id = (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39.0');",
        "SELECT p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39.0';",
        "SELECT p.FavoriteCount FROM posts p, comments c WHERE p.Id = c.PostId AND c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39.0';",
        "SELECT FavoriteCount FROM posts WHERE Id = (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39.0') LIMIT 1;",
        "SELECT p.FavoriteCount FROM posts p INNER JOIN comments c ON p.Id = c.PostId AND c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39.0';",
        "SELECT FavoriteCount FROM posts WHERE Id = (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39.0') AND FavoriteCount IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 564,
    "db_id": "codebase_community",
    "nlq": "Give the only one comment text of the post with parent id 107829.",
    "gold": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1",
    "evidence": "one comment refers to CommentCount = '1'",
    "infer_predictions": [
      [
        "SELECT T2.Text FROM posts T1 JOIN comments T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1;",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = 1);",
        "SELECT c.Text FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.ParentId = 107829 AND p.CommentCount = 1;",
        "SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = 1);",
        "SELECT c.Text FROM comments AS c JOIN posts AS p ON c.PostId = p.Id WHERE p.ParentId = 107829 AND p.CommentCount = 1;",
        "SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = 1 LIMIT 1);",
        "SELECT c.Text FROM comments c, posts p WHERE c.PostId = p.Id AND p.ParentId = 107829 AND p.CommentCount = 1;",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = 1 LIMIT 1);",
        "SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = 1) AND EXISTS (SELECT 1 FROM posts WHERE ParentId = 107829 AND CommentCount = 1);",
        "SELECT c.Text FROM comments AS c INNER JOIN (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = 1) AS p ON c.PostId = p.Id;"
      ]
    ]
  },
  {
    "id": 565,
    "db_id": "codebase_community",
    "nlq": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished? Answer by 'NOT well-finished' or 'well-finished' for each record.",
    "gold": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
    "infer_predictions": [
      [
        "SELECT CASE WHEN p.ClosedDate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END AS Status FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';",
        "SELECT IFNULL((SELECT 'well-finished' WHERE p.ClosedDate IS NOT NULL), 'NOT well-finished') AS Status FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';",
        "SELECT (CASE WHEN p.ClosedDate IS NOT NULL THEN 'well-finished' ELSE 'NOT well-finished' END) AS Status FROM comments AS c JOIN posts AS p ON c.PostId = p.Id WHERE c.UserId = 23853 AND strftime('%Y-%m-%d %H:%M:%S', c.CreationDate) = '2013-07-12 09:08:18';",
        "SELECT 'well-finished' AS Status FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NOT NULL UNION ALL SELECT 'NOT well-finished' WHERE NOT EXISTS (SELECT 1 FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NOT NULL);",
        "SELECT CASE WHEN EXISTS (SELECT 1 FROM posts p WHERE p.Id = c.PostId AND p.ClosedDate IS NOT NULL) THEN 'well-finished' ELSE 'NOT well-finished' END AS Status FROM comments c WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';",
        "SELECT 'well-finished' AS Status FROM comments c, posts p WHERE c.PostId = p.Id AND c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NOT NULL UNION SELECT 'NOT well-finished' FROM comments c, posts p WHERE c.PostId = p.Id AND c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NULL;",
        "SELECT (CASE WHEN p.ClosedDate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END) AS Status FROM comments c LEFT JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';",
        "SELECT 'well-finished' AS Status FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NOT NULL UNION SELECT 'NOT well-finished' FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0' AND p.ClosedDate IS NULL;",
        "SELECT DISTINCT CASE WHEN p.ClosedDate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END AS Status FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';",
        "SELECT (CASE WHEN p.ClosedDate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END) AS Status FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';"
      ]
    ]
  },
  {
    "id": 566,
    "db_id": "codebase_community",
    "nlq": "For the owner user of post No. 65041, what is his/her reputation points?",
    "gold": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
    "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation",
    "infer_predictions": [
      [
        "SELECT U.Reputation FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.Id = 65041;",
        "SELECT Reputation FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id = 65041);",
        "SELECT users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 65041;",
        "SELECT U.Reputation FROM users AS U, posts AS P WHERE U.Id = P.OwnerUserId AND P.Id = 65041;",
        "SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041);",
        "SELECT U.Reputation FROM users U WHERE U.Id = (SELECT P.OwnerUserId FROM posts P WHERE P.Id = 65041);",
        "SELECT users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId AND posts.Id = 65041;",
        "SELECT U.Reputation FROM users U INNER JOIN (SELECT OwnerUserId FROM posts WHERE Id = 65041) AS P ON U.Id = P.OwnerUserId;",
        "SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041 AND OwnerUserId IS NOT NULL);",
        "SELECT U.Reputation FROM users U JOIN posts P ON U.Id = P.OwnerUserId AND P.Id = 65041 WHERE P.OwnerUserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 567,
    "db_id": "codebase_community",
    "nlq": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "gold": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
    "evidence": "\"Tiago Pasqualini\" is the DisplayName;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');",
        "SELECT COUNT(p.Id) AS NumberOfPosts FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Tiago Pasqualini';",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');",
        "SELECT COUNT(1) FROM posts p JOIN users u ON p.OwnerUserId = u.Id AND u.DisplayName = 'Tiago Pasqualini';",
        "SELECT COUNT(post.Id) FROM posts post, users usr WHERE post.OwnerUserId = usr.Id AND usr.DisplayName = 'Tiago Pasqualini';",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini') AND OwnerUserId IS NOT NULL;",
        "SELECT COUNT(*) AS TotalPosts FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');",
        "SELECT COUNT(*) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Tiago Pasqualini';",
        "SELECT COUNT(*) FROM posts p WHERE EXISTS (SELECT 1 FROM users u WHERE u.Id = p.OwnerUserId AND u.DisplayName = 'Tiago Pasqualini');",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini') AND OwnerUserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 568,
    "db_id": "codebase_community",
    "nlq": "Provide the display name of the user who made the vote No.6347.",
    "gold": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
    "evidence": "vote no. 6347 refers to Id = '6347'",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM votes T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347;",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM votes WHERE Id = 6347);",
        "SELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE votes.Id = 6347;",
        "SELECT u.DisplayName FROM users u, votes v WHERE u.Id = v.UserId AND v.Id = 6347;",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE Id = 6347);",
        "SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347;",
        "SELECT DisplayName FROM users JOIN votes ON users.Id = votes.UserId WHERE votes.Id = 6347;",
        "SELECT T2.DisplayName FROM votes T1, users T2 WHERE T1.UserId = T2.Id AND T1.Id = 6347;",
        "SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.Id = 6347;",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE Id = 6347 AND UserId IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 569,
    "db_id": "codebase_community",
    "nlq": "Give the number of votes for the post about data visualization.",
    "gold": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'",
    "evidence": "About data visualization is the Title that contains 'data visualization';",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%')",
        "SELECT COUNT(v.Id) FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data visualization%'",
        "SELECT COUNT(vote.Id) AS VoteCount FROM votes vote INNER JOIN posts post ON vote.PostId = post.Id WHERE post.Title LIKE '%data visualization%'",
        "SELECT COUNT(*) FROM votes v WHERE EXISTS (SELECT 1 FROM posts p WHERE p.Id = v.PostId AND p.Title LIKE '%data visualization%')",
        "SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%')",
        "SELECT COUNT(*) AS NumberOfVotes FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'",
        "SELECT COUNT(v.Id) FROM votes v INNER JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data visualization%'",
        "SELECT COUNT(*) FROM votes v, posts p WHERE v.PostId = p.Id AND p.Title LIKE '%data visualization%'",
        "SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%')",
        "SELECT COUNT(*) FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data visualization%'"
      ]
    ]
  },
  {
    "id": 570,
    "db_id": "codebase_community",
    "nlq": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "gold": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms');",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms');",
        "SELECT b.Name FROM badges AS b, users AS u WHERE b.UserId = u.Id AND u.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT Name FROM badges, users WHERE badges.UserId = users.Id AND users.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT T2.Name FROM users AS T1, badges AS T2 WHERE T1.Id = T2.UserId AND T1.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT Name FROM badges JOIN users ON badges.UserId = users.Id AND users.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms') AND UserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 572,
    "db_id": "codebase_community",
    "nlq": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "gold": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "infer_predictions": [
      [
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "SELECT p.ViewCount FROM posts p WHERE p.Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "SELECT ViewCount FROM posts WHERE Title LIKE 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' AND ViewCount IS NOT NULL;",
        "SELECT p.ViewCount FROM posts p WHERE p.Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' AND p.ViewCount IS NOT NULL;",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' LIMIT 1;",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' ORDER BY Id DESC LIMIT 1;",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' ORDER BY Id ASC LIMIT 1;",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' AND ViewCount > 0;",
        "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' AND ViewCount >= 0;"
      ]
    ]
  },
  {
    "id": 573,
    "db_id": "codebase_community",
    "nlq": "Write the contents of comments with a score of 17.",
    "gold": "SELECT Text FROM comments WHERE Score = 17",
    "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text",
    "infer_predictions": [
      [
        "SELECT Text FROM comments WHERE Score = 17;",
        "SELECT Text FROM comments WHERE Score IS 17;",
        "SELECT c.Text FROM comments AS c WHERE c.Score = 17;",
        "SELECT Text FROM comments WHERE Score = 17 AND Score IS NOT NULL;",
        "SELECT Text FROM comments WHERE comments.Score = 17;",
        "SELECT Text FROM comments WHERE Score IN (17);",
        "SELECT Text FROM (SELECT * FROM comments WHERE Score = 17) AS FilteredComments;",
        "SELECT Text FROM comments WHERE Score = 17 AND Text IS NOT NULL;",
        "SELECT Text FROM comments WHERE Score = (SELECT DISTINCT Score FROM comments WHERE Score = 17);",
        "SELECT Text FROM comments WHERE EXISTS (SELECT 1 FROM comments AS c WHERE c.Score = 17 AND c.Id = comments.Id);"
      ]
    ]
  },
  {
    "id": 575,
    "db_id": "codebase_community",
    "nlq": "What is the badge name that user 'SilentGhost' obtained?",
    "gold": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'SilentGhost');",
        "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost';",
        "SELECT Name FROM badges, users WHERE users.Id = badges.UserId AND users.DisplayName = 'SilentGhost';",
        "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost';",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'SilentGhost');",
        "SELECT T2.Name FROM users T1, badges T2 WHERE T1.Id = T2.UserId AND T1.DisplayName = 'SilentGhost';",
        "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id AND users.DisplayName = 'SilentGhost';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'SilentGhost') AND UserId IS NOT NULL;",
        "SELECT T2.Name FROM users T1 LEFT JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost';"
      ]
    ]
  },
  {
    "id": 576,
    "db_id": "codebase_community",
    "nlq": "Name the user that commented 'thank you user93!'",
    "gold": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
    "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM comments T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!';",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'thank you user93!');",
        "SELECT u.DisplayName FROM users u INNER JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'thank you user93!';",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM comments WHERE Text = 'thank you user93!');",
        "SELECT users.DisplayName FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'thank you user93!';",
        "SELECT DisplayName FROM users JOIN comments ON users.Id = comments.UserId AND comments.Text = 'thank you user93!';",
        "SELECT u.DisplayName FROM users u, comments c WHERE u.Id = c.UserId AND c.Text = 'thank you user93!';",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM comments WHERE Text LIKE 'thank you user93!');",
        "SELECT DisplayName FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'thank you user93!';",
        "SELECT u.DisplayName FROM users u JOIN comments c ON u.Id = c.UserId AND c.Text = 'thank you user93!';"
      ]
    ]
  },
  {
    "id": 577,
    "db_id": "codebase_community",
    "nlq": "Write all comments made by user 'A Lion.'",
    "gold": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
    "infer_predictions": [
      [
        "SELECT T2.Text FROM users T1 JOIN comments T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion';",
        "SELECT comments.Text FROM comments INNER JOIN users ON users.Id = comments.UserId WHERE users.DisplayName = 'A Lion';",
        "SELECT Text FROM comments WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'A Lion');",
        "SELECT c.Text FROM comments AS c JOIN users AS u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';",
        "SELECT Text FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'A Lion');",
        "SELECT c.Text FROM comments c, users u WHERE c.UserId = u.Id AND u.DisplayName = 'A Lion';",
        "SELECT Text FROM comments WHERE UserId = (SELECT users.Id FROM users WHERE DisplayName = 'A Lion');",
        "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion';",
        "SELECT comments.Text FROM comments, users WHERE comments.UserId = users.Id AND users.DisplayName = 'A Lion';",
        "SELECT Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion';"
      ]
    ]
  },
  {
    "id": 578,
    "db_id": "codebase_community",
    "nlq": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "gold": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
    "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
    "infer_predictions": [
      [
        "SELECT U.Reputation FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT Reputation FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Title = 'Understanding what Dassault iSight is doing?')",
        "SELECT users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT U.Reputation FROM users AS U, posts AS P WHERE U.Id = P.OwnerUserId AND P.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Understanding what Dassault iSight is doing?')",
        "SELECT U.Reputation FROM users U JOIN posts P ON U.Id = P.OwnerUserId AND P.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT U.Reputation FROM users U, posts P WHERE U.Id = P.OwnerUserId AND P.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Understanding what Dassault iSight is doing?'",
        "SELECT U.Reputation FROM users U WHERE U.Id = (SELECT P.OwnerUserId FROM posts P WHERE P.Title = 'Understanding what Dassault iSight is doing?')",
        "SELECT U.Reputation FROM users U INNER JOIN posts P ON U.Id = P.OwnerUserId WHERE P.Title = 'Understanding what Dassault iSight is doing?'"
      ]
    ]
  },
  {
    "id": 580,
    "db_id": "codebase_community",
    "nlq": "Name 10 users with the badge name 'Necromancer.'",
    "gold": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "infer_predictions": [
      [
        "SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Necromancer' LIMIT 10;",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Necromancer') LIMIT 10;",
        "SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId AND badges.Name = 'Necromancer' LIMIT 10;",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Necromancer' LIMIT 10);",
        "SELECT U.DisplayName FROM users U, badges B WHERE U.Id = B.UserId AND B.Name = 'Necromancer' LIMIT 10;",
        "SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Necromancer' ORDER BY U.DisplayName LIMIT 10;",
        "SELECT TOP 10 DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Necromancer');",
        "SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Necromancer' GROUP BY U.DisplayName LIMIT 10;",
        "SELECT DISTINCT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Necromancer' LIMIT 10;",
        "SELECT U.DisplayName FROM badges B LEFT JOIN users U ON B.UserId = U.Id WHERE B.Name = 'Necromancer' LIMIT 10;"
      ]
    ]
  },
  {
    "id": 583,
    "db_id": "codebase_community",
    "nlq": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "gold": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
    "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
    "infer_predictions": [
      [
        "SELECT SUM(P.Score) AS TotalScore, U.WebsiteUrl FROM users U JOIN posts P ON U.Id = P.LastEditorUserId WHERE U.DisplayName = 'Yevgeny' GROUP BY U.WebsiteUrl;",
        "SELECT SUM(Score) AS TotalScore, WebsiteUrl FROM users INNER JOIN posts ON users.Id = posts.LastEditorUserId WHERE DisplayName = 'Yevgeny' GROUP BY WebsiteUrl;",
        "SELECT SUM(posts.Score), users.WebsiteUrl FROM users, posts WHERE users.Id = posts.LastEditorUserId AND users.DisplayName = 'Yevgeny' GROUP BY users.WebsiteUrl;",
        "SELECT TOTAL(posts.Score) AS TotalScore, users.WebsiteUrl FROM users JOIN posts ON users.Id = posts.LastEditorUserId WHERE users.DisplayName = 'Yevgeny' GROUP BY users.WebsiteUrl;",
        "SELECT SUM(P.Score), U.WebsiteUrl FROM users U, posts P WHERE U.Id = P.LastEditorUserId AND U.DisplayName = 'Yevgeny' GROUP BY U.WebsiteUrl;",
        "SELECT SUM(P.Score) TotalScore, U.WebsiteUrl FROM users U INNER JOIN posts P ON U.Id = P.LastEditorUserId AND U.DisplayName = 'Yevgeny' GROUP BY U.WebsiteUrl;",
        "SELECT SUM(P.Score) AS TotalScore, U.WebsiteUrl FROM users AS U JOIN posts AS P ON U.Id = P.LastEditorUserId WHERE U.DisplayName = 'Yevgeny' GROUP BY U.WebsiteUrl;",
        "SELECT SUM(Score) AS TotalScore, WebsiteUrl FROM users JOIN posts ON Id = LastEditorUserId WHERE DisplayName = 'Yevgeny' GROUP BY WebsiteUrl;",
        "SELECT SUM(P.Score) AS TotalScore, U.WebsiteUrl FROM users U JOIN posts P ON U.Id = P.LastEditorUserId AND U.DisplayName = 'Yevgeny' GROUP BY U.WebsiteUrl;",
        "SELECT SUM(P.Score) AS TotalScore, U.WebsiteUrl FROM users U LEFT JOIN posts P ON U.Id = P.LastEditorUserId WHERE U.DisplayName = 'Yevgeny' GROUP BY U.WebsiteUrl;"
      ]
    ]
  },
  {
    "id": 585,
    "db_id": "codebase_community",
    "nlq": "How much is the total bounty amount of the post titled about 'data'",
    "gold": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
    "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)",
    "infer_predictions": [
      [
        "SELECT SUM(v.BountyAmount) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%' AND v.BountyAmount IS NOT NULL;",
        "SELECT SUM(BountyAmount) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data%') AND BountyAmount IS NOT NULL;",
        "SELECT SUM(v.BountyAmount) AS TotalBounty FROM posts p INNER JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%' AND v.BountyAmount IS NOT NULL;",
        "SELECT SUM(BountyAmount) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data%') AND BountyAmount IS NOT NULL;",
        "SELECT SUM(v.BountyAmount) FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data%' AND v.BountyAmount IS NOT NULL;",
        "SELECT SUM(v.BountyAmount) FROM posts p, votes v WHERE p.Id = v.PostId AND p.Title LIKE '%data%' AND v.BountyAmount IS NOT NULL;",
        "SELECT SUM(v.BountyAmount) FROM votes v, posts p WHERE p.Id = v.PostId AND p.Title LIKE '%data%' AND v.BountyAmount IS NOT NULL;",
        "SELECT SUM(v.BountyAmount) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%' AND v.BountyAmount IS NOT NULL;",
        "SELECT SUM(v.BountyAmount) FROM posts p INNER JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%' AND v.BountyAmount IS NOT NULL;",
        "SELECT SUM(BountyAmount) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title CONTAINS 'data') AND BountyAmount IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 588,
    "db_id": "codebase_community",
    "nlq": "Give the total number of comments posted by user ID 13.",
    "gold": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM comments WHERE UserId = 13;",
        "SELECT COUNT(Id) AS TotalComments FROM comments WHERE UserId = 13;",
        "SELECT COUNT(1) FROM comments WHERE UserId = 13;",
        "SELECT COUNT(Id) FROM comments WHERE UserId = 13;",
        "SELECT COUNT(*) AS CommentCount FROM comments WHERE UserId = 13;",
        "SELECT COUNT(*) FROM comments c WHERE c.UserId = 13;",
        "SELECT COUNT(*) FROM comments WHERE comments.UserId = 13;",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND UserId IS NOT NULL;",
        "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Id IS NOT NULL;",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 GROUP BY UserId;"
      ]
    ]
  },
  {
    "id": 589,
    "db_id": "codebase_community",
    "nlq": "Which user ID has the highest reputation?",
    "gold": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "evidence": "highest reputation refers to Max(Reputation)",
    "infer_predictions": [
      [
        "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL)",
        "SELECT Id FROM users WHERE Reputation IN (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL)",
        "SELECT T1.Id FROM users T1 JOIN (SELECT MAX(Reputation) AS MaxRep FROM users) T2 ON T1.Reputation = T2.MaxRep",
        "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)",
        "SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1",
        "SELECT TOP 1 Id FROM users ORDER BY Reputation DESC",
        "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL) LIMIT 1",
        "SELECT Id FROM (SELECT Id, Reputation FROM users ORDER BY Reputation DESC LIMIT 1)",
        "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users) AND Reputation IS NOT NULL",
        "SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL) ORDER BY Id"
      ]
    ]
  },
  {
    "id": 590,
    "db_id": "codebase_community",
    "nlq": "Which user ID has the lowest view?",
    "gold": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )",
    "evidence": "lowest views refers to Min(Views)",
    "infer_predictions": [
      [
        "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL);",
        "SELECT Id FROM users WHERE Views IN (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL);",
        "SELECT T1.Id FROM users T1 INNER JOIN (SELECT MIN(Views) AS MinViews FROM users WHERE Views IS NOT NULL) T2 ON T1.Views = T2.MinViews;",
        "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL) AND Views IS NOT NULL;",
        "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL) ORDER BY Id;",
        "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL) LIMIT 1;",
        "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL) GROUP BY Id;",
        "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL) AND Views IS NOT NULL ORDER BY Id;",
        "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL) AND Views IS NOT NULL LIMIT 1;",
        "SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users WHERE Views IS NOT NULL) AND Views IS NOT NULL GROUP BY Id;"
      ]
    ]
  },
  {
    "id": 591,
    "db_id": "codebase_community",
    "nlq": "How many users are awarded with supporter badge during year 2011?",
    "gold": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
    "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT b.UserId) FROM badges b WHERE b.Name = 'Supporter' AND strftime('%Y', b.Date) = '2011' AND b.UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name LIKE 'Supporter' AND strftime('%Y', Date) = '2011' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND Date BETWEEN '2011-01-01' AND '2011-12-31' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND Date LIKE '2011%' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND substr(Date, 1, 4) = '2011' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND Date >= '2011-01-01' AND Date <= '2011-12-31' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND CAST(strftime('%Y', Date) AS INTEGER) = 2011 AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND Year(Date) = 2011 AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011' AND UserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 592,
    "db_id": "codebase_community",
    "nlq": "How many users are awarded with more than 5 badges?",
    "gold": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
    "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5) AS SubQuery;",
        "SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;",
        "WITH BadgeCounts AS (SELECT UserId, COUNT(Name) AS NumBadges FROM badges GROUP BY UserId) SELECT COUNT(UserId) FROM BadgeCounts WHERE NumBadges > 5;",
        "SELECT COUNT(UserId) FROM (SELECT UserId, COUNT(Name) AS BadgeCount FROM badges GROUP BY UserId HAVING BadgeCount > 5) AS FilteredUsers;",
        "SELECT COUNT(*) FROM (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5) AS BadgeGroup;",
        "SELECT COUNT(*) FROM (SELECT UserId, COUNT(Name) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5) AS UserBadgeCount;",
        "WITH UserBadgeCounts AS (SELECT UserId, COUNT(Name) AS TotalBadges FROM badges GROUP BY UserId) SELECT COUNT(UserId) FROM UserBadgeCounts WHERE TotalBadges > 5;",
        "SELECT COUNT(*) FROM (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5) AS CountedUsers;",
        "SELECT COUNT(UserId) FROM (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5) AS ValidUsers;",
        "WITH CTE AS (SELECT UserId, COUNT(Name) AS BadgeNum FROM badges GROUP BY UserId) SELECT COUNT(UserId) FROM CTE WHERE BadgeNum > 5;"
      ]
    ]
  },
  {
    "id": 594,
    "db_id": "codebase_community",
    "nlq": "Which user created post ID 1 and what is the reputation of this user?",
    "gold": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.Id, T2.Reputation FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1;",
        "SELECT users.Id, users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 1;",
        "SELECT U.Id, U.Reputation FROM users U, posts P WHERE U.Id = P.OwnerUserId AND P.Id = 1;",
        "SELECT Id, Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 1);",
        "SELECT user.Id, user.Reputation FROM users user WHERE user.Id IN (SELECT OwnerUserId FROM posts WHERE Id = 1);",
        "SELECT U.Id, U.Reputation FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.Id = 1;",
        "SELECT users.Id, users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId AND posts.Id = 1;",
        "SELECT Id, Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 1 AND OwnerUserId IS NOT NULL);",
        "SELECT U.Id, U.Reputation FROM users U WHERE EXISTS (SELECT 1 FROM posts P WHERE P.OwnerUserId = U.Id AND P.Id = 1);",
        "SELECT users.Id, users.Reputation FROM users, posts WHERE users.Id = posts.OwnerUserId AND posts.Id = 1;"
      ]
    ]
  },
  {
    "id": 596,
    "db_id": "codebase_community",
    "nlq": "Which users have posted the most comments. List out the user's badge?",
    "gold": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
    "evidence": "user with the most comments refers to UserId where Max(Count(Id)",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId) AS T1 JOIN badges T2 ON T1.UserId = T2.UserId WHERE T1.CommentCount = (SELECT MAX(CommentCount) FROM (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId))",
        "SELECT b.Name FROM badges b INNER JOIN (SELECT UserId, COUNT(Id) AS TotalComments FROM comments GROUP BY UserId HAVING TotalComments = (SELECT MAX(TotalComments) FROM (SELECT COUNT(Id) AS TotalComments FROM comments GROUP BY UserId))) c ON b.UserId = c.UserId",
        "SELECT b.Name FROM badges b WHERE b.UserId IN (SELECT UserId FROM comments GROUP BY UserId HAVING COUNT(Id) = (SELECT MAX(CommentCount) FROM (SELECT COUNT(Id) AS CommentCount FROM comments GROUP BY UserId)))",
        "SELECT b.Name FROM badges b JOIN (SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1) c ON b.UserId = c.UserId",
        "SELECT b.Name FROM badges b WHERE EXISTS (SELECT 1 FROM comments c WHERE c.UserId = b.UserId GROUP BY c.UserId HAVING COUNT(c.Id) = (SELECT MAX(CommentCount) FROM (SELECT COUNT(Id) AS CommentCount FROM comments GROUP BY UserId)))",
        "SELECT Name FROM badges WHERE UserId = (SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)",
        "SELECT b.Name FROM badges b INNER JOIN (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId) c ON b.UserId = c.UserId WHERE c.CommentCount = (SELECT MAX(CommentCount) FROM (SELECT COUNT(Id) AS CommentCount FROM comments GROUP BY UserId))",
        "SELECT Name FROM badges WHERE UserId IN (SELECT UserId FROM comments GROUP BY UserId HAVING COUNT(Id) = (SELECT MAX(CommentCount) FROM (SELECT COUNT(Id) AS CommentCount FROM comments GROUP BY UserId)))",
        "SELECT b.Name FROM badges b, (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId) c WHERE b.UserId = c.UserId AND c.CommentCount = (SELECT MAX(CommentCount) FROM (SELECT COUNT(Id) AS CommentCount FROM comments GROUP BY UserId))",
        "SELECT b.Name FROM badges b JOIN (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId HAVING CommentCount = (SELECT MAX(CommentCount) FROM (SELECT COUNT(Id) AS CommentCount FROM comments GROUP BY UserId))) c ON b.UserId = c.UserId"
      ]
    ]
  },
  {
    "id": 597,
    "db_id": "codebase_community",
    "nlq": "How many users from India have the teacher badges?",
    "gold": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
    "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Location = 'India' AND T2.Name = 'Teacher';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT T1.Id FROM users T1 INNER JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Location = 'India' AND T2.Name = 'Teacher');",
        "SELECT COUNT(UNIQUE T1.Id) FROM users T1, badges T2 WHERE T1.Id = T2.UserId AND T1.Location = 'India' AND T2.Name = 'Teacher';",
        "SELECT COUNT(DISTINCT users.Id) FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'India' AND badges.Name = 'Teacher';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Location = 'India') AND Name = 'Teacher';",
        "SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'India' AND T2.Name = 'Teacher';",
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 INNER JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Location = 'India' AND T2.Name = 'Teacher';",
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 LEFT JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Location = 'India' AND T2.Name = 'Teacher';",
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1, badges T2 WHERE T1.Id = T2.UserId AND T1.Location = 'India' AND T2.Name = 'Teacher';",
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Location = 'India' AND T2.Name = 'Teacher';"
      ]
    ]
  },
  {
    "id": 599,
    "db_id": "codebase_community",
    "nlq": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
    "gold": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT DISTINCT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS UniqueUserCount FROM postHistory AS T1 WHERE T1.PostId = 3720;",
        "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT T2.UserId) FROM comments AS T2 WHERE T2.PostId = T1.PostId) AS UniqueUserCount FROM postHistory AS T1 WHERE T1.PostId = 3720;",
        "WITH CommentUsers AS (SELECT COUNT(DISTINCT UserId) AS UserCount FROM comments WHERE PostId = 3720) SELECT T1.PostHistoryTypeId, CommentUsers.UserCount FROM postHistory AS T1, CommentUsers WHERE T1.PostId = 3720;",
        "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) FROM postHistory AS T1 WHERE T1.PostId = 3720;",
        "SELECT DISTINCT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS UniqueUserCount FROM postHistory AS T1 WHERE T1.PostId = 3720;",
        "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments AS T2 WHERE T2.PostId = T1.PostId) FROM postHistory AS T1 WHERE T1.PostId = 3720;",
        "WITH UniqueComments AS (SELECT COUNT(DISTINCT UserId) AS UserCount FROM comments WHERE PostId = 3720) SELECT T1.PostHistoryTypeId, UniqueComments.UserCount FROM postHistory AS T1 CROSS JOIN UniqueComments WHERE T1.PostId = 3720;",
        "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS UniqueUserCount FROM postHistory AS T1 WHERE T1.PostId = 3720;",
        "SELECT DISTINCT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) FROM postHistory AS T1 WHERE T1.PostId = 3720;",
        "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = T1.PostId) AS UniqueUserCount FROM postHistory AS T1 WHERE T1.PostId = 3720;"
      ]
    ]
  },
  {
    "id": 605,
    "db_id": "codebase_community",
    "nlq": "How many users obtained the \"Announcer\" badge?",
    "gold": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
    "evidence": "\"Announcer\" is the Name of badge; user refers to UserId",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer';",
        "SELECT COUNT(DISTINCT b.UserId) FROM badges b WHERE b.Name = 'Announcer';",
        "SELECT COUNT(UNIQUE UserId) FROM badges WHERE Name = 'Announcer';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT UserId FROM badges WHERE Name = 'Announcer');",
        "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers FROM badges WHERE Name = 'Announcer';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name LIKE 'Announcer';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges b WHERE b.Name = 'Announcer' AND b.UserId IS NOT NULL;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT UserId FROM badges WHERE Name LIKE 'Announcer');",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer' GROUP BY Name;"
      ]
    ]
  },
  {
    "id": 606,
    "db_id": "codebase_community",
    "nlq": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.",
    "gold": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "infer_predictions": [
      [
        "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0';",
        "SELECT Name FROM badges WHERE Date IS NOT NULL AND Date = '2010-07-19 19:39:08.0';",
        "SELECT b.Name FROM badges b WHERE b.Date = '2010-07-19 19:39:08.0';",
        "SELECT Name FROM badges WHERE strftime('%Y-%m-%d %H:%M:%S', Date) = '2010-07-19 19:39:08';",
        "SELECT Name FROM badges WHERE Date LIKE '2010-07-19 19:39:08.0';",
        "SELECT Name FROM badges WHERE Date IN ('2010-07-19 19:39:08.0');",
        "SELECT Name FROM badges WHERE Date = datetime('2010-07-19 19:39:08');",
        "SELECT Name FROM badges WHERE Date BETWEEN '2010-07-19 19:39:08.0' AND '2010-07-19 19:39:08.0';",
        "SELECT Name FROM badges WHERE CAST(Date AS TEXT) = '2010-07-19 19:39:08.0';",
        "SELECT Name FROM badges WHERE substr(Date, 1, 19) = '2010-07-19 19:39:08';"
      ]
    ]
  },
  {
    "id": 607,
    "db_id": "codebase_community",
    "nlq": "How many positive comments are there on the list?",
    "gold": "SELECT COUNT(id) FROM comments WHERE score > 60",
    "evidence": "Positive comment refers to score > 60",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM comments WHERE Score > 60;",
        "SELECT COUNT(Id) AS PositiveCommentCount FROM comments WHERE Score > 60;",
        "SELECT COUNT(Id) FROM comments WHERE Score > 60;",
        "SELECT COUNT(*) AS TotalPositiveComments FROM comments WHERE Score > 60;",
        "SELECT COUNT(*) FROM comments WHERE Score IS NOT NULL AND Score > 60;",
        "SELECT COUNT(Id) FROM comments WHERE Score IS NOT NULL AND Score > 60;",
        "SELECT COUNT(*) FROM comments c WHERE c.Score > 60;",
        "SELECT COUNT(*) FROM comments WHERE comments.Score > 60;",
        "SELECT COUNT(Id) FROM comments c WHERE c.Score > 60;",
        "SELECT COUNT(*) FROM comments WHERE Score > 60 AND Score IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 608,
    "db_id": "codebase_community",
    "nlq": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
    "gold": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
    "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'",
    "infer_predictions": [
      [
        "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0';",
        "SELECT Text FROM comments WHERE CreationDate = datetime('2010-07-19 19:25:47');",
        "SELECT Text FROM comments AS T1 WHERE T1.CreationDate = '2010-07-19 19:25:47.0';",
        "SELECT Text FROM comments WHERE strftime('%Y-%m-%d %H:%M:%S', CreationDate) = '2010-07-19 19:25:47';",
        "SELECT Text FROM comments WHERE CreationDate LIKE '2010-07-19 19:25:47%';",
        "SELECT T1.Text FROM comments T1 WHERE T1.CreationDate = '2010-07-19 19:25:47.0';",
        "SELECT Text FROM comments WHERE CreationDate BETWEEN '2010-07-19 19:25:47.0' AND '2010-07-19 19:25:47.0';",
        "SELECT Text FROM comments WHERE CAST(CreationDate AS TEXT) = '2010-07-19 19:25:47.0';",
        "SELECT Text FROM comments WHERE CreationDate = '2010-07-19T19:25:47.0';",
        "SELECT Text FROM comments WHERE date(CreationDate) = date('2010-07-19') AND time(CreationDate) = time('19:25:47');"
      ]
    ]
  },
  {
    "id": 609,
    "db_id": "codebase_community",
    "nlq": "How many posts have a score of 10 on the list?",
    "gold": "SELECT COUNT(id) FROM posts WHERE Score = 10",
    "evidence": "score of 10 refers to Score = 10; post refers to Id",
    "infer_predictions": [
      [
        "SELECT COUNT(Id) FROM posts WHERE Score = 10;",
        "SELECT COUNT(*) FROM posts WHERE Score = 10;",
        "SELECT COUNT(Id) AS NumberOfPosts FROM posts WHERE Score = 10;",
        "SELECT COUNT(Id) FROM posts WHERE Score = 10 AND Score IS NOT NULL;",
        "SELECT COUNT(*) FROM posts WHERE Score = 10 AND Score IS NOT NULL;",
        "SELECT COUNT(Id) FROM posts WHERE Score = 10 GROUP BY Score;",
        "SELECT COUNT(Id) FROM posts WHERE Score = 10 AND Score IS NOT NULL GROUP BY Score;",
        "SELECT COUNT(Id) FROM posts WHERE Score = 10 AND Score IS NOT NULL GROUP BY Score HAVING COUNT(Id) > 0;",
        "SELECT COUNT(Id) FROM posts WHERE Score = 10 GROUP BY Score HAVING COUNT(Id) > 0;",
        "SELECT COUNT(Id) FROM posts WHERE Score = 10 AND Score IS NOT NULL GROUP BY Score HAVING COUNT(Id) > 0;"
      ]
    ]
  },
  {
    "id": 610,
    "db_id": "codebase_community",
    "nlq": "What are the name of badge that users who have the highest reputation obtained?",
    "gold": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MAX(Reputation) FROM users)",
    "evidence": "highest reputation refers to Max(Reputation); user refers to UserId",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MAX(Reputation) FROM users) AND T1.Reputation IS NOT NULL;",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL));",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MAX(users.Reputation) FROM users WHERE users.Reputation IS NOT NULL);",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL));",
        "SELECT b.Name FROM badges b, users u WHERE b.UserId = u.Id AND u.Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users) AND Reputation IS NOT NULL);",
        "SELECT b.Name FROM badges AS b JOIN users AS u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users) AND Reputation IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 611,
    "db_id": "codebase_community",
    "nlq": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.",
    "gold": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "infer_predictions": [
      [
        "SELECT T2.Reputation FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0';",
        "SELECT Reputation FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0');",
        "SELECT u.Reputation FROM users u INNER JOIN badges b ON u.Id = b.UserId AND b.Date = '2010-07-19 19:39:08.0';",
        "SELECT Reputation FROM users WHERE Id = (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0');",
        "SELECT u.Reputation FROM users u, badges b WHERE u.Id = b.UserId AND b.Date = '2010-07-19 19:39:08.0';",
        "SELECT T2.Reputation FROM users T2 JOIN badges T1 ON T2.Id = T1.UserId WHERE T1.Date = '2010-07-19 19:39:08.0';",
        "SELECT Reputation FROM users WHERE EXISTS (SELECT 1 FROM badges WHERE UserId = users.Id AND Date = '2010-07-19 19:39:08.0');",
        "SELECT u.Reputation FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0';",
        "SELECT Reputation FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0';",
        "SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';"
      ]
    ]
  },
  {
    "id": 612,
    "db_id": "codebase_community",
    "nlq": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "gold": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre';",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Pierre');",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Pierre');",
        "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Pierre';",
        "SELECT Name FROM badges, users WHERE badges.UserId = users.Id AND users.DisplayName = 'Pierre';",
        "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre';",
        "SELECT Name FROM badges INNER JOIN users ON badges.UserId = users.Id AND users.DisplayName = 'Pierre';",
        "SELECT T2.Name FROM badges T2 WHERE T2.UserId IN (SELECT T1.Id FROM users T1 WHERE T1.DisplayName = 'Pierre');",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Pierre') AND UserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 613,
    "db_id": "codebase_community",
    "nlq": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "gold": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "infer_predictions": [
      [
        "SELECT B.Date FROM badges B JOIN users U ON B.UserId = U.Id WHERE U.Location = 'Rochester, NY';",
        "SELECT Date FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Location = 'Rochester, NY');",
        "SELECT badges.Date FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';",
        "SELECT Date FROM badges, users WHERE badges.UserId = users.Id AND users.Location = 'Rochester, NY';",
        "SELECT B.Date FROM badges AS B, users AS U WHERE B.UserId = U.Id AND U.Location = 'Rochester, NY';",
        "SELECT B.Date FROM badges B INNER JOIN users U ON B.UserId = U.Id WHERE U.Location = 'Rochester, NY';",
        "SELECT Date FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Location = 'Rochester, NY');",
        "SELECT B.Date FROM badges B JOIN users U ON B.UserId = U.Id AND U.Location = 'Rochester, NY';",
        "SELECT badges.Date FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';",
        "SELECT Date FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';"
      ]
    ]
  },
  {
    "id": 614,
    "db_id": "codebase_community",
    "nlq": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
    "gold": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
    "evidence": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100",
    "infer_predictions": [
      [
        "SELECT (COUNT(DISTINCT T1.UserId) * 100.0 / (SELECT COUNT(*) FROM users)) AS Percentage FROM badges T1 WHERE T1.Name = 'Teacher';",
        "SELECT (COUNT(DISTINCT UserId) * 100.0 / (SELECT COUNT(*) FROM users)) AS Percentage FROM badges WHERE Name = 'Teacher';",
        "SELECT (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Teacher') * 100.0 / COUNT(*) AS Percentage FROM users;",
        "SELECT (COUNT(DISTINCT T1.UserId) / (SELECT COUNT(*) FROM users) * 100.0) AS Percentage FROM badges T1 WHERE T1.Name = 'Teacher';",
        "SELECT (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Teacher') / (SELECT COUNT(*) FROM users) * 100.0 AS Percentage;",
        "SELECT 100.0 * (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Teacher') / COUNT(*) AS Percentage FROM users;",
        "SELECT (COUNT(DISTINCT T1.UserId) * 100.0) / (SELECT COUNT(*) FROM users) AS Percentage FROM badges T1 WHERE T1.Name = 'Teacher';",
        "SELECT (100.0 * COUNT(DISTINCT T1.UserId) / (SELECT COUNT(*) FROM users)) AS Percentage FROM badges T1 WHERE T1.Name = 'Teacher';",
        "SELECT (100.0 * (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Teacher') / COUNT(*)) AS Percentage FROM users;",
        "SELECT (100.0 * COUNT(DISTINCT UserId) / (SELECT COUNT(*) FROM users)) AS Percentage FROM badges WHERE Name = 'Teacher';"
      ]
    ]
  },
  {
    "id": 615,
    "db_id": "codebase_community",
    "nlq": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
    "gold": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'",
    "evidence": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100",
    "infer_predictions": [
      [
        "SELECT (COUNT(CASE WHEN T2.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (SUM(CASE WHEN T2.Age >= 13 AND T2.Age <= 18 THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.UserId)) AS Percentage FROM badges T1 INNER JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (COUNT(*) FILTER (WHERE T2.Age BETWEEN 13 AND 18) * 100.0 / COUNT(T1.UserId)) AS Percentage FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (100.0 * (SELECT COUNT(*) FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer' AND T2.Age BETWEEN 13 AND 18) / COUNT(T1.UserId)) AS Percentage FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (100.0 * COUNT(IF(T2.Age BETWEEN 13 AND 18, 1, NULL)) / COUNT(T1.UserId)) AS Percentage FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (100.0 * COUNT(NULLIF(T2.Age < 13 OR T2.Age > 18, 1)) / COUNT(T1.UserId)) AS Percentage FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (100.0 * COUNT(T1.UserId) FILTER (WHERE T2.Age BETWEEN 13 AND 18) / COUNT(T1.UserId)) AS Percentage FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (100.0 * COUNT(T1.UserId) WHERE T2.Age BETWEEN 13 AND 18 / COUNT(T1.UserId)) AS Percentage FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (100.0 * SUM(CASE WHEN T2.Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) / COUNT(T1.UserId)) AS Percentage FROM badges T1 LEFT JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';",
        "SELECT (100.0 * COUNT(T1.UserId) WHERE EXISTS (SELECT 1 FROM users T2 WHERE T2.Id = T1.UserId AND T2.Age BETWEEN 13 AND 18) / COUNT(T1.UserId)) AS Percentage FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer';"
      ]
    ]
  },
  {
    "id": 616,
    "db_id": "codebase_community",
    "nlq": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM",
    "gold": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'",
    "evidence": "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'",
    "infer_predictions": [
      [
        "SELECT C.Score FROM comments C JOIN posts P ON C.PostId = P.Id WHERE P.CreationDate = '2010-07-19 19:19:56.0';",
        "SELECT Score FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:19:56.0');",
        "SELECT comments.Score FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.CreationDate = '2010-07-19 19:19:56.0';",
        "SELECT C.Score FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.CreationDate = '2010-07-19 19:19:56.0';",
        "SELECT Score FROM comments WHERE PostId = (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:19:56.0');",
        "SELECT C.Score FROM comments C, posts P WHERE C.PostId = P.Id AND P.CreationDate = '2010-07-19 19:19:56.0';",
        "SELECT comments.Score FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.CreationDate = '2010-07-19 19:19:56.0';",
        "SELECT C.Score FROM comments AS C JOIN posts AS P ON C.PostId = P.Id WHERE P.CreationDate = '2010-07-19 19:19:56.0';",
        "SELECT Score FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:19:56.0') AND Score IS NOT NULL;",
        "SELECT C.Score FROM comments C JOIN posts P ON C.PostId = P.Id WHERE P.CreationDate = '2010-07-19 19:19:56.0' AND C.Score IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 617,
    "db_id": "codebase_community",
    "nlq": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?",
    "gold": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'",
    "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'",
    "infer_predictions": [
      [
        "SELECT T2.Text FROM posts T1 JOIN comments T2 ON T1.Id = T2.PostId WHERE T1.CreationDate = '2010-07-19 19:37:33.0';",
        "SELECT comments.Text FROM comments INNER JOIN posts ON posts.Id = comments.PostId WHERE posts.CreationDate = '2010-07-19 19:37:33.0';",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:37:33.0');",
        "SELECT c.Text FROM comments AS c JOIN posts AS p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0';",
        "SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:37:33.0');",
        "SELECT c.Text FROM comments c, posts p WHERE c.PostId = p.Id AND p.CreationDate = '2010-07-19 19:37:33.0';",
        "SELECT Text FROM comments JOIN posts ON posts.Id = comments.PostId WHERE posts.CreationDate = '2010-07-19 19:37:33.0';",
        "SELECT comments.Text FROM comments, posts WHERE comments.PostId = posts.Id AND posts.CreationDate = '2010-07-19 19:37:33.0';",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:37:33.0') LIMIT 1;",
        "SELECT c.Text FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0' AND p.Id = c.PostId;"
      ]
    ]
  },
  {
    "id": 618,
    "db_id": "codebase_community",
    "nlq": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "gold": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "evidence": "\"Vienna, Austria\" is the Location",
    "infer_predictions": [
      [
        "SELECT U.Age FROM users U JOIN badges B ON U.Id = B.UserId WHERE U.Location = 'Vienna, Austria' AND U.Age IS NOT NULL;",
        "SELECT Age FROM users WHERE Id IN (SELECT UserId FROM badges) AND Location = 'Vienna, Austria' AND Age IS NOT NULL;",
        "SELECT users.Age FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'Vienna, Austria' AND users.Age IS NOT NULL;",
        "SELECT Age FROM users WHERE Location = 'Vienna, Austria' AND Age IS NOT NULL AND Id IN (SELECT UserId FROM badges);",
        "SELECT U.Age FROM users U, badges B WHERE U.Id = B.UserId AND U.Location = 'Vienna, Austria' AND U.Age IS NOT NULL;",
        "SELECT Age FROM users WHERE Location = 'Vienna, Austria' AND Id IN (SELECT UserId FROM badges WHERE UserId IS NOT NULL) AND Age IS NOT NULL;",
        "SELECT U.Age FROM users U INNER JOIN badges B ON U.Id = B.UserId WHERE U.Location = 'Vienna, Austria' AND U.Age IS NOT NULL;",
        "SELECT DISTINCT U.Age FROM users U JOIN badges B ON U.Id = B.UserId WHERE U.Location = 'Vienna, Austria' AND U.Age IS NOT NULL;",
        "SELECT Age FROM users WHERE Location = 'Vienna, Austria' AND Age IS NOT NULL AND EXISTS (SELECT 1 FROM badges WHERE UserId = users.Id);",
        "SELECT U.Age FROM users U WHERE U.Location = 'Vienna, Austria' AND U.Age IS NOT NULL AND EXISTS (SELECT 1 FROM badges B WHERE B.UserId = U.Id);"
      ]
    ]
  },
  {
    "id": 619,
    "db_id": "codebase_community",
    "nlq": "How many adults who obtained the badge Supporter?",
    "gold": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
    "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.UserId) FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Age BETWEEN 19 AND 65 AND T1.Name = 'Supporter';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Age >= 19 AND Age <= 65) AND Name = 'Supporter';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT T1.UserId FROM badges T1 INNER JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Age BETWEEN 19 AND 65 AND T1.Name = 'Supporter');",
        "SELECT COUNT(UNIQUE T1.UserId) FROM badges T1, users T2 WHERE T1.UserId = T2.Id AND T2.Age BETWEEN 19 AND 65 AND T1.Name = 'Supporter';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age BETWEEN 19 AND 65);",
        "SELECT COUNT(DISTINCT T1.UserId) FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id AND T2.Age BETWEEN 19 AND 65 WHERE T1.Name = 'Supporter';",
        "SELECT COUNT(DISTINCT UserId) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Age BETWEEN 19 AND 65 AND badges.Name = 'Supporter';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age > 18 AND Age < 66);",
        "SELECT COUNT(*) FROM (SELECT DISTINCT UserId FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age BETWEEN 19 AND 65));",
        "SELECT COUNT(DISTINCT UserId) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age >= 19 AND users.Age <= 65;"
      ]
    ]
  },
  {
    "id": 620,
    "db_id": "codebase_community",
    "nlq": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.",
    "gold": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "infer_predictions": [
      [
        "SELECT T2.Views FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0';",
        "SELECT Views FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0');",
        "SELECT users.Views FROM users INNER JOIN badges ON users.Id = badges.UserId AND badges.Date = '2010-07-19 19:39:08.0';",
        "SELECT Views FROM users WHERE Id = (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0');",
        "SELECT T2.Views FROM users AS T2 JOIN badges AS T1 ON T2.Id = T1.UserId WHERE T1.Date = '2010-07-19 19:39:08.0';",
        "SELECT T2.Views FROM badges T1, users T2 WHERE T1.UserId = T2.Id AND T1.Date = '2010-07-19 19:39:08.0';",
        "SELECT Views FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0';",
        "SELECT T2.Views FROM users T2 WHERE EXISTS (SELECT 1 FROM badges T1 WHERE T1.UserId = T2.Id AND T1.Date = '2010-07-19 19:39:08.0');",
        "SELECT Views FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0' AND UserId IS NOT NULL);",
        "SELECT T2.Views FROM badges T1 INNER JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0' AND T1.UserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 621,
    "db_id": "codebase_community",
    "nlq": "What are the name of badges that users who have the lowest reputation obtained?",
    "gold": "SELECT T2.Name, T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)",
    "evidence": "lowest reputation refers to Min(Reputation); user refers to UserId",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM badges T2 JOIN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL)) T1 ON T2.UserId = T1.Id;",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL));",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MIN(users.Reputation) FROM users WHERE users.Reputation IS NOT NULL);",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL));",
        "SELECT b.Name FROM badges b, users u WHERE b.UserId = u.Id AND u.Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(u.Reputation) FROM users u WHERE u.Reputation IS NOT NULL);",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL));",
        "SELECT b.Name FROM badges AS b JOIN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL)) AS u ON b.UserId = u.Id;"
      ]
    ]
  },
  {
    "id": 622,
    "db_id": "codebase_community",
    "nlq": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "gold": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie';",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Sharpie');",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';",
        "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Sharpie';",
        "SELECT Name FROM badges, users WHERE badges.UserId = users.Id AND users.DisplayName = 'Sharpie';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie');",
        "SELECT b.Name FROM badges b, users u WHERE b.UserId = u.Id AND u.DisplayName = 'Sharpie';",
        "SELECT T2.Name FROM users T1, badges T2 WHERE T1.Id = T2.UserId AND T1.DisplayName = 'Sharpie';",
        "SELECT Name FROM badges INNER JOIN users ON UserId = users.Id WHERE DisplayName = 'Sharpie';",
        "SELECT badges.Name FROM badges, users WHERE badges.UserId = users.Id AND users.DisplayName = 'Sharpie';"
      ]
    ]
  },
  {
    "id": 623,
    "db_id": "codebase_community",
    "nlq": "How many elders obtained the \"Supporter\" badge?",
    "gold": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'",
    "evidence": "\"Supporter\" is the Name of badge;\u00a0 elders refers to Age > 65",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT T1.Id FROM users T1 INNER JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter') AS ElderSupporters;",
        "SELECT COUNT(UNIQUE T1.Id) FROM users T1, badges T2 WHERE T1.Id = T2.UserId AND T1.Age > 65 AND T2.Name = 'Supporter';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Age > 65) AND Name = 'Supporter';",
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId AND T1.Age > 65 WHERE T2.Name = 'Supporter';",
        "SELECT COUNT(*) FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Supporter') AND Age > 65;",
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 LEFT JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter';",
        "SELECT COUNT(*) FROM (SELECT T1.Id FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter' GROUP BY T1.Id) AS UniqueElders;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND UserId IN (SELECT Id FROM users WHERE Age > 65);",
        "SELECT COUNT(*) FROM (SELECT DISTINCT UserId FROM badges WHERE Name = 'Supporter') AS Supporters WHERE Supporters.UserId IN (SELECT Id FROM users WHERE Age > 65);"
      ]
    ]
  },
  {
    "id": 624,
    "db_id": "codebase_community",
    "nlq": "What is the name of user with the ID of 30?",
    "gold": "SELECT DisplayName FROM users WHERE Id = 30",
    "evidence": "name of user refers to DisplayName;",
    "infer_predictions": [
      [
        "SELECT DisplayName FROM users WHERE Id = 30;",
        "SELECT u.DisplayName FROM users u WHERE u.Id = 30;",
        "SELECT DisplayName FROM users WHERE Id = 30 AND DisplayName IS NOT NULL;",
        "SELECT DisplayName FROM users WHERE users.Id = 30;",
        "SELECT u.DisplayName FROM users AS u WHERE u.Id = 30;",
        "SELECT DisplayName FROM users WHERE Id = 30 LIMIT 1;",
        "SELECT DisplayName FROM users WHERE Id = 30 ORDER BY Id;",
        "SELECT DisplayName FROM users WHERE Id = 30 AND DisplayName IS NOT NULL LIMIT 1;",
        "SELECT DisplayName FROM users WHERE Id = 30 AND DisplayName IS NOT NULL ORDER BY Id;",
        "SELECT DisplayName FROM users WHERE Id = 30 AND DisplayName IS NOT NULL ORDER BY Id LIMIT 1;"
      ]
    ]
  },
  {
    "id": 625,
    "db_id": "codebase_community",
    "nlq": "How many users were from New York?",
    "gold": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
    "evidence": "New York refers to Location;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM users WHERE Location = 'New York';",
        "SELECT COUNT(Id) AS NumberOfUsers FROM users WHERE Location = 'New York';",
        "SELECT COUNT(*) AS UserCount FROM users WHERE Location = 'New York';",
        "SELECT COUNT(Id) FROM users WHERE Location = 'New York';",
        "SELECT COUNT(*) FROM users WHERE Location LIKE 'New York';",
        "SELECT COUNT(Id) FROM users WHERE Location = 'New York';",
        "SELECT COUNT(*) FROM users WHERE Location = 'New York';",
        "SELECT COUNT(Id) FROM users WHERE Location LIKE 'New York';",
        "SELECT COUNT(*) FROM users WHERE Location = 'New York';",
        "SELECT COUNT(Id) FROM users WHERE Location = 'New York';"
      ]
    ]
  },
  {
    "id": 626,
    "db_id": "codebase_community",
    "nlq": "How many votes were made in 2010?",
    "gold": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
    "evidence": "YEAR(CreationDate) = 2010;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010';",
        "SELECT COUNT(Id) AS TotalVotes FROM votes WHERE strftime('%Y', CreationDate) = '2010';",
        "SELECT COUNT(*) AS VoteCount FROM votes WHERE strftime('%Y', CreationDate) = '2010';",
        "SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2010';",
        "SELECT COUNT(*) FROM votes WHERE substr(CreationDate, 1, 4) = '2010';",
        "SELECT COUNT(Id) FROM votes WHERE substr(CreationDate, 1, 4) = '2010';",
        "SELECT COUNT(*) FROM votes WHERE CreationDate LIKE '2010%';",
        "SELECT COUNT(Id) FROM votes WHERE CreationDate LIKE '2010%';",
        "SELECT COUNT(*) FROM votes WHERE CreationDate BETWEEN '2010-01-01' AND '2010-12-31';",
        "SELECT COUNT(Id) FROM votes WHERE CreationDate BETWEEN '2010-01-01' AND '2010-12-31';"
      ]
    ]
  },
  {
    "id": 627,
    "db_id": "codebase_community",
    "nlq": "How many users were adult?",
    "gold": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
    "evidence": "adult refers to user where Age BETWEEN 19 and 65;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;",
        "SELECT COUNT(Id) FROM users WHERE Age >= 19 AND Age <= 65;",
        "SELECT COUNT(*) AS AdultCount FROM users WHERE Age >= 19 AND Age <= 65;",
        "SELECT COUNT(Id) AS NumberOfAdults FROM users WHERE Age BETWEEN 19 AND 65;",
        "SELECT COUNT(*) FROM users WHERE Age > 18 AND Age < 66;",
        "SELECT COUNT(Id) FROM users WHERE Age > 18 AND Age < 66;",
        "SELECT COUNT(*) FROM users WHERE Age >= 19 AND Age <= 65 AND Age IS NOT NULL;",
        "SELECT COUNT(Id) FROM users WHERE Age IS NOT NULL AND Age BETWEEN 19 AND 65;",
        "SELECT COUNT(*) FROM users WHERE Age IS NOT NULL AND Age >= 19 AND Age <= 65;",
        "SELECT COUNT(Id) FROM users WHERE Age IS NOT NULL AND Age > 18 AND Age < 66;"
      ]
    ]
  },
  {
    "id": 629,
    "db_id": "codebase_community",
    "nlq": "Calculate the ratio of votes in 2010 and 2011.",
    "gold": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
    "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;",
    "infer_predictions": [
      [
        "SELECT (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010') * 1.0 / (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2011') AS ratio FROM votes LIMIT 1;",
        "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2011') FROM votes WHERE strftime('%Y', CreationDate) = '2010';",
        "WITH Year2010 AS (SELECT COUNT(*) AS Count2010 FROM votes WHERE strftime('%Y', CreationDate) = '2010'), Year2011 AS (SELECT COUNT(*) AS Count2011 FROM votes WHERE strftime('%Y', CreationDate) = '2011') SELECT Count2010 * 1.0 / Count2011 AS ratio FROM Year2010, Year2011;",
        "SELECT (SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2010') * 1.0 / (SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2011') AS vote_ratio FROM votes LIMIT 1;",
        "SELECT total2010 * 1.0 / total2011 AS ratio FROM (SELECT COUNT(*) AS total2010 FROM votes WHERE strftime('%Y', CreationDate) = '2010'), (SELECT COUNT(*) AS total2011 FROM votes WHERE strftime('%Y', CreationDate) = '2011');",
        "SELECT (COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 END) * 1.0 / COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN 1 END)) AS ratio FROM votes;",
        "SELECT COUNT(*) FILTER (WHERE strftime('%Y', CreationDate) = '2010') * 1.0 / COUNT(*) FILTER (WHERE strftime('%Y', CreationDate) = '2011') AS ratio FROM votes;",
        "SELECT (COUNT(IF(strftime('%Y', CreationDate) = '2010', 1, NULL)) * 1.0 / COUNT(IF(strftime('%Y', CreationDate) = '2011', 1, NULL))) AS ratio FROM votes;",
        "WITH Votes2010 AS (SELECT COUNT(*) AS Total2010 FROM votes WHERE strftime('%Y', CreationDate) = '2010'), Votes2011 AS (SELECT COUNT(*) AS Total2011 FROM votes WHERE strftime('%Y', CreationDate) = '2011') SELECT Total2010 * 1.0 / Total2011 AS ratio FROM Votes2010 CROSS JOIN Votes2011;",
        "SELECT (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010') / (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2011') * 1.0 AS ratio FROM votes LIMIT 1;"
      ]
    ]
  },
  {
    "id": 635,
    "db_id": "codebase_community",
    "nlq": "How many posts by Matt Parker have more than 4 votes?",
    "gold": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM (SELECT P.Id FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Matt Parker' GROUP BY P.Id HAVING COUNT(*) > 4);",
        "SELECT COUNT(PostId) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Matt Parker' AND posts.Id IN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(PostId) > 4);",
        "SELECT COUNT(DISTINCT P.Id) FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id LEFT JOIN votes V ON P.Id = V.PostId WHERE U.DisplayName = 'Matt Parker' GROUP BY P.Id HAVING COUNT(V.Id) > 4;",
        "SELECT COUNT(*) FROM (SELECT P.Id FROM posts P, users U WHERE P.OwnerUserId = U.Id AND U.DisplayName = 'Matt Parker' GROUP BY P.Id HAVING COUNT(SELECT V.Id FROM votes V WHERE V.PostId = P.Id) > 4);",
        "SELECT COUNT(*) FROM (SELECT posts.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id LEFT JOIN votes ON posts.Id = votes.PostId WHERE users.DisplayName = 'Matt Parker' GROUP BY posts.Id HAVING COUNT(votes.Id) > 4);",
        "SELECT COUNT(*) FROM (SELECT P.Id FROM posts P JOIN users U ON P.OwnerUserId = U.Id LEFT JOIN votes V ON P.Id = V.PostId WHERE U.DisplayName = 'Matt Parker' GROUP BY P.Id HAVING COUNT(V.Id) > 4);",
        "SELECT COUNT(*) FROM (SELECT posts.Id FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Matt Parker' AND posts.Id IN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(*) > 4));",
        "SELECT COUNT(*) FROM (SELECT P.Id FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Matt Parker' AND P.Id IN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(*) > 4));",
        "SELECT COUNT(*) FROM (SELECT posts.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Matt Parker' GROUP BY posts.Id HAVING COUNT(SELECT votes.Id FROM votes WHERE votes.PostId = posts.Id) > 4);",
        "SELECT COUNT(*) FROM (SELECT P.Id FROM posts P JOIN users U ON P.OwnerUserId = U.Id JOIN votes V ON P.Id = V.PostId WHERE U.DisplayName = 'Matt Parker' GROUP BY P.Id HAVING COUNT(V.Id) > 4);"
      ]
    ]
  },
  {
    "id": 636,
    "db_id": "codebase_community",
    "nlq": "How many negative comments did Neil McGuigan get in his posts?",
    "gold": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60",
    "evidence": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'Neil McGuigan' AND T1.Score < 60;",
        "SELECT COUNT(T1.Id) FROM comments T1 INNER JOIN posts T2 ON T1.PostId = T2.Id INNER JOIN users T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'Neil McGuigan' AND T1.Score < 60;",
        "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan')) AND Score < 60;",
        "SELECT COUNT(comment.Id) AS NegativeCommentsCount FROM comments comment JOIN posts post ON comment.PostId = post.Id JOIN users user ON post.OwnerUserId = user.Id WHERE user.DisplayName = 'Neil McGuigan' AND comment.Score < 60;",
        "SELECT COUNT(*) FROM comments WHERE Score < 60 AND PostId IN (SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan'));",
        "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score < 60 AND p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan');",
        "SELECT COUNT(*) FROM comments c INNER JOIN posts p ON c.PostId = p.Id INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Neil McGuigan' AND c.Score < 60;",
        "SELECT COUNT(*) FROM comments WHERE Score < 60 AND PostId IN (SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Neil McGuigan');",
        "SELECT COUNT(*) FROM comments c, posts p, users u WHERE c.PostId = p.Id AND p.OwnerUserId = u.Id AND u.DisplayName = 'Neil McGuigan' AND c.Score < 60;",
        "SELECT COUNT(*) FROM comments c WHERE c.Score < 60 AND EXISTS (SELECT 1 FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = c.PostId AND u.DisplayName = 'Neil McGuigan');"
      ]
    ]
  },
  {
    "id": 638,
    "db_id": "codebase_community",
    "nlq": "List all the name of users that obtained the Organizer Badges.",
    "gold": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "infer_predictions": [
      [
        "SELECT T1.DisplayName FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer';",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer');",
        "SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId AND badges.Name = 'Organizer';",
        "SELECT DisplayName FROM users WHERE EXISTS (SELECT 1 FROM badges WHERE badges.UserId = users.Id AND badges.Name = 'Organizer');",
        "SELECT u.DisplayName FROM users u, badges b WHERE u.Id = b.UserId AND b.Name = 'Organizer';",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer' AND UserId IS NOT NULL);",
        "SELECT DISTINCT users.DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Organizer';",
        "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';",
        "SELECT DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';",
        "SELECT u.DisplayName FROM users u INNER JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer' AND b.UserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 641,
    "db_id": "codebase_community",
    "nlq": "How many users received commentator badges in 2014?",
    "gold": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
    "evidence": "Commentator is the name of the badge; year(Date) = 2014;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND Date BETWEEN '2014-01-01' AND '2014-12-31';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND substr(Date, 1, 4) = '2014';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND Date LIKE '2014%';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND CAST(strftime('%Y', Date) AS INTEGER) = 2014;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND Year(Date) = 2014;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND Date >= '2014-01-01' AND Date < '2015-01-01';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM (SELECT UserId FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014') AS T1;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014' AND UserId > 0;"
      ]
    ]
  },
  {
    "id": 643,
    "db_id": "codebase_community",
    "nlq": "What are the display names and ages of user who got the highest in views?",
    "gold": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "evidence": "the highest in views refers to MAX(Views);",
    "infer_predictions": [
      [
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);",
        "SELECT U.DisplayName, U.Age FROM users U WHERE U.Views = (SELECT MAX(Views) FROM users);",
        "SELECT DisplayName, Age FROM users WHERE Views IN (SELECT MAX(Views) FROM users);",
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(V.Views) FROM users V);",
        "SELECT U.DisplayName, U.Age FROM users U INNER JOIN (SELECT MAX(Views) AS MaxViews FROM users) T1 ON U.Views = T1.MaxViews;",
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(views) FROM users WHERE Views IS NOT NULL);",
        "SELECT U.DisplayName, U.Age FROM users U WHERE U.Views = (SELECT MAX(V.Views) FROM users V WHERE V.Views IS NOT NULL);",
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users WHERE Views IS NOT NULL);",
        "SELECT U.DisplayName, U.Age FROM users U JOIN (SELECT MAX(Views) AS MaxViews FROM users) T1 ON U.Views = T1.MaxViews;",
        "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users WHERE Views IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 644,
    "db_id": "codebase_community",
    "nlq": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "gold": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "infer_predictions": [
      [
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';",
        "SELECT p.LastEditDate, p.LastEditorUserId FROM posts p WHERE p.Title = 'Detecting a given face in a database of facial images';",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title LIKE 'Detecting a given face in a database of facial images';",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images' AND LastEditDate IS NOT NULL AND LastEditorUserId IS NOT NULL;",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images' LIMIT 1;",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images' ORDER BY LastEditDate DESC LIMIT 1;",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images' AND Id = (SELECT Id FROM posts WHERE Title = 'Detecting a given face in a database of facial images');",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images' AND LastEditorUserId IN (SELECT LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images');",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images' AND LastEditDate >= '2010-01-01';",
        "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images' AND LastEditDate <= CURRENT_DATE;"
      ]
    ]
  },
  {
    "id": 645,
    "db_id": "codebase_community",
    "nlq": "How many negative comments were given by user ID 13?",
    "gold": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
    "evidence": "negative comments refer to Score < 60;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM comments WHERE Score < 60 AND UserId = 13 AND Score IS NOT NULL AND UserId IS NOT NULL;",
        "SELECT COUNT(Id) AS NegativeCommentCount FROM comments WHERE UserId = 13 AND Score < 60 AND Score IS NOT NULL;",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60;",
        "SELECT COUNT(*) FROM comments c WHERE c.UserId = 13 AND c.Score < 60 AND c.Score IS NOT NULL;",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60 AND UserId IS NOT NULL;",
        "SELECT COUNT(*) AS TotalNegativeComments FROM comments WHERE Score < 60 AND UserId = 13;",
        "WITH FilteredComments AS (SELECT * FROM comments WHERE UserId = 13 AND Score < 60 AND Score IS NOT NULL) SELECT COUNT(*) FROM FilteredComments;",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60 AND Score IS NOT NULL AND UserId IS NOT NULL;",
        "SELECT COUNT(*) FROM comments c WHERE c.UserId = 13 AND c.Score < 60;",
        "SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60 AND Score IS NOT NULL AND UserId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 647,
    "db_id": "codebase_community",
    "nlq": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "gold": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM badges T2 JOIN users T1 ON T2.UserId = T1.Id WHERE T1.Location = 'North Pole' AND strftime('%Y', T2.Date) = '2011';",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Location = 'North Pole') AND strftime('%Y', Date) = '2011';",
        "SELECT Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'North Pole' AND strftime('%Y', badges.Date) = '2011';",
        "SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location LIKE 'North Pole' AND strftime('%Y', badges.Date) = '2011';",
        "SELECT b.Name FROM badges b, users u WHERE b.UserId = u.Id AND u.Location = 'North Pole' AND strftime('%Y', b.Date) = '2011';",
        "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND strftime('%Y', b.Date) = '2011';",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE Location = 'North Pole') AND strftime('%Y', Date) = '2011';",
        "SELECT T2.Name FROM badges T2, users T1 WHERE T2.UserId = T1.Id AND T1.Location = 'North Pole' AND strftime('%Y', T2.Date) = '2011';",
        "SELECT Name FROM badges AS b JOIN users AS u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND strftime('%Y', b.Date) = '2011';",
        "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND strftime('%Y', b.Date) = '2011';"
      ]
    ]
  },
  {
    "id": 650,
    "db_id": "codebase_community",
    "nlq": "Describe the last accessed date and location of the users who received the outliers badge.",
    "gold": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "evidence": "Outliers is the name of the badge;",
    "infer_predictions": [
      [
        "SELECT T1.LastAccessDate, T1.Location FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers';",
        "SELECT LastAccessDate, Location FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'outliers');",
        "SELECT users.LastAccessDate, users.Location FROM users INNER JOIN badges ON users.Id = badges.UserId AND badges.Name = 'outliers';",
        "SELECT LastAccessDate, Location FROM users WHERE EXISTS (SELECT 1 FROM badges WHERE badges.UserId = users.Id AND badges.Name = 'outliers');",
        "SELECT u.LastAccessDate, u.Location FROM users u, badges b WHERE u.Id = b.UserId AND b.Name = 'outliers';",
        "SELECT LastAccessDate, Location FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'outliers';",
        "SELECT LastAccessDate, Location FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'outliers') AND LastAccessDate IS NOT NULL AND Location IS NOT NULL;",
        "SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'outliers' AND u.LastAccessDate IS NOT NULL AND u.Location IS NOT NULL;",
        "SELECT LastAccessDate, Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'outliers';",
        "SELECT LastAccessDate, Location FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'outliers' AND UserId IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 653,
    "db_id": "codebase_community",
    "nlq": "What is the owner's display name of the most popular post?",
    "gold": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )",
    "evidence": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T1.ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);",
        "SELECT users.DisplayName FROM users JOIN (SELECT OwnerUserId FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE ViewCount IS NOT NULL)) AS MostPopular ON users.Id = MostPopular.OwnerUserId;",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE ViewCount IS NOT NULL));",
        "SELECT U.DisplayName FROM users U INNER JOIN posts P ON U.Id = P.OwnerUserId WHERE P.ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1);",
        "SELECT U.DisplayName FROM users U, posts P WHERE U.Id = P.OwnerUserId AND P.ViewCount = (SELECT MAX(P.ViewCount) FROM posts P WHERE P.ViewCount IS NOT NULL);",
        "SELECT T2.DisplayName FROM (SELECT * FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE ViewCount IS NOT NULL)) T1 JOIN users T2 ON T1.OwnerUserId = T2.Id;",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE ViewCount >= ALL (SELECT ViewCount FROM posts WHERE ViewCount IS NOT NULL));",
        "SELECT U.DisplayName FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.ViewCount = (SELECT MAX(ViewCount) FROM posts P WHERE P.ViewCount IS NOT NULL);",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE ViewCount IS NOT NULL));"
      ]
    ]
  },
  {
    "id": 654,
    "db_id": "codebase_community",
    "nlq": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "gold": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
    "infer_predictions": [
      [
        "SELECT U.DisplayName, U.Location FROM users U JOIN posts P ON U.Id = P.OwnerUserId JOIN tags T ON P.Id = T.ExcerptPostId WHERE T.TagName = 'hypothesis-testing';",
        "SELECT users.DisplayName, users.Location FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'hypothesis-testing';",
        "SELECT DisplayName, Location FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT ExcerptPostId FROM tags WHERE TagName = 'hypothesis-testing'));",
        "SELECT U.DisplayName, U.Location FROM users AS U, posts AS P, tags AS T WHERE U.Id = P.OwnerUserId AND P.Id = T.ExcerptPostId AND T.TagName = 'hypothesis-testing';",
        "SELECT users.DisplayName, users.Location FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN tags ON posts.Id = tags.ExcerptPostId AND tags.TagName = 'hypothesis-testing';",
        "SELECT U.DisplayName, U.Location FROM users U WHERE U.Id = (SELECT P.OwnerUserId FROM posts P WHERE P.Id = (SELECT T.ExcerptPostId FROM tags T WHERE T.TagName = 'hypothesis-testing'));",
        "SELECT U.DisplayName, U.Location FROM users U JOIN (SELECT P.OwnerUserId FROM posts P JOIN tags T ON P.Id = T.ExcerptPostId WHERE T.TagName = 'hypothesis-testing') AS Sub ON U.Id = Sub.OwnerUserId;",
        "SELECT U.DisplayName, U.Location FROM users U, posts P, tags T WHERE U.Id = P.OwnerUserId AND P.Id = T.ExcerptPostId AND T.TagName = 'hypothesis-testing';",
        "SELECT U.DisplayName, U.Location FROM users U INNER JOIN (posts P INNER JOIN tags T ON P.Id = T.ExcerptPostId AND T.TagName = 'hypothesis-testing') ON U.Id = P.OwnerUserId;",
        "SELECT DisplayName, Location FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE TagName = 'hypothesis-testing'));"
      ]
    ]
  },
  {
    "id": 656,
    "db_id": "codebase_community",
    "nlq": "Describe the display name of the parent ID for child post with the highest score.",
    "gold": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )",
    "evidence": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);",
    "infer_predictions": [
      [
        "SELECT U.DisplayName FROM posts P JOIN posts PP ON P.ParentId = PP.Id JOIN users U ON PP.OwnerUserId = U.Id WHERE P.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL) AND P.ParentId IS NOT NULL;",
        "SELECT U.DisplayName FROM users U WHERE U.Id = (SELECT PP.OwnerUserId FROM posts PP WHERE PP.Id = (SELECT P.ParentId FROM posts P WHERE P.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL) AND P.ParentId IS NOT NULL));",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)));",
        "SELECT U.DisplayName FROM users U INNER JOIN posts PP ON U.Id = PP.OwnerUserId WHERE PP.Id = (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL));",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = (SELECT ParentId FROM (SELECT Id, ParentId, Score FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1)));",
        "SELECT U.DisplayName FROM users U, posts P, posts PP WHERE P.ParentId = PP.Id AND PP.OwnerUserId = U.Id AND P.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL) AND P.ParentId IS NOT NULL;",
        "SELECT U.DisplayName FROM users U JOIN posts PP ON U.Id = PP.OwnerUserId JOIN posts P ON P.ParentId = PP.Id WHERE P.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL) AND P.ParentId IS NOT NULL ORDER BY P.Score DESC LIMIT 1;",
        "SELECT U.DisplayName FROM users U WHERE U.Id = (SELECT OwnerUserId FROM posts WHERE Id = (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL) AND ParentId IS NOT NULL));",
        "SELECT U.DisplayName FROM users U JOIN posts PP ON U.Id = PP.OwnerUserId WHERE PP.Id = (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL));",
        "SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = (SELECT ParentId FROM posts ORDER BY Score DESC LIMIT 1 WHERE ParentId IS NOT NULL));"
      ]
    ]
  },
  {
    "id": 657,
    "db_id": "codebase_community",
    "nlq": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.",
    "gold": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )",
    "evidence": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName, T2.WebsiteUrl FROM votes T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.VoteTypeId = 8 AND T1.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);",
        "SELECT users.DisplayName, users.WebsiteUrl FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE votes.VoteTypeId = 8 AND votes.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);",
        "SELECT DisplayName, WebsiteUrl FROM users WHERE Id IN (SELECT UserId FROM votes WHERE VoteTypeId = 8 AND BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8));",
        "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN (SELECT UserId FROM votes WHERE VoteTypeId = 8 AND BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)) v ON u.Id = v.UserId;",
        "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = (SELECT UserId FROM votes WHERE VoteTypeId = 8 AND BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8));",
        "SELECT u.DisplayName, u.WebsiteUrl FROM users u, votes v WHERE u.Id = v.UserId AND v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);",
        "SELECT T2.DisplayName, T2.WebsiteUrl FROM votes T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.VoteTypeId = 8 AND T1.BountyAmount IN (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);",
        "SELECT users.DisplayName, users.WebsiteUrl FROM users JOIN votes ON users.Id = votes.UserId WHERE votes.VoteTypeId = 8 AND votes.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8 GROUP BY VoteTypeId);",
        "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = (SELECT UserId FROM votes WHERE VoteTypeId = 8 GROUP BY UserId HAVING BountyAmount = MAX(BountyAmount));",
        "SELECT u.DisplayName, u.WebsiteUrl FROM users u WHERE EXISTS (SELECT 1 FROM votes v WHERE v.UserId = u.Id AND v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8));"
      ]
    ]
  },
  {
    "id": 658,
    "db_id": "codebase_community",
    "nlq": "What are the titles of the top 5 posts with the highest popularity?",
    "gold": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
    "evidence": "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);",
    "infer_predictions": [
      [
        "SELECT Title FROM posts WHERE ViewCount IS NOT NULL ORDER BY ViewCount DESC LIMIT 5;",
        "SELECT Title FROM posts WHERE ViewCount IS NOT NULL ORDER BY ViewCount DESC FETCH FIRST 5 ROWS ONLY;",
        "SELECT p.Title FROM posts p WHERE p.ViewCount IS NOT NULL ORDER BY p.ViewCount DESC LIMIT 5;",
        "SELECT Title FROM (SELECT Title, ViewCount FROM posts WHERE ViewCount IS NOT NULL ORDER BY ViewCount DESC) LIMIT 5;",
        "SELECT Title FROM posts WHERE ViewCount IS NOT NULL ORDER BY ViewCount DESC LIMIT 5 OFFSET 0;",
        "SELECT TOP 5 Title FROM posts WHERE ViewCount IS NOT NULL ORDER BY ViewCount DESC;",
        "SELECT Title FROM posts WHERE ViewCount > 0 ORDER BY ViewCount DESC LIMIT 5;",
        "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;",
        "SELECT Title FROM posts WHERE ViewCount IS NOT NULL ORDER BY ViewCount DESC, Id ASC LIMIT 5;",
        "SELECT Title FROM posts WHERE ViewCount IS NOT NULL ORDER BY ViewCount DESC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 659,
    "db_id": "codebase_community",
    "nlq": "How many tags have post count between 5,000 to 7,000?",
    "gold": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
    "evidence": "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;",
        "SELECT COUNT(Id) FROM tags WHERE Count >= 5000 AND Count <= 7000;",
        "SELECT COUNT(*) FROM tags WHERE Count > 4999 AND Count < 7001;",
        "SELECT COUNT(*) AS NumberOfTags FROM tags WHERE Count BETWEEN 5000 AND 7000;",
        "SELECT COUNT(Id) AS TagCount FROM tags WHERE Count >= 5000 AND Count <= 7000;",
        "SELECT COUNT(*) FROM tags t WHERE t.Count BETWEEN 5000 AND 7000;",
        "SELECT COUNT(*) FROM tags WHERE Count IS NOT NULL AND Count BETWEEN 5000 AND 7000;",
        "SELECT COUNT(*) FROM tags WHERE Count IS NOT NULL AND Count >= 5000 AND Count <= 7000;",
        "SELECT COUNT(*) FROM (SELECT Id FROM tags WHERE Count BETWEEN 5000 AND 7000) AS FilteredTags;",
        "SELECT COUNT(Id) FROM tags t WHERE t.Count >= 5000 AND t.Count <= 7000;"
      ]
    ]
  },
  {
    "id": 660,
    "db_id": "codebase_community",
    "nlq": "What is the owner user id of the most valuable post?",
    "gold": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )",
    "evidence": "the most valuable post refers to MAX(FavoriteCount);",
    "infer_predictions": [
      [
        "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL);",
        "SELECT p.OwnerUserId FROM posts p WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL);",
        "SELECT p.OwnerUserId FROM posts p INNER JOIN (SELECT MAX(FavoriteCount) AS MaxFav FROM posts) m ON p.FavoriteCount = m.MaxFav WHERE p.FavoriteCount IS NOT NULL;",
        "SELECT OwnerUserId FROM posts WHERE FavoriteCount IN (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL);",
        "SELECT p.OwnerUserId FROM posts p WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);",
        "SELECT p.OwnerUserId FROM posts p JOIN (SELECT MAX(FavoriteCount) AS MaxFavorite FROM posts) max ON p.FavoriteCount = max.MaxFavorite WHERE p.FavoriteCount IS NOT NULL;",
        "SELECT p.OwnerUserId FROM posts p WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE FavoriteCount IS NOT NULL) AND p.FavoriteCount IS NOT NULL;",
        "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);",
        "SELECT p.OwnerUserId FROM posts p WHERE p.FavoriteCount >= ALL (SELECT FavoriteCount FROM posts WHERE FavoriteCount IS NOT NULL);",
        "SELECT p.OwnerUserId FROM posts p WHERE p.FavoriteCount = (SELECT MAX(p2.FavoriteCount) FROM posts p2 WHERE p2.FavoriteCount IS NOT NULL) AND p.FavoriteCount IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 661,
    "db_id": "codebase_community",
    "nlq": "How old is the most influential user?",
    "gold": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "evidence": "How old describes age; the most influential refers to user where MAX(Reputation);",
    "infer_predictions": [
      [
        "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT T1.Age FROM users T1 WHERE T1.Reputation = (SELECT MAX(T2.Reputation) FROM users T2 WHERE T2.Reputation IS NOT NULL);",
        "SELECT Age FROM users WHERE Reputation IN (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);",
        "SELECT T1.Age FROM users T1 JOIN (SELECT MAX(Reputation) AS MaxReputation FROM users) T2 ON T1.Reputation = T2.MaxReputation;",
        "SELECT Age FROM users ORDER BY Reputation DESC LIMIT 1;",
        "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users) AND Reputation IS NOT NULL;",
        "SELECT TOP 1 Age FROM users WHERE Reputation IS NOT NULL ORDER BY Reputation DESC;",
        "SELECT Age FROM (SELECT Age, RANK() OVER (ORDER BY Reputation DESC) AS rank FROM users WHERE Reputation IS NOT NULL) WHERE rank = 1;",
        "SELECT Age FROM (SELECT Age FROM users WHERE Reputation IS NOT NULL ORDER BY Reputation DESC LIMIT 1);"
      ]
    ]
  },
  {
    "id": 662,
    "db_id": "codebase_community",
    "nlq": "How many posts with votes that were created in 2011 have a bounty of 50?",
    "gold": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'",
    "evidence": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.PostId) FROM votes T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50;",
        "SELECT COUNT(UNIQUE T1.PostId) FROM votes T1 INNER JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT T1.PostId FROM votes T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50);",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE strftime('%Y', CreationDate) = '2011' AND BountyAmount = 50;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM votes T1 WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM votes T1, posts T2 WHERE T1.PostId = T2.Id AND strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM votes T1 LEFT JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM votes T1 RIGHT JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM votes T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50 GROUP BY T1.PostId;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM votes T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50 HAVING COUNT(T1.PostId) > 0;"
      ]
    ]
  },
  {
    "id": 663,
    "db_id": "codebase_community",
    "nlq": "What is the id of the youngest user?",
    "gold": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )",
    "evidence": "the youngest user refers to MIN(Age);",
    "infer_predictions": [
      [
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL)",
        "SELECT Id FROM users WHERE Age IN (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL)",
        "SELECT T1.Id FROM users AS T1 WHERE T1.Age = (SELECT MIN(T2.Age) FROM users AS T2 WHERE T2.Age IS NOT NULL)",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL) AND Age IS NOT NULL",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM (SELECT Age FROM users WHERE Age IS NOT NULL))",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL) ORDER BY Age LIMIT 1",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL) LIMIT 1",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL) GROUP BY Age HAVING Age = MIN(Age)",
        "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL) ORDER BY Id ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 664,
    "db_id": "codebase_community",
    "nlq": "What is the sum of score of the post on 2010-07-19?",
    "gold": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
    "evidence": "on 2010-07-19 refers to LasActivityDate LIKE '2010-07-19%';",
    "infer_predictions": [
      [
        "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%' AND Score IS NOT NULL;",
        "SELECT SUM(p.Score) AS TotalScore FROM posts p WHERE p.LasActivityDate LIKE '2010-07-19%' AND p.Score IS NOT NULL;",
        "SELECT TOTAL(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%' AND Score IS NOT NULL;",
        "SELECT SUM(Score) FROM posts WHERE strftime('%Y-%m-%d', LasActivityDate) = '2010-07-19' AND Score IS NOT NULL;",
        "SELECT SUM(Score) FROM posts WHERE substr(LasActivityDate, 1, 10) = '2010-07-19' AND Score IS NOT NULL;",
        "SELECT SUM(Score) AS Total FROM posts WHERE LasActivityDate BETWEEN '2010-07-19 00:00:00' AND '2010-07-19 23:59:59' AND Score IS NOT NULL;",
        "SELECT SUM(Score) FROM posts WHERE date(LasActivityDate) = date('2010-07-19') AND Score IS NOT NULL;",
        "SELECT SUM(Score) FROM posts WHERE LasActivityDate >= '2010-07-19 00:00:00' AND LasActivityDate <= '2010-07-19 23:59:59' AND Score IS NOT NULL;",
        "SELECT SUM(Score) FROM posts WHERE LasActivityDate GLOB '2010-07-19*' AND Score IS NOT NULL;",
        "SELECT SUM(Score) FROM posts WHERE CAST(LasActivityDate AS DATE) = '2010-07-19' AND Score IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 665,
    "db_id": "codebase_community",
    "nlq": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "gold": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
    "evidence": "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)",
    "infer_predictions": [
      [
        "SELECT COUNT(*) / 12 AS AverageMonthlyLinks FROM postLinks PL JOIN posts P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2;",
        "SELECT AVG(LinkCount) AS AverageMonthlyLinks FROM (SELECT COUNT(*) AS LinkCount FROM postLinks PL INNER JOIN posts P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2 GROUP BY strftime('%m', PL.CreationDate));",
        "SELECT (COUNT(PL.Id) / 12.0) AS AverageMonthlyLinks FROM postLinks PL INNER JOIN posts P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND IFNULL(P.AnswerCount, 0) <= 2;",
        "SELECT COUNT(PL.Id) / 12 AS AverageMonthlyLinks FROM postLinks AS PL JOIN posts AS P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND COALESCE(P.AnswerCount, 0) <= 2;",
        "SELECT (SELECT COUNT(*) FROM postLinks PL INNER JOIN posts P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2) / 12 AS AverageMonthlyLinks;",
        "SELECT COUNT(*) / 12.0 AS AverageMonthlyLinks FROM postLinks PL INNER JOIN posts P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2;",
        "SELECT COUNT(PL.Id) / 12 AS AverageMonthlyLinks FROM postLinks PL, posts P WHERE PL.PostId = P.Id AND strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2;",
        "SELECT COUNT(*) / 12 AS AverageMonthlyLinks FROM postLinks PL JOIN posts P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2;",
        "SELECT COUNT(PL.Id) / 12 AS AverageMonthlyLinks FROM postLinks AS PL JOIN posts AS P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2;",
        "SELECT COUNT(*) / 12 AS AverageMonthlyLinks FROM postLinks AS PL JOIN posts AS P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2;"
      ]
    ]
  },
  {
    "id": 666,
    "db_id": "codebase_community",
    "nlq": "Among the posts that were voted by user 1465, what is the id of the most valuable post?",
    "gold": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "evidence": "user 1465 refers to UserId = 1465; the most valuable post refers to MAX(FavoriteCount);",
    "infer_predictions": [
      [
        "SELECT P.Id FROM posts P JOIN votes V ON P.Id = V.PostId WHERE V.UserId = 1465 AND P.FavoriteCount IS NOT NULL ORDER BY P.FavoriteCount DESC LIMIT 1;",
        "SELECT Id FROM posts WHERE Id IN (SELECT PostId FROM votes WHERE UserId = 1465) AND FavoriteCount IS NOT NULL ORDER BY FavoriteCount DESC LIMIT 1;",
        "WITH UserVotes AS (SELECT PostId FROM votes WHERE UserId = 1465) SELECT posts.Id FROM posts JOIN UserVotes ON posts.Id = UserVotes.PostId WHERE posts.FavoriteCount IS NOT NULL ORDER BY posts.FavoriteCount DESC LIMIT 1;",
        "SELECT TOP 1 P.Id FROM posts P INNER JOIN votes V ON P.Id = V.PostId WHERE V.UserId = 1465 AND P.FavoriteCount IS NOT NULL ORDER BY P.FavoriteCount DESC;",
        "SELECT P.Id FROM posts P WHERE P.Id IN (SELECT PostId FROM votes WHERE UserId = 1465) ORDER BY P.FavoriteCount DESC NULLS LAST LIMIT 1;",
        "SELECT P.Id FROM posts P, votes V WHERE P.Id = V.PostId AND V.UserId = 1465 AND P.FavoriteCount IS NOT NULL ORDER BY P.FavoriteCount DESC LIMIT 1;",
        "SELECT Id FROM (SELECT P.Id, MAX(P.FavoriteCount) AS MaxFav FROM posts P JOIN votes V ON P.Id = V.PostId WHERE V.UserId = 1465 GROUP BY P.Id) ORDER BY MaxFav DESC LIMIT 1;",
        "WITH RankedPosts AS (SELECT P.Id, RANK() OVER (ORDER BY P.FavoriteCount DESC) AS Rank FROM posts P JOIN votes V ON P.Id = V.PostId WHERE V.UserId = 1465 AND P.FavoriteCount IS NOT NULL) SELECT Id FROM RankedPosts WHERE Rank = 1;",
        "SELECT P.Id FROM posts P WHERE EXISTS (SELECT 1 FROM votes V WHERE V.PostId = P.Id AND V.UserId = 1465) AND P.FavoriteCount IS NOT NULL ORDER BY P.FavoriteCount DESC LIMIT 1;",
        "SELECT P.Id FROM posts P INNER JOIN (SELECT PostId FROM votes WHERE UserId = 1465) AS VotedPosts ON P.Id = VotedPosts.PostId WHERE P.FavoriteCount IS NOT NULL ORDER BY P.FavoriteCount DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 667,
    "db_id": "codebase_community",
    "nlq": "What is the title of the post with the oldest post link?",
    "gold": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1",
    "evidence": "the oldest post link refers to MIN(CreaionDate);",
    "infer_predictions": [
      [
        "SELECT T2.Title FROM postLinks T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);",
        "SELECT posts.Title FROM posts JOIN postLinks ON posts.Id = postLinks.PostId WHERE postLinks.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);",
        "SELECT Title FROM posts WHERE Id IN (SELECT PostId FROM postLinks WHERE CreationDate = (SELECT MIN(CreationDate) FROM postLinks));",
        "SELECT p.Title FROM posts p INNER JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);",
        "SELECT Title FROM posts WHERE Id = (SELECT PostId FROM postLinks WHERE CreationDate = (SELECT MIN(CreationDate) FROM postLinks));",
        "SELECT p.Title FROM posts p, postLinks pl WHERE p.Id = pl.PostId AND pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);",
        "SELECT posts.Title FROM posts INNER JOIN (SELECT PostId FROM postLinks WHERE CreationDate = (SELECT MIN(CreationDate) FROM postLinks)) AS oldestLink ON posts.Id = oldestLink.PostId;",
        "SELECT Title FROM posts WHERE Id = (SELECT PostId FROM postLinks ORDER BY CreationDate ASC LIMIT 1);",
        "SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate IN (SELECT MIN(CreationDate) FROM postLinks);",
        "SELECT Title FROM posts WHERE Id = (SELECT pl.PostId FROM postLinks pl WHERE pl.CreationDate = (SELECT MIN(pl2.CreationDate) FROM postLinks pl2));"
      ]
    ]
  },
  {
    "id": 668,
    "db_id": "codebase_community",
    "nlq": "What is the display name of the user who acquired the highest amount of badges?",
    "gold": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "evidence": "highest amount of badges refers to MAX(COUNT(Name));",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM (SELECT UserId, COUNT(*) as BadgeCount FROM badges GROUP BY UserId) as T1 JOIN users as T2 ON T1.UserId = T2.Id WHERE T1.BadgeCount = (SELECT MAX(BadgeCount) FROM (SELECT UserId, COUNT(*) as BadgeCount FROM badges GROUP BY UserId) as T3)",
        "WITH BadgeCounts AS (SELECT UserId, COUNT(*) AS TotalBadges FROM badges GROUP BY UserId) SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM BadgeCounts WHERE TotalBadges = (SELECT MAX(TotalBadges) FROM BadgeCounts))",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(*) = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(*) AS BadgeCount FROM badges GROUP BY UserId) as SubQuery))",
        "SELECT u.DisplayName FROM users u JOIN (SELECT UserId, COUNT(*) as BadgeCount FROM badges GROUP BY UserId) b ON u.Id = b.UserId WHERE b.BadgeCount = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(*) as BadgeCount FROM badges GROUP BY UserId) as SubQuery)",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM (SELECT UserId, COUNT(*) as BadgeCount FROM badges GROUP BY UserId ORDER BY BadgeCount DESC LIMIT 1) as MaxBadges)",
        "WITH UserBadgeCounts AS (SELECT UserId, COUNT(*) AS BadgeCount FROM badges GROUP BY UserId), MaxBadgeCount AS (SELECT MAX(BadgeCount) AS MaxCount FROM UserBadgeCounts) SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM UserBadgeCounts WHERE BadgeCount = (SELECT MaxCount FROM MaxBadgeCount))",
        "SELECT u.DisplayName FROM users u WHERE u.Id = (SELECT b.UserId FROM badges b GROUP BY b.UserId ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH Counts AS (SELECT UserId, COUNT(*) AS NumBadges FROM badges GROUP BY UserId), MaxCount AS (SELECT MAX(NumBadges) AS MaxBadges FROM Counts) SELECT u.DisplayName FROM users u JOIN Counts c ON u.Id = c.UserId WHERE c.NumBadges = (SELECT MaxBadges FROM MaxCount)",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM (SELECT UserId, COUNT(Name) AS BadgeCount FROM badges GROUP BY UserId HAVING BadgeCount = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(Name) AS BadgeCount FROM badges GROUP BY UserId) Sub)) Sub2)"
      ]
    ]
  },
  {
    "id": 669,
    "db_id": "codebase_community",
    "nlq": "When did 'chl' cast its first vote in a post?",
    "gold": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
    "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
    "infer_predictions": [
      [
        "SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';",
        "SELECT MIN(CreationDate) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'chl');",
        "SELECT MIN(v.CreationDate) FROM votes v, users u WHERE v.UserId = u.Id AND u.DisplayName = 'chl';",
        "SELECT MIN(v.CreationDate) FROM votes v INNER JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';",
        "SELECT MIN(CreationDate) AS FirstVoteDate FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl');",
        "SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id AND u.DisplayName = 'chl';",
        "SELECT MIN(v.CreationDate) FROM votes v WHERE v.UserId = (SELECT Id FROM users WHERE DisplayName = 'chl');",
        "SELECT MIN(CreationDate) FROM votes WHERE UserId = (SELECT Id FROM users u WHERE u.DisplayName = 'chl');",
        "SELECT MIN(v.CreationDate) FROM votes v INNER JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl' GROUP BY u.DisplayName;",
        "SELECT MIN(CreationDate) FROM votes, users WHERE votes.UserId = users.Id AND users.DisplayName = 'chl';"
      ]
    ]
  },
  {
    "id": 670,
    "db_id": "codebase_community",
    "nlq": "What is the date when the youngest user made his or her first post?",
    "gold": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1",
    "evidence": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);",
    "infer_predictions": [
      [
        "SELECT MIN(T2.CreaionDate) FROM users T1 JOIN posts T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age = (SELECT MIN(Age) FROM users) AND T2.CreaionDate IS NOT NULL",
        "SELECT MIN(posts.CreaionDate) FROM posts INNER JOIN users ON users.Id = posts.OwnerUserId WHERE users.Age = (SELECT MIN(Age) FROM users) AND posts.CreaionDate IS NOT NULL",
        "SELECT MIN(p.CreaionDate) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age = (SELECT MIN(Age) FROM users) AND p.CreaionDate IS NOT NULL",
        "SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)) AND CreaionDate IS NOT NULL",
        "SELECT MIN(p.CreaionDate) FROM posts p, users u WHERE p.OwnerUserId = u.Id AND u.Age = (SELECT MIN(Age) FROM users) AND p.CreaionDate IS NOT NULL",
        "SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)) AND CreaionDate IS NOT NULL",
        "SELECT MIN(p.CreaionDate) FROM users u, posts p WHERE u.Id = p.OwnerUserId AND u.Age = (SELECT MIN(Age) FROM users) AND p.CreaionDate IS NOT NULL",
        "SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY Age ASC LIMIT 1) AND CreaionDate IS NOT NULL",
        "SELECT MIN(p.CreaionDate) FROM posts p INNER JOIN (SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)) u ON p.OwnerUserId = u.Id WHERE p.CreaionDate IS NOT NULL",
        "SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)) AND CreaionDate IS NOT NULL"
      ]
    ]
  },
  {
    "id": 671,
    "db_id": "codebase_community",
    "nlq": "What is the display name of the user who acquired the first Autobiographer badge?",
    "gold": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "infer_predictions": [
      [
        "SELECT T2.DisplayName FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Autobiographer' AND T1.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer')",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date ASC LIMIT 1)",
        "SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Autobiographer' AND badges.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer')",
        "SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Autobiographer' AND Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'))",
        "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' AND b.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer')",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' AND Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'))",
        "SELECT u.DisplayName FROM users u, badges b WHERE u.Id = b.UserId AND b.Name = 'Autobiographer' AND b.Date = (SELECT MIN(b2.Date) FROM badges b2 WHERE b2.Name = 'Autobiographer')",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date LIMIT 1)",
        "SELECT T2.DisplayName FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Autobiographer' AND T1.Date IN (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer')",
        "SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' AND Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'))"
      ]
    ]
  },
  {
    "id": 672,
    "db_id": "codebase_community",
    "nlq": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "gold": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
    "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.Id) FROM users T1 JOIN posts T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4;",
        "SELECT COUNT(DISTINCT OwnerUserId) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Location = 'United Kingdom') AND FavoriteCount >= 4;",
        "SELECT COUNT(DISTINCT U.Id) FROM users U INNER JOIN posts P ON U.Id = P.OwnerUserId WHERE U.Location = 'United Kingdom' AND P.FavoriteCount >= 4;",
        "SELECT COUNT(DISTINCT U.Id) FROM users U, posts P WHERE U.Id = P.OwnerUserId AND U.Location = 'United Kingdom' AND P.FavoriteCount >= 4;",
        "SELECT COUNT(DISTINCT OwnerUserId) FROM posts WHERE FavoriteCount >= 4 AND OwnerUserId IN (SELECT Id FROM users WHERE Location = 'United Kingdom');",
        "SELECT COUNT(DISTINCT U.Id) FROM users U WHERE U.Location = 'United Kingdom' AND EXISTS (SELECT 1 FROM posts P WHERE P.OwnerUserId = U.Id AND P.FavoriteCount >= 4);",
        "SELECT COUNT(DISTINCT U.Id) FROM users U WHERE U.Location = 'United Kingdom' AND U.Id IN (SELECT OwnerUserId FROM posts WHERE FavoriteCount >= 4);",
        "SELECT COUNT(DISTINCT U.Id) FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE U.Location = 'United Kingdom' AND P.FavoriteCount >= 4 GROUP BY U.Id;",
        "SELECT COUNT(DISTINCT U.Id) FROM (SELECT U.Id FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE U.Location = 'United Kingdom' AND P.FavoriteCount >= 4) U;",
        "SELECT COUNT(DISTINCT U.Id) FROM users U WHERE U.Location = 'United Kingdom' AND U.Id IN (SELECT OwnerUserId FROM posts WHERE FavoriteCount >= 4 GROUP BY OwnerUserId HAVING COUNT(*) > 0);"
      ]
    ]
  },
  {
    "id": 673,
    "db_id": "codebase_community",
    "nlq": "What is the average number of posts voted by the oldest users?",
    "gold": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )",
    "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);",
    "infer_predictions": [
      [
        "SELECT AVG(post_count) FROM (SELECT COUNT(DISTINCT T2.PostId) AS post_count FROM users T1 JOIN votes T2 ON T1.Id = T2.UserId WHERE T1.Age = (SELECT MAX(Age) FROM users) GROUP BY T2.UserId)",
        "SELECT AVG(total_posts) FROM (SELECT T2.UserId, COUNT(DISTINCT T2.PostId) AS total_posts FROM users T1 INNER JOIN votes T2 ON T1.Id = T2.UserId WHERE T1.Age = (SELECT MAX(Age) FROM users) GROUP BY T2.UserId) AS subquery",
        "SELECT AVG(post_count) FROM (SELECT T2.UserId, COUNT(DISTINCT T2.PostId) AS post_count FROM users T1, votes T2 WHERE T1.Id = T2.UserId AND T1.Age = (SELECT MAX(Age) FROM users) GROUP BY T2.UserId) AS result_table",
        "SELECT AVG(count_posts) FROM (SELECT COUNT(DISTINCT PostId) AS count_posts FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users)) GROUP BY UserId) AS avg_posts",
        "SELECT AVG(number_of_posts) FROM (SELECT UserId, COUNT(DISTINCT PostId) AS number_of_posts FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users)) GROUP BY UserId) AS post_counts",
        "SELECT AVG(post_count) FROM (SELECT COUNT(DISTINCT PostId) AS post_count FROM votes T2 JOIN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users)) T1 ON T2.UserId = T1.Id GROUP BY T2.UserId) AS counts",
        "SELECT AVG(unique_posts) FROM (SELECT UserId, COUNT(DISTINCT PostId) AS unique_posts FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users)) GROUP BY UserId) AS post_data",
        "SELECT AVG(post_count) FROM (SELECT COUNT(DISTINCT T2.PostId) AS post_count FROM users T1 INNER JOIN votes T2 ON T1.Id = T2.UserId WHERE T1.Age = (SELECT MAX(Age) FROM users) GROUP BY T2.UserId) AS average_posts",
        "SELECT AVG(distinct_post_count) FROM (SELECT UserId, COUNT(DISTINCT PostId) AS distinct_post_count FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users)) GROUP BY UserId) AS distinct_counts",
        "SELECT AVG(post_count) FROM (SELECT COUNT(DISTINCT PostId) AS post_count FROM votes JOIN users ON votes.UserId = users.Id WHERE users.Age = (SELECT MAX(Age) FROM users) GROUP BY votes.UserId) AS post_totals"
      ]
    ]
  },
  {
    "id": 674,
    "db_id": "codebase_community",
    "nlq": "Who has the highest reputation? Please give the display name.",
    "gold": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "evidence": "the highest reputation refers to MAX(Reputation);",
    "infer_predictions": [
      [
        "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT T1.DisplayName FROM users T1 WHERE T1.Reputation = (SELECT MAX(T2.Reputation) FROM users T2 WHERE T2.Reputation IS NOT NULL);",
        "SELECT DisplayName FROM users WHERE Reputation IN (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);",
        "SELECT u.DisplayName FROM users u WHERE u.Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL);",
        "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL) AND Reputation IS NOT NULL;",
        "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);",
        "SELECT u.DisplayName FROM users u JOIN (SELECT MAX(Reputation) AS MaxReputation FROM users) m ON u.Reputation = m.MaxReputation;",
        "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users WHERE Reputation IS NOT NULL) ORDER BY Reputation DESC LIMIT 1;",
        "SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 675,
    "db_id": "codebase_community",
    "nlq": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?",
    "gold": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000",
    "evidence": "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;",
        "SELECT COUNT(Id) FROM users WHERE Reputation > 2000 AND Views > 1000;",
        "SELECT COUNT(*) AS NumberOfQualifiedUsers FROM users WHERE Reputation > 2000 AND Views > 1000;",
        "SELECT COUNT(*) FROM users WHERE Reputation IS NOT NULL AND Views IS NOT NULL AND Reputation > 2000 AND Views > 1000;",
        "WITH FilteredUsers AS (SELECT * FROM users WHERE Reputation > 2000 AND Views > 1000) SELECT COUNT(*) FROM FilteredUsers;",
        "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000 AND Reputation IS NOT NULL AND Views IS NOT NULL;",
        "SELECT COUNT(Id) FROM users WHERE Reputation > 2000 AND Views > 1000 AND Reputation IS NOT NULL AND Views IS NOT NULL;",
        "SELECT COUNT(*) FROM (SELECT Id FROM users WHERE Reputation > 2000 AND Views > 1000) AS QualifiedUsers;",
        "SELECT COUNT(*) FROM users u WHERE u.Reputation > 2000 AND u.Views > 1000;",
        "SELECT COUNT(*) FROM users WHERE (Reputation > 2000 AND Views > 1000) AND (Reputation IS NOT NULL AND Views IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 676,
    "db_id": "codebase_community",
    "nlq": "Please list all display names of users who are adults.",
    "gold": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
    "evidence": "adults refer to users where Age BETWEEN 19 and 65;",
    "infer_predictions": [
      [
        "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;",
        "SELECT DisplayName FROM users WHERE Age >= 19 AND Age <= 65;",
        "SELECT u.DisplayName FROM users u WHERE u.Age >= 19 AND u.Age <= 65;",
        "SELECT DisplayName FROM users WHERE Age > 18 AND Age < 66;",
        "SELECT DisplayName FROM users WHERE Age IN (SELECT Age FROM users WHERE Age BETWEEN 19 AND 65);",
        "SELECT DisplayName FROM users WHERE Age >= 19 AND Age <= 65 ORDER BY Age;",
        "SELECT DisplayName FROM users WHERE Age >= 19 AND Age <= 65 ORDER BY DisplayName;",
        "SELECT DisplayName FROM users WHERE Age >= 19 AND Age <= 65 AND DisplayName IS NOT NULL;",
        "SELECT DisplayName FROM users WHERE Age >= 19 AND Age <= 65 AND DisplayName IS NOT NULL ORDER BY DisplayName;",
        "SELECT DisplayName FROM users WHERE Age >= 19 AND Age <= 65 AND DisplayName IS NOT NULL ORDER BY Age;"
      ]
    ]
  },
  {
    "id": 677,
    "db_id": "codebase_community",
    "nlq": "How many posts did Jay Stevens have in 2010?",
    "gold": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
    "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND strftime('%Y', CreationDate) = '2010';",
        "SELECT COUNT(p.Id) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND strftime('%Y', p.CreationDate) = '2010';",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND strftime('%Y', CreationDate) = '2010';",
        "SELECT COUNT(*) AS PostCount FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Jay Stevens' AND strftime('%Y', posts.CreationDate) = '2010';",
        "SELECT COUNT(*) FROM posts p WHERE EXISTS (SELECT 1 FROM users u WHERE u.Id = p.OwnerUserId AND u.DisplayName = 'Jay Stevens') AND strftime('%Y', p.CreationDate) = '2010';",
        "SELECT COUNT(*) FROM posts p, users u WHERE p.OwnerUserId = u.Id AND u.DisplayName = 'Jay Stevens' AND strftime('%Y', p.CreationDate) = '2010';",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND CreationDate LIKE '2010%';",
        "SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND p.CreationDate BETWEEN '2010-01-01' AND '2010-12-31';",
        "SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND substr(CreationDate, 1, 4) = '2010';",
        "SELECT COUNT(*) FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND p.CreationDate >= '2010-01-01' AND p.CreationDate <= '2010-12-31';"
      ]
    ]
  },
  {
    "id": 678,
    "db_id": "codebase_community",
    "nlq": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "gold": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "infer_predictions": [
      [
        "SELECT P.Id, P.Title FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Harvey Motulsky' AND P.ViewCount IS NOT NULL ORDER BY P.ViewCount DESC LIMIT 1;",
        "SELECT Id, Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') AND ViewCount IS NOT NULL ORDER BY ViewCount DESC LIMIT 1;",
        "SELECT T1.Id, T1.Title FROM posts T1 INNER JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' AND T1.ViewCount IS NOT NULL ORDER BY T1.ViewCount DESC LIMIT 1;",
        "SELECT TOP 1 P.Id, P.Title FROM posts P, users U WHERE P.OwnerUserId = U.Id AND U.DisplayName = 'Harvey Motulsky' AND P.ViewCount IS NOT NULL ORDER BY P.ViewCount DESC;",
        "SELECT P.Id, P.Title FROM posts P WHERE P.OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') AND P.ViewCount IS NOT NULL ORDER BY P.ViewCount DESC FETCH FIRST 1 ROW ONLY;",
        "SELECT Id, Title FROM (SELECT Id, Title, ViewCount, RANK() OVER (ORDER BY ViewCount DESC) AS rank FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') AND ViewCount IS NOT NULL) WHERE rank = 1;",
        "SELECT P.Id, P.Title FROM posts P WHERE P.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') AND P.ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') AND ViewCount IS NOT NULL);",
        "SELECT P.Id, P.Title FROM posts P INNER JOIN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') U ON P.OwnerUserId = U.Id WHERE P.ViewCount IS NOT NULL ORDER BY P.ViewCount DESC LIMIT 1;",
        "SELECT Id, Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') ORDER BY ViewCount DESC LIMIT 1;",
        "WITH HighestView AS (SELECT Id, Title, ViewCount FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') AND ViewCount IS NOT NULL ORDER BY ViewCount DESC LIMIT 1) SELECT Id, Title FROM HighestView;"
      ]
    ]
  },
  {
    "id": 679,
    "db_id": "codebase_community",
    "nlq": "Which post has the highest score? Please give its id and title's name.",
    "gold": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1",
    "evidence": "the highest score refers to MAX(Score); owner's name refers to DisplayName;",
    "infer_predictions": [
      [
        "SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE Score IS NOT NULL);",
        "SELECT p.Id, p.Title FROM posts p WHERE p.Score = (SELECT MAX(Score) FROM posts WHERE Score IS NOT NULL);",
        "SELECT Id, Title FROM posts WHERE Score IN (SELECT MAX(Score) FROM posts WHERE Score IS NOT NULL);",
        "SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(p.Score) FROM posts p WHERE p.Score IS NOT NULL);",
        "SELECT p.Id, p.Title FROM posts p ORDER BY p.Score DESC LIMIT 1;",
        "SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1;",
        "SELECT TOP 1 Id, Title FROM posts WHERE Score IS NOT NULL ORDER BY Score DESC;",
        "SELECT p.Id, p.Title FROM (SELECT * FROM posts WHERE Score IS NOT NULL ORDER BY Score DESC) p LIMIT 1;",
        "SELECT Id, Title FROM (SELECT Id, Title, RANK() OVER (ORDER BY Score DESC) AS rank FROM posts WHERE Score IS NOT NULL) WHERE rank = 1;",
        "SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts) AND Score IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 680,
    "db_id": "codebase_community",
    "nlq": "What is the average score of Stephen Turner's posts?",
    "gold": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
    "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);",
    "infer_predictions": [
      [
        "SELECT AVG(P.Score) FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Stephen Turner' AND P.Score IS NOT NULL;",
        "SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner') AND Score IS NOT NULL;",
        "SELECT AVG(P.Score) AS AverageScore FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Stephen Turner' AND P.Score IS NOT NULL;",
        "SELECT AVG(Score) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner') AND Score IS NOT NULL;",
        "SELECT AVG(P.Score) FROM users U, posts P WHERE U.Id = P.OwnerUserId AND U.DisplayName = 'Stephen Turner' AND P.Score IS NOT NULL;",
        "SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner' LIMIT 1) AND Score IS NOT NULL;",
        "SELECT AVG(P.Score) FROM posts P, users U WHERE U.Id = P.OwnerUserId AND U.DisplayName = 'Stephen Turner' AND P.Score IS NOT NULL;",
        "SELECT AVG(P.Score) FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Stephen Turner' AND P.Score IS NOT NULL GROUP BY U.DisplayName;",
        "SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner') AND Score IS NOT NULL;",
        "SELECT AVG(P.Score) FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Stephen Turner' AND P.Score IS NOT NULL GROUP BY U.DisplayName;"
      ]
    ]
  },
  {
    "id": 681,
    "db_id": "codebase_community",
    "nlq": "Please list the users' display names whose posts had over 20000 views in 2011.",
    "gold": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000",
    "evidence": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;",
    "infer_predictions": [
      [
        "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreationDate) = '2011';",
        "SELECT DISTINCT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount > 20000 AND strftime('%Y', CreationDate) = '2011');",
        "SELECT DISTINCT u.DisplayName FROM users u, posts p WHERE u.Id = p.OwnerUserId AND p.ViewCount > 20000 AND strftime('%Y', p.CreationDate) = '2011';",
        "SELECT DISTINCT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount > 20000 AND strftime('%Y', CreationDate) = '2011');",
        "SELECT DISTINCT u.DisplayName FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreationDate) = '2011';",
        "SELECT DISTINCT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount > 20000 AND strftime('%Y', CreationDate) = '2011');",
        "SELECT DISTINCT u.DisplayName FROM users u WHERE EXISTS (SELECT 1 FROM posts p WHERE p.OwnerUserId = u.Id AND p.ViewCount > 20000 AND strftime('%Y', p.CreationDate) = '2011');",
        "SELECT DISTINCT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount > 20000 AND strftime('%Y', CreationDate) = '2011');",
        "SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreationDate) = '2011';",
        "SELECT DISTINCT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount > 20000 AND strftime('%Y', CreationDate) = '2011');"
      ]
    ]
  },
  {
    "id": 682,
    "db_id": "codebase_community",
    "nlq": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "gold": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "evidence": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
    "infer_predictions": [
      [
        "SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010') AND strftime('%Y', CreationDate) = '2010';",
        "SELECT P.Id, U.DisplayName FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount IN (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010') AND strftime('%Y', CreationDate) = '2010';",
        "SELECT P.Id, U.DisplayName FROM posts P, users U WHERE P.OwnerUserId = U.Id AND P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010') AND strftime('%Y', CreationDate) = '2010';",
        "SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010') AND strftime('%Y', CreationDate) = '2010' ORDER BY P.FavoriteCount DESC LIMIT 1;",
        "SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE strftime('%Y', P.CreationDate) = '2010' ORDER BY P.FavoriteCount DESC LIMIT 1;",
        "SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010');",
        "SELECT TOP 1 P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE strftime('%Y', P.CreationDate) = '2010' ORDER BY P.FavoriteCount DESC;",
        "SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010') AND strftime('%Y', CreationDate) = '2010' GROUP BY P.Id, U.DisplayName HAVING MAX(P.FavoriteCount);",
        "SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE strftime('%Y', P.CreationDate) = '2010' AND P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010');",
        "SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE strftime('%Y', P.CreationDate) = '2010' AND P.FavoriteCount >= ALL (SELECT FavoriteCount FROM posts WHERE strftime('%Y', CreationDate) = '2010');"
      ]
    ]
  },
  {
    "id": 683,
    "db_id": "codebase_community",
    "nlq": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "gold": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
    "evidence": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
    "infer_predictions": [
      [
        "SELECT (COUNT(*) FILTER (WHERE P.OwnerUserId = U.Id AND U.Reputation > 1000 AND strftime('%Y', P.CreationDate) = '2011') * 100.0 / COUNT(*) FILTER (WHERE strftime('%Y', P.CreationDate) = '2011')) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id;",
        "SELECT (SUM(CASE WHEN U.Reputation > 1000 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS Percentage FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE strftime('%Y', P.CreationDate) = '2011';",
        "SELECT (COUNT(P.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE strftime('%Y', CreationDate) = '2011')) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.Reputation > 1000 AND strftime('%Y', P.CreationDate) = '2011';",
        "SELECT (COUNT(P.Id) FILTER (WHERE U.Reputation > 1000) * 100.0 / COUNT(P.Id)) AS Percentage FROM posts P LEFT JOIN users U ON P.OwnerUserId = U.Id WHERE strftime('%Y', P.CreationDate) = '2011';",
        "SELECT (COUNT(P.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE strftime('%Y', CreationDate) = '2011')) AS Percentage FROM posts P, users U WHERE P.OwnerUserId = U.Id AND U.Reputation > 1000 AND strftime('%Y', P.CreationDate) = '2011';",
        "SELECT (COUNT(P.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE strftime('%Y', CreationDate) = '2011')) AS Percentage FROM posts P INNER JOIN users U ON P.OwnerUserId = U.Id WHERE U.Reputation > 1000 AND strftime('%Y', P.CreationDate) = '2011';",
        "SELECT (COUNT(P.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE strftime('%Y', CreationDate) = '2011')) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.Reputation > 1000 AND strftime('%Y', P.CreationDate) = '2011';",
        "SELECT (COUNT(P.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE strftime('%Y', CreationDate) = '2011')) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.Reputation > 1000 AND strftime('%Y', P.CreationDate) = '2011';",
        "SELECT (COUNT(P.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE strftime('%Y', CreationDate) = '2011')) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.Reputation > 1000 AND strftime('%Y', P.CreationDate) = '2011';",
        "SELECT (COUNT(P.Id) * 100.0 / (SELECT COUNT(*) FROM posts WHERE strftime('%Y', CreationDate) = '2011')) AS Percentage FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE U.Reputation > 1000 AND strftime('%Y', P.CreationDate) = '2011';"
      ]
    ]
  },
  {
    "id": 684,
    "db_id": "codebase_community",
    "nlq": "Identify the percentage of teenage users.",
    "gold": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
    "evidence": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;",
    "infer_predictions": [
      [
        "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM users;",
        "SELECT (SUM(CASE WHEN Age >= 13 AND Age <= 18 THEN 1 ELSE 0 END) * 100.0 / COUNT(Id)) AS percentage FROM users;",
        "SELECT (COUNT(Id) FILTER (WHERE Age BETWEEN 13 AND 18) * 100.0 / COUNT(Id)) AS percentage FROM users;",
        "SELECT (100.0 * (SELECT COUNT(*) FROM users WHERE Age BETWEEN 13 AND 18) / COUNT(*)) AS percentage FROM users;",
        "SELECT (100.0 * COUNT(*) / (SELECT COUNT(*) FROM users)) AS percentage FROM users WHERE Age BETWEEN 13 AND 18;",
        "SELECT (100.0 * COUNT(Id) / (SELECT COUNT(Id) FROM users)) AS percentage FROM users WHERE Age BETWEEN 13 AND 18;",
        "SELECT (100.0 * (SELECT COUNT(Id) FROM users WHERE Age BETWEEN 13 AND 18) / COUNT(Id)) AS percentage FROM users;",
        "SELECT ROUND(100.0 * COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) / COUNT(Id), 2) AS percentage FROM users;",
        "SELECT (100.0 * COUNT(Id) WHERE Age BETWEEN 13 AND 18 / COUNT(Id)) AS percentage FROM users;",
        "SELECT (100.0 * (SELECT COUNT(*) FROM users WHERE Age BETWEEN 13 AND 18) / (SELECT COUNT(*) FROM users)) AS percentage FROM users;"
      ]
    ]
  },
  {
    "id": 686,
    "db_id": "codebase_community",
    "nlq": "Identify the total number of posts with views above average.",
    "gold": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
    "evidence": "views above average refer to ViewCount > AVG(ViewCount);",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);",
        "WITH AverageView AS (SELECT AVG(ViewCount) AS AvgView FROM posts WHERE ViewCount IS NOT NULL) SELECT COUNT(*) FROM posts, AverageView WHERE posts.ViewCount > AverageView.AvgView;",
        "SELECT COUNT(Id) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);",
        "WITH AvgViews AS (SELECT AVG(ViewCount) AS average FROM posts WHERE ViewCount IS NOT NULL) SELECT COUNT(Id) FROM posts WHERE ViewCount > (SELECT average FROM AvgViews);",
        "SELECT COUNT(*) FROM posts WHERE ViewCount IS NOT NULL AND ViewCount > (SELECT AVG(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);",
        "SELECT COUNT(*) FROM posts p WHERE p.ViewCount > (SELECT AVG(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);",
        "WITH AverageCalc AS (SELECT AVG(ViewCount) AS AvgValue FROM posts WHERE ViewCount IS NOT NULL) SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AvgValue FROM AverageCalc);",
        "SELECT COUNT(*) FROM posts WHERE ViewCount IS NOT NULL AND ViewCount > (SELECT AVG(ViewCount) AS AverageViews FROM posts WHERE ViewCount IS NOT NULL);",
        "SELECT COUNT(Id) FROM posts WHERE ViewCount IS NOT NULL AND ViewCount > (SELECT AVG(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);",
        "WITH AvgViewCount AS (SELECT AVG(ViewCount) AS AvgView FROM posts WHERE ViewCount IS NOT NULL) SELECT COUNT(Id) FROM posts WHERE ViewCount > (SELECT AvgView FROM AvgViewCount);"
      ]
    ]
  },
  {
    "id": 687,
    "db_id": "codebase_community",
    "nlq": "How many comments were added to the post with the highest score?",
    "gold": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
    "evidence": "the highest score refers to MAX(Score);",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts));",
        "SELECT COUNT(c.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts);",
        "WITH HighestScore AS (SELECT MAX(Score) AS Score FROM posts) SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE Score = (SELECT Score FROM HighestScore));",
        "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts p WHERE p.Score = (SELECT MAX(Score) FROM posts p));",
        "SELECT COUNT(c.Id) AS CommentCount FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts);",
        "WITH MaxScorePost AS (SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts)) SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM MaxScorePost);",
        "SELECT COUNT(*) FROM comments c WHERE c.PostId = (SELECT p.Id FROM posts p WHERE p.Score = (SELECT MAX(Score) FROM posts));",
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1);",
        "WITH TopScore AS (SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts)) SELECT COUNT(*) FROM comments c JOIN TopScore ts ON c.PostId = ts.Id;",
        "SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts));"
      ]
    ]
  },
  {
    "id": 688,
    "db_id": "codebase_community",
    "nlq": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.",
    "gold": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
    "evidence": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;",
        "SELECT COUNT(Id) AS NumberOfPosts FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND IFNULL(CommentCount, 0) = 0;",
        "SELECT COUNT(*) FROM posts p WHERE p.ViewCount > 35000 AND p.CommentCount = 0;",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND COALESCE(CommentCount, 0) = 0;",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND (CommentCount IS NULL OR CommentCount = 0);",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0 AND ParentId IS NOT NULL;",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0 AND ParentId IS NULL;",
        "SELECT COUNT(*) FROM (SELECT * FROM posts WHERE ViewCount > 35000) AS FilteredPosts WHERE CommentCount = 0;",
        "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0 AND Id IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 690,
    "db_id": "codebase_community",
    "nlq": "Identify the latest badge awarded to the user with the display name Emmett.",
    "gold": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "infer_predictions": [
      [
        "SELECT T2.Name FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Emmett' ORDER BY T2.Date DESC LIMIT 1",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1",
        "SELECT B.Name FROM badges B INNER JOIN users U ON B.UserId = U.Id WHERE U.DisplayName = 'Emmett' ORDER BY B.Date DESC LIMIT 1",
        "SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC FETCH FIRST 1 ROW ONLY",
        "SELECT TOP 1 Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') AND Date = (SELECT MAX(Date) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett'))",
        "SELECT Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Emmett' ORDER BY badges.Date DESC LIMIT 1",
        "SELECT Name FROM (SELECT Name, ROW_NUMBER() OVER (ORDER BY Date DESC) AS rn FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett')) WHERE rn = 1",
        "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1",
        "SELECT Name FROM badges, users WHERE badges.UserId = users.Id AND users.DisplayName = 'Emmett' ORDER BY badges.Date DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 691,
    "db_id": "codebase_community",
    "nlq": "Identify the number of adult users who have cast over 5000 upvotes.",
    "gold": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
    "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;",
        "SELECT COUNT(Id) AS AdultUsersWithOver5000Upvotes FROM users WHERE Age >= 19 AND Age <= 65 AND UpVotes > 5000;",
        "SELECT COUNT(*) FROM users WHERE Age > 18 AND Age < 66 AND UpVotes > 5000;",
        "WITH FilteredUsers AS (SELECT * FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000) SELECT COUNT(*) FROM FilteredUsers;",
        "SELECT COUNT(Id) FROM users WHERE (Age BETWEEN 19 AND 65) AND (UpVotes > 5000);",
        "SELECT COUNT(*) FROM users WHERE Age >= 19 AND Age <= 65 AND UpVotes > 5000;",
        "SELECT COUNT(*) FROM users WHERE Age IN (SELECT Age FROM users WHERE Age BETWEEN 19 AND 65) AND UpVotes > 5000;",
        "SELECT COUNT(*) FROM users u WHERE u.Age BETWEEN 19 AND 65 AND u.UpVotes > 5000;",
        "SELECT COUNT(*) FROM users WHERE (Age BETWEEN 19 AND 65) AND (UpVotes > 5000);",
        "WITH AdultUsers AS (SELECT Id FROM users WHERE Age BETWEEN 19 AND 65) SELECT COUNT(*) FROM AdultUsers WHERE UpVotes > 5000;"
      ]
    ]
  },
  {
    "id": 692,
    "db_id": "codebase_community",
    "nlq": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "gold": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "infer_predictions": [
      [
        "SELECT (julianday(T2.Date) - julianday(T1.CreationDate)) AS DaysTaken FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon';",
        "SELECT (strftime('%s', T2.Date) - strftime('%s', T1.CreationDate)) / 86400.0 AS DaysTaken FROM users T1 INNER JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon';",
        "SELECT (julianday(T2.Date) - julianday(T1.CreationDate)) * 24 * 60 AS MinutesTaken FROM users T1, badges T2 WHERE T1.Id = T2.UserId AND T1.DisplayName = 'Zolomon';",
        "SELECT (julianday(T2.Date) - julianday(T1.CreationDate)) * 24 AS HoursTaken FROM users AS T1 JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon';",
        "SELECT (CAST(strftime('%s', T2.Date) AS INTEGER) - CAST(strftime('%s', T1.CreationDate) AS INTEGER)) / 86400 AS DaysTaken FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon';",
        "SELECT (julianday(T2.Date) - julianday(T1.CreationDate)) AS DaysTaken FROM users T1 LEFT JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon';",
        "SELECT (julianday(T2.Date) - julianday(T1.CreationDate)) AS DaysTaken FROM users T1 INNER JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon';",
        "SELECT (julianday(T2.Date) - julianday(T1.CreationDate)) AS DaysTaken FROM users T1 CROSS JOIN badges T2 WHERE T1.Id = T2.UserId AND T1.DisplayName = 'Zolomon';",
        "SELECT (julianday(T2.Date) - julianday(T1.CreationDate)) AS DaysTaken FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId AND T1.DisplayName = 'Zolomon';",
        "SELECT (julianday(T2.Date) - julianday(T1.CreationDate)) AS DaysTaken FROM users T1 JOIN badges T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon' AND T2.Date IS NOT NULL AND T1.CreationDate IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 693,
    "db_id": "codebase_community",
    "nlq": "Identify the number of posts and comments left by the user, who has the latest created user account.",
    "gold": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1",
    "evidence": "the latest created user account refers to MAX(CreationDate);",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT P.Id) AS NumberOfPosts, COUNT(DISTINCT C.Id) AS NumberOfComments FROM users U JOIN posts P ON U.Id = P.OwnerUserId JOIN comments C ON U.Id = C.UserId WHERE U.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = U.Id) AS NumberOfPosts, (SELECT COUNT(*) FROM comments WHERE UserId = U.Id) AS NumberOfComments FROM users U WHERE U.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "WITH LatestUser AS (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users)) SELECT COUNT(P.Id) AS NumberOfPosts, COUNT(C.Id) AS NumberOfComments FROM LatestUser LU LEFT JOIN posts P ON LU.Id = P.OwnerUserId LEFT JOIN comments C ON LU.Id = C.UserId",
        "SELECT COUNT(P.Id), COUNT(C.Id) FROM users U LEFT JOIN posts P ON U.Id = P.OwnerUserId LEFT JOIN comments C ON U.Id = C.UserId WHERE U.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "SELECT (SELECT COUNT(*) FROM posts P WHERE P.OwnerUserId = (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users))) AS NumberOfPosts, (SELECT COUNT(*) FROM comments C WHERE C.UserId = (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users))) AS NumberOfComments",
        "WITH MaxDateUser AS (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users)) SELECT COUNT(posts.Id) AS NumberOfPosts, COUNT(comments.Id) AS NumberOfComments FROM MaxDateUser JOIN posts ON MaxDateUser.Id = posts.OwnerUserId JOIN comments ON MaxDateUser.Id = comments.UserId",
        "SELECT COUNT(posts.Id) AS NumberOfPosts, COUNT(comments.Id) AS NumberOfComments FROM users JOIN posts ON users.Id = posts.OwnerUserId JOIN comments ON users.Id = comments.UserId WHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users)",
        "SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1)) AS NumberOfPosts, (SELECT COUNT(*) FROM comments WHERE UserId = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1)) AS NumberOfComments",
        "WITH RecentUser AS (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users)) SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM RecentUser)) AS NumberOfPosts, (SELECT COUNT(*) FROM comments WHERE UserId IN (SELECT Id FROM RecentUser)) AS NumberOfComments",
        "SELECT COUNT(P.Id) AS NumberOfPosts, COUNT(C.Id) AS NumberOfComments FROM (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users)) AS LatestUser JOIN posts P ON LatestUser.Id = P.OwnerUserId JOIN comments C ON LatestUser.Id = C.UserId"
      ]
    ]
  },
  {
    "id": 695,
    "db_id": "codebase_community",
    "nlq": "How many users were awarded with 'Citizen Patrol' badge?",
    "gold": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'",
    "evidence": "Citizen Patrol' is the name of the badge;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol';",
        "SELECT COUNT(DISTINCT b.UserId) FROM badges b WHERE b.Name = 'Citizen Patrol';",
        "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers FROM badges WHERE Name = 'Citizen Patrol';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name LIKE 'Citizen Patrol';",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol' AND UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT b.UserId) FROM badges AS b WHERE b.Name = 'Citizen Patrol' AND b.UserId IS NOT NULL;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol' GROUP BY Name;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol' AND UserId > 0;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol' AND UserId IS NOT NULL GROUP BY Name;",
        "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol' AND UserId IS NOT NULL AND Name IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 696,
    "db_id": "codebase_community",
    "nlq": "Count the number of posts with a tag specified as 'careers'.",
    "gold": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
    "evidence": "tag specified as 'careers' refers to TagName = 'careers';",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%'",
        "SELECT COUNT(posts.Id) AS NumberOfPosts FROM posts WHERE posts.Tags LIKE '%careers%'",
        "SELECT COUNT(*) FROM posts T1 WHERE EXISTS (SELECT 1 FROM tags T2 WHERE T2.TagName = 'careers' AND T1.Tags LIKE '%' || T2.TagName || '%')",
        "SELECT COUNT(DISTINCT T1.Id) FROM posts T1 JOIN tags T2 ON T1.Tags LIKE '%' || T2.TagName || '%' WHERE T2.TagName = 'careers'",
        "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%' AND Tags IS NOT NULL",
        "SELECT COUNT(*) FROM posts WHERE INSTR(Tags, 'careers') > 0",
        "SELECT COUNT(*) FROM posts WHERE Tags GLOB '*careers*'",
        "SELECT COUNT(*) FROM posts WHERE Tags MATCH 'careers'",
        "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%' AND Tags NOT LIKE '%careers %' AND Tags NOT LIKE '% careers%'",
        "SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%' AND Tags NOT LIKE '%careers %' AND Tags NOT LIKE '% careers%' AND Tags NOT LIKE '% careers %'"
      ]
    ]
  },
  {
    "id": 697,
    "db_id": "codebase_community",
    "nlq": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "gold": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT U.Reputation, P.ViewCount FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE U.DisplayName = 'Jarrod Dixon' AND P.ViewCount IS NOT NULL;",
        "SELECT Reputation, ViewCount FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE DisplayName = 'Jarrod Dixon' AND posts.ViewCount IS NOT NULL;",
        "SELECT users.Reputation, posts.ViewCount FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Jarrod Dixon' AND posts.ViewCount IS NOT NULL;",
        "SELECT Reputation, ViewCount FROM users, posts WHERE users.Id = posts.OwnerUserId AND DisplayName = 'Jarrod Dixon' AND ViewCount IS NOT NULL;",
        "SELECT U.Reputation, P.ViewCount FROM users AS U, posts AS P WHERE U.Id = P.OwnerUserId AND U.DisplayName = 'Jarrod Dixon' AND P.ViewCount IS NOT NULL;",
        "SELECT U.Reputation, P.ViewCount FROM users U, posts P WHERE U.Id = P.OwnerUserId AND U.DisplayName = 'Jarrod Dixon' AND P.ViewCount IS NOT NULL;",
        "SELECT U.Reputation, P.ViewCount FROM users U LEFT JOIN posts P ON U.Id = P.OwnerUserId WHERE U.DisplayName = 'Jarrod Dixon' AND P.ViewCount IS NOT NULL;",
        "SELECT U.Reputation, P.ViewCount FROM users U RIGHT JOIN posts P ON U.Id = P.OwnerUserId WHERE U.DisplayName = 'Jarrod Dixon' AND P.ViewCount IS NOT NULL;",
        "SELECT U.Reputation, P.ViewCount FROM users U CROSS JOIN posts P WHERE U.Id = P.OwnerUserId AND U.DisplayName = 'Jarrod Dixon' AND P.ViewCount IS NOT NULL;",
        "SELECT Reputation, ViewCount FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE DisplayName = 'Jarrod Dixon' AND posts.ViewCount > 0;"
      ]
    ]
  },
  {
    "id": 698,
    "db_id": "codebase_community",
    "nlq": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "gold": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT (SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS CommentCount, (SELECT AnswerCount FROM posts WHERE Title = 'Clustering 1D data') AS AnswerCount;",
        "SELECT COUNT(c.Id) AS CommentCount, p.AnswerCount FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Clustering 1D data' GROUP BY p.Id;",
        "SELECT (SELECT COUNT(*) FROM comments WHERE PostId = p.Id) AS CommentCount, p.AnswerCount FROM posts p WHERE p.Title = 'Clustering 1D data';",
        "SELECT COUNT(c.Id) AS CommentCount, (SELECT AnswerCount FROM posts WHERE Title = 'Clustering 1D data') AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data';",
        "SELECT (SELECT COUNT(*) FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data') AS CommentCount, (SELECT AnswerCount FROM posts WHERE Title = 'Clustering 1D data') AS AnswerCount;",
        "SELECT COUNT(c.Id) AS CommentCount, p.AnswerCount FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Clustering 1D data';",
        "SELECT (SELECT COUNT(*) FROM comments WHERE PostId = p.Id) AS CommentCount, (SELECT AnswerCount FROM posts WHERE Title = 'Clustering 1D data') FROM posts p WHERE p.Title = 'Clustering 1D data';",
        "SELECT COUNT(c.Id) AS CommentCount, p.AnswerCount FROM posts p LEFT OUTER JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Clustering 1D data' GROUP BY p.Id;",
        "SELECT (SELECT COUNT(*) FROM comments WHERE PostId = p.Id) AS CommentCount, p.AnswerCount FROM posts p WHERE p.Title = 'Clustering 1D data';",
        "SELECT COUNT(c.Id) AS CommentCount, (SELECT AnswerCount FROM posts WHERE Title = 'Clustering 1D data') AS AnswerCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Clustering 1D data';"
      ]
    ]
  },
  {
    "id": 699,
    "db_id": "codebase_community",
    "nlq": "When did the user known as 'IrishStat' create his or her account?",
    "gold": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "infer_predictions": [
      [
        "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';",
        "SELECT u.CreationDate FROM users u WHERE u.DisplayName = 'IrishStat';",
        "SELECT CreationDate FROM users WHERE DisplayName LIKE 'IrishStat';",
        "SELECT T1.CreationDate FROM users T1 WHERE T1.DisplayName = 'IrishStat';",
        "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat' AND CreationDate IS NOT NULL;",
        "SELECT CreationDate FROM users WHERE DisplayName COLLATE NOCASE = 'irishstat';",
        "SELECT (SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat');",
        "SELECT CreationDate FROM users WHERE DisplayName IN ('IrishStat');",
        "SELECT CreationDate FROM users WHERE TRIM(DisplayName) = 'IrishStat';",
        "SELECT CreationDate FROM users WHERE UPPER(DisplayName) = UPPER('IrishStat');"
      ]
    ]
  },
  {
    "id": 700,
    "db_id": "codebase_community",
    "nlq": "Identify the number of posts that offer a bounty amount over 30.",
    "gold": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30",
    "evidence": "bounty amount over 30 refers to BountyAmount > = 30;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;",
        "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 702,
    "db_id": "codebase_community",
    "nlq": "How many posts have a score less than 20?",
    "gold": "SELECT COUNT(id) FROM posts WHERE Score < 20",
    "evidence": "score less than 20 refers to Score < 20;",
    "infer_predictions": [
      [
        "SELECT COUNT(Id) FROM posts WHERE Score < 20;",
        "SELECT COUNT(*) FROM posts WHERE Score < 20;",
        "SELECT COUNT(Id) AS NumberOfPosts FROM posts WHERE Score < 20;",
        "SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE Score < 20;",
        "SELECT COUNT(Id) FROM posts WHERE Score IS NOT NULL AND Score < 20;",
        "SELECT COUNT(*) FROM posts WHERE Score IS NOT NULL AND Score < 20;",
        "WITH FilteredPosts AS (SELECT Id FROM posts WHERE Score < 20) SELECT COUNT(Id) FROM FilteredPosts;",
        "WITH FilteredPosts AS (SELECT Id FROM posts WHERE Score < 20) SELECT COUNT(*) FROM FilteredPosts;",
        "SELECT COUNT(Id) FROM posts WHERE Score < 20 AND Score IS NOT NULL;",
        "SELECT COUNT(*) FROM posts WHERE Score < 20 AND Score IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 703,
    "db_id": "codebase_community",
    "nlq": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?",
    "gold": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15",
    "evidence": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;",
        "SELECT COUNT(Id) FROM tags WHERE Id < 15 AND Count <= 20;",
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20 AND Count IS NOT NULL;",
        "SELECT COUNT(*) FROM tags t WHERE t.Id < 15 AND t.Count <= 20;",
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND (Count <= 20);",
        "SELECT COUNT(*) FROM tags t WHERE t.Id < 15 AND t.Count <= 20 AND t.Count IS NOT NULL;",
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count IS NOT NULL AND Count <= 20;",
        "SELECT COUNT(*) FROM tags WHERE (Id < 15) AND (Count <= 20);",
        "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20 AND Count IS NOT NULL;",
        "SELECT COUNT(*) FROM tags WHERE (Id < 15) AND (Count <= 20) AND Count IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 704,
    "db_id": "codebase_community",
    "nlq": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "gold": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "infer_predictions": [
      [
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';",
        "SELECT t.ExcerptPostId, t.WikiPostId FROM tags AS t WHERE t.TagName = 'sample';",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName LIKE 'sample';",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample' AND ExcerptPostId IS NOT NULL AND WikiPostId IS NOT NULL;",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE LOWER(TagName) = 'sample';",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName IN ('sample');",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample' ORDER BY ExcerptPostId, WikiPostId;",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample' LIMIT 1;",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName COLLATE NOCASE = 'sample';",
        "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample' AND ExcerptPostId IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 705,
    "db_id": "codebase_community",
    "nlq": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "gold": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
    "evidence": "Text = 'fine, you win :)';",
    "infer_predictions": [
      [
        "SELECT U.Reputation, U.UpVotes FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Text = 'fine, you win :)' AND U.Reputation IS NOT NULL AND U.UpVotes IS NOT NULL;",
        "SELECT Reputation, UpVotes FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'fine, you win :)') AND Reputation IS NOT NULL AND UpVotes IS NOT NULL;",
        "SELECT users.Reputation, users.UpVotes FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'fine, you win :)' AND users.Reputation IS NOT NULL AND users.UpVotes IS NOT NULL;",
        "SELECT T2.Reputation, T2.UpVotes FROM comments T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)' AND T2.Reputation IS NOT NULL AND T2.UpVotes IS NOT NULL;",
        "SELECT Reputation, UpVotes FROM users WHERE Id = (SELECT UserId FROM comments WHERE Text = 'fine, you win :)' LIMIT 1) AND Reputation IS NOT NULL AND UpVotes IS NOT NULL;",
        "SELECT U.Reputation, U.UpVotes FROM users U, comments C WHERE U.Id = C.UserId AND C.Text = 'fine, you win :)' AND U.Reputation IS NOT NULL AND U.UpVotes IS NOT NULL;",
        "SELECT Reputation, UpVotes FROM users WHERE Id = (SELECT UserId FROM comments WHERE Text = 'fine, you win :)' AND UserId IS NOT NULL) AND Reputation IS NOT NULL AND UpVotes IS NOT NULL;",
        "SELECT U.Reputation, U.UpVotes FROM users U WHERE EXISTS (SELECT 1 FROM comments C WHERE C.UserId = U.Id AND C.Text = 'fine, you win :)') AND U.Reputation IS NOT NULL AND U.UpVotes IS NOT NULL;",
        "SELECT Reputation, UpVotes FROM users JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'fine, you win :)' AND users.Reputation IS NOT NULL AND users.UpVotes IS NOT NULL;",
        "SELECT U.Reputation, U.UpVotes FROM users U WHERE U.Id IN (SELECT UserId FROM comments WHERE Text = 'fine, you win :)' AND UserId IS NOT NULL) AND U.Reputation IS NOT NULL AND U.UpVotes IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 706,
    "db_id": "codebase_community",
    "nlq": "Give the texts commented on the post about linear regression.",
    "gold": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'",
    "evidence": "about linear regression refers to Title contains 'linear regression'",
    "infer_predictions": [
      [
        "SELECT C.Text FROM comments C JOIN posts P ON C.PostId = P.Id WHERE P.Title LIKE '%linear regression%'",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%linear regression%')",
        "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.Title LIKE '%linear regression%'",
        "SELECT C.Text FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.Title LIKE '%linear regression%'",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%linear regression%')",
        "SELECT C.Text FROM comments C, posts P WHERE C.PostId = P.Id AND P.Title LIKE '%linear regression%'",
        "SELECT comments.Text FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.Title LIKE '%linear regression%'",
        "SELECT Text FROM comments WHERE EXISTS (SELECT 1 FROM posts WHERE posts.Id = comments.PostId AND posts.Title LIKE '%linear regression%')",
        "SELECT C.Text FROM comments C JOIN posts P ON C.PostId = P.Id WHERE P.Title LIKE '%linear regression%'",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%linear regression%')"
      ]
    ]
  },
  {
    "id": 707,
    "db_id": "codebase_community",
    "nlq": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "gold": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
    "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);",
    "infer_predictions": [
      [
        "SELECT T2.Text FROM posts T1 JOIN comments T2 ON T1.Id = T2.PostId WHERE T1.ViewCount BETWEEN 100 AND 150 ORDER BY T2.Score DESC LIMIT 1;",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount >= 100 AND ViewCount <= 150) ORDER BY Score DESC LIMIT 1;",
        "SELECT c.Text FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150) ORDER BY Score DESC FETCH FIRST 1 ROW ONLY;",
        "SELECT TOP 1 c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC;",
        "SELECT Text FROM (SELECT Text, Score FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150)) ORDER BY Score DESC LIMIT 1;",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount > 99 AND ViewCount < 151) ORDER BY Score DESC LIMIT 1;",
        "SELECT c.Text FROM comments c, posts p WHERE c.PostId = p.Id AND p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;",
        "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150) ORDER BY Score DESC LIMIT 1;",
        "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount >= 100 AND p.ViewCount <= 150 ORDER BY c.Score DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 708,
    "db_id": "codebase_community",
    "nlq": "List the creation date and age of the user that commented with webiste.",
    "gold": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'",
    "evidence": "commented with webiste refers to the value contains 'http://'",
    "infer_predictions": [
      [
        "SELECT U.CreationDate, U.Age FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Text LIKE '%http://%'",
        "SELECT U.CreationDate, U.Age FROM users U INNER JOIN comments C ON U.Id = C.UserId WHERE INSTR(C.Text, 'http://') > 0",
        "SELECT U.CreationDate, U.Age FROM users U, comments C WHERE U.Id = C.UserId AND C.Text LIKE '%http://%'",
        "SELECT U.CreationDate, U.Age FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Text LIKE '%http://%'",
        "SELECT U.CreationDate, U.Age FROM users U WHERE U.Id IN (SELECT UserId FROM comments WHERE Text LIKE '%http://%')",
        "SELECT U.CreationDate, U.Age FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Text LIKE '%http://' AND C.Text IS NOT NULL",
        "SELECT U.CreationDate, U.Age FROM users U WHERE U.Id IN (SELECT UserId FROM comments WHERE Text LIKE '%http://%' AND Text IS NOT NULL)",
        "SELECT U.CreationDate, U.Age FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Text LIKE '%http://%' AND U.CreationDate IS NOT NULL AND U.Age IS NOT NULL",
        "SELECT U.CreationDate, U.Age FROM users U INNER JOIN comments C ON U.Id = C.UserId WHERE POSITION('http://' IN C.Text) > 0"
      ]
    ]
  },
  {
    "id": 709,
    "db_id": "codebase_community",
    "nlq": "In comments with 0 score, how many of the posts have view count lower than 5?",
    "gold": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0",
    "evidence": "view count lower than 5 refers to ViewCount < 5;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;",
        "SELECT COUNT(DISTINCT PostId) FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE Score = 0 AND ViewCount < 5;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments T1, posts T2 WHERE T1.PostId = T2.Id AND T1.Score = 0 AND T2.ViewCount < 5;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id AND T1.Score = 0 WHERE T2.ViewCount < 5;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 LEFT JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount IS NOT NULL AND T2.ViewCount < 5;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND COALESCE(T2.ViewCount, 100) < 5;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND IFNULL(T2.ViewCount, 100) < 5;",
        "SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND (T2.ViewCount < 5 OR T2.ViewCount IS NULL);"
      ]
    ]
  },
  {
    "id": 710,
    "db_id": "codebase_community",
    "nlq": "In posts with 1 comment, how many of the comments have 0 score?",
    "gold": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "evidence": "in posts with 1 comment refers to CommentCount = 1;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CommentCount = 1) AND Score = 0;",
        "SELECT COUNT(c.Id) FROM comments AS c JOIN posts AS p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;",
        "SELECT COUNT(*) FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;",
        "SELECT COUNT(comment.Id) FROM comments comment, posts post WHERE comment.PostId = post.Id AND post.CommentCount = 1 AND comment.Score = 0;",
        "SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1);",
        "SELECT COUNT(*) FROM comments c WHERE c.Score = 0 AND EXISTS (SELECT 1 FROM posts p WHERE p.Id = c.PostId AND p.CommentCount = 1);",
        "SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1);",
        "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;",
        "SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1);",
        "SELECT COUNT(*) FROM comments c INNER JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;"
      ]
    ]
  },
  {
    "id": 718,
    "db_id": "superhero",
    "nlq": "How many superheroes have the super power of \"Super Strength\"?",
    "gold": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
    "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength';",
        "SELECT COUNT(DISTINCT hero_id) FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength');",
        "SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power T1 INNER JOIN superpower T2 ON T1.power_id = T2.id AND T2.power_name = 'Super Strength';",
        "SELECT COUNT(DISTINCT hero_id) FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength');",
        "SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power T1, superpower T2 WHERE T1.power_id = T2.id AND T2.power_name = 'Super Strength';",
        "SELECT COUNT(DISTINCT hero_id) FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
        "SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name LIKE 'Super Strength';",
        "SELECT COUNT(DISTINCT hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id AND superpower.power_name = 'Super Strength';",
        "SELECT COUNT(DISTINCT hero_id) FROM hero_power, superpower WHERE hero_power.power_id = superpower.id AND superpower.power_name = 'Super Strength';",
        "SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength' AND T1.hero_id IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 719,
    "db_id": "superhero",
    "nlq": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength')) AND height_cm > 200;",
        "SELECT COUNT(DISTINCT T3.id) FROM superhero T3 JOIN hero_power T2 ON T3.id = T2.hero_id JOIN superpower T1 ON T2.power_id = T1.id WHERE T1.power_name = 'Super Strength' AND T3.height_cm > 200;",
        "SELECT COUNT(*) FROM (SELECT T3.id FROM superhero T3 INNER JOIN hero_power T2 ON T3.id = T2.hero_id INNER JOIN superpower T1 ON T2.power_id = T1.id WHERE T1.power_name = 'Super Strength' AND T3.height_cm > 200);",
        "SELECT COUNT(hero_id) FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength') AND hero_id IN (SELECT id FROM superhero WHERE height_cm > 200);",
        "SELECT COUNT(*) FROM superhero WHERE id IN (SELECT hero_id FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength') AND height_cm > 200;",
        "SELECT COUNT(*) FROM superhero T3 WHERE EXISTS (SELECT 1 FROM hero_power T2 JOIN superpower T1 ON T2.power_id = T1.id WHERE T1.power_name = 'Super Strength' AND T2.hero_id = T3.id) AND T3.height_cm > 200;",
        "SELECT COUNT(*) FROM (SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200);",
        "SELECT COUNT(*) FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength')) AND height_cm > 200;",
        "SELECT COUNT(*) FROM superhero AS T3 WHERE T3.height_cm > 200 AND EXISTS (SELECT * FROM hero_power AS T2 JOIN superpower AS T1 ON T2.power_id = T1.id WHERE T1.power_name = 'Super Strength' AND T2.hero_id = T3.id);",
        "SELECT COUNT(*) FROM superhero WHERE height_cm > 200 AND id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength'));"
      ]
    ]
  },
  {
    "id": 720,
    "db_id": "superhero",
    "nlq": "Please list the full names of all the superheroes with over 15 super powers.",
    "gold": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
    "evidence": "15 super powers refers to COUNT(full_name) > 15",
    "infer_predictions": [
      [
        "SELECT s.full_name FROM superhero s JOIN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15) hp ON s.id = hp.hero_id;",
        "SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(*) > 15);",
        "SELECT s.full_name FROM superhero s WHERE s.id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15);",
        "SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15);",
        "SELECT s.full_name FROM superhero s INNER JOIN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(*) > 15) AS hp ON s.id = hp.hero_id;",
        "SELECT s.full_name FROM superhero s WHERE EXISTS (SELECT 1 FROM hero_power hp WHERE hp.hero_id = s.id GROUP BY hp.hero_id HAVING COUNT(hp.hero_id) > 15);",
        "SELECT s.full_name FROM superhero s JOIN (SELECT hero_id, COUNT(*) AS power_count FROM hero_power GROUP BY hero_id HAVING power_count > 15) hp ON s.id = hp.hero_id;",
        "SELECT s.full_name FROM superhero s, (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15) hp WHERE s.id = hp.hero_id;",
        "SELECT s.full_name FROM superhero s WHERE s.id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(*) > 15);",
        "SELECT s.full_name FROM superhero s INNER JOIN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15) hp ON s.id = hp.hero_id;"
      ]
    ]
  },
  {
    "id": 721,
    "db_id": "superhero",
    "nlq": "How many superheroes have blue eyes?",
    "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';",
        "SELECT COUNT(superhero.id) AS NumberOfBlueEyedSuperheroes FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';",
        "SELECT COUNT(*) FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue';",
        "SELECT COUNT(*) FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue');",
        "WITH BlueEyed AS (SELECT * FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue')) SELECT COUNT(*) FROM BlueEyed;",
        "SELECT COUNT(DISTINCT superhero.id) FROM superhero, colour WHERE superhero.eye_colour_id = colour.id AND colour.colour = 'Blue';",
        "SELECT COUNT(*) FROM superhero WHERE EXISTS (SELECT 1 FROM colour WHERE superhero.eye_colour_id = colour.id AND colour.colour = 'Blue');",
        "SELECT COUNT(superhero.id) FROM superhero s INNER JOIN colour c ON s.eye_colour_id = c.id AND c.colour = 'Blue';",
        "SELECT COUNT(*) FROM (SELECT superhero.id FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue') AS BlueEyedHeroes;",
        "SELECT COUNT(*) FROM superhero s WHERE s.eye_colour_id IN (SELECT c.id FROM colour c WHERE c.colour = 'Blue');"
      ]
    ]
  },
  {
    "id": 722,
    "db_id": "superhero",
    "nlq": "What is the colour of Apocalypse's skin?",
    "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "infer_predictions": [
      [
        "SELECT T2.colour FROM superhero T1 JOIN colour T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse';",
        "SELECT colour FROM colour WHERE id IN (SELECT skin_colour_id FROM superhero WHERE superhero_name = 'Apocalypse');",
        "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse';",
        "SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';",
        "SELECT T2.colour FROM superhero T1, colour T2 WHERE T1.skin_colour_id = T2.id AND T1.superhero_name = 'Apocalypse';",
        "SELECT T2.colour FROM superhero T1 LEFT JOIN colour T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse';",
        "SELECT T2.colour FROM superhero T1 RIGHT JOIN colour T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse';",
        "SELECT T2.colour FROM superhero T1 CROSS JOIN colour T2 WHERE T1.skin_colour_id = T2.id AND T1.superhero_name = 'Apocalypse';",
        "SELECT T2.colour FROM superhero T1 JOIN colour T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse' AND T1.skin_colour_id IS NOT NULL;",
        "SELECT T2.colour FROM superhero T1 JOIN colour T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse' AND T2.id IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 723,
    "db_id": "superhero",
    "nlq": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility';",
        "SELECT COUNT(DISTINCT hero_id) FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue')) AND power_id IN (SELECT id FROM superpower WHERE power_name = 'Agility');",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT T1.id FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility') AS UniqueHeroes;",
        "SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1, colour AS T2, hero_power AS T3, superpower AS T4 WHERE T1.eye_colour_id = T2.id AND T1.id = T3.hero_id AND T3.power_id = T4.id AND T2.colour = 'Blue' AND T4.power_name = 'Agility';",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id, hero_power AS T3 JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T1.id = T3.hero_id AND T2.colour = 'Blue' AND T4.power_name = 'Agility';",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id JOIN hero_power T3 ON T1.id = T3.hero_id JOIN superpower T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility';",
        "SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
        "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id LEFT JOIN hero_power AS T3 ON T1.id = T3.hero_id LEFT JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility';"
      ]
    ]
  },
  {
    "id": 724,
    "db_id": "superhero",
    "nlq": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "infer_predictions": [
      [
        "SELECT superhero_name FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond';",
        "SELECT T1.superhero_name FROM superhero T1, colour T2, colour T3 WHERE T1.eye_colour_id = T2.id AND T1.hair_colour_id = T3.id AND T2.colour = 'Blue' AND T3.colour = 'Blond';",
        "SELECT superhero_name FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id IN (SELECT id FROM colour WHERE colour = 'Blond');",
        "SELECT superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id AND colour.colour = 'Blue' INNER JOIN colour AS colour2 ON superhero.hair_colour_id = colour2.id AND colour2.colour = 'Blond';",
        "SELECT superhero_name FROM superhero WHERE EXISTS (SELECT 1 FROM colour WHERE superhero.eye_colour_id = colour.id AND colour = 'Blue') AND EXISTS (SELECT 1 FROM colour WHERE superhero.hair_colour_id = colour.id AND colour = 'Blond');",
        "SELECT T1.superhero_name FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id AND T2.colour = 'Blue' JOIN colour T3 ON T1.hair_colour_id = T3.id AND T3.colour = 'Blond';",
        "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');",
        "SELECT T1.superhero_name FROM superhero T1 JOIN colour T2 ON T1.eye_colour_id = T2.id JOIN colour T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond';",
        "SELECT superhero_name FROM superhero AS T1 WHERE (SELECT colour FROM colour WHERE id = T1.eye_colour_id) = 'Blue' AND (SELECT colour FROM colour WHERE id = T1.hair_colour_id) = 'Blond';",
        "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');"
      ]
    ]
  },
  {
    "id": 725,
    "db_id": "superhero",
    "nlq": "How many superheroes are published by Marvel Comics?",
    "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
    "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM superhero T1 JOIN publisher T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics';",
        "SELECT COUNT(T1.id) AS total_superheroes FROM superhero T1 INNER JOIN publisher T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics';",
        "SELECT COUNT(superhero.id) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id AND publisher.publisher_name = 'Marvel Comics';",
        "SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');",
        "SELECT COUNT(superhero.id) FROM superhero, publisher WHERE superhero.publisher_id = publisher.id AND publisher.publisher_name = 'Marvel Comics';",
        "SELECT COUNT(*) FROM (SELECT * FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics') AS MarvelHeroes;",
        "SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
        "SELECT COUNT(*) FROM superhero T1 LEFT JOIN publisher T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics';",
        "SELECT COUNT(*) FROM superhero WHERE EXISTS (SELECT 1 FROM publisher WHERE superhero.publisher_id = publisher.id AND publisher.publisher_name = 'Marvel Comics');",
        "SELECT COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';"
      ]
    ]
  },
  {
    "id": 726,
    "db_id": "superhero",
    "nlq": "Rank heroes published by Marvel Comics by their height in descending order.",
    "gold": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "infer_predictions": [
      [
        "SELECT T1.superhero_name FROM superhero T1 JOIN publisher T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AND T1.height_cm IS NOT NULL AND T1.height_cm > 0 ORDER BY T1.height_cm DESC;",
        "SELECT superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superhero.height_cm > 0 ORDER BY superhero.height_cm DESC;",
        "SELECT superhero_name FROM superhero, publisher WHERE superhero.publisher_id = publisher.id AND publisher.publisher_name = 'Marvel Comics' AND superhero.height_cm > 0 ORDER BY superhero.height_cm DESC;",
        "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AND T1.height_cm > 0 ORDER BY T1.height_cm DESC;",
        "SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Marvel Comics' AND height_cm IS NOT NULL ORDER BY height_cm DESC;",
        "SELECT T1.superhero_name FROM superhero T1, publisher T2 WHERE T1.publisher_id = T2.id AND T2.publisher_name = 'Marvel Comics' AND T1.height_cm > 0 ORDER BY T1.height_cm DESC;",
        "SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id AND publisher.publisher_name = 'Marvel Comics' WHERE superhero.height_cm IS NOT NULL ORDER BY superhero.height_cm DESC;",
        "SELECT superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id AND publisher.publisher_name = 'Marvel Comics' WHERE superhero.height_cm > 0 ORDER BY superhero.height_cm DESC;",
        "SELECT T1.superhero_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AND T1.height_cm IS NOT NULL ORDER BY T1.height_cm DESC;",
        "SELECT superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superhero.height_cm > 0 ORDER BY superhero.height_cm DESC;"
      ]
    ]
  },
  {
    "id": 727,
    "db_id": "superhero",
    "nlq": "Who is the publisher of Sauron?",
    "gold": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "infer_predictions": [
      [
        "SELECT T2.publisher_name FROM superhero T1 JOIN publisher T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron';",
        "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Sauron');",
        "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron';",
        "SELECT publisher.publisher_name FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Sauron';",
        "SELECT publisher_name FROM publisher WHERE id = (SELECT publisher_id FROM superhero WHERE superhero_name = 'Sauron');",
        "SELECT T2.publisher_name FROM superhero T1, publisher T2 WHERE T1.publisher_id = T2.id AND T1.superhero_name = 'Sauron';",
        "SELECT T2.publisher_name FROM superhero T1 INNER JOIN publisher T2 ON T1.publisher_id = T2.id AND T1.superhero_name = 'Sauron';",
        "SELECT publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id AND superhero.superhero_name = 'Sauron';",
        "SELECT T2.publisher_name FROM superhero T1 JOIN publisher T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name LIKE 'Sauron';",
        "SELECT publisher_name FROM publisher WHERE id = (SELECT publisher_id FROM superhero WHERE superhero_name LIKE 'Sauron');"
      ]
    ]
  },
  {
    "id": 730,
    "db_id": "superhero",
    "nlq": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "gold": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "infer_predictions": [
      [
        "SELECT T2.superhero_name FROM publisher T1 JOIN superhero T2 ON T1.id = T2.publisher_id JOIN hero_power T3 ON T2.id = T3.hero_id JOIN superpower T4 ON T3.power_id = T4.id WHERE T1.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength';",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength';",
        "SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength')) AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');",
        "SELECT SH.superhero_name FROM superhero AS SH JOIN publisher AS PB ON SH.publisher_id = PB.id JOIN hero_power AS HP ON SH.id = HP.hero_id JOIN superpower AS SP ON HP.power_id = SP.id WHERE PB.publisher_name = 'Marvel Comics' AND SP.power_name = 'Super Strength';",
        "SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength'));",
        "SELECT SH.superhero_name FROM superhero AS SH, publisher AS PB, hero_power AS HP, superpower AS SP WHERE SH.publisher_id = PB.id AND SH.id = HP.hero_id AND HP.power_id = SP.id AND PB.publisher_name = 'Marvel Comics' AND SP.power_name = 'Super Strength';",
        "SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher_name = 'Marvel Comics' AND power_name = 'Super Strength';",
        "SELECT superhero_name FROM superhero, publisher, hero_power, superpower WHERE superhero.publisher_id = publisher.id AND superhero.id = hero_power.hero_id AND hero_power.power_id = superpower.id AND publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength';",
        "SELECT superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Marvel Comics' AND superhero.id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength'));",
        "SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND id IN (SELECT hero_id FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength');"
      ]
    ]
  },
  {
    "id": 858,
    "db_id": "formula_1",
    "nlq": "Which country is the constructor which got 1 point in the race No. 24 from?",
    "gold": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1",
    "evidence": "race number refers to raceId;",
    "infer_predictions": [
      [
        "SELECT T4.country FROM races T1 JOIN constructorResults T2 ON T1.raceId = T2.raceId JOIN constructors T3 ON T2.constructorId = T3.constructorId JOIN circuits T4 ON T1.circuitId = T4.circuitId WHERE T1.raceId = 24 AND T2.points = 1",
        "SELECT country FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE raceId IN (SELECT raceId FROM constructorResults WHERE points = 1 AND raceId = 24))",
        "SELECT T4.country FROM races T1, constructorResults T2, constructors T3, circuits T4 WHERE T1.raceId = T2.raceId AND T2.constructorId = T3.constructorId AND T1.circuitId = T4.circuitId AND T1.raceId = 24 AND T2.points = 1",
        "SELECT country FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE raceId = (SELECT raceId FROM constructorResults WHERE points = 1 AND raceId = 24))",
        "SELECT T4.country FROM races AS T1 INNER JOIN constructorResults AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId INNER JOIN circuits AS T4 ON T1.circuitId = T4.circuitId WHERE T1.raceId = 24 AND T2.points = 1",
        "SELECT country FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE raceId = 24) AND circuitId IN (SELECT circuitId FROM races JOIN constructorResults ON races.raceId = constructorResults.raceId WHERE constructorResults.points = 1 AND races.raceId = 24)",
        "SELECT T4.country FROM races T1 INNER JOIN constructorResults T2 ON T1.raceId = T2.raceId INNER JOIN constructors T3 ON T2.constructorId = T3.constructorId INNER JOIN circuits T4 ON T1.circuitId = T4.circuitId WHERE T1.raceId = 24 AND T2.points = 1",
        "SELECT country FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE raceId = 24 AND raceId IN (SELECT raceId FROM constructorResults WHERE points = 1))",
        "SELECT T4.country FROM races T1 JOIN constructorResults T2 ON T1.raceId = T2.raceId JOIN constructors T3 ON T2.constructorId = T3.constructorId JOIN circuits T4 ON T1.circuitId = T4.circuitId WHERE T1.raceId = 24 AND T2.points = 1",
        "SELECT country FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE raceId = 24) AND EXISTS (SELECT 1 FROM constructorResults WHERE constructorResults.raceId = races.raceId AND constructorResults.points = 1)"
      ]
    ]
  },
  {
    "id": 859,
    "db_id": "formula_1",
    "nlq": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "gold": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
    "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "infer_predictions": [
      [
        "SELECT T2.q1 FROM drivers T1 JOIN qualifying T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Bruno' AND T1.surname = 'Senna' AND T2.raceId = 354;",
        "SELECT q1 FROM qualifying WHERE driverId IN (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354;",
        "SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354;",
        "SELECT q1 FROM qualifying AS Q JOIN drivers AS D ON Q.driverId = D.driverId WHERE D.forename = 'Bruno' AND D.surname = 'Senna' AND Q.raceId = 354;",
        "SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354;",
        "SELECT q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354;",
        "SELECT q1 FROM qualifying, drivers WHERE qualifying.driverId = drivers.driverId AND drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354;",
        "SELECT q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;",
        "SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354;",
        "SELECT q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354;"
      ]
    ]
  },
  {
    "id": 860,
    "db_id": "formula_1",
    "nlq": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
    "gold": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
    "evidence": "race number refers to raceId;",
    "infer_predictions": [
      [
        "SELECT T2.nationality FROM qualifying T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 355 AND T1.q2 = '0:01:40';",
        "SELECT nationality FROM drivers WHERE driverId IN (SELECT driverId FROM qualifying WHERE raceId = 355 AND q2 = '0:01:40');",
        "SELECT d.nationality FROM drivers d INNER JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 355 AND q.q2 = '0:01:40';",
        "SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 355 AND q2 = '0:01:40');",
        "SELECT T2.nationality FROM drivers T2, qualifying T1 WHERE T1.driverId = T2.driverId AND T1.raceId = 355 AND T1.q2 = '0:01:40';",
        "SELECT nationality FROM drivers d WHERE EXISTS (SELECT 1 FROM qualifying q WHERE q.driverId = d.driverId AND q.raceId = 355 AND q.q2 = '0:01:40');",
        "SELECT T2.nationality FROM qualifying T1 INNER JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 355 AND T1.q2 = '0:01:40';",
        "SELECT nationality FROM drivers WHERE driverId IN (SELECT driverId FROM qualifying WHERE raceId = 355 AND q2 = '0:01:40') LIMIT 1;",
        "SELECT T2.nationality FROM qualifying T1 LEFT JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 355 AND T1.q2 = '0:01:40';",
        "SELECT nationality FROM drivers WHERE EXISTS (SELECT * FROM qualifying WHERE driverId = drivers.driverId AND raceId = 355 AND q2 = '0:01:40');"
      ]
    ]
  },
  {
    "id": 861,
    "db_id": "formula_1",
    "nlq": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "gold": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "evidence": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
    "infer_predictions": [
      [
        "SELECT D.number FROM qualifying Q JOIN drivers D ON Q.driverId = D.driverId WHERE Q.raceId = 903 AND Q.q3 = '0:01:54';",
        "SELECT number FROM drivers WHERE driverId IN (SELECT driverId FROM qualifying WHERE raceId = 903 AND q3 = '0:01:54');",
        "SELECT number FROM drivers WHERE EXISTS (SELECT 1 FROM qualifying WHERE qualifying.driverId = drivers.driverId AND raceId = 903 AND q3 = '0:01:54');",
        "SELECT D.number FROM drivers D, qualifying Q WHERE D.driverId = Q.driverId AND Q.raceId = 903 AND Q.q3 = '0:01:54';",
        "SELECT number FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 903 AND q3 = '0:01:54' LIMIT 1);",
        "SELECT D.number FROM drivers D INNER JOIN qualifying Q ON D.driverId = Q.driverId WHERE Q.raceId = 903 AND Q.q3 = '0:01:54';",
        "SELECT number FROM drivers D WHERE EXISTS (SELECT * FROM qualifying Q WHERE Q.driverId = D.driverId AND Q.raceId = 903 AND Q.q3 = '0:01:54');",
        "SELECT number FROM drivers D JOIN qualifying Q ON D.driverId = Q.driverId AND Q.raceId = 903 AND Q.q3 = '0:01:54';",
        "SELECT D.number FROM qualifying Q, drivers D WHERE Q.driverId = D.driverId AND Q.raceId = 903 AND Q.q3 = '0:01:54';",
        "SELECT number FROM drivers WHERE driverId IN (SELECT driverId FROM qualifying WHERE raceId = 903 AND q3 LIKE '0:01:54');"
      ]
    ]
  },
  {
    "id": 862,
    "db_id": "formula_1",
    "nlq": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "gold": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
    "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL;",
        "SELECT COUNT(resultId) AS NonFinishers FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;",
        "SELECT COUNT(*) FROM results T1 JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Bahrain Grand Prix' AND T2.year = 2007 AND T1.time IS NULL;",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL;",
        "SELECT COUNT(*) FROM results T1 INNER JOIN races T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Bahrain Grand Prix' AND T2.year = 2007 AND T1.time IS NULL;",
        "SELECT COUNT(resultId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL;",
        "SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL;",
        "SELECT COUNT(*) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;",
        "SELECT COUNT(*) FROM results T1, races T2 WHERE T1.raceId = T2.raceId AND T2.name = 'Bahrain Grand Prix' AND T2.year = 2007 AND T1.time IS NULL;",
        "SELECT COUNT(resultId) FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;"
      ]
    ]
  },
  {
    "id": 863,
    "db_id": "formula_1",
    "nlq": "Show me the season page of year when the race No. 901 took place.",
    "gold": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "evidence": "race number refers to raceId;",
    "infer_predictions": [
      [
        "SELECT T2.url FROM races T1 JOIN seasons T2 ON T1.year = T2.year WHERE T1.raceId = 901;",
        "SELECT url FROM seasons WHERE year IN (SELECT year FROM races WHERE raceId = 901);",
        "SELECT seasons.url FROM seasons JOIN races ON seasons.year = races.year WHERE races.raceId = 901;",
        "SELECT url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901);",
        "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901;",
        "SELECT seasons.url FROM seasons, races WHERE seasons.year = races.year AND races.raceId = 901;",
        "SELECT T2.url FROM races T1, seasons T2 WHERE T1.year = T2.year AND T1.raceId = 901;",
        "SELECT url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901 LIMIT 1);",
        "SELECT T2.url FROM races T1 JOIN seasons T2 ON T1.year = T2.year AND T1.raceId = 901;",
        "SELECT url FROM seasons JOIN races ON seasons.year = races.year WHERE races.raceId = 901;"
      ]
    ]
  },
  {
    "id": 864,
    "db_id": "formula_1",
    "nlq": "For the race happened on 2015/11/29, how many drivers finished the game?",
    "gold": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
    "evidence": "game and race are synonyms; drivers who finished the race should have record in time;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL;",
        "SELECT COUNT(resultId) AS FinishedDrivers FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29' AND results.time IS NOT NULL;",
        "SELECT COUNT(*) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29' AND results.time IS NOT NULL;",
        "SELECT COUNT(results.resultId) FROM results, races WHERE results.raceId = races.raceId AND races.date = '2015-11-29' AND results.time IS NOT NULL;",
        "SELECT COUNT(*) FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.date = '2015-11-29' AND r.time IS NOT NULL;",
        "SELECT COUNT(resultId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL;",
        "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND NOT time IS NULL;",
        "SELECT COUNT(*) FROM results r INNER JOIN races ra ON r.raceId = ra.raceId WHERE ra.date = '2015-11-29' AND r.time IS NOT NULL;",
        "SELECT COUNT(resultId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL;",
        "SELECT COUNT(*) FROM results WHERE EXISTS (SELECT 1 FROM races WHERE races.raceId = results.raceId AND races.date = '2015-11-29') AND time IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 865,
    "db_id": "formula_1",
    "nlq": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "gold": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "infer_predictions": [
      [
        "SELECT T1.driverId FROM results T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1;",
        "SELECT driverId FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE raceId = 592 AND time IS NOT NULL ORDER BY dob LIMIT 1;",
        "SELECT MIN(drivers.dob), drivers.driverId FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL GROUP BY drivers.driverId ORDER BY drivers.dob ASC LIMIT 1;",
        "SELECT driverId FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 592 AND time IS NOT NULL) ORDER BY dob ASC LIMIT 1;",
        "SELECT T2.driverId FROM drivers T2 INNER JOIN (SELECT driverId FROM results WHERE raceId = 592 AND time IS NOT NULL) T1 ON T2.driverId = T1.driverId ORDER BY T2.dob ASC LIMIT 1;",
        "SELECT driverId FROM drivers WHERE EXISTS (SELECT 1 FROM results WHERE results.driverId = drivers.driverId AND raceId = 592 AND time IS NOT NULL) ORDER BY dob ASC LIMIT 1;",
        "SELECT T1.driverId FROM results T1, drivers T2 WHERE T1.driverId = T2.driverId AND T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1;",
        "SELECT driverId FROM (SELECT driverId, dob FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 592 AND time IS NOT NULL)) ORDER BY dob ASC LIMIT 1;",
        "SELECT TOP 1 driverId FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob;",
        "SELECT driverId FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC FETCH FIRST 1 ROW ONLY;"
      ]
    ]
  },
  {
    "id": 866,
    "db_id": "formula_1",
    "nlq": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "gold": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
    "evidence": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
    "infer_predictions": [
      [
        "SELECT T2.url FROM lapTimes T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 161 AND T1.time = '0:01:27';",
        "SELECT url FROM drivers WHERE driverId IN (SELECT driverId FROM lapTimes WHERE raceId = 161 AND time = '0:01:27');",
        "SELECT T2.url FROM lapTimes T1 INNER JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.time = '0:01:27' AND T1.raceId = 161;",
        "SELECT drivers.url FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = '0:01:27' AND lapTimes.raceId = 161;",
        "SELECT url FROM drivers WHERE EXISTS (SELECT 1 FROM lapTimes WHERE lapTimes.driverId = drivers.driverId AND lapTimes.time = '0:01:27' AND lapTimes.raceId = 161);",
        "SELECT T2.url FROM lapTimes AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 161 AND T1.time = '0:01:27';",
        "SELECT T2.url FROM lapTimes T1, drivers T2 WHERE T1.driverId = T2.driverId AND T1.raceId = 161 AND T1.time = '0:01:27';",
        "SELECT url FROM drivers d WHERE d.driverId = (SELECT driverId FROM lapTimes WHERE time = '0:01:27' AND raceId = 161);",
        "SELECT T2.url FROM lapTimes T1 JOIN drivers T2 ON T1.driverId = T2.driverId AND T1.raceId = 161 WHERE T1.time = '0:01:27';",
        "SELECT url FROM drivers WHERE driverId IN (SELECT driverId FROM lapTimes WHERE time = '0:01:27' AND raceId = 161);"
      ]
    ]
  },
  {
    "id": 867,
    "db_id": "formula_1",
    "nlq": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
    "gold": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "evidence": "fastest lap speed refers to MAX(fastestLapSpeed);",
    "infer_predictions": [
      [
        "SELECT T2.nationality FROM results T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 AND T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);",
        "SELECT nationality FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 933 AND fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933));",
        "SELECT D.nationality FROM drivers D INNER JOIN results R ON D.driverId = R.driverId WHERE R.raceId = 933 AND R.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);",
        "SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = 933 AND fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933));",
        "SELECT D.nationality FROM drivers D, results R WHERE D.driverId = R.driverId AND R.raceId = 933 AND R.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);",
        "SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = 933 ORDER BY CAST(fastestLapSpeed AS FLOAT) DESC LIMIT 1);",
        "SELECT T2.nationality FROM results T1 JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 ORDER BY CAST(T1.fastestLapSpeed AS FLOAT) DESC LIMIT 1;",
        "SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = 933 AND fastestLapSpeed = (SELECT MAX(CAST(fastestLapSpeed AS FLOAT)) FROM results WHERE raceId = 933));",
        "SELECT T2.nationality FROM results T1 INNER JOIN drivers T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 AND T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933);",
        "SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = 933 AND fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933 AND fastestLapSpeed IS NOT NULL));"
      ]
    ]
  },
  {
    "id": 868,
    "db_id": "formula_1",
    "nlq": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "gold": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
    "infer_predictions": [
      [
        "SELECT T2.lat, T2.lng FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix';",
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Malaysian Grand Prix';",
        "SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE name = 'Malaysian Grand Prix');",
        "SELECT T2.lat, T2.lng FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId AND T1.name = 'Malaysian Grand Prix';",
        "SELECT circuits.lat, circuits.lng FROM races, circuits WHERE races.circuitId = circuits.circuitId AND races.name = 'Malaysian Grand Prix';",
        "SELECT T2.lat, T2.lng FROM races T1, circuits T2 WHERE T1.circuitId = T2.circuitId AND T1.name = 'Malaysian Grand Prix';",
        "SELECT lat, lng FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Malaysian Grand Prix');",
        "SELECT T2.lat, T2.lng FROM races T1 INNER JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix';",
        "SELECT lat, lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Malaysian Grand Prix';",
        "SELECT T2.lat, T2.lng FROM races AS T1, circuits AS T2 WHERE T1.circuitId = T2.circuitId AND T1.name = 'Malaysian Grand Prix';"
      ]
    ]
  },
  {
    "id": 964,
    "db_id": "formula_1",
    "nlq": "List out the code for drivers who have nationality in America.",
    "gold": "SELECT code FROM drivers WHERE Nationality = 'American'",
    "evidence": "nationality = 'American'",
    "infer_predictions": [
      [
        "SELECT code FROM drivers WHERE nationality = 'American';",
        "SELECT code FROM drivers WHERE nationality LIKE 'American';",
        "SELECT D.code FROM drivers D WHERE D.nationality = 'American';",
        "SELECT code FROM drivers WHERE nationality IN ('American');",
        "SELECT code FROM drivers WHERE 'American' = nationality;",
        "SELECT code FROM drivers WHERE nationality IS 'American';",
        "SELECT code FROM drivers WHERE nationality COLLATE NOCASE = 'American';",
        "SELECT code FROM drivers WHERE UPPER(nationality) = UPPER('American');",
        "SELECT code FROM drivers WHERE STRCMP(nationality, 'American') = 0;",
        "SELECT code FROM drivers WHERE nationality MATCH 'American';"
      ]
    ]
  },
  {
    "id": 976,
    "db_id": "formula_1",
    "nlq": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
    "gold": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
    "evidence": "fastest time refers to Min(time);",
    "infer_predictions": [
      [
        "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(milliseconds) ASC LIMIT 5;",
        "SELECT T1.driverId FROM lapTimes T1 WHERE T1.lap = 1 GROUP BY T1.driverId ORDER BY MIN(T1.milliseconds) ASC LIMIT 5;",
        "SELECT driverId FROM (SELECT driverId, MIN(milliseconds) AS FastestTime FROM lapTimes WHERE lap = 1 GROUP BY driverId) ORDER BY FastestTime ASC LIMIT 5;",
        "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId HAVING MIN(milliseconds) IS NOT NULL ORDER BY MIN(milliseconds) ASC LIMIT 5;",
        "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(milliseconds) ASC LIMIT 5;",
        "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(milliseconds) ASC LIMIT 5;",
        "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(milliseconds) ASC LIMIT 5;",
        "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(milliseconds) ASC LIMIT 5;",
        "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(milliseconds) ASC LIMIT 5;",
        "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(milliseconds) ASC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 993,
    "db_id": "formula_1",
    "nlq": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "gold": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "infer_predictions": [
      [
        "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';",
        "SELECT C.location, C.country, C.lat, C.lng FROM circuits AS C WHERE C.name = 'Hungaroring';",
        "SELECT location AS 'Circuit Location', country AS 'Circuit Country', lat AS 'Latitude', lng AS 'Longitude' FROM circuits WHERE name = 'Hungaroring';",
        "SELECT * FROM (SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring');",
        "SELECT location, country, lat, lng FROM circuits WHERE circuits.name = 'Hungaroring';",
        "SELECT location, country, lat, lng FROM circuits WHERE name LIKE 'Hungaroring';",
        "SELECT location, country, lat, lng FROM circuits WHERE name IN ('Hungaroring');",
        "SELECT location, country, lat, lng FROM circuits WHERE TRIM(name) = 'Hungaroring';",
        "SELECT location, country, lat, lng FROM circuits WHERE UPPER(name) = UPPER('Hungaroring');",
        "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring' AND lat IS NOT NULL AND lng IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 997,
    "db_id": "formula_1",
    "nlq": "Which citizenship do the vast majority of the drivers hold?",
    "gold": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
    "evidence": "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n",
    "infer_predictions": [
      [
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;",
        "SELECT T1.nationality FROM (SELECT nationality, COUNT(*) as cnt FROM drivers GROUP BY nationality) T1 ORDER BY T1.cnt DESC LIMIT 1;",
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;",
        "SELECT TOP 1 nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC;",
        "SELECT nationality, MAX(cnt) FROM (SELECT nationality, COUNT(*) as cnt FROM drivers GROUP BY nationality) T1;",
        "SELECT nationality FROM (SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC) WHERE ROWNUM = 1;",
        "SELECT nationality FROM drivers WHERE nationality IN (SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1);",
        "SELECT nationality FROM drivers GROUP BY nationality HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM drivers GROUP BY nationality) T2);",
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1;",
        "SELECT nationality FROM (SELECT nationality, COUNT(*) AS total FROM drivers GROUP BY nationality ORDER BY total DESC LIMIT 1) AS most_common;"
      ]
    ]
  },
  {
    "id": 999,
    "db_id": "formula_1",
    "nlq": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "gold": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n",
    "infer_predictions": [
      [
        "SELECT T2.name FROM races T2 JOIN (SELECT raceId FROM results WHERE fastestLapTime IS NOT NULL ORDER BY fastestLapTime LIMIT 1) T1 ON T2.raceId = T1.raceId;",
        "SELECT name FROM races WHERE raceId = (SELECT raceId FROM results WHERE fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL));",
        "SELECT T2.name FROM races T2 INNER JOIN results T1 ON T2.raceId = T1.raceId WHERE T1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL);",
        "SELECT name FROM races WHERE raceId IN (SELECT raceId FROM results WHERE fastestLapTime = (SELECT MIN(fastestLapTime) FROM results));",
        "SELECT T2.name FROM races T2, results T1 WHERE T2.raceId = T1.raceId AND T1.fastestLapTime = (SELECT MIN(T1.fastestLapTime) FROM results T1 WHERE T1.fastestLapTime IS NOT NULL);",
        "SELECT name FROM races WHERE raceId = (SELECT raceId FROM results ORDER BY fastestLapTime LIMIT 1);",
        "SELECT T2.name FROM races T2 JOIN results T1 ON T2.raceId = T1.raceId WHERE T1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL);",
        "SELECT name FROM races WHERE raceId = (SELECT raceId FROM results WHERE fastestLapTime IS NOT NULL ORDER BY fastestLapTime ASC LIMIT 1);",
        "SELECT T2.name FROM races T2 JOIN results T1 ON T2.raceId = T1.raceId WHERE T1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results);",
        "SELECT name FROM races WHERE raceId IN (SELECT raceId FROM results WHERE fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL));"
      ]
    ]
  },
  {
    "id": 1017,
    "db_id": "formula_1",
    "nlq": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
    "gold": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
    "evidence": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)",
    "infer_predictions": [
      [
        "SELECT T3.lat, T3.lng FROM lapTimes T1 JOIN races T2 ON T1.raceId = T2.raceId JOIN circuits T3 ON T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488';",
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId INNER JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.time = '1:29.488';",
        "SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE raceId IN (SELECT raceId FROM lapTimes WHERE time = '1:29.488'));",
        "SELECT T3.lat, T3.lng FROM circuits T3 WHERE EXISTS (SELECT 1 FROM races T2 JOIN lapTimes T1 ON T2.raceId = T1.raceId WHERE T2.circuitId = T3.circuitId AND T1.time = '1:29.488');",
        "SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE time = '1:29.488');",
        "SELECT T3.lat, T3.lng FROM circuits T3 JOIN (SELECT circuitId FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE time = '1:29.488') T2 ON T3.circuitId = T2.circuitId;",
        "SELECT lat, lng FROM circuits WHERE EXISTS (SELECT * FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE circuits.circuitId = races.circuitId AND lapTimes.time = '1:29.488');",
        "SELECT T3.lat, T3.lng FROM circuits T3 JOIN races T2 ON T3.circuitId = T2.circuitId JOIN lapTimes T1 ON T2.raceId = T1.raceId WHERE T1.time = '1:29.488';",
        "SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT races.circuitId FROM races INNER JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.time = '1:29.488');",
        "SELECT circuits.lat, circuits.lng FROM circuits, races, lapTimes WHERE circuits.circuitId = races.circuitId AND races.raceId = lapTimes.raceId AND lapTimes.time = '1:29.488';"
      ]
    ]
  },
  {
    "id": 1020,
    "db_id": "european_football_2",
    "nlq": "Which player has the highest overall rating? Indicate the player's api id.",
    "gold": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "evidence": "highest overall rating refers to MAX(overall_rating);",
    "infer_predictions": [
      [
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE overall_rating IS NOT NULL);",
        "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN (SELECT MAX(overall_rating) AS max_rating FROM Player_Attributes) AS T2 ON T1.overall_rating = T2.max_rating WHERE T1.overall_rating IS NOT NULL;",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating IN (SELECT MAX(overall_rating) FROM Player_Attributes WHERE overall_rating IS NOT NULL);",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) AND overall_rating IS NOT NULL;",
        "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE overall_rating IS NOT NULL) LIMIT 1;",
        "SELECT player_api_id FROM Player_Attributes AS T1 WHERE T1.overall_rating = (SELECT MAX(T2.overall_rating) FROM Player_Attributes AS T2) AND T1.overall_rating IS NOT NULL;",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE overall_rating IS NOT NULL) ORDER BY player_api_id LIMIT 1;",
        "SELECT TOP 1 player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) AND overall_rating IS NOT NULL;",
        "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE overall_rating IS NOT NULL) ORDER BY player_api_id DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1021,
    "db_id": "european_football_2",
    "nlq": "What is the height of the tallest player? Indicate his name.",
    "gold": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "evidence": "tallest player refers to MAX(height);",
    "infer_predictions": [
      [
        "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);",
        "SELECT P.player_name FROM Player P WHERE P.height = (SELECT MAX(height) FROM Player);",
        "SELECT player_name FROM Player WHERE height IN (SELECT MAX(height) FROM Player);",
        "SELECT player_name FROM Player WHERE height = (SELECT MAX(P.height) FROM Player P);",
        "SELECT T1.player_name FROM Player T1 JOIN (SELECT MAX(height) AS max_height FROM Player) T2 ON T1.height = T2.max_height;",
        "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player WHERE height IS NOT NULL);",
        "SELECT player_name FROM Player WHERE height = (SELECT MAX(P.height) FROM Player P WHERE P.height IS NOT NULL);",
        "SELECT T1.player_name FROM Player T1 WHERE T1.height = (SELECT MAX(T2.height) FROM Player T2);",
        "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player GROUP BY height);",
        "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player WHERE height IS NOT NULL GROUP BY height);"
      ]
    ]
  },
  {
    "id": 1022,
    "db_id": "european_football_2",
    "nlq": "What is the preferred foot when attacking of the player with the lowest potential?",
    "gold": "SELECT preferred_foot FROM Player_Attributes WHERE penalties AND potential = (SELECT MIN(potential) FROM Player_Attributes)",
    "evidence": "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);",
    "infer_predictions": [
      [
        "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);",
        "SELECT T1.preferred_foot FROM Player_Attributes AS T1 WHERE T1.potential = (SELECT MIN(T2.potential) FROM Player_Attributes AS T2);",
        "SELECT preferred_foot FROM Player_Attributes WHERE potential IN (SELECT MIN(potential) FROM Player_Attributes);",
        "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes WHERE potential IS NOT NULL);",
        "SELECT T1.preferred_foot FROM Player_Attributes T1 JOIN (SELECT MIN(potential) AS MinPotential FROM Player_Attributes) T2 ON T1.potential = T2.MinPotential;",
        "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes WHERE potential IS NOT NULL);",
        "SELECT T1.preferred_foot FROM Player_Attributes T1 WHERE T1.potential = (SELECT MIN(T2.potential) FROM Player_Attributes T2 WHERE T2.potential IS NOT NULL);",
        "SELECT preferred_foot FROM Player_Attributes ORDER BY potential ASC LIMIT 1;",
        "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) LIMIT 1;",
        "SELECT T1.preferred_foot FROM Player_Attributes T1 WHERE T1.potential = (SELECT MIN(T2.potential) FROM Player_Attributes T2) LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1023,
    "db_id": "european_football_2",
    "nlq": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
    "gold": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
    "evidence": "overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';",
        "SELECT COUNT(player_api_id) AS NumberOfPlayers FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating <= 65 AND defensive_work_rate = 'low';",
        "SELECT COUNT(*) AS PlayerCount FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating <= 65 AND defensive_work_rate LIKE 'low';",
        "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE overall_rating IN (60, 61, 62, 63, 64, 65) AND defensive_work_rate = 'low';",
        "SELECT COUNT(*) FROM Player_Attributes WHERE (overall_rating BETWEEN 60 AND 65) AND (defensive_work_rate = 'low');",
        "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating <= 65 AND defensive_work_rate = 'low';",
        "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating <= 65 AND defensive_work_rate = 'low';",
        "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate LIKE 'low';",
        "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';",
        "SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating <= 65 AND defensive_work_rate = 'low';"
      ]
    ]
  },
  {
    "id": 1024,
    "db_id": "european_football_2",
    "nlq": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
    "gold": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
    "evidence": "perform better in crossing actions refers to MAX(crossing)",
    "infer_predictions": [
      [
        "SELECT T1.player_api_id FROM Player_Attributes T1 WHERE T1.crossing IS NOT NULL ORDER BY T1.crossing DESC LIMIT 5;",
        "SELECT player_api_id FROM Player_Attributes WHERE crossing IS NOT NULL ORDER BY crossing DESC LIMIT 5;",
        "SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;",
        "SELECT T1.player_api_id FROM Player_Attributes T1 ORDER BY T1.crossing DESC LIMIT 5;",
        "SELECT player_api_id FROM (SELECT player_api_id, crossing FROM Player_Attributes ORDER BY crossing DESC) WHERE crossing IS NOT NULL LIMIT 5;",
        "SELECT player_api_id FROM Player_Attributes WHERE crossing IS NOT NULL ORDER BY crossing DESC FETCH FIRST 5 ROWS ONLY;",
        "SELECT T1.player_api_id FROM Player_Attributes T1 WHERE T1.crossing IS NOT NULL ORDER BY T1.crossing DESC FETCH FIRST 5 ROWS ONLY;",
        "SELECT player_api_id FROM Player_Attributes ORDER BY IFNULL(crossing, 0) DESC LIMIT 5;",
        "SELECT player_api_id FROM Player_Attributes WHERE crossing > 0 ORDER BY crossing DESC LIMIT 5;",
        "SELECT T1.player_api_id FROM Player_Attributes T1 WHERE T1.crossing > 0 ORDER BY T1.crossing DESC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 1025,
    "db_id": "european_football_2",
    "nlq": "Give the name of the league had the most goals in the 2016 season?",
    "gold": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
    "evidence": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';",
    "infer_predictions": [
      [
        "SELECT T2.name FROM League T2 JOIN (SELECT league_id, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id) T1 ON T2.id = T1.league_id ORDER BY T1.total_goals DESC LIMIT 1;",
        "SELECT name FROM League WHERE id = (SELECT league_id FROM Match WHERE season = '2015/2016' GROUP BY league_id ORDER BY SUM(home_team_goal + away_team_goal) DESC LIMIT 1);",
        "SELECT T2.name FROM League T2 WHERE T2.id = (SELECT league_id FROM Match WHERE season = '2015/2016' GROUP BY league_id ORDER BY SUM(home_team_goal + away_team_goal) DESC LIMIT 1);",
        "SELECT name FROM League WHERE id IN (SELECT league_id FROM Match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT MAX(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id)));",
        "SELECT T2.name FROM (SELECT league_id, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id) AS T1 JOIN League T2 ON T1.league_id = T2.id ORDER BY T1.total_goals DESC LIMIT 1;",
        "SELECT name FROM League WHERE id = (SELECT league_id FROM (SELECT league_id, SUM(home_team_goal + away_team_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id) T1 ORDER BY total_goals DESC LIMIT 1);",
        "SELECT T2.name FROM League T2 INNER JOIN (SELECT league_id, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id) T1 ON T2.id = T1.league_id ORDER BY T1.total_goals DESC LIMIT 1;",
        "SELECT T2.name FROM League T2, (SELECT league_id, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id) T1 WHERE T2.id = T1.league_id ORDER BY T1.total_goals DESC LIMIT 1;",
        "SELECT name FROM League WHERE id = (SELECT league_id FROM Match GROUP BY league_id HAVING season = '2015/2016' ORDER BY SUM(home_team_goal + away_team_goal) DESC LIMIT 1);",
        "SELECT T2.name FROM League T2 JOIN (SELECT league_id, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id) T1 ON T2.id = T1.league_id ORDER BY T1.total_goals DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1026,
    "db_id": "european_football_2",
    "nlq": "Which home team had lost the fewest matches in the 2016 season?",
    "gold": "SELECT t3.team_long_name FROM Match AS t1 INNER JOIN Team AS t3 ON t1.home_team_api_id = t3.team_api_id WHERE t1.season = '2015/2016' AND t1.home_team_goal - t1.away_team_goal < 0 GROUP BY t1.home_team_api_id HAVING COUNT(*) = (SELECT MIN(lost_matches_count) FROM (SELECT home_team_api_id, COUNT(*) AS lost_matches_count FROM Match WHERE season = '2015/2016' AND home_team_goal - away_team_goal < 0 GROUP BY home_team_api_id))",
    "evidence": "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';",
    "infer_predictions": [
      [
        "SELECT T.team_api_id FROM Team T JOIN Match M ON T.team_api_id = M.home_team_api_id WHERE M.season = '2015/2016' AND M.home_team_goal < M.away_team_goal GROUP BY T.team_api_id ORDER BY COUNT(*) ASC LIMIT 1;",
        "SELECT team_api_id FROM (SELECT home_team_api_id AS team_api_id, COUNT(*) AS losses FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id) AS LossCount ORDER BY losses ASC LIMIT 1;",
        "SELECT MIN(T.team_api_id) FROM Team T INNER JOIN (SELECT home_team_api_id FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1) AS MinLosses ON T.team_api_id = MinLosses.home_team_api_id;",
        "WITH Losses AS (SELECT home_team_api_id, COUNT(*) AS loss_count FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id) SELECT team_api_id FROM Team JOIN Losses ON Team.team_api_id = Losses.home_team_api_id ORDER BY loss_count ASC LIMIT 1;",
        "SELECT team_api_id FROM Team WHERE team_api_id IN (SELECT home_team_api_id FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id HAVING COUNT(*) = (SELECT MIN(loss_count) FROM (SELECT home_team_api_id, COUNT(*) AS loss_count FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id) AS Losses));",
        "SELECT T.team_api_id FROM Team T WHERE EXISTS (SELECT 1 FROM Match M WHERE M.home_team_api_id = T.team_api_id AND M.season = '2015/2016' AND M.home_team_goal < M.away_team_goal GROUP BY M.home_team_api_id HAVING COUNT(*) = (SELECT MIN(loss_count) FROM (SELECT home_team_api_id, COUNT(*) AS loss_count FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id) AS Losses));",
        "SELECT team_api_id FROM Team WHERE team_api_id = (SELECT home_team_api_id FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1);",
        "SELECT team_api_id FROM (SELECT home_team_api_id AS team_api_id FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1) AS LeastLosses;",
        "SELECT T.team_api_id FROM Team T JOIN (SELECT home_team_api_id, COUNT(*) AS loss_count FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id) AS Losses ON T.team_api_id = Losses.home_team_api_id ORDER BY Losses.loss_count ASC LIMIT 1;",
        "SELECT team_api_id FROM Team WHERE team_api_id = (SELECT home_team_api_id FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id HAVING COUNT(*) = (SELECT MIN(loss_count) FROM (SELECT home_team_api_id, COUNT(*) AS loss_count FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id) AS Losses));"
      ]
    ]
  },
  {
    "id": 1027,
    "db_id": "european_football_2",
    "nlq": "Indicate the full names of the top 10 players with the highest number of penalties.",
    "gold": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
    "evidence": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);",
    "infer_predictions": [
      [
        "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.penalties IS NOT NULL ORDER BY PA.penalties DESC LIMIT 10;",
        "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE penalties IS NOT NULL ORDER BY penalties DESC LIMIT 10);",
        "SELECT P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id AND PA.penalties IS NOT NULL ORDER BY PA.penalties DESC LIMIT 10;",
        "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes ORDER BY penalties DESC LIMIT 10) AND player_api_id IS NOT NULL;",
        "SELECT P.player_name FROM Player P, Player_Attributes PA WHERE P.player_api_id = PA.player_api_id AND PA.penalties IS NOT NULL ORDER BY PA.penalties DESC LIMIT 10;",
        "SELECT player_name FROM Player WHERE EXISTS (SELECT 1 FROM Player_Attributes WHERE Player.player_api_id = Player_Attributes.player_api_id AND penalties IS NOT NULL ORDER BY penalties DESC LIMIT 10);",
        "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id ORDER BY PA.penalties DESC LIMIT 10;",
        "SELECT TOP 10 P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.penalties IS NOT NULL ORDER BY PA.penalties DESC;",
        "SELECT P.player_name FROM Player P WHERE P.player_api_id IN (SELECT PA.player_api_id FROM Player_Attributes PA WHERE PA.penalties IS NOT NULL ORDER BY PA.penalties DESC LIMIT 10);",
        "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE penalties IS NOT NULL ORDER BY penalties DESC LIMIT 10) AND player_api_id IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1124,
    "db_id": "european_football_2",
    "nlq": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "gold": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "evidence": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';",
    "infer_predictions": [
      [
        "SELECT T2.player_name FROM Player_Attributes T1 JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T1.attacking_work_rate = 'high';",
        "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE attacking_work_rate = 'high');",
        "SELECT P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id AND PA.attacking_work_rate = 'high';",
        "SELECT player_name FROM Player WHERE EXISTS (SELECT 1 FROM Player_Attributes WHERE Player_Attributes.player_api_id = Player.player_api_id AND attacking_work_rate = 'high');",
        "SELECT P.player_name FROM Player P, Player_Attributes PA WHERE P.player_api_id = PA.player_api_id AND PA.attacking_work_rate = 'high';",
        "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE attacking_work_rate = 'high';",
        "SELECT DISTINCT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.attacking_work_rate = 'high';",
        "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE attacking_work_rate = 'high' GROUP BY player_api_id);",
        "SELECT P.player_name FROM Player P WHERE P.player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE attacking_work_rate = 'high');",
        "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE attacking_work_rate = 'high' AND player_api_id IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 1132,
    "db_id": "european_football_2",
    "nlq": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.",
    "gold": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3",
    "evidence": "over 180 cm tall refers to height > 180; name of football player refers to player_name",
    "infer_predictions": [
      [
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;",
        "SELECT P.player_name FROM Player P WHERE P.height > 180 ORDER BY P.player_name ASC LIMIT 3;",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3;",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name COLLATE NOCASE ASC LIMIT 3;",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY UPPER(player_name) ASC LIMIT 3;",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY LOWER(player_name) ASC LIMIT 3;",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;",
        "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;"
      ]
    ]
  },
  {
    "id": 1141,
    "db_id": "european_football_2",
    "nlq": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class? Output the speed class.",
    "gold": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "infer_predictions": [
      [
        "SELECT T2.buildUpPlaySpeedClass FROM Team T1 JOIN Team_Attributes T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge';",
        "SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE team_api_id IN (SELECT team_api_id FROM Team WHERE team_long_name = 'KSV Cercle Brugge');",
        "SELECT T2.buildUpPlaySpeedClass FROM Team T1 INNER JOIN Team_Attributes T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge';",
        "SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'KSV Cercle Brugge');",
        "SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge';",
        "SELECT T2.buildUpPlaySpeedClass FROM Team T1, Team_Attributes T2 WHERE T1.team_api_id = T2.team_api_id AND T1.team_long_name = 'KSV Cercle Brugge';",
        "SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE EXISTS (SELECT 1 FROM Team WHERE team_long_name = 'KSV Cercle Brugge' AND team_api_id = Team_Attributes.team_api_id);",
        "SELECT T2.buildUpPlaySpeedClass FROM Team T1 JOIN Team_Attributes T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id AND T1.team_long_name = 'KSV Cercle Brugge';",
        "SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'KSV Cercle Brugge');",
        "SELECT T2.buildUpPlaySpeedClass FROM Team T1 LEFT JOIN Team_Attributes T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge';"
      ]
    ]
  },
  {
    "id": 1144,
    "db_id": "european_football_2",
    "nlq": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "gold": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
    "evidence": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)",
    "infer_predictions": [
      [
        "SELECT T2.finishing, T2.curve FROM Player T1 JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight = (SELECT MAX(weight) FROM Player)",
        "SELECT finishing, curve FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE weight = (SELECT MAX(weight) FROM Player))",
        "WITH HeaviestPlayer AS (SELECT player_api_id FROM Player WHERE weight = (SELECT MAX(weight) FROM Player)) SELECT PA.finishing, PA.curve FROM Player_Attributes PA JOIN HeaviestPlayer HP ON PA.player_api_id = HP.player_api_id",
        "SELECT PA.finishing, PA.curve FROM Player_Attributes PA WHERE PA.player_api_id IN (SELECT player_api_id FROM Player WHERE weight = (SELECT MAX(weight) FROM Player))",
        "SELECT finishing, curve FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1)",
        "WITH MaxWeight AS (SELECT MAX(weight) AS max_weight FROM Player) SELECT PA.finishing, PA.curve FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.weight = (SELECT max_weight FROM MaxWeight)",
        "SELECT finishing, curve FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE weight >= ALL (SELECT weight FROM Player))",
        "SELECT PA.finishing, PA.curve FROM Player_Attributes PA INNER JOIN (SELECT player_api_id FROM Player WHERE weight = (SELECT MAX(weight) FROM Player)) AS MaxWeightPlayer ON PA.player_api_id = MaxWeightPlayer.player_api_id",
        "SELECT finishing, curve FROM Player_Attributes WHERE player_api_id = (SELECT TOP 1 player_api_id FROM Player ORDER BY weight DESC)",
        "WITH Heaviest AS (SELECT player_api_id FROM Player WHERE weight = (SELECT MAX(weight) FROM Player)) SELECT finishing, curve FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Heaviest)"
      ]
    ]
  },
  {
    "id": 1147,
    "db_id": "european_football_2",
    "nlq": "Please name one player whose overall strength is the greatest.",
    "gold": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
    "evidence": "overall strength is the greatest refers to MAX(overall_rating)",
    "infer_predictions": [
      [
        "SELECT T2.player_name FROM Player_Attributes T1 JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1;",
        "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));",
        "SELECT P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
        "SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1);",
        "SELECT P.player_name FROM Player P, Player_Attributes PA WHERE P.player_api_id = PA.player_api_id AND PA.overall_rating = (SELECT MAX(PA.overall_rating) FROM Player_Attributes PA);",
        "SELECT player_name FROM Player WHERE EXISTS (SELECT 1 FROM Player_Attributes WHERE Player_Attributes.player_api_id = Player.player_api_id AND overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));",
        "SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) ORDER BY PA.overall_rating DESC LIMIT 1;",
        "SELECT TOP 1 P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
        "SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE overall_rating >= ALL (SELECT overall_rating FROM Player_Attributes));",
        "SELECT P.player_name FROM Player P WHERE P.player_api_id = (SELECT PA.player_api_id FROM Player_Attributes PA WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));"
      ]
    ]
  },
  {
    "id": 1149,
    "db_id": "thrombosis_prediction",
    "nlq": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "gold": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
    "evidence": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX\u00a0 = 'M' and Admission = '-')",
    "infer_predictions": [
      [
        "SELECT (CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) - 1) * 100 AS Percentage_Deviation FROM Patient WHERE SEX = 'M';",
        "SELECT ((COUNT(*) FILTER (WHERE Admission = '+') * 1.0 / COUNT(*) FILTER (WHERE Admission = '-')) - 1) * 100 AS Percentage_Deviation FROM Patient WHERE SEX = 'M';",
        "SELECT (COUNT(CASE WHEN Admission = '+' THEN 1 END) * 1.0 / COUNT(CASE WHEN Admission = '-' THEN 1 END) - 1) * 100 AS Percentage_Deviation FROM Patient WHERE SEX = 'M';",
        "SELECT ((SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') * 1.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') - 1) * 100 AS Percentage_Deviation;",
        "WITH Counts AS (SELECT Admission, COUNT(ID) AS NumPatients FROM Patient WHERE SEX = 'M' GROUP BY Admission) SELECT (MAX(CASE WHEN Admission = '+' THEN NumPatients ELSE 0 END) * 1.0 / MAX(CASE WHEN Admission = '-' THEN NumPatients ELSE 0 END) - 1) * 100 AS Percentage_Deviation FROM Counts;",
        "SELECT (COUNT(IF(Admission = '+', 1, NULL)) * 1.0 / COUNT(IF(Admission = '-', 1, NULL)) - 1) * 100 AS Percentage_Deviation FROM Patient WHERE SEX = 'M';",
        "SELECT ((SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND Admission = '+') / (SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND Admission = '-') - 1) * 100 AS Percentage_Deviation;",
        "SELECT (COUNT(ID) FILTER (WHERE Admission = '+') / COUNT(ID) FILTER (WHERE Admission = '-') - 1) * 100 AS Percentage_Deviation FROM Patient WHERE SEX = 'M';",
        "SELECT (SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) - 1) * 100 AS Percentage_Deviation FROM Patient WHERE SEX = 'M';",
        "WITH Inpatient AS (SELECT COUNT(ID) AS CountIn FROM Patient WHERE SEX = 'M' AND Admission = '+'), Outpatient AS (SELECT COUNT(ID) AS CountOut FROM Patient WHERE SEX = 'M' AND Admission = '-') SELECT (Inpatient.CountIn * 1.0 / Outpatient.CountOut - 1) * 100 AS Percentage_Deviation FROM Inpatient, Outpatient;"
      ]
    ]
  },
  {
    "id": 1150,
    "db_id": "thrombosis_prediction",
    "nlq": "What is the percentage of female patient were born after 1930?",
    "gold": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
    "evidence": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')",
    "infer_predictions": [
      [
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Birthday IS NOT NULL)) AS percentage FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930';",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS percentage FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930';",
        "SELECT (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930') * 100.0 / COUNT(*) AS percentage FROM Patient WHERE SEX = 'F';",
        "WITH FemalePatients AS (SELECT * FROM Patient WHERE SEX = 'F'), BornAfter1930 AS (SELECT * FROM FemalePatients WHERE strftime('%Y', Birthday) > '1930') SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM FemalePatients) AS percentage FROM BornAfter1930;",
        "SELECT (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930') * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage FROM Patient LIMIT 1;",
        "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930';",
        "SELECT 100.0 * (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930') / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage;",
        "WITH TotalFemales AS (SELECT COUNT(*) AS total FROM Patient WHERE SEX = 'F'), FemalesAfter1930 AS (SELECT COUNT(*) AS total FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930') SELECT FemalesAfter1930.total * 100.0 / TotalFemales.total AS percentage FROM TotalFemales, FemalesAfter1930;",
        "SELECT (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930') / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') * 100.0 AS percentage;",
        "SELECT (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930') * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Birthday IS NOT NULL) AS percentage FROM Patient LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1151,
    "db_id": "thrombosis_prediction",
    "nlq": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
    "gold": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'",
    "evidence": "patient born between Year 1930 to 1940 refers to year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31'; inpatient refers to Admission = '+'",
    "infer_predictions": [
      [
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940')) AS InpatientPercentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940' AND Admission = '+';",
        "SELECT (SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS InpatientPercentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940';",
        "WITH SelectedPatients AS (SELECT * FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940') SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM SelectedPatients)) AS InpatientPercentage FROM SelectedPatients WHERE Admission = '+';",
        "SELECT (COUNT(CASE WHEN Admission = '+' THEN 1 END) * 100.0 / COUNT(*)) AS InpatientPercentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940';",
        "SELECT (COUNT(IF(Admission = '+', 1, NULL)) * 100.0 / COUNT(*)) AS InpatientPercentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940';",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940')) AS InpatientPercentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940' AND Admission = '+';",
        "WITH CTE AS (SELECT Admission FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940') SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM CTE)) AS InpatientPercentage FROM CTE WHERE Admission = '+';",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940')) AS InpatientPercentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940' AND Admission = '+';",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940')) AS InpatientPercentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940' AND Admission = '+';",
        "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940')) AS InpatientPercentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940' AND Admission = '+';"
      ]
    ]
  },
  {
    "id": 1152,
    "db_id": "thrombosis_prediction",
    "nlq": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "gold": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
    "evidence": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')",
    "infer_predictions": [
      [
        "SELECT CAST(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS outpatient_to_inpatient_ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') * 1.0 / (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') / (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT COUNT(CASE WHEN Admission = '-' THEN 1 END) * 1.0 / COUNT(CASE WHEN Admission = '+' THEN 1 END) AS ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') * 1.0 / (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') / (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') * 1.0 / (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') * 1.0 / (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') * 1.0 / (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS ratio FROM Patient WHERE Diagnosis = 'SLE';",
        "SELECT (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') * 1.0 / (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS ratio FROM Patient WHERE Diagnosis = 'SLE';"
      ]
    ]
  },
  {
    "id": 1153,
    "db_id": "thrombosis_prediction",
    "nlq": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "gold": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "evidence": "'30609' is the Patient ID; disease means Diagnosis",
    "infer_predictions": [
      [
        "SELECT P.Diagnosis, L.Date FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 30609;",
        "SELECT Diagnosis, Date FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609;",
        "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1, Laboratory AS T2 WHERE T1.ID = T2.ID AND T1.ID = 30609;",
        "SELECT Diagnosis, Date FROM Patient, Laboratory WHERE Patient.ID = Laboratory.ID AND Patient.ID = 30609;",
        "SELECT P.Diagnosis, L.Date FROM Patient P, Laboratory L WHERE P.ID = L.ID AND P.ID = 30609;",
        "SELECT Diagnosis, Date FROM Patient JOIN Laboratory USING(ID) WHERE ID = 30609;",
        "SELECT P.Diagnosis, L.Date FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 30609;",
        "SELECT Diagnosis, Date FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID AND Patient.ID = 30609;",
        "SELECT P.Diagnosis, L.Date FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 30609;",
        "SELECT Diagnosis, Date FROM Patient LEFT JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609;"
      ]
    ]
  },
  {
    "id": 1154,
    "db_id": "thrombosis_prediction",
    "nlq": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.",
    "gold": "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109",
    "evidence": "When was the examination taken refers to `Examination Date`",
    "infer_predictions": [
      [
        "SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID = 163109;",
        "SELECT SEX, Birthday, `Examination Date`, Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109;",
        "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109;",
        "SELECT `SEX`, `Birthday`, `Examination Date`, `Symptoms` FROM Patient, Examination WHERE Patient.ID = Examination.ID AND Patient.ID = 163109;",
        "SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient P, Examination E WHERE P.ID = E.ID AND P.ID = 163109;",
        "SELECT SEX, Birthday, `Examination Date`, Symptoms FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109;",
        "SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.ID = 163109;",
        "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.ID = 163109;",
        "SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE P.ID = 163109;",
        "SELECT SEX, Birthday, `Examination Date`, Symptoms FROM Patient JOIN Examination USING(ID) WHERE ID = 163109;"
      ]
    ]
  },
  {
    "id": 1155,
    "db_id": "thrombosis_prediction",
    "nlq": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "gold": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "evidence": "LDH beyond normal range refers to LDH > '500';",
    "infer_predictions": [
      [
        "SELECT T2.ID, T2.SEX, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.LDH > 500;",
        "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID AND Laboratory.LDH > 500;",
        "SELECT p.ID, p.SEX, p.Birthday FROM Patient p WHERE EXISTS (SELECT 1 FROM Laboratory l WHERE l.ID = p.ID AND l.LDH > 500);",
        "SELECT ID, SEX, Birthday FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE LDH > 500);",
        "SELECT p.ID, p.SEX, p.Birthday FROM Patient p INNER JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH > 500;",
        "SELECT DISTINCT p.ID, p.SEX, p.Birthday FROM Patient p, Laboratory l WHERE p.ID = l.ID AND l.LDH > 500;",
        "SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID AND l.LDH > 500;",
        "SELECT p.ID, p.SEX, p.Birthday FROM Patient p WHERE p.ID IN (SELECT ID FROM Laboratory WHERE LDH > 500);",
        "SELECT p.ID, p.SEX, p.Birthday FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH > 500;",
        "SELECT p.ID, p.SEX, p.Birthday FROM Patient p WHERE EXISTS (SELECT * FROM Laboratory l WHERE l.ID = p.ID AND l.LDH > 500);"
      ]
    ]
  },
  {
    "id": 1156,
    "db_id": "thrombosis_prediction",
    "nlq": "State the ID and age of patient with positive degree of coagulation.",
    "gold": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';",
    "infer_predictions": [
      [
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P, Examination E WHERE P.ID = E.ID AND E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P LEFT JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P LEFT OUTER JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P RIGHT JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P RIGHT OUTER JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P CROSS JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;",
        "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+' AND P.Birthday IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1157,
    "db_id": "thrombosis_prediction",
    "nlq": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "gold": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;",
    "infer_predictions": [
      [
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2;",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID AND E.Thrombosis = 2;",
        "SELECT ID, SEX, Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Thrombosis = 2);",
        "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient, Examination WHERE Patient.ID = Examination.ID AND Examination.Thrombosis = 2;",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P, Examination E WHERE P.ID = E.ID AND E.Thrombosis = 2;",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2;",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P WHERE EXISTS (SELECT 1 FROM Examination E WHERE E.ID = P.ID AND E.Thrombosis = 2);",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P WHERE P.ID IN (SELECT ID FROM Examination WHERE Thrombosis = 2);",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID AND E.Thrombosis = 2;",
        "SELECT ID, SEX, Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Thrombosis = 2);"
      ]
    ]
  },
  {
    "id": 1158,
    "db_id": "thrombosis_prediction",
    "nlq": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
    "gold": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
    "evidence": "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'",
    "infer_predictions": [
      [
        "SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250;",
        "SELECT P.ID FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250;",
        "SELECT ID FROM Patient WHERE strftime('%Y', Birthday) = '1937' AND ID IN (SELECT ID FROM Laboratory WHERE `T-CHO` >= 250);",
        "SELECT DISTINCT P.ID FROM Patient P, Laboratory L WHERE P.ID = L.ID AND strftime('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250;",
        "SELECT P.ID FROM Patient P WHERE strftime('%Y', P.Birthday) = '1937' AND EXISTS (SELECT 1 FROM Laboratory L WHERE L.ID = P.ID AND L.`T-CHO` >= 250);",
        "SELECT P.ID FROM Patient P WHERE strftime('%Y', P.Birthday) = '1937' AND P.ID IN (SELECT ID FROM Laboratory WHERE `T-CHO` >= 250);",
        "SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250 GROUP BY P.ID;",
        "SELECT P.ID FROM Patient P WHERE strftime('%Y', P.Birthday) = '1937' AND P.ID IN (SELECT ID FROM Laboratory WHERE `T-CHO` >= 250 AND ID = P.ID);",
        "SELECT DISTINCT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250;",
        "SELECT P.ID FROM Patient P WHERE strftime('%Y', P.Birthday) = '1937' AND EXISTS (SELECT NULL FROM Laboratory L WHERE L.ID = P.ID AND L.`T-CHO` >= 250);"
      ]
    ]
  },
  {
    "id": 1159,
    "db_id": "thrombosis_prediction",
    "nlq": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.",
    "gold": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5",
    "evidence": "albumin level lower than 3.5 refers to ALB < 3.5;",
    "infer_predictions": [
      [
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.ALB < 3.5;",
        "SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;",
        "SELECT ID, SEX, Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE ALB < 3.5);",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P, Laboratory AS L WHERE P.ID = L.ID AND L.ALB < 3.5;",
        "SELECT DISTINCT P.ID, P.SEX, P.Diagnosis FROM Patient P, Laboratory L WHERE P.ID = L.ID AND L.ALB < 3.5;",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID AND L.ALB < 3.5;",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.ALB < 3.5;",
        "SELECT ID, SEX, Diagnosis FROM Patient WHERE EXISTS (SELECT 1 FROM Laboratory WHERE Laboratory.ID = Patient.ID AND ALB < 3.5);",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P WHERE P.ID IN (SELECT ID FROM Laboratory WHERE ALB < 3.5);",
        "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P LEFT JOIN Laboratory L ON P.ID = L.ID WHERE L.ALB < 3.5;"
      ]
    ]
  },
  {
    "id": 1177,
    "db_id": "thrombosis_prediction",
    "nlq": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level? Answer by 'Normal' or 'Abnormal' for each record.",
    "gold": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'",
    "evidence": "total cholesterol normal level refers to N < 250",
    "infer_predictions": [
      [
        "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4';",
        "SELECT CASE WHEN `T-CHO` >= 250 THEN 'Abnormal' ELSE 'Normal' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4';",
        "SELECT 'Normal' AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4' AND `T-CHO` < 250 UNION ALL SELECT 'Abnormal' FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4' AND `T-CHO` >= 250;",
        "SELECT IF(`T-CHO` < 250, 'Normal', 'Abnormal') AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4';",
        "SELECT (CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END) AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4';",
        "SELECT IIF(`T-CHO` < 250, 'Normal', 'Abnormal') AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4';",
        "SELECT CASE WHEN `T-CHO` IS NOT NULL AND `T-CHO` < 250 THEN 'Normal' WHEN `T-CHO` IS NOT NULL AND `T-CHO` >= 250 THEN 'Abnormal' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4';",
        "SELECT 'Normal' AS Cholesterol_Status WHERE EXISTS (SELECT 1 FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4' AND `T-CHO` < 250) UNION SELECT 'Abnormal' WHERE EXISTS (SELECT 1 FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4' AND `T-CHO` >= 250);",
        "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4' AND `T-CHO` IS NOT NULL;",
        "SELECT (CASE `T-CHO` < 250 WHEN TRUE THEN 'Normal' ELSE 'Abnormal' END) AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4';"
      ]
    ]
  },
  {
    "id": 1193,
    "db_id": "thrombosis_prediction",
    "nlq": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?",
    "gold": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'",
    "evidence": "Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'P'; women refers to SEX = 'F'; born between 1980 and 1989 refers to BIRTHDAY",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND T1.SEX = 'F' AND T1.Birthday BETWEEN '1980-01-01' AND '1989-12-31';",
        "SELECT COUNT(DISTINCT p.ID) FROM Patient p INNER JOIN Examination e ON p.ID = e.ID WHERE e.`ANA Pattern` <> 'P' AND p.SEX = 'F' AND p.Birthday >= '1980-01-01' AND p.Birthday <= '1989-12-31';",
        "SELECT COUNT(DISTINCT patient.ID) FROM Patient patient, Examination exam WHERE patient.ID = exam.ID AND exam.`ANA Pattern` NOT LIKE 'P' AND patient.SEX = 'F' AND patient.Birthday >= '1980-01-01' AND patient.Birthday <= '1989-12-31';",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE NOT T2.`ANA Pattern` = 'P' AND T1.SEX = 'F' AND strftime('%Y', T1.Birthday) BETWEEN '1980' AND '1989';",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1, Examination T2 WHERE T1.ID = T2.ID AND T2.`ANA Pattern` NOT IN ('P') AND T1.SEX = 'F' AND strftime('%Y', T1.Birthday) BETWEEN '1980' AND '1989';",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` IS NOT 'P' AND T1.SEX = 'F' AND T1.Birthday > '1979-12-31' AND T1.Birthday < '1990-01-01';",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 INNER JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND T1.SEX = 'F' AND YEAR(T1.Birthday) BETWEEN 1980 AND 1989;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 LEFT JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` <> 'P' AND T1.SEX = 'F' AND T1.Birthday >= '1980-01-01' AND T1.Birthday <= '1989-12-31';",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` NOT LIKE 'P' AND T1.SEX = 'F' AND T1.Birthday BETWEEN '1980-01-01' AND '1989-12-31';",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` NOT IN ('P') AND T1.SEX = 'F' AND T1.Birthday >= '1980-01-01' AND T1.Birthday <= '1989-12-31';"
      ]
    ]
  },
  {
    "id": 1197,
    "db_id": "thrombosis_prediction",
    "nlq": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
    "gold": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473",
    "evidence": "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id",
    "infer_predictions": [
      [
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;",
        "SELECT P.Description, P.Diagnosis FROM Patient AS P WHERE P.ID = 48473;",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473 AND Description IS NOT NULL AND Diagnosis IS NOT NULL;",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473 AND Description IS NOT NULL;",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473 AND Diagnosis IS NOT NULL;",
        "SELECT Description AS First_Documented, Diagnosis AS Disease FROM Patient WHERE ID = 48473;",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473 ORDER BY Description;",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473 ORDER BY Diagnosis;",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473 LIMIT 1;",
        "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473 AND Description IS NOT NULL ORDER BY Description;"
      ]
    ]
  },
  {
    "id": 1304,
    "db_id": "thrombosis_prediction",
    "nlq": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?",
    "gold": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0",
    "evidence": "normal blood glucose refers to GLU < 180; don't have thrombosis refers to Thrombosis = 0;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;",
        "SELECT COUNT(UNIQUE T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT T1.ID FROM Laboratory T1, Examination T2 WHERE T1.ID = T2.ID AND T1.GLU < 180 AND T2.Thrombosis = 0);",
        "SELECT COUNT(DISTINCT ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1, Examination T2 WHERE T1.ID = T2.ID AND T1.GLU < 180 AND T2.Thrombosis = 0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 INNER JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;"
      ]
    ]
  },
  {
    "id": 1305,
    "db_id": "thrombosis_prediction",
    "nlq": "How many patients accepted to the hospital have a normal level of white blood cells?",
    "gold": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'",
    "evidence": "accepted to the hospital refers to Admission = '+'; normal level of white blood cells refers to WBC between 3.5 and 9.0;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0;",
        "SELECT COUNT(UNIQUE T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC >= 3.5 AND T2.WBC <= 9.0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1, Laboratory T2 WHERE T1.ID = T2.ID AND T1.Admission = '+' AND T2.WBC > 3.5 AND T2.WBC < 9.0;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT T1.ID FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0);",
        "SELECT COUNT(DISTINCT patient_id) FROM (SELECT T1.ID AS patient_id FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0);",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 INNER JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC >= 3.5 AND T2.WBC <= 9.0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND (T2.WBC BETWEEN 3.5 AND 9.0);",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC > 3.5 AND T2.WBC < 9.0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1, Laboratory T2 WHERE T1.ID = T2.ID AND T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 INNER JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC >= 3.5 AND T2.WBC <= 9.0;"
      ]
    ]
  },
  {
    "id": 1306,
    "db_id": "thrombosis_prediction",
    "nlq": "How many patients diagnosed with SLE have a normal white blood cell level?",
    "gold": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0;",
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND Laboratory.WBC >= 3.5 AND Laboratory.WBC <= 9.0;",
        "SELECT COUNT(UNIQUE T1.ID) FROM Patient AS T1, Laboratory AS T2 WHERE T1.ID = T2.ID AND T1.Diagnosis = 'SLE' AND T2.WBC > 3.5 AND T2.WBC < 9.0;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0);",
        "SELECT COUNT(DISTINCT ID) FROM Patient JOIN Laboratory USING(ID) WHERE Diagnosis = 'SLE' AND WBC BETWEEN 3.5 AND 9.0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 INNER JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC > 3.5 AND T2.WBC < 9.0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1, Laboratory T2 WHERE T1.ID = T2.ID AND T1.Diagnosis = 'SLE' AND T2.WBC >= 3.5 AND T2.WBC <= 9.0;",
        "SELECT COUNT(DISTINCT Patient.ID) FROM Patient, Laboratory WHERE Patient.ID = Laboratory.ID AND Patient.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC >= 3.5 AND T2.WBC <= 9.0;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND (T2.WBC BETWEEN 3.5 AND 9.0);"
      ]
    ]
  },
  {
    "id": 1308,
    "db_id": "thrombosis_prediction",
    "nlq": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?",
    "gold": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL",
    "evidence": "normal platelet level refers to PLT > 100 and PLT < 400; have other symptoms refers to Diagnosis is not null;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Symptoms IS NOT NULL;",
        "SELECT COUNT(UNIQUE T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.PLT BETWEEN 101 AND 399 AND T2.Symptoms IS NOT NULL;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1, Examination T2 WHERE T1.ID = T2.ID AND T1.PLT > 100 AND T1.PLT < 400 AND NOT T2.Symptoms IS NULL;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 INNER JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Symptoms IS NOT NULL;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Symptoms IS NOT NULL;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT BETWEEN 101 AND 399 AND T2.Symptoms IS NOT NULL;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE (T1.PLT > 100 AND T1.PLT < 400) AND T2.Symptoms IS NOT NULL;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 INNER JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Symptoms IS NOT NULL;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Symptoms IS NOT NULL;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT BETWEEN 101 AND 399 AND T2.Symptoms IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1311,
    "db_id": "thrombosis_prediction",
    "nlq": "How many patients with severe thrombosis have a normal prothrombin time?",
    "gold": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0",
    "evidence": "severe thrombosis refers to Thrombosis = 2 or 1; normal prothrombin time refers to PT < 14;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14;",
        "SELECT COUNT(DISTINCT E.ID) FROM Examination E INNER JOIN Laboratory L ON E.ID = L.ID WHERE E.Thrombosis BETWEEN 1 AND 2 AND L.PT < 14;",
        "SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Thrombosis IN (1, 2) AND Laboratory.PT < 14;",
        "SELECT COUNT(DISTINCT ID) FROM Examination, Laboratory WHERE Examination.ID = Laboratory.ID AND Thrombosis IN (1, 2) AND PT < 14;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1, Laboratory AS T2 WHERE T1.ID = T2.ID AND T1.Thrombosis IN (1, 2) AND T2.PT < 14;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 INNER JOIN Laboratory T2 ON T1.ID = T2.ID WHERE (T1.Thrombosis = 1 OR T1.Thrombosis = 2) AND T2.PT < 14;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 1 OR T1.Thrombosis = 2 AND T2.PT < 14;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE (T1.Thrombosis = 1 OR T1.Thrombosis = 2) AND T2.PT < 14;",
        "SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14;"
      ]
    ]
  },
  {
    "id": 1312,
    "db_id": "student_club",
    "nlq": "What's Angela Sanders's major?",
    "gold": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "evidence": "Angela Sanders is the full name; Full name refers to outputting 2 columns first_name, last_name; major refers to major_name.",
    "infer_predictions": [
      [
        "SELECT T2.major_name FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders';",
        "SELECT major_name FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders');",
        "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders';",
        "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
        "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders');",
        "SELECT T2.major_name FROM member T1, major T2 WHERE T1.link_to_major = T2.major_id AND T1.first_name = 'Angela' AND T1.last_name = 'Sanders';",
        "SELECT major_name FROM major JOIN member ON major.major_id = member.link_to_major AND member.first_name = 'Angela' AND member.last_name = 'Sanders';",
        "SELECT T2.major_name FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id AND T1.first_name = 'Angela' AND T1.last_name = 'Sanders';",
        "SELECT major_name FROM major, member WHERE major.major_id = member.link_to_major AND member.first_name = 'Angela' AND member.last_name = 'Sanders';",
        "SELECT T2.major_name FROM member T1 INNER JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders';"
      ]
    ]
  },
  {
    "id": 1313,
    "db_id": "student_club",
    "nlq": "How many students in the Student_Club are from the College of Engineering?",
    "gold": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering';",
        "SELECT COUNT(T1.member_id) FROM member T1 INNER JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering';",
        "SELECT COUNT(DISTINCT T1.member_id) FROM member T1, major T2 WHERE T1.link_to_major = T2.major_id AND T2.college = 'College of Engineering';",
        "SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
        "SELECT COUNT(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
        "SELECT COUNT(*) FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id AND T2.college = 'College of Engineering';",
        "SELECT COUNT(*) FROM member, major WHERE member.link_to_major = major.major_id AND major.college = 'College of Engineering';",
        "SELECT COUNT(DISTINCT member.member_id) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
        "SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id AND T2.college = 'College of Engineering';",
        "SELECT COUNT(member_id) FROM member, major WHERE member.link_to_major = major.major_id AND major.college = 'College of Engineering';"
      ]
    ]
  },
  {
    "id": 1314,
    "db_id": "student_club",
    "nlq": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "gold": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "evidence": "Full name refers to outputting 2 columns first_name, last_name;",
    "infer_predictions": [
      [
        "SELECT T1.first_name, T1.last_name FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design';",
        "SELECT first_name, last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';",
        "SELECT first_name, last_name FROM member, major WHERE member.link_to_major = major.major_id AND major.department = 'Art and Design';",
        "SELECT m.first_name, m.last_name FROM member m JOIN major d ON m.link_to_major = d.major_id WHERE d.department = 'Art and Design';",
        "SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id AND major.department = 'Art and Design';",
        "SELECT m.first_name, m.last_name FROM member m, major d WHERE m.link_to_major = d.major_id AND d.department = 'Art and Design';",
        "SELECT first_name, last_name FROM member AS m JOIN major AS d ON m.link_to_major = d.major_id WHERE d.department = 'Art and Design';",
        "SELECT m.first_name, m.last_name FROM member m INNER JOIN major d ON m.link_to_major = d.major_id WHERE d.department = 'Art and Design';",
        "SELECT first_name, last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id AND major.department = 'Art and Design';",
        "SELECT m.first_name, m.last_name FROM member m LEFT JOIN major d ON m.link_to_major = d.major_id WHERE d.department = 'Art and Design';"
      ]
    ]
  },
  {
    "id": 1315,
    "db_id": "student_club",
    "nlq": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
    "gold": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "evidence": "Women's Soccer is an event name",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women's Soccer');",
        "SELECT COUNT(DISTINCT A.link_to_member) FROM attendance A JOIN event E ON A.link_to_event = E.event_id WHERE E.event_name = 'Women's Soccer';",
        "SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Women's Soccer');",
        "SELECT COUNT(*) FROM (SELECT DISTINCT link_to_member FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women's Soccer'));",
        "SELECT COUNT(DISTINCT link_to_member) AS attendees_count FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
        "SELECT COUNT(DISTINCT link_to_member) FROM attendance, event WHERE attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer';",
        "SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name LIKE 'Women''s Soccer');",
        "SELECT COUNT(DISTINCT link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer';",
        "SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women's Soccer') GROUP BY link_to_event;",
        "SELECT COUNT(DISTINCT link_to_member) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';"
      ]
    ]
  },
  {
    "id": 1316,
    "db_id": "student_club",
    "nlq": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".",
    "gold": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
    "evidence": "Women's Soccer is an event name; phone numbers refers to phone",
    "infer_predictions": [
      [
        "SELECT M.phone FROM member M JOIN attendance A ON M.member_id = A.link_to_member JOIN event E ON A.link_to_event = E.event_id WHERE E.event_name = 'Women's Soccer';",
        "SELECT phone FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Women's Soccer'));",
        "SELECT phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
        "SELECT M.phone FROM member AS M, attendance AS A, event AS E WHERE M.member_id = A.link_to_member AND A.link_to_event = E.event_id AND E.event_name = 'Women's Soccer';",
        "SELECT DISTINCT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
        "SELECT phone FROM member WHERE EXISTS (SELECT 1 FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member = member.member_id AND event.event_name = 'Women's Soccer');",
        "SELECT phone FROM member JOIN attendance USING (member_id) JOIN event USING (event_id) WHERE event_name = 'Women's Soccer';",
        "SELECT M.phone FROM member M WHERE M.member_id IN (SELECT A.link_to_member FROM attendance A JOIN event E ON A.link_to_event = E.event_id WHERE E.event_name = 'Women's Soccer');",
        "SELECT phone FROM member WHERE member_id IN (SELECT link_to_member FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event_name = 'Women's Soccer');",
        "SELECT M.phone FROM member M INNER JOIN (SELECT link_to_member FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event_name = 'Women's Soccer') AS A ON M.member_id = A.link_to_member;"
      ]
    ]
  },
  {
    "id": 1317,
    "db_id": "student_club",
    "nlq": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "gold": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
    "evidence": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women's Soccer' AND T1.t_shirt_size = 'Medium';",
        "SELECT COUNT(T1.member_id) FROM member T1 INNER JOIN attendance T2 ON T1.member_id = T2.link_to_member INNER JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women's Soccer' AND T1.t_shirt_size = 'Medium';",
        "SELECT COUNT(DISTINCT T1.member_id) FROM member T1, attendance T2, event T3 WHERE T1.member_id = T2.link_to_member AND T2.link_to_event = T3.event_id AND T3.event_name = 'Women's Soccer' AND T1.t_shirt_size = 'Medium';",
        "SELECT COUNT(*) FROM (SELECT T1.member_id FROM member T1 JOIN attendance T2 ON T1.member_id = T2.link_to_member JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women's Soccer' AND T1.t_shirt_size = 'Medium') AS SubQuery;",
        "SELECT COUNT(*) FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women's Soccer')) AND t_shirt_size = 'Medium';",
        "SELECT COUNT(*) FROM member T1 WHERE EXISTS (SELECT 1 FROM attendance T2 JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T2.link_to_member = T1.member_id AND T3.event_name = 'Women's Soccer') AND T1.t_shirt_size = 'Medium';",
        "SELECT COUNT(*) FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Women's Soccer')) AND t_shirt_size = 'Medium';",
        "SELECT COUNT(member_id) FROM member WHERE member_id IN (SELECT link_to_member FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event_name = 'Women's Soccer') AND t_shirt_size = 'Medium';",
        "SELECT COUNT(*) FROM (SELECT member_id FROM member WHERE t_shirt_size = 'Medium' INTERSECT SELECT link_to_member FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women's Soccer')) AS Result;",
        "SELECT COUNT(*) FROM member AS T1 WHERE T1.t_shirt_size = 'Medium' AND EXISTS (SELECT * FROM attendance AS T2 JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T2.link_to_member = T1.member_id AND T3.event_name = 'Women's Soccer');"
      ]
    ]
  },
  {
    "id": 1318,
    "db_id": "student_club",
    "nlq": "What is the event that has the highest attendance of the students from the Student_Club?",
    "gold": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name HAVING COUNT(T2.link_to_event) = (SELECT MAX(attendance_count) FROM (SELECT COUNT(link_to_event) AS attendance_count FROM attendance GROUP BY link_to_event) AS subquery)",
    "evidence": "event with highest attendance refers to MAX(COUNT(link_to_event))",
    "infer_predictions": [
      [
        "SELECT T2.event_id FROM event T2 JOIN (SELECT link_to_event, COUNT(link_to_member) AS num_attendees FROM attendance GROUP BY link_to_event) T1 ON T2.event_id = T1.link_to_event ORDER BY T1.num_attendees DESC LIMIT 1;",
        "SELECT event_id FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_member) DESC LIMIT 1);",
        "WITH EventAttendance AS (SELECT link_to_event, COUNT(link_to_member) AS attendees_count FROM attendance GROUP BY link_to_event) SELECT event_id FROM event JOIN EventAttendance ON event.event_id = EventAttendance.link_to_event ORDER BY attendees_count DESC LIMIT 1;",
        "SELECT event_id FROM event WHERE event_id = (SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(*) DESC LIMIT 1);",
        "SELECT T1.event_id FROM (SELECT event_id FROM event JOIN (SELECT link_to_event, COUNT(*) AS total_attendance FROM attendance GROUP BY link_to_event) AS SubQuery ON event.event_id = SubQuery.link_to_event ORDER BY total_attendance DESC LIMIT 1) T1;",
        "SELECT event_id FROM event WHERE event_id = (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) = (SELECT MAX(count) FROM (SELECT COUNT(link_to_member) AS count FROM attendance GROUP BY link_to_event)));",
        "SELECT TOP 1 event_id FROM (SELECT event_id FROM event INNER JOIN (SELECT link_to_event, COUNT(link_to_member) AS attendees FROM attendance GROUP BY link_to_event) AS AttendanceCounts ON event.event_id = AttendanceCounts.link_to_event ORDER BY attendees DESC) AS Result;",
        "SELECT event_id FROM event WHERE event_id = (SELECT link_to_event FROM (SELECT link_to_event, COUNT(link_to_member) AS total_attendees FROM attendance GROUP BY link_to_event ORDER BY total_attendees DESC) AS MostAttended LIMIT 1);",
        "WITH RankedEvents AS (SELECT event_id, RANK() OVER (ORDER BY COUNT(link_to_member) DESC) AS rank FROM attendance JOIN event ON attendance.link_to_event = event.event_id GROUP BY link_to_event) SELECT event_id FROM RankedEvents WHERE rank = 1;",
        "SELECT event_id FROM event WHERE event_id = (SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_member) DESC FETCH FIRST 1 ROWS ONLY);"
      ]
    ]
  },
  {
    "id": 1319,
    "db_id": "student_club",
    "nlq": "Which college is the vice president of the Student_Club from?",
    "gold": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "evidence": "Vice President is a position of the Student Club",
    "infer_predictions": [
      [
        "SELECT T2.college FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President';",
        "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE position = 'Vice President');",
        "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President';",
        "SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE position = 'Vice President');",
        "SELECT T2.college FROM member T1, major T2 WHERE T1.link_to_major = T2.major_id AND T1.position = 'Vice President';",
        "SELECT T2.college FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id AND T1.position = 'Vice President';",
        "SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE position LIKE 'Vice President');",
        "SELECT T2.college FROM member T1 INNER JOIN major T2 ON T1.link_to_major = T2.major_id AND T1.position LIKE 'Vice President';",
        "SELECT T2.college FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President';",
        "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE position LIKE 'Vice President');"
      ]
    ]
  },
  {
    "id": 1320,
    "db_id": "student_club",
    "nlq": "Please list the event names of all the events attended by Maya Mclean.",
    "gold": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T3.event_name FROM member T1 JOIN attendance T2 ON T1.member_id = T2.link_to_member JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean';",
        "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean'));",
        "SELECT T3.event_name FROM event T3 WHERE EXISTS (SELECT 1 FROM attendance T2 JOIN member T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T2.link_to_event = T3.event_id);",
        "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance JOIN member ON member.member_id = attendance.link_to_member WHERE first_name = 'Maya' AND last_name = 'Mclean');",
        "SELECT T3.event_name FROM event T3 INNER JOIN attendance T2 ON T3.event_id = T2.link_to_event INNER JOIN member T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean';",
        "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean'));",
        "SELECT T3.event_name FROM event T3, attendance T2, member T1 WHERE T3.event_id = T2.link_to_event AND T2.link_to_member = T1.member_id AND T1.first_name = 'Maya' AND T1.last_name = 'Mclean';",
        "SELECT event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';",
        "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance, member WHERE member.member_id = attendance.link_to_member AND member.first_name = 'Maya' AND member.last_name = 'Mclean');",
        "SELECT T3.event_name FROM event T3 JOIN (SELECT link_to_event FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean')) T2 ON T3.event_id = T2.link_to_event;"
      ]
    ]
  },
  {
    "id": 1321,
    "db_id": "student_club",
    "nlq": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
    "gold": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "evidence": "events attended in 2019 refers to YEAR(event_date) = 2019",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM event AS T3 JOIN attendance AS T2 ON T3.event_id = T2.link_to_event JOIN member AS T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019';",
        "SELECT COUNT(DISTINCT T3.event_id) FROM member T1 INNER JOIN attendance T2 ON T1.member_id = T2.link_to_member INNER JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019';",
        "SELECT COUNT(T3.event_id) FROM member T1, attendance T2, event T3 WHERE T1.member_id = T2.link_to_member AND T2.link_to_event = T3.event_id AND T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019';",
        "SELECT COUNT(*) FROM event T3 WHERE T3.event_id IN (SELECT T2.link_to_event FROM attendance T2 WHERE T2.link_to_member = (SELECT T1.member_id FROM member T1 WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison')) AND strftime('%Y', T3.event_date) = '2019';",
        "SELECT COUNT(*) FROM event T3 WHERE EXISTS (SELECT 1 FROM attendance T2 JOIN member T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND T2.link_to_event = T3.event_id) AND strftime('%Y', T3.event_date) = '2019';",
        "SELECT COUNT(*) FROM (SELECT T3.event_id FROM member T1 JOIN attendance T2 ON T1.member_id = T2.link_to_member JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019') AS attended_events;",
        "SELECT COUNT(*) FROM event AS T3 WHERE T3.event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison')) AND strftime('%Y', T3.event_date) = '2019';",
        "SELECT COUNT(*) FROM event T3 INNER JOIN (SELECT link_to_event FROM attendance T2 INNER JOIN member T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison') AS attended_events ON T3.event_id = attended_events.link_to_event WHERE strftime('%Y', T3.event_date) = '2019';",
        "SELECT COUNT(*) FROM event T3 JOIN attendance T2 ON T3.event_id = T2.link_to_event JOIN member T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND SUBSTR(T3.event_date, 1, 4) = '2019';",
        "SELECT COUNT(*) FROM event T3 WHERE T3.event_id IN (SELECT T2.link_to_event FROM attendance T2 WHERE T2.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison')) AND SUBSTR(T3.event_date, 1, 4) = '2019';"
      ]
    ]
  },
  {
    "id": 1322,
    "db_id": "student_club",
    "nlq": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "gold": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
    "evidence": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM (SELECT T1.event_id FROM event T1 JOIN attendance T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10 AND T1.type = 'Meeting');",
        "SELECT COUNT(event_id) FROM (SELECT event_id FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_id HAVING COUNT(link_to_member) > 10 AND type = 'Meeting');",
        "SELECT COUNT(*) FROM (SELECT e.event_id FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10);",
        "SELECT COUNT(DISTINCT event.event_id) FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING COUNT(attendance.link_to_member) > 10;",
        "SELECT COUNT(*) FROM (SELECT event_id FROM event WHERE type = 'Meeting' AND event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 10));",
        "SELECT COUNT(*) FROM (SELECT T1.event_id FROM event T1 INNER JOIN attendance T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10);",
        "SELECT COUNT(*) FROM (SELECT e.event_id FROM event e, attendance a WHERE e.event_id = a.link_to_event AND e.type = 'Meeting' GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10);",
        "SELECT COUNT(*) FROM (SELECT DISTINCT e.event_id FROM event e LEFT JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10);",
        "SELECT COUNT(*) FROM (SELECT event_id FROM event WHERE type = 'Meeting' GROUP BY event_id HAVING COUNT(event_id) IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 10));",
        "SELECT COUNT(*) FROM (SELECT e.event_id FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING e.type = 'Meeting' AND COUNT(a.link_to_member) > 10);"
      ]
    ]
  },
  {
    "id": 1323,
    "db_id": "student_club",
    "nlq": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "gold": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
    "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20.",
    "infer_predictions": [
      [
        "SELECT E.event_name FROM event E JOIN attendance A ON E.event_id = A.link_to_event GROUP BY E.event_id HAVING COUNT(A.link_to_member) > 20 AND E.type != 'fundraiser';",
        "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20) AND type <> 'fundraiser';",
        "SELECT event_name FROM event WHERE type NOT LIKE 'fundraiser' AND event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(*) > 20);",
        "SELECT E.event_name FROM event E WHERE E.type != 'fundraiser' AND EXISTS (SELECT 1 FROM attendance A WHERE A.link_to_event = E.event_id GROUP BY A.link_to_event HAVING COUNT(A.link_to_member) > 20);",
        "SELECT event_name FROM event WHERE type != 'fundraiser' AND event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20);",
        "SELECT E.event_name FROM event E INNER JOIN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20) A ON E.event_id = A.link_to_event WHERE E.type <> 'fundraiser';",
        "SELECT E.event_name FROM event E, attendance A WHERE E.event_id = A.link_to_event AND E.type NOT IN ('fundraiser') GROUP BY E.event_id HAVING COUNT(A.link_to_member) > 20;",
        "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20) AND type NOT IN ('fundraiser');",
        "SELECT E.event_name FROM event E WHERE NOT E.type = 'fundraiser' AND E.event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20);",
        "SELECT E.event_name FROM event E JOIN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20) AS A ON E.event_id = A.link_to_event WHERE E.type != 'fundraiser';"
      ]
    ]
  },
  {
    "id": 1324,
    "db_id": "student_club",
    "nlq": "What is the average attendance of meetings in 2020?",
    "gold": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
    "evidence": "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))",
    "infer_predictions": [
      [
        "SELECT AVG(count) FROM (SELECT COUNT(*) as count FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(total_attendance) FROM (SELECT COUNT(T1.link_to_event) AS total_attendance FROM event T2 LEFT JOIN attendance T1 ON T2.event_id = T1.link_to_event WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(attendance_count) FROM (SELECT COUNT(T1.link_to_event) AS attendance_count FROM event T2 INNER JOIN attendance T1 ON T2.event_id = T1.link_to_event WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(attendance_count) FROM (SELECT COUNT(*) AS attendance_count FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(number_of_attendees) FROM (SELECT COUNT(*) AS number_of_attendees FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(attendee_count) FROM (SELECT COUNT(T1.link_to_member) AS attendee_count FROM event T2 JOIN attendance T1 ON T2.event_id = T1.link_to_event WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(attendance_total) FROM (SELECT COUNT(T1.link_to_member) AS attendance_total FROM event T2 LEFT JOIN attendance T1 ON T2.event_id = T1.link_to_event WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(attendance_number) FROM (SELECT COUNT(*) AS attendance_number FROM attendance T1 INNER JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(count_attendance) FROM (SELECT COUNT(*) AS count_attendance FROM attendance T1 INNER JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)",
        "SELECT AVG(attendees) FROM (SELECT COUNT(*) AS attendees FROM attendance T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)"
      ]
    ]
  },
  {
    "id": 1325,
    "db_id": "student_club",
    "nlq": "What is the most expensive item that was spent in support of club events?",
    "gold": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
    "evidence": "item in support of club events refers to expense_description; most expensive refers to MAX(cost)",
    "infer_predictions": [
      [
        "SELECT expense_description FROM expense WHERE cost = (SELECT MAX(cost) FROM expense);",
        "SELECT T1.expense_description FROM expense T1 WHERE T1.cost = (SELECT MAX(T2.cost) FROM expense T2);",
        "SELECT expense_description FROM expense WHERE cost IN (SELECT MAX(cost) FROM expense);",
        "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1;",
        "WITH MaxCost AS (SELECT MAX(cost) AS max_cost FROM expense) SELECT expense_description FROM expense, MaxCost WHERE expense.cost = MaxCost.max_cost;",
        "SELECT expense_description FROM expense WHERE cost = (SELECT MAX(cost) FROM expense WHERE cost IS NOT NULL);",
        "SELECT T1.expense_description FROM expense T1 JOIN (SELECT MAX(cost) AS max_cost FROM expense) T2 ON T1.cost = T2.max_cost;",
        "SELECT expense_description FROM expense WHERE cost = (SELECT MAX(cost) FROM expense WHERE cost IS NOT NULL);",
        "WITH HighestExpense AS (SELECT MAX(cost) AS HighestCost FROM expense) SELECT expense_description FROM expense WHERE cost = (SELECT HighestCost FROM HighestExpense);",
        "SELECT expense_description FROM (SELECT expense_description, cost FROM expense ORDER BY cost DESC) WHERE ROWNUM = 1;"
      ]
    ]
  },
  {
    "id": 1326,
    "db_id": "student_club",
    "nlq": "How many members of the Student_Club have majored Environmental Engineering?\n",
    "gold": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
    "evidence": "'Environmental Engineering' is the major name",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
        "SELECT COUNT(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
        "SELECT COUNT(DISTINCT member.member_id) FROM member, major WHERE member.link_to_major = major.major_id AND major.major_name = 'Environmental Engineering';",
        "SELECT COUNT(*) FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE mj.major_name = 'Environmental Engineering';",
        "SELECT COUNT(*) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering';",
        "SELECT COUNT(*) FROM member m INNER JOIN major mj ON m.link_to_major = mj.major_id AND mj.major_name = 'Environmental Engineering';",
        "SELECT COUNT(member.member_id) FROM member JOIN major ON member.link_to_major = major.major_id AND major.major_name = 'Environmental Engineering';",
        "SELECT COUNT(*) FROM member LEFT JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
        "SELECT COUNT(*) FROM member m, major mj WHERE m.link_to_major = mj.major_id AND mj.major_name = 'Environmental Engineering';",
        "SELECT COUNT(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Environmental Engineering';"
      ]
    ]
  },
  {
    "id": 1327,
    "db_id": "student_club",
    "nlq": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "gold": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "evidence": "full name of members refers to outputting two columns first_name, last_name; 'Laugh Out Loud' is an event name;",
    "infer_predictions": [
      [
        "SELECT T3.first_name, T3.last_name FROM event T1 JOIN attendance T2 ON T1.event_id = T2.link_to_event JOIN member T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Laugh Out Loud';",
        "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Laugh Out Loud'));",
        "SELECT M.first_name, M.last_name FROM member M INNER JOIN attendance A ON M.member_id = A.link_to_member INNER JOIN event E ON A.link_to_event = E.event_id WHERE E.event_name = 'Laugh Out Loud';",
        "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event_name = 'Laugh Out Loud');",
        "SELECT M.first_name, M.last_name FROM member M, attendance A, event E WHERE M.member_id = A.link_to_member AND A.link_to_event = E.event_id AND E.event_name = 'Laugh Out Loud';",
        "SELECT first_name, last_name FROM member WHERE EXISTS (SELECT 1 FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud' AND attendance.link_to_member = member.member_id);",
        "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';",
        "SELECT first_name, last_name FROM member INNER JOIN (SELECT link_to_member FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Laugh Out Loud')) AS AttendedMembers ON member.member_id = AttendedMembers.link_to_member;",
        "SELECT DISTINCT first_name, last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';",
        "SELECT first_name, last_name FROM member, attendance, event WHERE member.member_id = attendance.link_to_member AND attendance.link_to_event = event.event_id AND event.event_name = 'Laugh Out Loud';"
      ]
    ]
  },
  {
    "id": 1328,
    "db_id": "student_club",
    "nlq": "List the last name of all the students who majored Law and Constitutional Studies. \n",
    "gold": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
    "evidence": "'Law and Constitutional Studies' is the major name",
    "infer_predictions": [
      [
        "SELECT M.last_name FROM member M JOIN major MJ ON M.link_to_major = MJ.major_id WHERE MJ.major_name = 'Law and Constitutional Studies';",
        "SELECT last_name FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');",
        "SELECT last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id AND major.major_name = 'Law and Constitutional Studies';",
        "SELECT M.last_name FROM member M, major MJ WHERE M.link_to_major = MJ.major_id AND MJ.major_name = 'Law and Constitutional Studies';",
        "SELECT last_name FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');",
        "SELECT M.last_name FROM member M JOIN major MJ ON M.link_to_major = MJ.major_id AND MJ.major_name = 'Law and Constitutional Studies';",
        "SELECT last_name FROM member AS M JOIN major AS MJ ON M.link_to_major = MJ.major_id WHERE MJ.major_name = 'Law and Constitutional Studies';",
        "SELECT M.last_name FROM member M INNER JOIN major MJ ON M.link_to_major = MJ.major_id WHERE MJ.major_name = 'Law and Constitutional Studies';",
        "SELECT last_name FROM member WHERE EXISTS (SELECT 1 FROM major WHERE major.major_id = member.link_to_major AND major.major_name = 'Law and Constitutional Studies');",
        "SELECT M.last_name FROM member M WHERE M.link_to_major IN (SELECT MJ.major_id FROM major MJ WHERE MJ.major_name = 'Law and Constitutional Studies');"
      ]
    ]
  },
  {
    "id": 1329,
    "db_id": "student_club",
    "nlq": "What county did Sherri Ramsey grew up?",
    "gold": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.county FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';",
        "SELECT county FROM zip_code WHERE zip_code IN (SELECT zip FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey');",
        "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';",
        "SELECT county FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey');",
        "SELECT T2.county FROM member T1, zip_code T2 WHERE T1.zip = T2.zip_code AND T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';",
        "SELECT T2.county FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code AND T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';",
        "SELECT T2.county FROM member T1 INNER JOIN zip_code T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';",
        "SELECT county FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey') LIMIT 1;",
        "SELECT T2.county FROM member T1 LEFT JOIN zip_code T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';",
        "SELECT T2.county FROM member T1 CROSS JOIN zip_code T2 WHERE T1.zip = T2.zip_code AND T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';"
      ]
    ]
  },
  {
    "id": 1330,
    "db_id": "student_club",
    "nlq": "What college offers the major that Tyler Hewitt took?",
    "gold": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T2.college FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';",
        "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt');",
        "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';",
        "SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt');",
        "SELECT T2.college FROM member T1, major T2 WHERE T1.link_to_major = T2.major_id AND T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';",
        "SELECT college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';",
        "SELECT T2.college FROM member T1 JOIN major T2 ON T1.link_to_major = T2.major_id AND T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';",
        "SELECT T2.college FROM member T1 LEFT JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';",
        "SELECT T2.college FROM member T1 RIGHT JOIN major T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';",
        "SELECT T2.college FROM member T1 CROSS JOIN major T2 WHERE T1.link_to_major = T2.major_id AND T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';"
      ]
    ]
  },
  {
    "id": 1331,
    "db_id": "student_club",
    "nlq": "What is the amount of the funds that the Vice President received?",
    "gold": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "infer_predictions": [
      [
        "SELECT SUM(T2.amount) FROM member T1 JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President';",
        "SELECT SUM(amount) FROM income WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President');",
        "SELECT SUM(income.amount) AS total_funds FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';",
        "SELECT TOTAL(T2.amount) FROM member T1 INNER JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President';",
        "SELECT SUM(amount) FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE position = 'Vice President');",
        "SELECT SUM(i.amount) FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President';",
        "SELECT SUM(amount) FROM income, member WHERE member.member_id = income.link_to_member AND member.position = 'Vice President';",
        "SELECT SUM(income.amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';",
        "SELECT SUM(i.amount) FROM member m, income i WHERE m.member_id = i.link_to_member AND m.position = 'Vice President';",
        "SELECT SUM(amount) FROM income i INNER JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President';"
      ]
    ]
  },
  {
    "id": 1454,
    "db_id": "student_club",
    "nlq": "What is the percentage of the cost for the meeting events?",
    "gold": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "evidence": "meeting events refers to type = 'Meeting'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100",
    "infer_predictions": [
      [
        "SELECT (SUM(T3.cost) / COUNT(DISTINCT T1.event_id)) * 100 AS percentage_cost FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event JOIN expense T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting' AND T3.cost IS NOT NULL;",
        "SELECT (SUM(expense.cost) / COUNT(DISTINCT event.event_id)) * 100 AS percentage_cost FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.type = 'Meeting' AND expense.cost IS NOT NULL;",
        "SELECT (TOTAL(T3.cost) / COUNT(DISTINCT T1.event_id)) * 100 AS percentage_cost FROM event T1, budget T2, expense T3 WHERE T1.event_id = T2.link_to_event AND T2.budget_id = T3.link_to_budget AND T1.type = 'Meeting' AND T3.cost IS NOT NULL;",
        "SELECT (SUM(T3.cost) / COUNT(DISTINCT T1.event_id)) * 100 AS percentage_cost FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event JOIN expense T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting' AND T3.cost IS NOT NULL;",
        "SELECT (SUM(expense.cost) / COUNT(DISTINCT event.event_id)) * 100 AS percentage_cost FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.type = 'Meeting' AND expense.cost IS NOT NULL;",
        "SELECT (SUM(T3.cost) / COUNT(DISTINCT T1.event_id)) * 100 AS percentage_cost FROM event T1 INNER JOIN budget T2 ON T1.event_id = T2.link_to_event INNER JOIN expense T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting' AND T3.cost IS NOT NULL;",
        "SELECT (SUM(expense.cost) / COUNT(DISTINCT event.event_id)) * 100 AS percentage_cost FROM event, budget, expense WHERE event.event_id = budget.link_to_event AND budget.budget_id = expense.link_to_budget AND event.type = 'Meeting' AND expense.cost IS NOT NULL;",
        "SELECT (SUM(T3.cost) / COUNT(DISTINCT T1.event_id)) * 100 AS percentage_cost FROM event T1, budget T2, expense T3 WHERE T1.event_id = T2.link_to_event AND T2.budget_id = T3.link_to_budget AND T1.type = 'Meeting' AND T3.cost IS NOT NULL;",
        "SELECT (SUM(expense.cost) / COUNT(DISTINCT event.event_id)) * 100 AS percentage_cost FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.type = 'Meeting' AND expense.cost IS NOT NULL;",
        "SELECT (SUM(T3.cost) / COUNT(DISTINCT T1.event_id)) * 100 AS percentage_cost FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event JOIN expense T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting' AND T3.cost IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1456,
    "db_id": "student_club",
    "nlq": "List the full name of the top five members who spend the most money in the descending order of spending.",
    "gold": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
    "evidence": "Full name refers to outputting 2 columns first_name, last_name; spend the most money refers to MAX(expense.cost)",
    "infer_predictions": [
      [
        "SELECT T2.first_name, T2.last_name FROM member T2 JOIN (SELECT link_to_member, SUM(cost) AS total_spending FROM expense WHERE cost IS NOT NULL GROUP BY link_to_member ORDER BY total_spending DESC LIMIT 5) T1 ON T2.member_id = T1.link_to_member;",
        "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY SUM(cost) DESC LIMIT 5);",
        "SELECT M.first_name, M.last_name FROM member M INNER JOIN (SELECT link_to_member, SUM(cost) AS total_cost FROM expense GROUP BY link_to_member ORDER BY total_cost DESC LIMIT 5) E ON M.member_id = E.link_to_member;",
        "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY SUM(cost) DESC LIMIT 5);",
        "SELECT M.first_name, M.last_name FROM member M JOIN (SELECT link_to_member, SUM(cost) AS total_spending FROM expense GROUP BY link_to_member ORDER BY total_spending DESC LIMIT 5) AS E ON M.member_id = E.link_to_member;",
        "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM (SELECT link_to_member, SUM(cost) AS total_cost FROM expense GROUP BY link_to_member ORDER BY total_cost DESC LIMIT 5) T);",
        "SELECT M.first_name, M.last_name FROM member M, (SELECT link_to_member, SUM(cost) AS total_cost FROM expense GROUP BY link_to_member ORDER BY total_cost DESC LIMIT 5) E WHERE M.member_id = E.link_to_member;",
        "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM expense GROUP BY link_to_member HAVING SUM(cost) IS NOT NULL ORDER BY SUM(cost) DESC LIMIT 5);",
        "SELECT M.first_name, M.last_name FROM member M JOIN (SELECT link_to_member, SUM(cost) AS total_spending FROM expense WHERE cost IS NOT NULL GROUP BY link_to_member ORDER BY total_spending DESC LIMIT 5) E ON M.member_id = E.link_to_member;",
        "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM expense WHERE cost IS NOT NULL GROUP BY link_to_member ORDER BY SUM(cost) DESC LIMIT 5);"
      ]
    ]
  },
  {
    "id": 1457,
    "db_id": "student_club",
    "nlq": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "gold": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
    "evidence": "Full name refers to outputting 2 columns first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)",
    "infer_predictions": [
      [
        "SELECT T1.first_name, T1.last_name, T1.phone FROM member T1 JOIN expense T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense)",
        "SELECT first_name, last_name, phone FROM member WHERE member_id IN (SELECT link_to_member FROM expense WHERE cost > (SELECT AVG(cost) FROM expense))",
        "WITH AverageCost AS (SELECT AVG(cost) AS avg_cost FROM expense) SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member, AverageCost WHERE e.cost > AverageCost.avg_cost",
        "SELECT m.first_name, m.last_name, m.phone FROM member m WHERE EXISTS (SELECT 1 FROM expense e WHERE e.link_to_member = m.member_id AND e.cost > (SELECT AVG(cost) FROM expense))",
        "SELECT m.first_name, m.last_name, m.phone FROM member m INNER JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense)",
        "SELECT first_name, last_name, phone FROM member WHERE member_id IN (SELECT link_to_member FROM expense GROUP BY link_to_member HAVING cost > AVG(cost))",
        "WITH ExpenseAverage AS (SELECT AVG(cost) AS avg_cost FROM expense) SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT avg_cost FROM ExpenseAverage)",
        "SELECT m.first_name, m.last_name, m.phone FROM member m, expense e WHERE m.member_id = e.link_to_member AND e.cost > (SELECT AVG(cost) FROM expense e2)",
        "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN (SELECT link_to_member FROM expense WHERE cost > (SELECT AVG(cost) FROM expense)) e ON m.member_id = e.link_to_member",
        "WITH AvgExpense AS (SELECT AVG(cost) AS average_cost FROM expense) SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member CROSS JOIN AvgExpense WHERE e.cost > AvgExpense.average_cost"
      ]
    ]
  },
  {
    "id": 1458,
    "db_id": "student_club",
    "nlq": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
    "gold": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
    "evidence": "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )",
    "infer_predictions": [
      [
        "SELECT (SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) - (SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) AS percentage_difference FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code;",
        "SELECT (COUNT(*) FILTER (WHERE T2.state = 'New Jersey') * 1.0 / COUNT(*)) - (COUNT(*) FILTER (WHERE T2.state = 'Vermont') * 1.0 / COUNT(*)) AS percentage_difference FROM member T1 INNER JOIN zip_code T2 ON T1.zip = T2.zip_code;",
        "SELECT (COUNT(CASE WHEN T2.state = 'New Jersey' THEN 1 END) * 1.0 / COUNT(T1.member_id)) - (COUNT(CASE WHEN T2.state = 'Vermont' THEN 1 END) * 1.0 / COUNT(T1.member_id)) AS percentage_difference FROM member T1 LEFT JOIN zip_code T2 ON T1.zip = T2.zip_code;",
        "SELECT (SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) / COUNT(T1.member_id)) - (SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(T1.member_id)) AS percentage_difference FROM member T1, zip_code T2 WHERE T1.zip = T2.zip_code;",
        "SELECT (SELECT COUNT(*) FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code WHERE T2.state = 'New Jersey') * 1.0 / COUNT(*) - (SELECT COUNT(*) FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Vermont') * 1.0 / COUNT(*) AS percentage_difference FROM member;",
        "SELECT (SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM member) FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code WHERE T2.state = 'New Jersey') - (SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM member) FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Vermont') AS percentage_difference FROM member;",
        "SELECT (COUNT(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE NULL END) * 1.0 / COUNT(T1.member_id)) - (COUNT(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE NULL END) * 1.0 / COUNT(T1.member_id)) AS percentage_difference FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code;",
        "SELECT (SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM member)) - (SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM member)) AS percentage_difference FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code;",
        "SELECT (COUNT(IF(T2.state = 'New Jersey', 1, NULL)) * 1.0 / COUNT(T1.member_id)) - (COUNT(IF(T2.state = 'Vermont', 1, NULL)) * 1.0 / COUNT(T1.member_id)) AS percentage_difference FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code;",
        "SELECT (COUNT(DISTINCT CASE WHEN T2.state = 'New Jersey' THEN T1.member_id END) * 1.0 / COUNT(DISTINCT T1.member_id)) - (COUNT(DISTINCT CASE WHEN T2.state = 'Vermont' THEN T1.member_id END) * 1.0 / COUNT(DISTINCT T1.member_id)) AS percentage_difference FROM member T1 JOIN zip_code T2 ON T1.zip = T2.zip_code;"
      ]
    ]
  },
  {
    "id": 1460,
    "db_id": "student_club",
    "nlq": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "gold": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "evidence": "full name refers to outputting 2 columns first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
    "infer_predictions": [
      [
        "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT first_name, last_name, cost FROM member, expense WHERE member.member_id = expense.link_to_member AND expense.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT m.first_name, m.last_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT first_name, last_name, cost FROM member JOIN expense ON member_id = link_to_member AND expense_description = 'Water, Veggie tray, supplies';",
        "SELECT T2.first_name, T2.last_name, T1.cost FROM member AS T2 JOIN expense AS T1 ON T2.member_id = T1.link_to_member WHERE T1.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT m.first_name, m.last_name, e.cost FROM expense e, member m WHERE e.link_to_member = m.member_id AND e.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT first_name, last_name, cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense_description = 'Water, Veggie tray, supplies';",
        "SELECT T2.first_name, T2.last_name, T1.cost FROM expense T1 INNER JOIN member T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT first_name, last_name, cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';"
      ]
    ]
  },
  {
    "id": 1462,
    "db_id": "student_club",
    "nlq": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "gold": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "infer_predictions": [
      [
        "SELECT T2.category, T2.amount FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker';",
        "SELECT category, amount FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'January Speaker');",
        "SELECT b.category, b.amount FROM budget b INNER JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker';",
        "SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'January Speaker');",
        "SELECT T2.category, T2.amount FROM event T1, budget T2 WHERE T1.event_id = T2.link_to_event AND T1.event_name = 'January Speaker';",
        "SELECT category, amount FROM budget WHERE EXISTS (SELECT 1 FROM event WHERE event_id = link_to_event AND event_name = 'January Speaker');",
        "SELECT category, amount FROM budget JOIN event ON event_id = link_to_event WHERE event_name = 'January Speaker';",
        "SELECT T2.category, T2.amount FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker';",
        "SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'January Speaker') AND amount IS NOT NULL;",
        "SELECT b.category, b.amount FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'January Speaker' AND b.amount IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1463,
    "db_id": "student_club",
    "nlq": "List the event names which were budgeted for the food.",
    "gold": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "evidence": "budgeted for food refers to category = 'Food'",
    "infer_predictions": [
      [
        "SELECT T2.event_name FROM budget T1 JOIN event T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food';",
        "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';",
        "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Food');",
        "SELECT E.event_name FROM event E, budget B WHERE E.event_id = B.link_to_event AND B.category = 'Food';",
        "SELECT DISTINCT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';",
        "SELECT event_name FROM event WHERE EXISTS (SELECT 1 FROM budget WHERE budget.link_to_event = event.event_id AND budget.category = 'Food');",
        "SELECT event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event AND b.category = 'Food';",
        "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Food');",
        "SELECT T2.event_name FROM event T2 INNER JOIN budget T1 ON T2.event_id = T1.link_to_event WHERE T1.category = 'Food';",
        "SELECT event_name FROM event e WHERE e.event_id IN (SELECT link_to_event FROM budget WHERE category = 'Food');"
      ]
    ]
  },
  {
    "id": 1464,
    "db_id": "student_club",
    "nlq": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "gold": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "evidence": "Full name refers to outputting 2 columns first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
    "infer_predictions": [
      [
        "SELECT T1.first_name, T1.last_name, T2.amount FROM member T1 JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '9/9/2019';",
        "SELECT first_name, last_name, amount FROM member INNER JOIN income ON member.member_id = income.link_to_member AND income.date_received = '9/9/2019';",
        "SELECT m.first_name, m.last_name, i.amount FROM member m, income i WHERE m.member_id = i.link_to_member AND i.date_received = '9/9/2019';",
        "SELECT first_name, last_name, amount FROM member JOIN income USING (member_id) WHERE date_received = '9/9/2019';",
        "SELECT m.first_name, m.last_name, i.amount FROM member AS m JOIN income AS i ON m.member_id = i.link_to_member WHERE i.date_received = '9/9/2019';",
        "SELECT first_name, last_name, amount FROM member m INNER JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '9/9/2019';",
        "SELECT T1.first_name, T1.last_name, T2.amount FROM member T1 INNER JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '9/9/2019';",
        "SELECT m.first_name, m.last_name, i.amount FROM member m LEFT JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '9/9/2019';",
        "SELECT first_name, last_name, amount FROM member NATURAL JOIN income WHERE date_received = '9/9/2019';",
        "SELECT m.first_name, m.last_name, i.amount FROM member m RIGHT JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '9/9/2019';"
      ]
    ]
  },
  {
    "id": 1465,
    "db_id": "student_club",
    "nlq": "Which budget category does the expense 'Posters' fall to?",
    "gold": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "evidence": "'Posters' refers to expense description",
    "infer_predictions": [
      [
        "SELECT T2.category FROM expense T1 JOIN budget T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters';",
        "SELECT category FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters');",
        "SELECT T2.category FROM expense T1 INNER JOIN budget T2 ON T1.link_to_budget = T2.budget_id AND T1.expense_description = 'Posters';",
        "SELECT category FROM budget WHERE budget_id = (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters');",
        "SELECT T2.category FROM expense AS T1 JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters';",
        "SELECT category FROM budget WHERE EXISTS (SELECT 1 FROM expense WHERE expense_description = 'Posters' AND link_to_budget = budget.budget_id);",
        "SELECT T2.category FROM expense T1, budget T2 WHERE T1.link_to_budget = T2.budget_id AND T1.expense_description = 'Posters';",
        "SELECT category FROM budget AS T2 WHERE T2.budget_id IN (SELECT T1.link_to_budget FROM expense AS T1 WHERE T1.expense_description = 'Posters');",
        "SELECT T2.category FROM expense T1 JOIN budget T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description LIKE 'Posters';",
        "SELECT category FROM budget WHERE budget_id = (SELECT link_to_budget FROM expense WHERE expense_description LIKE 'Posters');"
      ]
    ]
  },
  {
    "id": 1488,
    "db_id": "debit_card_specializing",
    "nlq": "Who among KAM's customers consumed the most? How much did it consume?",
    "gold": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;",
        "SELECT CustomerID, MAX(TotalConsumption) FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 INNER JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID) GROUPED ORDER BY TotalConsumption DESC LIMIT 1;",
        "SELECT TOP 1 T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1, yearmonth T2 WHERE T1.CustomerID = T2.CustomerID AND T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC;",
        "SELECT CustomerID, TotalConsumption FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID HAVING T2.Consumption IS NOT NULL ORDER BY TotalConsumption DESC) WHERE rownum = 1;",
        "SELECT CustomerID, TotalConsumption FROM (SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption > 0 GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC) WHERE ROWNUM <= 1;",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC FETCH FIRST 1 ROWS ONLY;",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 LEFT JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 INNER JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 CROSS JOIN yearmonth T2 WHERE T1.CustomerID = T2.CustomerID AND T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;",
        "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID HAVING SUM(T2.Consumption) = (SELECT MAX(Total) FROM (SELECT SUM(T2.Consumption) AS Total FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID))"
      ]
    ]
  },
  {
    "id": 1501,
    "db_id": "debit_card_specializing",
    "nlq": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "gold": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
    "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;",
    "infer_predictions": [
      [
        "SELECT DISTINCT T3.Country FROM yearmonth T1 JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID AND T1.Date = T2.Date JOIN gasstations T3 ON T2.GasStationID = T3.GasStationID WHERE T1.Date = '201306';",
        "SELECT DISTINCT Country FROM gasstations WHERE GasStationID IN (SELECT GasStationID FROM transactions_1k WHERE Date IN (SELECT Date FROM yearmonth WHERE Date = '201306'));",
        "SELECT DISTINCT g.Country FROM gasstations g INNER JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE EXISTS (SELECT 1 FROM yearmonth y WHERE y.Date = '201306' AND y.CustomerID = t.CustomerID);",
        "SELECT DISTINCT g.Country FROM gasstations g, transactions_1k t, yearmonth y WHERE g.GasStationID = t.GasStationID AND t.CustomerID = y.CustomerID AND t.Date = y.Date AND y.Date = '201306';",
        "SELECT DISTINCT Country FROM gasstations WHERE GasStationID IN (SELECT GasStationID FROM transactions_1k WHERE Date = '201306');",
        "SELECT DISTINCT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN yearmonth y ON t.CustomerID = y.CustomerID AND t.Date = y.Date WHERE y.Date = '201306';",
        "SELECT DISTINCT Country FROM gasstations WHERE GasStationID IN (SELECT GasStationID FROM transactions_1k t JOIN yearmonth y ON t.Date = y.Date AND t.CustomerID = y.CustomerID WHERE y.Date = '201306');",
        "SELECT DISTINCT g.Country FROM gasstations g WHERE EXISTS (SELECT 1 FROM transactions_1k t JOIN yearmonth y ON t.Date = y.Date AND t.CustomerID = y.CustomerID WHERE y.Date = '201306' AND t.GasStationID = g.GasStationID);",
        "SELECT DISTINCT Country FROM gasstations g INNER JOIN (SELECT DISTINCT GasStationID FROM transactions_1k WHERE Date = '201306') t ON g.GasStationID = t.GasStationID;",
        "SELECT DISTINCT g.Country FROM gasstations g WHERE g.GasStationID IN (SELECT t.GasStationID FROM transactions_1k t INNER JOIN yearmonth y ON t.Date = y.Date WHERE y.Date = '201306' AND t.CustomerID = y.CustomerID);"
      ]
    ]
  },
  {
    "id": 1510,
    "db_id": "debit_card_specializing",
    "nlq": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
    "gold": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
    "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
    "infer_predictions": [
      [
        "SELECT AVG(Amount * Price) AS AverageTotalPrice FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';",
        "SELECT AVG(T1.Amount * T1.Price) FROM transactions_1k T1 INNER JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';",
        "SELECT AVG(total_price) FROM (SELECT T1.Amount * T1.Price AS total_price FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE');",
        "SELECT AVG(T1.Amount * T1.Price) AS AverageTotalPrice FROM transactions_1k T1, gasstations T2 WHERE T1.GasStationID = T2.GasStationID AND T2.Country = 'CZE';",
        "SELECT AVG(product) FROM (SELECT T1.Amount * T1.Price AS product FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE') AS subquery;",
        "SELECT AVG(T1.Amount * T1.Price) FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';",
        "SELECT AVG(total_price) FROM (SELECT Amount * Price AS total_price FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE')) AS derived_table;",
        "SELECT AVG(T1.Amount * T1.Price) AS AverageTotalPrice FROM transactions_1k T1 LEFT JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';",
        "SELECT AVG(T1.Amount * T1.Price) FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';",
        "SELECT AVG(T1.Amount * T1.Price) AS AverageTotalPrice FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';"
      ]
    ]
  },
  {
    "id": 1511,
    "db_id": "debit_card_specializing",
    "nlq": "For the customers who paid in the euro, what is their average total price of the transactions?",
    "gold": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
    "evidence": "",
    "infer_predictions": [
      [
        "SELECT AVG(T2.Amount * T2.Price) AS AverageTotalPrice FROM customers T1 JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'",
        "SELECT AVG(total_price) AS AverageTotalPrice FROM (SELECT T2.Amount * T2.Price AS total_price FROM customers T1 INNER JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR')",
        "SELECT AVG(Amount * Price) AS AverageTotalPrice FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')",
        "SELECT AVG(product) AS AverageTotalPrice FROM (SELECT T2.Amount * T2.Price AS product FROM customers T1, transactions_1k T2 WHERE T1.CustomerID = T2.CustomerID AND T1.Currency = 'EUR')",
        "WITH EuroTransactions AS (SELECT T2.Amount * T2.Price AS TotalPrice FROM customers T1 JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR') SELECT AVG(TotalPrice) AS AverageTotalPrice FROM EuroTransactions",
        "SELECT AVG(T2.Amount * T2.Price) AS AverageTotalPrice FROM customers T1, transactions_1k T2 WHERE T1.CustomerID = T2.CustomerID AND T1.Currency = 'EUR'",
        "SELECT AVG(T2.Amount * T2.Price) AS AverageTotalPrice FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'",
        "SELECT AVG(TotalPrice) AS AverageTotalPrice FROM (SELECT T2.Amount * T2.Price AS TotalPrice FROM customers T1 JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR') AS SubQuery",
        "SELECT AVG(T2.Amount * T2.Price) AS AverageTotalPrice FROM customers T1 INNER JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'",
        "WITH FilteredCustomers AS (SELECT CustomerID FROM customers WHERE Currency = 'EUR'), CalculatedPrices AS (SELECT Amount * Price AS TotalPrice FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM FilteredCustomers)) SELECT AVG(TotalPrice) AS AverageTotalPrice FROM CalculatedPrices"
      ]
    ]
  },
  {
    "id": 1531,
    "db_id": "debit_card_specializing",
    "nlq": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "gold": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
    "evidence": "average price per single item = Total(price) / Total(amount)",
    "infer_predictions": [
      [
        "SELECT T2.CustomerID, T2.Currency, T1.AvgPricePerItem FROM (SELECT CustomerID, SUM(Price * Amount) / SUM(Amount) AS AvgPricePerItem FROM transactions_1k GROUP BY CustomerID ORDER BY SUM(Price * Amount) DESC LIMIT 1) T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID;",
        "WITH CustomerSpending AS (SELECT CustomerID, SUM(Price * Amount) AS TotalSpending FROM transactions_1k GROUP BY CustomerID), TopCustomer AS (SELECT CustomerID FROM CustomerSpending ORDER BY TotalSpending DESC LIMIT 1), AvgPrice AS (SELECT CustomerID, SUM(Price * Amount) / SUM(Amount) AS AvgPricePerItem FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM TopCustomer) GROUP BY CustomerID) SELECT T.CustomerID, C.Currency, T.AvgPricePerItem FROM AvgPrice T JOIN customers C ON T.CustomerID = C.CustomerID;",
        "SELECT C.CustomerID, C.Currency, (SELECT SUM(Price * Amount) / SUM(Amount) FROM transactions_1k WHERE CustomerID = C.CustomerID) AS AvgPricePerItem FROM customers C WHERE C.CustomerID = (SELECT CustomerID FROM transactions_1k GROUP BY CustomerID ORDER BY SUM(Price * Amount) DESC LIMIT 1);",
        "SELECT C.CustomerID, C.Currency, A.AvgPricePerItem FROM customers C JOIN (SELECT CustomerID, SUM(Price * Amount) / SUM(Amount) AS AvgPricePerItem FROM transactions_1k GROUP BY CustomerID HAVING CustomerID = (SELECT CustomerID FROM transactions_1k GROUP BY CustomerID ORDER BY SUM(Price * Amount) DESC LIMIT 1)) A ON C.CustomerID = A.CustomerID;",
        "WITH TotalSpending AS (SELECT CustomerID, SUM(Price * Amount) AS Total FROM transactions_1k GROUP BY CustomerID), MaxSpender AS (SELECT CustomerID FROM TotalSpending ORDER BY Total DESC LIMIT 1), AvgPrice AS (SELECT CustomerID, SUM(Price * Amount) / SUM(Amount) AS AvgPrice FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM MaxSpender) GROUP BY CustomerID) SELECT M.CustomerID, C.Currency, A.AvgPrice FROM MaxSpender M JOIN customers C ON M.CustomerID = C.CustomerID JOIN AvgPrice A ON M.CustomerID = A.CustomerID;",
        "SELECT C.CustomerID, C.Currency, (SUM(T.Price * T.Amount) / SUM(T.Amount)) AS AvgPricePerItem FROM transactions_1k T JOIN customers C ON T.CustomerID = C.CustomerID GROUP BY T.CustomerID ORDER BY SUM(T.Price * T.Amount) DESC LIMIT 1;",
        "WITH Spending AS (SELECT CustomerID, SUM(Price * Amount) AS TotalSpending, SUM(Price * Amount) / SUM(Amount) AS AvgPricePerItem FROM transactions_1k GROUP BY CustomerID) SELECT C.CustomerID, C.Currency, S.AvgPricePerItem FROM Spending S JOIN customers C ON S.CustomerID = C.CustomerID WHERE S.TotalSpending = (SELECT MAX(TotalSpending) FROM Spending);",
        "SELECT C.CustomerID, C.Currency, (SELECT SUM(Price * Amount) / SUM(Amount) FROM transactions_1k T WHERE T.CustomerID = C.CustomerID) AS AvgPricePerItem FROM customers C WHERE C.CustomerID = (SELECT CustomerID FROM transactions_1k GROUP BY CustomerID ORDER BY SUM(Price * Amount) DESC LIMIT 1);",
        "WITH CustomerTotal AS (SELECT CustomerID, SUM(Price * Amount) AS TotalSpending, SUM(Price * Amount) / SUM(Amount) AS AvgPricePerItem FROM transactions_1k GROUP BY CustomerID) SELECT C.CustomerID, C.Currency, T.AvgPricePerItem FROM CustomerTotal T JOIN customers C ON T.CustomerID = C.CustomerID WHERE T.TotalSpending = (SELECT MAX(TotalSpending) FROM CustomerTotal);",
        "SELECT C.CustomerID, C.Currency, A.AvgPricePerItem FROM (SELECT CustomerID, SUM(Price * Amount) / SUM(Amount) AS AvgPricePerItem FROM transactions_1k GROUP BY CustomerID ORDER BY SUM(Price * Amount) DESC LIMIT 1) A JOIN customers C ON A.CustomerID = C.CustomerID;"
      ]
    ]
  }
]