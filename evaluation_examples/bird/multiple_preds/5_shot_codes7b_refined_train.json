[
    {
      "id": 0,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT max(`free meal count (k-12)`) / max(`enrollment (k-12)`) FROM frpm WHERE `county code` = '01';",
          "SELECT max(`free meal count (k-12)`) / max(`enrollment (k-12)`) FROM frpm WHERE `county name` = 'Alameda';",
          "SELECT MAX(`free meal count (k-12)`) / MAX(`enrollment (k-12)`) FROM frpm WHERE `county code` = '01';",
          "SELECT MAX(`free meal count (k-12)`) / MAX(`enrollment (k-12)`) FROM frpm WHERE `county name` = 'Alameda';"
        ]
      ]
    },
    {
      "id": 1,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE schools.edopsname = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3;",
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopsname = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3;",
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopsname = 'Continuation School' ORDER BY frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` ASC LIMIT 3;",
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm JOIN schools schools ON frpm.cdscode = schools.cdscode WHERE schools.edopsname = 'Continuation School' ORDER BY frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` ASC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 2,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno';",
          "SELECT schools.zip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno';",
          "SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno' AND schools.county = 'Fresno';",
          "SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`county name` = 'Fresno' AND frpm.`charter school (y/n)` = 1;"
        ]
      ]
    },
    {
      "id": 3,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT mailstrabr FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1;",
          "SELECT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(frpm.`frpm count (k-12)`) FROM frpm);",
          "SELECT mailstreet FROM schools WHERE cdscode = (SELECT cdscode FROM frpm WHERE `frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm));",
          "SELECT mailstrabr FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(frpm.`frpm count (k-12)`) FROM frpm);"
        ]
      ]
    },
    {
      "id": 4,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.fundingtype = 'Directly funded' AND schools.charter = 1;",
          "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.soctype = 'K-12 Schools (Public)';",
          "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype =;",
          "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.soctype = 'K-12 Schools (Public)' AND frpm.`frpm count (k-12)` > 0;"
        ]
      ]
    },
    {
      "id": 5,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 400 AND schools.virtual = 'F';",
          "SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' AND satscores.avgscrmath > 400;",
          "SELECT count(schools.virtual) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 400 AND schools.virtual = 'F';",
          "SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 400 AND schools.virtual = 'F';"
        ]
      ]
    },
    {
      "id": 6,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT * FROM schools WHERE schools.numtsttakr > 500 AND schools.magnet = 1;",
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr > 500 AND schools.magnet = 1;",
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1;",
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.magnet = 1 AND satscores.numtsttakr > 500;"
        ]
      ]
    },
    {
      "id": 7,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone FROM schools ORDER BY numtsttakr DESC LIMIT 1;",
          "SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE numtsttakr >= 1500 ORDER BY numtsttakr DESC LIMIT 1);",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE numtsttakr >= 1500) ORDER BY phone ASC LIMIT 1;",
          "SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE numtsttakr = (SELECT MAX(numtsttakr) FROM satscores WHERE rtype = 'S') AND rtype = 'S');"
        ]
      ]
    },
    {
      "id": 8,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT numtsttakr FROM satscores JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm);",
          "SELECT numtsttakr FROM satscores WHERE cds IN (SELECT cdscode FROM frpm WHERE `frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm));",
          "SELECT numtsttakr FROM satscores JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(frpm.`frpm count (k-12)`) FROM frpm);",
          "SELECT satscores.numtsttakr FROM satscores JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm);"
        ]
      ]
    },
    {
      "id": 9,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';",
          "SELECT count(DISTINCT schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';",
          "SELECT count(schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';",
          "SELECT count(DISTINCT schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1;"
        ]
      ]
    },
    {
      "id": 10,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `frpm count (ages 5-17)` FROM frpm WHERE `school name` = (SELECT sname FROM satscores ORDER BY avgscrread DESC LIMIT 1);",
          "SELECT `frpm count (ages 5-17)` FROM frpm WHERE `school name` = (SELECT sname FROM satscores WHERE rtype = 'D' ORDER BY avgscrread DESC LIMIT 1);",
          "SELECT frpm.`frpm count (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrread = (SELECT max(avgscrread) FROM satscores);",
          "SELECT `frpm count (ages 5-17)` FROM frpm WHERE `school name` = (SELECT `school name` FROM satscores WHERE `avgscrread` = (SELECT max(`avgscrread`) FROM satscores));"
        ]
      ]
    },
    {
      "id": 11,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.cdscode FROM schools WHERE schools.`enrollment (k-12)` + schools.`enrollment (ages 5-17)` > 500;",
          "SELECT satscores.cds FROM satscores WHERE satscores.enroll12 > 500;",
          "SELECT frpm.cdscode FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` + frpm.`enrollment (ages 5-17)` > 500;",
          "SELECT schools.cdscode FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` + frpm.`enrollment (ages 5-17)`) > 500;"
        ]
      ]
    },
    {
      "id": 12,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT max(`free meal count (ages 5-17)`) FROM frpm WHERE `enrollment (ages 5-17)` / `free meal count (ages 5-17)` > 0.3;",
          "SELECT max(frpm.`free meal count (ages 5-17)`) FROM frpm WHERE frpm.`enrollment (ages 5-17)` / frpm.`free meal count (ages 5-17)` > 0.3;",
          "SELECT max(frpm.`free meal count (ages 5-17)`) FROM frpm WHERE frpm.`enrollment (ages 5-17)` / frpm.`free meal count (ages 5-17)` >= 0.3;",
          "SELECT max(`free meal count (ages 5-17)`) FROM frpm WHERE `enrollment (ages 5-17)` / `free meal count (ages 5-17)` >= 0.3;"
        ]
      ]
    },
    {
      "id": 13,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3;",
          "SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY (satscores.numge1500 / satscores.numtsttakr) DESC LIMIT 3;",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3;",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY (satscores.numge1500 / satscores.numtsttakr) DESC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 14,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT ncesschool FROM frpm ORDER BY `enrollment (ages 5-17)` DESC LIMIT 5;",
          "SELECT ncesschool FROM frpm WHERE `enrollment (ages 5-17)` IS NOT NULL ORDER BY `enrollment (ages 5-17)` DESC LIMIT 5;",
          "SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (ages 5-17)` IS NOT NULL ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5;",
          "SELECT ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (ages 5-17)` IS NOT NULL ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 15,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1;",
          "SELECT dname FROM satscores WHERE rtype = 'D' ORDER BY avgscrread DESC LIMIT 1;",
          "SELECT satscores.dname FROM satscores WHERE satscores.rtype = 'D' ORDER BY satscores.avgscrread DESC LIMIT 1;",
          "SELECT satscores.dname FROM satscores WHERE satscores.rtype = 'D' GROUP BY satscores.dname ORDER BY avg(satscores.avgscrread) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 16,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100;",
          "SELECT count(DISTINCT schools.cdscode) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100;",
          "SELECT count(DISTINCT schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100;",
          "SELECT count(*) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr < 100 AND schools.county = 'Alameda';"
        ]
      ]
    },
    {
      "id": 17,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT satscores.cds, satscores.avgscrwrite FROM satscores WHERE satscores.avgscrwrite > 499 ORDER BY satscores.avgscrwrite DESC;",
          "SELECT frpm.`charter school number`, satscores.avgscrwrite FROM frpm JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrwrite > 499;",
          "SELECT frpm.`charter school number`, satscores.avgscrwrite FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrwrite > 499;",
          "SELECT satscores.cds, satscores.sname, satscores.avgscrwrite FROM satscores WHERE satscores.avgscrwrite > 499 ORDER BY satscores.avgscrwrite DESC;"
        ]
      ]
    },
    {
      "id": 18,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND satscores.numtsttakr <= 250;",
          "SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;",
          "SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr <= 250 AND schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded';",
          "SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND satscores.numtsttakr <= 250;"
        ]
      ]
    },
    {
      "id": 19,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone FROM schools WHERE cdscode = (SELECT cdscode FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores));",
          "SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE rtype = 'M' ORDER BY avgscrmath DESC LIMIT 1);",
          "SELECT phone FROM schools WHERE cdscode = (SELECT cdscode FROM satscores WHERE rtype = 'M' ORDER BY avgscrmath DESC LIMIT 1);",
          "SELECT schools.phone FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores);"
        ]
      ]
    },
    {
      "id": 20,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND schools.county = 'Amador';",
          "SELECT count(schools.school) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`high grade` = 12 AND frpm.`low grade` = 9 AND schools.county = 'Amador';",
          "SELECT count(frpm.cdscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`high grade` = 12 AND frpm.`low grade` = 9 AND schools.county = 'Amador';",
          "SELECT count(schools.cdscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND schools.county = 'Amador';"
        ]
      ]
    },
    {
      "id": 21,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.city LIKE 'Los Angeles' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700;",
          "SELECT count(*) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.city LIKE 'Los Angeles' AND schools.gsoffered LIKE 'K-12' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700;",
          "SELECT count(*) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Los Angeles' AND schools.gsoffered = 'K-12' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700;",
          "SELECT count(DISTINCT schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city LIKE 'Los Angeles' AND schools.gsoffered LIKE 'K-12' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700;"
        ]
      ]
    },
    {
      "id": 22,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1;",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;",
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.cname = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 23,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sname, street FROM schools WHERE enroll12 - frpm.`enrollment (ages 5-17)` > 30;",
          "SELECT sname, street FROM satscores WHERE enroll12 - `enrollment (ages 5-17)` > 30;",
          "SELECT sname, street FROM satscores WHERE enroll12 - enroll517 > 30;",
          "SELECT sname, street FROM schools WHERE enroll12 - enroll512 > 30;"
        ]
      ]
    },
    {
      "id": 24,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` > 0.1 AND satscores.numge1500 > 0;",
          "SELECT sname FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` > 0.1 AND satscores.numge1500 > 0;",
          "SELECT sname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`free meal count (k-12)` > 0.1 AND satscores.numge1500 > 0;",
          "SELECT sname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE (frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)`) > 0.1 AND satscores.numge1500 > 0;"
        ]
      ]
    },
    {
      "id": 25,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT fundingtype FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE cname = 'Riverside' AND avgscrmath > 400;",
          "SELECT DISTINCT fundingtype FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE cname = 'Riverside' AND avgscrmath > 400;",
          "SELECT sname, fundingtype FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE cname = 'Riverside' AND avgscrmath > 400;",
          "SELECT dname, fundingtype FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE cname = 'Riverside' AND avgscrmath > 400;"
        ]
      ]
    },
    {
      "id": 26,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, schools.city, schools.state, schools.zip FROM schools, frpm, satscores WHERE schools.cdscode = frpm.cdscode AND schools.cdscode = satscores.cds AND frpm.`county name` = 'Monterey' AND satscores.enroll12 > 800 AND satscores.rtype = 'D';",
          "SELECT schools.school, schools.city, schools.state, schools.zip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Monterey' AND satscores.enroll12 > 800 AND satscores.rtype = 'D';",
          "SELECT schools.school, schools.city, schools.state, schools.zip FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE satscores.enroll12 > 800 AND satscores.rtype = 'D' AND frpm.`county name` = 'Monterey';",
          "SELECT schools.school, schools.city, schools.state, schools.zip FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE satscores.enroll12 > 800 AND satscores.rtype = 'D' AND frpm.`county name` = 'Monterey' AND schools.city = 'Monterey';"
        ]
      ]
    },
    {
      "id": 27,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2000-01-01';",
          "SELECT sname, avgscrwrite FROM satscores INNER JOIN schools ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2000-01-01';",
          "SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.opendate < '2000-01-01';",
          "SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2001-01-01';"
        ]
      ]
    },
    {
      "id": 28,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT avg((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm WHERE frpm.`charter funding type` = 'Locally funded');",
          "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT avg((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm);",
          "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT avg((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm) AND frpm.`charter funding type` = 'Locally funded';",
          "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT AVG((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm WHERE frpm.`charter funding type` = 'Locally funded');"
        ]
      ]
    },
    {
      "id": 29,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.opendate FROM schools WHERE schools.edopscode = 'K-12' ORDER BY schools.enroll12 DESC LIMIT 1;",
          "SELECT schools.opendate FROM schools WHERE schools.edopscode = 'D' ORDER BY schools.enroll12 DESC LIMIT 1;",
          "SELECT schools.opendate FROM schools WHERE schools.edopsname = 'K-12' ORDER BY schools.enroll12 DESC LIMIT 1;",
          "SELECT schools.opendate FROM schools WHERE schools.edopsname = 'K-12' ORDER BY schools.opendate ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 30,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.enroll12 LIMIT 5;",
          "SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.enroll12 ASC LIMIT 5;",
          "SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.enroll12 LIMIT 5;",
          "SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.enroll12 ASC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 31,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D');",
          "SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D' AND enroll12 = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D'));",
          "SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D') AND frpm.`free meal count (k-12)` = (SELECT max(`free meal count (k-12)`) FROM satscores WHERE rtype = 'D');",
          "SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D') AND frpm.`free meal count (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D');"
        ]
      ]
    },
    {
      "id": 32,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = '66' ORDER BY `free meal count (k-12)` DESC LIMIT 5;",
          "SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = 66 ORDER BY `free meal count (k-12)` DESC LIMIT 5;",
          "SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = '66' GROUP BY frpm.cdscode ORDER BY `free meal count (k-12)` DESC LIMIT 5;",
          "SELECT frpm.`frpm count (k-12)` / frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = '66' GROUP BY frpm.`frpm count (k-12)` ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 33,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `school name`, `free meal count (ages 5-17)` FROM frpm WHERE `free meal count (ages 5-17)` BETWEEN 1900 AND 2000;",
          "SELECT frpm.`school name`, frpm.`free meal count (ages 5-17)` FROM frpm WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000;",
          "SELECT `school name`, `free meal count (ages 5-17)` FROM frpm WHERE `free meal count (ages 5-17)` >= 1900 AND `free meal count (ages 5-17)` <= 2000;",
          "SELECT frpm.`school name`, frpm.`free meal count (ages 5-17)` FROM frpm WHERE frpm.`free meal count (ages 5-17)` >= 1900 AND frpm.`free meal count (ages 5-17)` <= 2000;"
        ]
      ]
    },
    {
      "id": 34,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey';",
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey';",
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Kacey';",
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Kacey';"
        ]
      ]
    },
    {
      "id": 35,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 1;",
          "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`enrollment (k-12)` = (SELECT min(frpm.`enrollment (k-12)`) FROM frpm WHERE frpm.`charter school (y/n)` = 1);",
          "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`enrollment (k-12)` = (SELECT min(frpm.`enrollment (k-12)`) FROM frpm);",
          "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`enrollment (k-12)` = (SELECT MIN(frpm.`enrollment (k-12)`) FROM frpm);"
        ]
      ]
    },
    {
      "id": 36,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 DESC LIMIT 3;",
          "SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = 3 ORDER BY satscores.numtsttakr DESC LIMIT 1;",
          "SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 >= 3 ORDER BY satscores.numge1500 DESC LIMIT 1;",
          "SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 >= 1500 GROUP BY schools.school ORDER BY COUNT(*) DESC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 37,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT street, city, state, zip FROM schools ORDER BY (numge1500 / numtsttakr) ASC LIMIT 1;",
          "SELECT street, city, state, zip FROM schools INNER JOIN satscores ON schools.cds = satscores.cds WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);",
          "SELECT street, city, state, zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);",
          "SELECT street, city, state, zip FROM schools INNER JOIN satscores ON schools.cds = satscores.cds WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT Min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);"
        ]
      ]
    },
    {
      "id": 38,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000;",
          "SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000 AND schools.county = 'Los Angeles';",
          "SELECT schools.website FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr BETWEEN 2000 AND 3000;",
          "SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Los Angeles' AND satscores.numtsttakr BETWEEN 2000 AND 3000;"
        ]
      ]
    },
    {
      "id": 39,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT avg(numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31';",
          "SELECT avg(numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate LIKE '1980%';",
          "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31';",
          "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate LIKE '1980%';"
        ]
      ]
    },
    {
      "id": 40,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE avgscrread = (SELECT min(avgscrread) FROM satscores WHERE dname = 'Fresno Unified');",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrread = (SELECT min(avgscrread) FROM satscores WHERE dname = 'Fresno Unified'));",
          "SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrread = (SELECT min(avgscrread) FROM satscores WHERE dname = 'Fresno Unified');",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrread = (SELECT min(avgscrread) FROM satscores WHERE satscores.dname = 'Fresno Unified');"
        ]
      ]
    },
    {
      "id": 41,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school FROM schools WHERE schools.virtual = 'F' ORDER BY schools.county LIMIT 5;",
          "SELECT satscores.sname FROM satscores JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;",
          "SELECT frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;",
          "SELECT frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 42,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`school type` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1;",
          "SELECT frpm.`school type` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores);",
          "SELECT frpm.`school type` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores);",
          "SELECT frpm.`school type` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT MAX(avgscrmath) FROM satscores);"
        ]
      ]
    },
    {
      "id": 43,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT avg(satscores.avgscrmath), schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.county ORDER BY avg(satscores.avgscrmath) ASC LIMIT 1;",
          "SELECT avg(satscores.avgscrmath) , schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.county ORDER BY avg(satscores.avgscrmath) ASC LIMIT 1;",
          "SELECT avg(satscores.avgscrmath), satscores.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY satscores.county ORDER BY avg(satscores.avgscrmath) ASC LIMIT 1;",
          "SELECT avg(satscores.avgscrmath), satscores.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath = (SELECT min(avgscrmath) FROM satscores) GROUP BY satscores.county;"
        ]
      ]
    },
    {
      "id": 44,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;",
          "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500;",
          "SELECT schools.city, avg(satscores.avgscrwrite) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;",
          "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;"
        ]
      ]
    },
    {
      "id": 45,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci';",
          "SELECT sname, avgscrwrite FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE admfname1 = 'Ricci';",
          "SELECT sname, avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE admfname1 = 'Ricci';",
          "SELECT schools.school, satscores.avgscrwrite FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.admfname1 = 'Ricci';"
        ]
      ]
    },
    {
      "id": 46,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT * FROM schools WHERE doc = 31 AND soctype = 'State Special Schools';",
          "SELECT * FROM schools WHERE doc = 31 AND soctype = 'State Special Schools' ORDER BY `enrollment (k-12)` DESC;",
          "SELECT * FROM schools WHERE doc = '31' AND soctype = 'State Special Schools' ORDER BY `enrollment (k-12)` DESC;",
          "SELECT * FROM schools WHERE doc = 31 AND soctype = 'State Special Schools' AND gsoffered = '12' ORDER BY enroll12 DESC;"
        ]
      ]
    },
    {
      "id": 47,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '52' AND frpm.`county code` = '01';",
          "SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.doc = '52' AND schools.county = 'Alameda' AND schools.doctype = 'State Special Schools' AND frpm.`county code` = '01';",
          "SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.doc = '52' AND schools.county = 'Alameda' AND schools.doctype = 'State Special Schools' AND frpm.`county name` = 'Alameda';",
          "SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.doc = '52' AND schools.county = 'Alameda' AND schools.doctype = 'State Special Schools' AND frpm.`county code` = '01' AND frpm.`district code` = 10017;"
        ]
      ]
    },
    {
      "id": 48,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Orange';",
          "SELECT cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county code` = '54';",
          "SELECT cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Orange';",
          "SELECT cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county code` = '54';"
        ]
      ]
    },
    {
      "id": 49,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(*) DESC LIMIT 1;",
          "SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(schools.closeddate) DESC LIMIT 1;",
          "SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county ORDER BY count(schools.closeddate) DESC LIMIT 1;",
          "SELECT DISTINCT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(*) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 50,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sname, street FROM schools WHERE cdscode = (SELECT cdscode FROM satscores WHERE rtype = 'D' ORDER BY avgscrmath DESC LIMIT 7);",
          "SELECT schools.street FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE satscores.rtype = 'D') LIMIT 7;",
          "SELECT schools.street FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.soctype = 'K-12 Schools (Public)' AND satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE satscores.rtype = 'D') LIMIT 7;",
          "SELECT schools.street FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.soctype = 'K-12 Schools (Public)' AND satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE schools.soctype = 'K-12 Schools (Public)') LIMIT 7;"
        ]
      ]
    },
    {
      "id": 51,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.avgscrread LIMIT 1;",
          "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' AND satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores WHERE rtype = 'D' );",
          "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' AND satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores );",
          "SELECT schools.mailstreet FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' AND satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores WHERE rtype = 'D' );"
        ]
      ]
    },
    {
      "id": 52,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(numge1500) FROM satscores WHERE schools.mailcity = 'Lakeport';",
          "SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500;",
          "SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport';",
          "SELECT count(DISTINCT schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500;"
        ]
      ]
    },
    {
      "id": 53,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';",
          "SELECT count(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';",
          "SELECT sum(satscores.numtsttakr) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';",
          "SELECT sum(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno';"
        ]
      ]
    },
    {
      "id": 54,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`school name`, schools.mailzip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Avetik';",
          "SELECT schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.admfname1 = 'Avetik';",
          "SELECT schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school name` = 'FAME Public Charter' AND schools.admfname1 = 'Avetik';",
          "SELECT schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school name` = 'FAME Public Charter' AND frpm.admfname1 = 'Avetik';"
        ]
      ]
    },
    {
      "id": 55,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) FROM schools WHERE schools.mailstate = 'CA';",
          "SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) FROM schools WHERE schools.state = 'CA';",
          "SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.cdscode ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.cdscode ELSE NULL END) AS REAL) FROM schools WHERE schools.mailstate = 'CA';",
          "SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) AS Ratio FROM schools WHERE schools.mailstate = 'CA';"
        ]
      ]
    },
    {
      "id": 56,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT schools.school) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.city = 'San Joaquin';",
          "SELECT count(DISTINCT schools.cdscode) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.city = 'San Joaquin';",
          "SELECT count(DISTINCT schools.school) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.mailcity = 'San Joaquin';",
          "SELECT count(DISTINCT schools.school) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.mailcity = 'San Joaquin' AND frpm.`charter school (y/n)` = 1;"
        ]
      ]
    },
    {
      "id": 57,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone, schools.ext FROM schools JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 333;",
          "SELECT schools.phone, schools.ext FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite = (SELECT max(avgscrwrite) FROM satscores) LIMIT 333;",
          "SELECT schools.phone, schools.ext FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite = (SELECT max(avgscrwrite) FROM satscores) LIMIT 332;",
          "SELECT schools.phone, schools.ext FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite = (SELECT max(avgscrwrite) FROM satscores) ORDER BY satscores.avgscrwrite DESC LIMIT 333;"
        ]
      ]
    },
    {
      "id": 58,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone, schools.ext FROM schools WHERE schools.zip = '95203-3704';",
          "SELECT schools.school, schools.phone, schools.ext FROM schools WHERE schools.zip = '95203-3704';",
          "SELECT schools.phone, schools.ext, schools.school FROM schools WHERE schools.zip = '95203-3704';",
          "SELECT schools.phone, schools.ext FROM schools WHERE schools.zip = 95203-3704;"
        ]
      ]
    },
    {
      "id": 59,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.website FROM schools WHERE schools.admfname1 = 'Mike' AND schools.admfname2 = 'Dante';",
          "SELECT schools.website FROM schools WHERE schools.admfname1 = 'MIke' AND schools.admfname2 = 'Dante';",
          "SELECT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE admfname1 = 'Mike' AND admfname2 = 'Dante';",
          "SELECT schools.website FROM schools WHERE schools.admfname1 = 'MIke' AND schools.admfname2 = 'Mike' OR schools.admfname1 = 'Dante' AND schools.admfname2 = 'Dante';"
        ]
      ]
    },
    {
      "id": 60,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.website FROM schools WHERE schools.charter = 1 AND schools.virtual = 'P' AND schools.county = 'San Joaquin';",
          "SELECT schools.website FROM schools WHERE schools.charter = 1 AND schools.virtual = 'P' AND schools.`county name` = 'San Joaquin';",
          "SELECT schools.website FROM schools WHERE schools.virtual = 'P' AND schools.county = 'San Joaquin';",
          "SELECT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.charter = 1 AND schools.virtual = 'P' AND frpm.`county name` = 'San Joaquin';"
        ]
      ]
    },
    {
      "id": 61,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.charter = 1 AND schools.city = 'Hickman' AND schools.doc = '52';",
          "SELECT count(DISTINCT schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.charter = 1 AND schools.city = 'Hickman' AND schools.doc = '52';",
          "SELECT count(DISTINCT frpm.`charter school number`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.charter = 1 AND schools.city = 'Hickman';",
          "SELECT count(DISTINCT frpm.`charter school number`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.charter = 1 AND schools.city = 'Hickman' AND schools.doc = '52';"
        ]
      ]
    },
    {
      "id": 62,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(frpm.`free meal count (k-12)`) FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`percent (%) eligible free (k-12)` < 0.18;",
          "SELECT sum(frpm.`free meal count (k-12)`) FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`percent (%) eligible free (k-12)` < 0.0018;",
          "SELECT sum(frpm.`free meal count (k-12)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`percent (%) eligible free (k-12)` < 0.18;",
          "SELECT sum(frpm.`enrollment (k-12)`) FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`percent (%) eligible free (k-12)` < 0.18;"
        ]
      ]
    },
    {
      "id": 63,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admfname1, schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school number` = '00D2';",
          "SELECT frpm.`charter school number`, frpm.`school name`, schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school number` = '00D2';",
          "SELECT frpm.`charter school number`, frpm.`school name`, frpm.`district name` FROM frpm WHERE frpm.`charter school number` = '00D2';",
          "SELECT schools.admfname1, schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school number` = '00D2' AND frpm.`charter school (y/n)` = 1;"
        ]
      ]
    },
    {
      "id": 64,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailcity = 'Hickman' AND frpm.`charter school number` = '00D4';",
          "SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D4' AND schools.mailcity = 'Hickman';",
          "SELECT SUM(frpm.`charter school (y/n)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.mailcity = 'Hickman' AND frpm.`charter school number` = '00D4';",
          "SELECT count(*) FROM schools WHERE schools.mailcity = 'Hickman' AND schools.cdscode = '00D4';"
        ]
      ]
    },
    {
      "id": 65,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT (count(DISTINCT schools.cdscode) * 100.0 / (SELECT count(DISTINCT cdscode) FROM schools WHERE county = 'Santa Clara')) AS percentage FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter funding type` = 'Locally funded';",
          "SELECT (count(DISTINCT schools.cdscode) * 100.0 / (SELECT count(DISTINCT schools.cdscode) FROM schools WHERE schools.county = 'Santa Clara')) AS percentage FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter funding type` = 'Locally funded';",
          "SELECT (count(DISTINCT schools.cdscode) * 100.0 / (SELECT count(DISTINCT cdscode) FROM schools WHERE county = 'Santa Clara')) AS percentage FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter funding type` = 'Locally funded' AND frpm.`county name` = 'Santa Clara';",
          "SELECT (count(DISTINCT schools.cdscode) * 100.0 / (SELECT count(DISTINCT cdscode) FROM schools WHERE county = 'Santa Clara')) AS percentage FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter funding type` = 'Locally funded' AND schools.county = 'Santa Clara';"
        ]
      ]
    },
    {
      "id": 66,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly Funded' AND frpm.`county name` = 'Stanislaus';",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly Funded' AND frpm.`county name` = 'Stanislaus' AND satscores.cname = 'Stanislaus';",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly Funded' AND frpm.`county name` = 'Stanislaus' AND satscores.cname = 'Stanislaus' AND satscores.enroll12 >= 0 AND satscores.enroll12 <= 398;",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly Funded' AND frpm.`county name` = 'Stanislaus' AND satscores.cname = 'Stanislaus' AND satscores.enroll12 >= 0 AND satscores.enroll12 <= 398 AND satscores.enroll12 >= 0 AND satscores.enroll12 <= 398;"
        ]
      ]
    },
    {
      "id": 67,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(satscores.enroll12) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'San Francisco' AND satscores.rtype = 'D';",
          "SELECT sum(satscores.enroll12) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'San Francisco' AND schools.closeddate LIKE '1989%';",
          "SELECT sum(satscores.enroll12) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'San Francisco' AND schools.closeddate = '1989-01-01';",
          "SELECT sum(satscores.enroll12) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'San Francisco' AND schools.closeddate = '1989-12-31';"
        ]
      ]
    },
    {
      "id": 68,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.county FROM schools WHERE schools.soc = '11' AND schools.closeddate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY schools.county ORDER BY count(*) DESC LIMIT 1;",
          "SELECT schools.county FROM schools WHERE schools.soc = '11' AND schools.closeddate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY schools.county ORDER BY count(schools.cdscode) DESC LIMIT 1;",
          "SELECT schools.county FROM schools WHERE schools.soc = '11' AND schools.closeddate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY schools.county ORDER BY count(schools.closeddate) DESC LIMIT 1;",
          "SELECT schools.county FROM schools WHERE schools.closeddate BETWEEN '1980-01-01' AND '1989-12-31' AND schools.soc = '11' GROUP BY schools.county ORDER BY count(*) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 69,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.ncesdist FROM schools WHERE schools.soc = '31' AND schools.soctype = 'State Special Schools';",
          "SELECT schools.ncesdist FROM schools WHERE schools.soc = 31 AND schools.soctype = 'State Special Schools';",
          "SELECT schools.ncesdist FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.soc = '31' AND schools.soctype = 'State Special Schools';",
          "SELECT DISTINCT schools.ncesdist FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.soc = '31' AND schools.soctype = 'State Special Schools';"
        ]
      ]
    },
    {
      "id": 70,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Alpine' AND schools.closeddate IS NULL;",
          "SELECT count(DISTINCT schools.district) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Alpine' AND schools.closeddate IS NULL;",
          "SELECT count(DISTINCT schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Alpine' AND schools.closeddate IS NULL;",
          "SELECT count(*) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND schools.closeddate IS NULL;"
        ]
      ]
    },
    {
      "id": 71,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`district code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0;",
          "SELECT frpm.`district code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.magnet = 0 AND schools.city = 'Fresno';",
          "SELECT frpm.\"`district code`\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0;",
          "SELECT frpm.`district code` FROM frpm INNER JOIN schools ON frpm.`school code` = schools.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0;"
        ]
      ]
    },
    {
      "id": 72,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015';",
          "SELECT sum(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015';",
          "SELECT count(`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015';",
          "SELECT count(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = 2014-2015;"
        ]
      ]
    },
    {
      "id": 73,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`free meal count (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.mailstreet = 'PO Box 1040';",
          "SELECT frpm.`free meal count (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstreet = 'PO Box 1040';",
          "SELECT frpm.`free meal count (ages 5-17)` FROM frpm, schools WHERE frpm.cdscode = schools.cdscode AND schools.mailstreet = 'PO Box 1040';",
          "SELECT frpm.`free meal count (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.mailstreet = 'PO Box 1040' AND frpm.`free meal count (ages 5-17)` IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 74,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '0613360';",
          "SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '0613360' ORDER BY frpm.`low grade` ASC LIMIT 1;",
          "SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.ncesdist = '0613360';",
          "SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.ncesdist = '0613360' AND schools.edopscode = 'SPECON';"
        ]
      ]
    },
    {
      "id": 75,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.eilname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' AND frpm.`county code` = '37';",
          "SELECT schools.eilname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' AND frpm.`county code` = 37;",
          "SELECT schools.eilname FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' AND frpm.`county code` = '37';",
          "SELECT schools.edopsname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' AND frpm.`county code` = '37';"
        ]
      ]
    },
    {
      "id": 76,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT city FROM schools WHERE eilcode = 'HS' AND cdscode IN (SELECT cdscode FROM frpm WHERE `high grade` = '12' AND `low grade` = '9' AND `county code` = '12');",
          "SELECT city FROM schools WHERE eilcode = 'HS' AND cdscode IN (SELECT cdscode FROM frpm WHERE `high grade` = 9 AND `low grade` = 12 AND `county code` = '12');",
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.eilcode = 'HS' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND satscores.cname = 'Merced';",
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.eilcode = 'HS' AND frpm.`high grade` = '12' AND frpm.`low grade` = '9' AND satscores.cname = 'Merced';"
        ]
      ]
    },
    {
      "id": 77,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, frpm.`percent (%) eligible frpm (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'K-12';",
          "SELECT schools.school, frpm.`percent (%) eligible frpm (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles';",
          "SELECT schools.school, frpm.`percent (%) eligible frpm (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = '9-12';",
          "SELECT schools.school, frpm.`percent (%) eligible frpm (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'K-12';"
        ]
      ]
    },
    {
      "id": 78,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(gsserved) DESC LIMIT 1;",
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY COUNT(gsserved) DESC LIMIT 1;",
          "SELECT schools.gsserved FROM schools WHERE schools.city = 'Adelanto' GROUP BY schools.gsserved ORDER BY count(schools.gsserved) DESC LIMIT 1;",
          "SELECT schools.gsserved FROM schools WHERE schools.city = 'Adelanto' GROUP BY schools.gsserved ORDER BY COUNT(schools.gsserved) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 79,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.county , COUNT(*) FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' GROUP BY schools.county ORDER BY COUNT(*) DESC LIMIT 1;",
          "SELECT schools.county , COUNT(*) FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE virtual = 'F' GROUP BY schools.county ORDER BY COUNT(*) DESC LIMIT 1;",
          "SELECT schools.county , COUNT(*) AS cnt FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' GROUP BY schools.county ORDER BY cnt DESC LIMIT 1;",
          "SELECT schools.county , COUNT(*) FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE satscores.rtype = 'D' AND schools.virtual = 'F' GROUP BY schools.county ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 80,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.`school type`, schools.latitude FROM schools ORDER BY schools.latitude DESC LIMIT 1;",
          "SELECT schools.`school type`, schools.latitude FROM schools WHERE schools.latitude = (SELECT max(schools.latitude) FROM schools);",
          "SELECT frpm.`school type`, frpm.`school name`, schools.latitude FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.latitude DESC LIMIT 1;",
          "SELECT frpm.`school type`, frpm.`school name`, schools.latitude FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.latitude DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 81,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city FROM schools WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1;",
          "SELECT schools.city , schools.latitude FROM schools WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1;",
          "SELECT schools.city , schools.latitude , schools.school FROM schools WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1;",
          "SELECT schools.city , schools.latitude FROM schools WHERE schools.state = 'CA' ORDER BY schools.latitude LIMIT 1;"
        ]
      ]
    },
    {
      "id": 82,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT gsoffered FROM schools WHERE longitude = (SELECT max(abs(longitude)) FROM schools);",
          "SELECT gsoffered FROM schools WHERE longitude = (SELECT max(ABS(longitude)) FROM schools);",
          "SELECT gsoffered FROM schools WHERE longitude = (SELECT MAX(ABS(longitude)) FROM schools);",
          "SELECT schools.gsoffered FROM schools WHERE schools.longitude = (SELECT max(abs(longitude)) FROM schools);"
        ]
      ]
    },
    {
      "id": 83,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city, count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-8 Schools (Public)' GROUP BY schools.city;",
          "SELECT schools.city, count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Multiple Provision Types' AND frpm.`school type` = 'K-8 Schools (Public)' GROUP BY schools.city;",
          "SELECT schools.city, count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.gsoffered = 'K-8' GROUP BY schools.city;",
          "SELECT schools.city, count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Multiple Provision Types' AND frpm.`school type` = 'Kindergarten to 8th grade' GROUP BY schools.city;"
        ]
      ]
    },
    {
      "id": 84,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT admfname1, district FROM schools GROUP BY admfname1, district ORDER BY count(*) DESC LIMIT 2;",
          "SELECT admfname1, district FROM schools GROUP BY admfname1, district ORDER BY count(admfname1) DESC LIMIT 2;",
          "SELECT admfname1 , district FROM schools GROUP BY admfname1 , district ORDER BY count(*) DESC LIMIT 2;",
          "SELECT admfname1, admfname2 FROM schools GROUP BY admfname1, admfname2 ORDER BY count(*) DESC LIMIT 2;"
        ]
      ]
    },
    {
      "id": 85,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.cdscode, frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Alusine';",
          "SELECT frpm.`district code`, frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine';",
          "SELECT schools.cdscode, frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine';",
          "SELECT `percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine';"
        ]
      ]
    },
    {
      "id": 86,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '40';",
          "SELECT schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county code` = '40';",
          "SELECT schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = 40;",
          "SELECT DISTINCT schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '40';"
        ]
      ]
    },
    {
      "id": 87,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT email FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'San Bernardino' AND schools.city = 'San Bernardino' AND frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`district type` = 'State Special Schools' AND satscores.rtype = 'D' AND satscores.enroll12 BETWEEN 398 AND 62;",
          "SELECT email FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'San Bernardino' AND schools.city = 'San Bernardino' AND frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`district type` = 'State Special Schools' AND satscores.enroll12 BETWEEN 398 AND 62 AND satscores.rtype = 'D';",
          "SELECT email FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`district type` = 'State Special Schools' AND schools.county = 'San Bernardino' AND schools.city = 'San Bernardino' AND schools.soc = '62' AND schools.doc = '54' AND satscores.enroll12 BETWEEN 398 AND 62;",
          "SELECT email FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`district type` = 'State Special Schools' AND schools.county = 'San Bernardino' AND schools.city = 'San Bernardino' AND schools.soc = '62' AND schools.doc = '54' AND satscores.enroll12 BETWEEN 398 AND 62 AND satscores.rtype = 'D';"
        ]
      ]
    },
    {
      "id": 88,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admemail1 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numtsttakr DESC LIMIT 1;",
          "SELECT schools.admemail1 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.admemail1 ORDER BY satscores.numtsttakr DESC LIMIT 1;",
          "SELECT schools.admemail1 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1;",
          "SELECT schools.admemail1 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = (SELECT MAX(numtsttakr) FROM satscores) AND satscores.rtype = 'S';"
        ]
      ]
    },
    {
      "id": 89,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.a3 = 'east Bohemia';",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.a3 = 'east Bohemia';"
        ]
      ]
    },
    {
      "id": 90,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague';",
          "SELECT count(account_id) FROM account WHERE district.a3 = 'Prague';",
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague';",
          "SELECT count(account.account_id) FROM account JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague';"
        ]
      ]
    },
    {
      "id": 91,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT a12, a13 FROM district WHERE a12 > a13;",
          "SELECT a13, a12 FROM district WHERE a13 > a12;",
          "SELECT a12, a13 FROM district WHERE a13 > a12;",
          "SELECT a12, a13 FROM district WHERE a12 = (SELECT max(a12) FROM district) OR a13 = (SELECT max(a13) FROM district);"
        ]
      ]
    },
    {
      "id": 92,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(district_id) FROM district WHERE a11 > 6000 AND a11 < 10000 AND gender = 'F';",
          "SELECT count(district_id) FROM district WHERE district.a11 > 6000 AND district.a11 < 10000 AND district.gender = 'F';",
          "SELECT count(DISTINCT district.district_id) FROM district WHERE district.a11 > 6000 AND district.a11 < 10000 AND district.gender = 'F';",
          "SELECT count(district_id) FROM district WHERE district.a11 > 6000 AND district.a11 < 10000 AND gender = 'F';"
        ]
      ]
    },
    {
      "id": 93,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND district.a11 > 8000;",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND district.a11 > 8000;",
          "SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND client.a11 > 8000;",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND client.a11 > 8000;"
        ]
      ]
    },
    {
      "id": 94,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account JOIN client ON account.district_id = client.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT MAX(a11) FROM district) AND client.birth_date > (SELECT MIN(birth_date) FROM client);",
          "SELECT account.account_id FROM account JOIN client ON account.district_id = client.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT MAX(a11) FROM district) AND client.birth_date = (SELECT MIN(birth_date) FROM client);",
          "SELECT account.account_id FROM client client JOIN account account ON client.client_id = account.account_id JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT MAX(a11) FROM district) AND client.birth_date > (SELECT MIN(birth_date) FROM client);",
          "SELECT account.account_id FROM account JOIN client ON account.district_id = client.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT MAX(a11) FROM district) AND client.birth_date > (SELECT MIN(birth_date) FROM client WHERE gender = 'F');"
        ]
      ]
    },
    {
      "id": 95,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account account JOIN client client ON account.district_id = client.district_id WHERE client.a11 = (SELECT max(a11) FROM client) AND client.birth_date = (SELECT max(birth_date) FROM client WHERE a11 = (SELECT max(a11) FROM client));",
          "SELECT account.account_id FROM account account JOIN client client ON account.district_id = client.district_id JOIN district district ON client.district_id = district.district_id WHERE district.a11 = (SELECT max(a11) FROM district);",
          "SELECT account.account_id FROM account account JOIN district district ON account.district_id = district.district_id WHERE district.a11 = (SELECT max(a11) FROM district) AND client.birth_date < account.date;",
          "SELECT account.account_id FROM account account JOIN client client ON account.district_id = client.district_id WHERE client.a11 = (SELECT max(a11) FROM client) AND client.birth_date = (SELECT min(birth_date) FROM client WHERE a11 = (SELECT max(a11) FROM client));"
        ]
      ]
    },
    {
      "id": 96,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM disp WHERE type = 'OWNER' AND frequency = 'POPLATEK TYDNE';",
          "SELECT count(*) FROM disp WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK TYDNE';",
          "SELECT count(DISTINCT client_id) FROM disp WHERE type = 'OWNER' AND frequency = 'POPLATEK TYDNE';",
          "SELECT count(*) FROM disp WHERE type = 'OWNER';"
        ]
      ]
    },
    {
      "id": 97,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'DISPONENT' AND account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT';",
          "SELECT disp.client_id FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU';"
        ]
      ]
    },
    {
      "id": 98,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT * FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE date = '1997-01-01' AND status = 'A') ORDER BY amount ASC LIMIT 1;",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'A' ORDER BY loan.amount ASC LIMIT 1;",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' ORDER BY loan.amount ASC LIMIT 1;",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'A' ORDER BY loan.amount LIMIT 1;"
        ]
      ]
    },
    {
      "id": 99,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account_id FROM loan WHERE duration > 12 ORDER BY amount DESC LIMIT 1;",
          "SELECT account_id FROM loan WHERE duration > 12 GROUP BY account_id ORDER BY sum(amount) DESC LIMIT 1;",
          "SELECT * FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE duration > 12) AND date LIKE '1993%' ORDER BY amount DESC LIMIT 1;",
          "SELECT * FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE duration > 12) AND date BETWEEN '1993-01-01' AND '1993-12-31' ORDER BY amount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 100,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Sokolov';",
          "SELECT count(*) FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Sokolov';",
          "SELECT count(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950' AND district.a2 = 'Sokolov';",
          "SELECT count(*) FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950' AND district.a2 = 'Sokolov';"
        ]
      ]
    },
    {
      "id": 101,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT * FROM account WHERE date = '1995-01-01';",
          "SELECT account.account_id FROM account WHERE account.date = '1995-01-01';",
          "SELECT account.account_id FROM account WHERE account.date = '1995-03-24';",
          "SELECT * FROM account WHERE date = '1995-01-01' ORDER BY date ASC;"
        ]
      ]
    },
    {
      "id": 102,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account_id FROM account WHERE date < '1997-01-01' AND amount > 3000;",
          "SELECT DISTINCT account_id FROM account WHERE date < '1997-01-01' AND amount > 3000;",
          "SELECT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000);",
          "SELECT DISTINCT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000);"
        ]
      ]
    },
    {
      "id": 103,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued = '1994-03-03';",
          "SELECT client.client_id FROM card INNER JOIN client ON card.disp_id = client.client_id WHERE card.issued = '1994-03-03';",
          "SELECT client.client_id FROM card INNER JOIN client ON card.client_id = client.client_id WHERE card.issued = '1994-03-03';",
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued LIKE '1994-03-03';"
        ]
      ]
    },
    {
      "id": 104,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.account_id = 840;",
          "SELECT account.date FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.account_id = 840;",
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = 840;",
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.account_id = 840 AND trans.amount = 840;"
        ]
      ]
    },
    {
      "id": 105,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.date = '1994-08-25';",
          "SELECT account.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1994-08-25';",
          "SELECT DISTINCT district.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.date = '1994-08-25';",
          "SELECT DISTINCT district.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.account_id = client.account_id INNER JOIN district ON client.district_id = district.district_id WHERE loan.date = '1994-08-25';"
        ]
      ]
    },
    {
      "id": 106,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT MAX(trans.amount) FROM trans INNER JOIN card ON trans.card_id = card.card_id WHERE card.issued = '1996-10-21';",
          "SELECT MAX(trans.amount) FROM trans INNER JOIN card ON trans.card_id = card.card_id WHERE card.issued = '1996/10/21';",
          "SELECT MAX(trans.amount) FROM trans INNER JOIN disp ON trans.trans_id = disp.disp_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1996-10-21';",
          "SELECT MAX(trans.amount) FROM trans INNER JOIN disp ON trans.trans_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.birth_date = '1996-10-21';"
        ]
      ]
    },
    {
      "id": 107,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT gender FROM client WHERE birth_date = ( SELECT max(birth_date) FROM client WHERE a11 = ( SELECT max(a11) FROM district ) );",
          "SELECT gender FROM client WHERE birth_date = (SELECT max(birth_date) FROM client) AND district_id = (SELECT district_id FROM district WHERE a11 = (SELECT max(a11) FROM district));",
          "SELECT gender FROM client WHERE client_id = ( SELECT client_id FROM account WHERE account_id = ( SELECT account_id FROM disp WHERE disp_id = ( SELECT disp_id FROM order WHERE order_id = ( SELECT order_id FROM account WHERE district_id = ( SELECT district_id FROM district WHERE a11 = ( SELECT max(a11) FROM district ) ) ) ) ) ) );",
          "SELECT gender FROM client WHERE client_id = (SELECT client_id FROM account WHERE account_id = (SELECT account_id FROM disp WHERE disp_id = (SELECT disp_id FROM order WHERE amount = (SELECT max(amount) FROM order WHERE k_symbol = 'SIPO'))));"
        ]
      ]
    },
    {
      "id": 108,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT trans.amount FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.amount = (SELECT max(loan.amount) FROM loan) ORDER BY trans.date LIMIT 1;",
          "SELECT trans.amount FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.amount = (SELECT max(loan.amount) FROM loan) ORDER BY trans.date LIMIT 1;",
          "SELECT trans.amount FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.loan_id = (SELECT max(loan_id) FROM loan) ORDER BY trans.trans_id LIMIT 1;",
          "SELECT trans.amount FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.loan_id = (SELECT max(loan.loan_id) FROM loan) ORDER BY trans.trans_id LIMIT 1;"
        ]
      ]
    },
    {
      "id": 109,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a2 = 'Jesenik';",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a2 = 'Jesenik';"
        ]
      ]
    },
    {
      "id": 110,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.disp_id = trans.disp_id WHERE trans.amount = 5100 AND card.issued = '1998-09-02';",
          "SELECT card.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON card.disp_id = trans.disp_id WHERE trans.amount = 5100 AND card.issued = '1998-09-02';",
          "SELECT disp.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.disp_id = trans.disp_id WHERE trans.amount = 5100 AND card.issued = '1998-09-02';",
          "SELECT card.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.disp_id = trans.disp_id WHERE trans.amount = 5100 AND strftime('%Y-%m-%d', trans.date) = '1998-09-02';"
        ]
      ]
    },
    {
      "id": 111,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND account.date LIKE '1996%';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND account.date = '1996-01-01';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 LIKE 'Litomerice' AND account.date LIKE '1996';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND account.date LIKE '1996';"
        ]
      ]
    },
    {
      "id": 112,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT a2 FROM district WHERE gender = 'F' AND birth_date = '1976-01-29';",
          "SELECT district.a2 FROM client client INNER JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';",
          "SELECT a2 FROM client client INNER JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';",
          "SELECT district.a2 FROM client client INNER JOIN district district ON client.district_id = district.district_id WHERE client.birth_date = '1976-01-29' AND client.gender = 'F';"
        ]
      ]
    },
    {
      "id": 113,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';",
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.loan_id = 98832 AND loan.date = '1996-01-03';",
          "SELECT client.birth_date FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';",
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.loan_id = 98832;"
        ]
      ]
    },
    {
      "id": 114,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client_id FROM client WHERE district_id IN (SELECT district_id FROM district WHERE a3 = 'Prague');",
          "SELECT client_id FROM client WHERE district_id IN (SELECT district_id FROM district WHERE a3 = 'Prague') LIMIT 1;",
          "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'Prague';",
          "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'Prague' LIMIT 1;"
        ]
      ]
    },
    {
      "id": 115,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a3, ROUND(DIVIDE(COUNT(client.gender = 'M'), COUNT(client)) * 100, 2) AS \"Percentage of the male clients\" FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' GROUP BY district.a3;",
          "SELECT district.a3, ROUND(DIVIDE(COUNT(client.gender = 'M'), COUNT(client.gender)) * 100, 2) AS \"Percentage of the male clients\" FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' GROUP BY district.a3;",
          "SELECT district.a3, ROUND(DIVIDE(COUNT(client.gender = 'M'), COUNT(client)) * 100, 2) AS Percentage_of_the_male_clients FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' GROUP BY district.a3;",
          "SELECT district.a3, ROUND(DIVIDE(COUNT(client.gender = 'M'), COUNT(client.gender)) * 100, 2) AS Percentage_of_the_male_clients FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' GROUP BY district.a3;"
        ]
      ]
    },
    {
      "id": 116,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT (loan.amount - trans.balance) / trans.balance * 100 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.date = '1993-07-05' AND loan.status = 'A' AND trans.date BETWEEN '1993-03-22' AND '1998-12-27';",
          "SELECT ((loan.amount - trans.balance) / trans.balance) * 100 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.status = 'A' AND loan.date = '1993-07-05' AND trans.date = '1993-03-22';",
          "SELECT ((loan.amount - trans.balance) / trans.balance) * 100 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.date = '1993-07-05' AND loan.status = 'A' AND trans.date = '1993-03-22' AND trans.date = '1998-12-27';",
          "SELECT ((loan.amount - trans.balance) / trans.balance) * 100 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.status = 'A' AND loan.date = '1993-07-05' AND trans.date = '1993-03-22' AND trans.date = '1998-12-27';"
        ]
      ]
    },
    {
      "id": 117,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN loan.status = 'A' THEN loan.amount END) AS REAL) * 100 / sum(loan.amount) FROM loan;",
          "SELECT cast(count(CASE WHEN loan.status = 'A' THEN loan.amount END) AS REAL) * 100 / count(loan.amount) FROM loan;",
          "SELECT cast(count(CASE WHEN loan.status = 'A' THEN loan.amount END) AS REAL) * 100 / sum(loan.amount) FROM loan;",
          "SELECT cast(count(CASE WHEN loan.status = 'A' THEN loan.loan_id END) AS REAL) * 100 / count(loan.loan_id) FROM loan;"
        ]
      ]
    },
    {
      "id": 118,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(loan.amount < 100000, 1, 0)) AS REAL) * 100 / count(account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C';",
          "SELECT cast(sum(iif(loan.amount < 100000, 1, 0)) AS REAL) * 100 / count(account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id;",
          "SELECT cast(sum(iif(loan.amount < 100000, 1, 0)) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C';",
          "SELECT cast(sum(iif(loan.amount < 100000, 1, 0)) AS REAL) * 100 / count(loan.loan_id) FROM loan WHERE loan.status = 'C';"
        ]
      ]
    },
    {
      "id": 119,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, district.a2, district.a3 FROM account JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT account.account_id, district.a2, district.a3 FROM account JOIN district ON account.district_id = district.district_id WHERE account.date > trans.date AND account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date > trans.date AND account.frequency = 'POPLATEK PO OBRATU';"
        ]
      ]
    },
    {
      "id": 120,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, account.frequency FROM account JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';",
          "SELECT account.account_id, account.frequency FROM account JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia';",
          "SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';",
          "SELECT account.account_id, account.frequency FROM account account JOIN district district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';"
        ]
      ]
    },
    {
      "id": 121,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice';",
          "SELECT account.account_id, account.date FROM account INNER JOIN district ON district.district_id = account.district_id WHERE district.a2 = 'Prachatice';",
          "SELECT account.account_id, account.date FROM account, district WHERE account.district_id = district.district_id AND district.a2 = 'Prachatice';",
          "SELECT account.account_id, account.date FROM account WHERE district.a2 = 'Prachatice';"
        ]
      ]
    },
    {
      "id": 122,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.loan_id = 4990;",
          "SELECT district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990;",
          "SELECT district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.account_id WHERE loan.loan_id = 4990;",
          "SELECT district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.loan_id = '4990';"
        ]
      ]
    },
    {
      "id": 123,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount > 300000;",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;",
          "SELECT account.account_id, district.a3, district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;"
        ]
      ]
    },
    {
      "id": 124,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60;",
          "SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.district_id = district.district_id WHERE loan.duration = 60;",
          "SELECT loan.loan_id, district.a3, district.a11 FROM loan JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60;",
          "SELECT loan.loan_id, district.district_id, district.a11 FROM loan INNER JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60;"
        ]
      ]
    },
    {
      "id": 125,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2, district.a3, ((district.a12 - district.a13) / district.a13) * 100 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status LIKE 'D';",
          "SELECT district.district_id, district.a3, ((district.a12 - district.a13) / district.a13) * 100 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status LIKE 'D';",
          "SELECT district.a2, district.a3, ((district.a13 - district.a12) / district.a12) * 100 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status LIKE 'D';",
          "SELECT district.district_id, district.a3, (district.a12 - district.a13) / district.a13 * 100 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status LIKE 'D';"
        ]
      ]
    },
    {
      "id": 126,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date = '1993-01-01';",
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.date = '1993-01-01';",
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON client.district_id = district.district_id WHERE account.date = '1993-01-01';",
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON account.district_id = district.district_id WHERE account.date = '1993-01-01';"
        ]
      ]
    },
    {
      "id": 127,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account WHERE account.frequency = 'POPLATEK MESICNE';",
          "SELECT DISTINCT account.account_id FROM account INNER JOIN card ON account.account_id = card.account_id WHERE account.frequency = 'POPLATEK MESICNE';",
          "SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.account_id WHERE card.type = 'POPLATEK MESICNE';",
          "SELECT DISTINCT account.account_id FROM account INNER JOIN card ON account.account_id = card.account_id WHERE card.type = 'POPLATEK MESICNE';"
        ]
      ]
    },
    {
      "id": 128,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT a2 FROM district WHERE gender = 'F' ORDER BY a9 DESC LIMIT 9;",
          "SELECT a2 FROM district WHERE gender = 'F' ORDER BY a4 DESC LIMIT 9;",
          "SELECT a2 FROM district WHERE gender = 'F' GROUP BY a2 ORDER BY COUNT(*) DESC LIMIT 9;",
          "SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.a2 ORDER BY COUNT(*) DESC LIMIT 9;"
        ]
      ]
    },
    {
      "id": 129,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT a2, sum(disp.type = 'VYDAJ') FROM district JOIN disp ON district.district_id = disp.district_id JOIN account ON disp.account_id = account.account_id WHERE account.date LIKE '1996-01%' GROUP BY a2 ORDER BY sum(disp.type = 'VYDAJ') DESC LIMIT 10;",
          "SELECT district.a2, sum(disp.type = 'VYDAJ') FROM district JOIN disp ON district.district_id = disp.district_id JOIN account ON disp.account_id = account.account_id WHERE account.date LIKE '1996-01%' GROUP BY district.a2 ORDER BY sum(disp.type = 'VYDAJ') DESC LIMIT 10;",
          "SELECT a2, sum(disp.type = 'VYDAJ') FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE account.date LIKE '1996-01%' GROUP BY a2 ORDER BY sum(disp.type = 'VYDAJ') DESC LIMIT 10;",
          "SELECT a2, sum(disp.type = 'VYDAJ') FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE account.date LIKE '1996-01%' GROUP BY a2 ORDER BY sum(disp.type = 'VYDAJ') DESC LIMIT 10;"
        ]
      ]
    },
    {
      "id": 130,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client client INNER JOIN disp disp ON client.client_id = disp.client_id INNER JOIN account account ON disp.account_id = account.account_id INNER JOIN card card ON disp.disp_id = card.disp_id INNER JOIN district district ON account.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND card.card_id IS NULL;",
          "SELECT count(DISTINCT client.client_id) FROM client client INNER JOIN disp disp ON client.client_id = disp.client_id INNER JOIN account account ON disp.account_id = account.account_id INNER JOIN card card ON disp.disp_id = card.disp_id INNER JOIN district district ON account.district_id = district.district_id WHERE district.a3 = 'South Bohemia' AND card.card_id IS NULL;",
          "SELECT count(DISTINCT client.client_id) FROM client client INNER JOIN disp disp ON client.client_id = disp.client_id INNER JOIN account account ON disp.account_id = account.account_id INNER JOIN district district ON account.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND card.card_id IS NULL;",
          "SELECT count(DISTINCT client.client_id) FROM client client INNER JOIN disp disp ON client.client_id = disp.client_id INNER JOIN account account ON disp.account_id = account.account_id INNER JOIN card card ON disp.disp_id = card.disp_id INNER JOIN district district ON account.district_id = district.district_id WHERE district.a3 = 'south Bohemia';"
        ]
      ]
    },
    {
      "id": 131,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY count(loan.loan_id) DESC LIMIT 1;",
          "SELECT district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'A' GROUP BY district.a3 ORDER BY count(loan.loan_id) DESC LIMIT 1;",
          "SELECT district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'C' GROUP BY district.district_id ORDER BY count(loan.loan_id) DESC LIMIT 1;",
          "SELECT district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'A' GROUP BY district.district_id ORDER BY count(loan.loan_id) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 132,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';",
          "SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M';",
          "SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'M';",
          "SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.client_id = client.client_id WHERE client.gender = 'M';"
        ]
      ]
    },
    {
      "id": 133,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.district_id, district.a2 FROM district WHERE district.a13 = (SELECT max(district.a13) FROM district);",
          "SELECT district.district_id, district.a2, district.a13 FROM district WHERE district.a13 = (SELECT max(a13) FROM district);",
          "SELECT district.district_id, district.a2 FROM district WHERE district.a13 = (SELECT max(a13) FROM district WHERE strftime('%Y', date) = '1996');",
          "SELECT district.district_id, district.a2, district.a13 FROM district WHERE district.a13 = (SELECT max(a13) FROM district WHERE strftime('%Y', date) = '1996');"
        ]
      ]
    },
    {
      "id": 134,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE a16 = (SELECT max(a16) FROM district));",
          "SELECT count(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE a16 = (SELECT max(a16) FROM district));",
          "SELECT count(account_id) FROM account WHERE district_id = (SELECT district_id FROM district ORDER BY a16 DESC LIMIT 1);",
          "SELECT count(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE a16 = (SELECT MAX(a16) FROM district));"
        ]
      ]
    },
    {
      "id": 135,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account WHERE account.frequency = 'POPLATEK MESICNE' AND trans.operation = 'VYBER KARTOU' AND trans.balance < 0;",
          "SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK MESICNE' AND account_id IN ( SELECT account_id FROM trans WHERE operation = 'VYBER KARTOU' AND balance < 0 );",
          "SELECT count(account.account_id) FROM account WHERE account.frequency = 'POPLATEK MESICNE' AND account.account_id IN ( SELECT trans.account_id FROM trans WHERE trans.operation = 'VYBER KARTOU' AND trans.balance < 0 );",
          "SELECT count(account.account_id) FROM account WHERE account.frequency = 'POPLATEK MESICNE' AND trans.operation = 'VYBER KARTOU' AND balance < 0;"
        ]
      ]
    },
    {
      "id": 136,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'A';",
          "SELECT count(loan.loan_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'A';",
          "SELECT count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'A';",
          "SELECT count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000 AND loan.status = 'A' AND account.frequency = 'POPLATEK MESICNE' AND loan.date BETWEEN '1995-01-01' AND '1997-12-31';"
        ]
      ]
    },
    {
      "id": 137,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account_id) FROM account WHERE district_id = 1 AND status = 'C';",
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' AND account.district_id = 1;",
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN client ON account.district_id = client.district_id WHERE loan.status = 'C' AND client.district_id = 1;",
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Hl.m. Praha' AND loan.status = 'C';"
        ]
      ]
    },
    {
      "id": 138,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE a15 = (SELECT max(a15) FROM district));",
          "SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a15 = (SELECT max(a15) FROM district);",
          "SELECT count(*) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE a15 = (SELECT max(a15) FROM district WHERE a2 = 'Hl.m. Praha'));",
          "SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a15 = (SELECT max(a15) FROM district WHERE district.district_id = client.district_id);"
        ]
      ]
    },
    {
      "id": 139,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
          "SELECT count(card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
          "SELECT count(card_id) FROM card WHERE type = 'gold' AND disp_id IN (SELECT disp_id FROM disp WHERE type = 'OWNER');"
        ]
      ]
    },
    {
      "id": 140,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 LIKE 'Pisek';",
          "SELECT count(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek';",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Pisek';"
        ]
      ]
    },
    {
      "id": 141,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.district_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01';",
          "SELECT district.district_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01';",
          "SELECT DISTINCT district.district_id FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01';",
          "SELECT account.district_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01' GROUP BY account.district_id;"
        ]
      ]
    },
    {
      "id": 142,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.k_symbol = 'SIPO';",
          "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.k_symbol = 'SIPO' AND district.a2 = 'Pisek';",
          "SELECT account.account_id FROM order order INNER JOIN account account ON order.account_id = account.account_id WHERE order.k_symbol = 'SIPO' AND district.a2 = 'Pisek';",
          "SELECT account.account_id FROM order order INNER JOIN account account ON order.account_id = account.account_id INNER JOIN district district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO';"
        ]
      ]
    },
    {
      "id": 143,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type = 'gold';",
          "SELECT account_id FROM card WHERE type = 'gold';",
          "SELECT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold';",
          "SELECT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type LIKE 'gold';"
        ]
      ]
    },
    {
      "id": 144,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.operation = 'VYBER KARTOU';",
          "SELECT AVG(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.operation = 'VYBER KARTOU' AND account.account_id = 2021;",
          "SELECT avg(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.operation = 'VYBER KARTOU' AND account.account_id = 2021;",
          "SELECT AVG(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.operation = 'VYBER KARTOU' AND trans.account_id = 2021;"
        ]
      ]
    },
    {
      "id": 145,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND trans.amount < (SELECT AVG(trans.amount) FROM trans) AND trans.date = '1998-01-01';",
          "SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND trans.amount < (SELECT avg(trans.amount) FROM trans) AND trans.date = '1998-01-01';",
          "SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND trans.amount < (SELECT AVG(trans.amount) FROM trans WHERE trans.account_id = account.account_id AND trans.date = '1998-01-01');",
          "SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND trans.amount < (SELECT AVG(trans.amount) FROM trans WHERE trans.account_id = account.account_id AND trans.date LIKE '1998');"
        ]
      ]
    },
    {
      "id": 146,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F';",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F' AND disp.type = 'OWNER';",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F' AND disp.type = 'OWNER' AND card.type = 'gold';",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F' AND disp.type = 'OWNER' AND loan.status = 'A';"
        ]
      ]
    },
    {
      "id": 147,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN client client ON account.district_id = client.district_id JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a3 = 'south Bohemia';",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a3 LIKE '%south Bohemia%';",
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN client client ON account.district_id = client.district_id JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a3 LIKE '%south Bohemia%';",
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN client client ON account.district_id = client.district_id JOIN district district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F';"
        ]
      ]
    },
    {
      "id": 148,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Tabor' AND account.type = 'OWNER';",
          "SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Tabor' AND account.type = 'OWNER';",
          "SELECT DISTINCT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Tabor' AND account.type = 'OWNER';",
          "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type = 'OWNER' AND district.a2 = 'Tabor';"
        ]
      ]
    },
    {
      "id": 149,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT DISTINCT disp.type, district.a11 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type != 'OWNER' AND district.a11 > 8000 AND district.a11 <= 9000;",
          "SELECT DISTINCT disp.type, district.a11 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type != 'OWNER' AND district.a11 > 8000 AND district.a11 < 9000;",
          "SELECT DISTINCT disp.type, district.a11 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type != 'OWNER' AND (district.a11 > 8000 AND district.a11 < 9000);",
          "SELECT DISTINCT disp.type, district.a11 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type = 'OWNER' AND (district.a11 > 8000 AND district.a11 < 9000);"
        ]
      ]
    },
    {
      "id": 150,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';",
          "SELECT count(*) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';",
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';"
        ]
      ]
    },
    {
      "id": 151,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT a2 FROM district WHERE district_id IN (SELECT account.district_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ');",
          "SELECT a2 FROM district WHERE district_id IN (SELECT account_id FROM trans WHERE type = 'VYDAJ');",
          "SELECT a2 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ';",
          "SELECT a2 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM trans WHERE type = 'VYDAJ'));"
        ]
      ]
    },
    {
      "id": 152,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01');",
          "SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01') GROUP BY a3;",
          "SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN (SELECT account.district_id FROM account WHERE account.date >= '1997-01-01');",
          "SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN (SELECT account.district_id FROM account WHERE date >= '1997-01-01');"
        ]
      ]
    },
    {
      "id": 153,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(card_id) FROM card WHERE type = 'classic';",
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic';",
          "SELECT count(card_id) FROM card WHERE card.type = 'classic';",
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER';"
        ]
      ]
    },
    {
      "id": 154,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a2 = 'Hl.m. Praha';",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a2 = 'Hl.m. Praha';",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a2 = 'Hl.m. Praha';"
        ]
      ]
    },
    {
      "id": 155,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT (count(type = 'gold' AND issued < '1998-01-01') / count(*)) * 100 FROM card;",
          "SELECT (count(type = 'gold' and issued < '1998-01-01') / count(*)) * 100 FROM card;",
          "SELECT (count(card.type = 'gold' AND card.issued < '1998-01-01') / count(*)) * 100 FROM card;",
          "SELECT (count(card.type = 'gold' AND card.issued < '1998-01-01') / count(card.card_id)) * 100 FROM card;"
        ]
      ]
    },
    {
      "id": 156,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT loan.account_id FROM loan ORDER BY loan.amount DESC LIMIT 1;",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id ORDER BY loan.amount DESC LIMIT 1;",
          "SELECT client.client_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.client_id = client.client_id ORDER BY loan.amount DESC LIMIT 1;",
          "SELECT client.client_id FROM loan INNER JOIN client ON loan.account_id = client.client_id ORDER BY loan.amount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 157,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT a15 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id = 532);",
          "SELECT a15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532);",
          "SELECT district.a15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532;",
          "SELECT district.a15 FROM district WHERE district.district_id IN (SELECT account.district_id FROM account WHERE account.account_id = 532);"
        ]
      ]
    },
    {
      "id": 158,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333;",
          "SELECT account.district_id FROM order INNER JOIN account ON order.account_id = account.account_id WHERE order.order_id = 33333;",
          "SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM order WHERE order_id = 33333);",
          "SELECT order.district_id FROM order INNER JOIN account ON order.account_id = account.account_id WHERE order.order_id = 33333;"
        ]
      ]
    },
    {
      "id": 159,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT * FROM trans WHERE trans.operation = 'VYBER' AND trans.client_id = 3356;",
          "SELECT * FROM trans INNER JOIN client ON trans.client_id = client.client_id INNER JOIN disp ON client.client_id = disp.client_id WHERE trans.operation = 'VYBER' AND client.client_id = 3356;",
          "SELECT trans.trans_id FROM trans INNER JOIN client ON trans.client_id = client.client_id INNER JOIN disp ON client.client_id = disp.client_id WHERE trans.operation = 'VYBER';",
          "SELECT trans.operation FROM trans INNER JOIN client ON trans.client_id = client.client_id INNER JOIN disp ON client.client_id = disp.client_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER';"
        ]
      ]
    },
    {
      "id": 160,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;",
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount < 200000 AND account.frequency = 'POPLATEK TYDNE';",
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount < 200000;",
          "SELECT count(account_id) FROM account WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;"
        ]
      ]
    },
    {
      "id": 161,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539;",
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539;",
          "SELECT card.type FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.client_id = 13539;",
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE client.client_id = 13539;"
        ]
      ]
    },
    {
      "id": 162,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a3 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.client_id = 3541;",
          "SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;",
          "SELECT district.a3 FROM client INNER JOIN district ON district.district_id = client.district_id WHERE client.client_id = 3541;",
          "SELECT district.a3 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.client_id = '3541';"
        ]
      ]
    },
    {
      "id": 163,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district_id FROM account WHERE status = 'A' GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1;",
          "SELECT district_id FROM account WHERE status = 'A' GROUP BY district_id ORDER BY count(*) DESC LIMIT 1;",
          "SELECT district_id FROM account WHERE status = 'A' GROUP BY district_id ORDER BY count(account_id) DESC LIMIT 1;",
          "SELECT district_id FROM account WHERE status = 'A' GROUP BY district_id ORDER BY COUNT(account_id) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 164,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT order.account_id FROM order WHERE order.order_id = 32423;",
          "SELECT order.account_id FROM order INNER JOIN trans ON order.order_id = trans.trans_id WHERE trans.trans_id = 32423;",
          "SELECT order.account_id FROM order JOIN trans ON order.order_id = trans.trans_id WHERE trans.trans_id = 32423;",
          "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 32423;"
        ]
      ]
    },
    {
      "id": 165,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT * FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;",
          "SELECT trans.trans_id FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;",
          "SELECT * FROM trans WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 5);",
          "SELECT * FROM trans WHERE account_id IN ( SELECT account_id FROM account WHERE district_id = 5 );"
        ]
      ]
    },
    {
      "id": 166,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON district.district_id = account.district_id WHERE district.a2 = 'Jesenik';",
          "SELECT count(account.account_id) FROM account JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';",
          "SELECT count(account.district_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';"
        ]
      ]
    },
    {
      "id": 167,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.client_id WHERE card.issued > '1996-01-01' AND card.type = 'junior';",
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.client_id WHERE card.type = 'junior' AND card.issued > '1996-01-01';",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.issued > '1996-01-01' AND card.type = 'junior';",
          "SELECT card.card_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.type = 'junior' AND disp.date >= '1997-01-01';"
        ]
      ]
    },
    {
      "id": 168,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT (count(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / count(*)) AS percentage FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.a11 > 10000;",
          "SELECT (count(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / count(*)) AS percentage FROM client c JOIN account a ON c.client_id = a.client_id JOIN district d ON a.district_id = d.district_id WHERE d.a11 > 10000;",
          "SELECT (count(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / count(*)) AS percentage FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON c.client_id = a.client_id WHERE d.a11 > 10000;",
          "SELECT (count(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / count(*)) AS percentage FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.a11 > 10000;"
        ]
      ]
    },
    {
      "id": 169,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT (sum(loan.amount) - sum(loan_1996.amount)) / sum(loan_1996.amount) * 100.0 AS growth_rate FROM loan loan JOIN loan loan_1996 ON loan.account_id = loan_1996.account_id JOIN client client ON loan.account_id = client.client_id WHERE client.gender = 'M' AND loan.date BETWEEN '1996-01-01' AND '1997-12-31';",
          "SELECT (sum(loan.amount) - sum(loan_1996.amount)) / sum(loan_1996.amount) * 100.0 AS growth_rate FROM loan loan JOIN loan loan_1996 ON loan.account_id = loan_1996.account_id JOIN client client ON loan.account_id = client.client_id WHERE client.gender = 'M' AND loan.date BETWEEN '1996-01-01' AND '1997-01-01';",
          "SELECT (sum(loan.amount) - sum(loan_1996.amount)) / sum(loan_1996.amount) * 100.0 AS growth_rate FROM loan LEFT JOIN loan loan_1996 ON loan.account_id = loan_1996.account_id AND loan.loan_id = loan_1996.loan_id WHERE loan.date BETWEEN '1996-01-01' AND '1997-01-01' AND client.gender = 'M';",
          "SELECT (sum(loan.amount) - sum(loan_1996.amount)) / sum(loan_1996.amount) * 100.0 AS growth_rate FROM loan LEFT JOIN loan loan_1996 ON loan.account_id = loan_1996.account_id AND loan.date BETWEEN '1996-01-01' AND '1997-01-01' WHERE loan.gender = 'M';"
        ]
      ]
    },
    {
      "id": 170,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM trans INNER JOIN card ON trans.trans_id = card.disp_id WHERE trans.date > '1995-01-01';",
          "SELECT count(*) FROM trans INNER JOIN card ON trans.trans_id = card.disp_id WHERE trans.date > '1995-01-01' AND trans.operation = 'VYBER KARTOU';",
          "SELECT count(*) FROM trans INNER JOIN card ON trans.card_id = card.card_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE trans.operation = 'VYBER KARTOU' AND account.date > '1995';",
          "SELECT count(*) FROM trans INNER JOIN card ON trans.card_id = card.card_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.date > '1995-01-01' AND trans.operation = 'VYBER KARTOU';"
        ]
      ]
    },
    {
      "id": 171,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a16 - district.a15 AS difference FROM district WHERE district.a3 = 'north Bohemia';",
          "SELECT district.a16 - district.a15 AS diff FROM district WHERE district.a3 = 'north Bohemia';",
          "SELECT district.a3, SUM(district.a16) - SUM(district.a15) FROM district GROUP BY district.a3;",
          "SELECT district.a3, SUM(district.a16) - SUM(district.a15) AS difference FROM district GROUP BY district.a3;"
        ]
      ]
    },
    {
      "id": 172,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'OWNER' OR type = 'DISPONENT';",
          "SELECT count(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('OWNER', 'DISPONENT');",
          "SELECT count(disp.disp_id) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.account_id BETWEEN 1 AND 10 AND disp.type = 'OWNER' OR disp.type = 'DISPONENT';",
          "SELECT count(disp.disp_id) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.account_id BETWEEN 1 AND 10 AND disp.type LIKE 'OWNER' OR disp.type LIKE 'DISPONENT';"
        ]
      ]
    },
    {
      "id": 173,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT frequency FROM account WHERE account_id = 3539;",
          "SELECT account.frequency, order.amount FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3539;",
          "SELECT account.frequency, trans.amount FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = 3539;",
          "SELECT account.frequency, order.amount FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = '3539';"
        ]
      ]
    },
    {
      "id": 174,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT birth_date FROM client WHERE client_id = 130;",
          "SELECT year(birth_date) FROM client WHERE client_id = 130;",
          "SELECT substr(birth_date, 1, 4) FROM client WHERE client_id = 130;",
          "SELECT birth_date FROM client WHERE client_id = '130';"
        ]
      ]
    },
    {
      "id": 175,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER';",
          "SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK PO OBRATU';",
          "SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER';",
          "SELECT count(account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE account.frequency = 'POPLATEK PO OBRATU';"
        ]
      ]
    },
    {
      "id": 176,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT loan.amount, loan.payments FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.district_id = client.district_id WHERE client.client_id = 992;",
          "SELECT loan.amount , loan.payments FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.district_id = client.district_id WHERE client.client_id = 992;",
          "SELECT loan.amount, loan.payments FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 992;",
          "SELECT loan.amount, loan.payments FROM loan INNER JOIN client ON loan.account_id = client.client_id INNER JOIN account ON loan.account_id = account.account_id WHERE client.client_id = 992;"
        ]
      ]
    },
    {
      "id": 177,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT SUM(trans.amount) FROM client INNER JOIN trans ON client.client_id = trans.account_id WHERE client.client_id = 4 AND trans.trans_id = 851;",
          "SELECT SUM(trans.amount) FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.trans_id = 851;",
          "SELECT SUM(trans.amount) FROM client INNER JOIN trans ON client.client_id = trans.account_id WHERE trans.trans_id = 851;",
          "SELECT SUM(trans.amount) FROM client INNER JOIN trans ON client.client_id = trans.account_id WHERE client.client_id = 4 AND trans.account_id = 851;"
        ]
      ]
    },
    {
      "id": 178,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9;",
          "SELECT card.type FROM card INNER JOIN client ON card.disp_id = client.client_id WHERE client.client_id = 9;",
          "SELECT card.type FROM client INNER JOIN card ON client.client_id = card.client_id WHERE client.client_id = 9;",
          "SELECT card.type FROM card INNER JOIN client ON card.disp_id = client.client_id WHERE card.card_id = 9;"
        ]
      ]
    },
    {
      "id": 179,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(trans.amount) FROM trans INNER JOIN client ON trans.account_id = client.client_id INNER JOIN order ON trans.account_id = order.account_id INNER JOIN account ON trans.account_id = account.account_id WHERE client.client_id = '617' AND trans.date = '1998';",
          "SELECT sum(trans.amount) FROM trans INNER JOIN client ON trans.client_id = client.client_id INNER JOIN order ON trans.order_id = order.order_id INNER JOIN account ON trans.account_id = account.account_id WHERE client.client_id = '617' AND trans.date = '1998';",
          "SELECT sum(trans.amount) FROM trans INNER JOIN client ON trans.account_id = client.client_id INNER JOIN order ON trans.account_id = order.account_id INNER JOIN account ON trans.account_id = account.account_id WHERE client.client_id = '617' AND trans.date = '1998-01-01';",
          "SELECT sum(trans.amount) FROM trans INNER JOIN client ON trans.client_id = client.client_id INNER JOIN order ON trans.order_id = order.order_id INNER JOIN account ON trans.account_id = account.account_id WHERE client.client_id = '617' AND trans.date = '1998-01-01';"
        ]
      ]
    },
    {
      "id": 180,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id BETWEEN 1983 AND 1987 AND district.a3 = 'east Bohemia';",
          "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';",
          "SELECT client.client_id FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN district ON account.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';",
          "SELECT client.client_id, account.account_id FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';"
        ]
      ]
    },
    {
      "id": 181,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client_id FROM client WHERE gender = 'F' ORDER BY amount DESC LIMIT 3;",
          "SELECT client.client_id FROM client WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;",
          "SELECT client.client_id FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;",
          "SELECT client.client_id FROM client JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 182,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.amount > 4000 AND trans.k_symbol = 'SIPO';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id INNER JOIN trans ON order.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.amount > 4000 AND trans.k_symbol = 'SIPO';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id INNER JOIN trans ON order.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.type = 'SIPO' AND trans.amount > 4000;",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id INNER JOIN trans ON order.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.amount > 4000 AND trans.type = 'SIPO';"
        ]
      ]
    },
    {
      "id": 183,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 LIKE 'Beroun' AND account.date > '1996-01-01';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.account_id > 1996;",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date >= '1996-01-01';"
        ]
      ]
    },
    {
      "id": 184,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT card.card_id) FROM card card JOIN client client ON card.disp_id = client.client_id WHERE client.gender = 'F' AND card.type = 'junior';",
          "SELECT count(DISTINCT card.card_id) FROM client client JOIN card card ON client.client_id = card.client_id WHERE client.gender = 'F' AND card.type = 'junior';",
          "SELECT count(DISTINCT card.card_id) FROM client client JOIN disp disp ON client.client_id = disp.client_id JOIN card card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';",
          "SELECT count(DISTINCT card.card_id) FROM client client JOIN card card ON client.client_id = card.client_id JOIN disp disp ON card.disp_id = disp.disp_id WHERE client.gender = 'F' AND card.type = 'junior';"
        ]
      ]
    },
    {
      "id": 185,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague';",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.client_id = account.client_id WHERE district.a3 = 'Prague';",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN district ON district.district_id = account.district_id WHERE district.a3 = 'Prague';",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN district ON district.district_id = client.district_id WHERE district.a3 = 'Prague';"
        ]
      ]
    },
    {
      "id": 186,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1.0 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK MESICNE';"
        ]
      ]
    },
    {
      "id": 187,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';",
          "SELECT count(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK TYDNE';",
          "SELECT count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';",
          "SELECT count(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE frequency = 'POPLATEK TYDNE' AND type = 'OWNER';"
        ]
      ]
    },
    {
      "id": 188,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1;",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1;",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND loan.date < '1997-01-01' ORDER BY loan.amount LIMIT 1;",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' AND loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1;"
        ]
      ]
    },
    {
      "id": 189,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM client JOIN account ON client.client_id = account.client_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT min(a11) FROM district);",
          "SELECT account.account_id FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT min(a11) FROM district);",
          "SELECT account.account_id FROM client JOIN account ON client.client_id = account.client_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT MIN(a11) FROM district);",
          "SELECT account.account_id FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT min(a11) FROM district);"
        ]
      ]
    },
    {
      "id": 190,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date = '1920-01-01' AND district.a3 = 'east Bohemia';",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date = '1920-01-01' AND district.a3 = 'east Bohemia';",
          "SELECT count(DISTINCT client.client_id) FROM client JOIN district ON client.district_id = district.district_id WHERE client.birth_date = '1920-01-01' AND district.a3 = 'east Bohemia';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND client.birth_date = '1920-01-01';"
        ]
      ]
    },
    {
      "id": 191,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK TYDNE';",
          "SELECT count(account_id) FROM account WHERE account.frequency = 'POPLATEK TYDNE';",
          "SELECT count(account.account_id) FROM account WHERE account.frequency = 'POPLATEK TYDNE';",
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24;"
        ]
      ]
    },
    {
      "id": 192,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT avg(amount) FROM loan WHERE status = 'C' AND frequency = 'PO OBRATU';",
          "SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND loan.status = 'C';"
        ]
      ]
    },
    {
      "id": 193,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id, client.district_id FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK MESICNE' OR account.frequency = 'POPLATEK TYDNE';",
          "SELECT client.client_id, district.district_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id NOT IN (SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id);",
          "SELECT client.client_id, district.district_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id NOT IN (SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id) AND client.client_id NOT IN (SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id);",
          "SELECT client.client_id, district.district_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id NOT IN (SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A');"
        ]
      ]
    },
    {
      "id": 194,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id, client.birth_date FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
          "SELECT client.client_id, client.birth_date FROM client INNER JOIN card ON client.client_id = card.client_id INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
          "SELECT client.client_id, client.birth_date FROM client INNER JOIN card ON client.client_id = card.card_id INNER JOIN disp ON client.client_id = disp.client_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
          "SELECT client.client_id, client.birth_date FROM client INNER JOIN card ON client.client_id = card.client_id INNER JOIN disp ON client.client_id = disp.client_id WHERE card.type = 'gold' AND disp.type = 'OWNER';"
        ]
      ]
    },
    {
      "id": 195,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1;",
          "SELECT bond_type FROM bond GROUP BY bond_type HAVING count(*) = (SELECT max(total) FROM (SELECT count(*) AS total FROM bond GROUP BY bond_type) t2);",
          "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(*) DESC LIMIT 1;",
          "SELECT bond.bond_type FROM bond GROUP BY bond.bond_type ORDER BY count(bond.bond_type) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 196,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule WHERE label = '-' AND molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'cl');",
          "SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl';",
          "SELECT count(molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl';",
          "SELECT count(molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE label = '-' AND element = 'cl';"
        ]
      ]
    },
    {
      "id": 197,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT avg(atom.element = 'o') FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';",
          "SELECT avg(atom.element = 'o') FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_type = '-';",
          "SELECT avg(atom.element = 'o') FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';",
          "SELECT avg(atom.element = 'o') FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 198,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(bond_type = '-') / COUNT(atom_id) FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');",
          "SELECT SUM(bond_type = '-') / COUNT(atom_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE label = '+';",
          "SELECT SUM(bond_type = '-') / COUNT(atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE label = '+';",
          "SELECT SUM(bond_type = '-') / COUNT(atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 199,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'na' AND molecule.label = '-';",
          "SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'na' AND molecule.label = '-';",
          "SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'na' AND molecule.label = '-';",
          "SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'na' AND bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 200,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.label = '+';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element = 'c' AND atom.label = '+';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element = 'cl' AND atom.label = '+';",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element = 'c' AND atom.label = '+';"
        ]
      ]
    },
    {
      "id": 201,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(atom.element = 'c') / COUNT(atom.atom_id) AS percentage FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_type = '=';",
          "SELECT SUM(atom.element = 'c') / COUNT(atom.atom_id) AS percentage FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=';",
          "SELECT SUM(atom.element = 'c') / COUNT(atom.atom_id) AS percentage FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '=';",
          "SELECT (SUM(atom.element = 'c') * 100.0 / COUNT(atom.atom_id)) AS percentage FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=';"
        ]
      ]
    },
    {
      "id": 202,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM bond WHERE bond_type = '#';",
          "SELECT count(bond_id) FROM bond WHERE bond_type = '#';",
          "SELECT count(bond.bond_id) FROM bond WHERE bond.bond_type = '#';",
          "SELECT count(DISTINCT bond.bond_id) FROM bond WHERE bond.bond_type = '#';"
        ]
      ]
    },
    {
      "id": 203,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM atom WHERE element != 'br';",
          "SELECT count(DISTINCT atom_id) FROM atom WHERE element != 'br';",
          "SELECT count(DISTINCT atom.atom_id) FROM atom WHERE element != 'br';",
          "SELECT count(element) FROM atom WHERE element != 'br';"
        ]
      ]
    },
    {
      "id": 204,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule WHERE label = '+';",
          "SELECT count(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';",
          "SELECT count(*) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR099';",
          "SELECT count(*) FROM molecule WHERE molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 205,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';",
          "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'c';",
          "SELECT molecule.molecule_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';"
        ]
      ]
    },
    {
      "id": 206,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';",
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9';",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR004_8_9';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';"
        ]
      ]
    },
    {
      "id": 207,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '=' ) );",
          "SELECT DISTINCT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '=' ) );",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';",
          "SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '='));"
        ]
      ]
    },
    {
      "id": 208,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY count(label) DESC LIMIT 1;",
          "SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1;",
          "SELECT element, label FROM atom WHERE element = 'h' GROUP BY label ORDER BY count(label) DESC LIMIT 1;",
          "SELECT label FROM atom WHERE element = 'h' GROUP BY label HAVING count(label) = (SELECT max(label_count) FROM (SELECT label, count(label) AS label_count FROM atom WHERE element = 'h' GROUP BY label));"
        ]
      ]
    },
    {
      "id": 209,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond WHERE molecule_id = 'TR000' AND atom_id = 'TR000_1';",
          "SELECT bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';",
          "SELECT bond_type FROM bond WHERE molecule_id = 'TR000' AND atom_id = 'TR000_1' AND atom_id2 = 'TR000_2';",
          "SELECT bond_type FROM bond INNER JOIN atom ON bond.bond_id = atom.atom_id WHERE element = 'cl';"
        ]
      ]
    },
    {
      "id": 210,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-');",
          "SELECT DISTINCT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-');",
          "SELECT DISTINCT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';",
          "SELECT atom_id, atom_id2 FROM connected WHERE bond_type = '-';"
        ]
      ]
    },
    {
      "id": 211,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT connected.atom_id FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id WHERE molecule.label = '-';",
          "SELECT DISTINCT connected.atom_id FROM connected INNER JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.label = '-';",
          "SELECT connected.atom_id FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id WHERE molecule.label = '-';",
          "SELECT connected.atom_id FROM connected INNER JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.label = '-';"
        ]
      ]
    },
    {
      "id": 212,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM (SELECT element, count(*) AS cnt FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) WHERE cnt = (SELECT min(cnt) FROM (SELECT count(*) AS cnt FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element));",
          "SELECT element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;",
          "SELECT element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1;",
          "SELECT element FROM (SELECT element, count(*) AS cnt FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) WHERE cnt = (SELECT min(cnt) FROM (SELECT count(*) AS cnt FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) tmp);"
        ]
      ]
    },
    {
      "id": 213,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';",
          "SELECT bond_type FROM bond WHERE atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR atom_id = 'TR004_20' AND atom_id2 = 'TR004_8';",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR004_8' AND connected.atom_id = 'TR004_20';"
        ]
      ]
    },
    {
      "id": 214,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element != 'sn';",
          "SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn' AND molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 215,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.atom_id) FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';",
          "SELECT count(DISTINCT atom.atom_id) FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';",
          "SELECT count(DISTINCT atom.atom_id) FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND bond.bond_type = '-' AND molecule.label = '+';",
          "SELECT count(DISTINCT atom.atom_id) FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND bond.bond_type = '-' AND molecule.label = '+' AND atom.element = 's';"
        ]
      ]
    },
    {
      "id": 216,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';",
          "SELECT DISTINCT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';",
          "SELECT DISTINCT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';"
        ]
      ]
    },
    {
      "id": 217,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181';",
          "SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.molecule_id = 'TR181';",
          "SELECT atom.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181';",
          "SELECT atom.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.atom_id2 = 'TR181';"
        ]
      ]
    },
    {
      "id": 218,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'f';",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id;",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 219,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(bond.bond_type = '#', 1, 0)) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';",
          "SELECT cast(sum(iif(bond.bond_type = '#', 1, 0)) AS REAL) * 100 / count(bond.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = '+';"
        ]
      ]
    },
    {
      "id": 220,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;",
          "SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;",
          "SELECT element FROM atom WHERE molecule_id = 'TR000' GROUP BY element ORDER BY element ASC LIMIT 3;",
          "SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY element LIMIT 3;"
        ]
      ]
    },
    {
      "id": 221,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6';",
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6';",
          "SELECT atom.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6';",
          "SELECT connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6';"
        ]
      ]
    },
    {
      "id": 222,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;",
          "SELECT SUM(label = '+') - SUM(label = '-') FROM molecule;",
          "SELECT sum(label = '+') - sum(label = '-') FROM molecule;",
          "SELECT sum(label = '+') - sum(label = '-') AS difference FROM molecule;"
        ]
      ]
    },
    {
      "id": 223,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_5';",
          "SELECT atom_id FROM connected WHERE bond_id = 'TR000_2_5';",
          "SELECT atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_5';",
          "SELECT connected.atom_id FROM connected, bond WHERE connected.bond_id = bond.bond_id AND bond.bond_id = 'TR000_2_5';"
        ]
      ]
    },
    {
      "id": 224,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';",
          "SELECT connected.bond_id FROM connected WHERE connected.atom_id2 = 'TR000_2';",
          "SELECT bond_id FROM connected WHERE atom_id = 'TR000_2';",
          "SELECT connected.bond_id FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.atom_id = 'TR000_2';"
        ]
      ]
    },
    {
      "id": 225,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM bond WHERE bond_type = ' = ' ORDER BY molecule_id ASC LIMIT 5;",
          "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.molecule_id ASC LIMIT 5;",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.molecule_id ASC LIMIT 5;",
          "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.molecule_id ASC;"
        ]
      ]
    },
    {
      "id": 226,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(bond_type = '='), COUNT(bond_id) FROM bond WHERE molecule_id = 'TR008';",
          "SELECT SUM(bond_type = '=') / COUNT(bond_id) AS percent FROM bond WHERE molecule_id = 'TR008';",
          "SELECT SUM(bond_type = '=') AS percentage FROM bond WHERE molecule_id = 'TR008';",
          "SELECT SUM(bond_type = '=')/COUNT(bond_id) AS percent FROM bond WHERE molecule_id = 'TR008';"
        ]
      ]
    },
    {
      "id": 227,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT ROUND(SUM(label = '+') / COUNT(molecule_id), 3) AS percentage FROM molecule;",
          "SELECT ROUND(SUM(label = '+') / COUNT(molecule_id), 3) FROM molecule;",
          "SELECT ROUND(100 * SUM(label = '+') / COUNT(molecule_id), 3) FROM molecule;",
          "SELECT ROUND(SUM(label = '+') / COUNT(molecule_id) * 100, 3) FROM molecule;"
        ]
      ]
    },
    {
      "id": 228,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(atom.element = 'h') / COUNT(atom.atom_id) AS percent FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR206';",
          "SELECT SUM(atom.element = 'h') / COUNT(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR206';",
          "SELECT SUM(atom.element = 'h') / COUNT(atom.atom_id) AS percent FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR206';",
          "SELECT SUM(atom.element = 'h') / COUNT(atom.atom_id) AS percent FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR206' AND bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 229,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000';",
          "SELECT bond_type FROM bond WHERE molecule_id = 'TR000';",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000';",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR000';"
        ]
      ]
    },
    {
      "id": 230,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';",
          "SELECT atom.element, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR060';",
          "SELECT atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';",
          "SELECT element, label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';"
        ]
      ]
    },
    {
      "id": 231,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, MAX(COUNT(bond_type)) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR010' GROUP BY bond.bond_type;",
          "SELECT bond.bond_type, MAX(COUNT(bond_type)) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR010' GROUP BY bond_type;",
          "SELECT MAX(COUNT(bond_type)), bond.bond_type, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR010' GROUP BY bond.bond_type, molecule.label;",
          "SELECT MAX(COUNT(bond_type)), bond_type, label FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule_id = 'TR010' GROUP BY bond_type, label;"
        ]
      ]
    },
    {
      "id": 232,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' GROUP BY molecule.molecule_id ORDER BY count(molecule.molecule_id) DESC LIMIT 3;",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-' AND atom.element = 'c' GROUP BY molecule.molecule_id ORDER BY molecule.molecule_id LIMIT 3;",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-' AND atom.element = 'c' GROUP BY molecule.molecule_id ORDER BY count(molecule.molecule_id) DESC LIMIT 3;",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id AND connected.atom_id2 = atom.atom_id WHERE bond.bond_type = '-' AND atom.element = 'c' GROUP BY molecule.molecule_id ORDER BY molecule.molecule_id LIMIT 3;"
        ]
      ]
    },
    {
      "id": 233,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;",
          "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC;",
          "SELECT DISTINCT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;",
          "SELECT DISTINCT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC;"
        ]
      ]
    },
    {
      "id": 234,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12';",
          "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12' AND molecule_id = 'TR009';",
          "SELECT count(bond.molecule_id) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12';",
          "SELECT count(bond.bond_id) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12';"
        ]
      ]
    },
    {
      "id": 235,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'br' AND molecule.label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'br' AND molecule.label = '+';",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.label = '+' AND atom.element = 'br';",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.label = '+' AND atom.element = 'br';"
        ]
      ]
    },
    {
      "id": 236,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';",
          "SELECT bond.bond_type, connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';",
          "SELECT bond.bond_type, connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_6_9';",
          "SELECT bond_type, atom_id, atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';"
        ]
      ]
    },
    {
      "id": 237,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';",
          "SELECT molecule.molecule_id, iif(atom.label = '+', 'YES', 'NO') FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';",
          "SELECT molecule.molecule_id, iif(atom.label = '+', 'YES', 'NO') AS carcinogenic FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';",
          "SELECT molecule.molecule_id, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR001_10';"
        ]
      ]
    },
    {
      "id": 238,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#';",
          "SELECT count(DISTINCT bond.molecule_id) FROM bond WHERE bond.bond_type = '#';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';",
          "SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';"
        ]
      ]
    },
    {
      "id": 239,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM connected WHERE connected.atom_id = 'TR000_19';",
          "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR000_19';",
          "SELECT count(connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_19';",
          "SELECT count(DISTINCT connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_19';"
        ]
      ]
    },
    {
      "id": 240,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004';",
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004' GROUP BY atom.element;",
          "SELECT atom.element FROM atom WHERE atom.molecule_id = 'TR004';",
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id LIKE 'TR004' GROUP BY atom.element;"
        ]
      ]
    },
    {
      "id": 241,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule WHERE label = '-';",
          "SELECT count(*) FROM molecule WHERE label != '-';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule WHERE molecule.label = '-';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule WHERE molecule.label != '-';"
        ]
      ]
    },
    {
      "id": 242,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTR(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+';",
          "SELECT DISTINCT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTR(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+';",
          "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTR(atom_id, 7, 2) BETWEEN '21' AND '25' AND label = '+';",
          "SELECT DISTINCT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTR(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND atom.label = '+';"
        ]
      ]
    },
    {
      "id": 243,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';",
          "SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';",
          "SELECT bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';",
          "SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND connected.atom_id2 = atom.atom_id AND atom.element = 'n';"
        ]
      ]
    },
    {
      "id": 244,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' AND molecule.label = '+' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' AND atom.element = 'c' GROUP BY molecule.label ORDER BY count(*) DESC LIMIT 1;",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label HAVING count(bond.bond_id) = (SELECT max(num) FROM (SELECT count(bond.bond_id) AS num FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label) t);",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label HAVING count(bond.bond_id) = (SELECT max(double_bond) FROM (SELECT count(bond.bond_id) AS double_bond FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label) t);"
        ]
      ]
    },
    {
      "id": 245,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(count(bond_id) AS REAL) / count(atom_id) AS average FROM atom WHERE element = 'i';",
          "SELECT cast(count(bond_id) AS REAL) / count(atom_id) AS average FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE atom.element = 'i';",
          "SELECT cast(count(bond_id) AS REAL) / count(atom_id) AS average FROM atom WHERE atom.element = 'i';",
          "SELECT cast(count(bond_id) AS REAL) / count(atom_id) AS average FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i';"
        ]
      ]
    },
    {
      "id": 246,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, bond.bond_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR000_45';",
          "SELECT bond.bond_type, bond.bond_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR000_45';",
          "SELECT bond.bond_type, bond.bond_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR000_45';",
          "SELECT bond.bond_type, bond.bond_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE SUBSTR(atom.atom_id, 7, 2) + 0 = 45;"
        ]
      ]
    },
    {
      "id": 247,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom WHERE NOT EXISTS (SELECT 1 FROM connected WHERE connected.atom_id = atom.atom_id);",
          "SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN (SELECT connected.atom_id2 FROM connected);",
          "SELECT DISTINCT atom.element FROM atom LEFT JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id IS NULL;",
          "SELECT DISTINCT atom.element FROM atom LEFT JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id IS NULL;"
        ]
      ]
    },
    {
      "id": 248,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR041' AND bond.bond_type = '#';",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE molecule.molecule_id = 'TR041' AND bond.bond_type = '#';",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR041' AND bond.bond_type = '#';",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR041' AND bond.bond_type = '#';"
        ]
      ]
    },
    {
      "id": 249,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19';",
          "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR144_8_19';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19';",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR144_8_19';"
        ]
      ]
    },
    {
      "id": 250,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';",
          "SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;",
          "SELECT molecule.molecule_id FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.molecule_id ORDER BY count(bond.bond_id) DESC LIMIT 1;",
          "SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 251,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM (SELECT element, count(*) AS cnt FROM atom GROUP BY element) WHERE cnt = (SELECT min(cnt) FROM (SELECT count(*) AS cnt FROM atom GROUP BY element));",
          "SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY count(element) ASC LIMIT 1;",
          "SELECT element FROM (SELECT element, count(*) AS cnt FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element) WHERE cnt = (SELECT min(cnt) FROM (SELECT count(*) AS cnt FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element));",
          "SELECT element FROM (SELECT element, count(*) AS cnt FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element) WHERE cnt = (SELECT min(cnt) FROM (SELECT count(*) AS cnt FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element) tmp);"
        ]
      ]
    },
    {
      "id": 252,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.element = 'pb';",
          "SELECT atom.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'lead';",
          "SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'pb';",
          "SELECT atom.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.element = 'pb';"
        ]
      ]
    },
    {
      "id": 253,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';",
          "SELECT atom.element FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#';",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';",
          "SELECT atom.element FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE bond.bond_type = '#';"
        ]
      ]
    },
    {
      "id": 254,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)))) FROM connected;",
          "SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) )) FROM connected;",
          "SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) )) FROM connected GROUP BY bond_id;",
          "SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)))) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id GROUP BY atom.element;"
        ]
      ]
    },
    {
      "id": 255,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT ROUND(proportion, 5) FROM (SELECT SUM(label = '+') * 100 / COUNT(bond_id) AS proportion FROM bond WHERE bond_type = '-');",
          "SELECT ROUND(proportion * 100, 5) FROM (SELECT SUM(label = '+') * 100 / COUNT(bond_id) AS proportion FROM bond WHERE bond_type = '-');",
          "SELECT ROUND(proportion, 5) AS proportion FROM (SELECT SUM(label = '+') * 100 / COUNT(bond_id) AS proportion FROM bond WHERE bond_type = '-');",
          "SELECT ROUND(proportion, 5) FROM (SELECT SUM(label = '+') * 100.0 / COUNT(bond_id) AS proportion FROM bond WHERE bond_type = '-');"
        ]
      ]
    },
    {
      "id": 256,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM atom WHERE element IN('c', 'h');",
          "SELECT count(*) FROM atom WHERE element in('c', 'h');",
          "SELECT count(*) FROM atom WHERE element IN ('c', 'h');",
          "SELECT count(atom.atom_id) FROM atom WHERE atom.element IN('c', 'h');"
        ]
      ]
    },
    {
      "id": 257,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom_id2 FROM connected WHERE element = 's';",
          "SELECT atom_id2 FROM atom WHERE element = 's';",
          "SELECT atom_id2 FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE element = 's';",
          "SELECT atom_id2 FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 's');"
        ]
      ]
    },
    {
      "id": 258,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE atom.element = 'sn';",
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id2 WHERE atom.element = 'sn';",
          "SELECT bond.bond_type FROM atom JOIN bond ON atom.atom_id = bond.atom_id WHERE atom.element = 'sn';",
          "SELECT bond.bond_type FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id WHERE atom.element = 'sn';"
        ]
      ]
    },
    {
      "id": 259,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT element) FROM molecule WHERE label = '-';",
          "SELECT count(DISTINCT element) FROM bond WHERE bond_type = '-';",
          "SELECT count(DISTINCT element) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '-' );",
          "SELECT count(DISTINCT element) FROM atom WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '-' );"
        ]
      ]
    },
    {
      "id": 260,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '#' AND atom.element IN ('p', 'br');",
          "SELECT count(*) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '#' AND atom.element = 'p' OR atom.element = 'br';",
          "SELECT count(*) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id AND atom.atom_id = bond.atom_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.label = '#' AND atom.element IN ('p', 'br');",
          "SELECT count(*) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id AND atom.atom_id = bond.atom_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.label = '#' AND atom.element = 'p' OR atom.element = 'br';"
        ]
      ]
    },
    {
      "id": 261,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_id FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');",
          "SELECT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';",
          "SELECT DISTINCT bond_id FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');",
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 262,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';",
          "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '-';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';"
        ]
      ]
    },
    {
      "id": 263,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(atom.element = 'cl') / COUNT(atom.atom_id) as percent FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_type = '-';",
          "SELECT SUM(atom.element = 'cl') / COUNT(atom.atom_id) as percent FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-';",
          "SELECT SUM(atom.element = 'cl') / COUNT(atom.atom_id) AS percent FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-';",
          "SELECT SUM(element = 'cl'), COUNT(atom_id) FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = '-';"
        ]
      ]
    },
    {
      "id": 264,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002');",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.molecule_id IN ('TR000', 'TR001', 'TR002');",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002');",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.molecule_id IN ('TR000', 'TR001', 'TR002');"
        ]
      ]
    },
    {
      "id": 265,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id WHERE connected.atom_id = connected.atom_id2 AND connected.bond_type = '-';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = connected.atom_id2 AND bond.bond_type = '-';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' AND bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 266,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';",
          "SELECT count(*) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE m.label = '+';",
          "SELECT count(*) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON b.molecule_id = c.molecule_id WHERE m.label = '+';",
          "SELECT sum(molecule.label = '+') FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR030';"
        ]
      ]
    },
    {
      "id": 267,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';",
          "SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';",
          "SELECT bond.bond_type FROM bond WHERE bond.molecule_id BETWEEN 'TR000' AND 'TR050';",
          "SELECT bond_type FROM bond WHERE molecule_id > 'TR000' AND molecule_id < 'TR050';"
        ]
      ]
    },
    {
      "id": 268,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11';",
          "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_10_11';",
          "SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11';",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';"
        ]
      ]
    },
    {
      "id": 269,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM bond WHERE element = 'i';",
          "SELECT count(bond_id) FROM connected WHERE element = 'i';",
          "SELECT count(bond.bond_id) FROM bond INNER JOIN atom ON bond.atom_id = atom.atom_id WHERE atom.element = 'i';",
          "SELECT count(bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'i';"
        ]
      ]
    },
    {
      "id": 270,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca';",
          "SELECT label FROM molecule WHERE element = 'ca' ORDER BY label DESC LIMIT 1;",
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE atom.element = 'ca';",
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE element = 'ca';"
        ]
      ]
    },
    {
      "id": 271,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT 'YES' FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND atom.element = 'cl' AND atom.element = 'c';",
          "SELECT 'YES' FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND atom.element IN ('cl', 'c');",
          "SELECT 'YES' FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND (atom.element = 'cl' OR atom.element = 'c');",
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE bond.bond_id = 'TR001_1_8' AND atom.element IN ('cl', 'c');"
        ]
      ]
    },
    {
      "id": 272,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' AND bond.bond_type = '#' AND atom.label = '-';",
          "SELECT molecule.molecule_id FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' AND bond.bond_type = '#' AND atom.label = '-';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' AND bond.bond_type = '#' AND molecule.label = '-';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND bond.bond_type = '#' AND molecule.label = '-';"
        ]
      ]
    },
    {
      "id": 273,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT (count(DISTINCT CASE WHEN atom.element = 'cl' THEN molecule.molecule_id ELSE NULL END) * 100.0 / count(DISTINCT molecule.molecule_id)) AS percentage FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
          "SELECT (count(DISTINCT CASE WHEN atom.element = 'pb' THEN molecule.molecule_id ELSE NULL END) * 100.0 / count(DISTINCT molecule.molecule_id)) AS percentage FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
          "SELECT (count(DISTINCT CASE WHEN atom.element = 'pb' THEN molecule.molecule_id ELSE NULL END) * 100.0 / count(DISTINCT molecule.molecule_id)) AS percentage FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'cl';",
          "SELECT element, (count(*) * 100.0 / (SELECT count(*) FROM molecule)) AS percentage FROM molecule WHERE element = 'cl' GROUP BY element HAVING label = '+';"
        ]
      ]
    },
    {
      "id": 274,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';",
          "SELECT atom.element FROM atom WHERE atom.molecule_id = 'TR001';",
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR001';",
          "SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';"
        ]
      ]
    },
    {
      "id": 275,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM bond WHERE bond_type = ' = ';",
          "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = ' = ';",
          "SELECT molecule_id FROM bond WHERE bond_type = ' =';",
          "SELECT molecule.molecule_id FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ';"
        ]
      ]
    },
    {
      "id": 276,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';",
          "SELECT DISTINCT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';",
          "SELECT atom_id, atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';"
        ]
      ]
    },
    {
      "id": 277,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_1_2';",
          "SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE bond_id = 'TR000_1_2';",
          "SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_1_2';",
          "SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR000_1_2';"
        ]
      ]
    },
    {
      "id": 278,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule WHERE label = '-' AND bond_type = '-';",
          "SELECT count(*) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';",
          "SELECT count(*) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 279,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11';",
          "SELECT bond.label FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_10_11';",
          "SELECT bond.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_10_11';",
          "SELECT bond.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_10_11';"
        ]
      ]
    },
    {
      "id": 280,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id , molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#';",
          "SELECT bond.bond_id , molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';",
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';",
          "SELECT bond_id, label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond_type = '#';"
        ]
      ]
    },
    {
      "id": 281,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(CASE WHEN substr(atom.atom_id, 7, 1) = '4' AND molecule.label = '+' THEN atom.element END) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id;",
          "SELECT count(CASE WHEN substr(atom.atom_id, 7, 1) = '4' THEN atom.element END) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';",
          "SELECT count(CASE WHEN substr(atom.atom_id, 7, 1) = '4' AND molecule.label = '+' THEN atom.element END) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';",
          "SELECT count(CASE WHEN substr(atom.atom_id, 7, 1) = '4' AND molecule.label = '+' THEN atom.element END) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_type = '=';"
        ]
      ]
    },
    {
      "id": 282,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(atom.element = 'h') / COUNT(atom.element) AS ratio, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR006' GROUP BY molecule.label;",
          "SELECT SUM(atom.element = 'h') / COUNT(atom.element) AS ratio, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR006';",
          "SELECT SUM(element = 'h') / count(element) AS ratio, label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule_id = 'TR006' GROUP BY label;",
          "SELECT SUM(element = 'h') / count(element) AS ratio, label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule_id = 'TR006' AND element = 'h' GROUP BY label;"
        ]
      ]
    },
    {
      "id": 283,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'ca';",
          "SELECT label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'ca';",
          "SELECT label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'ca' AND label = '+';",
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'ca';"
        ]
      ]
    },
    {
      "id": 284,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'c');",
          "SELECT DISTINCT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c';",
          "SELECT DISTINCT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c';",
          "SELECT DISTINCT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c';"
        ]
      ]
    },
    {
      "id": 285,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';",
          "SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';",
          "SELECT DISTINCT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';",
          "SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11' GROUP BY element;"
        ]
      ]
    },
    {
      "id": 286,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond;",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id;",
          "SELECT sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) * 100 / count(*) FROM bond;",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond;"
        ]
      ]
    },
    {
      "id": 287,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047';",
          "SELECT SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) / COUNT(bond.bond_id) AS percent FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047';",
          "SELECT SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR047';",
          "SELECT SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100 / COUNT(*) AS percent FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047';"
        ]
      ]
    },
    {
      "id": 288,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR001_1';",
          "SELECT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR001_1';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR001_1';",
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR001_1';"
        ]
      ]
    },
    {
      "id": 289,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR151';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id = 'TR151';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id = 'TR151';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id = 'TR151' AND bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 290,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151';",
          "SELECT element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151';",
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
        ]
      ]
    },
    {
      "id": 291,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule WHERE molecule.label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule WHERE molecule.label = '+';",
          "SELECT count(molecule.label) FROM molecule WHERE molecule.label = '+';",
          "SELECT count(*) FROM molecule WHERE label = '+';"
        ]
      ]
    },
    {
      "id": 292,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND bond.element = 'c';",
          "SELECT DISTINCT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c';",
          "SELECT DISTINCT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND bond.bond_type = '=' AND atom.element = 'c';",
          "SELECT DISTINCT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND bond.bond_type = '=' AND bond.element = 'c';"
        ]
      ]
    },
    {
      "id": 293,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';",
          "SELECT count(atom.atom_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
          "SELECT count(atom.atom_id) FROM molecule molecule INNER JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 294,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_id FROM bond WHERE bond_type = '=' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');",
          "SELECT bond_id FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND bond_type = ' = ';",
          "SELECT bond_id FROM bond WHERE bond_type = ' = ' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');",
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';"
        ]
      ]
    },
    {
      "id": 295,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.label = '+';",
          "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';",
          "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'h' AND molecule.label = '+';",
          "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'h' AND molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 296,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR000_1_2' AND atom.atom_id = 'TR000_1';",
          "SELECT molecule.molecule_id FROM connected connected JOIN bond bond ON connected.bond_id = bond.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR000_1_2' AND atom.atom_id = 'TR000_1';",
          "SELECT molecule.molecule_id FROM connected connected JOIN bond bond ON connected.bond_id = bond.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_1' AND bond.bond_id = 'TR000_1_2';",
          "SELECT molecule.molecule_id FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id JOIN molecule molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR000_1_2' AND atom.atom_id = 'TR000_1';"
        ]
      ]
    },
    {
      "id": 297,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';",
          "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';",
          "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element LIKE 'c' AND molecule.label LIKE '-';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element LIKE 'c' AND molecule.label LIKE '-';"
        ]
      ]
    },
    {
      "id": 298,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(label = '+' AND element = 'h') * 100.0 / COUNT(molecule_id) FROM molecule;",
          "SELECT (divide(sum(label = '+' and element = 'h'), count(molecule_id)) * 100.0) FROM molecule;",
          "SELECT SUM(label = '+' AND element = 'h') / COUNT(molecule_id) * 100.0 FROM molecule;",
          "SELECT (divide(sum(label = '+' and element = 'h'), count(molecule_id)) * 100.0) AS percentage FROM molecule;"
        ]
      ]
    },
    {
      "id": 299,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR124';",
          "SELECT label FROM molecule WHERE molecule_id = 'TR124' AND label = '+';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id = 'TR124';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id = 'TR124' AND bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 300,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM atom WHERE atom.molecule_id = 'TR186';",
          "SELECT atom_id FROM atom WHERE molecule_id = 'TR186';",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR186';",
          "SELECT atom.atom_id FROM atom WHERE atom.molecule_id = 'TR186' ORDER BY atom.atom_id;"
        ]
      ]
    },
    {
      "id": 301,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR007_4_19';",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR007_4_19';",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR007_4' AND connected.atom_id2 = 'TR007_19';",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR007_4' AND connected.atom_id2 = 'TR007_19';"
        ]
      ]
    },
    {
      "id": 302,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR001_2_4';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR001_2_4';",
          "SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR001_2_4';"
        ]
      ]
    },
    {
      "id": 303,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM bond WHERE molecule_id = 'TR006' AND bond_type = ' = ';",
          "SELECT count(bond_id) FROM bond WHERE molecule_id = 'TR006' AND bond_type = '=';",
          "SELECT count(bond.bond_id) FROM bond WHERE bond.molecule_id = 'TR006' AND bond.bond_type = ' = ';",
          "SELECT count(bond_id) FROM bond WHERE bond.molecule_id = 'TR006' AND bond.bond_type = ' = ';"
        ]
      ]
    },
    {
      "id": 304,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+';",
          "SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');",
          "SELECT DISTINCT molecule.molecule_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' OR atom.element = 'c' OR atom.element = 'h' OR atom.element = 'o' OR atom.element = 's' OR atom.element = 'n' OR atom.element = 'p' OR atom.element = 'na' OR atom.element = 'br' OR atom.element = 'f' OR atom.element = 'i' OR atom.element = 'sn' OR atom.element = 'pb' OR atom.element = 'te' OR atom.element = 'ca';",
          "SELECT DISTINCT molecule.molecule_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 305,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id , connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';",
          "SELECT bond.bond_id , connected.atom_id , connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';",
          "SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';",
          "SELECT bond.bond_id , atom.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 306,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';",
          "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' GROUP BY molecule.molecule_id;",
          "SELECT molecule.molecule_id, atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';",
          "SELECT molecule.molecule_id, atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' GROUP BY molecule.molecule_id, atom.element;"
        ]
      ]
    },
    {
      "id": 307,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_2_3';",
          "SELECT DISTINCT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR000_2_3';"
        ]
      ]
    },
    {
      "id": 308,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond.bond_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl';",
          "SELECT count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';",
          "SELECT count(bond.bond_id) FROM bond INNER JOIN atom ON bond.atom_id = atom.atom_id WHERE atom.element = 'cl';",
          "SELECT count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.element = 'cl';"
        ]
      ]
    },
    {
      "id": 309,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id, count(bond.bond_type) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id;",
          "SELECT atom.atom_id, count(DISTINCT bond.bond_type) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id GROUP BY atom.atom_id;",
          "SELECT connected.atom_id, count(DISTINCT bond.bond_type) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR346' GROUP BY connected.atom_id;",
          "SELECT atom.atom_id, count(DISTINCT bond.bond_type) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id = 'TR346' GROUP BY atom.atom_id;"
        ]
      ]
    },
    {
      "id": 310,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 311,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element != 's' AND bond_type != ' = ';",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element != 's' AND bond.bond_type != ' = ';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element != 's' AND bond.bond_type != ' = ';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE element != 's' AND bond_type != ' = ';"
        ]
      ]
    },
    {
      "id": 312,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM bond WHERE bond_id = 'TR001_2_4';",
          "SELECT label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4';",
          "SELECT label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4';",
          "SELECT label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_2_4';"
        ]
      ]
    },
    {
      "id": 313,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.atom_id) FROM atom WHERE atom.molecule_id = 'TR001';",
          "SELECT count(DISTINCT atom.atom_id) FROM atom WHERE atom.molecule_id = 'TR001';",
          "SELECT count(*) FROM atom WHERE molecule_id = 'TR001';",
          "SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR001';"
        ]
      ]
    },
    {
      "id": 314,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond.bond_type) FROM bond WHERE bond.bond_type = '-';",
          "SELECT count(*) FROM bond WHERE bond_type = '-';",
          "SELECT count(bond.bond_id) FROM bond WHERE bond.bond_type = '-';",
          "SELECT count(DISTINCT bond.bond_id) FROM bond WHERE bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 315,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl';",
          "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 316,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label != '-';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label != '-';"
        ]
      ]
    },
    {
      "id": 317,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id;",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id;",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / count(*) AS percentage FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id;",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY molecule.molecule_id;"
        ]
      ]
    },
    {
      "id": 318,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_1_7';",
          "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_1_7';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_1_7';",
          "SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_1_7';"
        ]
      ]
    },
    {
      "id": 319,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.element) FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_id = 'TR001_3_4';",
          "SELECT count(DISTINCT atom.element) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR001_3_4';",
          "SELECT count(DISTINCT atom.element) FROM connected connected JOIN atom atom ON connected.atom_id = atom.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4';",
          "SELECT count(DISTINCT atom.element) FROM connected connected INNER JOIN atom atom ON connected.atom_id = atom.atom_id INNER JOIN bond bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4';"
        ]
      ]
    },
    {
      "id": 320,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_1' AND atom_id = 'TR000_2');",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR000_1' AND connected.atom_id = 'TR000_2';",
          "SELECT bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR000_1' AND connected.atom_id = 'TR000_2';",
          "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id2 = 'TR000_1' AND connected.atom_id = 'TR000_2';"
        ]
      ]
    },
    {
      "id": 321,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM atom WHERE atom_id = 'TR000_2';",
          "SELECT molecule_id FROM atom WHERE atom_id = 'TR000_2' UNION SELECT molecule_id FROM atom WHERE atom_id = 'TR000_4';",
          "SELECT molecule.molecule_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4';",
          "SELECT molecule.molecule_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_2' AND connected.atom_id = 'TR000_4';"
        ]
      ]
    },
    {
      "id": 322,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR000_1';",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR000_1';",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR000_1';",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.atom_id = 'TR000_1';"
        ]
      ]
    },
    {
      "id": 323,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR000';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR000';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id = 'TR000';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.molecule_id = 'TR000';"
        ]
      ]
    },
    {
      "id": 324,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT SUM(bond_type = '-') AS percentage FROM bond;",
          "SELECT SUM(bond_type = '-') / COUNT(bond_id) AS percentage FROM bond;",
          "SELECT SUM(bond_type = '-'), COUNT(bond_id) FROM bond;",
          "SELECT SUM(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) / COUNT(bond.bond_id) AS percentage FROM bond;"
        ]
      ]
    },
    {
      "id": 325,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+';",
          "SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n';",
          "SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id AND atom.element = 'n';",
          "SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id AND atom.element = 'n' WHERE molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 326,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM atom WHERE element = 's' AND bond_type = ' = ';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE atom.element = 's' AND bond.bond_type = ' = ';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 's' AND bond.bond_type = ' = ';",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE atom.element = 's' AND bond.bond_type = ' = ';"
        ]
      ]
    },
    {
      "id": 327,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT * FROM molecule WHERE label = '-' AND COUNT(molecule_id) > 5;",
          "SELECT molecule.molecule_id FROM molecule WHERE molecule.label = '-' AND COUNT(molecule.molecule_id) > 5;",
          "SELECT molecule.molecule_id FROM molecule WHERE molecule.label = '-' GROUP BY molecule.molecule_id HAVING COUNT(molecule.molecule_id) > 5;",
          "SELECT molecule.molecule_id, molecule.label FROM molecule WHERE molecule.label = '-' AND COUNT(molecule.molecule_id) > 5;"
        ]
      ]
    },
    {
      "id": 328,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR024';",
          "SELECT element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR024';",
          "SELECT element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR024' GROUP BY element;",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR024';"
        ]
      ]
    },
    {
      "id": 329,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.molecule_id) DESC LIMIT 1;",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.molecule_id) DESC LIMIT 1;",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=' AND molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.molecule_id) DESC LIMIT 1;",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=' AND molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.atom_id) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 330,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(label = '+', 1, 0)) AS REAL) * 100.0 / count(molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE element = 'h' AND bond_type = '#';",
          "SELECT cast(sum(iif(label = '+', 1, 0)) AS REAL) * 100.0 / count(molecule_id) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN atom ON bond.molecule_id = atom.molecule_id AND bond.bond_id = atom.atom_id WHERE element = 'h' AND bond_type = '#';",
          "SELECT cast(sum(iif(label = '+', 1, 0)) AS REAL) * 100.0 / count(molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id AND bond.bond_id = atom.atom_id WHERE element = 'h' AND bond_type = '#';",
          "SELECT cast(sum(iif(molecule.label = '+', 1, 0)) AS REAL) * 100.0 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id AND bond.bond_id = atom.atom_id WHERE atom.element = 'h' AND bond.bond_type = '#';"
        ]
      ]
    },
    {
      "id": 331,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule WHERE label = '+';",
          "SELECT count(molecule.molecule_id) FROM molecule WHERE molecule.label = '+';",
          "SELECT count(*) FROM molecule WHERE molecule.label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule WHERE molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 332,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-';",
          "SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010';",
          "SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' and 'TR010' AND bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 333,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.element) FROM atom INNER JOIN bond ON atom.atom_id = bond.bond_id WHERE atom.molecule_id = 'TR008' AND atom.element = 'c';",
          "SELECT count(*) FROM atom INNER JOIN bond ON atom.atom_id = bond.bond_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c';",
          "SELECT count(*) FROM atom INNER JOIN bond ON atom.atom_id = bond.bond_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id = 'TR008';",
          "SELECT count(atom.element) FROM atom INNER JOIN bond ON atom.atom_id = bond.bond_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id = 'TR008';"
        ]
      ]
    },
    {
      "id": 334,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id2 = 'TR004_7' AND molecule.label = '-';",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label != '-';"
        ]
      ]
    },
    {
      "id": 335,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.element = 'o' AND bond.bond_type = ' = ';"
        ]
      ]
    },
    {
      "id": 336,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-';",
          "SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' AND molecule.label = '-';",
          "SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.label = '-';"
        ]
      ]
    },
    {
      "id": 337,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element, bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR002';",
          "SELECT DISTINCT atom.element, bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR002';",
          "SELECT atom.element, bond.bond_type FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR002';",
          "SELECT atom.element, bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR002';"
        ]
      ]
    },
    {
      "id": 338,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c' AND bond_type = ' = ';",
          "SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c';",
          "SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c' AND bond_type = '=';",
          "SELECT atom_id FROM atom WHERE element = 'c' AND molecule_id = 'TR012' AND bond_type = ' = ';"
        ]
      ]
    },
    {
      "id": 339,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND atom.element = 'o';",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND atom.element = 'o';",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND bond.bond_type = '=' AND atom.element = 'o';",
          "SELECT atom.atom_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND bond.bond_type = '-' AND atom.element = 'o';"
        ]
      ]
    },
    {
      "id": 340,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT * FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;",
          "SELECT * FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;",
          "SELECT cards.name FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;",
          "SELECT * FROM cards WHERE hasfoil = 1 AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 341,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT * FROM cards WHERE bordercolor = 'borderless' AND id NOT IN (SELECT cardkingdomfoilid FROM cards WHERE cardkingdomid IS NOT NULL);",
          "SELECT cards.asciiname FROM cards WHERE cards.bordercolor = 'borderless' AND cards.cardkingdomfoilid IS NULL;",
          "SELECT * FROM cards WHERE bordercolor = 'borderless' AND id NOT IN (SELECT cardkingdomfoilid FROM cards WHERE cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL);",
          "SELECT cards.asciiname FROM cards WHERE cards.bordercolor = 'borderless' AND cards.id NOT IN (SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid = cards.cardkingdomid AND cards.cardkingdomid IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 342,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE faceconvertedmanacost = (SELECT MAX(faceconvertedmanacost) FROM cards);",
          "SELECT name FROM cards WHERE convertedmanacost = (SELECT MAX(faceconvertedmanacost) FROM cards);",
          "SELECT name FROM cards WHERE faceconvertedmanacost = (SELECT max(faceconvertedmanacost) FROM cards);",
          "SELECT name FROM cards WHERE faceconvertedmanacost = (SELECT MAX(faceconvertedmanacost) FROM cards);"
        ]
      ]
    },
    {
      "id": 343,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015;",
          "SELECT cards.name FROM cards WHERE cards.edhrecrank < 100 AND cards.frameversion = 2015;",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.id < 100 AND foreign_data.frameversion = 2015;",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.id < 100 AND cards.frameversion = 2015;"
        ]
      ]
    },
    {
      "id": 344,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE rarity = 'mythic' AND status = 'Banned' AND format = 'gladiator';",
          "SELECT id FROM cards WHERE rarity = 'mythic' AND status = 'Banned' AND format = 'gladiator';",
          "SELECT name FROM cards WHERE rarity = 'mythic' AND format = 'gladiator' AND status = 'Banned';",
          "SELECT name FROM cards WHERE rarity = 'mythic' AND status = 'Banned' AND format = 'gladiator' GROUP BY name;"
        ]
      ]
    },
    {
      "id": 345,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';",
          "SELECT status FROM legalities WHERE format = 'vintage' AND types = 'Artifact' AND side IS NULL;",
          "SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';",
          "SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND cards.format = 'vintage';"
        ]
      ]
    },
    {
      "id": 346,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id, cards.artist FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal' AND cards.power = '*';",
          "SELECT cards.id, cards.artist FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal' AND (cards.power = '*' OR cards.power IS NULL);",
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal' AND (cards.power = '*' OR cards.power IS NULL);",
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal' AND cards.power = '*' OR cards.power IS NULL;"
        ]
      ]
    },
    {
      "id": 347,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id FROM cards WHERE cards.artist = 'Stephen Daniele';",
          "SELECT cards.id, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele';",
          "SELECT cards.id, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = '<NAME>';",
          "SELECT cards.id, rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = 'Stephen Daniele';"
        ]
      ]
    },
    {
      "id": 348,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';",
          "SELECT text FROM rulings WHERE id = (SELECT id FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s');",
          "SELECT text FROM rulings WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';",
          "SELECT text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';"
        ]
      ]
    },
    {
      "id": 349,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, cards.artist, rulings.text, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, rulings.text, rulings.date ORDER BY count(rulings.uuid) DESC LIMIT 1;",
          "SELECT cards.name, cards.artist, rulings.text, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid GROUP BY rulings.uuid ORDER BY count(rulings.uuid) DESC LIMIT 1;",
          "SELECT cards.name, cards.artist, rulings.text, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid GROUP BY cards.name, cards.artist, rulings.text, rulings.date ORDER BY count(rulings.uuid) DESC LIMIT 1;",
          "SELECT cards.name, cards.artist, rulings.text, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE ispromo = 1 GROUP BY cards.name, cards.artist, rulings.text, rulings.date ORDER BY count(rulings.uuid) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 350,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.name = 'annul' AND foreign_data.number = '29';",
          "SELECT DISTINCT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'annul' AND cards.number = '29';",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'annul' AND cards.number = '29';",
          "SELECT DISTINCT foreign_data.language FROM foreign_data WHERE foreign_data.name = 'annul' AND foreign_data.number = '29';"
        ]
      ]
    },
    {
      "id": 351,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;",
          "SELECT cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND foreign_data.isalternative = 1;",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND foreign_data.isalternative = '1';"
        ]
      ]
    },
    {
      "id": 352,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations WHERE set_translations.language = 'Chinese Simplified';",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN cards ON set_translations.id = cards.id;",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.language = 'Chinese Simplified';",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id;"
        ]
      ]
    },
    {
      "id": 353,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.totalsetsize FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian';",
          "SELECT totalsetsize FROM set_translations WHERE language = 'Italian';",
          "SELECT sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian';",
          "SELECT sets.totalsetsize FROM set_translations INNER JOIN sets ON set_translations.id = sets.id WHERE set_translations.language = 'Italian';"
        ]
      ]
    },
    {
      "id": 354,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd';",
          "SELECT count(type) FROM cards WHERE artist = 'Aaron Boyd';",
          "SELECT count(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';",
          "SELECT count(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';"
        ]
      ]
    },
    {
      "id": 355,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';",
          "SELECT cards.keywords FROM cards WHERE cards.name = 'Angel of Mercy';",
          "SELECT keywords FROM cards WHERE name = \"Angel of Mercy\";",
          "SELECT keywords FROM cards WHERE name = 'Angel of Mercy' LIMIT 1;"
        ]
      ]
    },
    {
      "id": 356,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE power = '*';",
          "SELECT count(*) FROM cards WHERE power = '*';",
          "SELECT COUNT(id) FROM CARDS WHERE power = '*';",
          "SELECT COUNT(*) FROM CARDS WHERE power = '*';"
        ]
      ]
    },
    {
      "id": 357,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT promotypes FROM cards WHERE name = 'Duress';",
          "SELECT cards.promotypes FROM cards WHERE cards.name = 'Duress';",
          "SELECT promotypes FROM cards WHERE cards.name = 'Duress';",
          "SELECT promotypes FROM cards WHERE name = 'Duress' AND type = 'promotion';"
        ]
      ]
    },
    {
      "id": 358,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.bordercolor FROM cards WHERE cards.name = 'Ancestor''s Chosen';",
          "SELECT bordercolor FROM cards WHERE name = 'Ancestor''s Chosen';",
          "SELECT cards.bordercolor FROM cards WHERE name = 'Ancestor''s Chosen';",
          "SELECT cards.bordercolor FROM cards WHERE cards.name LIKE 'Ancestor''s Chosen';"
        ]
      ]
    },
    {
      "id": 359,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.originaltype FROM cards WHERE cards.name = 'Ancestor's Chosen';",
          "SELECT cards.originaltype FROM cards WHERE cards.name = 'Ancestor''s Chosen';",
          "SELECT originaltype FROM cards WHERE name = 'Ancestor's Chosen';",
          "SELECT cards.originaltype FROM cards WHERE cards.name = \"Ancestor's Chosen\";"
        ]
      ]
    },
    {
      "id": 360,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT language FROM set_translations WHERE setcode = (SELECT setcode FROM cards WHERE name = 'Angel of Mercy');",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Angel of Mercy';",
          "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.uuid = (SELECT cards.uuid FROM cards WHERE cards.name = 'Angel of Mercy');",
          "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Angel of Mercy';"
        ]
      ]
    },
    {
      "id": 361,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0;",
          "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0;",
          "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.istextless = 0;",
          "SELECT count(cards.text) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0;"
        ]
      ]
    },
    {
      "id": 362,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Condemn';",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.id = cards.id WHERE cards.name = 'Condemn';",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Ancestor's Chosen';",
          "SELECT rulings.text FROM rulings WHERE rulings.id = (SELECT cards.id FROM cards WHERE cards.name = 'Condemn');"
        ]
      ]
    },
    {
      "id": 363,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(legalities.id) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isstarter = 1;",
          "SELECT count(legalities.id) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.isstarter = 1 AND legalities.status = 'restricted';",
          "SELECT count(legalities.id) FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isstarter = 1;",
          "SELECT count(legalities.id) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Restricted' AND cards.isstarter = 1;"
        ]
      ]
    },
    {
      "id": 364,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Cloudchaser Eagle';",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle';",
          "SELECT legalities.status FROM legalities WHERE cards.name = 'Cloudchaser Eagle';",
          "SELECT legalities.status FROM legalities WHERE legalities.uuid = 'Cloudchaser Eagle';"
        ]
      ]
    },
    {
      "id": 365,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.type FROM cards WHERE cards.name = 'Benalish Knight';",
          "SELECT cards.type FROM cards WHERE name = 'Benalish Knight';",
          "SELECT cards.types FROM cards WHERE cards.name = 'Benalish Knight';",
          "SELECT cards.type FROM cards WHERE cards.name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 366,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.format FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Benalish Knight';",
          "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight';",
          "SELECT rulings.format FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Benalish Knight';",
          "SELECT rulings.format FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.name = 'Benalish Knight';"
        ]
      ]
    },
    {
      "id": 367,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';",
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian';",
          "SELECT artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';"
        ]
      ]
    },
    {
      "id": 368,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT Divide(Count(cards.id) where cards.bordercolor = 'borderless', Count(cards.id)) *100 FROM cards;",
          "SELECT Divide(Count(cards.id) WHERE cards.bordercolor = 'borderless', Count(cards.id)) * 100 FROM cards;",
          "SELECT Divide(Count(cards.id) WHERE cards.bordercolor = 'borderless', Count(cards.id)) *100 FROM cards;",
          "SELECT Divide(Count(cards.id) WHERE cards.bordercolor = 'borderless', Count(cards.id)) * 100 AS percentage FROM cards;"
        ]
      ]
    },
    {
      "id": 369,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1;",
          "SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE foreign_data.language = 'German' AND cards.isreprint = 1;",
          "SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE foreign_data.language = 'German' AND cards.isreprint = 1 AND set_translations.language = 'German';",
          "SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'German' AND cards.isreprint = 1;"
        ]
      ]
    },
    {
      "id": 370,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND foreign_data.language = 'Russian';",
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND language = 'Russian';",
          "SELECT count(*) FROM cards WHERE bordercolor = 'borderless' AND foreign_data.language = 'Russian';",
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND foreign_data.language = 'Russian' AND set_translations.language = 'Russian';"
        ]
      ]
    },
    {
      "id": 371,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT (count(cards.id) * 100.0 / count(DISTINCT cards.id)) AS percentage FROM cards WHERE cards.language = 'French' AND cards.isstoryspotlight = 1;",
          "SELECT (count(cards.id) FILTER (WHERE cards.language = 'French' AND cards.isstoryspotlight = 1) * 100.0 / count(cards.id) FILTER (WHERE cards.isstoryspotlight = 1)) AS percentage FROM cards;",
          "SELECT (count(cards.id) FILTER (WHERE cards.language = 'French' AND cards.isstoryspotlight = 1) * 100.0 / count(cards.id) FILTER (WHERE cards.isstoryspotlight = 1)) AS percentage FROM cards WHERE cards.isstoryspotlight = 1;",
          "SELECT (COUNT(cards.id) FILTER (WHERE cards.language = 'French' AND cards.isstoryspotlight = 1) * 100.0 / COUNT(cards.id) FILTER (WHERE cards.isstoryspotlight = 1)) AS percentage FROM cards;"
        ]
      ]
    },
    {
      "id": 372,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE toughness = 99;",
          "SELECT count(*) FROM cards WHERE toughness = '99';",
          "SELECT count(cards.id) FROM cards WHERE cards.toughness = 99;",
          "SELECT count(id) FROM cards WHERE toughness = '99';"
        ]
      ]
    },
    {
      "id": 373,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd';",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Aaron Boyd';",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = '<NAME>';",
          "SELECT name FROM cards WHERE artist = 'Aaron Boyd';"
        ]
      ]
    },
    {
      "id": 374,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'mtgo';",
          "SELECT count(id) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo';",
          "SELECT count(cards.id) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo';",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.bordercolor = 'black' AND legalities.availability = 'mtgo';"
        ]
      ]
    },
    {
      "id": 375,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE covertedmanacost = 0;",
          "SELECT id FROM cards WHERE convertedmanacost = 0;",
          "SELECT cards.id FROM cards WHERE covertedmanacost = 0;",
          "SELECT cards.id FROM cards WHERE cards.convertedmanacost = 0;"
        ]
      ]
    },
    {
      "id": 376,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.layout FROM cards WHERE cards.keywords = 'Flying';",
          "SELECT layout FROM cards WHERE keywords = 'Flying';",
          "SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%Flying%';",
          "SELECT cards.layout FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.keywords = 'Flying';"
        ]
      ]
    },
    {
      "id": 377,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes <> 'Angel';",
          "SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel';",
          "SELECT count(cards.id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes <> 'Angel';",
          "SELECT count(cards.id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel';"
        ]
      ]
    },
    {
      "id": 378,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id FROM cards WHERE cards.hasfoil = 1 AND cards.hasnonfoil = 1 AND cards.cardkingdomfoilid IS NOT Null AND cards.cardkingdomid IS NOT Null;",
          "SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT Null AND cards.cardkingdomid IS NOT Null AND cards.power = '4';",
          "SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT Null AND cards.cardkingdomid IS NOT Null AND cards.power = 'Incredibly powerful';",
          "SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT Null AND cards.cardkingdomid IS NOT Null;"
        ]
      ]
    },
    {
      "id": 379,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE dueldeck = 'a';",
          "SELECT cards.id FROM cards WHERE cards.dueldeck = 'a';",
          "SELECT cards.id FROM cards WHERE dueldeck = 'a';",
          "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE dueldeck = 'a';"
        ]
      ]
    },
    {
      "id": 380,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.edhrecrank FROM cards WHERE cards.frameversion = '2015';",
          "SELECT cards.edhrecrank FROM cards WHERE cards.frameversion = 2015;",
          "SELECT cards.edhrecrank FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '2015';",
          "SELECT cards.edhrecrank FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 2015;"
        ]
      ]
    },
    {
      "id": 381,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE language = 'Chinese Simplified';",
          "SELECT artist FROM cards WHERE cards.language = 'Chinese Simplified';",
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';",
          "SELECT cards.artist FROM cards WHERE cards.language = 'Chinese Simplified';"
        ]
      ]
    },
    {
      "id": 382,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT * FROM cards WHERE cards.availability = 'paper' AND cards.language = 'Japanese';",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Japanese' AND cards.availability = 'paper';",
          "SELECT cards.id FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Japanese' AND cards.availability = 'paper';",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Japanese' AND cards.availability = 'paper';"
        ]
      ]
    },
    {
      "id": 383,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.bordercolor) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white';",
          "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white';",
          "SELECT count(cards.bordercolor) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.bordercolor = 'white' AND legalities.status = 'Banned';",
          "SELECT count(CASE WHEN cards.bordercolor = 'white' THEN 1 ELSE 0 END) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned';"
        ]
      ]
    },
    {
      "id": 384,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.format = 'legacy';",
          "SELECT foreign_data.uuid, foreign_data.language FROM foreign_data INNER JOIN legalities ON foreign_data.uuid = legalities.uuid WHERE legalities.format = 'legacy';",
          "SELECT foreign_data.uuid, foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.format = 'legacy';",
          "SELECT cards.uuid, foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.format = 'legacy';"
        ]
      ]
    },
    {
      "id": 385,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality');",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality';",
          "SELECT rulings.text FROM rulings WHERE cards.name = 'Beacon of Immortality';",
          "SELECT rulings.text FROM rulings WHERE rulings.uuid = (SELECT cards.uuid FROM cards WHERE cards.name = 'Beacon of Immortality');"
        ]
      ]
    },
    {
      "id": 386,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE frameversion = 'future';",
          "SELECT count(id) AS cnt FROM cards WHERE frameversion = 'future';",
          "SELECT count(*) FROM cards WHERE frameversion = 'future';",
          "SELECT count(id) FROM cards WHERE frameversion = 'future' AND status = 'legal';"
        ]
      ]
    },
    {
      "id": 387,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW';",
          "SELECT cards.colors FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE sets.code = 'OGW';",
          "SELECT cards.name , cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW';",
          "SELECT cards.name , cards.coloridentity FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW';"
        ]
      ]
    },
    {
      "id": 388,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation , foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.setcode = '10E' AND cards.convertedmanacost = 5;",
          "SELECT set_translations.translation , foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.setcode = '10E' AND cards.convertedmanacost = 5;",
          "SELECT set_translations.translation , foreign_data.language FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE set_translations.setcode = '10E' AND cards.convertedmanacost = 5;",
          "SELECT set_translations.translation , foreign_data.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE set_translations.setcode = '10E' AND cards.convertedmanacost = 5;"
        ]
      ]
    },
    {
      "id": 389,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf';",
          "SELECT cards.name, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.originaltype = 'Creature - Elf';",
          "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE cards.originaltype = 'Creature - Elf';",
          "SELECT cards.name , rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf';"
        ]
      ]
    },
    {
      "id": 390,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.colors FROM cards WHERE cards.id BETWEEN 1 AND 20;",
          "SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;",
          "SELECT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;",
          "SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 and 20;"
        ]
      ]
    },
    {
      "id": 391,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT * FROM cards WHERE originaltype = 'Artifact' AND colors = 'B' AND language IN (SELECT language FROM foreign_data);",
          "SELECT * FROM cards WHERE originaltype = 'Artifact' AND colors = 'B' AND foreign_data.language = 'German';",
          "SELECT * FROM cards WHERE colors = 'B' AND originaltype = 'Artifact' AND language IN (SELECT language FROM foreign_data);",
          "SELECT * FROM cards WHERE originaltype = 'Artifact' AND colors = 'B' AND language in (SELECT language FROM foreign_data);"
        ]
      ]
    },
    {
      "id": 392,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;",
          "SELECT name FROM cards WHERE rarity = 'uncommon' LIMIT 3;",
          "SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY date ASC LIMIT 3;",
          "SELECT cards.name FROM cards WHERE cards.rarity = 'uncommon' LIMIT 3;"
        ]
      ]
    },
    {
      "id": 393,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL;",
          "SELECT count(cards.id) FROM cards WHERE cards.artist = 'John Avon' AND cards.cardkingdomid IS NOT NULL AND cards.cardkingdomfoilid IS NOT NULL;",
          "SELECT count(*) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL AND power = '3';",
          "SELECT count(*) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL AND power = '0';"
        ]
      ]
    },
    {
      "id": 394,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE bordercolor = 'white' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;",
          "SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'white' AND cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;",
          "SELECT count(cards.bordercolor) FROM cards WHERE cards.bordercolor = 'white' AND cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;",
          "SELECT count(DISTINCT cards.id) FROM cards WHERE cards.bordercolor = 'white' AND cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 395,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'UDON' AND legalities.format = 'mtgo' AND cards.hand = -1;",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;"
        ]
      ]
    },
    {
      "id": 396,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE frameversion = '1993' AND availability = 'paper' AND hascontentwarning = 1;",
          "SELECT count(*) FROM cards WHERE frameversion = '1993' AND availability = 'paper' AND hascontentwarning = 1;",
          "SELECT count(id) FROM cards WHERE frameversion = 1993 AND availability = 'paper' AND hascontentwarning = 1;",
          "SELECT count(*) FROM cards WHERE frameversion = 1993 AND availability = 'paper' AND hascontentwarning = 1;"
        ]
      ]
    },
    {
      "id": 397,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND availability = 'mtgo,paper';",
          "SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND availability LIKE '%mtgo,paper%';",
          "SELECT cards.manacost FROM cards WHERE cards.layout = 'normal' AND cards.frameversion = '2003' AND cards.bordercolor = 'black' AND cards.availability = 'mtgo,paper';",
          "SELECT cards.manacost FROM cards WHERE cards.layout = 'normal' AND cards.frameversion = '2003' AND cards.bordercolor = 'black' AND cards.availability LIKE '%mtgo,paper%';"
        ]
      ]
    },
    {
      "id": 398,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sum(convertedmanacost) FROM cards WHERE artist = 'Rob Alexander';",
          "SELECT sum(cards.convertedmanacost) FROM cards WHERE cards.artist = 'Rob Alexander';",
          "SELECT SUM(convertedmanacost) FROM cards WHERE artist = 'Rob Alexander';",
          "SELECT cast(sum(convertedmanacost) AS REAL) FROM cards WHERE artist = 'Rob Alexander';"
        ]
      ]
    },
    {
      "id": 399,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT type FROM cards WHERE availability = 'arena';",
          "SELECT cards.type FROM cards WHERE cards.availability = 'arena';",
          "SELECT foreign_data.type FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.availability = 'arena';",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.availability = 'arena';"
        ]
      ]
    },
    {
      "id": 400,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.setcode FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.language = 'Spanish';",
          "SELECT set_translations.setcode FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE set_translations.language = 'Spanish';",
          "SELECT set_translations.setcode FROM set_translations WHERE set_translations.language = 'Spanish';",
          "SELECT set_translations.setcode FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE set_translations.language = 'Spanish' AND foreign_data.language = 'Spanish';"
        ]
      ]
    },
    {
      "id": 401,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(( SELECT count(id) FROM cards WHERE frameeffects = 'legendary' AND isonlineonly = 1 ) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary' AND isonlineonly = 1;",
          "SELECT cast(( SELECT count(id) FROM cards WHERE frameeffects = 'legendary' AND isonlineonly = 1 ) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary';",
          "SELECT cast(( SELECT count(id) FROM cards WHERE isonlineonly = 1 AND frameeffects = 'legendary' ) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary';",
          "SELECT cast(( SELECT count(id) FROM cards WHERE frameeffects = 'legendary' AND isonlineonly = 1 ) AS REAL) * 100 / (SELECT count(id) FROM cards WHERE frameeffects = 'legendary') AS percentage;"
        ]
      ]
    },
    {
      "id": 402,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE isStorylight = 1 AND istextless = 0;",
          "SELECT id FROM cards WHERE isStorylight = 1 AND istextless = 0 GROUP BY id;",
          "SELECT id FROM cards WHERE isstoryspotlight = 1 AND istextless = 0;",
          "SELECT id FROM cards WHERE isstoryspotlight = 1 AND istextless = 0 GROUP BY id;"
        ]
      ]
    },
    {
      "id": 403,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.language = 'Spanish';",
          "SELECT set_translations.translation , foreign_data.name FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE set_translations.language = 'Spanish';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.language = 'Spanish' ORDER BY foreign_data.name;",
          "SELECT set_translations.translation, foreign_data.name FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE set_translations.language = 'Spanish';"
        ]
      ]
    },
    {
      "id": 404,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 309;",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.basesetsize = 309;",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE basesetsize = 309;",
          "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.basesetsize = 309;"
        ]
      ]
    },
    {
      "id": 405,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brasil)' AND sets.block = 'Commander';",
          "SELECT count(set_translations.setcode) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';",
          "SELECT count(set_translations.translation) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';",
          "SELECT count(set_translations.id) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';"
        ]
      ]
    },
    {
      "id": 406,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE types = 'Creature' AND status = 'legal';",
          "SELECT cards.id FROM cards WHERE cards.types = 'Creature' AND cards.status = 'legal';",
          "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'legal';",
          "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'legal' AND cards.types = 'Creature' AND cards.type = 'Creature';"
        ]
      ]
    },
    {
      "id": 407,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL;",
          "SELECT foreign_data.type FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL;",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language LIKE 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL;",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND (cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 408,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%';",
          "SELECT count(id) FROM cards WHERE power IS NULL OR power = '*' OR text LIKE '%triggered ability%';",
          "SELECT count(id) FROM cards WHERE power is null OR power = '*' AND text LIKE '%triggered ability%';",
          "SELECT count(cards.id) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%';"
        ]
      ]
    },
    {
      "id": 409,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'premodern' AND cards.side IS NULL AND rulings.text = 'This is a triggered mana ability.';",
          "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'premodern' AND cards.side IS NULL;",
          "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'premodern' AND cards.side IS NULL AND rulings.text = 'This is a triggered mana ability.';",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'premodern' AND cards.side IS NULL;"
        ]
      ]
    },
    {
      "id": 410,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE artist = 'Erica Yang' AND format = 'pauper' AND availability = 'paper';",
          "SELECT id FROM cards WHERE artist = 'E<NAME>' AND format = 'pauper' AND availability = 'paper';",
          "SELECT cards.id FROM cards WHERE cards.artist = 'Erica Yang' AND cards.format = 'pauper' AND cards.availability = 'paper';",
          "SELECT id FROM cards WHERE artist = 'Erica Yang' AND format = 'pauper' AND availability = 'paper' LIMIT 1;"
        ]
      ]
    },
    {
      "id": 411,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.artist FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.name = 'Formation';",
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Formation';",
          "SELECT cards.artist FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation';",
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.name = 'Formation';"
        ]
      ]
    },
    {
      "id": 412,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM foreign_data WHERE language = 'French' AND type = 'Creature' AND bordercolor = 'black' AND artist = 'Matthew D. Wilson';",
          "SELECT name FROM foreign_data WHERE language = 'French' AND type = 'Creature' AND bordercolor = 'black' AND artist = '<NAME>';",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.type = 'Creature' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson';",
          "SELECT foreign_data.name FROM foreign_data WHERE foreign_data.language = 'French' AND foreign_data.type = 'Creature' AND foreign_data.bordercolor = 'black' AND foreign_data.artist = 'Matthew D. Wilson';"
        ]
      ]
    },
    {
      "id": 413,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE rarity = 'rare' AND date = '2007-02-01';",
          "SELECT count(*) FROM cards WHERE rarity = 'rare' AND printings LIKE '%2007-02-01%';",
          "SELECT count(*) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2007-02-01' AND cards.rarity = 'rare';",
          "SELECT count(*) FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE rulings.date = '2007-02-01' AND cards.rarity = 'rare';"
        ]
      ]
    },
    {
      "id": 414,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica';",
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 180 AND sets.block = 'Ravnica';",
          "SELECT set_translations.language FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE foreign_data.multiverseid = 180;",
          "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Ravnica' AND sets.basesetsize = 180;"
        ]
      ]
    },
    {
      "id": 415,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DIVidE(COUNT(hascontentwarning = 0),COUNT(id))*100 FROM cards WHERE format = 'commander' AND status = 'legal';",
          "SELECT DIVidE(COUNT(hascontentwarning = 0),COUNT(id))*100 FROM legalities WHERE format = 'commander' AND status = 'legal';",
          "SELECT DIVidE(COUNT(hascontentwarning = 0),COUNT(id))*100 FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE format = 'commander' AND status = 'legal';",
          "SELECT DIVidE(COUNT(hascontentwarning = 0),COUNT(id))*100 FROM cards WHERE format = 'commander' AND status = 'legal' AND hascontentwarning = 0;"
        ]
      ]
    },
    {
      "id": 416,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid;",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*') FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid;",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*';",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*') FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*';"
        ]
      ]
    },
    {
      "id": 417,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.type = 'expansion';",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion';",
          "SELECT cast(sum(iif(set_translations.language = 'Japanese', 1, 0)) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.type = 'expansion';",
          "SELECT cast(sum(iif(set_translations.language = 'Japanese', 1, 0)) AS REAL) * 100 / count(sets.code) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.type = 'expansion';"
        ]
      ]
    },
    {
      "id": 418,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT availability FROM cards WHERE artist = 'Daren Bader';",
          "SELECT cards.availability FROM cards WHERE cards.artist = 'Daren Bader';",
          "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader';",
          "SELECT availability FROM cards WHERE artist = 'Daren Bader' LIMIT 1;"
        ]
      ]
    },
    {
      "id": 419,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000;",
          "SELECT COUNT(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000;",
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000;",
          "SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'borderless' AND cards.edhrecrank > 12000;"
        ]
      ]
    },
    {
      "id": 420,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;",
          "SELECT count(*) FROM cards WHERE isoversized = 1 OR isreprint = 1 OR ispromo = 1;",
          "SELECT count(id) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;",
          "SELECT count(id) FROM cards WHERE isoversized = 1 OR isreprint = 1 OR ispromo = 1;"
        ]
      ]
    },
    {
      "id": 421,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards WHERE cards.power IS NULL AND cards.promotypes = 'arenaleague' ORDER BY cards.name ASC LIMIT 3;",
          "SELECT cards.name FROM cards WHERE cards.power IS NULL AND cards.promotypes = 'arenaleague' ORDER BY cards.name LIMIT 3;",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Arena' AND cards.power IS NULL AND cards.promotypes = 'arenaleague' ORDER BY cards.name LIMIT 3;",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Arena' AND cards.power IS NULL AND cards.promotypes = 'arenaleague' ORDER BY cards.name ASC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 422,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.multiverseid = 149934;",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.multiverseid = 149934;",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.multiverseid = '149934';",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.multiverseid = 149934;"
        ]
      ]
    },
    {
      "id": 423,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;",
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL ORDER BY cardkingdomfoilid ASC LIMIT 3;",
          "SELECT cards.cardkingdomfoilid, cards.cardkingdomid FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;",
          "SELECT cards.id, cards.cardkingdomfoilid, cards.cardkingdomid FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 424,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.istextless = 1 AND cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards;",
          "SELECT cast(sum(CASE WHEN cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards WHERE cards.istextless = 1;",
          "SELECT cast(sum(CASE WHEN istextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards;",
          "SELECT cast(sum(CASE WHEN cards.istextless = 1 AND cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards WHERE cards.istextless = 1 AND cards.layout = 'normal';"
        ]
      ]
    },
    {
      "id": 425,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL;",
          "SELECT id FROM cards WHERE subtypes = 'Wizard,Angel' AND side IS NULL;",
          "SELECT id FROM cards WHERE subtypes = 'Angel Wizard' AND side IS NULL;",
          "SELECT cards.id FROM cards WHERE cards.subtypes = 'Angel,Wizard' AND cards.side IS NULL;"
        ]
      ]
    },
    {
      "id": 426,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name ASC LIMIT 3;",
          "SELECT sets.name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY sets.name ASC LIMIT 3;",
          "SELECT sets.name FROM sets LEFT JOIN cards ON sets.code = cards.setcode WHERE cards.setcode IS NULL ORDER BY sets.name ASC LIMIT 3;",
          "SELECT sets.name FROM sets LEFT JOIN cards ON sets.code = cards.setcode WHERE cards.id IS NULL ORDER BY sets.name ASC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 427,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC';",
          "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Archenemy' AND sets.code = 'ARC';",
          "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.code = 'ARC';",
          "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Archenemy';"
        ]
      ]
    },
    {
      "id": 428,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5;",
          "SELECT name, translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5;",
          "SELECT set_translations.translation, sets.name FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.id = 5;",
          "SELECT set_translations.translation, sets.name FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 5;"
        ]
      ]
    },
    {
      "id": 429,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.language, sets.type FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206;",
          "SELECT foreign_data.language, sets.type FROM foreign_data INNER JOIN sets ON foreign_data.uuid = sets.uuid WHERE sets.id = 206;",
          "SELECT foreign_data.language, sets.type FROM foreign_data INNER JOIN sets ON foreign_data.uuid = sets.uuid WHERE cards.id = 206;",
          "SELECT foreign_data.language, sets.type FROM foreign_data INNER JOIN set_translations ON foreign_data.uuid = set_translations.uuid INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206;"
        ]
      ]
    },
    {
      "id": 430,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id, cards.name FROM cards INNER JOIN set_translations ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY cards.name ASC LIMIT 2;",
          "SELECT cards.id, cards.name FROM cards INNER JOIN set_translations ON cards.multiverseid = set_translations.multiverseid WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY cards.name ASC LIMIT 2;",
          "SELECT cards.id, cards.name FROM cards INNER JOIN set_translations ON cards.multiverseid = set_translations.multiverseid INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY cards.name ASC LIMIT 2;",
          "SELECT cards.id, cards.name FROM cards INNER JOIN set_translations ON cards.multiverseid = set_translations.multiverseid WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY cards.id ASC LIMIT 2;"
        ]
      ]
    },
    {
      "id": 431,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND sets.isforeignonly = 1 AND sets.isfoilonly = 1;",
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND set_translations.language = 'Japanese';",
          "SELECT set_translations.setcode FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Japanese' AND sets.isforeignonly = 1 AND sets.isfoilonly = 1;",
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND foreign_data.language = 'Japanese';"
        ]
      ]
    },
    {
      "id": 432,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1;",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' GROUP BY set_translations.translation ORDER BY sets.basesetsize DESC LIMIT 1;",
          "SELECT set_translations.setcode FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' GROUP BY set_translations.setcode ORDER BY sets.basesetsize DESC LIMIT 1;",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' GROUP BY set_translations.translation ORDER BY sets.totalsetsize DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 433,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN foreign_data.language = 'Chinese Simplified' AND foreign_data.isonlineonly = 1 THEN foreign_data.id ELSE NULL END) AS REAL) * 100 / count(foreign_data.id) FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id;",
          "SELECT cast(count(CASE WHEN foreign_data.language = 'Chinese Simplified' AND foreign_data.isonlineonly = 1 THEN foreign_data.id ELSE NULL END) AS REAL) * 100 / count(foreign_data.id) FROM `foreign_data`;",
          "SELECT cast(count(CASE WHEN set_translations.language = 'Chinese Simplified' AND sets.isonlineonly = 1 THEN set_translations.id ELSE NULL END) AS REAL) * 100 / count(set_translations.id) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code;",
          "SELECT cast(count(iif(foreign_data.language = 'Chinese Simplified' AND foreign_data.isonlineonly = 1, foreign_data.id, NULL)) AS REAL) * 100 / count(foreign_data.id) FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id;"
        ]
      ]
    },
    {
      "id": 434,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM set_translations WHERE language = 'Japanese' AND mtgocode IS NULL;",
          "SELECT count(id) FROM set_translations WHERE language = 'Japanese' AND mtgocode IS NULL;",
          "SELECT count(*) FROM set_translations WHERE language = 'Japanese' AND mtgocode IS NULL OR mtgocode = '';",
          "SELECT count(id) FROM set_translations WHERE language = 'Japanese' AND mtgocode IS NULL OR mtgocode = '';"
        ]
      ]
    },
    {
      "id": 435,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black';",
          "SELECT count(id) FROM cards WHERE bordercolor = 'black';",
          "SELECT count(*) FROM cards WHERE bordercolor = 'black';",
          "SELECT count(cards.bordercolor) FROM cards WHERE cards.bordercolor = 'black';"
        ]
      ]
    },
    {
      "id": 436,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards WHERE cards.frameeffects = 'extendedart';",
          "SELECT count(id) FROM cards WHERE frameeffects = 'extendedart';",
          "SELECT count(id) FROM cards WHERE cards.frameeffects = 'extendedart';",
          "SELECT count(DISTINCT cards.id) FROM cards WHERE cards.frameeffects = 'extendedart';"
        ]
      ]
    },
    {
      "id": 437,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE bordercolor = 'white' AND isfullart = 1;",
          "SELECT id FROM cards WHERE bordercolor = 'white' AND isfullart = 1;",
          "SELECT * FROM cards WHERE bordercolor = 'white' AND isfullart = 1;",
          "SELECT id FROM cards WHERE bordercolor = 'black' AND isfullart = 1;"
        ]
      ]
    },
    {
      "id": 438,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.id = 174;",
          "SELECT language FROM foreign_data WHERE id = 174;",
          "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.id = '174';",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.id = 174;"
        ]
      ]
    },
    {
      "id": 439,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name FROM sets WHERE sets.code = 'ALL';",
          "SELECT set_translations.translation FROM set_translations WHERE set_translations.setcode = 'ALL';",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.code = 'ALL';",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.setcode = 'ALL';"
        ]
      ]
    },
    {
      "id": 440,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.name = 'A Pedra Fellwar';",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'A Pedra Fellwar';",
          "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.name = \"A Pedra Fellwar\";",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.name = 'A Pedra Fellwar';"
        ]
      ]
    },
    {
      "id": 441,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.code FROM sets WHERE sets.releasedate = '2007-07-13';",
          "SELECT sets.code FROM sets WHERE sets.releasedate = '07/13/2007';",
          "SELECT sets.code FROM sets WHERE sets.`releasedate` = '2007-07-13';",
          "SELECT set_translations.setcode FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.releasedate = '2007-07-13';"
        ]
      ]
    },
    {
      "id": 442,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.basesetsize, sets.code FROM sets WHERE sets.block = 'Masques' AND sets.name = 'Mirage';",
          "SELECT sets.basesetsize, sets.code FROM sets WHERE sets.name = 'Mirage' AND sets.block = 'Masques';",
          "SELECT sets.basesetsize, sets.code FROM sets WHERE sets.block = \"Masques\" AND sets.name = \"Mirage\";",
          "SELECT sets.basesetsize, sets.code FROM sets WHERE block = 'Masques' AND name = 'Mirage';"
        ]
      ]
    },
    {
      "id": 443,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE type = 'expansion';",
          "SELECT setcode FROM sets WHERE type = 'expansion';",
          "SELECT DISTINCT code FROM sets WHERE type = 'expansion';",
          "SELECT code FROM sets WHERE type = 'expansion';"
        ]
      ]
    },
    {
      "id": 444,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT type FROM cards WHERE watermark = 'boros';",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';",
          "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';",
          "SELECT cards.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';"
        ]
      ]
    },
    {
      "id": 445,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language, foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie';",
          "SELECT foreign_data.language, foreign_data.flavortext, cards.types FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie';",
          "SELECT foreign_data.language, foreign_data.flavortext FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie';",
          "SELECT foreign_data.language, foreign_data.flavortext FROM foreign_data INNER JOIN cards ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie';"
        ]
      ]
    },
    {
      "id": 446,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT COUNT(convertedmanacost = 16), COUNT(convertedmanacost) FROM cards WHERE name = 'Abyssal Horror';",
          "SELECT COUNT(convertedmanacost = 16), COUNT(convertedmanacost) FROM cards WHERE setcode = 'Abyssal Horror';",
          "SELECT COUNT(convertedmanacost = 16), COUNT(convertedmanacost) FROM cards WHERE name = 'Abyssal Horror' GROUP BY convertedmanacost;",
          "SELECT COUNT(convertedmanacost = 16), COUNT(convertedmanacost) FROM cards WHERE setcode = 'Abyssal Horror' GROUP BY convertedmanacost;"
        ]
      ]
    },
    {
      "id": 447,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.code FROM sets WHERE sets.type = 'expansion' AND sets.type = 'commander';",
          "SELECT t.code FROM sets AS t WHERE t.type = 'expansion' AND t.name = 'commander';",
          "SELECT t.setcode FROM sets AS t WHERE t.type = 'expansion' AND t.name = 'commander';",
          "SELECT t.code FROM sets AS t WHERE t.type = 'expansion' AND t.parentcode = 'commander';"
        ]
      ]
    },
    {
      "id": 448,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';",
          "SELECT foreign_data.name , cards.type FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';",
          "SELECT foreign_data.name , cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';"
        ]
      ]
    },
    {
      "id": 449,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT language FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE watermark = 'azorius');",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius';",
          "SELECT language, type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius';",
          "SELECT foreign_data.language , cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius';"
        ]
      ]
    },
    {
      "id": 450,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;",
          "SELECT count(cardkingdomfoilid) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;",
          "SELECT count(cards.id) FROM cards WHERE cards.artist = 'Aaron Miller' AND cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;",
          "SELECT count(cards.cardkingdomfoilid) FROM cards WHERE cards.artist = 'Aaron Miller' AND cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 451,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '3';",
          "SELECT count(*) FROM cards WHERE availability like '%paper%' AND hand = '3';",
          "SELECT count(cards.id) FROM cards WHERE cards.availability LIKE '%paper%' AND cards.hand = '3';",
          "SELECT count(*) FROM cards WHERE cards.availability LIKE '%paper%' AND cards.hand = '3';"
        ]
      ]
    },
    {
      "id": 452,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE istextless = 0;",
          "SELECT cards.name FROM cards WHERE istextless = 0;",
          "SELECT cards.name FROM cards WHERE cards.istextless = 0;",
          "SELECT name FROM cards WHERE istextless = 0 GROUP BY name;"
        ]
      ]
    },
    {
      "id": 453,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.manacost FROM cards WHERE cards.name = 'Ancestor`s Chosen';",
          "SELECT manacost FROM cards WHERE name = 'Ancestor`s Chosen';",
          "SELECT cards.convertedmanacost FROM cards WHERE cards.name = 'Ancestor`s Chosen';",
          "SELECT cards.manacost FROM cards WHERE name = 'Ancestor`s Chosen';"
        ]
      ]
    },
    {
      "id": 454,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT cards.power) FROM cards WHERE cards.bordercolor = 'white' AND (cards.power = '*' OR cards.power IS NULL);",
          "SELECT count(DISTINCT cards.power) FROM cards WHERE cards.bordercolor = 'white' AND cards.power = '*';",
          "SELECT count(cards.power) FROM cards WHERE cards.bordercolor = 'white' AND (cards.power = '*' OR cards.power IS NULL);",
          "SELECT count(cards.power) FROM cards WHERE cards.bordercolor = 'white' AND cards.power = '*';"
        ]
      ]
    },
    {
      "id": 455,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE ispromo = 1 AND side IS NOT NULL;",
          "SELECT cards.name FROM cards WHERE cards.ispromo = 1 AND cards.side IS NOT NULL;",
          "SELECT cards.name FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.ispromo = 1 AND cards.side IS NOT NULL;",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.ispromo = 1 AND cards.side IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 456,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT subtypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';",
          "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';",
          "SELECT subtypes,supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';",
          "SELECT subtypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer' UNION SELECT supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"
        ]
      ]
    },
    {
      "id": 457,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT purchaseurls FROM cards WHERE promotypes = 'bundle';",
          "SELECT DISTINCT purchaseurls FROM cards WHERE promotypes = 'bundle';",
          "SELECT purchaseurls FROM cards WHERE promotypes='bundle';",
          "SELECT purchaseurls FROM cards WHERE promotypes = 'bundle' GROUP BY purchaseurls;"
        ]
      ]
    },
    {
      "id": 458,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT cards.artist) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability LIKE '%arena,mtgo%';",
          "SELECT count(*) FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena,mtgo%';",
          "SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability LIKE '%arena,mtgo%';",
          "SELECT count(DISTINCT cards.id) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability LIKE '%arena,mtgo%';"
        ]
      ]
    },
    {
      "id": 459,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, cards.convertedmanacost FROM cards ORDER BY cards.convertedmanacost DESC LIMIT 1;",
          "SELECT CASE WHEN cards.convertedmanacost > 5.0 THEN 'Serra Angel' ELSE 'Shrine Keeper' END AS RESULT FROM cards ORDER BY cards.convertedmanacost DESC LIMIT 1;",
          "SELECT CASE WHEN cards.convertedmanacost > 5.0 THEN 'Serra Angel' ELSE 'Shrine Keeper' END AS RESULT FROM cards;",
          "SELECT CASE WHEN cards.convertedmanacost > 5.0 THEN 'Serra Angel' ELSE 'Shrine Keeper' END AS RESULT FROM cards ORDER BY convertedmanacost DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 460,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer';",
          "SELECT DISTINCT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer';",
          "SELECT cards.artist FROM cards WHERE cards.flavorname = 'Battra, Dark Destroyer';",
          "SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer';"
        ]
      ]
    },
    {
      "id": 461,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3;",
          "SELECT name FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE frameversion = '2003' ) LIMIT 3;",
          "SELECT cards.name FROM cards WHERE cards.convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE cards.frameversion = '2003' ) LIMIT 3;",
          "SELECT cards.name FROM cards WHERE cards.convertedmanacost = ( SELECT max(convertedmanacost) FROM cards ) AND cards.frameversion = '2003' LIMIT 3;"
        ]
      ]
    },
    {
      "id": 462,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.name = 'Ancestor''s Chosen';",
          "SELECT set_translations.translation FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE foreign_data.language = 'Italian' AND foreign_data.name = 'Ancestor''s Chosen';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN foreign_data ON sets.id = foreign_data.id WHERE foreign_data.language = 'Italian' AND foreign_data.name = 'Ancestor''s Chosen';",
          "SELECT set_translations.translation FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE foreign_data.language = 'Italian' AND sets.name = 'Ancestor''s Chosen';"
        ]
      ]
    },
    {
      "id": 463,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(set_translations.id) FROM set_translations INNER JOIN cards ON set_translations.setcode = cards.setcode WHERE cards.name = 'Angel of Mercy';",
          "SELECT count(set_translations.id) FROM set_translations INNER JOIN cards ON set_translations.setcode = cards.setcode WHERE cards.name LIKE 'Angel of Mercy';",
          "SELECT count(set_translations.translation) FROM set_translations INNER JOIN cards ON set_translations.id = cards.id WHERE cards.name = 'Angel of Mercy';",
          "SELECT count(set_translations.translation) FROM set_translations INNER JOIN cards ON set_translations.setcode = cards.setcode WHERE cards.name = 'Angel of Mercy';"
        ]
      ]
    },
    {
      "id": 464,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE setcode = 'Hauptset Zehnte Edition';",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
          "SELECT cards.name FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON set_translations.setcode = cards.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';"
        ]
      ]
    },
    {
      "id": 465,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT CASE WHEN set_translations.language = 'Korean' THEN 'YES' ELSE 'NO' END FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.translation = 'Ancestor''s Chosen';",
          "SELECT CASE WHEN set_translations.language = 'Korean' THEN 'YES' ELSE 'NO' END FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name LIKE '%Ancestor''s Chosen%';",
          "SELECT CASE WHEN set_translations.language = 'Korean' THEN 'YES' ELSE 'NO' END FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.translation LIKE '%Ancestor''s Chosen%';",
          "SELECT CASE WHEN set_translations.language = 'Korean' THEN 'YES' ELSE 'NO' END FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Korean' AND sets.name = 'Ancestor''s Chosen';"
        ]
      ]
    },
    {
      "id": 466,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.artist) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';",
          "SELECT count(cards.artist) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON set_translations.id = cards.id WHERE sets.name = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';",
          "SELECT count(cards.artist) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON cards.uuid = set_translations.uuid WHERE sets.name = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';",
          "SELECT count(cards.artist) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';"
        ]
      ]
    },
    {
      "id": 467,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
          "SELECT count(cards.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
          "SELECT sum(CASE WHEN set_translations.translation = 'Hauptset Zehnte Edition' THEN sets.basesetsize ELSE 0 END) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
          "SELECT sum(CASE WHEN set_translations.translation = 'Hauptset Zehnte Edition' THEN 1 ELSE 0 END) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.translation = 'Hauptset Zehnte Edition';"
        ]
      ]
    },
    {
      "id": 468,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Chinese Simplified' AND sets.name = 'Eighth Edition';",
          "SELECT set_translations.translation FROM set_translations WHERE set_translations.setcode = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';"
        ]
      ]
    },
    {
      "id": 469,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT 'YES' FROM cards WHERE cards.name = 'Angel of Mercy' AND cards.mtgocode IS NOT NULL UNION SELECT 'NO' FROM cards WHERE cards.name = 'Angel of Mercy' AND cards.mtgocode IS NULL;",
          "SELECT 'YES' FROM cards WHERE cards.name = 'Angel of Mercy' AND cards.setcode IN (SELECT sets.code FROM sets WHERE sets.mtgocode IS NOT NULL) UNION SELECT 'NO' FROM cards WHERE cards.name = 'Angel of Mercy' AND cards.setcode NOT IN (SELECT sets.code FROM sets WHERE sets.mtgocode IS NOT NULL);",
          "SELECT CASE WHEN sets.mtgocode IS NOT NULL AND cards.mtgocode IS NOT NULL THEN 'YES' WHEN sets.mtgocode IS NULL AND cards.mtgocode IS NOT NULL THEN 'NO' WHEN sets.mtgocode IS NOT NULL AND cards.mtgocode IS NULL THEN 'NO' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy';",
          "SELECT CASE WHEN sets.mtgocode IS NOT NULL AND cards.mtgocode IS NOT NULL THEN 'YES' WHEN sets.mtgocode IS NULL AND cards.mtgocode IS NOT NULL THEN 'NO' WHEN sets.mtgocode IS NOT NULL AND cards.mtgocode IS NULL THEN 'NO' WHEN sets.mtgocode IS NULL AND cards.mtgocode IS NULL THEN 'NO' END FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy';"
        ]
      ]
    },
    {
      "id": 470,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT releasedate FROM sets WHERE name = 'Ancestor''s Chosen';",
          "SELECT releasedate FROM sets WHERE name = \"Ancestor's Chosen\";",
          "SELECT releasedate FROM sets WHERE code = 'Ancestor''s Chosen';",
          "SELECT releasedate FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE name = 'Ancestor''s Chosen';"
        ]
      ]
    },
    {
      "id": 471,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = ' Hauptset Zehnte Edition';",
          "SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';",
          "SELECT type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = ' Hauptset Zehnte Edition';",
          "SELECT type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';"
        ]
      ]
    },
    {
      "id": 472,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;",
          "SELECT count(DISTINCT sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;",
          "SELECT count(DISTINCT set_translations.id) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;",
          "SELECT count(DISTINCT set_translations.setcode) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 473,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT CASE WHEN sets.isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Adarkar Valkyrie';",
          "SELECT CASE WHEN sets.isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.id = cards.setid WHERE cards.name = 'Adarkar Valkyrie';",
          "SELECT CASE WHEN sets.isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.id = cards.setid WHERE sets.name = 'Adarkar Valkyrie';",
          "SELECT CASE WHEN sets.isforeignonly = 1 THEN 'YES' WHEN sets.isforeignonly = 0 THEN 'NO' END FROM sets INNER JOIN cards ON sets.id = cards.setid WHERE cards.name = 'Adarkar Valkyrie';"
        ]
      ]
    },
    {
      "id": 474,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT sets.id) FROM foreign_data INNER JOIN set_translations ON foreign_data.uuid = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE foreign_data.language = 'Italian' AND sets.basesetsize < 10;",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Italian' AND cards.basesetsize < 10;",
          "SELECT count(DISTINCT sets.id) FROM foreign_data INNER JOIN set_translations ON foreign_data.uuid = set_translations.id INNER JOIN sets ON sets.code = set_translations.setcode WHERE foreign_data.language = 'Italian' AND sets.basesetsize < 10;",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10;"
        ]
      ]
    },
    {
      "id": 475,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE name = 'Coldsnap' AND bordercolor = 'black';",
          "SELECT count(id) FROM cards WHERE bordercolor = 'black' AND name = 'Coldsnap';",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black';",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black';"
        ]
      ]
    },
    {
      "id": 476,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE setcode = 'Coldsnap' ORDER BY convertedmanacost DESC LIMIT 1;",
          "SELECT name FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE setcode = 'Coldsnap' );",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1;",
          "SELECT cards.name FROM cards WHERE cards.setcode = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 477,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.setcode = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
          "SELECT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.translation = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
          "SELECT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.setcode = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');"
        ]
      ]
    },
    {
      "id": 478,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT * FROM cards WHERE cards.setcode = 'Coldsnap' AND cards.number = 4;",
          "SELECT cards.number FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = 4;",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = 4;",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = '4';"
        ]
      ]
    },
    {
      "id": 479,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND cards.power = '*';",
          "SELECT count(*) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR T1.power IS NULL);",
          "SELECT count(*) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR cards.power IS NULL);",
          "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR T1.power IS NULL);"
        ]
      ]
    },
    {
      "id": 480,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen';",
          "SELECT foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';",
          "SELECT foreign_data.flavortext FROM foreign_data WHERE foreign_data.language = 'Italian' AND foreign_data.name = 'Ancestor''s Chosen';",
          "SELECT flavortext FROM foreign_data WHERE language = 'Italian' AND name = 'Ancestor''s Chosen';"
        ]
      ]
    },
    {
      "id": 481,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavortext IS NOT NULL;",
          "SELECT foreign_data.language FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavortext IS NOT NULL;",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavortext IS NOT NULL;",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavortext IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 482,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German';",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.name = 'Ancestor''s Chosen';",
          "SELECT foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German';",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen';"
        ]
      ]
    },
    {
      "id": 483,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM foreign_data INNER JOIN rulings ON foreign_data.uuid = rulings.uuid INNER JOIN sets ON foreign_data.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';",
          "SELECT foreign_data.text FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Italian' AND set_translations.translation = 'Coldsnap';",
          "SELECT rulings.text FROM rulings INNER JOIN foreign_data ON rulings.uuid = foreign_data.uuid INNER JOIN sets ON foreign_data.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';",
          "SELECT foreign_data.text FROM foreign_data INNER JOIN set_translations ON foreign_data.language = set_translations.language INNER JOIN rulings ON foreign_data.uuid = rulings.uuid INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';"
        ]
      ]
    },
    {
      "id": 484,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.uuid = set_translations.uuid INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' ORDER BY foreign_data.convertedmanacost DESC LIMIT 1;",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' ORDER BY foreign_data.convertedmanacost DESC LIMIT 1;",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' ORDER BY cards.convertedmanacost DESC LIMIT 1;",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.uuid = set_translations.uuid INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' ORDER BY foreign_data.convertedmanacost DESC;"
        ]
      ]
    },
    {
      "id": 485,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce';",
          "SELECT rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce';",
          "SELECT rulings.date FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce';",
          "SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE name = 'Reminisce';"
        ]
      ]
    },
    {
      "id": 486,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT SUM(CASE WHEN cards.name = 'Coldsnap' THEN cards.convertedmanacost = 7 ELSE 0 END) * 100 / SUM(cards.convertedmanacost = 7) FROM cards;",
          "SELECT SUM(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) * 100 / SUM(1) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap';",
          "SELECT SUM(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) * 100 / SUM(1) AS percentage FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap';",
          "SELECT SUM(CASE WHEN cards.name = 'Coldsnap' THEN cards.convertedmanacost = 7 ELSE 0 END) * 100 / SUM(cards.convertedmanacost = 7) FROM cards WHERE cards.convertedmanacost = 7;"
        ]
      ]
    },
    {
      "id": 487,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DIVidE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100 FROM cards WHERE name = 'Coldsnap';",
          "SELECT DIVidE(SUM(cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL), SUM(name = 'Coldsnap'))*100 FROM cards WHERE name = 'Coldsnap';",
          "SELECT DIVidE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100 FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL AND name = 'Coldsnap';",
          "SELECT DIVidE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100 FROM cards WHERE name = 'Coldsnap' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 488,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE releasedate = '2017-07-14';",
          "SELECT sets.code FROM sets WHERE releasedate = '2017-07-14';",
          "SELECT sets.code FROM sets WHERE sets.releasedate = '2017-07-14';",
          "SELECT t.code FROM sets AS t WHERE t.releasedate = '2017-07-14';"
        ]
      ]
    },
    {
      "id": 489,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT keyrunecode FROM sets WHERE code = 'PKHC';",
          "SELECT sets.keyrunecode FROM sets WHERE sets.code = 'PKHC';",
          "SELECT sets.keyrunecode FROM sets WHERE code = 'PKHC';",
          "SELECT keyrunecode FROM sets WHERE sets.code = 'PKHC';"
        ]
      ]
    },
    {
      "id": 490,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.mcmid FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE sets.code = 'SS2';",
          "SELECT sets.mcmid FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'SS2';",
          "SELECT sets.mcmid FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE sets.code LIKE 'SS2';",
          "SELECT sets.mcmid FROM sets WHERE sets.code = 'SS2';"
        ]
      ]
    },
    {
      "id": 491,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT mcmname FROM sets WHERE releasedate = '2017/6/9';",
          "SELECT mcmname FROM sets WHERE releasedate = '2017-06-09';",
          "SELECT sets.mcmname FROM sets WHERE sets.releasedate = '2017/6/9';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.releasedate = '2017/6/9';"
        ]
      ]
    },
    {
      "id": 492,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.type FROM sets WHERE sets.name = 'From the Vault: Lore';",
          "SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'From The Vault: Lore';",
          "SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'From the Vault: Lore';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'From the Vault: Lore';"
        ]
      ]
    },
    {
      "id": 493,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized';",
          "SELECT sets.parentcode FROM sets WHERE sets.name = 'Commander 2014 Oversized';",
          "SELECT parentcode FROM sets WHERE name LIKE 'Commander 2014 Oversized';",
          "SELECT sets.parentcode FROM sets WHERE name = 'Commander 2014 Oversized';"
        ]
      ]
    },
    {
      "id": 494,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT hascontentwarning, text FROM cards WHERE artist = 'Jim Pavelec';",
          "SELECT CASE WHEN cards.hascontentwarning = 1 THEN 'YES' ELSE 'NO' END FROM cards WHERE cards.artist = 'Jim Pavelec';",
          "SELECT CASE WHEN cards.hascontentwarning = 1 THEN 'YES' ELSE 'NO' END FROM cards WHERE cards.artist = '<NAME>';",
          "SELECT IF(cards.hascontentwarning = 1, 'YES', 'NO'), rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec';"
        ]
      ]
    },
    {
      "id": 495,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT releasedate FROM sets WHERE code IN (SELECT setcode FROM cards WHERE name = 'Evacuation');",
          "SELECT releasedate FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE name = 'Evacuation';",
          "SELECT releasedate FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Evacuation';",
          "SELECT releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE name = 'Evacuation';"
        ]
      ]
    },
    {
      "id": 496,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara';",
          "SELECT basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara';",
          "SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.id = set_translations.id WHERE set_translations.translation = 'Rinascita di Alara';",
          "SELECT basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE translation = 'Rinascita di Alara';"
        ]
      ]
    },
    {
      "id": 497,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT type FROM sets WHERE name = 'Huiti\u00e8me \u00e9dition';",
          "SELECT type FROM sets WHERE translation = 'Huiti\u00e8me \u00e9dition';",
          "SELECT type FROM sets WHERE code = 'Huiti\u00e8me \u00e9dition';",
          "SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huiti\u00e8me \u00e9dition';"
        ]
      ]
    },
    {
      "id": 498,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.name = 'Tendo Ice Bridge';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.name = 'Tendo Ice Bridge' AND set_translations.language = 'French';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.name = 'Tendo Ice Bridge' AND foreign_data.language = 'French';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id INNER JOIN sets ON foreign_data.setcode = sets.code WHERE foreign_data.name = 'Tendo Ice Bridge' AND set_translations.language = 'French';"
        ]
      ]
    },
    {
      "id": 499,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT set_translations.translation) FROM sets sets JOIN set_translations set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Tenth Edition' AND set_translations.translation IS NOT NULL;",
          "SELECT count(*) FROM set_translations set_translations WHERE set_translations.setcode = '10E' AND set_translations.translation IS NOT NULL;",
          "SELECT count(DISTINCT set_translations.translation) FROM sets sets JOIN set_translations set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Tenth Edition';",
          "SELECT count(DISTINCT set_translations.translation) FROM set_translations set_translations JOIN sets sets ON set_translations.setcode = sets.code WHERE sets.name = 'Tenth Edition' AND set_translations.translation IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 500,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT translation FROM set_translations WHERE setcode IN (SELECT setcode FROM cards WHERE name = 'Fellwar Stone') AND language = 'Japanese';",
          "SELECT translation FROM set_translations WHERE setcode = (SELECT setcode FROM cards WHERE name = 'Fellwar Stone') AND language = 'Japanese';",
          "SELECT translation FROM set_translations WHERE language = 'Japanese' AND setcode IN (SELECT setcode FROM cards WHERE name = 'Fellwar Stone');",
          "SELECT translation FROM set_translations WHERE id IN (SELECT id FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Fellwar Stone')) AND language = 'Japanese';"
        ]
      ]
    },
    {
      "id": 501,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1;",
          "SELECT name FROM cards WHERE setcode = 'Journey into Nyx Hero''s Path' ORDER BY convertedmanacost DESC LIMIT 1;",
          "SELECT cards.name FROM cards JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1;",
          "SELECT cards.name FROM cards INNER JOIN sets ON sets.code = cards.setcode WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 502,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de fr\u00edo';",
          "SELECT sets.releasedate FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.translation = 'Ola de fr\u00edo';",
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON set_translations.setcode = sets.code WHERE set_translations.translation = 'Ola de fr\u00edo';",
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE translation = 'Ola de fr\u00edo';"
        ]
      ]
    },
    {
      "id": 503,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT type FROM sets WHERE code IN (SELECT setcode FROM cards WHERE name = 'Samite Pilgrim');",
          "SELECT type FROM sets WHERE name IN (SELECT name FROM cards WHERE name = 'Samite Pilgrim');",
          "SELECT sets.type FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Samite Pilgrim';",
          "SELECT type FROM sets WHERE id IN (SELECT setcode FROM cards WHERE name = 'Samite Pilgrim');"
        ]
      ]
    },
    {
      "id": 504,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards WHERE convertedmanacost = 3 AND setcode = 'World Championship Decks 2004';",
          "SELECT count(*) FROM cards WHERE convertedmanacost = '3' AND setcode = 'World Championship Decks 2004';",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = '3';",
          "SELECT count(id) FROM cards WHERE convertedmanacost = 3 AND setcode = 'World Championship Decks 2004';"
        ]
      ]
    },
    {
      "id": 505,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Chinese Simplified' AND sets.name = 'Mirrodin';",
          "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN foreign_data ON sets.uuid = foreign_data.uuid WHERE sets.name = 'Mirrodin' AND foreign_data.language = 'Chinese Simplified';"
        ]
      ]
    },
    {
      "id": 506,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.isnonfoilonly = 1;",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE cards.hasnonfoil = 1;",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' AND sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON set_translations.id = cards.id;",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' AND sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Japanese';"
        ]
      ]
    },
    {
      "id": 507,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DIVidE(SUM(isonlineonly = 1), SUM(language = 'Portuguese (Brazil)'))*100 FROM set_translations WHERE language = 'Portuguese (Brazil)';",
          "SELECT DIVidE(SUM(isonlineonly = 1), SUM(language = 'Portuguese (Brazil)))*100 FROM set_translations WHERE language = 'Portuguese (Brazil)';",
          "SELECT DIVidE(SUM(isonlineonly = 1), SUM(language = 'Portuguese (Brazil)'))*100 FROM foreign_data WHERE language = 'Portuguese (Brazil)';",
          "SELECT DIVidE(SUM(isonlineonly = 1), SUM(language = 'Portuguese (Brazil)))*100 FROM foreign_data WHERE language = 'Portuguese (Brazil)';"
        ]
      ]
    },
    {
      "id": 508,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1;",
          "SELECT availability FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE cards.artist = 'Aleksi Briclot' AND istextless = 1;",
          "SELECT availability FROM cards INNER JOIN sets ON cards.set = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE cards.artist = 'Aleksi Briclot' AND istextless = 1;",
          "SELECT availability FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE cards.artist = 'Aleksi Briclot' AND cards.istextless = 1;"
        ]
      ]
    },
    {
      "id": 509,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM sets WHERE basesetsize = (SELECT MAX(basesetsize) FROM sets);",
          "SELECT id FROM sets WHERE basesetsize = (SELECT max(basesetsize) FROM sets);",
          "SELECT id FROM sets WHERE basesetsize = ( SELECT MAX(basesetsize) FROM sets );",
          "SELECT id FROM sets WHERE basesetsize = ( SELECT max(basesetsize) FROM sets );"
        ]
      ]
    },
    {
      "id": 510,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1;",
          "SELECT artist FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE side IS NULL );",
          "SELECT artist FROM cards WHERE cards.side IS NULL ORDER BY cards.convertedmanacost DESC LIMIT 1;",
          "SELECT artist FROM cards WHERE side IS NULL AND convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE side IS NULL );"
        ]
      ]
    },
    {
      "id": 511,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1;",
          "SELECT frameeffects FROM cards WHERE hasfoil = 1 GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1;",
          "SELECT cards.frameeffects FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL GROUP BY cards.frameeffects ORDER BY count(cards.frameeffects) DESC LIMIT 1;",
          "SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY COUNT(frameeffects) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 512,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasfoil = 0 AND dueldeck = 'a';",
          "SELECT count(id) FROM cards WHERE power IS NULL OR power = '*' AND hasfoil = 0 AND dueldeck = 'a';",
          "SELECT count(id) FROM cards cards JOIN legalities legalities ON cards.uuid = legalities.uuid WHERE (power IS NULL OR power = '*') AND hasfoil = 0 AND dueldeck = 'a';",
          "SELECT count(cards.id) FROM cards cards JOIN legalities legalities ON cards.uuid = legalities.uuid WHERE (power IS NULL OR power = '*') AND hasfoil = 0 AND dueldeck = 'a';"
        ]
      ]
    },
    {
      "id": 513,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalsetsize DESC LIMIT 1;",
          "SELECT sets.id FROM sets WHERE sets.type = 'commander' ORDER BY sets.totalsetsize DESC LIMIT 1;",
          "SELECT sets.id FROM sets WHERE sets.type = 'commander' GROUP BY sets.id ORDER BY MAX(sets.totalsetsize) DESC LIMIT 1;",
          "SELECT id FROM sets WHERE type = 'commander' GROUP BY id ORDER BY MAX(totalsetsize) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 514,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards WHERE cards.format = 'duel' ORDER BY cards.convertedmanacost DESC LIMIT 10;",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.convertedmanacost DESC LIMIT 10;",
          "SELECT cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.format = 'duel' ORDER BY cards.convertedmanacost DESC LIMIT 10;",
          "SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' ORDER BY c.convertedmanacost DESC LIMIT 10;"
        ]
      ]
    },
    {
      "id": 515,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT originalreleasedate, format FROM cards WHERE rarity = 'mythic' ORDER BY originalreleasedate ASC LIMIT 1;",
          "SELECT originalreleasedate, format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' ORDER BY originalreleasedate ASC LIMIT 1;",
          "SELECT originalreleasedate, format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' ORDER BY originalreleasedate LIMIT 1;",
          "SELECT originalreleasedate, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' ORDER BY originalreleasedate ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 516,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.artist = 'Volkan Ba\u01f5a' AND foreign_data.language = 'French' AND set_translations.language = 'French';",
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.artist = 'Volkan Ba\u01f5a' AND foreign_data.language = 'French' AND set_translations.language = 'French';",
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'French' AND foreign_data.language = 'French' AND cards.artist = 'Volkan Ba\u01f5a';",
          "SELECT count(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'French' AND foreign_data.language = 'French' AND cards.artist = 'Volkan Ba\u01f5a';"
        ]
      ]
    },
    {
      "id": 517,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND status = 'Legal';",
          "SELECT count(CASE WHEN cards.rarity = 'rare' AND cards.types = 'Enchantment' AND legalities.status = 'Legal' THEN cards.id ELSE NULL END) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid;",
          "SELECT count(CASE WHEN cards.rarity = 'rare' AND cards.types = 'Enchantment' AND legalities.status = 'Legal' THEN cards.id ELSE NULL END) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Abundance';",
          "SELECT count(CASE WHEN cards.rarity = 'rare' AND cards.types = 'Enchantment' AND legalities.status = 'Legal' THEN cards.id ELSE NULL END) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance';"
        ]
      ]
    },
    {
      "id": 518,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT format, name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(status = 'Banned') DESC LIMIT 1;",
          "SELECT legalities.format, cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY COUNT(legalities.status = 'Banned') DESC LIMIT 1;",
          "SELECT legalities.format, cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY COUNT(legalities.status) DESC LIMIT 1;",
          "SELECT format, cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Banned' GROUP BY format ORDER BY COUNT(legalities.status = 'Banned') DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 519,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.uuid = sets.uuid WHERE sets.name = 'Battlebond';",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id WHERE sets.name = 'Battlebond';",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.multiverseid = sets.multiverseid WHERE sets.name = 'Battlebond';",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.uuid = sets.uuid WHERE sets.name = 'Battlebond' GROUP BY foreign_data.language;"
        ]
      ]
    },
    {
      "id": 520,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist , format FROM cards WHERE artist = (SELECT MIN(artist) FROM cards);",
          "SELECT artist , format FROM cards WHERE artist = ( SELECT MIN(artist) FROM cards );",
          "SELECT artist , format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE artist = (SELECT MIN(artist) FROM cards);",
          "SELECT cards.artist , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY cards.artist ORDER BY MIN(cards.artist);"
        ]
      ]
    },
    {
      "id": 521,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.artist = 'D. Alexander Gregory' AND cards.frameversion = '1997' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1 OR sets.name = 'Wizards of the Coast';",
          "SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.artist = 'D. Alexander Gregory' AND cards.frameversion = '1997' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1 AND sets.name = 'Wizards of the Coast';",
          "SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.artist = 'D. Alexander Gregory' AND cards.frameversion = '1997' AND cards.hascontentwarning = 1 AND legalities.format = 'legacy' AND sets.name = 'Wizards of the Coast';",
          "SELECT status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN rulings ON cards.uuid = rulings.uuid INNER JOIN sets ON cards.id = sets.id INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE frameversion = '1997' AND artist = 'D. Alexander Gregory' AND hascontentwarning = 1 AND format = 'legacy' AND set_translations.translation = 'Wizards of the Coast';"
        ]
      ]
    },
    {
      "id": 522,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecrank = 1 AND status = 'Banned';",
          "SELECT cards.name , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.edhrecrank = 1 AND legalities.status = 'Banned';",
          "SELECT cards.name , legalities.format FROM cards INNER JOIN legalities ON legalities.uuid = cards.uuid WHERE edhrecrank = 1 AND status = 'Banned';",
          "SELECT cards.name , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecrank = 1 AND legalities.status = 'Banned';"
        ]
      ]
    },
    {
      "id": 523,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT avg(id) FROM sets WHERE releasedate BETWEEN '2012-01-01' AND '2015-12-31';",
          "SELECT AVG(id) FROM sets WHERE releasedate BETWEEN '2012-01-01' AND '2015-12-31';",
          "SELECT avg(sets.id) FROM sets WHERE sets.releasedate BETWEEN '2012-01-01' AND '2015-12-31';",
          "SELECT MAX(COUNT(language)) FROM set_translations WHERE releasedate BETWEEN '2012-01-01' AND '2015-12-31';"
        ]
      ]
    },
    {
      "id": 524,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.artist FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'arena';",
          "SELECT cards.artist FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'arena' GROUP BY cards.artist;",
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Arena' AND cards.bordercolor = 'black' AND cards.availability = 'arena';",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Arena' AND cards.bordercolor = 'black' AND cards.availability = 'arena';"
        ]
      ]
    },
    {
      "id": 525,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT uuid FROM legalities WHERE format = 'oldschool' OR status = 'banned' OR status = 'restricted';",
          "SELECT uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE format = 'oldschool' AND status = 'banned' OR status = 'restricted';",
          "SELECT uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' OR legalities.status = 'banned' OR legalities.status = 'restricted';",
          "SELECT uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' AND legalities.status = 'banned' OR legalities.status = 'restricted';"
        ]
      ]
    },
    {
      "id": 526,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards WHERE cards.artist = 'Matthew D. Wilson' AND cards.availability = 'paper';",
          "SELECT count(cards.id) FROM cards WHERE cards.artist = '<NAME>. Wilson' AND cards.availability = 'paper';",
          "SELECT count(cards.id) FROM cards WHERE cards.artist = 'Matthew D. Wilson' AND availability = 'paper';",
          "SELECT count(cards.id) FROM cards WHERE cards.artist = 'Matthew D. Wilson' AND cards.availability = 'paper';"
        ]
      ]
    },
    {
      "id": 527,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;",
          "SELECT rulings.date, rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;"
        ]
      ]
    },
    {
      "id": 528,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';",
          "SELECT cards.name, legalities.format FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';",
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON sets.code = cards.setcode WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';",
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON legalities.uuid = cards.uuid INNER JOIN sets ON sets.code = cards.setcode WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';"
        ]
      ]
    },
    {
      "id": 529,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND set_translations.translation NOT LIKE '%Japanese%';",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name NOT LIKE '%Japanese%' AND set_translations.language = 'Korean';",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND NOT set_translations.translation LIKE '%Japanese%';",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND NOT EXISTS ( SELECT * FROM set_translations WHERE set_translations.language = 'Japanese' AND set_translations.setcode = sets.code );"
        ]
      ]
    },
    {
      "id": 530,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.frameversion, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned';",
          "SELECT cards.frameversion, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams';",
          "SELECT cards.artist, cards.frameversion FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned';",
          "SELECT cards.frameversion, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned';"
        ]
      ]
    },
    {
      "id": 531,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;",
          "SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 2;",
          "SELECT users.displayname FROM users WHERE users.displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY users.reputation DESC LIMIT 1;",
          "SELECT users.displayname FROM users WHERE users.displayname IN ('Harlan', '<NAME>') ORDER BY users.reputation DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 532,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users WHERE year(users.creationdate) = 2011;",
          "SELECT displayname FROM users WHERE year(creationdate) = 2011;",
          "SELECT users.displayname FROM users WHERE year(creationdate) = 2011;",
          "SELECT users.displayname FROM users WHERE YEAR(users.creationdate) = 2011;"
        ]
      ]
    },
    {
      "id": 533,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users WHERE users.lastaccessdate > '2014-09-01';",
          "SELECT count(*) FROM users WHERE lastaccessdate > '2014-09-01';",
          "SELECT count(users.id) FROM users WHERE lastaccessdate > '2014-09-01';",
          "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01';"
        ]
      ]
    },
    {
      "id": 534,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users ORDER BY users.views DESC LIMIT 1;",
          "SELECT displayname FROM users ORDER BY views DESC LIMIT 1;",
          "SELECT users.displayname FROM users WHERE users.views = (SELECT max(users.views) FROM users);",
          "SELECT users.displayname FROM users WHERE users.id IN (SELECT users.id FROM users ORDER BY users.views DESC LIMIT 1);"
        ]
      ]
    },
    {
      "id": 535,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM users WHERE upvotes > 100 AND downvotes > 1;",
          "SELECT count(*) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;",
          "SELECT count(users.id) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;",
          "SELECT count(users.upvotes) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;"
        ]
      ]
    },
    {
      "id": 536,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE views > 10 AND year(creationdate) > 2013;",
          "SELECT count(users.id) FROM users WHERE users.views > 10 AND year(users.creationdate) > 2013;",
          "SELECT count(id) FROM users WHERE views > 10 AND year (creationdate) > 2013;",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 10 AND year(users.creationdate) > 2013;"
        ]
      ]
    },
    {
      "id": 537,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';"
        ]
      ]
    },
    {
      "id": 538,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT DISTINCT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT posts.title FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');",
          "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = \"csgillespie\";"
        ]
      ]
    },
    {
      "id": 539,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';",
          "SELECT ownerdisplayname FROM posts WHERE title = 'Eliciting priors from experts';",
          "SELECT users.displayname FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';",
          "SELECT displayname FROM users WHERE id = (SELECT owneruserid FROM posts WHERE title = 'Eliciting priors from experts');"
        ]
      ]
    },
    {
      "id": 540,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;",
          "SELECT posts.title FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;",
          "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = \"csgillespie\" ORDER BY posts.viewcount DESC LIMIT 1;",
          "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' AND posts.viewcount = (SELECT max(viewcount) FROM posts);"
        ]
      ]
    },
    {
      "id": 541,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM posts posts INNER JOIN users users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1;",
          "SELECT users.displayname FROM posts posts JOIN users users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1;",
          "SELECT users.displayname FROM users users JOIN posts posts ON users.id = posts.owneruserid ORDER BY posts.favoritecount DESC LIMIT 1;",
          "SELECT users.displayname FROM posts posts INNER JOIN users users ON posts.owneruserid = users.id GROUP BY users.displayname ORDER BY posts.favoritecount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 542,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';",
          "SELECT sum(comments.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'csgillespie';",
          "SELECT sum(posts.commentcount) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT sum(posts.commentcount) AS total_comments FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';"
        ]
      ]
    },
    {
      "id": 543,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.answercount FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie') ORDER BY posts.answercount DESC LIMIT 1;",
          "SELECT posts.answercount FROM posts WHERE posts.ownerdisplayname = 'csgillespie' ORDER BY posts.answercount DESC LIMIT 1;",
          "SELECT Max(posts.answercount) FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');",
          "SELECT Max(posts.answercount) FROM posts WHERE posts.ownerdisplayname = 'csgillespie';"
        ]
      ]
    },
    {
      "id": 544,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';",
          "SELECT users.displayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation' ORDER BY posthistory.id DESC LIMIT 1;",
          "SELECT users.displayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE posts.title = 'Examples for teaching: Correlation does not mean causation' ORDER BY posthistory.id DESC LIMIT 1;",
          "SELECT users.displayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';"
        ]
      ]
    },
    {
      "id": 545,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM posts WHERE owneruserid = -1 AND parentid IS NULL;",
          "SELECT count(posts.id) FROM posts WHERE posts.owneruserid = -1 AND posts.parentid IS NULL;",
          "SELECT count(*) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'csgillespie') AND parentid IS NULL;",
          "SELECT count(posts.id) FROM posts WHERE posts.owneruserid IN (SELECT users.id FROM users WHERE users.displayname = 'csgillespie') AND posts.parentid IS NULL;"
        ]
      ]
    },
    {
      "id": 546,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL;",
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT Null;",
          "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.closeddate IS NOT NULL;",
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE closeddate IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 547,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;",
          "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20;",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20;"
        ]
      ]
    },
    {
      "id": 548,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';",
          "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';",
          "SELECT users.location FROM users INNER JOIN posts ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';",
          "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = \"Eliciting priors from experts\";"
        ]
      ]
    },
    {
      "id": 549,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT body FROM posts WHERE id = (SELECT excerptpostid FROM tags WHERE tagname = 'bayesian');",
          "SELECT body FROM posts WHERE id = tags.excerptpostid;",
          "SELECT body FROM posts WHERE id = excerptpostid;",
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian';"
        ]
      ]
    },
    {
      "id": 550,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;",
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1;",
          "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid GROUP BY tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;",
          "SELECT p.body FROM posts p JOIN tags t ON p.id = t.excerptpostid GROUP BY t.excerptpostid ORDER BY t.count DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 551,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT badges.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT count(DISTINCT badges.id) FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT count(DISTINCT id) FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'csgillespie');",
          "SELECT count(DISTINCT badges.id) FROM badges WHERE badges.userid IN (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');"
        ]
      ]
    },
    {
      "id": 552,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT badges.name FROM badges WHERE badges.userid IN (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');",
          "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');"
        ]
      ]
    },
    {
      "id": 553,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';",
          "SELECT count(badges.id) FROM badges WHERE badges.userid = 2011 AND strftime('%Y', badges.date) = '2011';",
          "SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND YEAR (badges.date) = 2011;",
          "SELECT count(badges.id) FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie') AND strftime('%Y', badges.date) = '2011';"
        ]
      ]
    },
    {
      "id": 554,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.id) DESC LIMIT 1;",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1;",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1;",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 555,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT avg(comments.score) FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT AVG(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
          "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = \"csgillespie\";"
        ]
      ]
    },
    {
      "id": 556,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200;",
          "SELECT avg(badge_count) FROM (SELECT count(b.id) AS badge_count FROM badges b JOIN users u ON b.userid = u.id WHERE u.views > 200 GROUP BY b.userid);",
          "SELECT avg(badge_count) FROM (SELECT count(b.id) AS badge_count FROM badges b JOIN users u ON b.userid = u.id WHERE u.views > 200 GROUP BY u.id);",
          "SELECT avg(badge_count) FROM (SELECT count(b.id) AS badge_count FROM badges b JOIN users u ON b.userid = u.id WHERE u.views > 200 GROUP BY u.displayname);"
        ]
      ]
    },
    {
      "id": 557,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN posts.score > 5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65;",
          "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.score > 5;",
          "SELECT cast(sum(CASE WHEN posts.score > 5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) AS percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65;",
          "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) AS percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.score > 5;"
        ]
      ]
    },
    {
      "id": 558,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(votes.id) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';",
          "SELECT count(*) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';",
          "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19';",
          "SELECT count(votes.id) FROM votes WHERE votes.creationdate = '2010-07-19' AND votes.userid = 58;"
        ]
      ]
    },
    {
      "id": 559,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;",
          "SELECT creationdate FROM votes WHERE id = (SELECT Max(count(id)) FROM votes);",
          "SELECT creationdate FROM votes WHERE id = (SELECT max(count(id)) FROM votes);",
          "SELECT creationdate FROM votes GROUP BY creationdate HAVING Max(count(id));"
        ]
      ]
    },
    {
      "id": 560,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(badges.id) FROM badges WHERE badges.name = 'Revival';",
          "SELECT count(*) FROM badges WHERE name = 'Revival';",
          "SELECT count(*) FROM badges WHERE badges.name = 'Revival';",
          "SELECT COUNT(badges.id) FROM badges WHERE badges.name = 'Revival';"
        ]
      ]
    },
    {
      "id": 561,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid ORDER BY comments.score DESC LIMIT 1;",
          "SELECT posts.title FROM comments INNER JOIN posts ON comments.postid = posts.id ORDER BY comments.score DESC LIMIT 1;",
          "SELECT p.title FROM posts p JOIN comments c ON p.id = c.postid ORDER BY c.score DESC LIMIT 1;",
          "SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = (SELECT Max(comments.score) FROM comments);"
        ]
      ]
    },
    {
      "id": 562,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;",
          "SELECT count(DISTINCT comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;",
          "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;",
          "SELECT count(DISTINCT comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;"
        ]
      ]
    },
    {
      "id": 563,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.favoritecount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';",
          "SELECT sum(posts.favoritecount) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';",
          "SELECT posts.favoritecount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = 3025 AND comments.creationdate = '2014/4/23 20:29:39.0';",
          "SELECT sum(posts.favoritecount) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';"
        ]
      ]
    },
    {
      "id": 564,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE postid = 107829 AND commentcount = 1;",
          "SELECT text FROM comments WHERE postid = 107829 AND commentcount = '1';",
          "SELECT text FROM comments WHERE postid = 107829 AND id = 1;",
          "SELECT comments.text FROM comments WHERE comments.postid = 107829 AND comments.commentcount = 1;"
        ]
      ]
    },
    {
      "id": 565,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END wellfinished FROM POSTS WHERE id = 23853;",
          "SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END well_finished FROM POSTS WHERE id = 23853;",
          "SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END wellfinished FROM POSTS WHERE id = '23853';",
          "SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END well_finished FROM POSTS WHERE id = '23853';"
        ]
      ]
    },
    {
      "id": 566,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = '65041';",
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = '65041';",
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 65041;",
          "SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 65041;"
        ]
      ]
    },
    {
      "id": 567,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';",
          "SELECT count(posts.owneruserid) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.displayname = posts.ownerdisplayname WHERE users.displayname = 'Tiago Pasqualini';",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';"
        ]
      ]
    },
    {
      "id": 568,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = '6347';",
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = '6347';",
          "SELECT users.displayname FROM users INNER JOIN votes ON votes.userid = users.id WHERE votes.id = '6347';",
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = 6347;"
        ]
      ]
    },
    {
      "id": 569,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT votes.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data visualization%';",
          "SELECT COUNT(votes.id) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%';",
          "SELECT COUNT(*) FROM votes WHERE postid IN (SELECT id FROM posts WHERE title LIKE '%data visualization%');",
          "SELECT COUNT(*) FROM votes WHERE postid IN ( SELECT id FROM posts WHERE title LIKE '%data visualization%' );"
        ]
      ]
    },
    {
      "id": 570,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';",
          "SELECT badges.name FROM users INNER JOIN badges ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';",
          "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms');"
        ]
      ]
    },
    {
      "id": 571,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) / count(votes.id) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE users.id = 24;",
          "SELECT count(posts.id) / count(votes.id) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE users.id = '24';",
          "SELECT count(posts.id) / count(votes.id) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.owneruserid = '24';",
          "SELECT (SELECT count(posts.id) FROM posts WHERE posts.owneruserid = '24') / (SELECT count(votes.id) FROM votes WHERE votes.userid = '24');"
        ]
      ]
    },
    {
      "id": 572,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.viewcount FROM posts WHERE posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
          "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
          "SELECT views FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
          "SELECT posts.viewcount FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'rapidminer' AND posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"
        ]
      ]
    },
    {
      "id": 573,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE score = 17;",
          "SELECT comments.text FROM comments WHERE comments.score = 17;",
          "SELECT * FROM comments WHERE score = 17;",
          "SELECT text FROM comments WHERE comments.score = 17;"
        ]
      ]
    },
    {
      "id": 574,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com';",
          "SELECT displayname FROM users WHERE websiteurl LIKE 'http://stackoverflow.com';",
          "SELECT users.displayname FROM users WHERE users.websiteurl = 'http://stackoverflow.com';",
          "SELECT users.displayname FROM users WHERE users.websiteurl LIKE 'http://stackoverflow.com';"
        ]
      ]
    },
    {
      "id": 575,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost';",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost';",
          "SELECT badges.name FROM users JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost';",
          "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'SilentGhost');"
        ]
      ]
    },
    {
      "id": 576,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'thank you user93';",
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%thank you user93%';",
          "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'thank you user93';",
          "SELECT users.displayname FROM comments JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'thank you user93';"
        ]
      ]
    },
    {
      "id": 577,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE userid = ( SELECT id FROM users WHERE displayname = 'A Lion' );",
          "SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'A Lion';",
          "SELECT text FROM comments WHERE userid = (SELECT id FROM users WHERE displayname = 'A Lion');",
          "SELECT comments.text FROM comments WHERE comments.userid = ( SELECT users.id FROM users WHERE users.displayname = 'A Lion' );"
        ]
      ]
    },
    {
      "id": 578,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?';",
          "SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?';",
          "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?';",
          "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?';"
        ]
      ]
    },
    {
      "id": 579,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'How does gentle boosting differ from AdaBoost?');",
          "SELECT comments.text FROM comments comments INNER JOIN posts posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?';",
          "SELECT comments.text FROM comments JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?';",
          "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE title = 'How does gentle boosting differ from AdaBoost?');"
        ]
      ]
    },
    {
      "id": 580,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer';",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer';",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10;",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10;"
        ]
      ]
    },
    {
      "id": 581,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.ownerdisplayname FROM posts WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';",
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';",
          "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';"
        ]
      ]
    },
    {
      "id": 582,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE users.displayname = 'Vebjorn Ljosa' AND posthistory.posthistorytypeid = 2;",
          "SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE users.displayname = 'Vebjorn Ljosa' AND posthistory.posthistorytypeid = 2;",
          "SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE users.displayname = 'Vebjorn Ljosa';",
          "SELECT title FROM posts WHERE lasteditoruserid = (SELECT id FROM users WHERE displayname = 'Vebjorn Ljosa');"
        ]
      ]
    },
    {
      "id": 583,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';",
          "SELECT SUM(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';",
          "SELECT SUM(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny' GROUP BY users.websiteurl;",
          "SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny' GROUP BY users.websiteurl;"
        ]
      ]
    },
    {
      "id": 584,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'Why square the difference instead of taking the absolute value in standard deviation?');",
          "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE title = 'Why square the difference instead of taking the absolute value in standard deviation?');",
          "SELECT text FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND posttypeid = 1);",
          "SELECT text FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND posthistorytypeid = 2);"
        ]
      ]
    },
    {
      "id": 585,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';",
          "SELECT SUM(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';",
          "SELECT sum(votes.bountyamount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%';",
          "SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON posts.id = votes.postid WHERE posts.title LIKE '%data%';"
        ]
      ]
    },
    {
      "id": 586,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM posts posts JOIN votes votes ON posts.id = votes.postid JOIN users users ON votes.userid = users.id WHERE posts.title LIKE '%variance%' AND votes.bountyamount = 50;",
          "SELECT users.displayname FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE posts.title LIKE '%variance%' AND votes.bountyamount = 50;",
          "SELECT users.displayname FROM posts posts JOIN votes votes ON posts.id = votes.postid JOIN users users ON votes.userid = users.id WHERE votes.bountyamount = 50 AND posts.title LIKE '%variance%';",
          "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.postid IN (SELECT posts.id FROM posts WHERE posts.title LIKE '%variance%') AND comments.bountyamount = 50;"
        ]
      ]
    },
    {
      "id": 587,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(posts.viewcount) FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = '<humor>';",
          "SELECT AVG(posts.viewcount) FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = '<humor>';",
          "SELECT posts.title , posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = '<humor>';",
          "SELECT posts.title , posthistory.comment FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = '<humor>';"
        ]
      ]
    },
    {
      "id": 588,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(comments.id) FROM comments WHERE comments.userid = 13;",
          "SELECT COUNT(comments.id) FROM comments WHERE comments.userid = 13;",
          "SELECT COUNT(*) FROM comments WHERE comments.userid = 13;",
          "SELECT count(comments.text) FROM comments WHERE comments.userid = 13;"
        ]
      ]
    },
    {
      "id": 589,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id FROM users ORDER BY users.reputation DESC LIMIT 1;",
          "SELECT users.id FROM users WHERE users.reputation = (SELECT max(reputation) FROM users);",
          "SELECT id FROM users WHERE reputation = (SELECT max(reputation) FROM users);",
          "SELECT id FROM users ORDER BY reputation DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 590,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id FROM users ORDER BY users.views ASC LIMIT 1;",
          "SELECT users.id FROM users WHERE users.views = (SELECT min(users.views) FROM users);",
          "SELECT users.id FROM users WHERE users.views = (SELECT Min(users.views) FROM users);",
          "SELECT users.id FROM users WHERE users.views = (SELECT min(views) FROM users);"
        ]
      ]
    },
    {
      "id": 591,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Supporter' AND year(badges.date) = 2011;",
          "SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Supporter' AND year(date) = 2011;",
          "SELECT count(id) FROM badges WHERE name = 'Supporter' AND year(date) = 2011;",
          "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE year(badges.date) = 2011 AND badges.name = 'Supporter';"
        ]
      ]
    },
    {
      "id": 592,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(userid) FROM badges WHERE count(name) > 5;",
          "SELECT count(name) FROM badges WHERE count > 5;",
          "SELECT count(*) FROM badges WHERE count > 5;",
          "SELECT count(DISTINCT badges.userid) FROM badges WHERE count(name) > 5;"
        ]
      ]
    },
    {
      "id": 593,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' OR badges.name = 'Supporter' AND users.location = 'New York';",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' OR badges.name = 'Supporter';",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name = 'Teacher' OR badges.name = 'Supporter';",
          "SELECT count(DISTINCT badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Teacher' OR badges.name = 'Supporter' AND users.location = 'New York';"
        ]
      ]
    },
    {
      "id": 594,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;",
          "SELECT users.id, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 1;",
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;",
          "SELECT posts.owneruserid, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 1;"
        ]
      ]
    },
    {
      "id": 595,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY posthistory.postid HAVING COUNT(posthistory.id) = 1 AND users.views >= 1000;",
          "SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY posthistory.postid HAVING COUNT(posthistory.postid) = 1 AND users.views >= 1000;",
          "SELECT users.userid FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY users.userid HAVING COUNT(posthistory.postid) = 1 AND users.views >= 1000;",
          "SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY users.id HAVING COUNT(posthistory.postid) = 1 AND users.views >= 1000;"
        ]
      ]
    },
    {
      "id": 596,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(*) DESC LIMIT 1;",
          "SELECT badges.name FROM comments INNER JOIN badges ON comments.userid = badges.userid GROUP BY comments.userid ORDER BY count(*) DESC LIMIT 1;",
          "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1;",
          "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id HAVING count(*) = (SELECT max(comment_count) FROM (SELECT count(*) AS comment_count FROM comments GROUP BY comments.userid));"
        ]
      ]
    },
    {
      "id": 597,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Teacher' AND users.location = 'India';",
          "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.location = 'India';",
          "SELECT count(DISTINCT users.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.location = 'India';",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'India';"
        ]
      ]
    },
    {
      "id": 598,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT (count(name) FILTER (WHERE Year(date) = 2010) - count(name) FILTER (WHERE Year(date) = 2011)) * 100 / count(name) FROM badges;",
          "SELECT (count(name) FILTER (WHERE Year(date) = 2010) - count(name) FILTER (WHERE Year(date) = 2011)) * 100 / count(name) FROM badges WHERE name = 'Student';",
          "SELECT (count(name) FILTER (WHERE Year(date) = 2010) - count(name) FILTER (WHERE Year(date) = 2011)) / count(name) * 100 FROM badges;",
          "SELECT (count(name) FILTER (WHERE Year(date) = 2010) - count(name) FILTER (WHERE Year(date) = 2011)) * 100 / count(name) FILTER (WHERE Year(date) = 2010) FROM badges;"
        ]
      ]
    },
    {
      "id": 599,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;",
          "SELECT posthistory.posthistorytypeid, count(DISTINCT posthistory.userid) FROM posthistory INNER JOIN comments ON posthistory.postid = comments.postid WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;",
          "SELECT posthistory.posthistorytypeid, count(DISTINCT posthistory.userid) FROM posthistory WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;",
          "SELECT DISTINCT posthistory.posthistorytypeid, count(DISTINCT posthistory.userid) FROM posthistory INNER JOIN comments ON posthistory.postid = comments.postid WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;"
        ]
      ]
    },
    {
      "id": 600,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT * FROM posts WHERE relatedpostid = 61217;",
          "SELECT * FROM posts WHERE posts.id = 61217;",
          "SELECT posts.id , posts.viewcount FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE postlinks.postid = 61217;",
          "SELECT * FROM posts WHERE relatedpostid = 61217 OR postid = 61217;"
        ]
      ]
    },
    {
      "id": 601,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT score, linktypeid FROM postlinks WHERE postid = 395;",
          "SELECT posts.score, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.id = 395;",
          "SELECT score, linktypeid FROM postlinks WHERE postid = 395 LIMIT 1;",
          "SELECT posts.score, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.postid = 395;"
        ]
      ]
    },
    {
      "id": 602,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.id, posts.owneruserid FROM posts WHERE posts.score > 60;",
          "SELECT posts.id, comments.userid FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.score > 60;",
          "SELECT posts.id, posts.lasteditoruserid FROM posts WHERE posts.score > 60;",
          "SELECT DISTINCT posts.id, posts.lasteditoruserid FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.score > 60;"
        ]
      ]
    },
    {
      "id": 603,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT SUM(posts.favoritecount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 686 AND votes.creationdate = 2011;",
          "SELECT SUM(posts.favoritecount) FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON comments.userid = users.id WHERE users.id = 686 AND year(posts.creationdate) = 2011;",
          "SELECT SUM(posts.favoritecount) FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON comments.userid = users.id WHERE users.id = 686 AND YEAR(posts.creationdate) = 2011;",
          "SELECT SUM(posts.favoritecount) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE users.id = 686 AND posts.creationdate = 2011;"
        ]
      ]
    },
    {
      "id": 604,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT AVG(users.upvotes), AVG(users.age) FROM users WHERE users.id IN (SELECT posts.lasteditoruserid FROM posts WHERE posts.commentcount > 10);",
          "SELECT AVG(users.upvotes), AVG(users.age) FROM users WHERE users.id IN (SELECT posts.owneruserid FROM posts WHERE posts.commentcount > 10);",
          "SELECT AVG(users.upvotes) , AVG(users.age) FROM users WHERE users.id IN (SELECT posts.owneruserid FROM posts WHERE posts.commentcount > 10);",
          "SELECT Divide(Sum(votes.upvotes), count(votes.userid)), Divide(Sum(users.age), count(users.id)) FROM votes INNER JOIN posts ON votes.postid = posts.id INNER JOIN users ON votes.userid = users.id WHERE posts.commentcount > 10;"
        ]
      ]
    },
    {
      "id": 605,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer';",
          "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Announcer';",
          "SELECT count(badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer';",
          "SELECT count(badges.name) FROM badges WHERE badges.name = 'Announcer';"
        ]
      ]
    },
    {
      "id": 606,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM badges WHERE badges.date = '2010-07-19 19:39:08.0';",
          "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0';",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';",
          "SELECT badges.name FROM badges WHERE date = '2010-07-19 19:39:08.0';"
        ]
      ]
    },
    {
      "id": 607,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM comments WHERE score > 60;",
          "SELECT count(score) FROM comments WHERE score > 60;",
          "SELECT COUNT(*) FROM comments WHERE score > 60;",
          "SELECT count(comments.score) FROM comments WHERE comments.score > 60;"
        ]
      ]
    },
    {
      "id": 608,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14.0';",
          "SELECT comments.text FROM comments WHERE comments.creationdate = '2010-07-19 19:16:14.0';",
          "SELECT text FROM comments WHERE comments.creationdate = '2010-07-19 19:16:14.0';",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47.0';"
        ]
      ]
    },
    {
      "id": 609,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM posts WHERE score = 10;",
          "SELECT count(*) FROM tags WHERE score = 10;",
          "SELECT count(DISTINCT posts.id) FROM posts posts JOIN tags tags ON posts.id = tags.id WHERE tags.tagname = 'scores' AND posts.score = 10;",
          "SELECT count(DISTINCT posts.id) FROM posts posts JOIN comments comments ON posts.id = comments.postid WHERE comments.score = 10;"
        ]
      ]
    },
    {
      "id": 610,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users WHERE users.reputation = ( SELECT max(reputation) FROM users );",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users );",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users );",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = ( SELECT max(reputation) FROM users );"
        ]
      ]
    },
    {
      "id": 611,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation FROM users JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0';",
          "SELECT u.reputation FROM users u JOIN badges b ON u.id = b.userid WHERE b.date = '2010-07-19 19:39:08.0';",
          "SELECT users.reputation FROM badges JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';",
          "SELECT DISTINCT users.reputation FROM badges JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';"
        ]
      ]
    },
    {
      "id": 612,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'Pierre');",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';",
          "SELECT badges.name FROM badges WHERE badges.userid IN (SELECT users.id FROM users WHERE users.displayname = 'Pierre');",
          "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';"
        ]
      ]
    },
    {
      "id": 613,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY';",
          "SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = \"Rochester, NY\";",
          "SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location LIKE 'Rochester, NY';",
          "SELECT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY';"
        ]
      ]
    },
    {
      "id": 614,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(users.id) FROM badges INNER JOIN users ON badges.userid = users.id;",
          "SELECT cast(count(users.displayname = 'Teacher') AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher';",
          "SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid;",
          "SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher';"
        ]
      ]
    },
    {
      "id": 615,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(id) FROM users ), users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;",
          "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(users.id) FROM users ), users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;",
          "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(id) FROM users ), users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' GROUP BY users.displayname HAVING users.age BETWEEN 13 AND 18;",
          "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(userid) FROM badges WHERE name = 'Organizer' ), users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;"
        ]
      ]
    },
    {
      "id": 616,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.score FROM comments WHERE comments.creationdate = '2010-07-19 19:19:56.0';",
          "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56.0';",
          "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creationdate = '2010-07-19 19:19:56.0';",
          "SELECT comments.score FROM comments INNER JOIN posts ON posts.id = comments.postid WHERE posts.creationdate = '2010-07-19 19:19:56.0';"
        ]
      ]
    },
    {
      "id": 617,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM comments WHERE comments.creationdate = '2010-07-19 19:37:33.0';",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2010-07-19 19:37:33.0';",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:37:33.0';",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:37:33';"
        ]
      ]
    },
    {
      "id": 618,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';",
          "SELECT users.age FROM users INNER JOIN badges ON badges.userid = users.id WHERE users.location = 'Vienna, Austria';",
          "SELECT users.age FROM users WHERE users.location = 'Vienna, Austria' AND users.id IN (SELECT badges.userid FROM badges);",
          "SELECT users.age FROM users WHERE users.location = 'Vienna, Austria' AND users.id IN (SELECT badges.userid FROM badges WHERE badges.name = 'Teacher');"
        ]
      ]
    },
    {
      "id": 619,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;",
          "SELECT count(badges.userid) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;",
          "SELECT count(DISTINCT badges.userid) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;",
          "SELECT count(badges.userid) FROM badges JOIN users ON badges.userid = users.id WHERE users.age BETWEEN 19 AND 65 AND badges.name = 'Supporter';"
        ]
      ]
    },
    {
      "id": 620,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08.0';",
          "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08';",
          "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';",
          "SELECT COUNT(users.views) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08.0';"
        ]
      ]
    },
    {
      "id": 621,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = (SELECT min(reputation) FROM users);",
          "SELECT badges.name FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.reputation = (SELECT min(reputation) FROM users);",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id ORDER BY users.reputation ASC LIMIT 1;",
          "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.reputation = (SELECT min(reputation) FROM users);"
        ]
      ]
    },
    {
      "id": 622,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'Sharpie';",
          "SELECT b.name FROM badges b JOIN users u ON b.userid = u.id WHERE u.displayname = 'Sharpie';",
          "SELECT badges.name FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie';",
          "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'Sharpie');"
        ]
      ]
    },
    {
      "id": 623,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.age > 65 AND badges.name = 'Supporter';",
          "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter';",
          "SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age > 65;",
          "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65;"
        ]
      ]
    },
    {
      "id": 624,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users WHERE users.id = 30;",
          "SELECT displayname FROM users WHERE id = 30;",
          "SELECT users.displayname FROM users WHERE id = 30;",
          "SELECT users.displayname AS name FROM users WHERE users.id = 30;"
        ]
      ]
    },
    {
      "id": 625,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users WHERE users.location = 'New York';",
          "SELECT count(id) FROM users WHERE location = 'New York';",
          "SELECT count(*) FROM users WHERE location = 'New York';",
          "SELECT count(users.location) FROM users WHERE users.location = 'New York';"
        ]
      ]
    },
    {
      "id": 626,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2010;",
          "SELECT count(votes.id) FROM votes WHERE YEAR(votes.creationdate) = 2010;",
          "SELECT count(*) FROM votes WHERE YEAR(votes.creationdate) = 2010;",
          "SELECT count(*) FROM votes WHERE strftime('%Y', votes.creationdate) = '2010';"
        ]
      ]
    },
    {
      "id": 627,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65;",
          "SELECT count(*) FROM users WHERE age BETWEEN 19 AND 65;",
          "SELECT count(id) FROM users WHERE age BETWEEN 19 and 65;",
          "SELECT count(users.id) FROM users WHERE users.age BETWEEN 19 AND 65;"
        ]
      ]
    },
    {
      "id": 628,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users ORDER BY views DESC LIMIT 1;",
          "SELECT displayname FROM users WHERE views = ( SELECT MAX(views) FROM users );",
          "SELECT users.displayname FROM users ORDER BY users.views DESC LIMIT 1;",
          "SELECT users.displayname FROM users WHERE users.views = ( SELECT MAX(users.views) FROM users );"
        ]
      ]
    },
    {
      "id": 629,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) AS REAL) FROM votes;",
          "SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) FROM votes;",
          "SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / count(*) FROM votes WHERE votes.creationdate IS NOT NULL;",
          "SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) AS REAL) AS ratio FROM votes;"
        ]
      ]
    },
    {
      "id": 630,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE posts.ownerdisplayname = 'John Salvatier';",
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.excerptpostid WHERE users.displayname = 'John Salvatier';",
          "SELECT tags.tagname FROM posts INNER JOIN tags ON posts.tags = tags.id WHERE posts.ownerdisplayname = 'John Salvatier';",
          "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE posts.ownerdisplayname = 'John';"
        ]
      ]
    },
    {
      "id": 631,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM posts WHERE ownerdisplayname = 'Daniel Vassallo';",
          "SELECT count(*) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Daniel Vassallo';",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Daniel Vassallo';",
          "SELECT count(*) FROM users WHERE displayname = 'Daniel Vassallo';"
        ]
      ]
    },
    {
      "id": 632,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Harlan';",
          "SELECT count(votes.id) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Harlan';",
          "SELECT count(votes.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'Harlan';",
          "SELECT count(votes.id) FROM users INNER JOIN votes USING (userid) WHERE users.displayname = 'Harlan';"
        ]
      ]
    },
    {
      "id": 633,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.id FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1;",
          "SELECT posts.id FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1;",
          "SELECT posts.id FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1;",
          "SELECT posts.id FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 634,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT MAX(SUM(viewcount)) FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' OR ownerdisplayname = 'Noah Snyder';",
          "SELECT posts.id FROM posts WHERE posts.ownerdisplayname = 'Harvey Motulsky' OR posts.ownerdisplayname = 'Noah Snyder' GROUP BY posts.id ORDER BY MAX(SUM(posts.viewcount)) DESC LIMIT 1;",
          "SELECT posts.id FROM posts WHERE posts.owneruserid IN (SELECT users.id FROM users WHERE users.displayname = 'Harvey Motulsky' OR users.displayname = 'Noah Snyder') GROUP BY posts.id ORDER BY MAX(SUM(posts.viewcount)) DESC LIMIT 1;",
          "SELECT posts.id FROM posts WHERE posts.owneruserid IN (SELECT users.id FROM users WHERE users.displayname IN ('Harvey Motulsky', 'Noah Snyder')) GROUP BY posts.id ORDER BY MAX(SUM(posts.viewcount)) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 635,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE ownerdisplayname = 'Matt Parker' AND votes > 4;",
          "SELECT count(postid) FROM votes WHERE postid > 4 AND userid = (SELECT id FROM users WHERE displayname = 'Matt Parker');",
          "SELECT count(id) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Matt Parker') AND votes > 4;",
          "SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4;"
        ]
      ]
    },
    {
      "id": 636,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM comments WHERE userid IN (SELECT id FROM users WHERE displayname = 'Neil McGuigan') AND score < 60;",
          "SELECT count(*) FROM comments WHERE postid IN (SELECT id FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'Neil McGuigan')) AND score < 60;",
          "SELECT count(*) FROM posts JOIN comments ON posts.id = comments.postid JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60;",
          "SELECT count(*) FROM posts JOIN comments ON posts.id = comments.postid JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND posts.score < 60;"
        ]
      ]
    },
    {
      "id": 637,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0;",
          "SELECT t.tagname FROM tags t JOIN posts p ON t.excerptpostid = p.id JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Mark Meckes' AND p.commentcount = 0;",
          "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Mark Meckes' AND tags.count = 0;",
          "SELECT t.tagname FROM tags t JOIN posts p ON t.excerptpostid = p.id JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Mark Meckes' AND t.count > 0 AND p.commentcount = 0;"
        ]
      ]
    },
    {
      "id": 638,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer';",
          "SELECT DISTINCT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer';",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer';",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer';"
        ]
      ]
    },
    {
      "id": 639,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(DISTINCT CASE WHEN tags.tagname = 'r' THEN posts.id ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.ownerdisplayname = 'Community';",
          "SELECT cast(count(DISTINCT CASE WHEN tags.tagname = 'r' THEN posts.id ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.id) AS percentage FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.ownerdisplayname = 'Community';",
          "SELECT cast(count(DISTINCT CASE WHEN tags.tagname = 'r' THEN posts.id ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community';",
          "SELECT cast(count(DISTINCT CASE WHEN tags.tagname = 'r' THEN posts.id ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.id) AS result FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.ownerdisplayname = 'Community';"
        ]
      ]
    },
    {
      "id": 640,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS difference FROM posts INNER JOIN users ON posts.owneruserid = users.id;",
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS difference FROM users INNER JOIN posts ON users.id = posts.owneruserid;",
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS difference FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname IN ('Mornington', 'Amos');",
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS difference FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname IN ('Mornington', 'Amos');"
        ]
      ]
    },
    {
      "id": 641,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM badges WHERE name = 'Commentator' AND year(date) = 2014;",
          "SELECT count(*) FROM badges WHERE year(date) = 2014 AND name = 'Commentator';",
          "SELECT count(DISTINCT badges.userid) FROM badges WHERE year(badges.date) = 2014 AND badges.name = 'Commentator';",
          "SELECT count(badges.name) FROM badges WHERE badges.name = 'Commentator' AND year(badges.date) = 2014;"
        ]
      ]
    },
    {
      "id": 642,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM posts WHERE creationdate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';",
          "SELECT count(*) FROM posts WHERE creationdate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';",
          "SELECT count(*) FROM posts WHERE posts.creationdate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';",
          "SELECT count(*) FROM posts WHERE posts.creaiondate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';"
        ]
      ]
    },
    {
      "id": 643,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname , users.age FROM users WHERE users.views = ( SELECT max(views) FROM users );",
          "SELECT users.displayname , users.age FROM users ORDER BY users.views DESC LIMIT 1;",
          "SELECT users.displayname , users.age FROM users WHERE users.views = ( SELECT MAX(views) FROM users );",
          "SELECT users.displayname , users.age FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.views = ( SELECT max(views) FROM posthistory );"
        ]
      ]
    },
    {
      "id": 644,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images';",
          "SELECT posthistory.lasteditdate, posthistory.lasteditoruserid FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Detecting a given face in a database of facial images';",
          "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images';",
          "SELECT posthistory.lasteditdate, posthistory.lasteditoruserid FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Detecting a given face in a database of facial images';"
        ]
      ]
    },
    {
      "id": 645,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM comments WHERE userid = 13 AND score < 60;",
          "SELECT count(comments.score) FROM comments WHERE comments.userid = 13 AND comments.score < 60;",
          "SELECT count(*) FROM comments WHERE score < 60 AND userid = 13;",
          "SELECT count(*) FROM comments WHERE comments.userid = 13 AND comments.score < 60;"
        ]
      ]
    },
    {
      "id": 646,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title , users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON comments.userid = users.id WHERE comments.score > 60;",
          "SELECT posts.title, users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON comments.userid = users.id WHERE comments.score > 60;",
          "SELECT posts.title , users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON users.id = comments.userid WHERE comments.score > 60;",
          "SELECT posthistory.postid, posthistory.comment, users.displayname FROM posthistory INNER JOIN users ON posthistory.userid = users.id WHERE posthistory.comment LIKE '%title%' AND posthistory.score > 60;"
        ]
      ]
    },
    {
      "id": 647,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND year(badges.date) = 2011;",
          "SELECT badges.name FROM badges WHERE badges.userid IN (SELECT users.id FROM users WHERE users.location = 'North Pole') AND year(badges.date) = 2011;",
          "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND year(badges.date) = 2011;",
          "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.location = 'North Pole') AND year(badges.date) = 2011;"
        ]
      ]
    },
    {
      "id": 648,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname , users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150;",
          "SELECT users.displayname , users.websiteurl FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150;",
          "SELECT users.displayname , users.websiteurl FROM users JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150;",
          "SELECT users.displayname , users.websiteurl FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150;"
        ]
      ]
    },
    {
      "id": 649,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.id, posthistory.creationdate FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?';",
          "SELECT posthistory.postid, posthistory.id, posthistory.creationdate, posthistory.posthistorytypeid, posthistory.text, posthistory.comment FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?';",
          "SELECT posthistory.id, posthistory.creationdate FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = \"What is the best introductory Bayesian statistics textbook?\";",
          "SELECT posthistory.id, posthistory.creationdate FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?' ORDER BY posthistory.creationdate DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 650,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT lastaccessdate , location FROM users WHERE id IN (SELECT userid FROM badges WHERE name = 'Outliers');",
          "SELECT lastaccessdate, location FROM users WHERE id IN (SELECT userid FROM badges WHERE name = 'Outliers');",
          "SELECT users.lastaccessdate , users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outliers';",
          "SELECT users.lastaccessdate , users.location FROM users INNER JOIN badges ON badges.userid = users.id WHERE badges.name = 'Outliers';"
        ]
      ]
    },
    {
      "id": 651,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE posts.title = 'How to tell if something happened in a data set which monitors a value over time';",
          "SELECT posts.title FROM posts INNER JOIN postlinks ON postlinks.relatedpostid = posts.id WHERE posts.title = 'How to tell if something happened in a data set which monitors a value over time';",
          "SELECT posts.title FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE posts.title = 'How to tell if something happened in a data set which monitors a value over time';",
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE postlinks.postid = 395;"
        ]
      ]
    },
    {
      "id": 652,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.postid, badges.name FROM posthistory INNER JOIN badges ON posthistory.userid = badges.userid WHERE posthistory.userdisplayname = 'Samuel' AND YEAR(posthistory.creationdate) = 2013;",
          "SELECT posthistory.postid, badges.name FROM posthistory INNER JOIN badges ON posthistory.userid = badges.userid WHERE users.displayname = 'Samuel' AND YEAR(posthistory.creationdate) = 2013;",
          "SELECT posthistory.postid, badges.name FROM posthistory INNER JOIN badges ON posthistory.userid = badges.userid WHERE posthistory.userdisplayname = 'Samuel' AND YEAR(posthistory.creationdate) = 2013 AND YEAR(badges.date) = 2013;",
          "SELECT posthistory.postid, badges.name FROM posthistory INNER JOIN badges ON posthistory.userid = badges.userid WHERE YEAR(posthistory.creationdate) = 2013 AND YEAR(badges.date) = 2013 AND posthistory.userdisplayname = 'Samuel';"
        ]
      ]
    },
    {
      "id": 653,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.ownerdisplayname FROM posts ORDER BY posts.viewcount DESC LIMIT 1;",
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.viewcount DESC LIMIT 1;",
          "SELECT posts.ownerdisplayname FROM posts WHERE posts.viewcount = (SELECT MAX(posts.viewcount) FROM posts);",
          "SELECT posts.ownerdisplayname FROM posts WHERE posts.viewcount = (SELECT MAX(viewcount) FROM posts);"
        ]
      ]
    },
    {
      "id": 654,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname , users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing';",
          "SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing';",
          "SELECT users.displayname , users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tagname = 'hypothesis-testing';",
          "SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tagname = 'hypothesis-testing';"
        ]
      ]
    },
    {
      "id": 655,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?';",
          "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE posts.title = 'What are principal component scores?';",
          "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON postlinks.postid = posts.id WHERE posts.title = 'What are principal component scores?';",
          "SELECT tags.tagname, postlinks.relatedpostid, postlinks.linktypeid FROM tags INNER JOIN postlinks ON tags.wikipostid = postlinks.postid WHERE posts.title = 'What are principal component scores?';"
        ]
      ]
    },
    {
      "id": 656,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL ORDER BY posts.score DESC LIMIT 1;",
          "SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL AND posts.score = (SELECT max(score) FROM posts WHERE parentid IS NOT NULL);",
          "SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL AND posts.score = (SELECT max(score) FROM posts WHERE parentid = posts.id);",
          "SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL AND posts.score = (SELECT max(score) FROM posts WHERE parentid = posts.parentid);"
        ]
      ]
    },
    {
      "id": 657,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;",
          "SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;",
          "SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votetypeid = 8 AND votes.bountyamount = (SELECT MAX(bountyamount) FROM votes WHERE votetypeid = 8);",
          "SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 AND votes.bountyamount = (SELECT MAX(bountyamount) FROM votes WHERE votetypeid = 8);"
        ]
      ]
    },
    {
      "id": 658,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts ORDER BY posts.viewcount DESC LIMIT 5;",
          "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5;",
          "SELECT posts.title FROM posts ORDER BY viewcount DESC LIMIT 5;",
          "SELECT posts.title FROM posts WHERE posts.viewcount IN (SELECT max(viewcount) FROM posts) ORDER BY posts.viewcount DESC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 659,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM tags WHERE count BETWEEN 5000 and 7000;",
          "SELECT count(*) FROM tags WHERE count BETWEEN 5000 AND 7000;",
          "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.id BETWEEN 5000 AND 7000;",
          "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.id BETWEEN 5000 AND 7000;"
        ]
      ]
    },
    {
      "id": 660,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.owneruserid FROM posts ORDER BY posts.favoritecount DESC LIMIT 1;",
          "SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1;",
          "SELECT owneruserid FROM posts WHERE favoritecount = (SELECT MAX(favoritecount) FROM posts);",
          "SELECT posts.owneruserid FROM posts WHERE posts.favoritecount = (SELECT MAX(favoritecount) FROM posts);"
        ]
      ]
    },
    {
      "id": 661,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT age FROM users ORDER BY reputation DESC LIMIT 1;",
          "SELECT age FROM users WHERE reputation = (SELECT MAX(reputation) FROM users);",
          "SELECT age FROM users WHERE reputation = (SELECT max(reputation) FROM users);",
          "SELECT displayname FROM users WHERE reputation = (SELECT MAX(reputation) FROM users);"
        ]
      ]
    },
    {
      "id": 662,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2011 AND bountyamount = 50;",
          "SELECT count(*) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE YEAR(posts.creationdate) = 2011 AND votes.bountyamount = 50;",
          "SELECT count(*) FROM votes WHERE YEAR(votes.creationdate) = 2011 AND votes.bountyamount = 50;",
          "SELECT count(votes.id) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE YEAR(posts.creationdate) = 2011 AND votes.bountyamount = 50;"
        ]
      ]
    },
    {
      "id": 663,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id FROM users WHERE age = (SELECT min(age) FROM users);",
          "SELECT id FROM users WHERE age = ( SELECT min(age) FROM users );",
          "SELECT id FROM users WHERE age = (SELECT MIN(age) FROM users);",
          "SELECT users.id FROM users WHERE age = (SELECT min(age) FROM users);"
        ]
      ]
    },
    {
      "id": 664,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT SUM(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%';",
          "SELECT SUM(score) FROM posts WHERE posts.lasactivitydate LIKE '2010-07-19%';",
          "SELECT sum(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%';",
          "SELECT SUM(score) FROM posts WHERE posts.lasactivitydate LIKE '2010-07-19%' GROUP BY posts.id;"
        ]
      ]
    },
    {
      "id": 665,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2 AND strftime('%Y', posts.creationdate) = '2010';",
          "SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id WHERE posts.answercount <= 2 AND strftime('%Y', postlinks.creationdate) = '2010';",
          "SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2 AND strftime('%Y', postlinks.creationdate) = '2010';",
          "SELECT cast(sum(postlinks.linktypeid) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2 AND strftime('%Y', posts.creationdate) = '2010';"
        ]
      ]
    },
    {
      "id": 666,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 ORDER BY posts.favoritecount DESC LIMIT 1;",
          "SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 GROUP BY posts.id ORDER BY posts.favoritecount DESC LIMIT 1;",
          "SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 GROUP BY posts.id ORDER BY sum(votes.bountyamount) DESC LIMIT 1;",
          "SELECT posts.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 GROUP BY posts.id ORDER BY posts.favoritecount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 667,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1;",
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate LIMIT 1;",
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid ORDER BY postlinks.creationdate ASC LIMIT 1;",
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.creationdate = (SELECT min(creationdate) FROM postlinks);"
        ]
      ]
    },
    {
      "id": 668,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1;",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1;",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY badges.userid ORDER BY count(badges.name) DESC LIMIT 1;",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 669,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT MIN(creationdate) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl';",
          "SELECT min(votes.creationdate) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl';",
          "SELECT MIN(votes.creationdate) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl';",
          "SELECT MIN(creationdate) FROM votes WHERE votes.userid = (SELECT users.id FROM users WHERE users.displayname = 'chl');"
        ]
      ]
    },
    {
      "id": 670,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT MIN(creaiondate) FROM posts WHERE owneruserid = (SELECT MIN(id) FROM users);",
          "SELECT MIN(creationdate) FROM posts WHERE owneruserid = (SELECT MIN(id) FROM users);",
          "SELECT posthistory.creationdate FROM posthistory posthistory JOIN users users ON posthistory.userid = users.id WHERE users.age = (SELECT min(age) FROM users) AND posthistory.creationdate = (SELECT min(creationdate) FROM posthistory posthistory JOIN users users ON posthistory.userid = users.id WHERE users.age = (SELECT min(age) FROM users));",
          "SELECT posthistory.creationdate FROM posthistory posthistory JOIN users users ON posthistory.userid = users.id WHERE users.age = (SELECT min(age) FROM users) AND posthistory.postid = (SELECT min(postid) FROM posthistory posthistory JOIN users users ON posthistory.userid = users.id WHERE users.age = (SELECT min(age) FROM users));"
        ]
      ]
    },
    {
      "id": 671,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;",
          "SELECT users.displayname FROM users INNER JOIN badges ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;",
          "SELECT users.displayname FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;"
        ]
      ]
    },
    {
      "id": 672,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM users WHERE location = 'United Kingdom' AND favoritecount >= 4;",
          "SELECT count(DISTINCT users.id) FROM users WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount >= 4 AND users.location = 'United Kingdom';"
        ]
      ]
    },
    {
      "id": 673,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT AVG(postid) FROM votes WHERE userid IN (SELECT id FROM users WHERE age = (SELECT max(age) FROM users));",
          "SELECT AVG(postid) FROM votes WHERE userid IN (SELECT MAX(age) FROM users);",
          "SELECT AVG(postid) FROM votes WHERE userid = (SELECT max(age) FROM users);",
          "SELECT AVG(postid) FROM votes WHERE userid IN (SELECT id FROM users WHERE age = (SELECT MAX(age) FROM users));"
        ]
      ]
    },
    {
      "id": 674,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users WHERE users.reputation = ( SELECT max(reputation) FROM users );",
          "SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;",
          "SELECT users.displayname FROM users users WHERE users.reputation = ( SELECT max(reputation) FROM users );",
          "SELECT users.displayname FROM users WHERE users.reputation = ( SELECT MAX(reputation) FROM users );"
        ]
      ]
    },
    {
      "id": 675,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000;",
          "SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000;",
          "SELECT count(reputation) FROM users WHERE reputation > 2000 AND views > 1000;",
          "SELECT count(users.id) FROM users WHERE users.reputation > 2000 AND users.views > 1000;"
        ]
      ]
    },
    {
      "id": 676,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users WHERE users.age BETWEEN 19 AND 65;",
          "SELECT users.displayname FROM users WHERE users.age BETWEEN 19 and 65;",
          "SELECT users.displayname FROM users WHERE users.age >= 19 AND users.age <= 65;",
          "SELECT users.displayname FROM users WHERE age BETWEEN 19 AND 65;"
        ]
      ]
    },
    {
      "id": 677,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT posts.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;",
          "SELECT count(DISTINCT posts.id) FROM users users INNER JOIN posts posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;",
          "SELECT count(posts.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;"
        ]
      ]
    },
    {
      "id": 678,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1;",
          "SELECT posts.id , posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;",
          "SELECT id , title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'Harvey Motulsky' ORDER BY views DESC LIMIT 1 );",
          "SELECT posts.id, posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 679,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, title FROM posts ORDER BY score DESC LIMIT 1;",
          "SELECT posts.id , posts.title FROM posts ORDER BY posts.score DESC LIMIT 1;",
          "SELECT id , title FROM posts ORDER BY score DESC LIMIT 1;",
          "SELECT posts.id, posts.title FROM posts ORDER BY posts.score DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 680,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT AVG(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';",
          "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';",
          "SELECT AVG(posts.score) FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner';",
          "SELECT AVG(posts.score) AS avg FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';"
        ]
      ]
    },
    {
      "id": 681,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE viewcount > 20000 AND YEAR(creationdate) = 2011;",
          "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND YEAR(posts.creationdate) = 2011;",
          "SELECT users.displayname FROM users JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND YEAR(posts.creationdate) = 2011;",
          "SELECT displayname FROM users WHERE YEAR(creationdate) = 2011 AND viewcount > 20000;"
        ]
      ]
    },
    {
      "id": 682,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.id, posts.ownerdisplayname FROM posts WHERE year(posts.creationdate) = 2010 ORDER BY posts.favoritecount DESC LIMIT 1;",
          "SELECT id, ownerdisplayname FROM posts WHERE favoritecount = ( SELECT MAX(favoritecount) FROM posts WHERE year(creationdate) = 2010 );",
          "SELECT posts.id, users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE year(posts.creationdate) = 2010 ORDER BY posts.favoritecount DESC LIMIT 1;",
          "SELECT posts.id, posts.ownerdisplayname FROM posts WHERE posts.favoritecount = ( SELECT MAX(favoritecount) FROM posts WHERE year(posts.creationdate) = 2010 );"
        ]
      ]
    },
    {
      "id": 683,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE YEAR(posts.creationdate) = 2011 AND users.reputation > 1000;",
          "SELECT percentage = DIVidE(count(id where YEAR(creationdate) = 2011 and reputation > 1000), count(id) ) * 100 FROM users INNER JOIN posts ON users.id = posts.owneruserid;",
          "SELECT percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE YEAR(creationdate) = 2011 AND users.reputation > 1000;",
          "SELECT percentage = DIVidE(count(id where YEAR(creationdate) = 2011 and reputation > 1000), count(id) ) * 100 FROM posts INNER JOIN users ON posts.owneruserid = users.id;"
        ]
      ]
    },
    {
      "id": 684,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 and 18) / (SELECT count(id) FROM users) AS percentage;",
          "SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 and 18) / (SELECT count(id) FROM users) * 100 AS percentage;",
          "SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 AND 18) / (SELECT count(id) FROM users) AS percentage;",
          "SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 and 18) / (SELECT count(id) FROM users) as percentage;"
        ]
      ]
    },
    {
      "id": 685,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT SUM(posts.viewcount) FROM posts WHERE posts.text = 'Computer Game Datasets';",
          "SELECT sum(posts.viewcount) FROM posts WHERE posts.text = 'Computer Game Datasets';",
          "SELECT SUM(posts.viewcount), users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.text = 'Computer Game Datasets' GROUP BY users.displayname;",
          "SELECT SUM(posts.viewcount), users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.text = 'Computer Game Datasets' GROUP BY users.displayname ORDER BY SUM(posts.viewcount) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 686,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT AVG(posts.viewcount) FROM posts);",
          "SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT avg(posts.viewcount) FROM posts);",
          "SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT AVG(viewcount) FROM posts);",
          "SELECT sum(posts.viewcount) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.viewcount > (SELECT AVG(posts.viewcount) FROM posts);"
        ]
      ]
    },
    {
      "id": 687,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM comments WHERE score = (SELECT MAX(score) FROM comments);",
          "SELECT count(*) FROM comments WHERE postid = (SELECT id FROM posts ORDER BY score DESC LIMIT 1);",
          "SELECT count(*) FROM comments WHERE postid = (SELECT postid FROM posts ORDER BY score DESC LIMIT 1);",
          "SELECT count(id) FROM comments WHERE score = (SELECT MAX(score) FROM posts);"
        ]
      ]
    },
    {
      "id": 688,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM posts WHERE posts.viewcount > 35000 AND posts.commentcount = 0;",
          "SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0;",
          "SELECT count(DISTINCT posts.id) FROM posts WHERE posts.viewcount > 35000 AND posts.commentcount = 0;",
          "SELECT count(posts.id) FROM posts LEFT JOIN comments ON posts.id = comments.postid WHERE posts.viewcount > 35000 AND comments.postid IS NULL;"
        ]
      ]
    },
    {
      "id": 689,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.location FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.id = 183;",
          "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183;",
          "SELECT users.displayname, users.location FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.id = 183 ORDER BY posthistory.lasteditdate DESC LIMIT 1;",
          "SELECT users.displayname, users.location FROM users INNER JOIN posthistory ON users.id = posthistory.userid INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.id = 183 ORDER BY posthistory.lasteditdate DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 690,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' ) ORDER BY date DESC LIMIT 1;",
          "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' );",
          "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' ) AND MAX(date);",
          "SELECT name FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'Emmett') ORDER BY date DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 691,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000;",
          "SELECT COUNT(*) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000;",
          "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.age BETWEEN 19 AND 65 AND votes.upvotes > 5000;",
          "SELECT count(users.id) FROM users WHERE users.age BETWEEN 19 AND 65 AND users.upvotes > 5000;"
        ]
      ]
    },
    {
      "id": 692,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT SUBTRACT(date from stats_badges, creationdate) FROM users WHERE users.displayname = 'Zolomon';",
          "SELECT SUBTRACT(date from stats_badges, creationdate) FROM users WHERE displayname = 'Zolomon';",
          "SELECT SUBTRACT(date from stats_badges, creationdate) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Zolomon';",
          "SELECT SUBTRACT(date from stats_badges, creationdate) FROM badges INNER JOIN users ON badges.userid = users.id WHERE displayname = 'Zolomon';"
        ]
      ]
    },
    {
      "id": 693,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT COUNT(posts.id) AS post_count, COUNT(comments.id) AS comment_count FROM users JOIN posts ON users.id = posts.owneruserid JOIN comments ON posts.id = comments.postid GROUP BY users.id ORDER BY users.creationdate DESC LIMIT 1;",
          "SELECT COUNT(posts.id), COUNT(comments.id) FROM posts FULL OUTER JOIN comments ON posts.id = comments.postid FULL OUTER JOIN users ON posts.owneruserid = users.id WHERE users.creationdate = (SELECT MAX(users.creationdate) FROM users);",
          "SELECT COUNT(posts.id), COUNT(comments.id) FROM posts FULL OUTER JOIN comments ON posts.id = comments.postid FULL OUTER JOIN users ON posts.owneruserid = users.id WHERE users.creationdate = (SELECT MAX(creationdate) FROM users);",
          "SELECT COUNT(posts.id) AS post_count, COUNT(comments.id) AS comment_count FROM users JOIN posts ON users.id = posts.owneruserid JOIN comments ON posts.id = comments.postid WHERE users.creationdate = (SELECT MAX(creationdate) FROM users);"
        ]
      ]
    },
    {
      "id": 694,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10;",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10;",
          "SELECT comments.text, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON comments.userid = users.id WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10;",
          "SELECT comments.text, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON comments.userid = users.id WHERE posts.title = \"Analysing wind data with R\" ORDER BY comments.creationdate DESC LIMIT 10;"
        ]
      ]
    },
    {
      "id": 695,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM badges WHERE name = 'Citizen Patrol';",
          "SELECT COUNT(*) FROM badges WHERE name = 'Citizen Patrol';",
          "SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Citizen Patrol';",
          "SELECT count(id) FROM badges WHERE name = 'Citizen Patrol';"
        ]
      ]
    },
    {
      "id": 696,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM tags WHERE tagname = 'careers';",
          "SELECT count(tags.tagname) FROM tags WHERE tags.tagname = 'careers';",
          "SELECT count(posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'careers';",
          "SELECT count(posts.id) FROM tags INNER JOIN posts ON tags.id = posts.tags WHERE tags.tagname = 'careers';"
        ]
      ]
    },
    {
      "id": 697,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation, users.views FROM users WHERE users.displayname = 'Jarrod Dixon';",
          "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon';",
          "SELECT users.reputation , users.views FROM users WHERE users.displayname = 'Jarrod Dixon';",
          "SELECT users.reputation, posts.viewcount FROM users JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jarrod Dixon';"
        ]
      ]
    },
    {
      "id": 698,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.commentcount, posts.answercount FROM posts WHERE posts.title = 'Clustering 1D data';",
          "SELECT sum(posts.answercount), sum(posts.commentcount) FROM posts WHERE posts.title = 'Clustering 1D data';",
          "SELECT count(comments.id), count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data';",
          "SELECT count(comments.id), count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid;"
        ]
      ]
    },
    {
      "id": 699,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.creationdate FROM users WHERE users.displayname = 'IrishStat';",
          "SELECT creationdate FROM users WHERE displayname = 'IrishStat';",
          "SELECT creationdate FROM users WHERE users.displayname = 'IrishStat';",
          "SELECT users.creationdate FROM users WHERE users.displayname='IrishStat';"
        ]
      ]
    },
    {
      "id": 700,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(votes.id) FROM votes WHERE votes.bountyamount >= 30;",
          "SELECT count(*) FROM votes WHERE bountyamount >= 30;",
          "SELECT count(votes.postid) FROM votes WHERE votes.bountyamount >= 30;",
          "SELECT count(votes.bountyamount) FROM votes WHERE votes.bountyamount >= 30;"
        ]
      ]
    },
    {
      "id": 701,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT COUNT(stats_posts.id) / (SELECT COUNT(stats_posts.id) FROM stats_posts WHERE stats_posts.reputation = (SELECT MAX(stats_posts.reputation) FROM stats_posts)) FROM stats_posts WHERE stats_posts.score > 50;",
          "SELECT COUNT(stats_posts.id) / (SELECT COUNT(stats_posts.id) FROM stats_posts WHERE stats_posts.reputation = (SELECT MAX(stats_posts.reputation) FROM stats_posts)) * 100 FROM stats_posts WHERE stats_posts.score > 50;",
          "SELECT COUNT(stats_posts.id) / (SELECT COUNT(stats_posts.id) FROM stats_posts WHERE stats_posts.reputation = (SELECT MAX(stats_posts.reputation) FROM stats_posts)) FROM stats_posts WHERE stats_posts.score > 50 GROUP BY stats_posts.reputation;",
          "SELECT COUNT(stats_posts.id) / (SELECT COUNT(stats_posts.id) FROM stats_posts WHERE stats_posts.score > 50 AND stats_posts.reputation = (SELECT MAX(stats_posts.reputation) FROM stats_posts)) FROM stats_posts WHERE stats_posts.reputation = (SELECT MAX(stats_posts.reputation) FROM stats_posts);"
        ]
      ]
    },
    {
      "id": 702,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM posts WHERE score < 20;",
          "SELECT count(*) FROM posts WHERE posts.score < 20;",
          "SELECT count(DISTINCT posts.id) FROM posts WHERE posts.score < 20;",
          "SELECT count(DISTINCT posts.id) FROM posts posts WHERE posts.score < 20;"
        ]
      ]
    },
    {
      "id": 703,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM tags WHERE tags.id < 15 AND tags.count <= 20;",
          "SELECT count(*) FROM tags WHERE id < 15 AND count <= 20;",
          "SELECT count(tags.id) FROM tags WHERE tags.id < 15 AND tags.count <= 20;",
          "SELECT count(DISTINCT tags.id) FROM tags WHERE tags.id < 15 AND tags.count <= 20;"
        ]
      ]
    },
    {
      "id": 704,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT tags.excerptpostid , tags.wikipostid FROM tags WHERE tags.tagname = 'sample';",
          "SELECT tags.excerptpostid, tags.wikipostid FROM tags WHERE tags.tagname = 'sample';",
          "SELECT tags.excerptpostid , tags.wikipostid FROM tags WHERE tagname = 'sample';",
          "SELECT tags.excerptpostid, tags.wikipostid FROM tags WHERE tagname = 'sample';"
        ]
      ]
    },
    {
      "id": 705,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)';",
          "SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'fine, you win :)';",
          "SELECT users.reputation, users.upvotes FROM comments JOIN users ON comments.userid = users.id WHERE comments.text = 'fine, you win :)';",
          "SELECT users.reputation, users.upvotes FROM users JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)';"
        ]
      ]
    },
    {
      "id": 706,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.comment = 'regression' AND posts.title LIKE '%linear regression%';",
          "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.comment LIKE '%regression%' AND posts.title LIKE '%linear regression%';",
          "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title LIKE '%linear regression%' AND posthistory.comment LIKE '%regression%';",
          "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.text LIKE '%linear regression%' AND posthistory.comment LIKE '%regression%';"
        ]
      ]
    },
    {
      "id": 707,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 and 150) ORDER BY score DESC LIMIT 1;",
          "SELECT MAX(score) FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 and 150);",
          "SELECT MAX(score) FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150);",
          "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150) ORDER BY score DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 708,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';",
          "SELECT users.creationdate, users.age FROM users WHERE users.websiteurl LIKE '%http://%';",
          "SELECT users.creationdate , users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';",
          "SELECT creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';"
        ]
      ]
    },
    {
      "id": 709,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT postid) FROM comments WHERE score = 0 AND viewcount < 5;",
          "SELECT count(*) FROM comments WHERE score = 0 AND viewcount < 5;",
          "SELECT count(DISTINCT posts.id) FROM comments comments JOIN posts posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;",
          "SELECT count(DISTINCT posts.id) FROM posts posts JOIN comments comments ON posts.id = comments.postid WHERE comments.score = 0 AND posts.viewcount < 5;"
        ]
      ]
    },
    {
      "id": 710,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT comments.id) FROM posts posts JOIN comments comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0;",
          "SELECT count(DISTINCT comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0;",
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0;",
          "SELECT count(DISTINCT comments.id) FROM comments JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0;"
        ]
      ]
    },
    {
      "id": 711,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT SUM(users.age) FROM users JOIN comments ON users.id = comments.userid WHERE comments.score = 0;",
          "SELECT sum(users.age) FROM users JOIN comments ON users.id = comments.userid WHERE comments.score = 0;",
          "SELECT COUNT(DISTINCT users.id) FROM users JOIN comments ON users.id = comments.userid WHERE comments.score = 0 AND users.age = 40;",
          "SELECT count(DISTINCT users.id) FROM users JOIN comments ON users.id = comments.userid WHERE comments.score = 0 AND users.age = 40;"
        ]
      ]
    },
    {
      "id": 712,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.id, comments.text FROM posts JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item';",
          "SELECT posts.id, comments.id FROM posts JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item';",
          "SELECT posts.id, comments.text FROM posts JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item' AND comments.text LIKE '%title%';",
          "SELECT posts.id, comments.text FROM posts JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item' ORDER BY comments.id;"
        ]
      ]
    },
    {
      "id": 713,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.upvotes FROM users JOIN comments ON users.id = comments.userid WHERE comments.text = 'R is also lazy evaluated.';",
          "SELECT users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'R is also lazy evaluated.';",
          "SELECT users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'R is also lazy evaluated.';",
          "SELECT users.upvotes FROM users JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'R is also lazy evaluated.';"
        ]
      ]
    },
    {
      "id": 714,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE userid IN (SELECT id FROM users WHERE displayname = 'Harvey Motulsky');",
          "SELECT text FROM comments WHERE displayname = 'Harvey Motulsky';",
          "SELECT text FROM comments WHERE userid = (SELECT id FROM users WHERE displayname = 'Harvey Motulsky');",
          "SELECT comments.text FROM comments WHERE comments.userid IN (SELECT users.id FROM users WHERE users.displayname = 'Harvey Motulsky');"
        ]
      ]
    },
    {
      "id": 715,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT DISTINCT users.displayname FROM comments JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0;",
          "SELECT DISTINCT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0;",
          "SELECT DISTINCT users.displayname FROM users JOIN comments ON users.id = comments.userid WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0;",
          "SELECT comments.userdisplayname FROM comments WHERE comments.score BETWEEN 1 AND 5 AND comments.downvotes = 0;"
        ]
      ]
    },
    {
      "id": 716,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast((sum(CASE WHEN comments.score BETWEEN 5 AND 10 AND users.upvotes = 0 THEN 1 ELSE 0 END)) AS REAL) * 100 / count(userid) FROM comments INNER JOIN users ON comments.userid = users.id;",
          "SELECT cast((sum(CASE WHEN comments.score BETWEEN 5 AND 10 AND users.upvotes = 0 THEN 1 ELSE 0 END)) AS REAL) * 100 / count(comments.userid) FROM comments INNER JOIN users ON comments.userid = users.id;",
          "SELECT cast((sum(CASE WHEN comments.score BETWEEN 5 AND 10 THEN comments.userid ELSE 0 END) - sum(CASE WHEN comments.score BETWEEN 5 AND 10 AND users.upvotes = 0 THEN comments.userid ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN comments.score BETWEEN 5 AND 10 THEN comments.userid ELSE 0 END) FROM comments INNER JOIN users ON comments.userid = users.id;",
          "SELECT cast((sum(CASE WHEN comments.score BETWEEN 5 AND 10 THEN comments.userid ELSE 0 END) - sum(CASE WHEN comments.score BETWEEN 5 AND 10 THEN users.upvotes ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN comments.score BETWEEN 5 AND 10 THEN users.upvotes ELSE 0 END) FROM comments INNER JOIN users ON comments.userid = users.id;"
        ]
      ]
    },
    {
      "id": 717,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man';",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = '3-D Man';"
        ]
      ]
    },
    {
      "id": 718,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
          "SELECT count(*) FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength'));"
        ]
      ]
    },
    {
      "id": 719,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND sh.height_cm > 200;",
          "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;",
          "SELECT count(superhero.superhero_name) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;",
          "SELECT count(superhero.id) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;"
        ]
      ]
    },
    {
      "id": 720,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero GROUP BY full_name HAVING COUNT(full_name) > 15;",
          "SELECT full_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15 );",
          "SELECT full_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) > 15 );",
          "SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15);"
        ]
      ]
    },
    {
      "id": 721,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';",
          "SELECT count(superhero.id) FROM superhero, colour WHERE superhero.eye_colour_id = colour.id AND colour.colour = 'Blue';",
          "SELECT count(superhero.id) FROM superhero WHERE superhero.eye_colour_id = colour.id AND colour.colour = 'Blue';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Blue';"
        ]
      ]
    },
    {
      "id": 722,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour FROM colour WHERE id IN (SELECT skin_colour_id FROM superhero WHERE superhero_name = 'Apocalypse');",
          "SELECT colour FROM colour WHERE id = (SELECT skin_colour_id FROM superhero WHERE superhero_name = 'Apocalypse');",
          "SELECT colour.colour FROM superhero superhero INNER JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';",
          "SELECT colour FROM colour WHERE id IN (SELECT superhero.skin_colour_id FROM superhero WHERE superhero.superhero_name = 'Apocalypse');"
        ]
      ]
    },
    {
      "id": 723,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
          "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
          "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';"
        ]
      ]
    },
    {
      "id": 724,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON hero_attribute.attribute_id = colour.id WHERE colour.colour = 'Blue' AND superhero.eye_colour_id = colour.id AND colour.colour = 'Blond' AND superhero.hair_colour_id = colour.id;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.eye_colour_id = colour.id AND colour.colour = 'Blond' AND superhero.hair_colour_id = colour.id;"
        ]
      ]
    },
    {
      "id": 725,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT COUNT(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY superhero.id;"
        ]
      ]
    },
    {
      "id": 726,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC;",
          "SELECT superhero_name, height_cm FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;",
          "SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;"
        ]
      ]
    },
    {
      "id": 727,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';",
          "SELECT publisher_name FROM superhero WHERE superhero_name = 'Sauron';",
          "SELECT publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Sauron';"
        ]
      ]
    },
    {
      "id": 728,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT skin_colour_id FROM superhero GROUP BY skin_colour_id ORDER BY count(skin_colour_id) DESC;",
          "SELECT skin_colour_id FROM superhero GROUP BY skin_colour_id ORDER BY count(id) DESC;",
          "SELECT skin_colour_id FROM superhero GROUP BY skin_colour_id ORDER BY COUNT(superhero.id) DESC;",
          "SELECT skin_colour_id FROM superhero GROUP BY skin_colour_id ORDER BY count(*) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 729,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT avg(superhero.height_cm) FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT avg(superhero.height_cm) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT AVG(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';"
        ]
      ]
    },
    {
      "id": 730,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength';",
          "SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength'));",
          "SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND superpower_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength');",
          "SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength';"
        ]
      ]
    },
    {
      "id": 731,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics';",
          "SELECT count(DISTINCT superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics';",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics';",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';"
        ]
      ]
    },
    {
      "id": 732,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;",
          "SELECT publisher.publisher_name FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;",
          "SELECT publisher.publisher_name FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY MIN(hero_attribute.attribute_value) LIMIT 1;",
          "SELECT publisher.publisher_name FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' GROUP BY publisher.publisher_name ORDER BY MIN(hero_attribute.attribute_value) LIMIT 1;"
        ]
      ]
    },
    {
      "id": 733,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');",
          "SELECT count(id) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Gold';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';"
        ]
      ]
    },
    {
      "id": 734,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero superhero INNER JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Blue Beetle II';",
          "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Blue Beetle II');",
          "SELECT publisher.publisher_name FROM publisher publisher INNER JOIN superhero superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Blue Beetle II';"
        ]
      ]
    },
    {
      "id": 735,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN colour colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';",
          "SELECT count(superhero.id) FROM superhero superhero JOIN colour colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';",
          "SELECT count(DISTINCT superhero.id) FROM colour colour JOIN superhero superhero ON colour.id = superhero.hair_colour_id WHERE colour.colour = 'Blond';",
          "SELECT count(DISTINCT superhero.superhero_name) FROM superhero superhero JOIN colour colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';"
        ]
      ]
    },
    {
      "id": 736,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value LIMIT 1;",
          "SELECT superhero.superhero_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;",
          "SELECT superhero_name FROM superhero WHERE id = ( SELECT MIN(hero_attribute.attribute_value) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' );"
        ]
      ]
    },
    {
      "id": 737,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race FROM superhero WHERE superhero_name = 'Copycat';",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.superhero_name = 'Copycat';",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero_name = 'Copycat';"
        ]
      ]
    },
    {
      "id": 738,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;",
          "SELECT superhero.superhero_name FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;",
          "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;"
        ]
      ]
    },
    {
      "id": 739,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';",
          "SELECT superhero.superhero_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Death Touch';",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';",
          "SELECT superhero.superhero_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN attribute ON superhero.id = attribute.id WHERE superpower.power_name = 'Death Touch' AND attribute.attribute_name = 'Power';"
        ]
      ]
    },
    {
      "id": 740,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;",
          "SELECT count(*) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100 AND gender.gender = 'Female';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superpower ON superhero.id = superpower.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;"
        ]
      ]
    },
    {
      "id": 741,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.superhero_name ORDER BY count(superhero.superhero_name) DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.superhero_name ORDER BY count(superpower.id) DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.superhero_name ORDER BY count(superhero_name) DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.superhero_name ORDER BY count(superpower.power_name) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 742,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';",
          "SELECT count(*) FROM superhero WHERE race = 'Vampire';",
          "SELECT count(CASE WHEN race.race = 'Vampire' THEN superhero.id ELSE NULL END) FROM race INNER JOIN superhero ON race.id = superhero.race_id;",
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race = 'Vampire';"
        ]
      ]
    },
    {
      "id": 743,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT (SUM(CASE WHEN alignment.alignment = 'Bad' THEN superhero.id END) * 100.0 / count(superhero.id)) AS calculation FROM superhero superhero JOIN alignment alignment ON superhero.alignment_id = alignment.id JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT (SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) * 100.0 / count(superhero.id)) AS calculation FROM superhero superhero JOIN alignment alignment ON superhero.alignment_id = alignment.id JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT (SUM(CASE WHEN superhero.alignment = 'Bad' THEN 1 ELSE 0 END) * 100.0 / count(superhero.id)) AS calculation FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT (SUM(CASE WHEN alignment.alignment = 'Bad' THEN superhero.id END) * 100.0 / count(superhero.id)) AS calculation FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id JOIN alignment alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics';"
        ]
      ]
    },
    {
      "id": 744,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics') FROM publisher;",
          "SELECT SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics') FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id;",
          "SELECT SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics') FROM publisher publisher;",
          "SELECT SUM(publisher.publisher_name = 'Marvel Comics') - SUM(publisher.publisher_name = 'DC Comics') FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id;"
        ]
      ]
    },
    {
      "id": 745,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';",
          "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';",
          "SELECT id FROM publisher WHERE publisher.publisher_name = 'Star Trek';",
          "SELECT publisher.id FROM publisher WHERE publisher_name = 'Star Trek';"
        ]
      ]
    },
    {
      "id": 746,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT AVG(attribute_value) FROM hero_attribute;",
          "SELECT avg(attribute_value) FROM hero_attribute;",
          "SELECT AVG(hero_attribute.attribute_value) FROM hero_attribute;",
          "SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;"
        ]
      ]
    },
    {
      "id": 747,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;",
          "SELECT count(*) FROM superhero WHERE full_name IS NULL;",
          "SELECT COUNT(superhero.id) FROM superhero WHERE superhero.full_name IS NULL;",
          "SELECT COUNT(superhero.full_name) FROM superhero WHERE superhero.full_name IS NULL;"
        ]
      ]
    },
    {
      "id": 748,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM colour WHERE colour.id IN (SELECT superhero.eye_colour_id FROM superhero WHERE superhero.id = 75);",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.id = 75;",
          "SELECT colour.colour FROM colour INNER JOIN superhero superhero ON colour.id = superhero.eye_colour_id WHERE superhero.id = 75;",
          "SELECT colour FROM colour WHERE id IN (SELECT superhero.eye_colour_id FROM superhero WHERE superhero.id = 75);"
        ]
      ]
    },
    {
      "id": 749,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Deathlok';",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON hero_power.power_id = superpower.id INNER JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Deathlok';",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok';",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Deathlok';"
        ]
      ]
    },
    {
      "id": 750,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(weight_kg) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female');",
          "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';",
          "SELECT AVG(weight_kg) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female');",
          "SELECT AVG(superhero.weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';"
        ]
      ]
    },
    {
      "id": 751,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male';",
          "SELECT superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = ( SELECT id FROM gender WHERE gender = 'Male' );",
          "SELECT superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id JOIN gender gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male';",
          "SELECT DISTINCT superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = ( SELECT id FROM gender WHERE gender = 'Male' );"
        ]
      ]
    },
    {
      "id": 752,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE race = 'Alien';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';",
          "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');",
          "SELECT superhero.superhero_name FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Alien';"
        ]
      ]
    },
    {
      "id": 753,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'No colour' AND superhero.height_cm BETWEEN 170 AND 190;",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'No colour' AND superhero.height_cm BETWEEN 170 AND 190;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.colour = 'No colour';",
          "SELECT superhero.superhero_name FROM superhero WHERE superhero.height_cm BETWEEN 170 AND 190 AND superhero.eye_colour_id = (SELECT id FROM colour WHERE colour = 'No colour');"
        ]
      ]
    },
    {
      "id": 754,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56;",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56;",
          "SELECT superpower.power_name FROM superpower WHERE superpower.id IN (SELECT hero_power.power_id FROM hero_power WHERE hero_power.hero_id = 56);",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56;"
        ]
      ]
    },
    {
      "id": 755,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God';",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God';",
          "SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5;",
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;"
        ]
      ]
    },
    {
      "id": 756,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad';",
          "SELECT count(*) FROM superhero WHERE alignment_id = 'Bad';",
          "SELECT count(*) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad';",
          "SELECT count(*) FROM superhero WHERE alignment_id = Bad;"
        ]
      ]
    },
    {
      "id": 757,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;",
          "SELECT race.race FROM superhero superhero JOIN race race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;",
          "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;",
          "SELECT race.race FROM superhero superhero INNER JOIN race race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;"
        ]
      ]
    },
    {
      "id": 758,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.hair_colour_id WHERE superhero.height_cm = 185 AND superhero.race = 'human';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.hair_colour_id WHERE superhero.height_cm = 185 AND superhero.race = 'Human';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.hair_colour_id INNER JOIN race ON superhero.race_id = race.id WHERE superhero.height_cm = 185 AND race.race = 'human';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.hair_colour_id INNER JOIN race ON superhero.race_id = race.id WHERE superhero.height_cm = 185 AND race.race = 'Human';"
        ]
      ]
    },
    {
      "id": 759,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1;",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1;",
          "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1;",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id ORDER BY superhero.weight_kg DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 760,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180;",
          "SELECT cast(sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.height_cm BETWEEN 150 AND 180;",
          "SELECT SUM(publisher.id = 13) * 100 / COUNT(publisher.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180;",
          "SELECT SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180;"
        ]
      ]
    },
    {
      "id": 761,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT avg(weight_kg) * 0.79 FROM superhero) AND superhero.weight_kg IS NOT NULL;",
          "SELECT DISTINCT superhero.superhero_name FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT avg(weight_kg) * 0.79 FROM superhero) AND superhero.weight_kg IS NOT NULL;",
          "SELECT superhero.superhero_name FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT avg(weight_kg) * 0.79 FROM superhero);",
          "SELECT DISTINCT superhero.superhero_name FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT avg(weight_kg) * 0.79 FROM superhero);"
        ]
      ]
    },
    {
      "id": 762,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1;",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1;",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY superpower.power_name ORDER BY count(hero_power.power_id) DESC LIMIT 1;",
          "SELECT power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY power_name ORDER BY count(power_name) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 763,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id AND superhero.superhero_name = 'Abomination';"
        ]
      ]
    },
    {
      "id": 764,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM hero_power hero_power JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1;",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1;",
          "SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1;",
          "SELECT superpower.power_name FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_id = 1;"
        ]
      ]
    },
    {
      "id": 765,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT hero_power.hero_id) FROM hero_power hero_power JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';",
          "SELECT count(DISTINCT hero_power.hero_id) FROM superpower superpower JOIN hero_power hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'stealth';",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';",
          "SELECT count(DISTINCT superhero.id) FROM superpower superpower JOIN hero_power hero_power ON superpower.id = hero_power.power_id JOIN superhero superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'stealth';"
        ]
      ]
    },
    {
      "id": 766,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' GROUP BY superhero.full_name ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'strength' GROUP BY superhero.full_name ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;",
          "SELECT superhero.full_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' GROUP BY superhero.full_name ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 767,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT AVG(COUNT(superhero.id)) FROM superhero WHERE skin_colour_id = 1;",
          "SELECT AVG(COUNT(superhero.id)) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.id = 1;",
          "SELECT AVG(COUNT(superhero.id)) FROM superhero AS t WHERE t.skin_colour_id = 1;",
          "SELECT AVG(COUNT(superhero.id)) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE skin_colour_id = 1;"
        ]
      ]
    },
    {
      "id": 768,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.publisher_id WHERE publisher.publisher_name = 'Dark Horse Comics';"
        ]
      ]
    },
    {
      "id": 769,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.id ORDER BY hero_attribute.attribute_value DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY hero_attribute.attribute_value DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 770,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Abraham Sapien';",
          "SELECT colour.colour FROM colour WHERE colour.id IN (SELECT superhero.eye_colour_id FROM superhero WHERE superhero.full_name = 'Abraham Sapien');",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';",
          "SELECT colour.colour FROM colour INNER JOIN superhero superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Abraham Sapien';"
        ]
      ]
    },
    {
      "id": 771,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Flight';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';",
          "SELECT superhero.superhero_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Flight';",
          "SELECT superhero.superhero_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';"
        ]
      ]
    },
    {
      "id": 772,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';",
          "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female';",
          "SELECT superhero.eye_colour_id , superhero.hair_colour_id , superhero.skin_colour_id FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';",
          "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';"
        ]
      ]
    },
    {
      "id": 773,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name , publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id;",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id;",
          "SELECT superhero.superhero_name , publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.eye_colour_id = superhero.hair_colour_id;",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.eye_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.skin_colour_id;"
        ]
      ]
    },
    {
      "id": 774,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';",
          "SELECT race FROM superhero WHERE superhero_name = 'A-Bomb';",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.superhero_name = 'A-Bomb';",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero_name = 'A-Bomb';"
        ]
      ]
    },
    {
      "id": 775,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female') FROM superhero WHERE skin_colour_id = colour.id AND gender_id = gender.id AND eye_colour_id = colour.id;",
          "SELECT SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female') FROM superhero WHERE skin_colour_id = colour.id AND gender_id = gender.id;",
          "SELECT SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female') FROM superhero, colour WHERE superhero.skin_colour_id = colour.id AND gender = 'Female';",
          "SELECT SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female') FROM superhero, colour WHERE superhero.skin_colour_id = colour.id AND superhero.gender_id = gender.id AND gender.gender = 'Female';"
        ]
      ]
    },
    {
      "id": 776,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';",
          "SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';",
          "SELECT superhero_name, race FROM superhero WHERE full_name = 'Charles Chandler';",
          "SELECT superhero.superhero_name, superhero.race FROM superhero WHERE superhero.full_name = 'Charles Chandler';"
        ]
      ]
    },
    {
      "id": 777,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT gender.gender FROM superhero superhero INNER JOIN gender gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';",
          "SELECT gender FROM gender WHERE id IN (SELECT superhero.gender_id FROM superhero WHERE superhero.superhero_name = 'Agent 13');",
          "SELECT gender FROM gender WHERE id IN (SELECT superhero.gender_id FROM superhero WHERE superhero_name = 'Agent 13');",
          "SELECT gender.gender FROM gender INNER JOIN superhero superhero ON gender.id = superhero.gender_id WHERE superhero.superhero_name = 'Agent 13';"
        ]
      ]
    },
    {
      "id": 778,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';",
          "SELECT superhero.superhero_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Adaptation';",
          "SELECT superhero.superhero_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';",
          "SELECT superhero.superhero_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Adaptation';"
        ]
      ]
    },
    {
      "id": 779,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo';",
          "SELECT count(superpower.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Amazo';",
          "SELECT count(DISTINCT hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo';",
          "SELECT count(DISTINCT hero_power.power_id) FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Amazo';"
        ]
      ]
    },
    {
      "id": 780,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon';",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = 'Hunter Zolomon';",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = 'Hunter Zolomon';",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon';"
        ]
      ]
    },
    {
      "id": 781,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';",
          "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Amber';",
          "SELECT superhero.height_cm FROM superhero, colour WHERE superhero.eye_colour_id = colour.id AND colour.colour = 'Amber';",
          "SELECT DISTINCT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';"
        ]
      ]
    },
    {
      "id": 782,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE eye_colour_id = hair_colour_id AND colour.colour = 'Black';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black';",
          "SELECT superhero_name FROM superhero WHERE eye_colour_id = hair_colour_id AND eye_colour_id = colour.id AND colour.colour = 'Black';"
        ]
      ]
    },
    {
      "id": 783,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.eye_colour_id FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Gold';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Gold' AND superhero.skin_colour_id = colour.id;",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Gold' AND superhero.skin_colour_id = colour.id;"
        ]
      ]
    },
    {
      "id": 784,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';",
          "SELECT full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';",
          "SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');",
          "SELECT full_name FROM superhero WHERE race = 'Vampire';"
        ]
      ]
    },
    {
      "id": 785,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON alignment.id = superhero.alignment_id WHERE alignment.alignment = 'Neutral';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.alignment = 'Neutral';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';"
        ]
      ]
    },
    {
      "id": 786,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(hero_id) FROM hero_attribute WHERE attribute_name = 'Strength' AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength');",
          "SELECT count(*) FROM hero_attribute WHERE attribute_name = 'Strength' AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength');",
          "SELECT count(hero_id) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'));",
          "SELECT count(*) FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'Strength')));"
        ]
      ]
    },
    {
      "id": 787,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';",
          "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = '<NAME>';",
          "SELECT superhero.race_id, superhero.alignment_id FROM superhero WHERE superhero.superhero_name = 'Cameron Hicks';",
          "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero_name = 'Cameron Hicks';"
        ]
      ]
    },
    {
      "id": 788,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) / COUNT(*) * 100 FROM superhero WHERE publisher_name = 'Marvel Comics';",
          "SELECT SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics') FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) / COUNT(publisher_name = 'Marvel Comics') * 100 FROM superhero WHERE publisher_name = 'Marvel Comics';",
          "SELECT SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics') FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics';"
        ]
      ]
    },
    {
      "id": 789,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');",
          "SELECT AVG(weight_kg) FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien');",
          "SELECT AVG(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';",
          "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';"
        ]
      ]
    },
    {
      "id": 790,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - sum(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS difference FROM superhero;",
          "SELECT sum(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - sum(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS difference FROM superhero WHERE full_name IN ('Emil Blonsky', 'Charles Chandler');",
          "SELECT sum(CASE WHEN superhero.full_name = 'Emil Blonsky' THEN superhero.weight_kg ELSE 0 END) - sum(CASE WHEN superhero.full_name = 'Charles Chandler' THEN superhero.weight_kg ELSE 0 END) AS difference FROM superhero WHERE superhero.full_name IN ('Emil Blonsky', 'Charles Chandler');",
          "SELECT sum(CASE WHEN superhero.full_name = 'Emil Blonsky' THEN superhero.weight_kg ELSE 0 END) - sum(CASE WHEN superhero.full_name = 'Charles Chandler' THEN superhero.weight_kg ELSE 0 END) AS difference FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male';"
        ]
      ]
    },
    {
      "id": 791,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) AS average FROM superhero;",
          "SELECT avg(superhero.height_cm) FROM superhero;",
          "SELECT AVG(superhero.height_cm) AS average FROM superhero;",
          "SELECT cast(sum(superhero.height_cm) AS REAL) / count(*) AS average FROM superhero;"
        ]
      ]
    },
    {
      "id": 792,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Abomination';"
        ]
      ]
    },
    {
      "id": 793,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;",
          "SELECT count(superhero.id) FROM superhero WHERE race_id = 21 AND gender_id = 1;",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.race_id = 21 AND gender.gender = 'Male';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.race_id = 21;"
        ]
      ]
    },
    {
      "id": 794,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE id = (SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY attribute_value DESC LIMIT 1);",
          "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' GROUP BY superhero.superhero_name ORDER BY MAX(hero_attribute.attribute_value) LIMIT 1;"
        ]
      ]
    },
    {
      "id": 795,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero WHERE alignment_id = 3;",
          "SELECT count(superhero.id) FROM superhero WHERE superhero.alignment_id = 3;",
          "SELECT count(id) FROM superhero WHERE alignment_id = 3;",
          "SELECT count(superhero.id) FROM superhero superhero WHERE superhero.alignment_id = 3;"
        ]
      ]
    },
    {
      "id": 796,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name , attribute.attribute_name , hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';",
          "SELECT superhero.superhero_name, attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';",
          "SELECT superhero.superhero_name , attribute.attribute_name , hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';",
          "SELECT superhero.superhero_name , hero_attribute.attribute_name , hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';"
        ]
      ]
    },
    {
      "id": 797,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Brown';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.hair_colour_id = 2;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Brown';",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.hair_colour_id = colour.id AND colour.colour = 'Brown';"
        ]
      ]
    },
    {
      "id": 798,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Hawkman' OR superhero_name = 'Karate Kid' OR superhero_name = 'Speedy');",
          "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy'));",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Hawkman' OR superhero.superhero_name = 'Karate Kid' OR superhero.superhero_name = 'Speedy';",
          "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Hawkman') UNION SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Karate Kid') UNION SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Speedy');"
        ]
      ]
    },
    {
      "id": 799,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero WHERE publisher_id = 1;",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero WHERE superhero.publisher_id = 1;",
          "SELECT count(superhero.id) FROM superhero superhero WHERE superhero.publisher_id = 1;",
          "SELECT count(*) FROM superhero superhero WHERE NOT EXISTS (SELECT publisher.id FROM publisher publisher WHERE superhero.publisher_id = publisher.id);"
        ]
      ]
    },
    {
      "id": 800,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' AND colour.id = superhero.eye_colour_id THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) AS percentage FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id;",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN superhero.superhero_name ELSE 0 END) AS REAL) * 100 / count(superhero.superhero_name) AS percentage FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE colour.id = 7;",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' AND colour.id = superhero.eye_colour_id THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero_name) AS percentage FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id;",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' AND colour.id = superhero.eye_colour_id THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) AS percentage FROM colour colour JOIN superhero superhero ON colour.id = superhero.eye_colour_id;"
        ]
      ]
    },
    {
      "id": 801,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id;",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id;",
          "SELECT cast(sum(CASE WHEN superhero.gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;"
        ]
      ]
    },
    {
      "id": 802,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;",
          "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);",
          "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT max(height_cm) FROM superhero);",
          "SELECT superhero.superhero_name FROM superhero ORDER BY superhero.height_cm DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 803,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.id FROM superpower WHERE superpower.power_name = 'cryokinesis';",
          "SELECT superpower.id FROM superpower WHERE superpower.power_name = 'Cryokinesis';",
          "SELECT superpower.id FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'cryokinesis';",
          "SELECT superpower.id FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'cryokinesis';"
        ]
      ]
    },
    {
      "id": 804,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero WHERE superhero.id = 294;",
          "SELECT superhero_name FROM superhero WHERE id = 294;",
          "SELECT t.superhero_name FROM superhero AS t WHERE t.id = 294;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.id = 294;"
        ]
      ]
    },
    {
      "id": 805,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;",
          "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg = NULL;",
          "SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0;",
          "SELECT full_name FROM superhero WHERE ( weight_kg = 0 OR weight_kg IS NULL );"
        ]
      ]
    },
    {
      "id": 806,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Karen Beecher-Duncan';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 807,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = '<NAME>';",
          "SELECT power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = 'Helen Parr';",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE full_name = 'Helen Parr'));",
          "SELECT power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.full_name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 808,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;",
          "SELECT race.race FROM superhero superhero JOIN race race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;",
          "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;",
          "SELECT race.race FROM superhero superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;"
        ]
      ]
    },
    {
      "id": 809,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;",
          "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;",
          "SELECT publisher.publisher_name FROM superhero superhero JOIN publisher publisher ON publisher.id = superhero.publisher_id WHERE superhero.id = 38;"
        ]
      ]
    },
    {
      "id": 810,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race FROM race WHERE id = (SELECT MAX(attribute_value) FROM hero_attribute);",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence';",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Maximum Attribute Value';",
          "SELECT superhero.race FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence';"
        ]
      ]
    },
    {
      "id": 811,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';",
          "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Atom IV';",
          "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Atom IV';",
          "SELECT superhero.alignment_id, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';"
        ]
      ]
    },
    {
      "id": 812,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;",
          "SELECT full_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');"
        ]
      ]
    },
    {
      "id": 813,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(attribute_value) FROM hero_attribute WHERE alignment_id = 3;",
          "SELECT avg(attribute_value) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.alignment_id = 3;",
          "SELECT avg(attribute_value) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.alignment_id = 3;",
          "SELECT avg(hero_attribute.attribute_value) AS average FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.alignment_id = 3;"
        ]
      ]
    },
    {
      "id": 814,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.skin_colour_id WHERE hero_attribute.attribute_value = 100;",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE attribute.attribute_value = 100;"
        ]
      ]
    },
    {
      "id": 815,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero superhero INNER JOIN gender gender ON superhero.gender_id = gender.id INNER JOIN alignment alignment ON superhero.alignment_id = alignment.id WHERE gender.gender = 'Female' AND alignment.alignment = 'Good';",
          "SELECT count(superhero.id) FROM superhero WHERE superhero.alignment_id = 1 AND superhero.gender_id = 2;",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE gender.gender = 'Female' AND alignment.alignment = 'Good';",
          "SELECT count(superhero.id) FROM superhero superhero INNER JOIN gender gender ON superhero.gender_id = gender.id INNER JOIN alignment alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Good' AND gender.gender = 'Female';"
        ]
      ]
    },
    {
      "id": 816,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE attribute_value BETWEEN 75 AND 80;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;",
          "SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_value BETWEEN 75 AND 80);",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;"
        ]
      ]
    },
    {
      "id": 817,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'blue' AND gender.gender = 'male';",
          "SELECT race.race FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'blue' AND gender.gender = 'male';",
          "SELECT race.race FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'blue' AND gender.gender = 'male';",
          "SELECT race.race FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE gender.gender = 'male' AND colour.colour = 'blue';"
        ]
      ]
    },
    {
      "id": 818,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2) FROM gender, alignment WHERE gender.id = 2 AND alignment.id = 2;",
          "SELECT SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2) FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id INNER JOIN alignment ON superhero.alignment_id = alignment.id;",
          "SELECT SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2) FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad';",
          "SELECT SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2) FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2;"
        ]
      ]
    },
    {
      "id": 819,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT SUM(colour.id = 7) - SUM(colour.id = 1) FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;",
          "SELECT SUM(colour.id = 7) - SUM(colour.id = 1) AS difference FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;",
          "SELECT SUM(colour.id = 7) - SUM(colour.id = 1) AS difference FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg = NULL;",
          "SELECT SUM(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END) AS difference FROM superhero WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;"
        ]
      ]
    },
    {
      "id": 820,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.attribute_value FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';",
          "SELECT hero_attribute.attribute_value FROM superhero superhero INNER JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';",
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';",
          "SELECT hero_attribute.attribute_value FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Strength' AND superhero.superhero_name = 'Hulk';"
        ]
      ]
    },
    {
      "id": 821,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Ajax';",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Ajax';",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero_name = 'Ajax';"
        ]
      ]
    },
    {
      "id": 822,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero superhero JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green' AND superhero.alignment = 'Bad';",
          "SELECT count(superhero.id) FROM superhero superhero JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green' AND superhero.alignment = 'Bad';",
          "SELECT count(*) FROM superhero superhero JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green' AND alignment = 'Bad';",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green' AND superhero.alignment = 'Bad';"
        ]
      ]
    },
    {
      "id": 823,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id JOIN gender gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female';",
          "SELECT count(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND gender_id IN (SELECT id FROM gender WHERE gender = 'Female');",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female';",
          "SELECT count(superhero.id) FROM superhero superhero INNER JOIN publisher publisher ON superhero.publisher_id = publisher.id INNER JOIN gender gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female';"
        ]
      ]
    },
    {
      "id": 824,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name;",
          "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero_name;",
          "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC;"
        ]
      ]
    },
    {
      "id": 825,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';",
          "SELECT gender.gender FROM superhero superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_power hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';",
          "SELECT gender.gender FROM superhero superhero JOIN gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';",
          "SELECT gender.gender FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';"
        ]
      ]
    },
    {
      "id": 826,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;",
          "SELECT superhero.superhero_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;",
          "SELECT superhero_name FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 827,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';",
          "SELECT avg(superhero.height_cm) AS average FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';"
        ]
      ]
    },
    {
      "id": 828,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM hero_attribute WHERE attribute_value = 100 AND attribute_name = 'Speed';",
          "SELECT COUNT(*) FROM hero_attribute WHERE hero_attribute.attribute_value = 100 AND hero_attribute.attribute_name = 'Speed';",
          "SELECT COUNT(hero_attribute.attribute_value) FROM hero_attribute WHERE hero_attribute.attribute_value = 100 AND hero_attribute.attribute_name = 'Speed';",
          "SELECT COUNT(superhero.id) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;"
        ]
      ]
    },
    {
      "id": 829,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics') FROM publisher;",
          "SELECT SUM(publisher_name = 'DC Comics') - SUM(publisher_name = 'Marvel Comics') FROM publisher;",
          "SELECT SUM(publisher_name = 'DC Comics') - SUM(publisher_name = 'Marvel Comics') AS difference FROM publisher;",
          "SELECT SUM(publisher_name = 'DC Comics') - SUM(publisher_name = 'Marvel Comics') AS Difference FROM publisher;"
        ]
      ]
    },
    {
      "id": 830,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT attribute.attribute_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;",
          "SELECT attribute.attribute_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY attribute.attribute_name ASC LIMIT 1;",
          "SELECT attribute.attribute_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY attribute.attribute_value ASC LIMIT 1;",
          "SELECT attribute.attribute_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' AND hero_attribute.attribute_value = (SELECT min(attribute_value) FROM hero_attribute);"
        ]
      ]
    },
    {
      "id": 831,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';",
          "SELECT colour.colour FROM colour, superhero WHERE superhero.eye_colour_id = colour.id AND superhero.superhero_name = 'Abomination';"
        ]
      ]
    },
    {
      "id": 832,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT max(height_cm) FROM superhero);",
          "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);",
          "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;",
          "SELECT full_name FROM superhero WHERE height_cm = (SELECT max(height_cm) FROM superhero);"
        ]
      ]
    },
    {
      "id": 833,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero WHERE superhero.full_name = 'Charles Chandler';",
          "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';",
          "SELECT superhero.superhero_name FROM superhero;",
          "SELECT superhero.superhero_name FROM superhero WHERE superhero.full_name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 834,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT (count(CASE WHEN gender = 'Female' THEN 1 END) * 100.0 / count(*)) AS percentage FROM superhero WHERE publisher_name = 'George Lucas';",
          "SELECT (count(CASE WHEN gender.gender = 'Female' THEN 1 END) * 100.0 / count(*)) AS percentage FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas';",
          "SELECT (count(CASE WHEN gender = 'Female' THEN 1 END) * 100.0 / count(*)) AS percentage FROM superhero WHERE publisher_name = '<NAME>';",
          "SELECT (count(CASE WHEN gender.gender = 'Female' THEN 1 END) * 100.0 / count(*)) AS percentage FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'George Lucas';"
        ]
      ]
    },
    {
      "id": 835,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT (SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics') * 100.0 / COUNT(publisher_name = 'Marvel Comics')) AS percentage FROM superhero superhero INNER JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT (SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics') * 100.0 / COUNT(publisher_name = 'Marvel Comics')) AS percentage FROM superhero superhero LEFT JOIN publisher publisher ON superhero.publisher_id = publisher.id LEFT JOIN alignment alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT (SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics') / COUNT(publisher_name = 'Marvel Comics')) * 100.0 AS percentage FROM superhero superhero INNER JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
          "SELECT (SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics') * 100.0 / COUNT(publisher_name = 'Marvel Comics')) AS percentage_good FROM superhero superhero INNER JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';"
        ]
      ]
    },
    {
      "id": 836,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero WHERE full_name LIKE 'John%';",
          "SELECT count(superhero.id) FROM superhero WHERE superhero.full_name LIKE 'John%';",
          "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';",
          "SELECT count(superhero.full_name) FROM superhero WHERE superhero.full_name LIKE 'John%';"
        ]
      ]
    },
    {
      "id": 837,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.hero_id FROM hero_attribute ORDER BY hero_attribute.attribute_value ASC LIMIT 1;",
          "SELECT superhero.id FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id ORDER BY hero_attribute.attribute_value ASC LIMIT 1;",
          "SELECT hero_attribute.hero_id FROM hero_attribute WHERE hero_attribute.attribute_value = (SELECT min(attribute_value) FROM hero_attribute);",
          "SELECT hero_attribute.hero_id FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id ORDER BY hero_attribute.attribute_value ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 838,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';",
          "SELECT full_name FROM superhero WHERE superhero_name = 'Alien';",
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON race.id = superhero.race_id WHERE race.race = 'Alien';",
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Alien';"
        ]
      ]
    },
    {
      "id": 839,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour = 'Brown';",
          "SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = 1;",
          "SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Brown');",
          "SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = ( SELECT id FROM colour WHERE colour = 'Brown' );"
        ]
      ]
    },
    {
      "id": 840,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy';",
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy';",
          "SELECT hero_attribute.attribute_value FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy';",
          "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy';"
        ]
      ]
    },
    {
      "id": 841,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;",
          "SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;",
          "SELECT superhero.weight_kg, superhero.race_id FROM superhero WHERE superhero.id = 40;",
          "SELECT superhero.weight_kg, race.race FROM superhero, race WHERE superhero.race_id = race.id AND superhero.id = 40;"
        ]
      ]
    },
    {
      "id": 842,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(height_cm) FROM superhero WHERE gender_id = 1 AND race_id = 1;",
          "SELECT avg(superhero.height_cm) FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Neutral';",
          "SELECT avg(superhero.height_cm) FROM superhero WHERE superhero.gender_id = 1 AND superhero.race_id = 1;",
          "SELECT avg(superhero.height_cm) AS average_height FROM superhero WHERE superhero.gender_id = 1 AND superhero.race_id = 1;"
        ]
      ]
    },
    {
      "id": 843,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';",
          "SELECT hero_power.hero_id FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';",
          "SELECT superhero.id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE power_name = 'Intelligence';",
          "SELECT superhero.id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Intelligence';"
        ]
      ]
    },
    {
      "id": 844,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour FROM colour WHERE id = (SELECT eye_colour_id FROM superhero WHERE superhero_name = 'Blackwulf');",
          "SELECT colour FROM colour WHERE id = ( SELECT eye_colour_id FROM superhero WHERE superhero_name = 'Blackwulf' );",
          "SELECT eye_colour FROM superhero WHERE superhero_name = 'Blackwulf';",
          "SELECT colour.colour FROM colour, superhero WHERE superhero.eye_colour_id = colour.id AND superhero.superhero_name = 'Blackwulf';"
        ]
      ]
    },
    {
      "id": 845,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 0.8 * (SELECT avg(height_cm) FROM superhero);",
          "SELECT superpower.power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.height_cm > 0.8 * (SELECT avg(height_cm) FROM superhero);",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.height_cm > 0.8 * (SELECT avg(height_cm) FROM superhero);",
          "SELECT superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > (SELECT 0.8 * avg(height_cm) FROM superhero);"
        ]
      ]
    },
    {
      "id": 846,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.number = 1 AND races.raceid = 20;",
          "SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 20 AND qualifying.q1 = '1:26.572';",
          "SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 20 AND qualifying.q1 = (SELECT MAX(q1) FROM qualifying WHERE qualifying.raceid = 20);",
          "SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 20 AND qualifying.q1 = (SELECT MAX(q1) FROM qualifying WHERE qualifying.raceid = races.raceid);"
        ]
      ]
    },
    {
      "id": 847,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.surname FROM qualifying qualifying JOIN drivers drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.number = 2 AND qualifying.q2 = (SELECT min(q2) FROM qualifying WHERE raceid = 19 AND number = 2);",
          "SELECT drivers.surname FROM qualifying qualifying JOIN laptimes laptimes ON qualifying.qualifyid = laptimes.qualifyid JOIN drivers drivers ON laptimes.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.number = 2 GROUP BY drivers.surname ORDER BY MIN(laptimes.q2) LIMIT 1;",
          "SELECT drivers.surname FROM qualifying qualifying JOIN laptimes laptimes ON qualifying.qualifyid = laptimes.qualifyid JOIN drivers drivers ON laptimes.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.number = 2 AND laptimes.lap = 2 GROUP BY drivers.surname ORDER BY MIN(q2) LIMIT 1;",
          "SELECT drivers.surname FROM qualifying qualifying JOIN laptimes laptimes ON qualifying.qualifyid = laptimes.qualifyid JOIN drivers drivers ON laptimes.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.number = 2 AND laptimes.lap = 2 GROUP BY drivers.surname ORDER BY MIN(laptimes.q2) LIMIT 1;"
        ]
      ]
    },
    {
      "id": 848,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.location = 'Shanghai';",
          "SELECT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai';",
          "SELECT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.location = 'Shanghai';",
          "SELECT seasons.year FROM circuits INNER JOIN seasons ON circuits.circuitid = seasons.year WHERE circuits.location = 'Shanghai';"
        ]
      ]
    },
    {
      "id": 849,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';",
          "SELECT circuits.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';",
          "SELECT races.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';",
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';"
        ]
      ]
    },
    {
      "id": 850,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name FROM circuits WHERE circuits.country = 'Germany';",
          "SELECT DISTINCT circuits.name FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany';",
          "SELECT races.name FROM races WHERE circuits.country = 'Germany';",
          "SELECT races.name FROM races WHERE races.circuitid IN (SELECT circuits.circuitid FROM circuits WHERE circuits.country = 'Germany');"
        ]
      ]
    },
    {
      "id": 851,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructorstandings.position FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid WHERE constructors.name = 'Renault';",
          "SELECT constructorstandings.position FROM constructorstandings INNER JOIN constructors ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault';",
          "SELECT constructorstandings.position FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault';",
          "SELECT circuits.circuitid, constructorstandings.position FROM circuits INNER JOIN constructors ON constructors.constructorid = circuits.constructorid INNER JOIN constructorstandings ON constructorstandings.constructorid = constructors.constructorid WHERE constructors.name = 'Renault';"
        ]
      ]
    },
    {
      "id": 852,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.country != 'Asia' AND circuits.country != 'Europe';",
          "SELECT count(DISTINCT races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.country NOT IN ('Asia', 'Europe');",
          "SELECT count(DISTINCT races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.country != 'Asia' AND circuits.country != 'Europe' AND seasons.year = 2010;",
          "SELECT count(DISTINCT races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.country NOT IN ('Asia', 'Europe') AND seasons.year = 2010;"
        ]
      ]
    },
    {
      "id": 853,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name FROM circuits WHERE circuits.country = 'Spain';",
          "SELECT DISTINCT circuits.name FROM circuits WHERE circuits.country = 'Spain';",
          "SELECT DISTINCT races.name FROM circuits circuits JOIN races races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Spain';",
          "SELECT DISTINCT circuits.name FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain';"
        ]
      ]
    },
    {
      "id": 854,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix';",
          "SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix';",
          "SELECT circuits.lat , circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix';",
          "SELECT lat, lng FROM circuits WHERE circuitid IN (SELECT circuitid FROM races WHERE name = 'Australian Grand Prix');"
        ]
      ]
    },
    {
      "id": 855,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT * FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';",
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';",
          "SELECT * FROM races WHERE circuits.circuitref = 'sepang';",
          "SELECT circuits.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';"
        ]
      ]
    },
    {
      "id": 856,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';",
          "SELECT time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';",
          "SELECT time FROM races WHERE circuitid = 23;",
          "SELECT time FROM races WHERE circuitid = ( SELECT circuitid FROM circuits WHERE circuitref = 'sepang' );"
        ]
      ]
    },
    {
      "id": 857,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';",
          "SELECT lat , lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';",
          "SELECT lng, lat FROM circuits WHERE name = 'Abu Dhabi Grand Prix';",
          "SELECT lat, lng FROM circuits WHERE races.name = 'Abu Dhabi Grand Prix';"
        ]
      ]
    },
    {
      "id": 858,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;",
          "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.raceid = results.raceid WHERE results.number = 24 AND constructorresults.points = 1;",
          "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.raceid = results.raceid WHERE results.number = 24 AND results.points = 1;",
          "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;"
        ]
      ]
    },
    {
      "id": 859,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT q1 FROM qualifying WHERE qualifyid = 354;",
          "SELECT qualifying.q1 FROM qualifying WHERE qualifying.qualifyid = 354;",
          "SELECT qualifying.q1 FROM qualifying WHERE qualifying.driverid = 354 AND qualifying.raceid = 354;",
          "SELECT qualifying.q1 FROM qualifying WHERE qualifying.raceid = 354 AND qualifying.qualifyid = 1;"
        ]
      ]
    },
    {
      "id": 860,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q2 LIKE '0:01:40';",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40';",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q2 = '0:01:40';",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 LIKE '0:01:40';"
        ]
      ]
    },
    {
      "id": 861,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.raceid = 903 AND status.status = 'Finished' AND qualifying.q3 LIKE 'M:SS%';",
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.raceid = 903 AND qualifying.q3 LIKE 'M:SS%' AND status.status = 'Finished';",
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.raceid = 903 AND status.status = 'Finished' AND qualifying.q3 LIKE '0:01:54%';",
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.raceid = results.raceid AND qualifying.qualifyid = results.resultid INNER JOIN status ON results.statusid = status.statusid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 903 AND status.status = 'Finished' AND qualifying.q3 LIKE 'M:SS%';"
        ]
      ]
    },
    {
      "id": 862,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;",
          "SELECT count(DISTINCT drivers.driverid) FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;",
          "SELECT count(DISTINCT drivers.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;",
          "SELECT count(DISTINCT drivers.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 863,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;",
          "SELECT seasons.url FROM seasons WHERE races.raceid = 901;",
          "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901;",
          "SELECT seasons.url FROM seasons WHERE seasons.year = (SELECT races.year FROM races WHERE races.raceid = 901);"
        ]
      ]
    },
    {
      "id": 864,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverstandings.driverid) FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.date = '2015/11/29';",
          "SELECT count(driverstandings.driverid) FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.date = '2015-11-29';",
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015/11/29';",
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015-11-29';"
        ]
      ]
    },
    {
      "id": 865,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename FROM drivers WHERE drivers.driverid IN (SELECT results.driverid FROM results WHERE results.raceid = 592) ORDER BY drivers.dob ASC LIMIT 1;",
          "SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.raceid = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;",
          "SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.raceid = 592 AND results.time IS NOT NULL ORDER BY drivers.dob DESC LIMIT 1;",
          "SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE results.raceid = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 866,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptime.time LIKE '0:01:27' AND races.raceid = 161;",
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.time LIKE '0:01:27' AND races.raceid = 161;",
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptime.time LIKE '0:01:27' AND races.raceid = 161;",
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.time LIKE '0:01:27' AND races.raceid = '161';"
        ]
      ]
    },
    {
      "id": 867,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE results.raceid = 933);",
          "SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT max(fastestlapspeed) FROM results WHERE results.raceid = 933);",
          "SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE raceid = 933);",
          "SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE results.raceid = 933);"
        ]
      ]
    },
    {
      "id": 868,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';",
          "SELECT races.lat, races.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix';",
          "SELECT races.lat, races.lng FROM races INNER JOIN constructors ON races.constructorid = constructors.constructorid WHERE races.name = 'Malaysian Grand Prix';"
        ]
      ]
    },
    {
      "id": 869,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.url FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructorresults.raceid = 9 AND constructorresults.points = (SELECT max(constructorresults.points) FROM constructorresults);",
          "SELECT constructors.url FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructorresults.raceid = 9 AND constructorresults.points = (SELECT MAX(constructorresults.points) FROM constructorresults);",
          "SELECT constructors.url FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructorresults.raceid = 9 AND constructorresults.points = (SELECT max(constructorresults.points) FROM constructorresults WHERE constructorresults.raceid = 9);",
          "SELECT constructors.url FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid JOIN constructorstandings constructorstandings ON constructorresults.constructorid = constructorstandings.constructorid AND constructorresults.raceid = constructorstandings.raceid WHERE constructorresults.raceid = 9 AND constructorresults.points = (SELECT max(constructorresults.points) FROM constructorresults);"
        ]
      ]
    },
    {
      "id": 870,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT q1 FROM qualifying WHERE driverid = 345 AND raceid = 345;",
          "SELECT qualifying.q1 FROM qualifying WHERE qualifying.driverid = 345 AND qualifying.raceid = 345;",
          "SELECT q1 FROM qualifying WHERE qualifyid = 345 AND driverid = 345;",
          "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE drivers.driverid = 345 AND races.raceid = 345;"
        ]
      ]
    },
    {
      "id": 871,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN driverstandings ON qualifying.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE qualifying.raceid = '347' AND qualifying.q2 = '0:01:15';",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.raceid = '347' AND qualifying.q2 = '0:01:15';",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE qualifying.raceid = '347' AND qualifying.q2 = '0:01:15';",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN driverstandings ON qualifying.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE qualifying.raceid = '347' AND qualifying.q2 = '1:15.000';"
        ]
      ]
    },
    {
      "id": 872,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.q3 LIKE 'M:SS%' AND races.raceid = 45;",
          "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 45 AND qualifying.q3 LIKE '0:01:33%';",
          "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.q3 LIKE '0:01:33%' AND races.number = 45;",
          "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 45 AND qualifying.q3 LIKE '0:01:33';"
        ]
      ]
    },
    {
      "id": 873,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT time FROM results WHERE driverid = 743 AND raceid = 743;",
          "SELECT results.time FROM results WHERE results.driverid = 743 AND results.raceid = 743;",
          "SELECT time FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren') AND raceid = 743;",
          "SELECT results.time FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND races.raceid = 743;"
        ]
      ]
    },
    {
      "id": 874,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2006 AND results.position = 2;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2006 AND results.position = 2;",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2006 AND results.position = 2;",
          "SELECT DISTINCT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2006 AND results.position = 2;"
        ]
      ]
    },
    {
      "id": 875,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;",
          "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901;",
          "SELECT seasons.url FROM seasons WHERE seasons.year = (SELECT races.year FROM races WHERE races.raceid = 901);",
          "SELECT seasons.url FROM seasons WHERE races.raceid = 901;"
        ]
      ]
    },
    {
      "id": 876,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM driverstandings driverstandings JOIN drivers drivers ON driverstandings.driverid = drivers.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.year = 2015 AND races.date = '2015-11-29';",
          "SELECT count(driverid) FROM driverstandings driverstandings JOIN drivers drivers ON driverstandings.driverid = drivers.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.year = 2015 AND races.date = '2015-11-29' AND driverstandings.wins = 0;",
          "SELECT count(driverid) FROM driverstandings driverstandings JOIN drivers drivers ON driverstandings.driverid = drivers.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.date = '2015/11/29' AND driverstandings.wins = 0;",
          "SELECT count(driverid) FROM driverstandings driverstandings JOIN drivers drivers ON driverstandings.driverid = drivers.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.year = 2015 AND races.date = '2015-11-29' AND driverstandings.position IS NULL;"
        ]
      ]
    },
    {
      "id": 877,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN results ON laptimes.raceid = results.raceid JOIN driverstandings ON results.raceid = driverstandings.raceid WHERE laptimes.raceid = 872 AND results.time IS NOT NULL ORDER BY drivers.dob DESC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN results ON laptimes.raceid = results.raceid JOIN driverstandings ON laptimes.raceid = driverstandings.raceid WHERE laptimes.raceid = 872 AND results.time IS NOT NULL ORDER BY drivers.dob DESC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN results ON laptimes.raceid = results.raceid JOIN driverstandings ON results.raceid = driverstandings.raceid WHERE laptimes.raceid = 872 AND results.time IS NOT NULL AND driverstandings.wins = 1 AND driverstandings.position = 1;",
          "SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN results ON laptimes.raceid = results.raceid JOIN driverstandings ON results.raceid = driverstandings.raceid WHERE laptimes.raceid = 872 AND results.time IS NOT NULL AND driverstandings.wins = 1 AND driverstandings.position = 1 ORDER BY drivers.dob DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 878,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.raceid = 348 ORDER BY laptimes.time ASC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN races ON laptimes.raceid = races.raceid WHERE races.raceid = 348 ORDER BY laptimes.time ASC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.raceid = 348 ORDER BY laptimes.time ASC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.raceid = 348 ORDER BY laptimes.time LIMIT 1;"
        ]
      ]
    },
    {
      "id": 879,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results);",
          "SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = ( SELECT MAX(fastestlapspeed) FROM results );",
          "SELECT drivers.nationality FROM drivers JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results);",
          "SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = ( SELECT MAX(fastestlapspeed) FROM results ) LIMIT 1;"
        ]
      ]
    },
    {
      "id": 880,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DIVIDE(SUBTRACT(fastestlapspeed(raceid = 853), (fastestlapspeed (raceid = 854)) * 100 , (fastestlapspeed(raceid = 853))), 100) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.driverref = 'resta';",
          "SELECT DIVIDE(SUBTRACT(fastestlapspeed(raceid = 853), (fastestlapspeed (raceid = 854)) * 100 , (fastestlapspeed(raceid = 853))), 100) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.driverref = 'resta' AND results.raceid = 853;",
          "SELECT DIVIDE(SUBTRACT(fastestlapspeed(raceid = 853), (fastestlapspeed (raceid = 854)) * 100 , (fastestlapspeed(raceid = 853)))) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.driverref = 'resta' AND results.raceid = 853;",
          "SELECT DIVIDE(SUBTRACT(fastestlapspeed(raceid = 853), (fastestlapspeed (raceid = 854)) * 100 , (fastestlapspeed(raceid = 853))), 100) AS percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.driverref = 'resta' AND results.raceid = 853;"
        ]
      ]
    },
    {
      "id": 881,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16' GROUP BY drivers.driverid;",
          "SELECT drivers.forename, drivers.surname, DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.date = '1983-07-16' GROUP BY drivers.driverid;",
          "SELECT drivers.driverid, DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16' GROUP BY drivers.driverid;",
          "SELECT drivers.forename, drivers.surname, DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16' GROUP BY drivers.forename, drivers.surname;"
        ]
      ]
    },
    {
      "id": 882,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT MIN(races.year) FROM races WHERE races.name = 'Singapore Grand Prix';",
          "SELECT min(year) FROM races WHERE name = 'Singapore Grand Prix';",
          "SELECT min(races.year) FROM races WHERE races.name = 'Singapore Grand Prix';",
          "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 883,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(raceid) FROM races WHERE year = 2005;",
          "SELECT count(*) FROM races WHERE year = 2005;",
          "SELECT count(races.raceid) FROM races WHERE races.year = 2005;",
          "SELECT count(raceid) FROM races WHERE year = 2005 ORDER BY raceid DESC;"
        ]
      ]
    },
    {
      "id": 884,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM races WHERE year = (SELECT min(year) FROM races) AND month = (SELECT min(month) FROM races);",
          "SELECT name FROM races WHERE year = (SELECT year(min(date)) FROM races) AND month = (SELECT month(min(date)) FROM races);",
          "SELECT name FROM races WHERE year = year(min(date)) AND month = month(min(date));",
          "SELECT name FROM races WHERE year = (SELECT year FROM seasons WHERE year = (SELECT min(year) FROM seasons)) AND month = (SELECT month FROM seasons WHERE year = (SELECT min(year) FROM seasons));"
        ]
      ]
    },
    {
      "id": 885,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;",
          "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT max(round) FROM races WHERE year = 1999);",
          "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999);",
          "SELECT races.name, races.date FROM races WHERE races.year = 1999 ORDER BY races.round DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 886,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT year FROM races GROUP BY year ORDER BY count(raceid) DESC LIMIT 1;",
          "SELECT year FROM races GROUP BY year ORDER BY count(DISTINCT raceid) DESC LIMIT 1;",
          "SELECT seasons.year FROM races INNER JOIN seasons ON races.year = seasons.year GROUP BY seasons.year ORDER BY count(races.raceid) DESC LIMIT 1;",
          "SELECT seasons.year FROM seasons GROUP BY seasons.year ORDER BY count(races.raceid) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 887,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year <> 2000;",
          "SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year <> 2000 AND races.year = 2017;",
          "SELECT races.name FROM races LEFT JOIN seasons ON races.year = seasons.year WHERE seasons.year IS NULL;",
          "SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 AND seasons.year <> 2000;"
        ]
      ]
    },
    {
      "id": 888,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.country, circuits.location FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1;",
          "SELECT circuits.country, circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1;",
          "SELECT circuits.country, circuits.location FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1;",
          "SELECT circuits.country, circuits.location FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid ORDER BY races.year LIMIT 1;"
        ]
      ]
    },
    {
      "id": 889,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(races.year) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Brands Hatch';",
          "SELECT max(seasons.year) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch';",
          "SELECT max(seasons.year) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';",
          "SELECT max(seasons.year) FROM seasons INNER JOIN races ON seasons.year = races.year WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';"
        ]
      ]
    },
    {
      "id": 890,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT seasons.year) FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid JOIN seasons seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kindom';",
          "SELECT count(DISTINCT seasons.year) FROM races races JOIN seasons seasons ON races.year = seasons.year JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kindom';",
          "SELECT count(DISTINCT seasons.year) FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid JOIN seasons seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kingdom';",
          "SELECT count(DISTINCT races.year) FROM races, circuits, seasons WHERE races.circuitid = circuits.circuitid AND races.year = seasons.year AND circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kindom';"
        ]
      ]
    },
    {
      "id": 891,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2010 ORDER BY driverstandings.position;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2010 ORDER BY results.position;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2010 ORDER BY driverstandings.position;",
          "SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN driverstandings ON drivers.driverid = driverstandings.driverid JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2010 ORDER BY driverstandings.position;"
        ]
      ]
    },
    {
      "id": 892,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename || ' ' || drivers.surname AS full_name FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid ORDER BY driverstandings.points DESC LIMIT 1;",
          "SELECT drivers.forename || ' ' || drivers.surname AS fullname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid ORDER BY driverstandings.points DESC LIMIT 1;",
          "SELECT drivers.forename || ' ' || drivers.surname AS fullname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY driverstandings.points DESC LIMIT 1;",
          "SELECT drivers.forename || ' ' || drivers.surname AS full_name FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY driverstandings.points DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 893,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, driverstandings.points FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3;",
          "SELECT drivers.forename, drivers.surname, driverstandings.points FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3;",
          "SELECT drivers.forename, driverstandings.points FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 GROUP BY drivers.forename, driverstandings.points ORDER BY driverstandings.points DESC LIMIT 3;",
          "SELECT drivers.forename, drivers.surname, driverstandings.points FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 GROUP BY drivers.forename, drivers.surname, driverstandings.points ORDER BY driverstandings.points DESC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 894,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, races.name, laptimes.milliseconds FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(milliseconds) FROM laptimes);",
          "SELECT drivers.forename, drivers.surname, races.name, laptimes.milliseconds FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(laptimes.milliseconds) FROM laptimes);",
          "SELECT drivers.forename, drivers.surname, races.name, min(laptimes.milliseconds) FROM laptimes JOIN drivers ON laptimes.driverid = drivers.driverid JOIN races ON laptimes.raceid = races.raceid GROUP BY drivers.forename, drivers.surname, races.name;",
          "SELECT drivers.forename, drivers.surname, races.name, min(laptimes.milliseconds) FROM laptimes JOIN drivers ON laptimes.driverid = drivers.driverid JOIN races ON laptimes.raceid = races.raceid GROUP BY drivers.forename, drivers.surname, races.name ORDER BY min(laptimes.milliseconds);"
        ]
      ]
    },
    {
      "id": 895,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;",
          "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix';",
          "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = '2009';",
          "SELECT avg(laptimes.milliseconds) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;"
        ]
      ]
    },
    {
      "id": 896,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(count(raceid) AS REAL) * 100 / count(DISTINCT raceid) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010;",
          "SELECT cast(count(raceid) AS REAL) * 100 / count(DISTINCT raceid) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010 AND races.circuitid = 1;",
          "SELECT cast(count(raceid) AS REAL) * 100 / count(DISTINCT raceid) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.surname = 'Hamilton' AND races.year >= 2010;",
          "SELECT cast(count(raceid) AS REAL) * 100 / count(DISTINCT raceid) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010 AND races.circuitid = 'f1' AND driverstandings.position = 1;"
        ]
      ]
    },
    {
      "id": 897,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.nationality, MAX(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid GROUP BY drivers.forename, drivers.surname, drivers.nationality ORDER BY MAX(results.points) DESC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, MAX(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.driverid ORDER BY MAX(driverstandings.wins) DESC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, MAX(driverstandings.points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid GROUP BY driverstandings.driverid ORDER BY MAX(driverstandings.wins) DESC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, MAX(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.forename, drivers.surname, drivers.nationality ORDER BY MAX(driverstandings.wins) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 898,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT year(CURRENT_TIMESTAMP) - year(drivers.dob) AS age, drivers.driverref FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob ASC LIMIT 1;",
          "SELECT year(CURRENT_TIMESTAMP) - year(drivers.dob) AS age, drivers.surname, drivers.driverref FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob ASC LIMIT 1;",
          "SELECT year(CURRENT_TIMESTAMP) - year(drivers.dob) AS age, drivers.surname, drivers.driverref FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY age ASC LIMIT 1;",
          "SELECT year(CURRENT_TIMESTAMP) - year(drivers.dob) AS age, drivers.surname, drivers.driverref FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob LIMIT 1;"
        ]
      ]
    },
    {
      "id": 899,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN constructorresults ON races.raceid = constructorresults.raceid INNER JOIN results ON constructorresults.constructorresultsid = results.resultid WHERE races.year BETWEEN 1990 AND 2000 AND constructorresults.constructorid = 4;",
          "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN constructorresults ON races.raceid = constructorresults.raceid INNER JOIN results ON constructorresults.constructorresultsid = results.resultid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 1990 AND 2000 AND results.number = 4 AND results.constructorid = 4;",
          "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN constructorresults ON races.raceid = constructorresults.raceid INNER JOIN results ON constructorresults.constructorresultsid = results.resultid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 1990 AND 2000 AND constructorresults.constructorid = 4 AND results.statusid = 1;",
          "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN constructorresults ON races.raceid = constructorresults.raceid INNER JOIN results ON constructorresults.constructorresultsid = results.resultid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 1990 AND 2000 AND results.number = 4 AND results.statusid = 1 AND constructorresults.constructorid = 4;"
        ]
      ]
    },
    {
      "id": 900,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006;",
          "SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006;",
          "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = '2006';",
          "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.country = 'USA' AND seasons.year = 2006;"
        ]
      ]
    },
    {
      "id": 901,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2005 AND MONTH(races.date) = 9;",
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE races.year = 2005 AND MONTH(races.date) = 9;",
          "SELECT DISTINCT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2005 AND MONTH(races.date) = 9;",
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE MONTH(races.date) = 9 AND year(races.date) = 2005 AND circuits.circuitref = 'f1';"
        ]
      ]
    },
    {
      "id": 902,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20;",
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON races.raceid = results.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20;",
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.driverref = 'yoong' AND results.position < 20;",
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.number < 20;"
        ]
      ]
    },
    {
      "id": 903,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.resultid) FROM results, drivers, races, circuits WHERE results.driverid = drivers.driverid AND results.raceid = races.raceid AND races.circuitid = circuits.circuitid AND drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.circuitref = 'sepang';",
          "SELECT count(*) FROM results, drivers, races, circuits WHERE results.driverid = drivers.driverid AND results.raceid = races.raceid AND races.circuitid = circuits.circuitid AND drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.circuitref = 'sepang';",
          "SELECT count(*) FROM drivers, results, races, circuits WHERE drivers.driverid = results.driverid AND races.raceid = results.raceid AND circuits.circuitid = races.circuitid AND drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.circuitref = 'sepang';",
          "SELECT count(*) FROM drivers, results, races, circuits, driverstandings WHERE drivers.driverid = results.driverid AND results.raceid = races.raceid AND races.circuitid = circuits.circuitid AND driverstandings.driverid = drivers.driverid AND driverstandings.raceid = races.raceid AND circuits.circuitref = 'sepang';"
        ]
      ]
    },
    {
      "id": 904,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, races.year FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(milliseconds) FROM laptimes WHERE laptimes.milliseconds IS NOT NULL);",
          "SELECT races.name, races.year FROM laptimes laptimes JOIN results results ON laptimes.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(milliseconds) FROM laptimes WHERE laptimes.milliseconds IS NOT NULL);",
          "SELECT races.name, races.year FROM laptimes laptimes JOIN results results ON laptimes.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(laptimes.milliseconds) FROM laptimes WHERE laptimes.milliseconds IS NOT NULL);",
          "SELECT races.name, races.year FROM laptimes laptimes JOIN results results ON laptimes.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(milliseconds) FROM laptimes laptimes JOIN results results ON laptimes.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher');"
        ]
      ]
    },
    {
      "id": 905,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT AVG(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2000 AND drivers.forename = 'Eddie' AND drivers.driverref = 'irvine' AND drivers.surname = 'Irvine';",
          "SELECT avg(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2000 AND drivers.forename = 'Eddie' AND drivers.driverref = 'irvine' AND drivers.surname = 'Irvine';",
          "SELECT avg(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Eddie' AND drivers.driverref = 'irvine' AND drivers.surname = 'Irvine' AND races.year = 2000;",
          "SELECT AVG(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Eddie' AND drivers.driverref = 'irvine' AND drivers.surname = 'Irvine' AND races.year = 2000;"
        ]
      ]
    },
    {
      "id": 906,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT min(races.year) FROM races WHERE races.name = 'Australian Grand Prix';",
          "SELECT drivers.forename, drivers.surname, races.name, results.points FROM drivers INNER JOIN races ON drivers.driverid = races.raceid INNER JOIN results ON races.raceid = results.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year ASC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname, races.name, results.points FROM drivers INNER JOIN races ON drivers.driverid = races.raceid INNER JOIN results ON races.raceid = results.raceid WHERE drivers.driverref = 'lewis' AND races.year = (SELECT MIN(year) FROM races);",
          "SELECT drivers.forename , drivers.surname , races.name , results.points FROM drivers INNER JOIN races ON drivers.driverid = races.raceid INNER JOIN results ON races.raceid = results.raceid WHERE drivers.driverref = 'lewis' AND races.year = (SELECT MIN(year) FROM races);"
        ]
      ]
    },
    {
      "id": 907,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT * FROM races WHERE year = 2017 ORDER BY date;",
          "SELECT races.date, circuits.country FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date;",
          "SELECT races.date, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date;",
          "SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date;"
        ]
      ]
    },
    {
      "id": 908,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.name, races.year, circuits.location ORDER BY count(laps) DESC LIMIT 1;",
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.name, races.year, circuits.location ORDER BY COUNT(laps) DESC LIMIT 1;",
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.name, races.year, circuits.location ORDER BY count(races.laps) DESC LIMIT 1;",
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.name, races.year, circuits.location HAVING count(races.raceid) = (SELECT max(COUNT) FROM (SELECT count(races.raceid) AS COUNT FROM races GROUP BY races.name, races.year, circuits.location));"
        ]
      ]
    },
    {
      "id": 909,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT COUNT(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany' AND races.name = 'European Grand Prix';",
          "SELECT COUNT(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' AND circuits.country = 'Germany';",
          "SELECT percentage FROM (SELECT COUNT(races.name) AS percentage FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany' AND races.name = 'European Grand Prix');",
          "SELECT percentage FROM (SELECT COUNT(races.name) AS percentage FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany' AND races.name = 'European Grand Prix' GROUP BY races.name);"
        ]
      ]
    },
    {
      "id": 910,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';",
          "SELECT circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Silverstone Circuit';",
          "SELECT circuits.lat , circuits.lng FROM circuits WHERE circuits.name = 'Silverstone Circuit';",
          "SELECT lat, lng FROM circuits WHERE circuits.name = 'Silverstone Circuit';"
        ]
      ]
    },
    {
      "id": 911,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM circuits ORDER BY lat DESC LIMIT 1;",
          "SELECT circuits.name FROM circuits ORDER BY circuits.lat DESC LIMIT 1;",
          "SELECT name FROM circuits WHERE lat IN (2.76083, 26.0325) ORDER BY lat DESC LIMIT 1;",
          "SELECT circuits.name FROM circuits WHERE circuits.lat = (SELECT max(circuits.lat) FROM circuits);"
        ]
      ]
    },
    {
      "id": 912,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.circuitref FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';",
          "SELECT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit';",
          "SELECT circuitref FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';",
          "SELECT circuits.circuitref FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Marina Bay Street Circuit';"
        ]
      ]
    },
    {
      "id": 913,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.country FROM circuits WHERE circuits.alt = (SELECT max(circuits.alt) FROM circuits);",
          "SELECT circuits.country FROM circuits ORDER BY circuits.alt DESC LIMIT 1;",
          "SELECT circuits.country FROM circuits WHERE circuits.alt = (SELECT max(alt) FROM circuits);",
          "SELECT circuits.country FROM circuits WHERE circuits.alt = ( SELECT max(circuits.alt) FROM circuits );"
        ]
      ]
    },
    {
      "id": 914,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM drivers WHERE code IS NULL;",
          "SELECT count(code) FROM drivers WHERE code IS NULL;",
          "SELECT count(code) FROM drivers WHERE code is null;",
          "SELECT count(*) FROM drivers WHERE drivers.code IS NULL;"
        ]
      ]
    },
    {
      "id": 915,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.nationality FROM drivers WHERE drivers.dob = (SELECT max(dob) FROM drivers);",
          "SELECT drivers.nationality FROM drivers ORDER BY drivers.dob ASC LIMIT 1;",
          "SELECT drivers.nationality FROM drivers ORDER BY drivers.dob DESC LIMIT 1;",
          "SELECT country FROM drivers WHERE dob = (SELECT max(dob) FROM drivers);"
        ]
      ]
    },
    {
      "id": 916,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.surname FROM drivers INNER JOIN constructors ON drivers.nationality = constructors.nationality WHERE constructors.nationality = 'italian';",
          "SELECT drivers.surname FROM constructors INNER JOIN drivers ON constructors.constructorid = drivers.driverid WHERE constructors.nationality = 'italian';",
          "SELECT drivers.surname FROM drivers INNER JOIN constructors ON drivers.driverid = constructors.constructorid WHERE constructors.nationality = 'italian';",
          "SELECT drivers.surname FROM drivers INNER JOIN constructors ON constructors.constructorid = drivers.constructorid WHERE constructors.nationality = 'italian';"
        ]
      ]
    },
    {
      "id": 917,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.url FROM drivers WHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson';",
          "SELECT drivers.url FROM drivers WHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson' AND drivers.driverref = 'davidson';",
          "SELECT drivers.url FROM drivers WHERE drivers.forename LIKE 'Anthony' AND drivers.surname LIKE 'Davidson';",
          "SELECT drivers.url FROM drivers WHERE drivers.driverref = 'davidson';"
        ]
      ]
    },
    {
      "id": 918,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT driverref FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';",
          "SELECT drivers.driverref FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';",
          "SELECT drivers.driverref FROM drivers WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis';"
        ]
      ]
    },
    {
      "id": 919,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;",
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = '2009';",
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';",
          "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"
        ]
      ]
    },
    {
      "id": 920,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit';",
          "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit';",
          "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE circuits.circuitref = 'silverstone';",
          "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'silverstone';"
        ]
      ]
    },
    {
      "id": 921,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT * FROM races WHERE circuitid IN (SELECT circuitid FROM circuits WHERE circuitref = 'silverstone');",
          "SELECT * FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'silverstone';",
          "SELECT * FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'silverstone';",
          "SELECT * FROM races WHERE circuitid = (SELECT circuitid FROM circuits WHERE circuitref = 'silverstone');"
        ]
      ]
    },
    {
      "id": 922,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.location = 'Abu Dhabi';",
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Abu Dhabi' AND races.year = 2010;",
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = '2010' AND circuits.location = 'Abu Dhabi';",
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Abu Dhabi' AND races.year = '2010';"
        ]
      ]
    },
    {
      "id": 923,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';",
          "SELECT count(*) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';",
          "SELECT count(*) FROM races WHERE circuits.country = 'Italy';",
          "SELECT count(races.name) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';"
        ]
      ]
    },
    {
      "id": 924,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.date FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya';",
          "SELECT races.date FROM races WHERE races.name = 'Australian Grand Prix' AND races.circuitid = 23;",
          "SELECT races.date FROM races WHERE races.name = 'Australian Grand Prix' AND races.circuitid = (SELECT circuits.circuitid FROM circuits WHERE circuits.name = 'Barcelona-Catalunya');",
          "SELECT races.date FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'barcelona-catalunya';"
        ]
      ]
    },
    {
      "id": 925,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE races.name = 'Spanish Grand Prix' AND seasons.year = 2009;",
          "SELECT races.url FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND seasons.year = 2009;",
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE races.name = 'Spanish Grand Prix' AND seasons.year = 2009 GROUP BY races.url;",
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE races.name = 'Spanish Grand Prix' AND seasons.year = 2009 GROUP BY races.url;"
        ]
      ]
    },
    {
      "id": 926,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT min(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT min(laptimes.fastestlaptime) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT min(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton';",
          "SELECT min(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton';"
        ]
      ]
    },
    {
      "id": 927,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY laptimes.milliseconds ASC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.milliseconds = (SELECT max(milliseconds) FROM laptimes);",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON results.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT max(milliseconds) FROM laptimes);",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN results ON laptimes.raceid = results.raceid AND laptimes.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT max(milliseconds) FROM laptimes);"
        ]
      ]
    },
    {
      "id": 928,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM results WHERE raceid IN (SELECT raceid FROM races WHERE name = 'Canadian Grand Prix' AND year = 2007) AND rank = 1;",
          "SELECT driverref FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid IN (SELECT raceid FROM races WHERE name = 'Canadian Grand Prix' AND year = 2007) AND rank = 1);",
          "SELECT driverref FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid IN (SELECT raceid FROM races WHERE name = 'Canadian Grand Prix' AND year = 2007) AND position = 1);",
          "SELECT driverref FROM drivers WHERE driverid IN (SELECT driverid FROM driverstandings WHERE raceid IN (SELECT raceid FROM races WHERE name = 'Canadian Grand Prix' AND year = 2007) AND position = 1);"
        ]
      ]
    },
    {
      "id": 929,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT races.name FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
        ]
      ]
    },
    {
      "id": 930,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;",
          "SELECT races.name FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;",
          "SELECT name FROM races WHERE raceid = ( SELECT raceid FROM driverstandings WHERE driverid = ( SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) ORDER BY rank ASC LIMIT 1 );",
          "SELECT races.name FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY driverstandings.rank ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 931,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(fastestlapspeed) FROM results WHERE raceid = (SELECT raceid FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009);",
          "SELECT max(fastestlapspeed) FROM results JOIN drivers ON results.driverid = drivers.driverid JOIN races ON results.raceid = races.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;",
          "SELECT max(fastestlapspeed) FROM results WHERE raceid = (SELECT raceid FROM races WHERE year = 2009 AND name = 'Spanish Grand Prix');",
          "SELECT max(fastestlapspeed) FROM results WHERE raceid = (SELECT raceid FROM races WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009);"
        ]
      ]
    },
    {
      "id": 932,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT seasons.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' GROUP BY seasons.year;",
          "SELECT seasons.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT DISTINCT races.year FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
        ]
      ]
    },
    {
      "id": 933,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT positionorder, rank FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceid = (SELECT raceid FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008);",
          "SELECT positionorder FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceid = (SELECT raceid FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008);",
          "SELECT positionorder, rank FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceid = (SELECT raceid FROM races WHERE name = 'Chinese Grand Prix' AND year = '2008');",
          "SELECT positionorder AS final_rank FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceid = (SELECT raceid FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008);"
        ]
      ]
    },
    {
      "id": 934,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE results.grid = 4 AND races.year = 1989 AND races.name = 'Australian Grand Prix';",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE results.grid = 4 AND races.year = 1989 AND races.name = 'Australian Grand Prix';",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 1989 AND results.grid = 4;",
          "SELECT drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE driverstandings.grid = 4 AND races.year = 1989 AND races.name = 'Australian Grand Prix';"
        ]
      ]
    },
    {
      "id": 935,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;",
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;",
          "SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL;",
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 936,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.fastestlap FROM results JOIN drivers ON results.driverid = drivers.driverid JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = 2008 AND races.name = 'Australian Grand Prix';",
          "SELECT results.fastestlap FROM results results JOIN drivers drivers ON results.driverid = drivers.driverid JOIN races races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = 2008 AND races.name = 'Australian Grand Prix';",
          "SELECT results.fastestlap FROM results JOIN drivers ON results.driverid = drivers.driverid JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = '2008' AND races.name = 'Australian Grand Prix';",
          "SELECT results.fastestlap FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = 2008 AND races.name = 'Australian Grand Prix';"
        ]
      ]
    },
    {
      "id": 937,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND results.rank = 2 AND races.year = 2008;",
          "SELECT results.time FROM results INNER JOIN driverstandings ON results.driverid = driverstandings.driverid INNER JOIN races ON results.raceid = races.raceid WHERE driverstandings.position = 2 AND races.year = 2008 AND races.name = 'Chinese Grand Prix';",
          "SELECT results.time FROM results INNER JOIN driverstandings ON results.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE driverstandings.position = 2 AND races.year = 2008 AND races.name = 'Chinese Grand Prix';",
          "SELECT results.time FROM results INNER JOIN driverstandings ON results.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND driverstandings.position = 2 AND races.year = 2008;"
        ]
      ]
    },
    {
      "id": 938,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = '2008' AND races.name = 'Australian Grand Prix';",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2008 AND races.name = 'Australian Grand Prix';",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE races.name = 'Australian Grand Prix' AND results.resultid = '2008';",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = '2008' AND races.name = 'Australian Grand Prix' AND results.position = '1';"
        ]
      ]
    },
    {
      "id": 939,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE drivers.nationality = 'British' AND races.year = 2008;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE races.year = 2008 AND drivers.nationality = 'British';",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND drivers.nationality = 'British';",
          "SELECT count(DISTINCT results.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE races.year = 2008 AND drivers.nationality = 'British';"
        ]
      ]
    },
    {
      "id": 940,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT driverstandings.driverid) FROM driverstandings driverstandings JOIN laptimes laptimes ON driverstandings.driverid = laptimes.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix';",
          "SELECT count(DISTINCT driverstandings.driverid) FROM driverstandings driverstandings JOIN laptimes laptimes ON driverstandings.driverid = laptimes.driverid JOIN results results ON laptimes.raceid = results.raceid JOIN races races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix';",
          "SELECT count(DISTINCT driverstandings.driverid) FROM driverstandings driverstandings JOIN laptimes laptimes ON driverstandings.driverid = laptimes.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND laptimes.time IS NOT NULL;",
          "SELECT count(DISTINCT driverstandings.driverid) FROM driverstandings driverstandings JOIN laptimes laptimes ON driverstandings.driverid = laptimes.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND laptimes.time IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 941,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT sum(results.points) FROM results JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT sum(results.points) FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT total(results.points) FROM results JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT total(results.points) FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"
        ]
      ]
    },
    {
      "id": 942,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(laptimes.milliseconds / 1000) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT avg(laptimes.milliseconds / 1000) FROM laptimes JOIN drivers ON laptimes.driverid = drivers.driverid JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT avg(laptimes.milliseconds / 1000) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT avg(laptimes.milliseconds / 1000) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton';"
        ]
      ]
    },
    {
      "id": 943,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT COUNT(races.raceid) / COUNT(laptimes.raceid) AS rate FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND laptimes.time IS NOT NULL;",
          "SELECT cast(count(laptimes.raceid) AS REAL) / count(races.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND laptimes.time IS NOT NULL;",
          "SELECT cast(count(CASE WHEN laptimes.time IS NOT NULL THEN laptimes.raceid END) AS REAL) / count(laptimes.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';",
          "SELECT cast(count(CASE WHEN laptimes.time IS NOT NULL THEN laptimes.raceid END) AS REAL) / count(races.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';"
        ]
      ]
    },
    {
      "id": 944,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT divide(subtract(results.time, (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds DESC LIMIT 1)), (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds DESC LIMIT 1)) * 100 FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';",
          "SELECT divide(subtract(results.time, (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds DESC LIMIT 1)), (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds DESC LIMIT 1)) * 100 FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.statusid = 1;",
          "SELECT divide(subtract(results.time, (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid AND laptimes.driverid = results.driverid ORDER BY laptimes.milliseconds DESC LIMIT 1)), (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid AND laptimes.driverid = results.driverid ORDER BY laptimes.milliseconds DESC LIMIT 1)) * 100 FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';",
          "SELECT divide(subtract(results.time, (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid AND laptimes.driverid = results.driverid ORDER BY laptimes.milliseconds DESC LIMIT 1)), (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid AND laptimes.driverid = results.driverid ORDER BY laptimes.milliseconds DESC LIMIT 1)) * 100 FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';"
        ]
      ]
    },
    {
      "id": 945,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM circuits WHERE circuits.country = 'Australia' AND circuits.location = 'Adelaide';",
          "SELECT count(*) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia';",
          "SELECT count(*) FROM circuits WHERE circuits.location = 'Adelaide' AND circuits.country = 'Australia';",
          "SELECT count(circuits.circuitid) FROM circuits WHERE circuits.country = 'Australia' AND circuits.location = 'Adelaide';"
        ]
      ]
    },
    {
      "id": 946,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT lat, lng FROM circuits WHERE country = 'USA';",
          "SELECT circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';",
          "SELECT circuits.lat , circuits.lng FROM circuits WHERE circuits.country = 'USA';",
          "SELECT circuits.lat, circuits.lng FROM circuits WHERE country = 'USA';"
        ]
      ]
    },
    {
      "id": 947,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM drivers WHERE nationality = 'British' AND year(dob) > 1980;",
          "SELECT count(driverid) FROM drivers WHERE year(dob) > 1980 AND nationality = 'British';",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'British' AND year(dob) > 1980;",
          "SELECT count(driverid) FROM drivers WHERE dob > '1980-01-01' AND nationality = 'British';"
        ]
      ]
    },
    {
      "id": 948,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT MAX(points) FROM constructors WHERE nationality = 'British';",
          "SELECT max(points) FROM constructors WHERE nationality = 'British';",
          "SELECT max(constructors.nationality) FROM constructors WHERE nationality = 'British';",
          "SELECT MAX(constructors.points) FROM constructors WHERE nationality = 'British';"
        ]
      ]
    },
    {
      "id": 949,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid ORDER BY constructorstandings.points DESC LIMIT 1;",
          "SELECT constructors.name FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid ORDER BY constructorresults.points DESC LIMIT 1;",
          "SELECT constructors.name FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid ORDER BY constructorresults.points DESC LIMIT 1;",
          "SELECT constructors.name FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid ORDER BY constructorstandings.points DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 950,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.name FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructorresults.raceid = 291 AND constructorresults.points = 0;",
          "SELECT constructors.name FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE races.raceid = 291 AND constructorresults.points = 0;",
          "SELECT constructors.name FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructorresults.points = 0 AND races.raceid = 291;",
          "SELECT constructors.name FROM constructorresults constructorresults INNER JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races races ON constructorresults.raceid = races.raceid WHERE constructorresults.points = 0 AND races.raceid = 291;"
        ]
      ]
    },
    {
      "id": 951,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.resultid = results.resultid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE constructors.nationality = 'Japanese' AND COUNT(races.raceid) = 2;",
          "SELECT COUNT(constructors.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.resultid = results.resultid INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid INNER JOIN races ON constructorstandings.raceid = races.raceid WHERE constructors.nationality = 'Japanese' AND COUNT(races.raceid) = 2;",
          "SELECT COUNT(*) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.resultid = results.resultid INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid INNER JOIN races ON constructorstandings.raceid = races.raceid WHERE constructors.nationality = 'Japanese' AND COUNT(races.raceid) = 2;",
          "SELECT COUNT(*) FROM constructors constructors JOIN constructorresults constructorresults ON constructors.constructorid = constructorresults.constructorid JOIN results results ON constructorresults.raceid = results.raceid JOIN constructorstandings constructorstandings ON constructors.constructorid = constructorstandings.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructors.nationality = 'Japanese' AND COUNT(races.raceid) = 2;"
        ]
      ]
    },
    {
      "id": 952,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructorid FROM constructorstandings WHERE position = 1;",
          "SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.position = 1;",
          "SELECT DISTINCT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.position = 1;",
          "SELECT DISTINCT constructors.name FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.rank = 1;"
        ]
      ]
    },
    {
      "id": 953,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT constructors.constructorid) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50;",
          "SELECT count(*) FROM constructors WHERE nationality = 'French' AND constructorid IN ( SELECT constructorid FROM results WHERE laps > 50 );",
          "SELECT count(constructors.constructorid) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50;",
          "SELECT count(DISTINCT constructors.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'French' AND constructorresults.laps > 50;"
        ]
      ]
    },
    {
      "id": 954,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year BETWEEN 2007 AND 2009 AND laptimes.time IS NOT NULL;",
          "SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.time IS NOT NULL AND races.year BETWEEN 2007 AND 2009;",
          "SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' AND laptimes.time IS NOT NULL AND races.year BETWEEN 2007 AND 2009 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid;",
          "SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE laptimes.time IS NOT NULL AND races.year BETWEEN 2007 AND 2009;"
        ]
      ]
    },
    {
      "id": 955,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT AVG(CAST(SUBSTR(results.time, 1, 2) AS REAL) * 3600 + CAST(SUBSTR(results.time, 4, 2) AS REAL) * 60 + CAST(SUBSTR(results.time, 7, 2) AS REAL)) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year < 1975;",
          "SELECT AVG(CAST(SUBSTR(results.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(results.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(results.time, 7, 2) AS INTEGER)) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year < 1975;",
          "SELECT AVG(CAST(SUBSTR(results.time, 1, 2) AS REAL) * 3600 + CAST(SUBSTR(results.time, 4, 2) AS REAL) * 60 + CAST(SUBSTR(results.time, 7, 2) AS REAL)) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year < 1975;",
          "SELECT AVG(CAST(SUBSTR(results.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(results.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(results.time, 7, 2) AS INTEGER)) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year < 1975;"
        ]
      ]
    },
    {
      "id": 956,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers WHERE year(dob) > 1975 AND driverstandings.position = 2;",
          "SELECT forename, surname FROM drivers WHERE year(dob) > 1975 AND driverid IN (SELECT driverid FROM driverstandings WHERE position = 2);",
          "SELECT drivers.forename, drivers.surname FROM drivers WHERE year(dob) > 1975 AND driverid IN (SELECT driverid FROM driverstandings WHERE position = 2);",
          "SELECT forename, surname FROM drivers WHERE year(dob) > 1975 AND driverid IN (SELECT driverid FROM driverstandings WHERE rank = 2);"
        ]
      ]
    },
    {
      "id": 957,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN status ON results.statusid = status.statusid WHERE drivers.nationality = 'Italian' AND status.status = 'Finished' AND results.time IS NULL;",
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.nationality = 'Italian' AND results.time IS NULL;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.nationality = 'Italian' AND results.time IS NULL;",
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE drivers.nationality = 'Italian' AND time IS NULL;"
        ]
      ]
    },
    {
      "id": 958,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.fastestlaptime LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.fastestlaptime ASC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlaptime = ( SELECT fastestlaptime FROM results ORDER BY fastestlaptime LIMIT 1 );",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlaptime = (SELECT min(fastestlaptime) FROM results);"
        ]
      ]
    },
    {
      "id": 959,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT fastestlap FROM results WHERE raceid IN (SELECT raceid FROM races WHERE year = 2009) ORDER BY fastestlap ASC LIMIT 1;",
          "SELECT fastestlap FROM results WHERE raceid IN (SELECT raceid FROM races WHERE year = 2009) ORDER BY fastestlap LIMIT 1;",
          "SELECT fastestlap FROM results WHERE raceid IN (SELECT raceid FROM races WHERE year = 2009) AND fastestlap IS NOT NULL ORDER BY fastestlap ASC LIMIT 1;",
          "SELECT fastestlap FROM results WHERE raceid IN (SELECT raceid FROM races WHERE year = 2009) AND fastestlap IS NOT NULL ORDER BY fastestlap LIMIT 1;"
        ]
      ]
    },
    {
      "id": 960,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(results.fastestlapspeed) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;",
          "SELECT avg(results.fastestlapspeed) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';",
          "SELECT avg(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;",
          "SELECT avg(fastestlapspeed) FROM results JOIN races ON results.raceid = races.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"
        ]
      ]
    },
    {
      "id": 961,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT r.name, r.year FROM races r JOIN results r2 ON r.raceid = r2.raceid WHERE r2.milliseconds = (SELECT min(milliseconds) FROM results WHERE milliseconds IS NOT NULL);",
          "SELECT r.name, r.year FROM races r JOIN results r2 ON r.raceid = r2.raceid WHERE r2.milliseconds = (SELECT Min(milliseconds) FROM results WHERE milliseconds IS NOT NULL);",
          "SELECT r.name, r.year FROM races r JOIN results r2 ON r.raceid = r2.raceid WHERE r2.milliseconds = (SELECT min(milliseconds) FROM results) AND r2.milliseconds IS NOT NULL;",
          "SELECT r.name, r.year FROM races r JOIN results r2 ON r.raceid = r2.raceid WHERE r2.milliseconds = (SELECT min(milliseconds) FROM results r3 WHERE r3.raceid = r.raceid AND r3.milliseconds IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 962,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT COUNT(driverid) / COUNT(driverid) * 100 FROM drivers WHERE year(dob) < 1985 AND laps > 50;",
          "SELECT COUNT(driverid) / COUNT(driverid) * 100 FROM drivers WHERE year(dob) < 1985 AND laps > 50 AND year BETWEEN 2000 AND 2005;",
          "SELECT COUNT(driverid) / COUNT(driverid) * 100 FROM drivers WHERE year(dob) <1985 AND laps >50;",
          "SELECT COUNT(driverid) / (SELECT COUNT(driverid) FROM drivers WHERE year(dob) < 1985) * 100 FROM drivers WHERE year(dob) < 1985 AND laps > 50;"
        ]
      ]
    },
    {
      "id": 963,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 7200;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 7200;",
          "SELECT count(drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 7200 AND laptimes.milliseconds > 0;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 7200 AND laptimes.milliseconds > 0;"
        ]
      ]
    },
    {
      "id": 964,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT code FROM drivers WHERE nationality = 'American';",
          "SELECT drivers.code FROM drivers WHERE drivers.nationality = 'American';",
          "SELECT DISTINCT drivers.code FROM drivers WHERE drivers.nationality = 'American';",
          "SELECT drivers.code FROM drivers WHERE nationality = 'American';"
        ]
      ]
    },
    {
      "id": 965,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT raceid FROM races WHERE year = 2009;",
          "SELECT races.raceid FROM races WHERE races.year = 2009;",
          "SELECT races.raceid FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2009;",
          "SELECT races.raceid FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2009;"
        ]
      ]
    },
    {
      "id": 966,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT driverid) FROM results WHERE raceid LIKE 18;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid WHERE results.raceid LIKE 18;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid WHERE results.raceid = 18;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers JOIN results ON drivers.driverid = results.driverid WHERE results.raceid LIKE 18;"
        ]
      ]
    },
    {
      "id": 967,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(nationality) FROM drivers WHERE nationality = 'Dutch';",
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN circuits ON drivers.nationality = circuits.country WHERE circuits.country = 'Netherlands';",
          "SELECT count(drivers.nationality) FROM drivers INNER JOIN circuits ON drivers.nationality = circuits.country WHERE circuits.country = 'Netherlands';",
          "SELECT count(drivers.nationality) FROM drivers INNER JOIN circuits ON drivers.code = circuits.country WHERE drivers.nationality = 'Dutch';"
        ]
      ]
    },
    {
      "id": 968,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';",
          "SELECT drivers.driverref FROM drivers WHERE drivers.forename = 'Robert' AND drivers.surname = 'Kubica';",
          "SELECT drivers.driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';",
          "SELECT driverref FROM drivers WHERE firstname = 'Robert' AND lastname = 'Kubica';"
        ]
      ]
    },
    {
      "id": 969,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM drivers WHERE nationality = 'British' AND year(dob) = 1980;",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'British' AND year(dob) = 1980;",
          "SELECT count(*) FROM drivers WHERE nationality = 'British' AND year(dob) = '1980';",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'British' AND year(dob) = '1980';"
        ]
      ]
    },
    {
      "id": 970,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, laptimes.time FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND year(drivers.dob) BETWEEN 1980 AND 1990 ORDER BY laptimes.time ASC LIMIT 3;",
          "SELECT drivers.forename, drivers.driverref FROM drivers WHERE drivers.nationality = 'German' AND year(drivers.dob) BETWEEN 1980 AND 1990 ORDER BY laptimes.time ASC LIMIT 3;",
          "SELECT drivers.forename, drivers.driverref, Min(laptimes.time) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND year(drivers.dob) BETWEEN 1980 AND 1990 GROUP BY drivers.forename ORDER BY Min(laptimes.time) LIMIT 3;",
          "SELECT drivers.forename, drivers.driverref, Min(laptimes.time) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND year(drivers.dob) BETWEEN 1980 AND 1990 GROUP BY drivers.driverid ORDER BY Min(laptimes.time) LIMIT 3;"
        ]
      ]
    },
    {
      "id": 971,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1;",
          "SELECT driverref FROM drivers WHERE nationality = 'German' AND year(dob) = (SELECT min(year(dob)) FROM drivers WHERE nationality = 'German');",
          "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY year(dob) LIMIT 1;",
          "SELECT driverref FROM drivers WHERE nationality = 'German' AND dob = (SELECT min(dob) FROM drivers WHERE nationality = 'German');"
        ]
      ]
    },
    {
      "id": 972,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverid, drivers.code FROM drivers WHERE year(dob) = 1971 AND fastestlaptime IS NOT NULL;",
          "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 1971 AND results.fastestlaptime IS NOT NULL;",
          "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE year(drivers.dob) = 1971 AND results.fastestlaptime IS NOT NULL;",
          "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE year(dob) = 1971 AND fastestlaptime IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 973,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT * FROM drivers WHERE nationality = 'Spanish' AND year(dob) < 1982 ORDER BY time DESC LIMIT 10;",
          "SELECT * FROM drivers WHERE nationality = 'Spanish' AND year(dob) < 1982 ORDER BY Max(time) DESC LIMIT 10;",
          "SELECT driverref, MAX(time) FROM drivers WHERE nationality = 'Spanish' AND year(dob) < 1982 GROUP BY driverref ORDER BY MAX(time) DESC LIMIT 10;",
          "SELECT * FROM drivers WHERE nationality = 'Spanish' AND dob < '1982-01-01' ORDER BY time DESC LIMIT 10;"
        ]
      ]
    },
    {
      "id": 974,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.year FROM seasons WHERE seasons.year IN (SELECT races.year FROM races WHERE races.raceid IN (SELECT results.raceid FROM results WHERE results.fastestlaptime IS NOT NULL));",
          "SELECT seasons.year FROM seasons WHERE seasons.year IN ( SELECT races.year FROM races WHERE races.raceid IN ( SELECT results.raceid FROM results WHERE results.fastestlaptime IS NOT NULL ) );",
          "SELECT seasons.year FROM seasons WHERE seasons.year = ( SELECT year FROM races WHERE races.raceid = ( SELECT raceid FROM laptimes WHERE laptimes.milliseconds = ( SELECT max(milliseconds) FROM laptimes ) ) );",
          "SELECT seasons.year FROM seasons WHERE seasons.year IN ( SELECT races.year FROM races WHERE races.raceid IN ( SELECT results.raceid FROM results WHERE results.fastestlaptime IS NOT NULL ) ) ORDER BY seasons.year ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 975,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT year FROM races WHERE raceid IN (SELECT raceid FROM laptimes WHERE milliseconds = (SELECT max(milliseconds) FROM laptimes));",
          "SELECT seasons.year FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year ORDER BY laptimes.milliseconds DESC LIMIT 1;",
          "SELECT races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid GROUP BY races.year ORDER BY Max(laptimes.milliseconds) ASC LIMIT 1;",
          "SELECT seasons.year FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year ORDER BY laptimes.milliseconds ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 976,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverid FROM results WHERE laps = 1 ORDER BY fastestlaptime DESC LIMIT 5;",
          "SELECT driverid FROM results WHERE laps = 1 ORDER BY time LIMIT 5;",
          "SELECT driverid FROM results WHERE fastestlap = 1 ORDER BY time LIMIT 5;",
          "SELECT driverid FROM results WHERE laps = 1 ORDER BY fastestlaptime LIMIT 5;"
        ]
      ]
    },
    {
      "id": 977,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT results.resultid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND results.raceid > 50 AND results.raceid < 100 AND results.time IS NULL;",
          "SELECT count(DISTINCT results.resultid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND results.raceid > 50 AND results.raceid < 100;",
          "SELECT count(DISTINCT results.resultid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND results.raceid > 50 AND results.raceid < 100 AND results.time IS NOT NULL;",
          "SELECT count(DISTINCT results.resultid) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN races ON results.raceid = races.raceid WHERE status.status = 'Disqualified';"
        ]
      ]
    },
    {
      "id": 978,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(circuitid) FROM circuits WHERE country = 'Austria';",
          "SELECT count(circuitref) FROM circuits WHERE country = 'Austria';",
          "SELECT count(circuits.circuitid) FROM circuits WHERE circuits.country = 'Austria';",
          "SELECT count(circuitid) FROM `circuits` WHERE country = 'Austria';"
        ]
      ]
    },
    {
      "id": 979,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY count(raceid) DESC LIMIT 1;",
          "SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY count(time) DESC LIMIT 1;",
          "SELECT number FROM results WHERE time IS NOT NULL GROUP BY number ORDER BY count(number) DESC LIMIT 1;",
          "SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid HAVING count(raceid) = (SELECT max(COUNT) FROM (SELECT count(raceid) AS COUNT FROM results WHERE time IS NOT NULL GROUP BY raceid));"
        ]
      ]
    },
    {
      "id": 980,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN constructors ON qualifying.constructorid = constructors.constructorid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL;",
          "SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN constructors ON constructors.constructorid = qualifying.constructorid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL;",
          "SELECT drivers.driverref , drivers.nationality , drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN constructors ON qualifying.constructorid = constructors.constructorid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL;",
          "SELECT driverref, nationality, dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN constructors ON qualifying.constructorid = constructors.constructorid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 981,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.year, races.name, races.date, races.time FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid JOIN races races ON qualifying.raceid = races.raceid WHERE drivers.dob = (SELECT min(dob) FROM drivers) AND qualifying.qualifyid = (SELECT min(qualifyid) FROM qualifying);",
          "SELECT races.year, races.name, races.date, races.time FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid JOIN races races ON qualifying.raceid = races.raceid WHERE drivers.dob = (SELECT min(dob) FROM drivers) AND qualifying.q1 = (SELECT min(q1) FROM qualifying);",
          "SELECT races.year, races.name, races.date, races.time FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid JOIN races races ON qualifying.raceid = races.raceid WHERE drivers.dob = (SELECT min(dob) FROM drivers) AND qualifying.qualifyid = (SELECT min(qualifyid) FROM qualifying WHERE drivers.driverid = qualifying.driverid);",
          "SELECT races.year, races.name, races.date, races.time FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid JOIN races races ON qualifying.raceid = races.raceid WHERE drivers.dob = (SELECT min(dob) FROM drivers) AND qualifying.qualifyid = (SELECT min(qualifyid) FROM qualifying WHERE driverid = drivers.driverid);"
        ]
      ]
    },
    {
      "id": 982,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers, results results, status status WHERE drivers.driverid = results.driverid AND results.statusid = status.statusid AND drivers.nationality = 'American' AND status.status = 'Puncture';",
          "SELECT count(drivers.nationality = 'American') FROM drivers drivers, status status, results results WHERE drivers.driverid = results.driverid AND results.statusid = status.statusid AND status.status = 'Puncture';",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers, status status, results results WHERE drivers.driverid = results.driverid AND results.statusid = status.statusid AND status.status = 'Puncture' AND drivers.nationality = 'American';",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers, results results, status status WHERE drivers.driverid = results.driverid AND results.statusid = status.statusid AND status.status = 'Puncture' AND drivers.nationality = 'American';"
        ]
      ]
    },
    {
      "id": 983,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT url FROM constructors WHERE nationality = 'Italian' ORDER BY points DESC LIMIT 1;",
          "SELECT constructors.url FROM constructors WHERE constructors.nationality = 'Italian' ORDER BY constructorstandings.points DESC LIMIT 1;",
          "SELECT url FROM constructors WHERE nationality = 'Italian' ORDER BY constructorstandings.points DESC LIMIT 1;",
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorstandings.points DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 984,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY sum(constructorstandings.wins) DESC LIMIT 1;",
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY sum(wins) DESC LIMIT 1;",
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.constructorid ORDER BY sum(constructorstandings.wins) DESC LIMIT 1;",
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.constructorid ORDER BY sum(wins) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 985,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' AND laptimes.lap = 3 ORDER BY laptimes.milliseconds ASC LIMIT 1;",
          "SELECT drivers.forename FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' AND laptimes.lap = 3 ORDER BY laptimes.milliseconds DESC LIMIT 1;",
          "SELECT drivers.forename FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' AND laptimes.lap = 3 ORDER BY laptimes.milliseconds ASC LIMIT 1;",
          "SELECT drivers.forename FROM drivers INNER JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' AND laptimes.lap = 3 ORDER BY laptimes.milliseconds ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 986,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT Min(laptimes.milliseconds) FROM laptimes WHERE laptimes.lap = 1;",
          "SELECT MIN(laptimes.milliseconds) FROM laptimes WHERE laptimes.lap = 1;",
          "SELECT Min(laptimes.milliseconds) FROM laptimes WHERE laptimes.lap = 1 AND laptimes.milliseconds IS NOT NULL;",
          "SELECT MIN(laptimes.milliseconds) FROM laptimes WHERE laptimes.lap = 1 AND laptimes.milliseconds IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 987,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(laptimes.milliseconds) FROM laptimes laptimes INNER JOIN drivers drivers ON laptimes.driverid = drivers.driverid INNER JOIN races races ON laptimes.raceid = races.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND laptimes.position < 11;",
          "SELECT AVG(laptimes.milliseconds) FROM laptimes laptimes INNER JOIN drivers drivers ON laptimes.driverid = drivers.driverid INNER JOIN races races ON laptimes.raceid = races.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND laptimes.position < 11;",
          "SELECT avg(laptimes.milliseconds) FROM laptimes laptimes INNER JOIN drivers drivers ON laptimes.driverid = drivers.driverid INNER JOIN races races ON laptimes.raceid = races.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' ORDER BY laptimes.milliseconds LIMIT 10;",
          "SELECT avg(laptimes.milliseconds) FROM laptimes laptimes INNER JOIN drivers drivers ON laptimes.driverid = drivers.driverid INNER JOIN races races ON laptimes.raceid = races.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND drivers.driverref = 'driver' AND laptimes.position < 11;"
        ]
      ]
    },
    {
      "id": 988,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN driverstandings ON pitstops.raceid = driverstandings.raceid INNER JOIN races ON pitstops.raceid = races.raceid INNER JOIN constructors ON driverstandings.raceid = constructors.constructorid WHERE constructors.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1985' GROUP BY drivers.driverid ORDER BY avg(pitstops.duration) ASC LIMIT 3;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN driverstandings ON pitstops.raceid = driverstandings.raceid INNER JOIN races ON pitstops.raceid = races.raceid INNER JOIN constructors ON driverstandings.raceid = constructors.constructorid WHERE constructors.nationality = 'German' AND year(drivers.dob) BETWEEN 1980 AND 1985 GROUP BY drivers.driverid ORDER BY avg(pitstops.duration) ASC LIMIT 3;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN driverstandings ON pitstops.raceid = driverstandings.raceid INNER JOIN races ON pitstops.raceid = races.raceid INNER JOIN constructors ON driverstandings.raceid = constructors.constructorid WHERE constructors.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1985' GROUP BY drivers.forename, drivers.surname ORDER BY avg(pitstops.duration) ASC LIMIT 3;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN driverstandings ON pitstops.raceid = driverstandings.raceid INNER JOIN races ON pitstops.raceid = races.raceid INNER JOIN constructors ON driverstandings.raceid = constructors.constructorid WHERE constructors.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1985' GROUP BY drivers.driverid ORDER BY avg(pitstops.duration) LIMIT 3;"
        ]
      ]
    },
    {
      "id": 989,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.resultid = 1;",
          "SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.resultid = 2008;",
          "SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.resultid = 2008 AND races.year = 2008;",
          "SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.circuitid = 1;"
        ]
      ]
    },
    {
      "id": 990,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructorref, url FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND results.position = 1;",
          "SELECT constructorref, url FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND races.circuitid = 1;",
          "SELECT races.year, constructors.constructorref, constructors.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructorresults ON results.resultid = constructorresults.resultid INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE races.year = 2009;",
          "SELECT races.year, constructors.constructorref, constructors.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructorresults ON results.resultid = constructorresults.constructorresultsid INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE races.year = 2009;"
        ]
      ]
    },
    {
      "id": 991,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981' AND '1991';",
          "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.dob BETWEEN '1981' AND '1991' AND drivers.nationality = 'Austrian';",
          "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND dob BETWEEN '1981' AND '1991';",
          "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN constructors ON races.constructorid = constructors.constructorid WHERE constructors.nationality = 'Austrian' AND races.year BETWEEN '1981' AND '1991';"
        ]
      ]
    },
    {
      "id": 992,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;",
          "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971' AND '1985' ORDER BY drivers.dob DESC;",
          "SELECT drivers.forename, drivers.surname, constructors.url, drivers.dob FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN constructors ON races.raceid = constructors.constructorid WHERE drivers.nationality = 'German' AND year(drivers.dob) BETWEEN '1971' AND '1985' ORDER BY drivers.dob DESC;",
          "SELECT drivers.forename, drivers.surname, constructors.url, drivers.dob FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN constructors ON races.raceid = constructors.constructorid WHERE drivers.nationality = 'German' AND YEAR(drivers.dob) BETWEEN '1971' AND '1985' ORDER BY drivers.dob DESC;"
        ]
      ]
    },
    {
      "id": 993,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';",
          "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';",
          "SELECT circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';",
          "SELECT circuits.location, circuits.country, circuits.lng, circuits.lat FROM circuits WHERE circuits.name = 'Hungaroring';"
        ]
      ]
    },
    {
      "id": 994,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.year BETWEEN 1980 AND 2010 AND races.name = 'Monaco Grand Prix' ORDER BY constructorresults.points DESC LIMIT 1;",
          "SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorresults.points DESC LIMIT 1;",
          "SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.year BETWEEN 1980 AND 2010 AND races.name = 'Monaco Grand Prix';",
          "SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.year >= 1980 AND races.year <= 2010 AND races.name = 'Monaco Grand Prix' ORDER BY constructorresults.points DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 995,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Turkish Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT avg(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Turkish Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT avg(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Turkish Grand Prix' AND drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton';",
          "SELECT avg(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix';"
        ]
      ]
    },
    {
      "id": 996,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(races.year) FROM races WHERE races.date BETWEEN '2000-01-01' AND '2010-12-31';",
          "SELECT avg(count(races.raceid)) FROM races WHERE strftime('%Y', races.date) BETWEEN '2000' AND '2010';",
          "SELECT avg(count(races.raceid)) FROM races WHERE races.date BETWEEN '2000-01-01' AND '2010-12-31';",
          "SELECT avg(count(races.raceid)) FROM races WHERE races.year BETWEEN 2000 AND 2010;"
        ]
      ]
    },
    {
      "id": 997,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1;",
          "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(driverid) DESC LIMIT 1;",
          "SELECT MAX(nationality) FROM drivers;",
          "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 998,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT wins FROM driverstandings WHERE position = 91;",
          "SELECT sum(results.wins) FROM results INNER JOIN driverstandings ON results.driverid = driverstandings.driverid WHERE driverstandings.position = 91;",
          "SELECT count(results.resultid) FROM results INNER JOIN driverstandings ON results.driverid = driverstandings.driverid WHERE driverstandings.position = 91;",
          "SELECT count(results.resultid) FROM results INNER JOIN driverstandings ON results.raceid = driverstandings.raceid WHERE driverstandings.position = 91 AND driverstandings.wins = 1;"
        ]
      ]
    },
    {
      "id": 999,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes);",
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN results ON laptimes.raceid = results.raceid WHERE results.fastestlaptime = (SELECT MIN(fastestlaptime) FROM results);",
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN results ON laptimes.raceid = results.raceid WHERE results.fastestlaptime = (SELECT min(fastestlaptime) FROM results);",
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN results ON laptimes.raceid = results.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes);"
        ]
      ]
    },
    {
      "id": 1000,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.date = (SELECT max(date) FROM races);",
          "SELECT location, country FROM circuits WHERE circuitid IN (SELECT circuitid FROM races WHERE date = (SELECT max(date) FROM races));",
          "SELECT circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.date = (SELECT MAX(date) FROM races);",
          "SELECT circuits.location, circuits.country FROM circuits WHERE circuits.circuitid IN (SELECT races.circuitid FROM races WHERE races.date = (SELECT max(date) FROM races));"
        ]
      ]
    },
    {
      "id": 1001,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE qualifying.position = 1 AND qualifying.number = 3 AND circuits.name = 'Marina Bay Street Circuit' AND seasons.year = 2008;",
          "SELECT drivers.forename, drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE qualifying.position = 1 AND qualifying.number = 3 AND circuits.name = 'Marina Bay Street Circuit' AND seasons.year = 2008 ORDER BY qualifying.q3 ASC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE qualifying.position = 1 AND qualifying.number = 3 AND circuits.name = 'Marina Bay Street Circuit' AND seasons.year = 2008 ORDER BY q3 ASC LIMIT 1;",
          "SELECT drivers.forename, drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE qualifying.position = 1 AND qualifying.number = 3 AND circuits.name = 'Marina Bay Street Circuit' AND seasons.year = 2008 ORDER BY qualifying.q3 LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1002,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN races ON drivers.driverid = races.raceid ORDER BY drivers.dob LIMIT 1;",
          "SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid ORDER BY drivers.dob LIMIT 1;",
          "SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid ORDER BY drivers.dob LIMIT 1;",
          "SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1003,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE status.status = 'Accident' AND races.name = 'Canadian Grand Prix' ORDER BY results.number DESC LIMIT 1;",
          "SELECT count(results.number) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE status.status = 'Accident' AND races.name = 'Canadian Grand Prix' ORDER BY results.number DESC LIMIT 1;",
          "SELECT count(results.driverid) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE status.status = 'Accident' AND races.name = 'Canadian Grand Prix' ORDER BY results.number DESC LIMIT 1;",
          "SELECT count(results.driverid) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE status.status = 'Accident' AND races.name = 'Canadian Grand Prix' AND results.number = ( SELECT max(results.number) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE status.status = 'Accident' AND races.name = 'Canadian Grand Prix' );"
        ]
      ]
    },
    {
      "id": 1004,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE driverstandings.raceid = (SELECT MIN(raceid) FROM races);",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE driverstandings.wins = (SELECT min(wins) FROM driverstandings);",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE driverstandings.wins = (SELECT MIN(dob) FROM drivers);",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE driverstandings.wins = (SELECT MIN(driverstandings.wins) FROM driverstandings);"
        ]
      ]
    },
    {
      "id": 1005,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(duration) FROM pitstops;",
          "SELECT max(pitstops.duration) FROM pitstops;",
          "SELECT max(pitstops.duration) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid;",
          "SELECT max(pitstops.duration) FROM pitstops JOIN drivers ON pitstops.driverid = drivers.driverid;"
        ]
      ]
    },
    {
      "id": 1006,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT laptimes.time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds ASC LIMIT 1;",
          "SELECT MIN(laptimes.time) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid;",
          "SELECT MIN(laptimes.time) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.circuitid = 23;",
          "SELECT laptimes.time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.circuitid = 23 ORDER BY laptimes.milliseconds ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1007,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(duration) FROM pitstops WHERE driverid = 452;",
          "SELECT max(pitstops.duration) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT MAX(pitstops.duration) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT max(duration) FROM pitstops WHERE driverid = 1;"
        ]
      ]
    },
    {
      "id": 1008,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT pitstops.lap FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix';",
          "SELECT pitstops.lap FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix';",
          "SELECT pitstops.lap FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = '2011' AND races.name = 'Australian Grand Prix';",
          "SELECT pitstops.lap FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.name = 'Australian Grand Prix' AND races.year = 2011;"
        ]
      ]
    },
    {
      "id": 1009,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT duration FROM pitstops JOIN drivers ON pitstops.driverid = drivers.driverid JOIN races ON pitstops.raceid = races.raceid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';",
          "SELECT duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';",
          "SELECT duration FROM pitstops JOIN drivers ON pitstops.driverid = drivers.driverid JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2011;",
          "SELECT drivers.driverref, pitstops.duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';"
        ]
      ]
    },
    {
      "id": 1010,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT laptimes.time FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.name = 'Formula_1';",
          "SELECT laptimes.milliseconds FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.name = 'Formula_1';",
          "SELECT laptimes.lap FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.name = 'Formula_1';",
          "SELECT laptimes.milliseconds FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton' AND races.name = 'Formula_1';"
        ]
      ]
    },
    {
      "id": 1011,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes) GROUP BY drivers.forename, drivers.surname LIMIT 20;",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes) GROUP BY drivers.forename, drivers.surname ORDER BY count(*) DESC LIMIT 20;",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes WHERE laptimes.raceid = races.raceid) GROUP BY drivers.forename, drivers.surname LIMIT 20;",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid) GROUP BY drivers.forename, drivers.surname LIMIT 20;"
        ]
      ]
    },
    {
      "id": 1012,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT position FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND laptimes.lap = results.fastestlap;",
          "SELECT position FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND laptimes.lap = results.fastestlap AND races.name = 'Formula_1';",
          "SELECT position FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.name = 'Formula_1' ORDER BY laptimes.milliseconds ASC LIMIT 1;",
          "SELECT position FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND results.fastestlap = laptimes.lap AND races.name = 'Formula_1';"
        ]
      ]
    },
    {
      "id": 1013,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT MAX(laptimes.milliseconds) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix';",
          "SELECT laptimes.lap, laptimes.milliseconds FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds ASC LIMIT 1;",
          "SELECT laptimes.lap, laptimes.time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds ASC LIMIT 1;",
          "SELECT laptimes.lap, laptimes.milliseconds FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1014,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT time FROM laptimes WHERE raceid IN (SELECT raceid FROM races WHERE circuitid IN (SELECT circuitid FROM circuits WHERE country = 'Italy'));",
          "SELECT time FROM laptimes WHERE raceid IN (SELECT raceid FROM races WHERE circuits.country = 'Italy');",
          "SELECT time FROM laptimes JOIN races ON laptimes.raceid = races.raceid WHERE circuits.country = 'Italy';",
          "SELECT * FROM laptimes WHERE raceid IN (SELECT raceid FROM races WHERE circuitid IN (SELECT circuitid FROM circuits WHERE country = 'Italy'));"
        ]
      ]
    },
    {
      "id": 1015,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT MAX(laptimes.milliseconds) FROM laptimes WHERE laptimes.raceid = races.raceid);",
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds = (SELECT MAX(laptimes.milliseconds) FROM laptimes WHERE laptimes.raceid = races.raceid);",
          "SELECT races.name FROM races INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.time = (SELECT MAX(laptimes.time) FROM laptimes WHERE laptimes.raceid = races.raceid);",
          "SELECT races.name FROM races INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT MAX(laptimes.milliseconds) FROM laptimes WHERE laptimes.raceid = races.raceid) AND races.circuitid = (SELECT circuits.circuitid FROM circuits WHERE circuits.name = 'Austrian Grand Prix');"
        ]
      ]
    },
    {
      "id": 1016,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT pitstops.duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix' AND drivers.driverref = 'driver';",
          "SELECT pitstops.duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.driverref = 'driver' AND races.name = 'Austrian Grand Prix';",
          "SELECT pitstops.duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix' AND drivers.surname = 'Driver';",
          "SELECT pitstops.duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix';"
        ]
      ]
    },
    {
      "id": 1017,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lng, circuits.lat FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.time = '1:29.488';",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.time = '1:29.488';",
          "SELECT circuits.lng, circuits.lat FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.time = '1:29.488';",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.time = '1:29.488';"
        ]
      ]
    },
    {
      "id": 1018,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton';",
          "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton';",
          "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton';",
          "SELECT AVG(pitstops.milliseconds) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Formula_1' AND drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton';"
        ]
      ]
    },
    {
      "id": 1019,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(laptimes.milliseconds) AS REAL) / count(laptimes.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';",
          "SELECT cast(sum(laptimes.milliseconds) AS REAL) / count(DISTINCT circuits.circuitid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';",
          "SELECT cast(sum(laptimes.milliseconds) AS REAL) / count(DISTINCT circuits.circuitid) AS average FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';",
          "SELECT cast(sum(laptimes.milliseconds) AS REAL) / count(DISTINCT circuits.circuitid) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE circuits.country = 'Italy';"
        ]
      ]
    },
    {
      "id": 1020,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
          "SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1;",
          "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
          "SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1021,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height = (SELECT MAX(height) FROM player);",
          "SELECT player_name , height FROM player ORDER BY height DESC LIMIT 1;",
          "SELECT player_name FROM player WHERE height = (SELECT max(height) FROM player);",
          "SELECT player_name , height FROM player WHERE height = (SELECT MAX(height) FROM player);"
        ]
      ]
    },
    {
      "id": 1022,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT min(potential) FROM player_attributes);",
          "SELECT player_attributes.preferred_foot FROM player_attributes WHERE player_attributes.potential = (SELECT min(potential) FROM player_attributes);",
          "SELECT player_attributes.preferred_foot FROM player_attributes WHERE player_attributes.potential IS NOT NULL ORDER BY player_attributes.potential ASC LIMIT 1;",
          "SELECT player_attributes.preferred_foot FROM player_attributes WHERE player_attributes.potential = (SELECT MIN(potential) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1023,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65 AND player_attributes.attacking_work_rate = 'low';",
          "SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.attacking_work_rate = 'low';",
          "SELECT count(player_attributes.id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65 AND player_attributes.attacking_work_rate = 'low';",
          "SELECT count(*) FROM player_attributes INNER JOIN match ON player_attributes.player_api_id = match.away_player_11 WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65;"
        ]
      ]
    },
    {
      "id": 1024,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.crossing DESC LIMIT 5;",
          "SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5;",
          "SELECT player_attributes.id FROM player_attributes ORDER BY player_attributes.crossing DESC LIMIT 5;",
          "SELECT player.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 1025,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT name FROM league WHERE id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));",
          "SELECT l.name FROM league l WHERE l.id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));",
          "SELECT l.name FROM league l WHERE l.id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));",
          "SELECT l.name FROM league l WHERE l.id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(SUM) FROM (SELECT SUM(home_team_goal + away_team_goal) AS SUM FROM match WHERE season = '2015/2016' GROUP BY league_id)));"
        ]
      ]
    },
    {
      "id": 1026,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' ORDER BY SUBTRACT(home_team_goal, away_team_goal) ASC LIMIT 1;",
          "SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0;",
          "SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0 ORDER BY SUBTRACT(match.home_team_goal, match.away_team_goal) ASC LIMIT 1;",
          "SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0 ORDER BY match.home_team_goal ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1027,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player_attributes ORDER BY penalties DESC LIMIT 10;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;",
          "SELECT player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;"
        ]
      ]
    },
    {
      "id": 1028,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM league league JOIN match match ON league.id = match.league_id JOIN team team ON match.away_team_api_id = team.team_api_id WHERE league.name = 'Scotland Premier League' AND match.season = '2009/2010' GROUP BY team.team_long_name HAVING MAX(SUBTRACT(match.away_team_goal, match.home_team_goal)) > 0 ORDER BY COUNT(*) DESC LIMIT 1;",
          "SELECT team.team_long_name FROM league league JOIN match match ON league.id = match.league_id JOIN team team ON match.away_team_api_id = team.team_api_id WHERE league.name = 'Scotland Premier League' AND match.season = '2009/2010' GROUP BY team.team_long_name ORDER BY MAX(SUBTRACT(match.away_team_goal, match.home_team_goal)) > 0 DESC LIMIT 1;",
          "SELECT team.team_long_name FROM league league JOIN match match ON league.id = match.league_id JOIN team team ON match.away_team_api_id = team.team_api_id WHERE league.name = 'Scotland Premier League' AND match.season = '2009/2010' GROUP BY team.team_long_name HAVING MAX(SUBTRACT(away_team_goal, home_team_goal)) > 0 ORDER BY COUNT(*) DESC LIMIT 1;",
          "SELECT team.team_long_name FROM league league JOIN match match ON league.id = match.league_id JOIN team team ON match.away_team_api_id = team.team_api_id WHERE league.name = 'Scotland Premier League' AND match.season = '2009/2010' GROUP BY match.away_team_api_id HAVING MAX(SUBTRACT(match.away_team_goal, match.home_team_goal)) > 0 ORDER BY COUNT(*) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1029,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT buildupplayspeed FROM team_attributes ORDER BY buildupplayspeed DESC LIMIT 4;",
          "SELECT team_attributes.buildupplayspeed FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4;",
          "SELECT buildupplayspeed FROM team_attributes WHERE team_api_id IN (SELECT team_api_id FROM team ORDER BY buildupplayspeed DESC LIMIT 4);",
          "SELECT team_attributes.buildupplayspeed FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY buildupplayspeed DESC LIMIT 4;"
        ]
      ]
    },
    {
      "id": 1030,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY SUM(home_team_goal = away_team_goal) DESC LIMIT 1;",
          "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY SUM(match.home_team_goal = match.away_team_goal) DESC LIMIT 1;",
          "SELECT league.name FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY SUM(home_team_goal = away_team_goal) DESC LIMIT 1;",
          "SELECT league.name FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY SUM(match.home_team_goal = match.away_team_goal) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1031,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.sprint_speed >= 97 AND YEAR(player_attributes.date) >= '2013' AND YEAR(player_attributes.date) <= '2015';",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.sprint_speed >= 97 AND YEAR(player_attributes.date) >= '2013' AND YEAR(player_attributes.date) <= '2015';",
          "SELECT player.id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.sprint_speed >= 97 AND YEAR(date) >= '2013' AND YEAR(date) <= '2015';",
          "SELECT player.id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE sprint_speed >= 97 AND YEAR(date) >= '2013' AND YEAR(date) <= '2015';"
        ]
      ]
    },
    {
      "id": 1032,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name, count(match.id) FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 1;",
          "SELECT league.name, count(match.id) FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.id ORDER BY count(match.id) DESC LIMIT 1;",
          "SELECT league.name, count(match.id) FROM match INNER JOIN league ON match.league_id = league.id GROUP BY league.id ORDER BY count(match.id) DESC LIMIT 1;",
          "SELECT league.name, count(match.id) FROM match INNER JOIN league ON match.league_id = league.id GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1033,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player.height) FROM player WHERE player.birthday >= '1990-01-01 00:00:00' AND player.birthday < '1996-01-01 00:00:00';",
          "SELECT avg(player.height) FROM player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';",
          "SELECT avg(cast(player.height AS REAL)) FROM player WHERE player.birthday >= '1990-01-01 00:00:00' AND player.birthday < '1996-01-01 00:00:00';",
          "SELECT avg(height) FROM player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"
        ]
      ]
    },
    {
      "id": 1034,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE substr(player_attributes.date,1,4) = '2010' ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
          "SELECT player_attributes.player_api_id FROM player_attributes WHERE substr(player_attributes.date,1,4) = '2010' AND player_attributes.overall_rating > (SELECT AVG(player_attributes.overall_rating) FROM player_attributes WHERE substr(player_attributes.date,1,4) = '2010');",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE substr(player_attributes.date,1,4) = '2010' AND player_attributes.overall_rating > (SELECT AVG(player_attributes.overall_rating) FROM player_attributes);",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE substr(player_attributes.date,1,4) = '2010' AND player_attributes.overall_rating > (SELECT AVG(overall_rating) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1035,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.team_fifa_api_id FROM team_attributes WHERE team_attributes.buildupplayspeed > 50 AND team_attributes.buildupplayspeed < 60;",
          "SELECT team_attributes.team_fifa_api_id FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed > 50 AND team_attributes.buildupplayspeed < 60;",
          "SELECT team_attributes.team_fifa_api_id FROM team_attributes WHERE team_attributes.buildupplayspeed >50 AND team_attributes.buildupplayspeed <60;",
          "SELECT team_attributes.team_fifa_api_id FROM team_attributes WHERE buildupplayspeed > 50 AND buildupplayspeed < 60;"
        ]
      ]
    },
    {
      "id": 1036,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_long_name FROM team_attributes WHERE buildupplaypassingclass = 'Long' AND strftime('%Y', date) = '2012';",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassingclass = 'Long' AND strftime('%Y', team_attributes.date) = '2012';",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassingclass = 'Long';",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing > DIVidE(SUM(buildupplaypassing), COUNT(team_long_name) WHERE buildupplaypassing IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 1037,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN preferred_foot = 'left' AND YEAR(birthday) BETWEEN '1987' AND '1992' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player_attributes;",
          "SELECT cast(sum(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE YEAR(player.birthday) BETWEEN '1987' AND '1992';",
          "SELECT cast(sum(CASE WHEN preferred_foot = 'left' AND YEAR(birthday) BETWEEN '1987' AND '1992' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player_attributes WHERE preferred_foot = 'left';",
          "SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE YEAR(player.birthday) BETWEEN '1987' AND '1992';"
        ]
      ]
    },
    {
      "id": 1038,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT name FROM league ORDER BY SUM(home_team_goal + away_team_goal) ASC LIMIT 5;",
          "SELECT league.name FROM league JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY SUM(match.home_team_goal + match.away_team_goal) ASC LIMIT 5;",
          "SELECT league.name FROM league JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY sum(match.home_team_goal + match.away_team_goal) ASC LIMIT 5;",
          "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY sum(match.home_team_goal + match.away_team_goal) ASC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 1039,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(long_shots) FROM player_attributes WHERE player_fifa_api_id = 218353;",
          "SELECT avg(long_shots) FROM player_attributes WHERE player_attributes.player_fifa_api_id = 218353;",
          "SELECT avg(long_shots) FROM player_attributes;",
          "SELECT avg(long_shots) FROM player_attributes WHERE player_fifa_api_id IN (SELECT player_fifa_api_id FROM player WHERE player_name = 'Ahmed Samir Farag');"
        ]
      ]
    },
    {
      "id": 1040,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY AVG(heading_accuracy) DESC LIMIT 10;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id GROUP BY player.player_name HAVING player.height > 180 ORDER BY AVG(heading_accuracy) DESC LIMIT 10;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY AVG(heading_accuracy) DESC LIMIT 10;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY AVG(heading_accuracy) DESC LIMIT 10;"
        ]
      ]
    },
    {
      "id": 1041,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_long_name FROM team_attributes WHERE buildupplaydribblingclass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' ORDER BY chancecreationpassing DESC;",
          "SELECT team_long_name FROM team_attributes WHERE buildupplaydribblingclass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' GROUP BY team_long_name ORDER BY chancecreationpassing DESC;",
          "SELECT team_long_name FROM team_attributes WHERE buildupplaydribblingclass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' GROUP BY team_long_name ORDER BY SUM(chancecreationpassing) / COUNT(id) DESC;",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE buildupplaydribblingclass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' ORDER BY chancecreationpassing DESC;"
        ]
      ]
    },
    {
      "id": 1042,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT name FROM league WHERE id IN (SELECT league_id FROM match WHERE season = '2009/2010' GROUP BY league_id HAVING AVG(home_team_goal) > AVG(away_team_goal));",
          "SELECT name FROM league WHERE id IN (SELECT league_id FROM match WHERE season = '2009/2010' AND AVG(home_team_goal) > AVG(away_team_goal));",
          "SELECT league.name FROM league JOIN match ON league.id = match.league_id WHERE match.season = '2009/2010' AND AVG(match.home_team_goal) > AVG(match.away_team_goal);",
          "SELECT league.name FROM league JOIN match ON league.id = match.league_id WHERE match.season = '2009/2010' GROUP BY league.name HAVING AVG(match.home_team_goal) > AVG(match.away_team_goal);"
        ]
      ]
    },
    {
      "id": 1043,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers';",
          "SELECT team.team_short_name FROM team WHERE team.team_long_name = 'Queens Park Rangers';",
          "SELECT team.team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers';",
          "SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers';"
        ]
      ]
    },
    {
      "id": 1044,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT * FROM player WHERE substr(birthday,1,7) = '1970-10';",
          "SELECT player_name FROM player WHERE substr(birthday,1,7) = '1970-10';",
          "SELECT player.player_name FROM player WHERE substr(birthday,1,7) = '1970-10';",
          "SELECT * FROM player WHERE substr(birthday,1,7) = '1970-10';"
        ]
      ]
    },
    {
      "id": 1045,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Franco Zennaro';",
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';",
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Franco Zennaro';",
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 1046,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaypositioningclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag';",
          "SELECT team_attributes.buildupplaypositioningclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'ADO Den Haag';",
          "SELECT team_attributes.buildupplaypositioningclass FROM team_attributes WHERE team_attributes.team_long_name = 'ADO Den Haag';",
          "SELECT buildupplaypositioningclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag';"
        ]
      ]
    },
    {
      "id": 1047,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT heading_accuracy FROM player_attributes WHERE player_api_id = 505942 AND date = '2014-09-18 00:00:00';",
          "SELECT heading_accuracy FROM player_attributes WHERE date = '2014-09-18 00:00:00' AND player_name = 'Francois Affolter';",
          "SELECT heading_accuracy FROM player_attributes WHERE date = '2014-09-18 00:00:00' AND player_api_id = 505942;",
          "SELECT heading_accuracy FROM player_attributes WHERE date = '2014-09-18 00:00:00' AND player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Francois Affolter');"
        ]
      ]
    },
    {
      "id": 1048,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT overall_rating FROM player_attributes WHERE player_api_id = 2011 AND strftime('%Y', date) = '2011';",
          "SELECT overall_rating FROM player_attributes WHERE strftime('%Y', date) = '2011' AND player_api_id = 2011;",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', date) = '2011';",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>' AND strftime('%Y', date) = '2011';"
        ]
      ]
    },
    {
      "id": 1049,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND league.name = 'Scotland Premier League';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND country.name = 'Scotland' AND league.name = 'Scotland Premier league';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND country.name = 'Scotland' AND league.name = 'Scotland Premier League';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND country.name = 'Scotland';"
        ]
      ]
    },
    {
      "id": 1050,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id IN (SELECT player_fifa_api_id FROM player WHERE birthday = (SELECT max(birthday) FROM player));",
          "SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE birthday = (SELECT max(birthday) FROM player));",
          "SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE birthday = (SELECT max(birthday) FROM player)) AND attacking_work_rate = 'medium';",
          "SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id IN (SELECT player_fifa_api_id FROM player WHERE birthday = (SELECT max(birthday) FROM player)) AND attacking_work_rate = 'medium';"
        ]
      ]
    },
    {
      "id": 1051,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT * FROM player_attributes ORDER BY potential DESC LIMIT 1;",
          "SELECT * FROM player_attributes WHERE potential = (SELECT MAX(potential) FROM player_attributes);",
          "SELECT * FROM player_attributes ORDER BY player_attributes.potential DESC LIMIT 1;",
          "SELECT * FROM player_attributes WHERE potential = (SELECT max(potential) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1052,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player_attributes WHERE weight < 130 AND preferred_foot = 'left';",
          "SELECT count(player_api_id) FROM player_attributes WHERE weight < 130 AND preferred_foot = 'left';",
          "SELECT count(DISTINCT player_attributes.player_api_id) FROM player_attributes WHERE weight < 130 AND preferred_foot = 'left';",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes WHERE player_attributes.preferred_foot = 'left' AND player_attributes.weight < 130;"
        ]
      ]
    },
    {
      "id": 1053,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team_attributes WHERE chancecreationpassingclass = 'Risky';",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky';",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky';",
          "SELECT team.team_short_name FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky';"
        ]
      ]
    },
    {
      "id": 1054,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'David Wilson';",
          "SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';",
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'David Wilson';",
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 1055,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.birthday FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
          "SELECT player.birthday FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY overall_rating DESC LIMIT 1;",
          "SELECT player.birthday FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);",
          "SELECT birthday FROM player_attributes WHERE player_api_id IN (SELECT MAX(overall_rating) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1056,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands';",
          "SELECT league.name FROM country INNER JOIN league ON country.id = league.country_id WHERE country.name = 'Netherlands';",
          "SELECT league.name FROM league WHERE league.country_id = (SELECT country.id FROM country WHERE country.name = 'Netherlands');",
          "SELECT league.name FROM league WHERE league.country_id = ( SELECT country.id FROM country WHERE country.name = 'Netherlands' );"
        ]
      ]
    },
    {
      "id": 1057,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(home_team_goal) AS average_home_team_goal FROM match WHERE name = 'Poland' AND season = '2010/2011';",
          "SELECT avg(match.home_team_goal) AS average_home_team_goal FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';",
          "SELECT avg(home_team_goal) AS average_home_team_goal FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';",
          "SELECT avg(match.home_team_goal) AS average_home_team_goal FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id INNER JOIN country ON team.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';"
        ]
      ]
    },
    {
      "id": 1058,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id GROUP BY player_attributes.player_api_id, player_attributes.player_name ORDER BY avg(player_attributes.finishing) DESC LIMIT 1;",
          "SELECT player_attributes.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height = (SELECT max(height) FROM player) AND player.height = (SELECT min(height) FROM player) ORDER BY player_attributes.finishing DESC LIMIT 1;",
          "SELECT player_attributes.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.finishing = (SELECT max(finishing) FROM player_attributes) AND player.height = (SELECT max(height) FROM player) AND player.height = (SELECT min(height) FROM player);",
          "SELECT player_attributes.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.finishing = (SELECT max(finishing) FROM player_attributes) AND player.height = (SELECT max(height) FROM player) OR player.height = (SELECT min(height) FROM player);"
        ]
      ]
    },
    {
      "id": 1059,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height > 180;",
          "SELECT player.player_name FROM player WHERE player.height > 180;",
          "SELECT player_name FROM player WHERE height>180;",
          "SELECT player.player_name FROM player WHERE player.height>180;"
        ]
      ]
    },
    {
      "id": 1060,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player WHERE strftime('%Y', birthday) > '1990';",
          "SELECT count(player_name) FROM player WHERE strftime('%Y', birthday) > '1990';",
          "SELECT count(id) FROM player WHERE strftime('%Y', birthday) > '1990';",
          "SELECT count(*) FROM player WHERE strftime('%Y', birthday) > 1990;"
        ]
      ]
    },
    {
      "id": 1061,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name LIKE 'Adam%' AND player_attributes.strength > 170;",
          "SELECT count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight > 170 AND player.player_name LIKE 'Adam%';",
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Adam' AND player_attributes.strength > 170;",
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name LIKE 'Adam%' AND player_attributes.weight > 170;"
        ]
      ]
    },
    {
      "id": 1062,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010';",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010';",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE overall_rating > 80 AND strftime('%Y', date) BETWEEN '2008' AND '2010';",
          "SELECT DISTINCT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010';"
        ]
      ]
    },
    {
      "id": 1063,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT potential FROM player_attributes WHERE player_api_id = 505942;",
          "SELECT player_attributes.potential FROM player_attributes WHERE player_attributes.player_api_id = 505942;",
          "SELECT potential FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Doran');",
          "SELECT player_attributes.potential FROM player_attributes WHERE player_attributes.player_api_id = (SELECT player.player_api_id FROM player WHERE player.player_name = 'Aaron Doran');"
        ]
      ]
    },
    {
      "id": 1064,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT * FROM player_attributes WHERE preferred_foot = 'left';",
          "SELECT player_name FROM player_attributes WHERE preferred_foot = 'left';",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left';",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left';"
        ]
      ]
    },
    {
      "id": 1065,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_long_name FROM team_attributes WHERE buildupplayspeedclass = 'Fast';",
          "SELECT team.team_long_name FROM team_attributes WHERE team_attributes.buildupplayspeedclass = 'Fast';",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';"
        ]
      ]
    },
    {
      "id": 1066,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'CLB';",
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_short_name = 'CLB';",
          "SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB';",
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes WHERE team_attributes.team_api_id = (SELECT team.team_api_id FROM team WHERE team.team_short_name = 'CLB');"
        ]
      ]
    },
    {
      "id": 1067,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team_attributes WHERE buildupplaypassing > 70;",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplaypassing > 70;",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE buildupplaypassing > 70;",
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassing > 70;"
        ]
      ]
    },
    {
      "id": 1068,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 170;",
          "SELECT sum(player_attributes.overall_rating) / count(player_attributes.id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 170;",
          "SELECT sum(player_attributes.overall_rating) / count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 170;",
          "SELECT avg(t2.overall_rating) FROM player_attributes AS t1 INNER JOIN player AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.height > 170 AND strftime('%Y', t1.date) >= '2010' AND strftime('%Y', t1.date) <= '2015';"
        ]
      ]
    },
    {
      "id": 1069,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player ORDER BY height ASC LIMIT 1;",
          "SELECT player_name FROM player ORDER BY height LIMIT 1;",
          "SELECT DISTINCT player_name FROM player ORDER BY height ASC LIMIT 1;",
          "SELECT player.player_name FROM player ORDER BY player.height ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1070,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT name FROM country WHERE id IN (SELECT country_id FROM league WHERE name = 'Italy Serie A');",
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A';",
          "SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Italy Serie A';",
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE name = 'Italy Serie A';"
        ]
      ]
    },
    {
      "id": 1071,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team_attributes team_attributes JOIN team team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;",
          "SELECT team.team_short_name FROM team_attributes team_attributes JOIN team team ON team_attributes.team_api_id = team.team_api_id AND team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;",
          "SELECT team.team_short_name FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;",
          "SELECT team.team_short_name FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;"
        ]
      ]
    },
    {
      "id": 1072,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran';",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name LIKE 'Aaron Doran';",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name LIKE '<NAME>';"
        ]
      ]
    },
    {
      "id": 1073,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany' AND league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10' AND league.name = 'Germany 1. Bundesliga';"
        ]
      ]
    },
    {
      "id": 1074,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team JOIN match ON team.team_api_id = match.home_team_api_id WHERE match.home_team_goal = 10;",
          "SELECT team.team_short_name FROM team INNER JOIN match ON team.team_api_id = match.home_team_api_id WHERE match.home_team_goal = 10;",
          "SELECT team.team_short_name FROM team WHERE team.home_team_goal = 10;",
          "SELECT team.team_short_name FROM team JOIN match ON team.team_api_id = match.home_team_api_id WHERE home_team_goal = 10;"
        ]
      ]
    },
    {
      "id": 1075,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT * FROM player_attributes WHERE balance = (SELECT max(balance) FROM player_attributes WHERE balance = 61) AND potential = 61;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.balance = (SELECT max(balance) FROM player_attributes WHERE balance = 61) AND player_attributes.potential = 61;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.balance = (SELECT max(balance) FROM player_attributes WHERE balance = 61) AND player_attributes.potential = 61;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.potential = 61 AND player_attributes.balance = (SELECT max(balance) FROM player_attributes WHERE balance IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 1076,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')) FROM player_attributes;",
          "SELECT SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')) AS difference FROM player_attributes;",
          "SELECT SUBTRACT(AVG(player_attributes.ball_control), AVG(player_attributes.ball_control)) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Abdou Diallo';",
          "SELECT SUBTRACT(AVG(player_attributes.ball_control WHERE player_name = 'Abdou Diallo'), AVG(player_attributes.ball_control WHERE player_name = 'Aaron Appindangoye')) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;"
        ]
      ]
    },
    {
      "id": 1077,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team WHERE team.team_short_name = 'GEN';",
          "SELECT team.team_long_name FROM team WHERE team_short_name = 'GEN';",
          "SELECT team.team_long_name FROM team WHERE team.team_short_name LIKE 'GEN';",
          "SELECT DISTINCT team.team_long_name FROM team WHERE team.team_short_name = 'GEN';"
        ]
      ]
    },
    {
      "id": 1078,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player ORDER BY birthday LIMIT 1;",
          "SELECT player_name FROM player ORDER BY birthday DESC LIMIT 1;",
          "SELECT player_name FROM player WHERE birthday = ( SELECT max(birthday) FROM player );",
          "SELECT player_name FROM player WHERE birthday = ( SELECT max(birthday) FROM player ) UNION SELECT player_name FROM player WHERE birthday = ( SELECT min(birthday) FROM player );"
        ]
      ]
    },
    {
      "id": 1079,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height = (SELECT MAX(height) FROM player);",
          "SELECT player_name FROM player WHERE height = (SELECT MAX(height) FROM player) LIMIT 1;",
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 1;",
          "SELECT player_name FROM player WHERE height = (SELECT max(height) FROM player) LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1080,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player_attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';",
          "SELECT count(DISTINCT player_attributes.player_api_id) FROM player_attributes player_attributes WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low';",
          "SELECT count(DISTINCT player_attributes.player_api_id) FROM player_attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';",
          "SELECT count(DISTINCT player_attributes.player_api_id) FROM player_attributes player_attributes, player player WHERE player_attributes.player_api_id = player.player_api_id AND player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low';"
        ]
      ]
    },
    {
      "id": 1081,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League';",
          "SELECT name FROM country WHERE id IN (SELECT country_id FROM league WHERE name = 'Belgium Jupiler League');",
          "SELECT name FROM country WHERE id IN (SELECT country_id FROM league WHERE name = 'Belgium Jupiler league');",
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler league';"
        ]
      ]
    },
    {
      "id": 1082,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany';",
          "SELECT league.name FROM country INNER JOIN league ON country.id = league.country_id WHERE country.name = 'Germany';",
          "SELECT league.name FROM league WHERE league.country_id = (SELECT country.id FROM country WHERE country.name = 'Germany');",
          "SELECT league.name FROM league WHERE league.country_id = ( SELECT country.id FROM country WHERE country.name = 'Germany' );"
        ]
      ]
    },
    {
      "id": 1083,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
          "SELECT max(player_attributes.overall_rating) FROM player_attributes;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
          "SELECT player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1084,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', birthday) < '1986' AND player_attributes.defensive_work_rate = 'high';",
          "SELECT count(DISTINCT player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', birthday)<'1986' AND player_attributes.defensive_work_rate = 'high';",
          "SELECT count(DISTINCT player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986' AND player_attributes.defensive_work_rate = 'high';",
          "SELECT count(DISTINCT player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', birthday) < '1986' AND player_attributes.defensive_work_rate = 'high' AND player_attributes.attacking_work_rate = 'high';"
        ]
      ]
    },
    {
      "id": 1085,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 1;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.crossing = (SELECT MAX(crossing) FROM player_attributes);",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 3;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id GROUP BY player_attributes.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1086,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT heading_accuracy FROM player_attributes WHERE player_api_id = 505942;",
          "SELECT heading_accuracy FROM player_attributes WHERE player_attributes.player_api_id = 505942;",
          "SELECT player_attributes.heading_accuracy FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';",
          "SELECT player_attributes.heading_accuracy FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ariel Borysiuk';"
        ]
      ]
    },
    {
      "id": 1087,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;",
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;",
          "SELECT count(player_attributes.id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;",
          "SELECT count(player_attributes.id) FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;"
        ]
      ]
    },
    {
      "id": 1088,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.dribbling > 70 AND player_attributes.volleys > 70;",
          "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;"
        ]
      ]
    },
    {
      "id": 1089,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(match.id) FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Belgium' AND match.season = '2008/2009';",
          "SELECT count(match.id) FROM match INNER JOIN country ON match.country_id = country.id WHERE match.season = '2008/2009' AND country.name = 'Belgium';",
          "SELECT count(match.country_id) FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Belgium' AND match.season = '2008/2009';",
          "SELECT count(match.country_id) FROM match INNER JOIN country ON match.country_id = country.id WHERE match.season = '2008/2009' AND country.name = 'Belgium';"
        ]
      ]
    },
    {
      "id": 1090,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT long_passing FROM player_attributes WHERE player_api_id = (SELECT min(player_api_id) FROM player);",
          "SELECT long_passing FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE birthday = (SELECT min(birthday) FROM player));",
          "SELECT long_passing FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE birthday = (SELECT min(birthday) FROM player));",
          "SELECT long_passing FROM player_attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE birthday = (SELECT min(birthday) FROM player));"
        ]
      ]
    },
    {
      "id": 1091,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND SUBSTR(`date`, 1, 7) = '2009-04';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND SUBSTR(match.date, 1, 7) = '2009-04';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND league.name = 'Belgium Jupiler League' AND SUBSTR(`date`, 1, 7) = '2009-04';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League' AND SUBSTR(`date`, 1, 7) = '2009-04';"
        ]
      ]
    },
    {
      "id": 1092,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league WHERE league.id = (SELECT league_id FROM match WHERE season = '2008/2009' GROUP BY league_id HAVING count(*) = (SELECT max(match_count) FROM (SELECT count(*) AS match_count FROM match WHERE season = '2008/2009' GROUP BY league_id)));",
          "SELECT l.name FROM league l WHERE l.id = (SELECT league_id FROM match WHERE season = '2008/2009' GROUP BY league_id HAVING count(*) = (SELECT max(match_count) FROM (SELECT count(*) AS match_count FROM match WHERE season = '2008/2009' GROUP BY league_id)));",
          "SELECT league.name FROM league WHERE league.id = (SELECT league_id FROM match WHERE season = '2008/2009' GROUP BY league_id HAVING count(*) = (SELECT max(matches) FROM (SELECT count(*) AS matches FROM match WHERE season = '2008/2009' GROUP BY league_id)));",
          "SELECT league.name FROM league WHERE league.id = (SELECT league_id FROM match WHERE season = '2008/2009' GROUP BY league_id HAVING count(*) = (SELECT max(match_count) FROM (SELECT count(*) AS match_count FROM match WHERE season = '2008/2009' GROUP BY league_id)));"
        ]
      ]
    },
    {
      "id": 1093,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player.birthday) < '1986';",
          "SELECT avg(overall_rating) FROM player_attributes WHERE strftime('%Y', birthday) < '1986';",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986';",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player.birthday) < '1986';"
        ]
      ]
    },
    {
      "id": 1094,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Ariel Borysiuk' ) - ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Paulin Puel' ) AS RESULT;",
          "SELECT cast((sum(CASE WHEN player.player_name = 'Ariel Borysiuk' THEN player_attributes.overall_rating END) - sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;",
          "SELECT (SELECT overall_rating FROM player_attributes WHERE player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM player_attributes WHERE player_name = 'Paulin Puel') AS RESULT;",
          "SELECT cast((sum(CASE WHEN player.player_name = '<NAME>' THEN player_attributes.overall_rating END) - sum(CASE WHEN player.player_name = '<NAME>' THEN player_attributes.overall_rating END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = '<NAME>' THEN player_attributes.overall_rating END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 1095,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(buildupplayspeed) FROM team_attributes WHERE team_long_name = 'Heart of Midlothian';",
          "SELECT AVG(buildupplayspeed) FROM team_attributes WHERE team_long_name = 'Heart of Midlothian';",
          "SELECT avg(buildupplayspeed) FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Heart of Midlothian';",
          "SELECT avg(team_attributes.buildupplayspeed) FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Heart of Midlothian';"
        ]
      ]
    },
    {
      "id": 1096,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino';",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Pietro Marino';",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 1097,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT SUM(crossing) FROM player_attributes WHERE T2.player_name = 'Aaron Lennox';",
          "SELECT SUM(crossing) FROM player_attributes WHERE player_api_id = T2.player_api_id;",
          "SELECT SUM(crossing) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennox');",
          "SELECT SUM(crossing) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE T2.player_name = 'Aaron Lennox');"
        ]
      ]
    },
    {
      "id": 1098,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name, team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1;",
          "SELECT team.team_long_name, MAX(team_attributes.chancecreationpassing), team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' GROUP BY team_attributes.chancecreationpassingclass;",
          "SELECT team.team_long_name, MAX(team_attributes.chancecreationpassing), team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax' GROUP BY team_attributes.chancecreationpassingclass;",
          "SELECT team.team_long_name, MAX(team_attributes.chancecreationpassing), team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' GROUP BY team.team_long_name, team_attributes.chancecreationpassingclass;"
        ]
      ]
    },
    {
      "id": 1099,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Abdou Diallo');",
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Abdou Diallo' );",
          "SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE player_name = 'Abdou Diallo');",
          "SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE player_name = 'Abdou Diallo') LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1100,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT MAX(overall_rating) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Dorlan Pabon');",
          "SELECT MAX(overall_rating) FROM player_attributes WHERE T2.player_name = 'Dorlan Pabon';",
          "SELECT MAX(overall_rating) FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Dorlan Pabon' );",
          "SELECT MAX(overall_rating) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE T2.player_name = 'Dorlan Pabon');"
        ]
      ]
    },
    {
      "id": 1101,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(match.away_team_goal) FROM match JOIN team ON match.away_team_api_id = team.team_api_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy';",
          "SELECT avg(match.away_team_goal) FROM match JOIN team ON match.away_team_api_id = team.team_api_id JOIN country ON team.country_id = country.id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy';",
          "SELECT avg(match.away_team_goal) FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy';",
          "SELECT avg(match.away_team_goal) FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id INNER JOIN country ON team.country_id = country.id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy';"
        ]
      ]
    },
    {
      "id": 1102,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY player.birthday ASC LIMIT 1;",
          "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE overall_rating = 77 AND date LIKE '2016-06-23%' ORDER BY birthday ASC LIMIT 1;",
          "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY player.birthday DESC LIMIT 1;",
          "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY birthday ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1103,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date LIKE '2016-02-04%';",
          "SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Mooy') AND date LIKE '2016-02-04%';",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date LIKE '2016-02-04%';",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>' AND player_attributes.date LIKE '2016-02-04%';"
        ]
      ]
    },
    {
      "id": 1104,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00';",
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00';",
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00';",
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND strftime('%Y-%m-%d %H:%M:%S', player_attributes.date) = '2010-08-30 00:00:00';"
        ]
      ]
    },
    {
      "id": 1105,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date LIKE '2015-05-01%';",
          "SELECT attacking_work_rate FROM player_attributes WHERE player_api_id = 505942 AND date LIKE '2015-05-01%';",
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>' AND player_attributes.date LIKE '2015-05-01%';",
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Migliore' AND date LIKE '2015-05-01%';"
        ]
      ]
    },
    {
      "id": 1106,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT defensive_work_rate FROM player_attributes WHERE `date` = '2013-02-22' AND player_api_id = 505942;",
          "SELECT defensive_work_rate FROM player_attributes WHERE `date` = '2013-02-22 00:00:00' AND player_api_id = 505942;",
          "SELECT defensive_work_rate FROM player_attributes WHERE date = '2013-02-22 00:00:00' AND player_name = 'Kevin Berigaud';",
          "SELECT defensive_work_rate FROM player_attributes WHERE `date` = '2013-02-22 00:00:00' AND player_name = 'Kevin Berigaud';"
        ]
      ]
    },
    {
      "id": 1107,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.date FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1;",
          "SELECT player_attributes.`date` FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1;",
          "SELECT player_attributes.date FROM player_attributes WHERE player_attributes.player_api_id = 505942 ORDER BY player_attributes.crossing DESC LIMIT 1;",
          "SELECT player_attributes.date FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.crossing = (SELECT MAX(crossing) FROM player_attributes) AND player.player_name = 'Kevin Constant';"
        ]
      ]
    },
    {
      "id": 1108,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.finishing FROM player_attributes INNER JOIN team ON player_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND player_attributes.date = '2012-02-22';",
          "SELECT player_attributes.finishing FROM player_attributes INNER JOIN team ON player_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND player_attributes.date = '2011-02-22';",
          "SELECT team_attributes.defenceteamwidthclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2012-02-22';",
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN team ON player_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND player_attributes.date = '2012-02-22';"
        ]
      ]
    },
    {
      "id": 1109,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.dribbling FROM player_attributes INNER JOIN team ON player_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND player_attributes.date = '2015-09-10 00:00:00';",
          "SELECT player_attributes.dribbling FROM player_attributes INNER JOIN team_attributes ON player_attributes.id = team_attributes.id INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10 00:00:00';",
          "SELECT player_attributes.dribbling FROM player_attributes INNER JOIN team_attributes ON player_attributes.date = team_attributes.date INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10 00:00:00';",
          "SELECT player_attributes.dribbling FROM player_attributes INNER JOIN team_attributes ON player_attributes.date = team_attributes.date INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND player_attributes.date = '2015-09-10 00:00:00';"
        ]
      ]
    },
    {
      "id": 1110,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT defenceteamwidthclass FROM team_attributes WHERE team_long_name = 'FC Lorient' AND date LIKE '2010-02-22%';",
          "SELECT short_passing FROM team_attributes WHERE team_long_name = 'FC Lorient' AND date LIKE '2010-02-22%';",
          "SELECT defencedefenderlineclass FROM team_attributes WHERE team_long_name = 'FC Lorient' AND date LIKE '2010-02-22%';",
          "SELECT defenceteamwidthclass FROM team_attributes WHERE team_attributes.team_long_name = 'FC Lorient' AND team_attributes.date LIKE '2010-02-22%';"
        ]
      ]
    },
    {
      "id": 1111,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20 00:00:00';",
          "SELECT team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20 00:00:00';",
          "SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20';",
          "SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20 00:00:00';"
        ]
      ]
    },
    {
      "id": 1112,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00';",
          "SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00';",
          "SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name LIKE 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00';",
          "SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22';"
        ]
      ]
    },
    {
      "id": 1113,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.defenceaggressionclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%';",
          "SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%';",
          "SELECT team_attributes.defenceaggressionclass FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%';",
          "SELECT team_attributes.defenceaggressionclass FROM team_attributes WHERE team_attributes.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%';"
        ]
      ]
    },
    {
      "id": 1114,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22' AND '2016-04-21';",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.date BETWEEN '2007-02-22' AND '2016-04-21';",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22' AND '2016-04-21';",
          "SELECT avg(overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22' AND '2016-04-21';"
        ]
      ]
    },
    {
      "id": 1115,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Landon Donovan' AND date = '2013/7/12' ) - ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Jordan Bowery' AND date = '2013/7/12' ) AS RESULT;",
          "SELECT ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12' ) - ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12' ) AS RESULT;",
          "SELECT ( SELECT overall_rating FROM player_attributes WHERE player_api_id = 505942 AND date = '2013-07-12' ) - ( SELECT overall_rating FROM player_attributes WHERE player_api_id = 155782 AND date = '2013-07-12' ) AS RESULT;",
          "SELECT ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12' ) - ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12' ) / ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12' ) * 100;"
        ]
      ]
    },
    {
      "id": 1116,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 1;",
          "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.height DESC LIMIT 1;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.height DESC LIMIT 1;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.rank = 1 ORDER BY player.height DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1117,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10;",
          "SELECT player.player_api_id FROM player ORDER BY weight DESC LIMIT 10;",
          "SELECT player.player_api_id FROM player ORDER BY player.weight DESC LIMIT 10;",
          "SELECT DISTINCT player_api_id FROM player ORDER BY weight DESC LIMIT 10;"
        ]
      ]
    },
    {
      "id": 1118,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34;",
          "SELECT player.player_name FROM player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(player.birthday) > 34;",
          "SELECT player_name FROM player WHERE (datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday)) > 34;",
          "SELECT player_name FROM player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(player.birthday) > 34;"
        ]
      ]
    },
    {
      "id": 1119,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(match.home_team_goal) FROM match INNER JOIN player ON match.away_player_11 = player.player_api_id WHERE player.player_name = '<NAME>';",
          "SELECT count(*) FROM match INNER JOIN player ON match.away_player_11 = player.player_api_id WHERE player.player_name = '<NAME>';",
          "SELECT count(match.home_team_goal) FROM match INNER JOIN player ON match.away_player_11 = player.player_api_id WHERE player.player_name = 'Aaron Lennon';",
          "SELECT count(match.home_team_goal) FROM match JOIN player ON match.away_player_11 = player.player_api_id WHERE player.player_name = '<NAME>';"
        ]
      ]
    },
    {
      "id": 1120,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT SUM(away_team_goal) FROM match WHERE away_player_11 = 46552 AND away_player_10 = 38782;",
          "SELECT sum(away_team_goal) FROM match WHERE away_player_11 = 46552 AND away_player_10 = 38782;",
          "SELECT SUM(away_team_goal) FROM match WHERE away_player_11 = 46552 OR away_player_10 = 46552 OR away_player_9 = 46552 OR away_player_8 = 46552 OR away_player_7 = 46552 OR away_player_6 = 46552 OR away_player_5 = 46552 OR away_player_4 = 46552 OR away_player_3 = 46552 OR away_player_2 = 46552 OR away_player_1 = 46552;",
          "SELECT sum(away_team_goal) FROM match WHERE away_player_11 = 46552 OR away_player_10 = 46552 OR away_player_9 = 46552 OR away_player_8 = 46552 OR away_player_7 = 46552 OR away_player_6 = 46552 OR away_player_5 = 46552 OR away_player_4 = 46552 OR away_player_3 = 46552 OR away_player_2 = 46552 OR away_player_1 = 46552;"
        ]
      ]
    },
    {
      "id": 1121,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(match.home_team_goal) FROM match INNER JOIN player ON match.away_player_1 = player.id WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(player.birthday)) < 31;",
          "SELECT sum(match.home_team_goal) FROM match INNER JOIN player ON match.home_player_11 = player.player_api_id WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(player.birthday)) < 31;",
          "SELECT sum(match.home_team_goal) FROM player JOIN match ON player.player_api_id = match.away_player_1 WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(player.birthday)) < 31;",
          "SELECT sum(match.home_team_goal) FROM match INNER JOIN player ON match.away_player_1 = player.id WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(player.birthday) < 31);"
        ]
      ]
    },
    {
      "id": 1122,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes);",
          "SELECT player_name FROM player_attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes));",
          "SELECT player_name FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes) LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1123,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes player_attributes WHERE player_attributes.potential = (SELECT max(potential) FROM player_attributes);",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.potential = (SELECT max(potential) FROM player_attributes);",
          "SELECT DISTINCT player.player_name FROM player_attributes player_attributes WHERE player_attributes.potential = (SELECT max(potential) FROM player_attributes);",
          "SELECT player.player_name FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.potential = (SELECT max(potential) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1124,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.attacking_work_rate = 'high';",
          "SELECT player.player_name FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.attacking_work_rate = 'high';",
          "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';"
        ]
      ]
    },
    {
      "id": 1125,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE finishing = 1) ORDER BY birthday DESC LIMIT 1;",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE finishing = 1) ORDER BY SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday)) ASC LIMIT 1;",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE finishing = 1) ORDER BY SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday)) DESC LIMIT 1;",
          "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(player.birthday)) ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1126,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN country ON player.country_id = country.id WHERE country.name = 'Belgium';",
          "SELECT player.player_name FROM player INNER JOIN league ON player.id = league.id WHERE league.name = 'Belgium';",
          "SELECT player.player_name FROM player INNER JOIN league ON player.player_api_id = league.country_id WHERE league.name = 'Belgium';",
          "SELECT player.player_name FROM player INNER JOIN league ON player.player_api_id = league.id WHERE league.name = 'Belgium';"
        ]
      ]
    },
    {
      "id": 1127,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM country INNER JOIN player_attributes ON country.id = player_attributes.country_id WHERE player_attributes.vision > 89;",
          "SELECT country.name FROM player_attributes INNER JOIN country ON player_attributes.player_api_id = country.id WHERE player_attributes.vision > 89;",
          "SELECT country.name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id INNER JOIN country ON player.country_id = country.id WHERE player_attributes.vision > 89;",
          "SELECT country.name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id INNER JOIN league ON player.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE player_attributes.vision > 89;"
        ]
      ]
    },
    {
      "id": 1128,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM country INNER JOIN player ON country.id = player.country_id GROUP BY country.name ORDER BY AVG(player.weight) DESC LIMIT 1;",
          "SELECT country.name FROM country INNER JOIN player_attributes ON country.id = player_attributes.id GROUP BY country.name ORDER BY AVG(player_attributes.weight) DESC LIMIT 1;",
          "SELECT country.name FROM country INNER JOIN player_attributes ON country.id = player_attributes.id GROUP BY country.name ORDER BY AVG(player_attributes.weight) DESC;",
          "SELECT country.name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id INNER JOIN league ON player.league_id = league.id INNER JOIN country ON league.country_id = country.id GROUP BY country.name ORDER BY AVG(weight) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1129,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_long_name FROM team_attributes WHERE buildupplayspeedclass = 'Slow';",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE buildupplayspeedclass = 'Slow';",
          "SELECT team_long_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE buildupplayspeedclass = 'Slow');",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow';"
        ]
      ]
    },
    {
      "id": 1130,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe';",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE chancecreationpassingclass = 'Safe';",
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE chancecreationpassingclass = 'Safe';",
          "SELECT team.team_short_name FROM team_attributes team_attributes JOIN team team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe';"
        ]
      ]
    },
    {
      "id": 1131,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player.height) FROM player INNER JOIN country ON player.id = country.id WHERE country.name = 'Italy';",
          "SELECT avg(player.height) FROM player INNER JOIN country ON player.country_id = country.id WHERE country.name = 'Italy';",
          "SELECT avg(player.height) FROM player INNER JOIN country ON player.player_api_id = country.id WHERE country.name = 'Italy';",
          "SELECT avg(player.height) AS avg_height FROM player INNER JOIN country ON player.id = country.id WHERE country.name = 'Italy';"
        ]
      ]
    },
    {
      "id": 1132,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 0, 3;",
          "SELECT player.player_name FROM player WHERE player.height > 180 ORDER BY player.player_name ASC LIMIT 0, 3;",
          "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name LIMIT 0, 3;",
          "SELECT player.player_name FROM player WHERE player.height > 180 ORDER BY player.player_name LIMIT 0, 3;"
        ]
      ]
    },
    {
      "id": 1133,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player WHERE birthday > '1990' AND player_name LIKE 'Aaron%';",
          "SELECT count(*) FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';",
          "SELECT count(player_name) FROM player WHERE birthday > '1990' AND player_name LIKE 'Aaron%';",
          "SELECT count(id) FROM player WHERE birthday > '1990' AND player_name LIKE 'Aaron%';"
        ]
      ]
    },
    {
      "id": 1134,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT SUBTRACT(jumping AND id = 6,jumping AND id = 23) FROM player WHERE id = 23;",
          "SELECT (SELECT jumping FROM player_attributes WHERE id = 6) - (SELECT jumping FROM player_attributes WHERE id = 23) FROM player LIMIT 1;",
          "SELECT SUBTRACT(jumping AND id = 6,jumping AND id = 23) FROM player_attributes WHERE id = 23;",
          "SELECT (SELECT jumping FROM player_attributes WHERE id = 6) - (SELECT jumping FROM player_attributes WHERE id = 23) FROM player WHERE id = 23;"
        ]
      ]
    },
    {
      "id": 1135,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_api_id FROM player_attributes WHERE preferred_foot = 'right' GROUP BY player_api_id ORDER BY MIN(potential) LIMIT 5;",
          "SELECT player_api_id FROM player_attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 5;",
          "SELECT player_api_id FROM player_attributes WHERE potential = (SELECT MIN(potential) FROM player_attributes) AND preferred_foot = 'right' LIMIT 5;",
          "SELECT player_api_id FROM player_attributes WHERE preferred_foot = 'right' GROUP BY player_api_id HAVING MIN(potential) LIMIT 5;"
        ]
      ]
    },
    {
      "id": 1136,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT MAX(crossing) FROM player_attributes WHERE preferred_foot = 'left';",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes WHERE player_attributes.crossing = (SELECT MAX(crossing) FROM player_attributes) AND player_attributes.preferred_foot = 'left';",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = (SELECT MAX(crossing) FROM player_attributes);",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes WHERE player_attributes.preferred_foot = 'left' GROUP BY player_attributes.player_api_id HAVING MAX(player_attributes.crossing);"
        ]
      ]
    },
    {
      "id": 1137,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN player_attributes.stamina > 80 AND player_attributes.strength > 80 THEN player_attributes.id ELSE NULL END) AS REAL) * 100 / count(player_attributes.id) FROM player_attributes;",
          "SELECT cast(count(CASE WHEN player_attributes.stamina > 80 AND player_attributes.strength > 80 THEN 1 ELSE NULL END) AS REAL) * 100 / count(player_attributes.id) FROM player_attributes;",
          "SELECT cast(count(CASE WHEN stamina > 80 AND strength > 80 THEN 1 ELSE NULL END) AS REAL) * 100 / count(player.id) FROM player_attributes;",
          "SELECT cast(count(CASE WHEN player_attributes.stamina > 80 AND player_attributes.strength > 80 THEN player.id ELSE NULL END) AS REAL) * 100 / count(player.id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id;"
        ]
      ]
    },
    {
      "id": 1138,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa';",
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Poland Ekstraklasa';",
          "SELECT DISTINCT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa';",
          "SELECT league.country_id FROM league WHERE league.name = 'Poland Ekstraklasa';"
        ]
      ]
    },
    {
      "id": 1139,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT home_team_goal, away_team_goal FROM match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM league WHERE name = 'Belgium Jupiler League');",
          "SELECT home_team_goal, away_team_goal FROM match WHERE league_id = (SELECT id FROM league WHERE name = 'Belgium Jupiler League') AND date LIKE '2008-09-24%';",
          "SELECT home_team_goal, away_team_goal FROM match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM league WHERE name = 'Belgium Jupiler league');",
          "SELECT home_team_goal, away_team_goal FROM match WHERE date LIKE '2008-09-24%' AND league_id = 1;"
        ]
      ]
    },
    {
      "id": 1140,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT acceleration, agility, sprint_speed FROM player_attributes WHERE player_name = 'Alexis Blin';",
          "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Alexis Blin';",
          "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';",
          "SELECT player_attributes.sprint_speed , player_attributes.agility , player_attributes.acceleration FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Alexis Blin';"
        ]
      ]
    },
    {
      "id": 1141,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';",
          "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.team_long_name = 'KSV Cercle Brugge';"
        ]
      ]
    },
    {
      "id": 1142,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Italian Serie A' AND match.season = '2015/2016';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Italian Serie A' AND match.season = '2015/2016';",
          "SELECT count(*) FROM match WHERE season = '2015/2016' AND league_id = 1729;",
          "SELECT count(*) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Italian Serie A' AND season = '2015/2016';"
        ]
      ]
    },
    {
      "id": 1143,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT MAX(home_team_goal) FROM match WHERE league_id = (SELECT id FROM league WHERE name = 'Netherlands Eredivisie') AND country_id = (SELECT id FROM country WHERE name = 'Netherlands');",
          "SELECT MAX(home_team_goal) FROM match WHERE league_id = (SELECT id FROM league WHERE name = 'Netherlands Eredivisie');",
          "SELECT max(home_team_goal) FROM match WHERE league_id = (SELECT id FROM league WHERE name = 'Netherlands Eredivisie') AND country_id = (SELECT id FROM country WHERE name = 'Netherlands');",
          "SELECT MAX(home_team_goal) FROM match WHERE league_id = 1 AND country_id = 1;"
        ]
      ]
    },
    {
      "id": 1144,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);",
          "SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);",
          "SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);",
          "SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes player_attributes JOIN player player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id WHERE player.weight = (SELECT max(weight) FROM player);"
        ]
      ]
    },
    {
      "id": 1145,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT name FROM league WHERE id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id ORDER BY COUNT(id) DESC LIMIT 4);",
          "SELECT name FROM league WHERE id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id ORDER BY count(id) DESC LIMIT 4);",
          "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY COUNT(match.id) DESC LIMIT 4;",
          "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 4;"
        ]
      ]
    },
    {
      "id": 1146,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id WHERE match.away_team_goal = (SELECT max(away_team_goal) FROM match);",
          "SELECT team.team_long_name FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id WHERE match.away_team_goal = (SELECT MAX(away_team_goal) FROM match);",
          "SELECT team_long_name FROM team_attributes WHERE away_team_goal = (SELECT MAX(away_team_goal) FROM match);",
          "SELECT team_long_name FROM team WHERE team_api_id IN (SELECT away_team_api_id FROM match WHERE away_team_goal = (SELECT max(away_team_goal) FROM match));"
        ]
      ]
    },
    {
      "id": 1147,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = ( SELECT MAX(overall_rating) FROM player_attributes );",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1148,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT (count(DISTINCT CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN player.id END) * 100.0 / count(DISTINCT player.id)) AS percentage FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;",
          "SELECT (count(DISTINCT CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN player.id END) * 100.0 / count(DISTINCT player.id)) AS percentage FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id;",
          "SELECT (count(DISTINCT CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN player.player_api_id END) * 100.0 / count(DISTINCT player.player_api_id)) AS percentage FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;",
          "SELECT (count(DISTINCT CASE WHEN player_attributes.overall_rating > 70 AND player.height < 180 THEN player_attributes.player_api_id END) * 100.0 / count(DISTINCT player_attributes.player_api_id)) AS percentage FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id;"
        ]
      ]
    },
    {
      "id": 1149,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient GROUP BY sex , admission;",
          "SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient GROUP BY sex , admission ORDER BY sex , admission;",
          "SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient WHERE sex = 'M' GROUP BY sex , admission;",
          "SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient GROUP BY sex , admission ORDER BY inpatient DESC , outpatient DESC;"
        ]
      ]
    },
    {
      "id": 1150,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE sex = 'F')) AS female_percentage FROM patient WHERE year(birthday) > '1930' AND sex = 'F';",
          "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE sex = 'F' AND year(birthday) > '1930')) AS female_percentage FROM patient WHERE sex = 'F' AND year(birthday) > '1930';",
          "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE year(birthday) > '1930' AND sex = 'F')) AS female_percentage FROM patient WHERE year(birthday) > '1930' AND sex = 'F';",
          "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT patient.id) FROM patient WHERE sex = 'F' AND year(birthday) > '1930')) AS female_percentage FROM patient WHERE sex = 'F' AND year(birthday) > '1930';"
        ]
      ]
    },
    {
      "id": 1151,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31' AND admission = '+';",
          "SELECT count(*) / (SELECT count(*) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31') * 100 FROM patient WHERE admission = '+';",
          "SELECT count(*) / (SELECT count(*) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31') FROM patient WHERE admission = '+';",
          "SELECT count(*) / (SELECT count(*) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31') * 100 FROM patient WHERE patient.admission = '+';"
        ]
      ]
    },
    {
      "id": 1152,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT calculation FROM (SELECT COUNT(id) AS calculation FROM patient WHERE diagnosis = 'SLE' GROUP BY admission);",
          "SELECT (COUNT(id) where diagnosis = 'SLE' and admission = '+') / (COUNT(id) where diagnosis = 'SLE' and admission = '-') FROM patient;",
          "SELECT (COUNT(id) where diagnosis = 'SLE' and admission = '+') / (COUNT(id) where diagnosis = 'SLE' and admission = '-') FROM patient WHERE diagnosis = 'SLE';",
          "SELECT calculation FROM (SELECT COUNT(id) AS calculation FROM patient WHERE diagnosis = 'SLE' AND admission = '+' GROUP BY diagnosis, admission);"
        ]
      ]
    },
    {
      "id": 1153,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT diagnosis FROM patient WHERE id = '30609';",
          "SELECT diagnosis FROM patient WHERE id = 30609;",
          "SELECT patient.diagnosis , laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609';",
          "SELECT patient.diagnosis , laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 30609;"
        ]
      ]
    },
    {
      "id": 1154,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE patient.id = '163109';",
          "SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE examination.id = '163109';",
          "SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE examination.id = 163109;",
          "SELECT examination.`examination date` , patient.sex , patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE examination.id = '163109';"
        ]
      ]
    },
    {
      "id": 1155,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > '500';",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > '500';",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500;",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > '500' OR laboratory.alp > '500';"
        ]
      ]
    },
    {
      "id": 1156,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id, SUBTraCT(year(current_timestamp), year(birthday)) AS age FROM patient WHERE rvvt = '+';",
          "SELECT id, age FROM patient WHERE rvvt = '+';",
          "SELECT patient.id, SUBTraCT(year(current_timestamp), year(patient.birthday)) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+';",
          "SELECT patient.id, SUBTraCT(year(current_timestamp), year(birthday)) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+';"
        ]
      ]
    },
    {
      "id": 1157,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id, sex, diagnosis FROM patient WHERE thrombosis = 2;",
          "SELECT patient.id, patient.sex, patient.diagnosis FROM patient WHERE patient.thrombosis = 2;",
          "SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2;",
          "SELECT patient.id, patient.sex, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2;"
        ]
      ]
    },
    {
      "id": 1158,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';",
          "SELECT id FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';",
          "SELECT * FROM patient WHERE birthday = '1937-01-01' AND `t-cho` >= '250';",
          "SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` > '250';"
        ]
      ]
    },
    {
      "id": 1159,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.diagnosis FROM patient WHERE patient.alb < 3.5;",
          "SELECT id, sex, diagnosis FROM patient WHERE alb < 3.5;",
          "SELECT DISTINCT patient.id, patient.sex, patient.diagnosis FROM patient WHERE patient.alb < 3.5;",
          "SELECT patient.id, patient.sex, examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.alb < 3.5;"
        ]
      ]
    },
    {
      "id": 1160,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient)) AS percentage FROM patient WHERE sex = 'F' AND (tp < '6.0' OR tp > '8.5');",
          "SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient WHERE sex = 'F')) AS percentage FROM laboratory WHERE tp < '6.0' OR tp > '8.5';",
          "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(*) FROM patient)) AS percentage FROM patient WHERE patient.sex = 'F' AND (patient.tp < '6.0' OR patient.tp > '8.5');",
          "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(*) FROM patient)) AS percentage FROM patient WHERE sex = 'F' AND (tp < '6.0' OR tp > '8.5');"
        ]
      ]
    },
    {
      "id": 1161,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND SUBTRACT(year(current_timestamp), year(patient.birthday)) >= '50';",
          "SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND SUBTRACT(strftime('%Y', 'now'), strftime('%Y', patient.birthday)) >= '50';",
          "SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND SUBTRACT(year(current_timestamp), year(patient.birthday)) >= 50;",
          "SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND SUBTRACT(strftime('%Y', 'now'), strftime('%Y', patient.birthday)) >= 50;"
        ]
      ]
    },
    {
      "id": 1162,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM patient WHERE sex = 'F' AND year(description) = '1997' AND admission = '-';",
          "SELECT count(id) FROM patient WHERE sex = 'F' AND year(description) = '1997' AND admission = '-';",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE sex = 'F' AND year(description) = '1997' AND admission = '-';",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE patient.sex = 'F' AND patient.admission = '-' AND year(patient.description) = '1997';"
        ]
      ]
    },
    {
      "id": 1163,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT SUBTRACT(YEAR(`first date`),YEAR(birthday)) FROM patient WHERE admission = '+';",
          "SELECT SUBTraCT(YEAR(`first date`),YEAR(birthday)) FROM patient WHERE admission = '+';",
          "SELECT SUBTRACT(YEAR(`first date`),YEAR(birthday)) FROM patient WHERE admission = \"+\";",
          "SELECT SUBTRACT(YEAR(`first date`),YEAR(birthday)) FROM patient WHERE admission = '+' ORDER BY `first date` ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1164,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = '1' AND patient.sex = 'F' AND strftime('%Y', examination.`examination date`) = '1997';",
          "SELECT count(examination.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = '1' AND patient.sex = 'F' AND strftime('%Y', examination.`examination date`) = '1997';",
          "SELECT count(DISTINCT examination.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = '1' AND patient.sex = 'F' AND strftime('%Y', examination.`examination date`) = '1997';",
          "SELECT count(DISTINCT patient.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = '1' AND patient.sex = 'F' AND strftime('%Y', examination.date) = '1997';"
        ]
      ]
    },
    {
      "id": 1165,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT MAX(year(birthday)) - MIN(year(birthday)) FROM patient WHERE tg >= 200;",
          "SELECT MAX(year(birthday)) - MIN(year(birthday)) FROM patient WHERE laboratory.tg >= 200;",
          "SELECT MAX(year(patient.birthday)) - MIN(year(patient.birthday)) FROM patient WHERE patient.tg >= 200;",
          "SELECT MAX(year(patient.birthday)) - MIN(year(patient.birthday)) FROM patient WHERE laboratory.tg >= 200;"
        ]
      ]
    },
    {
      "id": 1166,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT symptoms FROM examination WHERE id IN (SELECT id FROM patient WHERE birthday = (SELECT max(birthday) FROM patient)) AND symptoms IS NOT NULL;",
          "SELECT symptoms, diagnosis FROM examination WHERE id IN (SELECT id FROM patient WHERE birthday = (SELECT max(birthday) FROM patient)) AND symptoms IS NOT NULL;",
          "SELECT symptoms FROM examination WHERE id IN (SELECT id FROM patient WHERE birthday = (SELECT min(birthday) FROM patient)) AND symptoms IS NOT NULL;",
          "SELECT symptoms, diagnosis FROM examination WHERE id IN (SELECT id FROM patient WHERE birthday = (SELECT min(birthday) FROM patient)) AND symptoms IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1167,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT EXTRACT(YEAR FROM examination.`examination date`) FROM examination WHERE examination.`examination date` BETWEEN '1998-01-01' AND '1998-12-31' AND patient.sex = 'M';",
          "SELECT EXTRACT(YEAR FROM examination.`examination date`) FROM examination JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1998-01-01' AND '1998-12-31';",
          "SELECT EXTRACT(YEAR FROM examination.`examination date`) FROM examination JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY EXTRACT(YEAR FROM examination.`examination date`);",
          "SELECT EXTRACT(YEAR FROM examination.`examination date`) FROM examination WHERE examination.`examination date` BETWEEN '1998-01-01' AND '1998-12-31' AND patient.sex = 'M' GROUP BY EXTRACT(YEAR FROM examination.`examination date`);"
        ]
      ]
    },
    {
      "id": 1168,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT `examination date`, SUBTRACT(year(`first date`), year(birthday)) FROM patient WHERE diagnosis = 'SJS';",
          "SELECT `examination date`, (SUBTraCT(year(`first date`)), year(birthday)) FROM patient WHERE diagnosis = 'SJS';",
          "SELECT `examination date`, SUBTRACT(year(`first date`), year(birthday)) FROM patient WHERE diagnosis = 'SJS' ORDER BY `examination date` LIMIT 1;",
          "SELECT `examination date`, (SUBTraCT(year(`first date`)), year(birthday)) FROM patient WHERE diagnosis = 'SJS' ORDER BY birthday LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1169,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (count(DISTINCT CASE WHEN patient.sex = 'M' THEN laboratory.id END) * 1.0 / count(DISTINCT CASE WHEN patient.sex = 'F' THEN laboratory.id END)) AS ratio FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.ua <= '8.0' OR laboratory.ua <= '6.5';",
          "SELECT (count(DISTINCT CASE WHEN patient.sex = 'M' THEN patient.id END) * 1.0 / count(DISTINCT CASE WHEN patient.sex = 'F' THEN patient.id END)) AS ratio FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.ua <= '8.0' OR laboratory.ua <= '6.5';",
          "SELECT (count(DISTINCT CASE WHEN patient.sex = 'M' THEN patient.id END) * 1.0 / count(DISTINCT CASE WHEN patient.sex = 'F' THEN patient.id END)) AS ratio FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.ua <= '8.0';",
          "SELECT (count(DISTINCT CASE WHEN patient.sex = 'M' THEN laboratory.id END) * 1.0 / count(DISTINCT CASE WHEN patient.sex = 'F' THEN laboratory.id END)) AS ratio FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.ua <= '8.0';"
        ]
      ]
    },
    {
      "id": 1170,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM patient WHERE SUBTraCT(year(`examination date`), year(`first date`)) >= 1;",
          "SELECT count(id) FROM patient WHERE SUBTraCT(year(`examination date`), year(`first date`)) >= 1;",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE SUBTraCT(year(`examination date`), year(`first date`)) >= 1;",
          "SELECT count(DISTINCT id) FROM patient WHERE SUBTraCT(year(`examination date`), year(`first date`)) >= 1;"
        ]
      ]
    },
    {
      "id": 1171,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM patient WHERE year(birthday) < 18 AND year(`examination date`) BETWEEN '1990' AND '1993';",
          "SELECT count(id) FROM patient WHERE year(birthday) < 18 AND year(`examination date`) BETWEEN '1990' AND '1993';",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE year(birthday) < 18 AND year(`examination date`) BETWEEN '1990' AND '1993';",
          "SELECT count(patient.id) FROM patient WHERE year(birthday) < 18 AND year(`examination date`) BETWEEN '1990' AND '1993';"
        ]
      ]
    },
    {
      "id": 1172,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= '2.0' AND patient.sex = 'M';",
          "SELECT count(*) FROM patient WHERE sex = 'M' AND `t-bil` >= '2.0';",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= '2.0' AND patient.sex = 'M';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` >= '2.0';"
        ]
      ]
    },
    {
      "id": 1173,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;",
          "SELECT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY patient.diagnosis ORDER BY COUNT(patient.diagnosis) DESC LIMIT 1;",
          "SELECT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` >= '1985-01-01' AND examination.`examination date` <= '1995-12-31' GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;",
          "SELECT diagnosis FROM patient WHERE id IN (SELECT id FROM laboratory WHERE date BETWEEN '1985-01-01' AND '1995-12-31') GROUP BY diagnosis ORDER BY COUNT(diagnosis) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1174,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(2009 - strftime('%Y', patient.birthday)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1991-10-01' AND '1991-10-30';",
          "SELECT avg(SUBTRACT('1999', year(patient.birthday))) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1991-10-01' AND '1991-10-30';",
          "SELECT avg(2010 - strftime('%Y', patient.birthday)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1991-10-01' AND '1991-10-30';",
          "SELECT avg(SUBTRACT('1999', year(patient.birthday))) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE date BETWEEN '1991-10-01' AND '1991-10-30';"
        ]
      ]
    },
    {
      "id": 1175,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT SUBTraCT(year(`examination date`), year(birthday)), MAX(hgb) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id;",
          "SELECT SUBSTRACT(year(`examination date`), year(birthday)), MAX(hgb) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id;",
          "SELECT SUBTraCT(year(`examination date`), year(birthday)), MAX(hgb), diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY hgb DESC LIMIT 1;",
          "SELECT SUBTraCT(year(`examination date`), year(birthday)), MAX(hgb), diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id GROUP BY diagnosis ORDER BY MAX(hgb) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1176,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.ana FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` = '1996-12-02' AND patient.id = 3605340;",
          "SELECT examination.ana FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 3605340 AND examination.`examination date` = '1996-12-02';",
          "SELECT examination.ana FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `examination date` = '1996-12-02' AND patient.id = 3605340;",
          "SELECT examination.ana FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.description = '1996-12-02' AND examination.`examination date` = '1996-12-02';"
        ]
      ]
    },
    {
      "id": 1177,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND strftime('%Y-%m-%d', laboratory.date) = '1995-09-04';",
          "SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.`examination date` = '1995-09-04';",
          "SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.`examination date` = '1995-09-04' AND patient.id = 2927464;",
          "SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND strftime('%Y-%m-%d', patient.description) = '1995-09-04';"
        ]
      ]
    },
    {
      "id": 1178,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex FROM patient WHERE patient.diagnosis = 'AORTITIS' LIMIT 1;",
          "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' LIMIT 1;",
          "SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'AORTITIS' LIMIT 1;",
          "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' ORDER BY `first date` LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1179,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT * FROM laboratory WHERE id = (SELECT id FROM patient WHERE diagnosis = 'SLE' AND description = '1994-02-19') AND date = '1993/11/12';",
          "SELECT laboratory.iga FROM examination JOIN patient ON examination.id = patient.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'SLE' AND examination.`examination date` = '1993/11/12';",
          "SELECT laboratory.iga FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'SLE' AND examination.`examination date` = '1993/11/12';",
          "SELECT laboratory.iga FROM examination examination JOIN patient patient ON examination.id = patient.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'SLE' AND examination.`examination date` = '1993/11/12';"
        ]
      ]
    },
    {
      "id": 1180,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN patient.sex = 'M' THEN 'man' WHEN patient.sex = 'F' THEN 'women' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9 AND laboratory.got = 9;",
          "SELECT CASE WHEN patient.sex = 'M' THEN 'man' ELSE 'women' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9 AND laboratory.got = 9;",
          "SELECT CASE WHEN patient.sex = 'M' THEN 'man' WHEN patient.sex = 'F' THEN 'women' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9 AND laboratory.got = 9;",
          "SELECT CASE WHEN patient.sex = 'M' THEN 'man' WHEN patient.sex = 'F' THEN 'women' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.gpt = 9 AND laboratory.got = 9 AND laboratory.date = '1992-06-12';"
        ]
      ]
    },
    {
      "id": 1181,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT SUBTRACT(year(examination.`examination date`), year(patient.birthday)) AS how_old FROM examination INNER JOIN patient ON examination.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21';",
          "SELECT SUBTRACT(strftime('%Y', examination.`examination date`), strftime('%Y', patient.birthday)) AS how_old FROM examination INNER JOIN patient ON examination.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21';",
          "SELECT SUBTRACT(strftime('%Y', examination.`examination date`), strftime('%Y', patient.birthday)) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21';",
          "SELECT SUBTRACT(strftime('%Y', examination.`examination date`), strftime('%Y', patient.birthday)) AS age FROM examination INNER JOIN patient ON examination.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21';"
        ]
      ]
    },
    {
      "id": 1182,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT COUNT(id) FROM patient WHERE `first date` = '1991-06-13' AND diagnosis = 'SJS';",
          "SELECT count(id) FROM patient WHERE `first date` = '1991-06-13' AND diagnosis = 'SJS';",
          "SELECT count(id) FROM patient WHERE `first date` = '1991-06-13';",
          "SELECT COUNT(patient.id) FROM patient WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS';"
        ]
      ]
    },
    {
      "id": 1183,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT diagnosis FROM examination WHERE `examination date` = '1997-01-27';",
          "SELECT diagnosis FROM examination WHERE `examination date` = '1997-01-27' AND diagnosis = 'SLE';",
          "SELECT diagnosis FROM patient WHERE `examination date` = '1997-01-27';",
          "SELECT diagnosis FROM examination JOIN patient ON examination.id = patient.id WHERE `examination date` = '1997-01-27' AND patient.`first date` = '1997-01-27';"
        ]
      ]
    },
    {
      "id": 1184,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT symptoms FROM examination WHERE id = (SELECT id FROM patient WHERE birthday = '1959/3/1') AND `examination date` = '1993/9/27';",
          "SELECT examination.symptoms FROM examination JOIN patient ON examination.id = patient.id WHERE patient.birthday = '1959/3/1' AND examination.`examination date` = '1993/9/27';",
          "SELECT symptoms FROM examination WHERE `examination date` = '1993-09-27' AND id = (SELECT id FROM patient WHERE birthday = '1959-03-01');",
          "SELECT examination.symptoms FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.birthday = '1959/3/1' AND examination.`examination date` = '1993/9/27';"
        ]
      ]
    },
    {
      "id": 1185,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT SUBTraCT(SUM(birthday = '1959-02-18' and date like '1981-11-%' THEN `t-cho`), SUM(birthday = '1959-02-18' and date like '1981-12-%' THEN `t-cho`)) FROM patient;",
          "SELECT SUBTraCT(SUM(birthday = '1959-02-18' and date like '1981-11-%' THEN `t-cho`), SUM(birthday = '1959-02-18' and date like '1981-12-%' THEN `t-cho`)) FROM patient WHERE birthday = '1959-02-18';",
          "SELECT SUM(birthday = '1959-02-18' and date like '1981-11-%' THEN `t-cho`), SUM(birthday = '1959-02-18' and date like '1981-12-%' THEN `t-cho`) FROM patient;",
          "SELECT SUM(birthday = '1959-02-18' and date like '1981-11-%' THEN `t-cho`), SUM(birthday = '1959-02-18' and date like '1981-12-%' THEN `t-cho`) FROM patient WHERE birthday = '1959-02-18';"
        ]
      ]
    },
    {
      "id": 1186,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT * FROM patient WHERE diagnosis = 'Behcet' AND description BETWEEN '1997-1-1' AND '1998-1-1';",
          "SELECT * FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'Behcet' AND YEAR(examination.`examination date`) >= '1997-1-1' AND YEAR(examination.`examination date`) < '1998-1-1';",
          "SELECT * FROM patient WHERE diagnosis = 'Behcet' AND description BETWEEN '1997-1-1' AND '1997-1-1';",
          "SELECT * FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'Behcet' AND examination.`examination date` BETWEEN '1997-1-1' AND '1997-1-31';"
        ]
      ]
    },
    {
      "id": 1187,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`examination date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`examination date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE date BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE date BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;"
        ]
      ]
    },
    {
      "id": 1188,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE sex = 'F' AND YEAR(birthday) = 1964 AND admission = '+';",
          "SELECT patient.id FROM patient WHERE patient.sex = 'F' AND YEAR(patient.birthday) = 1964 AND patient.admission = '+';",
          "SELECT id FROM patient WHERE sex = 'F' AND admission = '+' AND YEAR(birthday) = 1964;",
          "SELECT patient.id FROM patient WHERE patient.sex = 'F' AND strftime('%Y', patient.birthday) = '1964' AND patient.admission = '+';"
        ]
      ]
    },
    {
      "id": 1189,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S' AND `acl igm` > (SELECT AVG(`acl igm`) FROM examination);",
          "SELECT COUNT(*) FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S' AND `acl igm` > (SELECT AVG(`acl igm`) FROM examination);",
          "SELECT id FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S' AND `acl igm` > AVG(`acl igm`) * 1.2;",
          "SELECT id FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S' AND `acl igm` = (SELECT AVG(`acl igm`) FROM examination) + (SELECT AVG(`acl igm`) FROM examination) * 0.2;"
        ]
      ]
    },
    {
      "id": 1190,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT 100 * SUM(CASE WHEN `u-pro` > 0 AND `u-pro` < 30 AND ua <= 6.5 THEN 1 ELSE 0 END) / COUNT(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id;",
          "SELECT 100 * SUM(CASE WHEN `u-pro` > 0 AND `u-pro` < 30 AND ua <= 6.5 THEN 1 ELSE 0 END) / COUNT(id) FROM patient;",
          "SELECT 100 * SUM(CASE WHEN laboratory.`u-pro` > 0 AND laboratory.`u-pro` < 30 AND laboratory.ua <= 6.5 THEN 1 ELSE 0 END) / COUNT(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id;",
          "SELECT 100 * SUM(CASE WHEN laboratory.`u-pro` > 0 AND laboratory.`u-pro` < 30 AND laboratory.ua <= 6.5 THEN 1 ELSE 0 END) / COUNT(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id;"
        ]
      ]
    },
    {
      "id": 1191,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (SUM(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' AND patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) / COUNT(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' THEN 1 ELSE 0 END)) * 100 AS calculation FROM patient;",
          "SELECT (SUM(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' AND patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) / COUNT(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' THEN 1 ELSE 0 END)) * 100 FROM patient;",
          "SELECT (SUM(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' AND patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' THEN 1 ELSE 0 END)) AS calculation FROM patient;",
          "SELECT (SUM(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' AND patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) / COUNT(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' THEN 1 ELSE 0 END)) * 100 AS calculation FROM patient LEFT JOIN examination ON patient.id = examination.id LEFT JOIN laboratory ON patient.id = laboratory.id;"
        ]
      ]
    },
    {
      "id": 1192,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT * FROM patient WHERE admission = '-' AND date LIKE '1991-10%' AND `t-bil` < 2.0;",
          "SELECT * FROM patient WHERE admission = '-' AND date LIKE '1991-10%';",
          "SELECT * FROM patient WHERE admission = '-' AND date LIKE '1991-10%' AND id IN (SELECT id FROM laboratory WHERE `t-bil` < 2.0);",
          "SELECT * FROM patient WHERE admission = '-' AND date LIKE '1991-10%' AND patient.id IN (SELECT id FROM laboratory WHERE `t-bil` < 2.0);"
        ]
      ]
    },
    {
      "id": 1193,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31' AND `ana pattern` != 'P';",
          "SELECT count(*) FROM patient WHERE sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31' AND `ana pattern` != 'P';",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`ana pattern` != 'P' AND sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31';",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`ana pattern` != 'P' AND patient.sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31';"
        ]
      ]
    },
    {
      "id": 1194,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123;",
          "SELECT patient.sex FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > '2' AND laboratory.cre = '1' AND laboratory.ldh = '123';",
          "SELECT patient.sex FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp = '1' AND laboratory.ldh = '123' AND laboratory.igm = '123';",
          "SELECT patient.sex FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'PSS' AND laboratory.crp > 2 AND examination.diagnosis = 'PSS' AND examination.`acl iga` = 1 AND laboratory.ldh = 123 AND laboratory.igm = 123;"
        ]
      ]
    },
    {
      "id": 1195,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(alb) FROM laboratory WHERE plt > 400 AND sex = 'F' AND id IN (SELECT id FROM patient WHERE diagnosis = 'SLE');",
          "SELECT avg(alb) FROM laboratory WHERE plt > 400 AND sex = 'F' AND diagnosis = 'SLE';",
          "SELECT avg(laboratory.alb) FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SLE' AND laboratory.plt > 400 AND patient.sex = 'F';",
          "SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SLE' AND laboratory.plt > 400 AND patient.sex = 'F';"
        ]
      ]
    },
    {
      "id": 1196,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1;",
          "SELECT symptoms FROM examination examination INNER JOIN patient patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1;",
          "SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' GROUP BY examination.symptoms ORDER BY count(examination.symptoms) DESC LIMIT 1;",
          "SELECT symptoms FROM examination examination INNER JOIN patient patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' GROUP BY symptoms HAVING count(symptoms) = (SELECT max(cnt) FROM (SELECT count(symptoms) AS cnt FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' GROUP BY symptoms));"
        ]
      ]
    },
    {
      "id": 1197,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT description, diagnosis FROM patient WHERE id = 48473;",
          "SELECT patient.`first date`, patient.diagnosis FROM patient WHERE patient.id = 48473;",
          "SELECT description AS medical_information_first_documented, diagnosis AS disease FROM patient WHERE id = 48473;",
          "SELECT patient.`first date`, patient.diagnosis FROM patient WHERE id = 48473;"
        ]
      ]
    },
    {
      "id": 1198,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'APS';",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE patient.sex = 'F' AND patient.diagnosis = 'APS';",
          "SELECT count(*) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'APS';",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE patient.diagnosis = 'APS' AND patient.sex = 'F';"
        ]
      ]
    },
    {
      "id": 1199,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(examination.`examination date`) = '1997' AND (laboratory.tp < 6 OR laboratory.tp > 8.5);",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND YEAR(examination.`examination date`) = '1997' AND laboratory.c4 NOT BETWEEN '6' AND '8.5';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND YEAR(examination.`examination date`) = '1997' AND laboratory.c4 NOT BETWEEN 6 AND 8.5;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND YEAR(examination.`examination date`) = '1997' AND laboratory.c4 BETWEEN '6' AND '8.5';"
        ]
      ]
    },
    {
      "id": 1200,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (SUM(diagnosis LIKE '%Itp%') * 100.0 / (SELECT SUM(diagnosis LIKE '%SLE%') FROM examination)) AS calculation FROM examination WHERE symptoms LIKE '%thrombocytopenia%';",
          "SELECT (SUM(diagnosis LIKE '%Itp%') * 100.0 / (SELECT SUM(diagnosis LIKE '%SLE%') FROM examination)) AS calculation FROM patient WHERE diagnosis LIKE '%SLE%';",
          "SELECT (SUM(diagnosis LIKE '%Itp%') * 100.0 / (SELECT SUM(diagnosis LIKE '%SLE%') FROM examination)) AS calculation FROM examination WHERE symptoms LIKE '%thrombocytopenia%' AND diagnosis LIKE '%SLE%';",
          "SELECT (SUM(diagnosis LIKE '%Itp%') * 100.0 / (SELECT SUM(diagnosis LIKE '%SLE%') FROM examination WHERE symptoms LIKE '%thrombocytopenia%')) AS calculation FROM examination WHERE symptoms LIKE '%thrombocytopenia%';"
        ]
      ]
    },
    {
      "id": 1201,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN patient.diagnosis = 'RA' AND patient.sex = 'F' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient;",
          "SELECT cast(count(CASE WHEN patient.sex = 'F' AND patient.diagnosis = 'RA' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE YEAR(patient.birthday) = '1980';",
          "SELECT cast(count(CASE WHEN patient.sex = 'F' AND patient.diagnosis = 'RA' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id;",
          "SELECT cast(count(CASE WHEN patient.diagnosis = 'RA' AND patient.sex = 'F' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id;"
        ]
      ]
    },
    {
      "id": 1202,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995' AND '1997' AND patient.diagnosis = 'Behcet' AND patient.admission = '-';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.diagnosis = 'Behcet' AND patient.admission = '-' AND examination.`examination date` BETWEEN '1995' AND '1997';",
          "SELECT count(DISTINCT patient.id) FROM patient JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995' AND '1997' AND patient.diagnosis = 'Behcet' AND patient.admission = '-';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` between '1995' and '1997' AND patient.diagnosis = 'Behcet' AND patient.admission = '-';"
        ]
      ]
    },
    {
      "id": 1203,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;",
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.wbc < 3.5 AND patient.sex = 'F';",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;"
        ]
      ]
    },
    {
      "id": 1204,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT dateDIFF(`examination date`, `first date`) FROM examination WHERE id = 821298;",
          "SELECT dateDIFF(`examination date`, `first date`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 821298;",
          "SELECT DATEDIFF(examination.`examination date`, patient.`first date`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 821298;",
          "SELECT DATEDIFF(examination.`examination date`, patient.`first date`) FROM patient, examination WHERE patient.id = examination.id AND patient.id = 821298;"
        ]
      ]
    },
    {
      "id": 1205,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN (laboratory.ua > 8.0 AND patient.sex = 'M') OR (laboratory.ua > 6.5 AND patient.sex = 'F') THEN 'Normal' ELSE 'Abnormal' END FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE patient.id = 57266;",
          "SELECT CASE WHEN (laboratory.ua > 8.0 AND patient.sex = 'M') OR (laboratory.ua > 6.5 AND patient.sex = 'F') THEN 'Normal' ELSE 'Abnormal' END FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.id = 57266;",
          "SELECT CASE WHEN laboratory.ua > 8.0 AND patient.sex = 'M' THEN 'Normal' WHEN laboratory.ua > 6.5 AND patient.sex = 'F' THEN 'Normal' ELSE 'Abnormal' END FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.id = 57266;",
          "SELECT CASE WHEN (laboratory.ua > 8.0 AND patient.sex = 'M') OR (laboratory.ua > 6.5 AND patient.sex = 'F') THEN 'Normal' ELSE 'Abnormal' END FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id;"
        ]
      ]
    },
    {
      "id": 1206,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT date FROM laboratory WHERE id = 48473 AND got >= 60;",
          "SELECT examination.`examination date` FROM examination JOIN patient ON examination.id = patient.id WHERE patient.id = 48473 AND examination.`acl igg` >= 60;",
          "SELECT examination.`examination date` FROM examination JOIN patient patient ON examination.id = patient.id WHERE patient.id = 48473 AND examination.`acl igg` >= 60;",
          "SELECT examination.`examination date` FROM examination JOIN patient ON examination.id = patient.id WHERE patient.id = '48473' AND examination.`acl igg` >= 60;"
        ]
      ]
    },
    {
      "id": 1207,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex , patient.birthday FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND year(examination.`examination date`) = 1994;",
          "SELECT patients.sex , patients.birthday FROM patients INNER JOIN examination ON patients.id = examination.id INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.got < 60 AND year(laboratory.date) = 1994;",
          "SELECT patients.sex , patients.birthday FROM patients INNER JOIN examination ON patients.id = examination.id INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.got < 60 AND year(examination.`examination date`) = 1994;",
          "SELECT patients.sex , patients.birthday FROM patients INNER JOIN examination ON patients.id = examination.id INNER JOIN laboratory ON patients.id = laboratory.id WHERE laboratory.got < 60 AND year(examination.`examination date`) = 1994;"
        ]
      ]
    },
    {
      "id": 1208,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient WHERE patient.sex = 'M' AND patient.gpt >= 60;",
          "SELECT laboratory.id FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.gpt >= 60 AND patient.sex = 'M';",
          "SELECT laboratory.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60;",
          "SELECT laboratory.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60;"
        ]
      ]
    },
    {
      "id": 1209,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.gpt > 60 ORDER BY patient.birthday ASC;",
          "SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.gpt > 60 ORDER BY patient.birthday ASC;",
          "SELECT examination.diagnosis FROM examination JOIN patient ON examination.id = patient.id WHERE patient.gpt > 60 ORDER BY patient.birthday ASC;",
          "SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.gpt > 60 ORDER BY patient.birthday;"
        ]
      ]
    },
    {
      "id": 1210,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.ldh) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500;",
          "SELECT avg(examination.ldh) FROM examination WHERE examination.ldh < 500;",
          "SELECT avg(laboratory.ldh) FROM laboratory WHERE laboratory.ldh < 500;",
          "SELECT avg(laboratory.ldh) FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500;"
        ]
      ]
    },
    {
      "id": 1211,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh BETWEEN 600 AND 800;",
          "SELECT laboratory.id, SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800;",
          "SELECT laboratory.id , SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800;",
          "SELECT laboratory.id , SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh BETWEEN 600 AND 800;"
        ]
      ]
    },
    {
      "id": 1212,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT admission FROM patient WHERE alp < 300;",
          "SELECT admission FROM patient WHERE alp < 300;",
          "SELECT admission FROM patient WHERE id IN (SELECT id FROM laboratory WHERE alp < 300);",
          "SELECT admission FROM patient WHERE alp < 300 GROUP BY admission;"
        ]
      ]
    },
    {
      "id": 1213,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END FROM patient WHERE birthday = '1982-04-01';",
          "SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory WHERE id = (SELECT id FROM patient WHERE birthday = '1982-04-01');",
          "SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END AS alp_status FROM patient WHERE birthday = '1982-04-01';",
          "SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory WHERE id = (SELECT id FROM patient WHERE birthday LIKE '1982-04-01');"
        ]
      ]
    },
    {
      "id": 1214,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.tp < 6.0;",
          "SELECT id, sex, birthday FROM patient WHERE tp < 6.0;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE laboratory.tp < 6.0;"
        ]
      ]
    },
    {
      "id": 1215,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT SUBTRACT(laboratory.tp, 8.5) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.tp > 8.5;",
          "SELECT SUBTRACT(tp, 8.5) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND tp > 8.5;",
          "SELECT SUBTRACT(laboratory.tp, 8.5) FROM patient, laboratory WHERE patient.id = laboratory.id AND patient.sex = 'F' AND laboratory.tp > 8.5;",
          "SELECT SUBTRACT(tp, 8.5) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE sex = 'F' AND tp > 8.5;"
        ]
      ]
    },
    {
      "id": 1216,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT * FROM patient WHERE sex = 'M' AND (alb <= 3.5 OR alb >= 5.5) ORDER BY birthday DESC;",
          "SELECT * FROM patient WHERE sex = 'M' AND alb NOT BETWEEN 3.5 AND 5.5 ORDER BY birthday DESC;",
          "SELECT patient.birthday FROM patient WHERE patient.sex = 'M' AND (patient.alb <= 3.5 OR patient.alb >= 5.5) ORDER BY patient.birthday DESC;",
          "SELECT patient.id FROM patient WHERE patient.sex = 'M' AND (patient.alb <= 3.5 OR patient.alb >= 5.5) ORDER BY patient.birthday DESC;"
        ]
      ]
    },
    {
      "id": 1217,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN laboratory.alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE year(patient.birthday) = '1982';",
          "SELECT CASE WHEN alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE year(patient.birthday) = '1982';",
          "SELECT CASE WHEN laboratory.alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE Year(patient.birthday) = '1982';",
          "SELECT CASE WHEN laboratory.alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1982';"
        ]
      ]
    },
    {
      "id": 1218,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) * 1.0 / (SELECT count(*) FROM patient WHERE sex = 'F') FROM laboratory WHERE (ua > 8.0 AND sex = 'M') OR (ua > 6.5 AND sex = 'F');",
          "SELECT count(*) * 100.0 / (SELECT count(*) FROM patient WHERE sex = 'F') FROM laboratory WHERE (ua > 8.0 AND sex = 'M') OR (ua > 6.5 AND sex = 'F');",
          "SELECT count(*) * 1.0 / (SELECT count(*) FROM patient WHERE sex = 'F') FROM laboratory WHERE ua > 8.0 OR ua > 6.5;",
          "SELECT count(*) * 100.0 / (SELECT count(*) FROM patient WHERE sex = 'F') FROM laboratory WHERE ua > 8.0 OR ua > 6.5;"
        ]
      ]
    },
    {
      "id": 1219,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua < 8.0 AND patient.sex = 'M' OR laboratory.ua < 6.5 AND patient.sex = 'F';",
          "SELECT avg(laboratory.ua) FROM laboratory JOIN patient ON laboratory.id = patient.id JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND (laboratory.ua < 8.0 AND patient.sex = 'M' OR laboratory.ua < 6.5 AND patient.sex = 'F');",
          "SELECT avg(laboratory.ua) FROM laboratory JOIN patient ON laboratory.id = patient.id JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND patient.sex = 'M' OR examination.diagnosis = 'Normal' AND patient.sex = 'F';",
          "SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua < 8.0 AND patient.sex = 'M' OR laboratory.ua < 6.5 AND patient.sex = 'F' GROUP BY patient.id;"
        ]
      ]
    },
    {
      "id": 1220,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.un = 29;",
          "SELECT id, sex, birthday FROM patient WHERE un = 29;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.un BETWEEN 28 AND 30;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un = 29;"
        ]
      ]
    },
    {
      "id": 1221,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id, sex, birthday FROM patient WHERE diagnosis = 'RA' AND un < 30;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.diagnosis = 'RA' AND patient.un < 30;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.diagnosis = 'ra' AND patient.un < 30;",
          "SELECT patient.id, patient.sex, patient.birthday FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.un < 30 AND examination.diagnosis = 'ra';"
        ]
      ]
    },
    {
      "id": 1222,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM patient WHERE sex = 'M' AND cre >= 1.5;",
          "SELECT count(id) FROM patient WHERE sex = 'M' AND cre >= 1.5;",
          "SELECT count(patient.id) FROM patient WHERE patient.sex = 'M' AND examination.cre >= 1.5;",
          "SELECT count(patient.id) FROM patient WHERE patient.sex = 'M' AND examination.`acl igm` >= 1.5;"
        ]
      ]
    },
    {
      "id": 1223,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (SUM(sex = 'M') > SUM(sex = 'F')) FROM patient WHERE cre >= 1.5;",
          "SELECT (SUM(sex = 'M') > SUM(sex = 'F')) AS calculation FROM patient WHERE cre >= 1.5;",
          "SELECT (SUM(sex = 'M') > SUM(sex = 'F')) FROM patient WHERE cre >= 1.5 AND sex = 'M';",
          "SELECT (SUM(sex = 'M') > SUM(sex = 'F')) AS calculation FROM patient WHERE cre >= 1.5 AND sex = 'M';"
        ]
      ]
    },
    {
      "id": 1224,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id, sex, birthday FROM patient WHERE `t-bil` = ( SELECT max(`t-bil`) FROM laboratory );",
          "SELECT id, sex, birthday FROM patient WHERE `t-bil` = (SELECT max(`t-bil`) FROM laboratory);",
          "SELECT id, sex, birthday FROM patient WHERE `t-bil` = ( SELECT max(`t-bil`) FROM patient );",
          "SELECT patient.id , patient.sex , patient.birthday FROM patient WHERE patient.id = ( SELECT id FROM laboratory GROUP BY id ORDER BY max(`t-bil`) DESC LIMIT 1 );"
        ]
      ]
    },
    {
      "id": 1225,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex, GROUP_CONCAT(DISTINCT patient.id) FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id GROUP BY patient.sex HAVING laboratory.`t-bil` >= 2.0;",
          "SELECT sex, GROUP_CONCAT(DISTINCT id) FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id GROUP BY sex HAVING `t-bil` >= 2.0;",
          "SELECT patient.sex, GROUP_CONCAT(DISTINCT examination.id) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 GROUP BY patient.sex;",
          "SELECT patient.sex, GROUP_CONCAT(DISTINCT examination.id) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id GROUP BY patient.sex HAVING laboratory.`t-bil` >= 2.0;"
        ]
      ]
    },
    {
      "id": 1226,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC LIMIT 1;",
          "SELECT id, `t-cho` FROM patient ORDER BY `t-cho` DESC LIMIT 1;",
          "SELECT id, `t-cho` FROM patient WHERE `t-cho` = (SELECT MAX(`t-cho`) FROM patient);",
          "SELECT id, `t-cho` FROM patient WHERE `t-cho` = (SELECT MAX(`t-cho`) FROM patient);"
        ]
      ]
    },
    {
      "id": 1227,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(CASE WHEN sex = 'M' THEN round((strftime('%J', date('now')) - strftime('%J', birthday)) / 365) ELSE 0 END) FROM patient WHERE `t-cho` >= 250;",
          "SELECT sum(CASE WHEN sex = 'M' THEN round((strftime('%J', date('now')) - strftime('%J', birthday)) / 365) ELSE 0 END) / count(id) FROM patient WHERE `t-cho` >= 250;",
          "SELECT avg(CASE WHEN sex = 'M' THEN round((strftime('%J', date('now')) - strftime('%J', birthday)) / 365) ELSE round((strftime('%J', date('now')) - strftime('%J', birthday)) / 365) END) FROM patient WHERE `t-cho` >= 250;",
          "SELECT sum(CASE WHEN sex = 'M' THEN round((strftime('%J', date('now')) - strftime('%J', birthday)) / 365) ELSE round((strftime('%J', date('now')) - strftime('%J', birthday)) / 365) END) / count(id) FROM patient WHERE `t-cho` >= 250;"
        ]
      ]
    },
    {
      "id": 1228,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT * FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 100;",
          "SELECT patient.id, patient.diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 100;",
          "SELECT patient.id, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 100;",
          "SELECT patient.id, patient.diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300;"
        ]
      ]
    },
    {
      "id": 1229,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT count(id) FROM patient WHERE tg >= 200 AND SUBTraCT(year(current_timestamp), year(birthday)) > 50;",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE patient.tg >= 200 AND SUBTraCT(year(current_timestamp), year(patient.birthday)) > 50;",
          "SELECT COUNT(DISTINCT patient.id) FROM patient WHERE patient.tg >= 200 AND SUBTraCT(year(current_timestamp), year(patient.birthday)) > 50;",
          "SELECT DISTINCT count(id) FROM patient WHERE tg >= 200 AND SUBTRACT(year(current_timestamp), year(birthday)) > 50;"
        ]
      ]
    },
    {
      "id": 1230,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT id FROM patient WHERE admission = '-' AND cpk < 250;",
          "SELECT DISTINCT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '-' AND examination.cpk < 250;",
          "SELECT DISTINCT examination.id FROM examination, patient WHERE examination.id = patient.id AND patient.admission = '-' AND examination.cpk < 250;",
          "SELECT DISTINCT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE admission = '-' AND cpk < 250;"
        ]
      ]
    },
    {
      "id": 1231,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.cpk >= 250 AND strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956';",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.cpk >= 250 AND year(patient.birthday) BETWEEN '1936' AND '1956';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND year(patient.birthday) BETWEEN '1936' AND '1956' AND laboratory.cpk >= 250;",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE sex = 'M' AND year(birthday) BETWEEN '1936' AND '1956' AND cpk >= 250;"
        ]
      ]
    },
    {
      "id": 1232,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, age FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250;",
          "SELECT patient.id, patient.sex, SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250;",
          "SELECT patient.id, patient.sex, SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250;",
          "SELECT patient.id, patient.sex, SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.glu >= 180 AND examination.`t-cho` < 250;"
        ]
      ]
    },
    {
      "id": 1233,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id , laboratory.glu FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE laboratory.glu < 180 AND year(patient.`first date`) = 1991;",
          "SELECT patient.id , laboratory.glu FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND year(patient.`first date`) = 1991;",
          "SELECT patient.id , laboratory.glu FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.glu < 180 AND year(patient.`first date`) = 1991;",
          "SELECT patient.id , laboratory.glu FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND year(patient.description) = 1991;"
        ]
      ]
    },
    {
      "id": 1234,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.wbc <= 3.5 OR patient.wbc >= 9.0 GROUP BY patient.sex, patient.birthday ORDER BY patient.birthday ASC;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE (laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0) OR (examination.`acl igm` <= 3.5 OR examination.`acl igm` >= 9.0) OR (examination.`acl igg` <= 3.5 OR examination.`acl igg` >= 9.0) GROUP BY patient.sex, patient.birthday HAVING count(*) > 0 ORDER BY patient.birthday ASC;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE (laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0) AND (examination.`acl igm` <= 3.5 OR examination.`acl igm` >= 9.0) AND (examination.`acl igg` <= 3.5 OR examination.`acl igg` >= 9.0) GROUP BY patient.sex, patient.birthday HAVING count(*) > 0 ORDER BY patient.birthday ASC;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE (laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0) OR (examination.`acl igm` <= 3.5 OR examination.`acl igm` >= 9.0) OR (examination.`acl igg` <= 3.5 OR examination.`acl igg` >= 9.0) GROUP BY patient.sex, patient.birthday ORDER BY DATEDIFF(patient.birthday, '2016-01-01') ASC;"
        ]
      ]
    },
    {
      "id": 1235,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id , year(current_timestamp) - year(patient.birthday) AS age FROM patient WHERE patient.rbc < 3.5;",
          "SELECT patient.id , year(current_timestamp) - year(patient.birthday) AS age , patient.diagnosis FROM patient WHERE patient.rbc < 3.5;",
          "SELECT patient.diagnosis , SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient WHERE patient.rbc < 3.5;",
          "SELECT patient.id, SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient WHERE patient.rbc < 3.5;"
        ]
      ]
    },
    {
      "id": 1236,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT * FROM patient WHERE sex = 'F' AND SUBTRACT(year(current_timestamp), year(birthday)) >= 50 AND (rbc <= 3.5 OR rbc >= 6.0);",
          "SELECT * FROM patient WHERE sex = 'F' AND SUBTRACT(year(current_timestamp), year(birthday)) >= 50 AND (rbc <= 3.5 OR rbc >= 6.0) AND admission = '+';",
          "SELECT * FROM patient WHERE sex = 'F' AND SUBTRACT(year(current_timestamp), year(birthday)) >= 50 AND (rbc <= 3.5 OR rbc >= 6.0) AND (admission = '+' OR admission = '-');",
          "SELECT * FROM patient WHERE sex = 'F' AND SUBTRACT(strftime('%Y', 'now'), strftime('%Y', birthday)) >= 50 AND (rbc <= 3.5 OR rbc >= 6.0) AND admission = '+';"
        ]
      ]
    },
    {
      "id": 1237,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id, sex FROM patient WHERE admission = '-' AND hgb < 10;",
          "SELECT patient.id, patient.sex FROM patient WHERE patient.admission = '-' AND patient.hgb < 10;",
          "SELECT id, sex FROM patient WHERE admission = '-' AND hbg < 10;",
          "SELECT patient.id, patient.sex FROM patient WHERE patient.admission = '-' AND patient.hbg < 10;"
        ]
      ]
    },
    {
      "id": 1238,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex FROM patient WHERE patient.diagnosis = 'SLE' AND (10 < patient.hgb < 17);",
          "SELECT patient.id, patient.sex FROM patient WHERE patient.diagnosis = 'SLE' AND 10 < patient.hgb < 17 ORDER BY patient.birthday DESC LIMIT 1;",
          "SELECT patient.id, patient.sex FROM patient WHERE patient.diagnosis = 'SLE' AND 10 < patient.hgb AND patient.hgb < 17;",
          "SELECT patient.id, patient.sex FROM patient WHERE patient.diagnosis = 'SLE' AND (10 < patient.hgb AND patient.hgb < 17);"
        ]
      ]
    },
    {
      "id": 1239,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id , SUBTRACT(strftime('%Y', current_timestamp), strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id GROUP BY patient.id HAVING COUNT(patient.id) > 2 AND laboratory.hct >= 52;",
          "SELECT patient.id , SUBTRACT(strftime('%Y', current_timestamp), strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN examination examination ON patient.id = examination.id INNER JOIN laboratory laboratory ON patient.id = laboratory.id GROUP BY patient.id HAVING COUNT(patient.id) > 2 AND laboratory.hct >= 52;",
          "SELECT patient.id , strftime('%Y', current_timestamp) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN examination examination ON patient.id = examination.id INNER JOIN laboratory laboratory ON patient.id = laboratory.id GROUP BY patient.id HAVING COUNT(patient.id) > 2 AND laboratory.hct >= 52;",
          "SELECT patient.id , SUBTRACT(strftime('%Y', current_timestamp), strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN examination examination ON patient.id = examination.id INNER JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.hct >= 52 GROUP BY patient.id HAVING COUNT(patient.id) > 2;"
        ]
      ]
    },
    {
      "id": 1240,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.hct) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`examination date` LIKE '1991%' AND laboratory.hct < 29;",
          "SELECT avg(laboratory.hct) FROM laboratory WHERE laboratory.date LIKE '1991%' AND laboratory.hct < 29;",
          "SELECT avg(laboratory.hct) FROM laboratory INNER JOIN examination ON examination.id = laboratory.id WHERE examination.`examination date` LIKE '1991%' AND laboratory.hct < 29;",
          "SELECT avg(laboratory.hct) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.diagnosis = 'Normal' AND laboratory.date LIKE '1991%' AND laboratory.hct < 29;"
        ]
      ]
    },
    {
      "id": 1241,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT SUM(plt < 100), SUM(plt > 400) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE diagnosis = 'RA susp.');",
          "SELECT SUM(plt < 100), SUM(plt > 400) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE plt <= 100 OR plt >= 400);",
          "SELECT sum(plt < 100), sum(plt > 400) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE diagnosis = 'RA susp.');",
          "SELECT SUM(plt < 100), SUM(plt > 400) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE id IN (SELECT id FROM examination WHERE plt <= 100 OR plt >= 400));"
        ]
      ]
    },
    {
      "id": 1242,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(laboratory.date) = '1984' AND SUBTraCT(year(current_timestamp), year(patient.birthday)) < 50 AND laboratory.plt BETWEEN 100 AND 400;",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.plt BETWEEN 100 AND 400 AND YEAR(date) = '1984' AND SUBTraCT(year(current_timestamp), year(birthday)) < 50;",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.plt BETWEEN 100 AND 400 AND YEAR(laboratory.date) = '1984' AND SUBTraCT(year(current_timestamp), year(patient.birthday)) < 50;",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(laboratory.date) = '1984' AND SUBTraCT(year(current_timestamp), year(patient.birthday)) < 50 AND (laboratory.plt BETWEEN 100 AND 400);"
        ]
      ]
    },
    {
      "id": 1243,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (sum(CASE WHEN sex = 'F' AND pt >= 14 THEN 1 ELSE 0 END) * 100.0 / sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END)) AS percentage FROM patient WHERE SUBTRACT(year(current_timestamp), year(birthday)) > 55;",
          "SELECT (SUM(CASE WHEN sex = 'F' AND pt >= 14 THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN sex = 'F' THEN 1 ELSE 0 END)) AS percentage FROM patient WHERE SUBTRACT(year(current_timestamp), year(birthday)) > 55;",
          "SELECT cast(sum(CASE WHEN sex = 'F' AND pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) FROM patient WHERE SUBTRACT(year(current_timestamp), year(birthday)) > 55;",
          "SELECT cast(sum(CASE WHEN sex = 'F' AND pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS percentage FROM patient WHERE SUBTRACT(year(current_timestamp), year(birthday)) > 55;"
        ]
      ]
    },
    {
      "id": 1244,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT * FROM patient WHERE year(`first date`) > 1992 AND pt < 14;",
          "SELECT patient.id FROM patient WHERE year(`first date`) > 1992 AND pt < 14;",
          "SELECT * FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE year(`first date`) > 1992 AND pt < 14;",
          "SELECT DISTINCT patient.id FROM patient WHERE year(`first date`) > 1992 AND pt < 14;"
        ]
      ]
    },
    {
      "id": 1245,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM examination WHERE `examination date` > '1997-01-01' AND aptt < 45;",
          "SELECT count(*) FROM examination WHERE `examination date` > '1997-01-01' AND laboratory.aptt < 45;",
          "SELECT count(laboratory.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45;",
          "SELECT count(examination.id) FROM examination examination INNER JOIN patient patient ON examination.id = patient.id WHERE examination.`examination date` > '1997-01-01' AND examination.aptt < 45;"
        ]
      ]
    },
    {
      "id": 1246,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT laboratory.id) FROM laboratory laboratory INNER JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.aptt > 45 AND patient.thrombosis = 0;",
          "SELECT count(DISTINCT examination.id) FROM examination examination INNER JOIN patient patient ON examination.id = patient.id WHERE examination.aptt > 45 AND examination.thrombosis = 0;",
          "SELECT count(DISTINCT examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 0;",
          "SELECT count(DISTINCT examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.aptt > 45;"
        ]
      ]
    },
    {
      "id": 1247,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc > 3.5 AND laboratory.wbc < 9.0 AND laboratory.fg <= 150 OR laboratory.fg >= 450;",
          "SELECT count(laboratory.wbc) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc > 3.5 AND laboratory.wbc < 9.0;",
          "SELECT count(laboratory.fg) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc > 3.5 AND laboratory.wbc < 9.0 AND laboratory.fg <= 150 OR laboratory.fg >= 450;",
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.wbc > 3.5 AND laboratory.wbc < 9.0 AND laboratory.fg <= 150 OR laboratory.fg >= 450;"
        ]
      ]
    },
    {
      "id": 1248,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient WHERE patient.birthday > '1980-01-01' AND patient.fg BETWEEN 150 AND 450;",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE patient.birthday > '1980-01-01' AND patient.fg NOT BETWEEN 150 AND 450;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg BETWEEN 150 AND 450;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id JOIN examination examination ON patient.id = examination.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg BETWEEN 150 AND 450;"
        ]
      ]
    },
    {
      "id": 1249,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.diagnosis FROM examination JOIN patient ON examination.id = patient.id WHERE examination.`u-pro` >= 30;",
          "SELECT DISTINCT patient.diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` >= 30;",
          "SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`u-pro` >= 30;",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` >= 30;"
        ]
      ]
    },
    {
      "id": 1250,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE `u-pro` BETWEEN 0 AND 30 AND diagnosis = 'SLE';",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE `u-pro` BETWEEN 0 AND 30 AND diagnosis = 'SLE';",
          "SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE `u-pro` BETWEEN 0 AND 30 AND diagnosis = 'SLE';",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE 0 < laboratory.`u-pro` AND laboratory.`u-pro` < 30 AND examination.diagnosis = 'SLE';"
        ]
      ]
    },
    {
      "id": 1251,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT examination.id) FROM examination WHERE examination.igg >= 2000;",
          "SELECT DISTINCT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl igg` >= 2000;",
          "SELECT DISTINCT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.igg >= 2000;",
          "SELECT COUNT(DISTINCT examination.id) FROM examination WHERE examination.igg >= 2000;"
        ]
      ]
    },
    {
      "id": 1252,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.igg > 900 AND examination.igg < 2000 AND examination.symptoms IS NOT NULL;",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl igg` > 900 AND examination.`acl igg` < 2000 AND examination.symptoms IS NOT NULL;",
          "SELECT count(examination.symptoms) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.igg > 900 AND examination.igg < 2000 AND examination.symptoms IS NOT NULL;",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.igg > 900 AND examination.igg < 2000 AND patient.symptoms IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1253,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT diagnosis FROM patient WHERE id IN (SELECT id FROM examination WHERE iga BETWEEN 80 AND 500);",
          "SELECT diagnosis FROM patient WHERE id IN ( SELECT id FROM examination WHERE iga BETWEEN 80 AND 500 );",
          "SELECT patient.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.iga BETWEEN 80 AND 500;",
          "SELECT patient.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1254,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` > 80 AND examination.`acl iga` < 500 AND strftime('%Y', patient.`first date`) >= 1990;",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.iga > 80 AND laboratory.iga < 500 AND strftime('%Y', patient.`first date`) >= 1990;",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl iga` > 80 AND examination.`acl iga` < 500 AND strftime('%Y', patient.`first date`) >= 1990;",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` > 80 AND examination.`acl iga` < 500 AND strftime('%Y', patient.`first date`) >= '1990';"
        ]
      ]
    },
    {
      "id": 1255,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.igm <= 40 OR examination.igm >= 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;",
          "SELECT diagnosis FROM patient WHERE (igm <= 40 OR igm >= 400) GROUP BY diagnosis ORDER BY count(diagnosis) DESC LIMIT 1;",
          "SELECT patient.diagnosis FROM patient JOIN examination ON patient.id = examination.id WHERE examination.igm <= 40 OR examination.igm >= 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;",
          "SELECT patient.diagnosis FROM patient WHERE patient.igm <= 40 OR patient.igm >= 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1256,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE crp = '+' AND description IS NULL;",
          "SELECT count(id) FROM patient WHERE description IS NULL AND crp = '+';",
          "SELECT count(patient.id) FROM patient WHERE patient.crp = '+' AND patient.description IS NULL;",
          "SELECT count(patient.id) FROM patient WHERE patient.description IS NULL AND patient.crp = '+';"
        ]
      ]
    },
    {
      "id": 1257,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5 AND SUBTraCT((YEAR(CURdate()), YEAR(birthday))) < 70;",
          "SELECT count(*) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.cre >= 1.5 AND SUBTraCT((YEAR(CURdate()), YEAR(birthday))) < 70;",
          "SELECT count(laboratory.id) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.cre >= 1.5 AND SUBTraCT((YEAR(CURdate()), YEAR(birthday))) < 70;",
          "SELECT count(laboratory.id) FROM laboratory laboratory WHERE laboratory.cre >= 1.5 AND SUBTraCT((YEAR(CURdate()), YEAR(birthday))) < 70;"
        ]
      ]
    },
    {
      "id": 1258,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient JOIN examination ON patient.id = examination.id WHERE examination.kct = '+' AND patient.ra = '-';",
          "SELECT count(DISTINCT patient.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.kct = '+' AND patient.ra = '-';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.kct = '+' AND patient.ra = '-';",
          "SELECT count(DISTINCT patient.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.kct = '+' AND examination.ra = '-';"
        ]
      ]
    },
    {
      "id": 1259,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(patient.birthday) >= 1985 AND laboratory.ra IN('-', '+-');",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(patient.birthday) >= 1985 AND laboratory.ra IN('-', '+-');",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(patient.birthday) >= 1985 AND ra IN('-', '+-');",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(patient.birthday) >= 1985 AND ra IN('-', '+-');"
        ]
      ]
    },
    {
      "id": 1260,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE rf < 20 AND (YEAR(CURdate()) - YEAR(birthday)) > 60;",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND (YEAR(CURdate()) - YEAR(patient.birthday)) > 60;",
          "SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND (YEAR(CURdate()) - YEAR(patient.birthday)) > 60;",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.rf < 20 AND (YEAR(CURdate()) - YEAR(patient.birthday)) > 60;"
        ]
      ]
    },
    {
      "id": 1261,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND patient.thrombosis = '0';",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.rf < 20 AND examination.thrombosis = '0';",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.rf < 20 AND examination.thrombosis = '0';",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND patient.diagnosis != 'thrombosis';"
        ]
      ]
    },
    {
      "id": 1262,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT examination.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND examination.c3 > 35;",
          "SELECT count(DISTINCT examination.`acl iga`) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND examination.c3 > 35;",
          "SELECT count(DISTINCT examination.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` = 3 AND examination.`ana pattern` = 'P';",
          "SELECT count(DISTINCT examination.`acl iga`) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` > 35 AND examination.`ana pattern` = 'P';"
        ]
      ]
    },
    {
      "id": 1263,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1;",
          "SELECT patient.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.\"ACL IGA\" DESC LIMIT 1;",
          "SELECT patient.id FROM examination examination JOIN laboratory laboratory ON examination.id = laboratory.id JOIN patient patient ON examination.id = patient.id WHERE examination.diagnosis = 'Normal' AND laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1;",
          "SELECT patient.id FROM examination examination JOIN laboratory laboratory ON examination.id = laboratory.id JOIN patient patient ON examination.id = patient.id WHERE examination.diagnosis = 'Normal' AND laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.\"ACL IGA\" DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1264,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.c4 > 10;",
          "SELECT count(DISTINCT laboratory.c4) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.c4 > 10 AND patient.diagnosis = 'APS';",
          "SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.c4 > 10 AND patient.diagnosis = 'APS';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`acl iga` = 4 AND laboratory.c4 > 10;"
        ]
      ]
    },
    {
      "id": 1265,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rnp = '-' AND patient.admission = '+';",
          "SELECT count(DISTINCT patient.id) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.rnp = '-' AND patient.admission = '+';",
          "SELECT count(DISTINCT patient.id) FROM laboratory laboratory JOIN patient ON laboratory.id = patient.id WHERE laboratory.rnp = '-' AND patient.admission = '+';",
          "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rnp = '-' AND patient.admission = '+';"
        ]
      ]
    },
    {
      "id": 1266,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE rnp NOT IN('-', '+-')) ORDER BY birthday DESC LIMIT 1;",
          "SELECT birthday FROM patient WHERE rnp NOT IN('-', '+-') AND birthday = (SELECT MAX(birthday) FROM patient);",
          "SELECT patient.birthday FROM patient WHERE patient.rnp NOT IN('-', '+-') AND patient.birthday = (SELECT MAX(patient.birthday) FROM patient);",
          "SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE rnp NOT IN('-', '+-')) AND birthday = (SELECT MAX(birthday) FROM patient);"
        ]
      ]
    },
    {
      "id": 1267,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.sm IN('-', '+-');",
          "SELECT count(DISTINCT examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.sm IN('-', '+-');",
          "SELECT count(DISTINCT examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.sm NOT IN('-', '+-');",
          "SELECT count(DISTINCT patient.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id INNER JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = 0 AND laboratory.sm IN('-', '+-');"
        ]
      ]
    },
    {
      "id": 1268,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE sm NOT IN ('negative', '0') ORDER BY birthday DESC LIMIT 3;",
          "SELECT id FROM patient WHERE sm NOT IN ('negative', '0') ORDER BY birthday LIMIT 3;",
          "SELECT patient.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.sm NOT IN ('negative', '0') ORDER BY patient.birthday DESC LIMIT 3;",
          "SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sm NOT IN ('negative', '0') ORDER BY patient.birthday DESC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 1269,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `examination date` >  1997-01-01 AND sc170 IN('negative','0');",
          "SELECT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `examination date` >  1997-01-01 AND laboratory.sc170 IN('negative','0');",
          "SELECT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `examination date` > '1997-01-01' AND sc170 IN('negative','0');",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.sc170 IN('negative','0');"
        ]
      ]
    },
    {
      "id": 1270,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sc170 IN('negative', '0') AND patient.sex = 'F' AND examination.symptoms IS NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN('negative', '0') AND patient.sex = 'F' AND examination.symptoms IS NULL;",
          "SELECT DISTINCT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.sc170 IN('negative', '0') AND patient.sex = 'F' AND examination.symptoms IS NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON laboratory.id = patient.id INNER JOIN examination ON examination.id = patient.id WHERE laboratory.sc170 IN('negative', '0') AND patient.sex = 'F' AND examination.symptoms IS NULL;"
        ]
      ]
    },
    {
      "id": 1271,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN('-','+-') AND YEAR(patient.`first date`) < 2000;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN('-','+-') AND YEAR(`first date`) < 2000;",
          "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN('-','+-') AND YEAR(patient.`first date`) < 2000;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN ('-','+-') AND YEAR(patient.`first date`) < 2000;"
        ]
      ]
    },
    {
      "id": 1272,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE `first date` = (SELECT min(`first date`) FROM patient WHERE ssa NOT IN('negative', '0'));",
          "SELECT id FROM patient WHERE `first date` = (SELECT MIN(`first date`) FROM patient WHERE ssa NOT IN('negative', '0'));",
          "SELECT id FROM patient WHERE `first date` = (SELECT MIN(`first date`) FROM patient) AND ssa NOT IN('negative', '0');",
          "SELECT id FROM patient WHERE `first date` = (SELECT min(`first date`) FROM patient) AND ssa NOT IN('negative', '0');"
        ]
      ]
    },
    {
      "id": 1273,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ssb IN('-', '+-') AND patient.diagnosis = 'SLE';",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.ssb IN('-', '+-') AND patient.diagnosis = 'SLE';",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.ssb IN('-', '+-') AND examination.diagnosis = 'SLE';",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SLE' AND patient.ssb IN('-', '+-');"
        ]
      ]
    },
    {
      "id": 1274,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.ssb IN ('negative', '0') AND examination.symptoms IS NOT NULL;",
          "SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.ssb IN ('negative', '0') AND examination.symptoms IS NOT NULL;",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms IS NOT NULL AND patient.ssb IN ('negative', '0');",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.ssb IN ('negative', '0') AND examination.symptoms IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1275,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.centromea IN('-', '+-') AND laboratory.ssb IN('-', '+-') AND patient.sex = 'M';",
          "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.centromea IN('-', '+-') AND laboratory.ssb IN('-', '+-') AND patient.sex = 'M';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.centromea IN('-', '+-') AND laboratory.ssb IN('-', '+-') AND patient.sex = 'M';",
          "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.centromea IN('-', '+-') AND laboratory.ssb IN('-', '+-') AND patient.sex = 'M';"
        ]
      ]
    },
    {
      "id": 1276,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT diagnosis FROM patient WHERE dna >= 8;",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna >= 8;",
          "SELECT diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE dna >= 8;",
          "SELECT DISTINCT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.dna >= 8;"
        ]
      ]
    },
    {
      "id": 1277,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE patient.dna < 8 AND patient.description IS NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient LEFT JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < '8' AND patient.description IS NULL;"
        ]
      ]
    },
    {
      "id": 1278,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE 900 < examination.`acl igg` < 2000 AND patient.admission = '+';",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE 900 < examination.`acl igg` AND examination.`acl igg` < 2000 AND patient.admission = '+';",
          "SELECT count(*) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE 900 < examination.`acl igg` < 2000 AND patient.admission = '+';",
          "SELECT count(*) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE 900 < examination.`acl igg` AND examination.`acl igg` < 2000 AND patient.admission = '+';"
        ]
      ]
    },
    {
      "id": 1279,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient)) AS percentage FROM patient WHERE got >= 60 AND diagnosis = 'SLE';",
          "SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient WHERE diagnosis = 'SLE')) AS percentage FROM patient WHERE got >= 60;",
          "SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient WHERE got >= 60 AND diagnosis = 'SLE')) AS percentage FROM patient WHERE got >= 60;",
          "SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient WHERE got >= 60 AND diagnosis = 'SLE')) AS percentage FROM patient WHERE got >= 60 AND diagnosis = 'SLE';"
        ]
      ]
    },
    {
      "id": 1280,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient WHERE patient.sex = 'M' AND patient.got < 60;",
          "SELECT count(DISTINCT patient.id) FROM patient WHERE patient.sex = 'M' AND patient.got < 60;",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.got < 60;",
          "SELECT count(CASE WHEN patient.sex = 'M' THEN patient.id END) FROM patient WHERE patient.got < 60;"
        ]
      ]
    },
    {
      "id": 1281,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT MIN(birthday) FROM patient WHERE got >= 60;",
          "SELECT birthday FROM patient WHERE got >= 60 ORDER BY birthday ASC LIMIT 1;",
          "SELECT MIN(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60;",
          "SELECT MIN(patient.birthday) FROM patient WHERE patient.got >= 60;"
        ]
      ]
    },
    {
      "id": 1282,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT birthday FROM patient WHERE gpt < 60 ORDER BY birthday DESC LIMIT 3;",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3;",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 0, 3;",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE gpt < 60 ORDER BY gpt DESC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 1283,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE got < 60 AND sex = 'M';",
          "SELECT count(DISTINCT patient.id) FROM patient patient, laboratory laboratory WHERE patient.id = laboratory.id AND laboratory.got < 60 AND patient.sex = 'M';",
          "SELECT count(*) FROM ( SELECT patient.id FROM examination examination, patient patient WHERE examination.id = patient.id AND examination.got < 60 AND patient.sex = 'M' );",
          "SELECT count(*) FROM ( SELECT patient.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE got < 60 AND sex = 'M' );"
        ]
      ]
    },
    {
      "id": 1284,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT MIN(`first date`) FROM patient WHERE ldh < 500;",
          "SELECT MIN(`first date`) FROM patient WHERE ldh < 500;",
          "SELECT patient.`first date` FROM laboratory WHERE ldh < 500 ORDER BY ldh DESC LIMIT 1;",
          "SELECT MIN(`first date`) FROM patient WHERE `first date` = (SELECT max(ldh) FROM laboratory WHERE ldh < 500);"
        ]
      ]
    },
    {
      "id": 1285,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT date FROM patient WHERE id = (SELECT max(id) FROM patient) AND ldh >= 500;",
          "SELECT date FROM patient WHERE id = (SELECT MAX(id) FROM patient) AND ldh >= 500;",
          "SELECT * FROM patient WHERE id = (SELECT max(id) FROM patient) AND ldh >= 500;",
          "SELECT \"`examination date`\" FROM examination WHERE id = (SELECT id FROM patient WHERE \"`first date`\" = (SELECT max(\"`first date`\") FROM patient)) AND ldh >= 500;"
        ]
      ]
    },
    {
      "id": 1286,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alp >= 300 AND patient.admission = '+';",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp >= 300 AND patient.admission = '+';",
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp >= 300 AND patient.admission = '+';",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.alp >= 300;"
        ]
      ]
    },
    {
      "id": 1287,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.alp) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.alp < 300;",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.alp < 300;",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission = '-';",
          "SELECT count(laboratory.alp) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.alp < 300;"
        ]
      ]
    },
    {
      "id": 1288,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT diagnosis FROM patient WHERE id IN (SELECT id FROM laboratory WHERE tp < 6.0);",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0;",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0;",
          "SELECT patient.diagnosis FROM patient WHERE patient.id IN (SELECT laboratory.id FROM laboratory WHERE laboratory.tp < 6.0);"
        ]
      ]
    },
    {
      "id": 1289,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SJS' AND examination.tp > 6.0 AND examination.tp < 8.5;",
          "SELECT count(DISTINCT patient.id) FROM examination JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SJS' AND examination.tp > 6.0 AND examination.tp < 8.5;",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SJS' AND examination.tp > 6.0 AND examination.tp < 8.5;",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SJS' AND (examination.tp > 6.0 AND examination.tp < 8.5);"
        ]
      ]
    },
    {
      "id": 1290,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT `examination date` FROM examination WHERE `acl igg` = (SELECT MAX(alb) FROM laboratory WHERE alb > 3.5 AND alb < 5.5);",
          "SELECT examination.`examination date` FROM examination JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.alb = (SELECT MAX(alb) FROM laboratory WHERE alb > 3.5 AND alb < 5.5);",
          "SELECT examination.`examination date` FROM examination WHERE examination.`acl igg` = (SELECT MAX(alb) FROM laboratory WHERE alb > 3.5 AND alb < 5.5);",
          "SELECT `examination date` FROM examination WHERE `acl igg` = (SELECT MAX(`acl igg`) FROM examination WHERE `acl igg` > 3.5 AND `acl igg` < 5.5);"
        ]
      ]
    },
    {
      "id": 1291,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM patient WHERE sex = 'M' AND alb > 3.5 AND alb < 5.5 AND tp BETWEEN 6.0 AND 8.5;",
          "SELECT count(*) FROM patient WHERE sex = 'M' AND alb > 3.5 AND alb < 5.5 AND tp between 6.0 and 8.5;",
          "SELECT count(*) FROM patient WHERE sex = 'M' AND alb > 3.5 AND alb < 5.5 AND tp > 6.0 AND tp < 8.5;",
          "SELECT count(*) FROM patient WHERE sex = 'M' AND (alb > 3.5 AND alb < 5.5) AND (tp > 6.0 AND tp < 8.5);"
        ]
      ]
    },
    {
      "id": 1292,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT `acl igg`, `acl igm`, `acl iga` FROM examination WHERE id = (SELECT id FROM patient WHERE sex = 'F' AND ua > 6.50);",
          "SELECT `acl igg`, `acl igm`, `acl iga` FROM examination WHERE sex = 'F' AND ua > 6.50 ORDER BY `acl igg` DESC LIMIT 1;",
          "SELECT `acl igg`, `acl igm`, `acl iga` FROM examination WHERE id = (SELECT patient.id FROM patient WHERE sex = 'F' AND ua > 6.50);",
          "SELECT `acl igg`, `acl igm`, `acl iga` FROM examination WHERE id = (SELECT id FROM patient WHERE sex = 'F' AND ua > 6.50) ORDER BY `acl igg` DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1293,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT MAX(ana) FROM examination WHERE cre < 1.5;",
          "SELECT MAX(examination.ana) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE cre < 1.5;",
          "SELECT MAX(examination.ana) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.cre < 1.5;",
          "SELECT MAX(examination.ana) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.cre < 1.5;"
        ]
      ]
    },
    {
      "id": 1294,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM examination JOIN patient ON examination.id = patient.id WHERE examination.cre < 1.5 AND MAX(examination.`acl iga`) = (SELECT MAX(examination.`acl iga`) FROM examination);",
          "SELECT patient.id FROM examination JOIN patient ON examination.id = patient.id WHERE examination.cre < 1.5 AND MAX(examination.`acl iga`) = (SELECT MAX(`acl iga`) FROM examination);",
          "SELECT examination.id FROM examination JOIN patient ON examination.id = patient.id WHERE examination.cre < 1.5 AND MAX(examination.`acl iga`) = (SELECT MAX(examination.`acl iga`) FROM examination);",
          "SELECT DISTINCT patient.id FROM examination JOIN patient ON examination.id = patient.id WHERE examination.cre < 1.5 AND MAX(examination.`acl iga`) = (SELECT MAX(examination.`acl iga`) FROM examination);"
        ]
      ]
    },
    {
      "id": 1295,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 AND examination.`ana pattern` LIKE '%P%';",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 AND examination.`ana pattern` LIKE '%P%';",
          "SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE `t-bil` >= 2.0 AND examination.`ana pattern` LIKE '%P%';",
          "SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`ana pattern` LIKE '%P%' AND laboratory.`t-bil` >= 2.0;"
        ]
      ]
    },
    {
      "id": 1296,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.`acl igg` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE `t-bil` < 2.0;",
          "SELECT examination.`acl igg` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.`t-bil` < 2.0;",
          "SELECT examination.`acl igg` FROM examination JOIN patient ON examination.id = patient.id WHERE `t-bil` < 2.0;",
          "SELECT examination.`acl igg` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE `t-bil` < 2.0;"
        ]
      ]
    },
    {
      "id": 1297,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE `t-cho` >= 250 AND kct = '-';",
          "SELECT count(laboratory.id) FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE `t-cho` >= 250 AND kct = '-';",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'Normal' AND laboratory.`t-cho` >= 250 AND laboratory.kct = '-';",
          "SELECT count(DISTINCT patient.id) FROM examination examination JOIN laboratory laboratory ON examination.id = laboratory.id JOIN patient patient ON examination.id = patient.id WHERE examination.kct = '-' AND laboratory.`t-cho` >= 250;"
        ]
      ]
    },
    {
      "id": 1298,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND `t-cho` < 250;",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `t-cho` < 250 AND examination.`ana pattern` = 'P';",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `t-cho` < 250 AND `ana pattern` = 'P';",
          "SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`ana pattern` = 'P' AND `t-cho` < 250;"
        ]
      ]
    },
    {
      "id": 1299,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM examination WHERE tg < 200 AND symptoms IS NOT NULL;",
          "SELECT count(id) FROM patient WHERE tg < 200 AND symptoms IS NOT NULL;",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.tg < 200 AND examination.symptoms IS NOT NULL;",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.tg < 200 AND examination.symptoms is not null;"
        ]
      ]
    },
    {
      "id": 1300,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200;",
          "SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.tg < 200;",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.tg < 200 AND examination.diagnosis = 'Normal';",
          "SELECT patient.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.tg < 200 AND patient.diagnosis = 'Normal';"
        ]
      ]
    },
    {
      "id": 1301,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250;",
          "SELECT patient.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250;",
          "SELECT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 0 AND patient.cpk < 250;",
          "SELECT DISTINCT patient.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250;"
        ]
      ]
    },
    {
      "id": 1302,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM examination JOIN patient ON examination.id = patient.id WHERE cpk < 250 AND (kct = '+' OR rvvt = '+' OR lac = '+');",
          "SELECT count(patient.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+');",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+');",
          "SELECT count(examination.id) FROM examination JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'Normal' AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+');"
        ]
      ]
    },
    {
      "id": 1303,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT birthday FROM patient WHERE glu > 180 ORDER BY birthday LIMIT 1;",
          "SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE glu > 180) ORDER BY birthday LIMIT 1;",
          "SELECT birthday FROM patient WHERE glu > 180 ORDER BY birthday ASC LIMIT 1;",
          "SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE glu > 180) ORDER BY birthday ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1304,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0;",
          "SELECT count(DISTINCT patient.id) FROM patient patient INNER JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND patient.thrombosis = 0;",
          "SELECT count(patient.id) FROM patient patient INNER JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND patient.thrombosis = 0;",
          "SELECT count(DISTINCT patient.id) FROM patient patient INNER JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND patient.diagnosis != 'thrombosis';"
        ]
      ]
    },
    {
      "id": 1305,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
          "SELECT count(laboratory.wbc) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;"
        ]
      ]
    },
    {
      "id": 1306,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' AND examination.wbc BETWEEN 3.5 AND 9.0;",
          "SELECT count(DISTINCT examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SLE' AND examination.`acl igm` BETWEEN 3.5 AND 9.0;",
          "SELECT count(laboratory.wbc) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON laboratory.id = patient.id WHERE examination.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
          "SELECT count(laboratory.wbc) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON laboratory.id = patient.id WHERE examination.diagnosis = 'Normal' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND examination.diagnosis = 'SLE';"
        ]
      ]
    },
    {
      "id": 1307,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE admission = '-' AND (rbc <= 3.5 OR rbc >= 6.0);",
          "SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0 AND patient.admission = '-';",
          "SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc > 3.5 OR laboratory.rbc < 6.0 AND patient.admission = '-';",
          "SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0 AND patient.admission = '-';"
        ]
      ]
    },
    {
      "id": 1308,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND patient.diagnosis IS NOT NULL;",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.plt > 100 AND patient.plt < 400 AND examination.diagnosis IS NOT NULL;",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.plt > 100 AND examination.plt < 400 AND examination.diagnosis IS NOT NULL;",
          "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.plt > 100 AND examination.plt < 400 AND examination.diagnosis IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1309,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.plt FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'MCTD' AND (laboratory.plt > 100 AND laboratory.plt < 400);",
          "SELECT laboratory.plt FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'MCTD' AND (laboratory.plt > 100 AND laboratory.plt < 400);",
          "SELECT * FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'MCTD' AND (laboratory.plt > 100 AND laboratory.plt < 400);",
          "SELECT * FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE (laboratory.plt > 100 AND laboratory.plt < 400) AND (examination.diagnosis = 'MCTD');"
        ]
      ]
    },
    {
      "id": 1310,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(pt) FROM patient WHERE sex = 'M' AND pt < 14;",
          "SELECT AVG(pt) FROM patient WHERE sex = 'M' AND pt < 14;",
          "SELECT avg(patient.pt) FROM patient WHERE patient.sex = 'M' AND patient.pt < 14;",
          "SELECT avg(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.pt < 14;"
        ]
      ]
    },
    {
      "id": 1311,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(*) FROM examination WHERE thrombosis = 2 AND pt < 14;",
          "SELECT count(id) FROM examination WHERE thrombosis = 2 AND pt < 14;",
          "SELECT count(*) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.pt < 14;",
          "SELECT count(*) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis IN (2, 1) AND examination.pt < 14;"
        ]
      ]
    },
    {
      "id": 1312,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
          "SELECT major.major_name FROM member member INNER JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
          "SELECT major.major_name FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';"
        ]
      ]
    },
    {
      "id": 1313,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM major WHERE college = 'College of Engineering';",
          "SELECT count(*) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
          "SELECT count(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE college = 'College of Engineering');"
        ]
      ]
    },
    {
      "id": 1314,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';",
          "SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';",
          "SELECT first_name, last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';",
          "SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';"
        ]
      ]
    },
    {
      "id": 1315,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_member) FROM attendance, member, event WHERE attendance.link_to_member = member.member_id AND attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer';",
          "SELECT count(attendance.link_to_member) FROM attendance, event, member WHERE attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer' AND attendance.link_to_member = member.member_id AND member.position = 'Student_Club';",
          "SELECT count(attendance.link_to_member) FROM attendance, member, event, zip_code WHERE attendance.link_to_member = member.member_id AND attendance.link_to_event = event.event_id AND member.zip = zip_code.zip_code AND event.event_name = 'Women's Soccer';",
          "SELECT count(attendance.link_to_member) FROM attendance, member, event WHERE attendance.link_to_member = member.member_id AND attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer' AND member.position = 'Student_Club';"
        ]
      ]
    },
    {
      "id": 1316,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
          "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';",
          "SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
          "SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"
        ]
      ]
    },
    {
      "id": 1317,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';",
          "SELECT count(member.t_shirt_size) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';",
          "SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance attendance ON member.member_id = attendance.link_to_member INNER JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';",
          "SELECT count(member.t_shirt_size) FROM member member INNER JOIN attendance attendance ON member.member_id = attendance.link_to_member INNER JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';"
        ]
      ]
    },
    {
      "id": 1318,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;",
          "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Student_Club' GROUP BY e.event_name ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;",
          "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Student_Club' GROUP BY e.event_id ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;",
          "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Student_Club' GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1319,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';",
          "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE position = 'Vice President');",
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
          "SELECT college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';"
        ]
      ]
    },
    {
      "id": 1320,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';",
          "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';",
          "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';"
        ]
      ]
    },
    {
      "id": 1321,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT event.event_id) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member JOIN event event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;",
          "SELECT count(DISTINCT event.event_id) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event JOIN member member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;",
          "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN member member ON attendance.link_to_member = member.member_id JOIN event event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;",
          "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN member member ON attendance.link_to_member = member.member_id JOIN event event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event_date) = 2019;"
        ]
      ]
    },
    {
      "id": 1322,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' AND member.last_name = 'Student_Club';",
          "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Student_Club' AND event.type = 'Meeting';",
          "SELECT COUNT(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Student_Club' AND event.type = 'Meeting';",
          "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' AND member.last_name = 'Student_Club' AND COUNT(event.event_id) > 10;"
        ]
      ]
    },
    {
      "id": 1323,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(attendance.link_to_event) > 20 AND event.type != 'Fundraiser';",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(event.event_id) > 20 AND event.type != 'Fundraiser';",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(attendance.link_to_event) > 20 AND event.type != 'Fundraising';",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.amount > 20 AND budget.event_status = 'Open';"
        ]
      ]
    },
    {
      "id": 1324,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT avg(attendance) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;",
          "SELECT avg(attendance.link_to_event) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' AND YEAR(event.event_date) = 2020;",
          "SELECT avg(attendance.link_to_event) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE YEAR(event.event_date) = 2020;",
          "SELECT avg(attendance.link_to_event) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' AND YEAR(event_date) = 2020;"
        ]
      ]
    },
    {
      "id": 1325,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense );",
          "SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense);",
          "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.spent = ( SELECT max(spent) FROM budget );",
          "SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense WHERE approved = 'true' );"
        ]
      ]
    },
    {
      "id": 1326,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
          "SELECT count(member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
          "SELECT count(DISTINCT member.member_id) FROM member member INNER JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
          "SELECT count(DISTINCT t1.member_id) FROM ( SELECT member.member_id FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering' ) t1;"
        ]
      ]
    },
    {
      "id": 1327,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';",
          "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';",
          "SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';",
          "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';"
        ]
      ]
    },
    {
      "id": 1328,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';",
          "SELECT member.last_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Law and Constitutional Studies';",
          "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';",
          "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies' GROUP BY member.last_name;"
        ]
      ]
    },
    {
      "id": 1329,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';",
          "SELECT county FROM zip_code INNER JOIN member ON member.zip = zip_code.zip_code WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';",
          "SELECT county FROM zip_code INNER JOIN member ON member.zip = zip_code.zip_code WHERE first_name = 'Sherri' AND last_name = 'Ramsey';"
        ]
      ]
    },
    {
      "id": 1330,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';",
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Hewitt';",
          "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';",
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';"
        ]
      ]
    },
    {
      "id": 1331,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';",
          "SELECT income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President';",
          "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE position = 'Vice President';",
          "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President' AND income.source = 'Funds Received';"
        ]
      ]
    },
    {
      "id": 1332,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category , budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';",
          "SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';",
          "SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting';",
          "SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN member ON budget.link_to_member = member.member_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';"
        ]
      ]
    },
    {
      "id": 1333,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT city, state FROM member WHERE position = 'President';",
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';",
          "SELECT city, state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'President';",
          "SELECT city, state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE position = 'President';"
        ]
      ]
    },
    {
      "id": 1334,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';",
          "SELECT first_name, last_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'Illinois');",
          "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'Illinois');",
          "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member WHERE member.zip IN (SELECT zip_code.zip_code FROM zip_code WHERE zip_code.state = 'Illinois');"
        ]
      ]
    },
    {
      "id": 1335,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement';",
          "SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND event.event_name = 'September Meeting';",
          "SELECT budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement';",
          "SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN member ON budget.link_to_member = member.member_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement';"
        ]
      ]
    },
    {
      "id": 1336,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Pierce' AND member.first_name = 'Guidi';",
          "SELECT major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Pierce' AND member.first_name = 'Guidi';",
          "SELECT DISTINCT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Pierce' AND member.first_name = 'Guidi';",
          "SELECT major.department FROM major INNER JOIN member ON member.link_to_major = major.major_id WHERE member.last_name = 'Pierce' AND member.first_name = 'Guidi';"
        ]
      ]
    },
    {
      "id": 1337,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';",
          "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';",
          "SELECT sum(budget.amount) FROM budget budget INNER JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';",
          "SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';"
        ]
      ]
    },
    {
      "id": 1338,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT CASE WHEN expense.approved = 'true' THEN 'Yes' ELSE 'No' END FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'October Meeting' AND expense.expense_date = '2019-10-08';",
          "SELECT CASE WHEN expense.approved = 'true' THEN 'Yes' ELSE 'No' END FROM expense INNER JOIN event ON expense.expense_id = event.event_id WHERE event.event_name = 'October Meeting' AND expense.expense_date = '2019-10-08';",
          "SELECT CASE WHEN expense.approved = 'true' THEN 'Yes' ELSE 'No' END FROM expense INNER JOIN event ON expense.link_to_budget = budget.budget_id WHERE event.event_name = 'October Meeting' AND expense.expense_date = '2019-10-08';",
          "SELECT CASE WHEN expense.approved = 'true' THEN 'Yes' ELSE 'No' END FROM expense WHERE expense.expense_date = '2019-10-08' AND event.event_name = 'October Meeting';"
        ]
      ]
    },
    {
      "id": 1339,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(expense.cost) / count(expense.expense_id) AS average_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.last_name = 'Allen' AND member.first_name = 'Elijah' AND (month(expense.expense_date) = 9 OR month(expense.expense_date) = 10);",
          "SELECT sum(expense.cost) / count(expense.expense_id) AS average_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Allen' AND member.first_name = 'Elijah' AND (month(expense.expense_date) = 9 OR month(expense.expense_date) = 10);",
          "SELECT sum(expense.cost) / count(expense.expense_id) AS average_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN event ON expense.link_to_event = event.event_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Allen' AND member.first_name = 'Elijah' AND (month(expense.expense_date) = 9 OR month(expense.expense_date) = 10);",
          "SELECT sum(expense.cost) / count(expense.expense_id) AS average_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN event ON expense.link_to_event = event.event_id WHERE member.last_name = 'Allen' AND member.first_name = 'Elijah' AND (month(expense.expense_date) = 9 OR month(expense.expense_date) = 10);"
        ]
      ]
    },
    {
      "id": 1340,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(t.spent) - sum(t1.spent) FROM budget AS t INNER JOIN event AS t1 ON t.link_to_event = t1.event_id WHERE t1.event_name = 'Student_Club' AND t1.event_date LIKE '2019%';",
          "SELECT sum(t.spent) - sum(t2.spent) FROM budget AS t INNER JOIN event AS t2 ON t.link_to_event = t2.event_id WHERE t2.event_name = 'Student_Club' AND t2.event_date LIKE '2019%';",
          "SELECT sum(t.spent) - sum(t2.spent) FROM budget AS t INNER JOIN event AS t2 ON t.link_to_event = t2.event_id WHERE t2.event_name = 'Student_Club' AND t.event_date LIKE '2019%' AND t2.event_date LIKE '2020%';",
          "SELECT sum(t.spent) - sum(t1.spent) FROM budget AS t INNER JOIN event AS t1 ON t.link_to_event = t1.event_id WHERE t1.event_name = 'Student_Club' AND t.event_date LIKE '2019%' AND t1.event_date LIKE '2020%';"
        ]
      ]
    },
    {
      "id": 1341,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT location FROM event WHERE event_name = 'Spring Budget Review';",
          "SELECT event.location FROM event WHERE event.event_name = 'Spring Budget Review';",
          "SELECT location FROM event WHERE event_name = 'Spring budget Review';",
          "SELECT location FROM event WHERE event.event_name = 'Spring Budget Review';"
        ]
      ]
    },
    {
      "id": 1342,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.cost FROM expense WHERE expense.expense_description = 'Posters' AND expense.expense_date = '2019-09-04';",
          "SELECT expense.cost FROM expense WHERE expense.expense_date = '2019-09-04' AND expense.expense_description = 'Posters';",
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Posters' AND event.event_date = '2019-09-04';",
          "SELECT expense.cost FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Posters' AND event.event_date = '2019-09-04';"
        ]
      ]
    },
    {
      "id": 1343,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT remaining FROM budget WHERE category = 'Food' ORDER BY budget.amount DESC LIMIT 1;",
          "SELECT budget.remaining FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;",
          "SELECT remaining FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;",
          "SELECT budget.remaining FROM budget WHERE category = 'Food' ORDER BY budget.amount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1344,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.notes FROM income WHERE income.date_received = '2019-09-14' AND income.source = 'Fundraising';",
          "SELECT income.notes FROM income WHERE income.source = 'Fundraising' AND income.date_received = '2019-09-14';",
          "SELECT income.notes FROM income WHERE income.date_received = '2019-09-14';",
          "SELECT income.notes FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-14' AND income.source = 'Fundraising';"
        ]
      ]
    },
    {
      "id": 1345,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM major WHERE major.college = 'College of Humanities and Social Sciences';",
          "SELECT count(major.major_id) FROM major WHERE major.college = 'College of Humanities and Social Sciences';",
          "SELECT count(*) FROM major WHERE college = 'College of Humanities and Social Sciences';",
          "SELECT count(DISTINCT major.major_id) FROM major major WHERE major.college = 'College of Humanities and Social Sciences';"
        ]
      ]
    },
    {
      "id": 1346,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT phone FROM member WHERE full_name = '<NAME>';",
          "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
          "SELECT member.phone FROM member WHERE member.first_name = 'Carlo' AND member.last_name = 'Jacobs';",
          "SELECT phone FROM member WHERE full_name = 'Carlo Jacobs';"
        ]
      ]
    },
    {
      "id": 1347,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher';",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O\\'Gallagher';",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O'Gallagher;",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher' GROUP BY zip_code.county;"
        ]
      ]
    },
    {
      "id": 1348,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;",
          "SELECT count(budget.budget_id) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;",
          "SELECT count(*) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.remaining < 0 AND event.event_name = 'November Meeting';",
          "SELECT count(DISTINCT budget.budget_id) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;"
        ]
      ]
    },
    {
      "id": 1349,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';",
          "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';",
          "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker' AND event.type = 'Budget';",
          "SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'SEPTEMBER SPEAKER';"
        ]
      ]
    },
    {
      "id": 1350,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.status FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';",
          "SELECT DISTINCT event.status FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';",
          "SELECT DISTINCT event.status FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';",
          "SELECT DISTINCT event.status FROM budget INNER JOIN attendance ON budget.link_to_event = attendance.link_to_event INNER JOIN expense ON attendance.link_to_member = expense.link_to_member INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';"
        ]
      ]
    },
    {
      "id": 1351,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Thomason' AND member.first_name = 'Brent';",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Thomason';",
          "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Thomason' AND member.first_name = 'Brent';"
        ]
      ]
    },
    {
      "id": 1352,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';",
          "SELECT count(member.member_id) FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
          "SELECT count(member.t_shirt_size) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';"
        ]
      ]
    },
    {
      "id": 1353,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';",
          "SELECT type FROM zip_code WHERE zip_code = 55108;",
          "SELECT type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';",
          "SELECT type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE first_name = 'Christof' AND last_name = 'Nielson';"
        ]
      ]
    },
    {
      "id": 1354,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
          "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE position = 'Vice President';",
          "SELECT major_name FROM major WHERE major_id = 'rec1x5zBFIqoOuPW8';"
        ]
      ]
    },
    {
      "id": 1355,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT hometown_state FROM member WHERE last_name = 'Harrison' AND first_name = 'Sacha';",
          "SELECT state FROM zip_code WHERE city = 'Hometown' AND last_name = 'Harrison';",
          "SELECT zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha';",
          "SELECT state FROM zip_code WHERE city = 'Hometown';"
        ]
      ]
    },
    {
      "id": 1356,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';",
          "SELECT major.department FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.position = 'President';",
          "SELECT major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'President';",
          "SELECT major.department FROM member member INNER JOIN major major ON member.link_to_major = major.major_id WHERE member.position = 'President';"
        ]
      ]
    },
    {
      "id": 1357,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues';",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues';",
          "SELECT member.first_name, member.last_name, income.date_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.source = 'Dues';",
          "SELECT DISTINCT member.first_name, member.last_name, income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues';"
        ]
      ]
    },
    {
      "id": 1358,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 0, 1;",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1359,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND event.event_name = 'Yearly Kickoff') / (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND event.event_name = 'October Meeting') AS ratio FROM budget LIMIT 1;",
          "SELECT (SELECT sum(budget.amount) FROM budget budget WHERE budget.category = 'Advertisement' AND budget.event_name = 'Yearly Kickoff') / (SELECT sum(budget.amount) FROM budget budget WHERE budget.category = 'Advertisement' AND budget.event_name = 'October Meeting') AS ratio FROM budget LIMIT 1;",
          "SELECT (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff' AND budget.category = 'Advertisement') / (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND budget.category = 'Advertisement') AS ratio FROM budget LIMIT 1;",
          "SELECT (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff') / (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting') AS ratio FROM budget LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1360,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT (sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) / sum(budget.amount) * 100.0) AS percentage FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';",
          "SELECT (sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) / sum(budget.amount) * 100.0) AS percentage FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND event.event_name = 'November Speaker';",
          "SELECT (sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) / sum(budget.amount) * 100.0) AS percentage FROM budget budget INNER JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';",
          "SELECT (sum(CASE WHEN budget.category = 'Parking' AND event.event_name = 'November Speaker' THEN budget.amount ELSE 0 END) / sum(budget.amount) * 100.0) AS percentage FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';"
        ]
      ]
    },
    {
      "id": 1361,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(expense.cost) FROM expense WHERE expense.expense_description = 'Pizza';",
          "SELECT SUM(expense.cost) AS total_cost FROM expense WHERE expense.expense_description = 'Pizza';",
          "SELECT SUM(expense.cost) FROM expense WHERE expense_description = 'Pizza';",
          "SELECT SUM(expense.cost) AS totalcost FROM expense WHERE expense.expense_description = 'Pizza';"
        ]
      ]
    },
    {
      "id": 1362,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(zip_code.city) FROM zip_code WHERE zip_code.county = 'Orange County' AND zip_code.state = 'Virginia';",
          "SELECT count(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';",
          "SELECT count(*) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';",
          "SELECT count(DISTINCT zip_code.city) FROM zip_code WHERE zip_code.county = 'Orange County' AND zip_code.state = 'Virginia';"
        ]
      ]
    },
    {
      "id": 1363,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';",
          "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';",
          "SELECT department FROM major WHERE college = 'college of humanities and social sciences';",
          "SELECT major.department FROM major WHERE college = 'College of Humanities and Social Sciences';"
        ]
      ]
    },
    {
      "id": 1364,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Firth';",
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Firth' AND member.first_name = 'Amy';",
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth';",
          "SELECT zip_code.city FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.last_name = 'Firth' AND member.first_name = 'Amy';"
        ]
      ]
    },
    {
      "id": 1365,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY budget.remaining ASC LIMIT 1;",
          "SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.remaining = (SELECT min(remaining) FROM budget);",
          "SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);",
          "SELECT expense.expense_description FROM budget budget JOIN expense expense ON budget.budget_id = expense.link_to_budget WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);"
        ]
      ]
    },
    {
      "id": 1366,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';",
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';",
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'October Meeting';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE event.event_name = 'October Meeting';"
        ]
      ]
    },
    {
      "id": 1367,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member member INNER JOIN major major ON member.link_to_major = major.major_id GROUP BY major.college HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM member GROUP BY link_to_major));",
          "SELECT major.college FROM member member INNER JOIN major major ON member.link_to_major = major.major_id GROUP BY major.college HAVING count(*) = (SELECT max(cnt) FROM (SELECT count(*) AS cnt FROM member GROUP BY link_to_major));",
          "SELECT major.college FROM member member INNER JOIN major major ON member.link_to_major = major.major_id GROUP BY major.college HAVING count(*) = (SELECT max(cnt) FROM (SELECT count(*) AS cnt FROM member GROUP BY major_id));",
          "SELECT major.college FROM member member INNER JOIN major major ON member.link_to_major = major.major_id GROUP BY major.college HAVING count(member.link_to_major) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM member GROUP BY link_to_major));"
        ]
      ]
    },
    {
      "id": 1368,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';",
          "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.phone = '809-555-3360';",
          "SELECT major.major_name FROM major WHERE major.major_id IN (SELECT member.link_to_major FROM member WHERE member.phone = '809-555-3360');",
          "SELECT major.major_name FROM major WHERE major.major_id = (SELECT member.link_to_major FROM member WHERE member.member_id = 'recD078PnS3x2doBe');"
        ]
      ]
    },
    {
      "id": 1369,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget budget INNER JOIN event event ON budget.link_to_event = event.event_id GROUP BY event.event_name ORDER BY budget.amount DESC LIMIT 1;",
          "SELECT event.event_name FROM budget budget INNER JOIN event ON budget.link_to_event = event.event_id GROUP BY event.event_name ORDER BY budget.amount DESC LIMIT 1;",
          "SELECT event.event_name FROM budget budget INNER JOIN event event ON budget.link_to_event = event.event_id GROUP BY event.event_name HAVING MAX(budget.amount);",
          "SELECT event.event_name FROM budget budget INNER JOIN event event ON budget.link_to_event = event.event_id GROUP BY event.event_name HAVING MAX(budget.amount) = budget.amount;"
        ]
      ]
    },
    {
      "id": 1370,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President';",
          "SELECT expense.expense_id FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President';",
          "SELECT expense.expense_id FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President';",
          "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President';"
        ]
      ]
    },
    {
      "id": 1371,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT attendance.link_to_member) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women's Soccer';",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
          "SELECT count(DISTINCT link_to_member) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
          "SELECT count(link_to_member) FROM attendance WHERE link_to_event LIKE 'recI43CzsZ0Q625ma';"
        ]
      ]
    },
    {
      "id": 1372,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.last_name = 'Mason' AND member.first_name = 'Casey';",
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';",
          "SELECT member.member_id FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-10-17';",
          "SELECT member.member_id FROM member INNER JOIN income ON income.link_to_member = member.member_id WHERE income.date_received = '2019-10-17';"
        ]
      ]
    },
    {
      "id": 1373,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';",
          "SELECT count(member.zip) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';",
          "SELECT count(member_id) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';",
          "SELECT count(*) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Maryland';"
        ]
      ]
    },
    {
      "id": 1374,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';",
          "SELECT count(attendance.link_to_event) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.phone = '954-555-6240';",
          "SELECT count(link_to_event) FROM attendance WHERE link_to_member = 'recD078PnS3x2doBe';",
          "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = 954-555-6240;"
        ]
      ]
    },
    {
      "id": 1375,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';",
          "SELECT first_name, last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';",
          "SELECT member.first_name, member.last_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.department = 'School of Applied Sciences, Technology and Education';",
          "SELECT first_name, last_name FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE department = 'School of Applied Sciences, Technology and Education' );"
        ]
      ]
    },
    {
      "id": 1376,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT MAX(DIVIDE(spent, amount)) FROM budget WHERE budget.event_status LIKE 'Closed';",
          "SELECT MAX(DIVIDE(budget.spent, budget.amount)) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status LIKE 'Closed';",
          "SELECT MAX(DIVIDE(spent, amount)) FROM budget WHERE budget.event_status = 'Closed';",
          "SELECT MAX(DIVIDE(budget.spent, budget.amount)) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed';"
        ]
      ]
    },
    {
      "id": 1377,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member_id) FROM member WHERE position = 'President';",
          "SELECT count(member.member_id) FROM member WHERE member.position = 'President';",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member WHERE member.position = 'President';",
          "SELECT count(member.member_id) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member WHERE member.position = 'President';"
        ]
      ]
    },
    {
      "id": 1378,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT MAX(spent) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE type = 'Budget');",
          "SELECT MAX(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Budget';",
          "SELECT MAX(spent) FROM budget WHERE budget_id IN (SELECT link_to_event FROM event WHERE type = 'Budget');",
          "SELECT MAX(spent) FROM budget WHERE budget_id IN (SELECT budget_id FROM event WHERE type = 'Budget');"
        ]
      ]
    },
    {
      "id": 1379,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(event_id) FROM `event` WHERE type = 'Meeting' AND YEAR(event_date) = 2020;",
          "SELECT count(event_id) FROM `event` WHERE YEAR(event_date) = 2020 AND type = 'Meeting';",
          "SELECT count(event.event_id) FROM event WHERE YEAR(event_date) = 2020 AND type = 'Meeting';",
          "SELECT count(event_id) FROM `event` WHERE YEAR(event_date) = 2020 AND event.type = 'Meeting';"
        ]
      ]
    },
    {
      "id": 1380,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.spent) FROM budget WHERE budget.category = 'Food';",
          "SELECT sum(budget.spent) FROM budget budget WHERE budget.category = 'Food';",
          "SELECT SUM(budget.spent) FROM budget WHERE budget.category = 'Food';",
          "SELECT SUM(budget.spent) FROM budget budget WHERE budget.category = 'Food';"
        ]
      ]
    },
    {
      "id": 1381,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;",
          "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7);",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE COUNT(attendance.link_to_event) > 7;",
          "SELECT member.first_name, member.last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;"
        ]
      ]
    },
    {
      "id": 1382,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name , member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';",
          "SELECT DISTINCT member.first_name , member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';",
          "SELECT member.first_name , member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Community Theater') AND major.major_name = 'Interior Design';"
        ]
      ]
    },
    {
      "id": 1383,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name , member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';",
          "SELECT member.first_name , member.last_name FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';",
          "SELECT member.first_name , member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina' AND zip_code.county = 'Carolina';"
        ]
      ]
    },
    {
      "id": 1384,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM income WHERE income.link_to_member = 'rec280Sk7o31iG0Tx';",
          "SELECT count(income.amount) FROM income WHERE income.link_to_member = 'rec280Sk7o31iG0Tx';",
          "SELECT count(income.income_id) FROM income WHERE income.link_to_member = 'rec280Sk7o31iG0Tx';",
          "SELECT count(*) FROM income WHERE income.link_to_member LIKE 'rec280Sk7o31iG0Tx';"
        ]
      ]
    },
    {
      "id": 1385,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 40;",
          "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE income.amount > 40);",
          "SELECT first_name, last_name FROM member WHERE member_id IN (SELECT income.link_to_member FROM income WHERE income.amount > 40);"
        ]
      ]
    },
    {
      "id": 1386,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(expense.cost) FROM expense WHERE expense.expense_description = 'Yearly Kickoff';",
          "SELECT SUM(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';",
          "SELECT SUM(expense.cost) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';",
          "SELECT SUM(expense.cost) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'Yearly Kickoff';"
        ]
      ]
    },
    {
      "id": 1387,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN budget ON attendance.link_to_event = budget.link_to_event WHERE event.event_name = 'Yearly Kickoff';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN budget ON member.member_id = budget.link_to_member WHERE event.event_name = 'Yearly Kickoff';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN budget ON attendance.link_to_event = budget.link_to_event WHERE budget.event_name = 'Yearly Kickoff';"
        ]
      ]
    },
    {
      "id": 1388,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, income.source, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member ORDER BY income.amount DESC LIMIT 1;",
          "SELECT member.first_name, member.last_name, income.source, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1;",
          "SELECT member.first_name || ' ' || member.last_name AS full_name, income.source FROM member INNER JOIN income ON member.member_id = income.link_to_member ORDER BY income.amount DESC LIMIT 1;",
          "SELECT member.first_name || ' ' || member.last_name AS full_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1389,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY expense.cost LIMIT 1;",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.amount LIMIT 1;",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.amount LIMIT 1;",
          "SELECT event.event_name FROM event INNER JOIN expense ON event.event_id = expense.link_to_event GROUP BY event.event_id ORDER BY MIN(expense.cost) LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1390,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(t.cost) AS total_cost, SUM(t.cost WHERE t.event_name = 'Yearly Kickoff') AS yearly_kickoff_cost FROM expense t;",
          "SELECT SUM(expense.cost) AS total_cost, SUM(expense.cost WHERE event_name = 'Yearly Kickoff') AS yearly_kickoff_cost FROM expense;",
          "SELECT SUM(expense.cost) AS total_cost, SUM(expense.cost WHERE event_name = 'Yearly Kickoff') AS yearly_kickoff_cost FROM expense WHERE event_name = 'Yearly Kickoff';",
          "SELECT SUM(t.cost) AS total_cost, SUM(t.cost WHERE t.event_name = 'Yearly Kickoff') AS yearly_kickoff_cost, DIVIDE(SUM(t.cost WHERE t.event_name = 'Yearly Kickoff'), SUM(t.cost)) * 100 AS percentage FROM expense t;"
        ]
      ]
    },
    {
      "id": 1391,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics')) FROM major;",
          "SELECT DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics')) AS ratio FROM major;",
          "SELECT (SUM(major_name = 'Finance') / SUM(major_name = 'Physics')) AS ratio FROM major;",
          "SELECT SUM(major_name = 'Finance') AS finance, SUM(major_name = 'Physics') AS physics FROM major;"
        ]
      ]
    },
    {
      "id": 1392,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.source ORDER BY sum(income.amount) DESC LIMIT 1;",
          "SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.source ORDER BY SUM(income.amount) DESC LIMIT 1;",
          "SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY income.amount DESC LIMIT 1;",
          "SELECT MAX(source) FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30';"
        ]
      ]
    },
    {
      "id": 1393,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';",
          "SELECT member.first_name, member.last_name, member.email FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Secretary';",
          "SELECT member.first_name, member.last_name, member.email FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Secretary';",
          "SELECT m.first_name, m.last_name, m.email FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Secretary';"
        ]
      ]
    },
    {
      "id": 1394,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';",
          "SELECT count(*) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';",
          "SELECT count(DISTINCT member.member_id) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';",
          "SELECT count(DISTINCT member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';"
        ]
      ]
    },
    {
      "id": 1395,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Community Theater' AND YEAR(event_date) = 2019);",
          "SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;"
        ]
      ]
    },
    {
      "id": 1396,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT COUNT(attendance.link_to_event) FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';",
          "SELECT count(attendance.link_to_event) FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';",
          "SELECT COUNT(attendance.link_to_event) FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Guidi' AND member.first_name = 'Luisa';",
          "SELECT count(attendance.link_to_event) FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Guidi' AND member.first_name = 'Luisa';"
        ]
      ]
    },
    {
      "id": 1397,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(budget.spent) / COUNT(budget.spent) FROM budget WHERE budget.category = 'Food' AND budget.event_status = 'Closed';",
          "SELECT SUM(t.spent) / COUNT(t.spent) FROM budget t WHERE t.category = 'Food' AND t.event_status = 'Closed';",
          "SELECT SUM(budget.spent)/COUNT(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' AND budget.category = 'Food';",
          "SELECT SUM(budget.spent) / COUNT(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' AND budget.category = 'Food';"
        ]
      ]
    },
    {
      "id": 1398,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Advertisement' AND spent = (SELECT max(spent) FROM budget WHERE category = 'Advertisement'));",
          "SELECT event.event_name FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND budget.spent = (SELECT max(budget.spent) FROM budget WHERE budget.category = 'Advertisement');",
          "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_id IN (SELECT link_to_budget FROM budget WHERE category = 'Advertisement' AND spent = (SELECT max(spent) FROM budget WHERE category = 'Advertisement'))));",
          "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_id IN (SELECT link_to_expense FROM budget WHERE category = 'Advertisement' AND spent = (SELECT max(spent) FROM budget WHERE category = 'Advertisement'))));"
        ]
      ]
    },
    {
      "id": 1399,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Mclean' AND event.event_name = 'Women's Soccer';",
          "SELECT member.first_name, member.last_name, event.event_name, 'YES' FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Mclean' AND event.event_name = 'Women's Soccer';",
          "SELECT member.first_name, member.last_name, event.event_name, 'YES' FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Mclean' AND event.event_name = 'Women's Soccer';",
          "SELECT member.first_name, member.last_name, event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';"
        ]
      ]
    },
    {
      "id": 1400,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(event.type = 'Community Service'), COUNT(event.event_id) FROM event WHERE event.event_date BETWEEN' 2019-01-01' and '2019-12-31';",
          "SELECT SUM(event.type = 'Community Service') / COUNT(event.event_id) * 100 FROM event WHERE event.event_date BETWEEN '2019-01-01' and '2019-12-31';",
          "SELECT SUM(event.type = 'Community Service') / COUNT(event.event_id) * 100 FROM event WHERE event.event_date BETWEEN '2019-01-01' and '2019-12-31' AND event.event_name = 'Student_Club';",
          "SELECT event.event_name, SUM(event.type = 'Community Service'), COUNT(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Student_Club' AND event.event_date BETWEEN '2019-01-01' and '2019-12-31' GROUP BY event.event_name;"
        ]
      ]
    },
    {
      "id": 1401,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters';",
          "SELECT expense.cost FROM expense INNER JOIN event ON expense.expense_id = event.event_id WHERE event.event_name = 'September Speaker';",
          "SELECT expense.cost FROM expense INNER JOIN event ON expense.expense_id = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters';",
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Posters' AND event.event_name = 'September Speaker';"
        ]
      ]
    },
    {
      "id": 1402,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;",
          "SELECT t1.t_shirt_size FROM member t1 JOIN attendance t2 ON t1.member_id = t2.link_to_member GROUP BY t1.t_shirt_size ORDER BY count(t1.t_shirt_size) DESC LIMIT 1;",
          "SELECT t1.t_shirt_size FROM member t1 JOIN attendance t2 ON t1.member_id = t2.link_to_member GROUP BY t1.t_shirt_size ORDER BY COUNT(t1.t_shirt_size) DESC LIMIT 1;",
          "SELECT t1.t_shirt_size FROM member t1 GROUP BY t1.t_shirt_size ORDER BY count(t1.t_shirt_size) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1403,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1;",
          "SELECT event.event_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining LIMIT 1;",
          "SELECT event.event_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' GROUP BY event.event_name HAVING MIN(budget.remaining) < 0;",
          "SELECT event.event_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1404,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT type, SUM(cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' GROUP BY type;",
          "SELECT type, SUM(cost) AS total_value FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY type;",
          "SELECT type, SUM(cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY type;",
          "SELECT type, SUM(cost) AS total_value FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' GROUP BY type;"
        ]
      ]
    },
    {
      "id": 1405,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category , sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY sum(budget.amount) ASC;",
          "SELECT budget.category, sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY sum(budget.amount) ASC;",
          "SELECT sum(budget.amount), budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY budget.amount ASC;",
          "SELECT event.event_name , budget.category , sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY sum(budget.amount) ASC;"
        ]
      ]
    },
    {
      "id": 1406,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.budget_id FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;",
          "SELECT MAX(budget.amount) FROM budget WHERE budget.category = 'Food';",
          "SELECT budget.amount FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;",
          "SELECT budget.budget_id, budget.amount FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1407,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;",
          "SELECT * FROM budget WHERE budget.category = 'Advertisement' ORDER BY budget.amount DESC LIMIT 3;",
          "SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY budget.amount DESC LIMIT 3;",
          "SELECT amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 1408,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE expense.expense_description = 'Parking';",
          "SELECT sum(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE expense.expense_description = 'Parking' AND zip_code.city = 'Cost';",
          "SELECT sum(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Parking' AND zip_code.city = 'Cost' AND budget.category = 'Parking';",
          "SELECT sum(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.category = 'Parking' AND expense.expense_description = 'Parking';"
        ]
      ]
    },
    {
      "id": 1409,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(expense.cost) FROM expense WHERE expense.expense_date = '2019-08-20';",
          "SELECT sum(expense.cost) FROM expense WHERE expense.expense_date = '2019-08-20';",
          "SELECT SUM(expense.cost) FROM expense WHERE expense_date = '2019-08-20';",
          "SELECT SUM(expense.cost) AS total_expense FROM expense WHERE expense.expense_date = '2019-08-20';"
        ]
      ]
    },
    {
      "id": 1410,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, SUM(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;",
          "SELECT member.first_name, member.last_name, SUM(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;",
          "SELECT member.first_name, member.last_name, SUM(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v' GROUP BY member.member_id;",
          "SELECT member.first_name, member.last_name, sum(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;"
        ]
      ]
    },
    {
      "id": 1411,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';",
          "SELECT expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';",
          "SELECT expense_description FROM expense WHERE link_to_member = 'rec1x5zBFIqoOuPW8';",
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha';"
        ]
      ]
    },
    {
      "id": 1412,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';",
          "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.t_shirt_size = 'X-Large';",
          "SELECT expense_description FROM expense WHERE link_to_member IN (SELECT member_id FROM member WHERE t_shirt_size = 'X-Large');",
          "SELECT expense_description FROM expense WHERE link_to_member IN ( SELECT member_id FROM member WHERE t_shirt_size = 'X-Large' );"
        ]
      ]
    },
    {
      "id": 1413,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.zip_code FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE expense.cost < 50;",
          "SELECT zip_code.zip_code FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50;",
          "SELECT zip_code.zip_code FROM zip_code INNER JOIN expense ON zip_code.zip_code = expense.link_to_member WHERE expense.cost < 50;",
          "SELECT zip_code.zip_code FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE expense.cost < '50';"
        ]
      ]
    },
    {
      "id": 1414,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Cullen' AND member.first_name = 'Phillip';",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';",
          "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Cullen' AND member.first_name = 'Phillip';",
          "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Cullen' AND member.first_name = 'Phillip';"
        ]
      ]
    },
    {
      "id": 1415,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';",
          "SELECT member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';",
          "SELECT position FROM member WHERE major_name = 'Business';",
          "SELECT position FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business');"
        ]
      ]
    },
    {
      "id": 1416,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.t_shirt_size = 'Medium' AND major.major_name = 'Business';",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.t_shirt_size = 'Medium' AND major.major_name = 'Business';",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
          "SELECT count(member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';"
        ]
      ]
    },
    {
      "id": 1417,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30;",
          "SELECT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30 GROUP BY event.type;",
          "SELECT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;",
          "SELECT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id GROUP BY event.type HAVING budget.remaining > 30;"
        ]
      ]
    },
    {
      "id": 1418,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';",
          "SELECT category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';",
          "SELECT category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE location = 'MU 215';",
          "SELECT category FROM budget WHERE link_to_event LIKE '%rec0Si5cQ4rJRVzd6%';"
        ]
      ]
    },
    {
      "id": 1419,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00';",
          "SELECT category FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_date = '2020-03-24T12:00:00');",
          "SELECT budget.category FROM budget WHERE budget.link_to_event IN (SELECT event.event_id FROM event WHERE event.event_date = '2020-03-24T12:00:00');",
          "SELECT budget.category FROM budget WHERE budget.link_to_event = (SELECT event.event_id FROM event WHERE event.event_date = '2020-03-24T12:00:00');"
        ]
      ]
    },
    {
      "id": 1420,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
          "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Vice President';",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Vice President';"
        ]
      ]
    },
    {
      "id": 1421,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT (SUM(CASE WHEN major.major_name = 'Business' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM member INNER JOIN major ON member.link_to_major = major.major_id;",
          "SELECT cast(sum(CASE WHEN major.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id;",
          "SELECT (SUM(CASE WHEN major.major_name = 'Business' AND member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(member.member_id)) * 100 FROM member INNER JOIN major ON member.link_to_major = major.major_id;",
          "SELECT (SUM(CASE WHEN major.major_name = 'Business' AND member.position = 'Member' THEN 1 ELSE 0 END) * 100.0 / COUNT(member.member_id)) AS percentage FROM member INNER JOIN major ON member.link_to_major = major.major_id;"
        ]
      ]
    },
    {
      "id": 1422,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';",
          "SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215';",
          "SELECT budget.category FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215';",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';"
        ]
      ]
    },
    {
      "id": 1423,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(amount) FROM income WHERE amount = 50;",
          "SELECT count(*) FROM income WHERE amount = 50;",
          "SELECT count(income_id) FROM income WHERE amount = 50;",
          "SELECT count(income.amount) FROM income WHERE income.amount = 50;"
        ]
      ]
    },
    {
      "id": 1424,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member WHERE member.t_shirt_size = 'X-Large';",
          "SELECT count(member.member_id) FROM member WHERE member.position = 'Member' AND member.t_shirt_size = 'X-Large';",
          "SELECT count(*) FROM member WHERE t_shirt_size = 'X-Large';",
          "SELECT count(member.member_id) FROM member WHERE member.t_shirt_size = 'X-Large' AND member.position = 'Member';"
        ]
      ]
    },
    {
      "id": 1425,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(major.major_id) FROM major WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences';",
          "SELECT count(major.major_name) FROM major WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences';",
          "SELECT count(*) FROM major WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences';",
          "SELECT count(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';"
        ]
      ]
    },
    {
      "id": 1426,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
          "SELECT member.last_name, major.department, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
          "SELECT member.last_name, major.department, major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Environmental Engineering';",
          "SELECT DISTINCT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';"
        ]
      ]
    },
    {
      "id": 1427,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;",
          "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Guest Speaker' AND budget.spent = 0;",
          "SELECT budget.category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;",
          "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Guest Speaker' AND budget.spent = 0 AND event.location = 'MU 215';"
        ]
      ]
    },
    {
      "id": 1428,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering department' AND member.position = 'Member';",
          "SELECT zip_code.city, zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Member' AND major.department = 'Electrical and Computer Engineering department';",
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering department' AND member.position = 'Member';",
          "SELECT zip_code.city, zip_code.state FROM zip_code INNER JOIN member ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering department' AND member.position = 'Member';"
        ]
      ]
    },
    {
      "id": 1429,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.';",
          "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.';",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Vice President' AND zip_code.city = 'Washington' AND zip_code.state = 'Washington';",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Washington' AND zip_code.state = 'Washington' AND member.position = 'Vice President';"
        ]
      ]
    },
    {
      "id": 1430,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';",
          "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza';",
          "SELECT member.last_name, member.position FROM attendance INNER JOIN expense ON attendance.link_to_event = expense.expense_id INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';",
          "SELECT member.last_name, member.position FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN expense ON attendance.link_to_event = expense.expense_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';"
        ]
      ]
    },
    {
      "id": 1431,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
          "SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.position = 'Member';",
          "SELECT member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.position = 'Member';",
          "SELECT member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';"
        ]
      ]
    },
    {
      "id": 1432,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT COUNT(amount = 50) / COUNT(member_id) * 100 FROM member WHERE t_shirt_size = 'Medium' AND position = 'Member';",
          "SELECT COUNT(amount = 50) / COUNT(member_id) * 100 AS percentage FROM member WHERE t_shirt_size = 'Medium' AND position = 'Member';",
          "SELECT COUNT(amount = 50) / COUNT(member_id) * 100 FROM member WHERE t_shirt_size = 'Medium' AND position = 'member';",
          "SELECT COUNT(amount = 50) / COUNT(member_id) * 100 FROM member WHERE t_shirt_size = 'Medium';"
        ]
      ]
    },
    {
      "id": 1433,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT state FROM zip_code WHERE type = 'PO Box';",
          "SELECT country FROM zip_code WHERE type = 'PO Box';",
          "SELECT state FROM zip_code WHERE type = 'PO Box' GROUP BY state;",
          "SELECT DISTINCT zip_code.state FROM zip_code WHERE zip_code.type = 'PO Box';"
        ]
      ]
    },
    {
      "id": 1434,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.state = 'Puerto Rico' AND zip_code.county = 'San Juan Municipio';",
          "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.state = 'Puerto Rico' AND zip_code.county = 'San Juan Municipio' AND zip_code.type = 'PO Box';",
          "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.county = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico' AND zip_code.type = 'PO Box';",
          "SELECT DISTINCT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.state = 'Puerto Rico' AND zip_code.county = 'San Juan Municipio';"
        ]
      ]
    },
    {
      "id": 1435,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event WHERE event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20';",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status = 'Closed' AND event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20';",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status = 'Closed' AND event.type = 'Game' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20';",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status = 'Closed' AND event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' and '2020-03-20';"
        ]
      ]
    },
    {
      "id": 1436,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT attendance.link_to_event FROM attendance INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.cost > 50;",
          "SELECT DISTINCT attendance.link_to_event FROM attendance INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.cost > 50;",
          "SELECT attendance.link_to_event FROM budget INNER JOIN attendance ON budget.budget_id = attendance.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.cost > 50;",
          "SELECT attendance.link_to_event FROM budget INNER JOIN attendance ON budget.budget_id = attendance.link_to_event WHERE budget.cost > 50;"
        ]
      ]
    },
    {
      "id": 1437,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON attendance.link_to_event = expense.link_to_event WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' and '2019-11-19';",
          "SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON attendance.link_to_event = expense.link_to_event WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';",
          "SELECT member.first_name, member.last_name, attendance.link_to_event FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE attendance.link_to_event IN (SELECT event.event_id FROM event WHERE event.event_date BETWEEN '2019-01-10' and '2019-11-19') AND attendance.link_to_event = budget.link_to_event;",
          "SELECT member.first_name, member.last_name, attendance.link_to_event FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE attendance.link_to_event IN (SELECT event.event_id FROM event WHERE event.event_date BETWEEN '2019-01-10' and '2019-11-19') AND attendance.link_to_event IN (SELECT budget.link_to_event FROM budget);"
        ]
      ]
    },
    {
      "id": 1438,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy';",
          "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Katy';",
          "SELECT college FROM major WHERE major.major_id = 'rec1N0upiVLy5esTO';",
          "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';"
        ]
      ]
    },
    {
      "id": 1439,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'college of Agriculture and Applied Sciences' AND major.major_name = 'Business';",
          "SELECT phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'college of Agriculture and Applied Sciences';",
          "SELECT phone FROM member WHERE link_to_major = 'rec06DF6vZ1CyPKpc' AND college = 'college of Agriculture and Applied Sciences';",
          "SELECT phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'college of Agriculture and Applied Sciences' AND major.major_name = 'Business';"
        ]
      ]
    },
    {
      "id": 1440,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT email FROM income WHERE amount > 20 AND date_received BETWEEN '2019-09-10' AND '2019-11-19';",
          "SELECT member.email FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 20 AND income.date_received BETWEEN '2019-09-10' AND '2019-11-19';",
          "SELECT member.email FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 20 AND income.date_received BETWEEN '2019-09-10' and '2019-11-19';",
          "SELECT member.email FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 20 AND income.date_received BETWEEN '2019-09-10' AND '2019-11-19';"
        ]
      ]
    },
    {
      "id": 1441,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND major.college = 'College of Education & Human Services';",
          "SELECT count(*) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND major.college = 'College of Education & Human Services';",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'education';",
          "SELECT count(*) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'education';"
        ]
      ]
    },
    {
      "id": 1442,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;",
          "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event;",
          "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(budget.budget_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;",
          "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) / count(event.event_id) * 100 FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;"
        ]
      ]
    },
    {
      "id": 1443,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' and '2020-03-31';",
          "SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date >= '2019-11-01' AND event.event_date <= '2020-03-31';",
          "SELECT event.event_id, event.location, event.status FROM event WHERE event_date BETWEEN '2019-11-01' and '2020-03-31';",
          "SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31';"
        ]
      ]
    },
    {
      "id": 1444,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense_description FROM expense WHERE cost > 50;",
          "SELECT expense.expense_description FROM expense WHERE expense.cost > 50;",
          "SELECT expense_description FROM expense WHERE expense.cost > 50;",
          "SELECT expense_description FROM expense WHERE cost > 50 GROUP BY expense_description;"
        ]
      ]
    },
    {
      "id": 1445,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';",
          "SELECT member.first_name, member.last_name FROM member WHERE member.t_shirt_size = 'X-Large';",
          "SELECT CONCAT(member.first_name, ' ', member.last_name) FROM member WHERE member.t_shirt_size = 'X-Large';",
          "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"
        ]
      ]
    },
    {
      "id": 1446,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code;",
          "SELECT cast(sum(CASE zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code;",
          "SELECT cast(sum(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code WHERE zip_code.type = 'PO Box';",
          "SELECT cast(sum(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code;"
        ]
      ]
    },
    {
      "id": 1447,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name, event.location FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;",
          "SELECT event.event_name, event.location FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;",
          "SELECT event.event_name, event.location FROM budget budget INNER JOIN event event ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;",
          "SELECT event.event_name, event.location FROM event event JOIN budget budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0;"
        ]
      ]
    },
    {
      "id": 1448,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name , event.event_date FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;",
          "SELECT event.event_name , event.event_date FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;",
          "SELECT event.event_name , event.event_date FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.expense_description = 'Pizza' AND expense.cost BETWEEN 50 AND 100;",
          "SELECT event.event_name , event.event_date FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;"
        ]
      ]
    },
    {
      "id": 1449,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;",
          "SELECT first_name, last_name, major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;",
          "SELECT member.first_name, member.last_name, major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;",
          "SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON expense.link_to_member = member.member_id WHERE expense.cost > 100;"
        ]
      ]
    },
    {
      "id": 1450,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT zip_code.city, zip_code.state FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40;",
          "SELECT DISTINCT zip_code.city, zip_code.state FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 50;",
          "SELECT zip_code.city, zip_code.state FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40;",
          "SELECT DISTINCT zip_code.city, zip_code.state FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN event ON income.link_to_event = event.event_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40;"
        ]
      ]
    },
    {
      "id": 1451,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, MAX(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY expense.link_to_member HAVING COUNT(expense.expense_id) > 1;",
          "SELECT member.first_name, member.last_name, MAX(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id GROUP BY attendance.link_to_member HAVING COUNT(attendance.link_to_event) > 1;",
          "SELECT member.first_name, member.last_name, MAX(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY expense.link_to_member HAVING COUNT(attendance.link_to_event) > 1;",
          "SELECT member.first_name, member.last_name, MAX(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id GROUP BY attendance.link_to_member HAVING COUNT(expense.expense_id) > 1;"
        ]
      ]
    },
    {
      "id": 1452,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';",
          "SELECT avg(expense.cost) FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';",
          "SELECT avg(cost) FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';",
          "SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'member';"
        ]
      ]
    },
    {
      "id": 1453,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event_name FROM event WHERE EXISTS (SELECT 1 FROM expense WHERE expense.expense_id = event.event_id AND expense.category = 'Parking' AND expense.cost < (SELECT DIVIDE(SUM(expense.cost), COUNT(expense.expense_id)) FROM expense WHERE expense.category = 'Parking'));",
          "SELECT event_name FROM event WHERE EXISTS (SELECT 1 FROM expense WHERE expense.expense_id = event.event_id AND expense.category = 'Parking' AND expense.cost < (SELECT SUM(expense.cost) / COUNT(expense.expense_id) FROM expense WHERE expense.category = 'Parking'));",
          "SELECT event_name FROM event WHERE EXISTS (SELECT 1 FROM expense WHERE expense.expense_id = event.event_id AND expense.category = 'Parking' AND expense.cost < (SELECT DIVIDE(SUM(expense.cost), COUNT(event.event_id)) FROM expense WHERE expense.category = 'Parking'));",
          "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Parking' GROUP BY link_to_event HAVING SUM(amount) < (SELECT DIVIDE(SUM(cost), COUNT(event_id)) FROM expense WHERE category = 'Parking'));"
        ]
      ]
    },
    {
      "id": 1454,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(expense.cost), COUNT(event.event_id) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.type = 'Meeting';",
          "SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget;",
          "SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.type = 'Meeting';",
          "SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 AS percentage FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget;"
        ]
      ]
    },
    {
      "id": 1455,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense_description FROM expense WHERE expense_description = 'Water, chips, cookies' GROUP BY expense_description ORDER BY MAX(cost) DESC LIMIT 1;",
          "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1;",
          "SELECT expense.expense_description FROM expense WHERE expense.expense_description = 'Water, chips, cookies' GROUP BY expense.expense_description ORDER BY MAX(expense.cost) DESC LIMIT 1;",
          "SELECT expense.expense_description FROM expense WHERE expense.expense_description = 'Water, chips, cookies' GROUP BY expense.expense_description ORDER BY sum(expense.cost) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1456,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 0, 5;",
          "SELECT member.first_name, member.last_name FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id ORDER BY expense.cost DESC LIMIT 5;",
          "SELECT member.first_name, member.last_name FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY expense.cost DESC LIMIT 5;",
          "SELECT member.first_name, member.last_name FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY expense.cost DESC LIMIT 0, 5;"
        ]
      ]
    },
    {
      "id": 1457,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT AVG(cost) FROM expense );",
          "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > ( SELECT AVG(cost) FROM expense );",
          "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT AVG(expense.cost) FROM expense );",
          "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > (SELECT AVG(cost) FROM expense);"
        ]
      ]
    },
    {
      "id": 1458,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code;",
          "SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) * 100 / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code;",
          "SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'New Jersey' OR zip_code.state = 'Vermont';",
          "SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'New Jersey' OR zip_code.state = 'Vermont';"
        ]
      ]
    },
    {
      "id": 1459,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';",
          "SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';",
          "SELECT major.major_name, major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';",
          "SELECT major.major_name, major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';"
        ]
      ]
    },
    {
      "id": 1460,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';",
          "SELECT member.first_name, member.last_name, expense.expense_description, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member INNER JOIN expense ON income.income_id = expense.expense_id WHERE expense.expense_description = 'Water, Veggie tray, supplies';",
          "SELECT DISTINCT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member INNER JOIN expense ON income.income_id = expense.expense_id WHERE expense.expense_description = 'Water, Veggie tray, supplies';"
        ]
      ]
    },
    {
      "id": 1461,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT last_name, phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';",
          "SELECT last_name, phone FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Elementary Education');",
          "SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';",
          "SELECT member.last_name, member.phone FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Elementary Education';"
        ]
      ]
    },
    {
      "id": 1462,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';",
          "SELECT budget.category , budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';",
          "SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';",
          "SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = \"January Speaker\";"
        ]
      ]
    },
    {
      "id": 1463,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food';",
          "SELECT DISTINCT event.event_name FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';",
          "SELECT DISTINCT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food';"
        ]
      ]
    },
    {
      "id": 1464,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09';",
          "SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '9/9/2019';",
          "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09';",
          "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '9/9/2019';"
        ]
      ]
    },
    {
      "id": 1465,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters';",
          "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';",
          "SELECT budget.category FROM budget INNER JOIN expense ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';",
          "SELECT DISTINCT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';"
        ]
      ]
    },
    {
      "id": 1466,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';",
          "SELECT member.first_name, member.last_name FROM member WHERE member.position = 'Secretary';",
          "SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';",
          "SELECT DISTINCT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';"
        ]
      ]
    },
    {
      "id": 1467,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts';",
          "SELECT sum(budget.spent) FROM budget WHERE budget.category = 'Speaker Gifts';",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Speaker Gifts';",
          "SELECT SUM(budget.spent) FROM budget WHERE budget.category = 'Speaker Gifts';"
        ]
      ]
    },
    {
      "id": 1468,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';",
          "SELECT city.name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN city ON zip_code.city = city.name WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';",
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';",
          "SELECT zip_code.city FROM zip_code INNER JOIN member ON member.zip = zip_code.zip_code WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';"
        ]
      ]
    },
    {
      "id": 1469,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT m.first_name || ' ' || m.last_name AS full_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.zip_code = 28092;",
          "SELECT member.first_name || ' ' || member.last_name AS full_name, member.position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;",
          "SELECT first_name || ' ' || last_name AS full_name, position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE city = 'Lincolnton' AND state = 'North Carolina' AND zip_code.zip_code = 28092;",
          "SELECT m.first_name || ' ' || m.last_name AS full_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND m.zip = 28092;"
        ]
      ]
    },
    {
      "id": 1470,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium';",
          "SELECT count(gasstationid) FROM gasstations WHERE gasstations.country = 'CZE' AND gasstations.segment = 'Premium';",
          "SELECT count(gasstationid) FROM gasstations gasstations WHERE gasstations.country = 'CZE' AND gasstations.segment = 'Premium';",
          "SELECT count(gasstations.gasstationid) FROM gasstations gasstations WHERE gasstations.country = 'CZE' AND gasstations.segment = 'Premium';"
        ]
      ]
    },
    {
      "id": 1471,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(currency = 'EUR') / count(currency = 'CZK') FROM customers;",
          "SELECT cast(count(CASE WHEN customers.currency = 'EUR' THEN customers.customerid END) AS REAL) / cast(count(CASE WHEN customers.currency = 'CZK' THEN customers.customerid END) AS REAL) FROM customers;",
          "SELECT count(CASE WHEN customers.currency = 'EUR' THEN customers.customerid END) / count(CASE WHEN customers.currency = 'CZK' THEN customers.customerid END) FROM customers;",
          "SELECT cast(count(CASE WHEN customers.currency = 'EUR' THEN customers.customerid END) AS REAL) / count(CASE WHEN customers.currency = 'CZK' THEN customers.customerid END) FROM customers;"
        ]
      ]
    },
    {
      "id": 1472,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT yearmonth.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND customers.segment = 'LAM' ORDER BY yearmonth.consumption ASC LIMIT 4;",
          "SELECT customerid FROM yearmonth WHERE date BETWEEN '201201' AND '201212' AND segment = 'LAM' ORDER BY consumption ASC LIMIT 4;",
          "SELECT customerid FROM yearmonth WHERE date BETWEEN '201201' AND '201212' AND segment = 'LAM' GROUP BY customerid ORDER BY consumption ASC LIMIT 4;",
          "SELECT yearmonth.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND customers.segment = 'LAM' GROUP BY yearmonth.customerid ORDER BY yearmonth.consumption ASC LIMIT 4;"
        ]
      ]
    },
    {
      "id": 1473,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(yearmonth.consumption) / 12 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.segment = 'SME';",
          "SELECT avg(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.segment = 'SME';",
          "SELECT cast(sum(yearmonth.consumption) AS REAL) / 12 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.segment = 'SME';",
          "SELECT cast(sum(yearmonth.consumption) AS REAL) / 12 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.segment = 'SME';"
        ]
      ]
    },
    {
      "id": 1474,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'CZK' AND yearmonth.date BETWEEN '201101' AND '201112' GROUP BY yearmonth.customerid ORDER BY count(yearmonth.customerid) DESC LIMIT 1;",
          "SELECT customers.customerid FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201101' AND '201112' AND customers.currency = 'CZK' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;",
          "SELECT customers.customerid FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201101' AND '201112' AND customers.currency = 'CZK' GROUP BY yearmonth.customerid ORDER BY count(yearmonth.customerid) DESC LIMIT 1;",
          "SELECT customers.customerid FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201101' AND '201112' AND customers.currency = 'CZK' GROUP BY yearmonth.customerid ORDER BY count(transactions_1k.transactionid) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1475,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT yearmonth.customerid) FROM yearmonth yearmonth JOIN customers customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' AND yearmonth.date BETWEEN '201201' AND '201212' AND yearmonth.consumption < 30000;",
          "SELECT count(DISTINCT yearmonth.customerid) FROM yearmonth yearmonth JOIN customers customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND customers.segment = 'KAM' AND yearmonth.consumption < 30000;",
          "SELECT count(DISTINCT yearmonth.customerid) FROM yearmonth yearmonth JOIN customers customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND yearmonth.consumption < 30000 AND customers.segment = 'KAM';",
          "SELECT count(DISTINCT transactions_1k.customerid) FROM yearmonth yearmonth JOIN customers customers ON yearmonth.customerid = customers.customerid JOIN transactions_1k transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND customers.segment = 'KAM' AND yearmonth.consumption < 30000;"
        ]
      ]
    },
    {
      "id": 1476,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212';",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid WHERE yearmonth.date BETWEEN '201201' AND '201212';",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212';",
          "SELECT sum(CASE WHEN yearmonth.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN yearmonth.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid WHERE yearmonth.date BETWEEN '201201' AND '201212';"
        ]
      ]
    },
    {
      "id": 1477,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT strftime('%Y', date) FROM transactions_1k WHERE currency = 'EUR' GROUP BY strftime('%Y', date) ORDER BY count(*) DESC LIMIT 1;",
          "SELECT strftime('%Y', date) FROM transactions_1k WHERE currency = 'EUR' GROUP BY strftime('%Y', date) ORDER BY count(transactionid) DESC LIMIT 1;",
          "SELECT strftime('%Y', transactions_1k.date) FROM transactions_1k WHERE transactions_1k.currency = 'EUR' GROUP BY strftime('%Y', transactions_1k.date) ORDER BY count(*) DESC LIMIT 1;",
          "SELECT strftime('%Y', transactions_1k.date) FROM transactions_1k WHERE transactions_1k.currency = 'EUR' GROUP BY strftime('%Y', transactions_1k.date) ORDER BY count(transactions_1k.transactionid) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1478,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT segment FROM yearmonth GROUP BY segment ORDER BY sum(consumption) ASC LIMIT 1;",
          "SELECT segment FROM yearmonth GROUP BY segment ORDER BY min(consumption) LIMIT 1;",
          "SELECT segment FROM yearmonth GROUP BY segment ORDER BY sum(consumption) LIMIT 1;",
          "SELECT segment FROM yearmonth GROUP BY segment ORDER BY count(*) ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1479,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT strftime('%Y', date) FROM yearmonth GROUP BY strftime('%Y', date) ORDER BY sum(consumption) DESC LIMIT 1;",
          "SELECT substr(date, 1, 4) FROM yearmonth GROUP BY substr(date, 1, 4) ORDER BY sum(consumption) DESC LIMIT 1;",
          "SELECT strftime('%Y', date) FROM yearmonth WHERE currency = 'CZK' GROUP BY strftime('%Y', date) ORDER BY sum(consumption) DESC LIMIT 1;",
          "SELECT strftime('%Y', date) FROM yearmonth WHERE currency = 'CZK' GROUP BY strftime('%Y', date) ORDER BY count(date) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1480,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT yearmonth.date FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND yearmonth.date BETWEEN '201301' AND '201312' ORDER BY yearmonth.consumption DESC LIMIT 1;",
          "SELECT yearmonth.date FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND yearmonth.date BETWEEN '201301' AND '201312';",
          "SELECT yearmonth.date FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.segment = 'SME';",
          "SELECT yearmonth.date FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN gasstations ON yearmonth.gasstationid = gasstations.gasstationid WHERE customers.segment = 'SME' AND yearmonth.date BETWEEN '201301' AND '201312';"
        ]
      ]
    },
    {
      "id": 1481,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.gasstationid, gasstations.chainid, gasstations.segment, yearmonth.date, yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid WHERE customers.currency = 'CZK' AND yearmonth.date BETWEEN '201301' AND '201312';",
          "SELECT gasstations.gasstationid, gasstations.chainid, gasstations.segment, yearmonth.date, yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.cardid = gasstations.gasstationid WHERE customers.currency = 'CZK' AND yearmonth.date BETWEEN '201301' AND '201312';",
          "SELECT gasstations.gasstationid, gasstations.chainid, gasstations.country, gasstations.segment, yearmonth.date, yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.cardid = gasstations.gasstationid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.currency = 'CZK';",
          "SELECT gasstations.gasstationid, gasstations.chainid, gasstations.segment, yearmonth.date, yearmonth.customerid, yearmonth.consumption FROM gasstations INNER JOIN yearmonth ON gasstations.gasstationid = yearmonth.customerid INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.currency = 'CZK' AND customers.segment IN ('SME', 'LAM', 'KAM');"
        ]
      ]
    },
    {
      "id": 1482,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.customerid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE customers.currency = 'EUR' AND yearmonth.date BETWEEN '201201' AND '201312' GROUP BY customers.segment ORDER BY (yearmonth.consumption - yearmonth.consumption) DESC LIMIT 1;",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.customerid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE customers.currency = 'EUR' AND yearmonth.date BETWEEN '201201' AND '201312' GROUP BY customers.segment ORDER BY (yearmonth.consumption - yearmonth.consumption) / yearmonth.consumption DESC LIMIT 1;",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.customerid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE customers.currency = 'EUR' AND yearmonth.date BETWEEN '201201' AND '201312' GROUP BY customers.segment ORDER BY (yearmonth.consumption - (SELECT yearmonth.consumption FROM yearmonth WHERE yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = '201201')) / yearmonth.consumption DESC LIMIT 1;",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.customerid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE customers.currency = 'EUR' AND yearmonth.date BETWEEN '201201' AND '201312' GROUP BY customers.segment ORDER BY (yearmonth.consumption - (SELECT yearmonth.consumption FROM yearmonth WHERE yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = '201201')) / yearmonth.consumption DESC LIMIT 4;"
        ]
      ]
    },
    {
      "id": 1483,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(t.amount) FROM transactions_1k t WHERE t.customerid = '6' AND t.date BETWEEN '201308' AND '201311';",
          "SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date BETWEEN '201308' AND '201311';",
          "SELECT sum(t.amount) FROM transactions_1k t INNER JOIN yearmonth y ON t.customerid = y.customerid WHERE y.date BETWEEN '201308' AND '201311';",
          "SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date BETWEEN 201308 AND 201311;"
        ]
      ]
    },
    {
      "id": 1484,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT SUM(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations;",
          "SELECT SUM(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations WHERE gasstations.segment = 'Discount';",
          "SELECT SUM(gasstations.segment = 'Discount') - SUM(gasstations.segment = 'Discount') FROM gasstations WHERE gasstations.country = 'CZE' OR gasstations.country = 'SVK';",
          "SELECT SUM(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) AS discount FROM gasstations;"
        ]
      ]
    },
    {
      "id": 1485,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN yearmonth.customerid = 7 THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN yearmonth.customerid = 5 THEN yearmonth.consumption ELSE 0 END) AS diff FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201304';",
          "SELECT sum(CASE WHEN yearmonth.date = '201304' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN yearmonth.date = '201304' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON yearmonth.customerid = customers.customerid WHERE customers.customerid = 7;",
          "SELECT sum(CASE WHEN yearmonth.date = '201304' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN yearmonth.date = '201304' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.customerid = 7;",
          "SELECT sum(CASE WHEN yearmonth.date = '201304' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN yearmonth.date = '201304' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.customerid = 7;"
        ]
      ]
    },
    {
      "id": 1486,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid;",
          "SELECT SUM(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - SUM(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid;",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) AS difference FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid;",
          "SELECT SUM(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - SUM(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) AS difference FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid;"
        ]
      ]
    },
    {
      "id": 1487,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customerid FROM customers WHERE currency = 'EUR' AND customerid IN (SELECT customerid FROM yearmonth WHERE date = '201310') ORDER BY consumption DESC LIMIT 1;",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.date = '201310' ORDER BY yearmonth.consumption DESC LIMIT 1;",
          "SELECT customerid FROM customers WHERE currency = 'EUR' AND customerid IN (SELECT customerid FROM yearmonth WHERE date = '201310' AND consumption = (SELECT max(consumption) FROM yearmonth WHERE date = '201310'));",
          "SELECT customerid FROM customers WHERE currency = 'EUR' AND customerid IN (SELECT customerid FROM yearmonth WHERE date = '201310' GROUP BY customerid HAVING sum(consumption) = (SELECT max(sum(consumption)) FROM yearmonth WHERE date = '201310'));"
        ]
      ]
    },
    {
      "id": 1488,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' ORDER BY yearmonth.consumption DESC LIMIT 1;",
          "SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' GROUP BY yearmonth.customerid ORDER BY yearmonth.consumption DESC LIMIT 1;",
          "SELECT yearmonth.customerid , yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' ORDER BY yearmonth.consumption DESC LIMIT 1;",
          "SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1489,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' AND yearmonth.date = '201305';",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND yearmonth.date = '201305';",
          "SELECT sum(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' AND yearmonth.date = 201305;",
          "SELECT SUM(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' AND yearmonth.date = '201305';"
        ]
      ]
    },
    {
      "id": 1490,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT SUM(CASE WHEN yearmonth.consumption > 46.73 THEN 1 ELSE 0 END) / COUNT(*) * 100 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'LAM';",
          "SELECT SUM(CASE WHEN yearmonth.consumption > 46.73 THEN 1 ELSE 0 END) / COUNT(yearmonth.customerid) * 100 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'LAM';",
          "SELECT SUM(CASE WHEN yearmonth.consumption > 46.73 THEN 1 ELSE 0 END) / COUNT(yearmonth.customerid) * 100 FROM yearmonth INNER JOIN `customers` ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'LAM';",
          "SELECT SUM(CASE WHEN customers.segment = 'LAM' AND yearmonth.consumption > 46.73 THEN 1 ELSE 0 END) / COUNT(CASE WHEN customers.segment = 'LAM' THEN 1 ELSE 0 END) * 100 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid;"
        ]
      ]
    },
    {
      "id": 1491,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country, count(*) AS COUNT FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country ORDER BY COUNT DESC LIMIT 1;",
          "SELECT gasstations.country, count(*) FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country;",
          "SELECT gasstations.country, count(*) AS COUNT FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country ORDER BY COUNT DESC;",
          "SELECT gasstations.country, count(*) FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country ORDER BY count(*) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1492,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT SUM(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) / COUNT(*) * 100 FROM customers WHERE customers.segment = 'KAM';",
          "SELECT SUM(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END)/COUNT(*) * 100 FROM customers WHERE customers.segment = 'KAM';",
          "SELECT sum(case when customers.currency = 'EUR' then 1 else 0 end) / count(*) * 100 FROM customers WHERE customers.segment = 'KAM';",
          "SELECT SUM(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS Percentage FROM customers WHERE customers.segment = 'KAM';"
        ]
      ]
    },
    {
      "id": 1493,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN yearmonth.consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / count(yearmonth.date) FROM yearmonth WHERE yearmonth.date LIKE '201202%';",
          "SELECT cast(count(CASE WHEN yearmonth.consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / count(yearmonth.date) FROM yearmonth WHERE Substr(yearmonth.date, 1, 4) = '201202';",
          "SELECT cast(count(CASE WHEN yearmonth.date LIKE '201202%' AND yearmonth.consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / count(yearmonth.date) FROM yearmonth WHERE yearmonth.date LIKE '201202%';",
          "SELECT cast(count(CASE WHEN yearmonth.consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / count(yearmonth.date) FROM yearmonth WHERE Substr(yearmonth.date, 1, 4) = '2012';"
        ]
      ]
    },
    {
      "id": 1494,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.segment FROM gasstations WHERE gasstations.country = 'CZE';",
          "SELECT gasstations.segment FROM gasstations WHERE gasstations.country = 'Slovakia';",
          "SELECT gasstations.segment FROM gasstations WHERE gasstations.country = 'Slovakia' AND gasstations.segment = 'Premium';",
          "SELECT gasstations.segment FROM gasstations WHERE gasstations.country = 'CZE' AND gasstations.segment = 'Premium';"
        ]
      ]
    },
    {
      "id": 1495,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT yearmonth.customerid FROM yearmonth WHERE yearmonth.date = '201309' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;",
          "SELECT yearmonth.customerid FROM yearmonth WHERE yearmonth.date = '201309' GROUP BY yearmonth.customerid ORDER BY count(yearmonth.customerid) DESC LIMIT 1;",
          "SELECT customers.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201309' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1496,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' GROUP BY customers.segment ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201309' GROUP BY customers.segment ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;",
          "SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' GROUP BY customers.segment ORDER BY SUM(yearmonth.consumption) ASC LIMIT 1;",
          "SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1497,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.`customer names` FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201206' AND customers.segment = 'SME' ORDER BY yearmonth.consumption ASC LIMIT 1;",
          "SELECT customers.`customer names` FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201206' AND customers.segment = 'SME' ORDER BY yearmonth.consumption ASC LIMIT 1;",
          "SELECT customers.`customer names` FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201206' AND customers.segment = 'SME' GROUP BY customers.`customer names` ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;",
          "SELECT customers.`customer names` FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201206' AND customers.segment = 'SME' GROUP BY customers.`customer names` ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1498,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT MAX(consumption) FROM yearmonth WHERE date LIKE '2012%';",
          "SELECT max(consumption) FROM yearmonth WHERE date LIKE '2012%';",
          "SELECT MAX(yearmonth.consumption) FROM yearmonth WHERE yearmonth.date LIKE '2012%';",
          "SELECT yearmonth.consumption FROM yearmonth WHERE yearmonth.date LIKE '2012%' ORDER BY yearmonth.consumption DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1499,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid, SUM(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) DESC LIMIT 1;",
          "SELECT customers.customerid, SUM(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY yearmonth.customerid ORDER BY SUM(yearmonth.consumption) DESC LIMIT 1;",
          "SELECT customers.customerid, SUM(yearmonth.consumption) AS monthly_consumption FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.customerid ORDER BY monthly_consumption DESC LIMIT 1;",
          "SELECT customers.customerid, SUM(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) / 12 DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1500,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date LIKE '201309%';",
          "SELECT products.description FROM products INNER JOIN yearmonth ON products.productid = yearmonth.productid INNER JOIN transactions_1k ON yearmonth.date = transactions_1k.date WHERE yearmonth.date LIKE '201309%';",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date = '201309';",
          "SELECT products.description FROM products INNER JOIN yearmonth ON products.productid = yearmonth.productid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.productid = gasstations.gasstationid WHERE yearmonth.date LIKE '201309%';"
        ]
      ]
    },
    {
      "id": 1501,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE yearmonth.date LIKE '201306%';",
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date LIKE '201306%';",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date LIKE '201306%';",
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date LIKE '201306%';"
        ]
      ]
    },
    {
      "id": 1502,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.chainid FROM gasstations JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.currency = 'EUR';",
          "SELECT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.currency = 'EUR';",
          "SELECT chainid FROM gasstations JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.currency = 'EUR';",
          "SELECT chainid FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE currency = 'EUR');"
        ]
      ]
    },
    {
      "id": 1503,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid WHERE transactions_1k.currency = 'EUR';",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON transactions_1k.productid = products.productid WHERE transactions_1k.currency = 'EUR';",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN customers ON customers.customerid = transactions_1k.cardid WHERE customers.currency = 'EUR';",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN customers ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR';"
        ]
      ]
    },
    {
      "id": 1504,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(price) FROM transactions_1k WHERE date LIKE '2012-01%';",
          "SELECT avg(transactions_1k.price) FROM transactions_1k WHERE transactions_1k.date LIKE '2012-01%';",
          "SELECT cast(sum(transactions_1k.price) AS REAL) / count(transactions_1k.transactionid) FROM transactions_1k WHERE transactions_1k.date LIKE '2012-01%';",
          "SELECT cast(sum(transactions_1k.price) AS REAL) / count(transactionid) FROM transactions_1k WHERE transactions_1k.date LIKE '2012-01%';"
        ]
      ]
    },
    {
      "id": 1505,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000;",
          "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR' AND transactions_1k.consumption > 1000;",
          "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000;",
          "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN yearmonth ON transactions_1k.transactionid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000;"
        ]
      ]
    },
    {
      "id": 1506,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT products.description FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE gasstations.country = 'CZE';",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
          "SELECT products.description FROM products INNER JOIN gasstations ON products.productid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
          "SELECT products.description FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE gasstations.country = 'CZE';"
        ]
      ]
    },
    {
      "id": 1507,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.chainid = 11;",
          "SELECT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.chainid = 11;",
          "SELECT DISTINCT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11;",
          "SELECT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.chainid = 11 GROUP BY transactions_1k.time;"
        ]
      ]
    },
    {
      "id": 1508,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;",
          "SELECT count(transactions_1k.transactionid) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;",
          "SELECT count(*) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid JOIN yearmonth yearmonth ON transactions_1k.customerid = yearmonth.customerid JOIN customers customers ON yearmonth.customerid = customers.customerid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;"
        ]
      ]
    },
    {
      "id": 1509,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(*) FROM transactions_1k transactions_1k INNER JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';",
          "SELECT count(*) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM transactions_1k transactions_1k INNER JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';"
        ]
      ]
    },
    {
      "id": 1510,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(transactions_1k.price) / count(transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
          "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
          "SELECT sum(transactions_1k.price) / count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
          "SELECT cast(sum(transactions_1k.price) AS REAL) / count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';"
        ]
      ]
    },
    {
      "id": 1511,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(price) FROM transactions_1k WHERE currency = 'EUR';",
          "SELECT AVG(price) FROM transactions_1k WHERE currency = 'EUR';",
          "SELECT avg(price) FROM transactions_1k WHERE customers.currency = 'EUR';",
          "SELECT AVG(price) FROM transactions_1k WHERE currency = 'EUR';"
        ]
      ]
    },
    {
      "id": 1512,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' ORDER BY amount DESC LIMIT 1;",
          "SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' GROUP BY customerid ORDER BY SUM(amount) DESC LIMIT 1;",
          "SELECT customerid FROM transactions_1k WHERE date = '2012/8/25' ORDER BY amount DESC LIMIT 1;",
          "SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' GROUP BY customerid ORDER BY sum(amount) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1513,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' ORDER BY transactions_1k.customerid LIMIT 1;",
          "SELECT gasstations.country FROM gasstations INNER JOIN yearmonth ON gasstations.gasstationid = yearmonth.customerid WHERE yearmonth.date = '2012-08-25';",
          "SELECT gasstations.country FROM gasstations INNER JOIN yearmonth ON gasstations.gasstationid = yearmonth.gasstationid WHERE yearmonth.date = '2012-08-25' ORDER BY yearmonth.customerid LIMIT 1;",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' ORDER BY transactions_1k.customerid LIMIT 0, 1;"
        ]
      ]
    },
    {
      "id": 1514,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT transactions_1k.currency FROM transactions_1k WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24';",
          "SELECT transactions_1k.currency FROM transactions_1k WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012/8/24';",
          "SELECT DISTINCT transactions_1k.currency FROM transactions_1k WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24';",
          "SELECT transactions_1k.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24';"
        ]
      ]
    },
    {
      "id": 1515,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT segment FROM customers WHERE customerid IN (SELECT customerid FROM transactions_1k WHERE time = '21:20:00' AND date = '2012-08-23');",
          "SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '21:20:00' AND transactions_1k.date = '2012-08-23';",
          "SELECT segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '21:20:00' AND transactions_1k.date = '2012-08-23';",
          "SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`time` = '21:20:00' AND transactions_1k.`date` = '2012-08-23';"
        ]
      ]
    },
    {
      "id": 1516,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(transactionid) FROM transactions_1k WHERE date = '2012-08-26' AND time < '13:00:00' AND currency = 'CZK';",
          "SELECT count(transactionid) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'CZK' AND transactions_1k.time < '13:00:00' AND transactions_1k.date = '2012-08-26';",
          "SELECT count(transactionid) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'CZK' AND transactions_1k.time < '13:00:00' AND transactions_1k.date = '2012/8/26';",
          "SELECT count(transactionid) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'CZK' AND transactions_1k.date = '2012-08-26' AND transactions_1k.time < '13:00:00';"
        ]
      ]
    },
    {
      "id": 1517,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid ORDER BY yearmonth.date ASC LIMIT 1;",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid ORDER BY yearmonth.date LIMIT 1;",
          "SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid ORDER BY yearmonth.date ASC LIMIT 1;",
          "SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid ORDER BY yearmonth.date LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1518,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00';",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00';",
          "SELECT country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00';",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND strftime('%H:%M:%S',transactions_1k.time) = '12:42:00';"
        ]
      ]
    },
    {
      "id": 1519,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT transactions_1k.productid FROM transactions_1k WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00';",
          "SELECT transactions_1k.productid FROM transactions_1k WHERE strftime('%Y-%m-%d %H:%M:%S', transactions_1k.date) = '2012-08-23 21:20:00';",
          "SELECT transactions_1k.productid FROM transactions_1k WHERE date = '2012-08-23' AND time = '21:20:00';",
          "SELECT transactions_1k.productid FROM transactions_1k WHERE strftime('%Y/%m/%d %H:%M:%S', transactions_1k.date) = '2012/8/23 21:20:00';"
        ]
      ]
    },
    {
      "id": 1520,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT transactions_1k.date, yearmonth.consumption FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE transactions_1k.customerid = 3 AND transactions_1k.date = '2012-08-24';",
          "SELECT transactions_1k.date, yearmonth.consumption FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE transactions_1k.date = '2012-08-24' AND yearmonth.date = '201201';",
          "SELECT transactions_1k.date, yearmonth.consumption FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE transactions_1k.date = '2012-08-24' AND yearmonth.date = '2012-01';",
          "SELECT transactions_1k.date, yearmonth.consumption FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE transactions_1k.customerid = 3 AND transactions_1k.date = '2012/8/24';"
        ]
      ]
    },
    {
      "id": 1521,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(*) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00' AND transactions_1k.date = '2012-08-26';",
          "SELECT count(*) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date = '2012-08-26' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00';",
          "SELECT count(*) FROM transactions_1k WHERE transactions_1k.time BETWEEN '08:00:00' AND '09:00:00' AND transactions_1k.date = '2012-08-26' AND gasstations.country = 'CZE';",
          "SELECT count(*) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid JOIN yearmonth yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE gasstations.country = 'CZE' AND transactions_1k.date = '2012-08-26' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00';"
        ]
      ]
    },
    {
      "id": 1522,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE yearmonth.date = '201306';",
          "SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date LIKE '201306';",
          "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date LIKE '%201306%';",
          "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE yearmonth.date LIKE '201306';"
        ]
      ]
    },
    {
      "id": 1523,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.cardid = 667467;",
          "SELECT country FROM gasstations INNER JOIN transactions_1k ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 667467;",
          "SELECT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE cardid = 667467);",
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 667467;"
        ]
      ]
    },
    {
      "id": 1524,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24';",
          "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date = '2012-08-24';",
          "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN yearmonth ON yearmonth.customerid = transactions_1k.customerid WHERE yearmonth.date = '2012-08-24';",
          "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.consumption = 548.4 AND transactions_1k.date = '2012-08-24';"
        ]
      ]
    },
    {
      "id": 1525,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'EUR' AND yearmonth.date = '2012-08-25';",
          "SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '2012-08-25' AND customers.currency = 'EUR';",
          "SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'EUR' AND yearmonth.date = '2012/8/25';",
          "SELECT customers.currency, yearmonth.date, yearmonth.consumption FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.date = '2012-08-25';"
        ]
      ]
    },
    {
      "id": 1526,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT (transactions_1k.amount - transactions_1k.amount) / transactions_1k.amount FROM transactions_1k WHERE transactions_1k.date = '2012-08-25' AND transactions_1k.customerid = 6348;",
          "SELECT (transactions_1k.amount - transactions_1k.amount) / transactions_1k.amount FROM transactions_1k WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.customerid = 63;",
          "SELECT (transactions_1k.amount - transactions_1k_1.amount) / transactions_1k.amount FROM transactions_1k INNER JOIN transactions_1k AS transactions_1k_1 ON transactions_1k.customerid = transactions_1k_1.customerid AND transactions_1k.date = '2012-08-24' AND transactions_1k_1.date = '2013-08-24' WHERE transactions_1k.customerid = 63 AND transactions_1k.date = '2012-08-25';",
          "SELECT (transactions_1k.amount - transactions_1k_1.amount) / transactions_1k.amount FROM transactions_1k INNER JOIN transactions_1k AS transactions_1k_1 ON transactions_1k.customerid = transactions_1k_1.customerid AND transactions_1k.date = '2012-08-24' AND transactions_1k_1.date = '2012-08-26' WHERE transactions_1k.customerid = 63 AND transactions_1k.date = '2012-08-25';"
        ]
      ]
    },
    {
      "id": 1527,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.gasstationid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid GROUP BY gasstations.gasstationid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1;",
          "SELECT gasstationid FROM transactions_1k GROUP BY gasstationid ORDER BY sum(amount) DESC LIMIT 1;",
          "SELECT gasstationid FROM transactions_1k GROUP BY gasstationid ORDER BY SUM(amount) DESC LIMIT 1;",
          "SELECT gasstations.gasstationid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid ORDER BY transactions_1k.amount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1528,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT SUM(CASE WHEN gasstations.segment = 'Premium' THEN transactions_1k.price ELSE 0 END) / SUM(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'SVK';",
          "SELECT SUM(CASE WHEN gasstations.segment = 'Premium' THEN transactions_1k.price ELSE 0 END) / SUM(transactions_1k.price) AS percentage FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'SVK';",
          "SELECT SUM(CASE WHEN gasstations.segment = 'Premium' THEN transactions_1k.price ELSE 0 END) / SUM(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'SVK';",
          "SELECT SUM(CASE WHEN gasstations.segment = 'Premium' THEN transactions_1k.price ELSE 0 END) / SUM(transactions_1k.price) * 100 FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'SVK';"
        ]
      ]
    },
    {
      "id": 1529,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid AND transactions_1k.date = yearmonth.date WHERE transactions_1k.customerid = 38508 AND yearmonth.date = '201201';",
          "SELECT sum(transactions_1k.amount), sum(yearmonth.consumption) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid INNER JOIN customers ON transactions_1k.customerid = customers.customerid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.customerid = 38508 AND yearmonth.date = '201201';",
          "SELECT sum(transactions_1k.amount), sum(yearmonth.consumption) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE yearmonth.date = '201201' AND customers.customerid = 38508;",
          "SELECT sum(transactions_1k.amount), sum(yearmonth.consumption) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid INNER JOIN customers ON transactions_1k.customerid = customers.customerid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE yearmonth.date = '201201' AND customers.customerid = 38508;"
        ]
      ]
    },
    {
      "id": 1530,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT description FROM products ORDER BY amount DESC LIMIT 5;",
          "SELECT products.description FROM products ORDER BY products.productid DESC LIMIT 5;",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid ORDER BY transactions_1k.amount DESC LIMIT 5;",
          "SELECT products.description FROM products ORDER BY products.productid LIMIT 5;"
        ]
      ]
    },
    {
      "id": 1531,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid, customers.currency, AVG(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY AVG(transactions_1k.price) DESC LIMIT 1;",
          "SELECT customers.customerid, customers.currency, AVG(transactions_1k.price / transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY AVG(transactions_1k.price / transactions_1k.amount) DESC LIMIT 1;",
          "SELECT customers.customerid, customers.currency, AVG(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY AVG(transactions_1k.price) DESC LIMIT 1;",
          "SELECT customers.customerid, customers.currency, SUM(transactions_1k.price) / SUM(transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY SUM(transactions_1k.price) / SUM(transactions_1k.amount) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1532,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE transactions_1k.productid = 2 AND transactions_1k.amount = 1 ORDER BY transactions_1k.price DESC LIMIT 1;",
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE transactions_1k.amount = 1 AND transactions_1k.productid = 2 GROUP BY gasstations.gasstationid ORDER BY transactions_1k.price DESC LIMIT 1;",
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE transactions_1k.amount = 1 AND transactions_1k.productid = 2 GROUP BY gasstations.country ORDER BY transactions_1k.price DESC LIMIT 1;",
          "SELECT gasstations.country FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid JOIN products ON transactions_1k.productid = products.productid WHERE transactions_1k.amount = 1 AND transactions_1k.productid = 2 GROUP BY gasstations.country ORDER BY transactions_1k.price DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1533,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = transactions_1k.date WHERE transactions_1k.productid = 5 AND transactions_1k.price > 29.00;",
          "SELECT yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = transactions_1k.date WHERE transactions_1k.productid = 5 AND transactions_1k.price > 29;",
          "SELECT yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = transactions_1k.date WHERE transactions_1k.productid = 5 AND transactions_1k.price / transactions_1k.amount > 29.00;",
          "SELECT yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN products ON transactions_1k.productid = products.productid INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid WHERE yearmonth.date = '201208' AND transactions_1k.productid = 5 AND transactions_1k.price > 29.00;"
        ]
      ]
    }
  ]