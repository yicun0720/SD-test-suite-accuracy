[
    {
      "id": 0,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT max(`free meal count (k-12)` / `enrollment (k-12)`) FROM frpm WHERE `county name` = 'Alameda'",
          "SELECT max(frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda'",
          "SELECT max(frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Alameda'",
          "SELECT max(frpm.`free meal count (k-12)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda'"
        ]
      ]
    },
    {
      "id": 1,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` LIMIT 3",
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3",
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' LIMIT 3",
          "SELECT min(`free meal count (ages 5-17)` / `enrollment (ages 5-17)`) FROM frpm WHERE `educational option type` = 'Continuation School' LIMIT 3"
        ]
      ]
    },
    {
      "id": 2,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1 AND schools.county = 'Fresno'",
          "SELECT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE schools.county = 'Fresno' AND fprm.`charter school (y/n)` = 1",
          "SELECT DISTINCT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1 AND schools.county = 'Fresno'",
          "SELECT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1"
        ]
      ]
    },
    {
      "id": 3,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT schools.mailstrabr FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT schools.mailstreet FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT schools.mailstrabr FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 4,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND schools.opendate > '2000-01-01'",
          "SELECT DISTINCT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND schools.opendate > '2000-01-01'",
          "SELECT DISTINCT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.opendate > '2000-01-01' AND frpm.`charter school (y/n)` = 1",
          "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.opendate > '2000-01-01' AND frpm.`charter school (y/n)` = 1"
        ]
      ]
    },
    {
      "id": 5,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath < 400 AND schools.virtual = 'F'",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' AND satscores.avgscrmath < 400",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath < 400 AND schools.virtual = 'F'",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' AND satscores.avgscrmath < 400"
        ]
      ]
    },
    {
      "id": 6,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1",
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1",
          "SELECT sname FROM satscores WHERE numge1500 > 500 AND magnet = 1",
          "SELECT DISTINCT schools.school FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 > 500 AND schools.magnet = 1"
        ]
      ]
    },
    {
      "id": 7,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )",
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr > 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = ( SELECT max(numge1500) FROM satscores )"
        ]
      ]
    },
    {
      "id": 8,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-12 Schools (Public)' ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-12 Schools (Public)' ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopsname = 'K-12 Schools (Public)' ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopsname = 'K-12 Schools (Public)' ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 9,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.fundingtype = 'Directly funded'",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.fundingtype = 'Directly funded'",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.charter = 1",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560"
        ]
      ]
    },
    {
      "id": 10,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`frpm count (ages 5-17)`, frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds ORDER BY satscores.avgscrread DESC LIMIT 1",
          "SELECT frpm.`frpm count (ages 5-17)`, frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrread = ( SELECT max(avgscrread) FROM satscores )",
          "SELECT frpm.`frpm count (ages 5-17)` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrread = ( SELECT max(avgscrread) FROM satscores )",
          "SELECT frpm.\"FRPM count (ages 5-17)\" FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrread = ( SELECT max(avgscrread) FROM satscores )"
        ]
      ]
    },
    {
      "id": 11,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500",
          "SELECT cdscode FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500",
          "SELECT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500",
          "SELECT DISTINCT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500"
        ]
      ]
    },
    {
      "id": 12,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`percent (%) eligible free (ages 5-17)` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrread > 300 AND frpm.`percent (%) eligible free (ages 5-17)` > 0 ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 1",
          "SELECT frpm.`percent (%) eligible free (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrread > 300 AND frpm.`percent (%) eligible free (ages 5-17)` IS NOT NULL ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 1",
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrread > 300 AND frpm.`percent (%) eligible free (ages 5-17)` > 0.3 ORDER BY frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` DESC LIMIT 1",
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrread > 300 AND frpm.`percent (%) eligible free (ages 5-17)` > 0.3 ORDER BY frpm.`free meal count (ages 5-17)` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 13,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
          "SELECT DISTINCT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
          "SELECT DISTINCT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 14,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `school`, ncesschool FROM schools ORDER BY `enrollment (ages 5-17)` DESC LIMIT 5",
          "SELECT `school name`, ncesschool FROM frpm ORDER BY `enrollment (ages 5-17)` DESC LIMIT 5",
          "SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5",
          "SELECT `school name`, ncesschool FROM frpm ORDER BY '`enrollment (ages 5-17)`' DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 15,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT satscores.dname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.charter = 1 ORDER BY satscores.avgscrread DESC LIMIT 1",
          "SELECT DISTINCT satscores.dname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.charter = 1 ORDER BY satscores.avgscrread DESC LIMIT 1",
          "SELECT satscores.dname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.active = 1 ORDER BY satscores.avgscrread DESC LIMIT 1",
          "SELECT DISTINCT satscores.dname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.active = 1 ORDER BY satscores.avgscrread DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 16,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.cname = 'Alameda' AND satscores.numtsttakr < 100",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr < 100 AND schools.county = 'Alameda'"
        ]
      ]
    },
    {
      "id": 17,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.charternum FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite = 499",
          "SELECT schools.charternum FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrwrite = 499",
          "SELECT schools.charternum FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite = 499",
          "SELECT schools.charter FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite = 499"
        ]
      ]
    },
    {
      "id": 18,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr < 250",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr < 250",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.cname = 'Contra Costa' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr < 250",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250"
        ]
      ]
    },
    {
      "id": 19,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1",
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = ( SELECT max(avgscrmath) FROM satscores )",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 20,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM frpm WHERE `low grade` = 9 AND `high grade` = 12 AND `county name` = 'Amador'",
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND schools.county = 'Amador'",
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`high grade` = 12 AND frpm.`low grade` = 9 AND schools.county = 'Amador'",
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Amador' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12"
        ]
      ]
    },
    {
      "id": 21,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Los Angeles' AND frpm.`free meal count (k-12)` BETWEEN 500 AND 700",
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Los Angeles' AND frpm.`free meal count (k-12)` BETWEEN 500 AND 700",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Los Angeles' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700",
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Los Angeles' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700"
        ]
      ]
    },
    {
      "id": 22,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT schools.school FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' GROUP BY schools.school ORDER BY count(satscores.numtsttakr) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 23,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.`school name`, schools.street FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30",
          "SELECT schools.school, schools.street FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30",
          "SELECT DISTINCT schools.`school name`, schools.street FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30",
          "SELECT schools.`school name`, schools.street FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30"
        ]
      ]
    },
    {
      "id": 24,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500",
          "SELECT frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 AND frpm.`percent (%) eligible free (k-12)` > 0.1",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.gsoffered = 'K-12' AND satscores.numtsttakr >= 1500 AND frpm.`percent (%) eligible free (k-12)` > 0.1"
        ]
      ]
    },
    {
      "id": 25,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Riverside' AND satscores.avgscrmath > 400",
          "SELECT schools.school, schools.fundingtype FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'Riverside' AND satscores.avgscrmath > 400",
          "SELECT DISTINCT schools.school, schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Riverside' AND satscores.avgscrmath > 400",
          "SELECT schools.school, schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Riverside' AND satscores.avgscrmath > 400 GROUP BY schools.school, schools.fundingtype"
        ]
      ]
    },
    {
      "id": 26,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`school name`, schools.zip, schools.street, schools.city, schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Monterey' AND frpm.`free meal count (ages 5-17)` > 800",
          "SELECT schools.`school`, schools.street, schools.city, schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Monterey' AND frpm.`free meal count (ages 5-17)` > 800",
          "SELECT frpm.`school name`, schools.zip, schools.street, schools.city, schools.state FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Monterey' AND frpm.`free meal count (ages 5-17)` > 800",
          "SELECT frpm.`school name`, schools.zip, schools.street, schools.city, schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Monterey' AND frpm.`free meal count (ages 15-17)` > 800"
        ]
      ]
    },
    {
      "id": 27,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT avg(satscores.avgscrwrite), schools.school, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > '1991-01-01' AND schools.closeddate < '2000-01-01' GROUP BY schools.school, schools.phone",
          "SELECT avg(satscores.avgscrwrite), schools.school, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > '1991-01-01' OR schools.closeddate < '2000-01-01' GROUP BY schools.school, schools.phone",
          "SELECT avg(satscores.avgscrwrite), schools.school, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > '1991-01-01' AND schools.closeddate < '2000-01-01'",
          "SELECT avg(satscores.avgscrwrite), schools.school, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > 1991 OR schools.closeddate < 2000 GROUP BY schools.school, schools.phone"
        ]
      ]
    },
    {
      "id": 28,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' )",
          "SELECT frpm.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`school type` = 'K-12 Schools (Public)' )",
          "SELECT frpm.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`school type` = 'K-12 Schools (Public)' )",
          "SELECT frpm.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.fundingtype = 'Locally funded' )"
        ]
      ]
    },
    {
      "id": 29,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-12 Schools (Public)' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
          "SELECT DISTINCT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-12 Schools (Public)' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
          "SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.eilname = 'First-through-twelfth-grade' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
          "SELECT schools.opendate FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.eilname = 'First-through-twelfth-grade' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 30,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` LIMIT 5",
          "SELECT DISTINCT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` LIMIT 5",
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 5",
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` IS NOT NULL ORDER BY frpm.`enrollment (k-12)` LIMIT 5"
        ]
      ]
    },
    {
      "id": 31,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(frpm.`free meal count (k-12)` AS REAL) / frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 9, 2",
          "SELECT cast(frpm.`free meal count (k-12)` AS REAL) / frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1, 2",
          "SELECT cast(frpm.`free meal count (k-12)` AS REAL) / frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 10, 2",
          "SELECT cast(frpm.`free meal count (k-12)` AS REAL) / frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 10, 10"
        ]
      ]
    },
    {
      "id": 32,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5",
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5",
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` / schools.`enrollment (k-12)` DESC LIMIT 5",
          "SELECT cast(frpm.`free meal count (k-12)` AS REAL) / frpm.`enrollment (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 33,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT schools.website, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
          "SELECT DISTINCT schools.website, schools.`school` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
          "SELECT DISTINCT schools.website, frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
          "SELECT DISTINCT schools.website, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 5-17)` = 1900 AND frpm.`free meal count (ages 5-17)` = 2000"
        ]
      ]
    },
    {
      "id": 34,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(frpm.`free meal count (ages 5-17)` AS REAL) / frpm.`enrollment (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admlname1 = 'Gibson'",
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admlname1 = 'Gibson'",
          "SELECT cast(frpm.`free meal count (ages 5-17)` AS REAL) / frpm.`enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admlname1 = 'Gibson'",
          "SELECT cast(frpm.`free meal count (ages 5-17)` AS REAL) * 100 / frpm.`enrollment (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admlname1 = 'Gibson'"
        ]
      ]
    },
    {
      "id": 35,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 1",
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` LIMIT 1",
          "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` LIMIT 1",
          "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 36,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admlname1, schools.admlname2, schools.admlname3 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 = ( SELECT max(numge1500) FROM satscores )",
          "SELECT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname1, schools.admlname2, schools.admlname3 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 = ( SELECT max(numge1500) FROM satscores )",
          "SELECT schools.admlname1, schools.admlname2, schools.admlname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = ( SELECT max(numge1500) FROM satscores )",
          "SELECT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname1, schools.admlname2, schools.admlname3 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 = 3 ORDER BY satscores.numtsttakr DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 37,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr LIMIT 1",
          "SELECT schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY cast(satscores.numge1500 AS REAL) / satscores.numtsttakr LIMIT 1",
          "SELECT schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr ASC LIMIT 1",
          "SELECT schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY cast(satscores.numge1500 AS REAL) / satscores.numtsttakr ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 38,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Los Angeles' AND satscores.numtsttakr BETWEEN 2000 AND 3000",
          "SELECT DISTINCT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Los Angeles' AND satscores.numtsttakr BETWEEN 2000 AND 3000",
          "SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000 AND schools.county = 'Los Angeles'",
          "SELECT DISTINCT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000 AND schools.county = 'Los Angeles'"
        ]
      ]
    },
    {
      "id": 39,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT avg(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31' AND satscores.cname = 'Fresno'",
          "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31' AND schools.cname = 'Fresno'",
          "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31'",
          "SELECT cast(sum(satscores.numtsttakr) AS REAL) / count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31' AND satscores.cname = 'Fresno'"
        ]
      ]
    },
    {
      "id": 40,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.avgscrread ASC LIMIT 1",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.district = 'Fresno Unified' ORDER BY satscores.avgscrread ASC LIMIT 1",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.avgscrread LIMIT 1",
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.district = 'Fresno Unified' ORDER BY satscores.avgscrread ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 41,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5",
          "SELECT schools.school FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5",
          "SELECT satscores.sname FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 42,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.`edopsname` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1",
          "SELECT DISTINCT schools.`edopsname` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1",
          "SELECT schools.`edopsname` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = ( SELECT max(avgscrmath) FROM satscores )",
          "SELECT DISTINCT schools.`edopsname` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = ( SELECT max(avgscrmath) FROM satscores )"
        ]
      ]
    },
    {
      "id": 43,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT avgscrmath, cname FROM satscores ORDER BY avgscrmath ASC LIMIT 1",
          "SELECT avgscrmath, cname FROM satscores ORDER BY avgscrmath LIMIT 1",
          "SELECT satscores.avgscrmath, satscores.cname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath ASC LIMIT 1",
          "SELECT avg(satscores.avgscrmath), satscores.cname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 44,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )",
          "SELECT avg(satscores.avgscrwrite), schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )",
          "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = ( SELECT max(numge1500) FROM satscores )",
          "SELECT avg(satscores.avgscrwrite), schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 = ( SELECT max(numge1500) FROM satscores )"
        ]
      ]
    },
    {
      "id": 45,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT satscores.avgscrwrite, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich'",
          "SELECT satscores.sname, avg(satscores.avgscrwrite) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich' GROUP BY satscores.sname",
          "SELECT satscores.sname, avg(satscores.avgscrwrite) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich'",
          "SELECT satscores.dname, avg(satscores.avgscrwrite) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich' GROUP BY satscores.dname"
        ]
      ]
    },
    {
      "id": 46,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = 31 GROUP BY schools.state ORDER BY count(schools.state) DESC LIMIT 1",
          "SELECT schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doctype = 'State Special Schools' AND schools.doc = 31 GROUP BY schools.state ORDER BY count(schools.state) DESC LIMIT 1",
          "SELECT schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = 31 AND schools.gsoffered = 'K-12' GROUP BY schools.state ORDER BY count(schools.state) DESC LIMIT 1",
          "SELECT schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doctype = 'State Special Schools' AND schools.doc = 31 GROUP BY schools.state ORDER BY sum(frpm.`enrollment (k-12)`) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 47,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(count(schools.school) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = 52 AND strftime('%Y', schools.opendate) = '1980'",
          "SELECT cast(sum(CASE WHEN strftime('%Y', schools.opendate) = '2018' THEN 1 ELSE 0 END) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = 52",
          "SELECT cast(count(schools.school) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = 52 AND schools.opendate LIKE '1980%'",
          "SELECT cast(sum(CASE WHEN strftime('%Y', schools.opendate) = '2018' THEN 1 ELSE 0 END) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Alameda' AND schools.doc = 52"
        ]
      ]
    },
    {
      "id": 48,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'",
          "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Orange'",
          "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'",
          "SELECT cast(sum(CASE WHEN schools.doctype = 'Unified School District' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.doctype = 'Elementary School District' THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange' AND schools.doc IN (52, 54)"
        ]
      ]
    },
    {
      "id": 49,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT county, school, closeddate FROM schools WHERE statustype = 'Closed' GROUP BY county, school, closeddate ORDER BY count(school) DESC LIMIT 1",
          "SELECT schools.county, schools.school, schools.closeddate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(schools.school) DESC LIMIT 1",
          "SELECT schools.county, schools.school, schools.closeddate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(schools.closeddate) DESC LIMIT 1",
          "SELECT DISTINCT schools.county, schools.school, schools.closeddate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.statustype = 'Closed'"
        ]
      ]
    },
    {
      "id": 50,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 5, 1",
          "SELECT schools.mailstreet, schools.school FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 5, 1",
          "SELECT schools.mailstreet, schools.`school` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 5, 1",
          "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 51,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.mailstreet, schools.mailstrabr FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread ASC LIMIT 1",
          "SELECT schools.mailstreet, schools.mailstrabr FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread LIMIT 1",
          "SELECT schools.mailstreet, schools.`school` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread ASC LIMIT 1",
          "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 52,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.numge1500 > 0",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Lakeport' AND satscores.numge1500 > 0"
        ]
      ]
    },
    {
      "id": 53,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.mailcity) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno'",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno'",
          "SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno'",
          "SELECT count(*) FROM schools WHERE mailcity = 'Fresno'"
        ]
      ]
    },
    {
      "id": 54,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Avetik' AND schools.admfname2 = 'Atoian'",
          "SELECT DISTINCT schools.school, schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Avetik' AND schools.admfname2 = 'Atoian'",
          "SELECT school, mailzip FROM schools WHERE admfname1 = 'Avetik' AND admlname1 = 'Atoian'",
          "SELECT schools.`school`, schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Avetik' AND schools.admfname2 = 'Atoian'"
        ]
      ]
    },
    {
      "id": 55,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE schools.mailstate = 'CA'",
          "SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE schools.mailstate = 'CA'",
          "SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA'",
          "SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA'"
        ]
      ]
    },
    {
      "id": 56,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.county = 'San Joaquin' AND schools.statustype = 'Active'",
          "SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.county = 'San Joaquin' AND schools.statustype = 'Active'",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'San Joaquin' AND schools.mailstate = 'CA' AND schools.statustype = 'Active'",
          "SELECT count(schools.mailstate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'San Joaquin' AND schools.statustype = 'Active' AND schools.mailstate = 'CA'"
        ]
      ]
    },
    {
      "id": 57,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone, schools.ext FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 329, 1",
          "SELECT schools.phone, schools.ext FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrwrite DESC LIMIT 329, 1",
          "SELECT schools.phone, schools.ext FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite = 333 ORDER BY satscores.avgscrwrite DESC LIMIT 1",
          "SELECT schools.phone, schools.ext FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 2, 1"
        ]
      ]
    },
    {
      "id": 58,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone, ext, school FROM schools WHERE zip = '95203-3704'",
          "SELECT phone, ext, school FROM schools WHERE zip = 952033704",
          "SELECT phone, ext FROM schools WHERE zip = '95203-3704'",
          "SELECT schools.phone, schools.ext, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.zip = '95203-3704'"
        ]
      ]
    },
    {
      "id": 59,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT website FROM schools WHERE admfname1 = 'Mike' AND admlname1 = 'Larson' AND admfname2 = 'Dante' AND admlname2 = 'Alvarez'",
          "SELECT website FROM schools WHERE admfname1 = 'Mike' AND admlname1 = 'Larson' AND admfname2 = 'Dante' AND admfname3 = 'Alvarez'",
          "SELECT website FROM schools WHERE admfname1 = 'Mike' AND admlname1 = 'Larson' OR admfname1 = 'Dante' AND admlname1 = 'Alvarez'",
          "SELECT DISTINCT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Mike' AND schools.admfname2 = 'Larson' AND schools.admlname1 = 'Alvarez' AND schools.admfname3 = 'Dante'"
        ]
      ]
    },
    {
      "id": 60,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT website FROM schools WHERE charter = 1 AND virtual = 'P' AND county = 'San Joaquin'",
          "SELECT DISTINCT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'San Joaquin' AND schools.charter = 1 AND schools.virtual = 'P'",
          "SELECT website FROM schools WHERE county = 'San Joaquin' AND charter = 1 AND virtual = 'P'",
          "SELECT DISTINCT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.virtual = 'P' AND schools.charter = 1 AND schools.county = 'San Joaquin'"
        ]
      ]
    },
    {
      "id": 61,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(school) FROM schools WHERE charter = 1 AND city = 'Hickman' AND doc = 52",
          "SELECT count(*) FROM schools WHERE charter = 1 AND city = 'Hickman' AND doc = 52",
          "SELECT count(school) FROM schools WHERE city = 'Hickman' AND charter = 1 AND doc = 52",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Hickman' AND schools.doc = 52 AND schools.charter = 1"
        ]
      ]
    },
    {
      "id": 62,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(schools.charter) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`percent (%) eligible free (k-12)` < 0.18",
          "SELECT sum(schools.charter) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.charter = 0 AND frpm.`percent (%) eligible free (k-12)` < 0.18",
          "SELECT sum(CASE WHEN frpm.`percent (%) eligible free (k-12)` < 0.18 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.charter = 0",
          "SELECT sum(schools.charter) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`free meal count (k-12)` * 100 / frpm.`enrollment (k-12)` < 0.18"
        ]
      ]
    },
    {
      "id": 63,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admfname1, schools.admlname1, schools.admfname2, schools.admlname2, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2'",
          "SELECT schools.admfname1, schools.admlname1, schools.admfname2, schools.admlname2, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2' AND schools.charter = 1",
          "SELECT schools.admfname1, schools.admlname1, schools.admfname2, schools.admlname2, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.charter = 1 AND frpm.`charter school number` = '00D2'",
          "SELECT schools.admfname1, schools.admlname1, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2'"
        ]
      ]
    },
    {
      "id": 64,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM schools WHERE charternum = '00D4' AND mailcity = 'Hickman'",
          "SELECT count(*) FROM schools WHERE mailcity = 'Hickman' AND charternum = '00D4'",
          "SELECT count(mailcity) FROM schools WHERE charternum = '00D4' AND mailcity = 'Hickman'",
          "SELECT count(charternum) FROM schools WHERE charternum = '00D4' AND mailcity = 'Hickman'"
        ]
      ]
    },
    {
      "id": 65,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN schools.fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(schools.fundingtype) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Santa Clara'",
          "SELECT cast(sum(CASE WHEN fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(fundingtype) FROM schools WHERE county = 'Santa Clara'",
          "SELECT cast(sum(CASE WHEN fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM schools WHERE county = 'Santa Clara'",
          "SELECT cast(sum(CASE WHEN schools.fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(schools.fundingtype) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Santa Clara'"
        ]
      ]
    },
    {
      "id": 66,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Stanislaus' AND schools.fundingtype = 'Directly funded' AND schools.opendate BETWEEN '2000-01-01' AND '2005-12-31'",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Directly funded' AND frpm.`county name` = 'Stanislaus' AND schools.opendate BETWEEN '2000-01-01' AND '2005-12-31'",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Directly funded' AND schools.county = 'Stanislaus' AND schools.opendate BETWEEN '2000-01-01' AND '2005-12-31'",
          "SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Directly funded' AND schools.county = 'Stanislaus' AND schools.opendate BETWEEN '2000-01-01' AND '2005-12-31'"
        ]
      ]
    },
    {
      "id": 67,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(schools.closeddate - schools.opendate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'San Francisco' AND strftime('%Y', schools.closeddate) = '1989'",
          "SELECT sum(CASE WHEN strftime('%Y', schools.closeddate) = '1989' THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'San Francisco'",
          "SELECT sum(schools.closeddate - schools.opendate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'San Francisco' AND strftime('%Y', schools.closeddate) = '1989'",
          "SELECT sum(CASE WHEN strftime('%Y', schools.closeddate) = '1989' THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'San Francisco' AND schools.city = 'San Francisco'"
        ]
      ]
    },
    {
      "id": 68,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT county FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = 11 GROUP BY county ORDER BY count(school) DESC LIMIT 1",
          "SELECT county FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = 11 GROUP BY county ORDER BY count(county) DESC LIMIT 1",
          "SELECT county FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = '11' GROUP BY county ORDER BY count(school) DESC LIMIT 1",
          "SELECT county FROM schools WHERE closeddate BETWEEN '1980-01-01' AND '1989-12-31' AND soc = 11 GROUP BY county ORDER BY count(school) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 69,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT ncesdist FROM schools WHERE soc = 31",
          "SELECT ncesdist FROM schools WHERE soc = 31 AND soctype = 'State Special Schools'",
          "SELECT DISTINCT ncesdist FROM schools WHERE soc = 31",
          "SELECT DISTINCT ncesdist FROM schools WHERE soc = 31 AND soctype = 'State Special Schools'"
        ]
      ]
    },
    {
      "id": 70,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.district) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND schools.edopsname = 'District Community Day School' AND schools.virtual = 'N'",
          "SELECT count(schools.district) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND schools.edopsname = 'Community Day School' AND schools.virtual = 'N'",
          "SELECT count(DISTINCT schools.district) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND schools.edopsname = 'District Community Day School' AND schools.virtual = 'N'",
          "SELECT count(schools.district) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND schools.edopsname = 'District Community Day School' AND schools.closeddate IS NULL"
        ]
      ]
    },
    {
      "id": 71,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`district code` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0",
          "SELECT DISTINCT frpm.`district code` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0",
          "SELECT frpm.`district code` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.magnet = 0 AND schools.city = 'Fresno'",
          "SELECT frpm.`district code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0"
        ]
      ]
    },
    {
      "id": 72,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'",
          "SELECT sum(frpm.`enrollment (ages 5-17)`), frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'",
          "SELECT sum(frpm.`enrollment (ages 5-17)` * schools.edopscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'",
          "SELECT sum(frpm.`enrollment (ages 5-17)`), schools.edopsname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'"
        ]
      ]
    },
    {
      "id": 73,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`free meal count (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstreet = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School'",
          "SELECT frpm.`free meal count (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstrabr = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School'",
          "SELECT frpm.`free meal count (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopsname = 'Youth Authority School' AND schools.mailstreet = 'PO Box 1040'",
          "SELECT frpm.`free meal count (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstreet = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School' AND schools.mailstrabr = 'PO Box 1040'"
        ]
      ]
    },
    {
      "id": 74,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`low grade` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '613360' ORDER BY frpm.`low grade` ASC LIMIT 1",
          "SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.ncesdist = 613360 AND schools.edopscode = 'SPECON' ORDER BY frpm.`low grade` ASC LIMIT 1",
          "SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '613360' ORDER BY frpm.`low grade` ASC LIMIT 1",
          "SELECT frpm.`low grade` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = 613360 ORDER BY frpm.`low grade` ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 75,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.eilname, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'",
          "SELECT DISTINCT schools.eilname, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'",
          "SELECT schools.eilname, frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'",
          "SELECT DISTINCT schools.eilname, frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'"
        ]
      ]
    },
    {
      "id": 76,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.eilcode = 'HS' AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND schools.county = 'Merced'",
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.eilcode = 'HS' AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND frpm.`county name` = 'Merced'",
          "SELECT schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.eilcode = 'HS' AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND schools.county = 'Merced'",
          "SELECT schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.eilcode = 'HS' AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND frpm.`county name` = 'Merced'"
        ]
      ]
    },
    {
      "id": 77,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.`school`, frpm.`percent (%) eligible free (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'Kindergarten to 9th grade'",
          "SELECT frpm.`school name`, cast(frpm.`free meal count (ages 5-17)` AS REAL) * 100 / frpm.`enrollment (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'Kindergarten to 9th grade'",
          "SELECT schools.`school`, cast(frpm.`free meal count (ages 5-17)` AS REAL) * 100 / schools.gsserved FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'Kindergarten to 9th grade'",
          "SELECT frpm.`school name`, cast(frpm.`free meal count (ages 5-17)` AS REAL) * 100 / schools.gsserved FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'Kindergarten to 9th grade'"
        ]
      ]
    },
    {
      "id": 78,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(gsserved) DESC LIMIT 1",
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(city) DESC LIMIT 1",
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(school) DESC LIMIT 1",
          "SELECT DISTINCT gsserved FROM schools WHERE city = 'Adelanto' ORDER BY gsserved DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 79,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT county, count(cdscode) FROM schools WHERE county IN ('San Diego', 'Santa Barbara') AND virtual = 'F' GROUP BY county",
          "SELECT county, count(cdscode) FROM schools WHERE county IN ('San Diego', 'Santa Barbara') AND virtual = 'F' GROUP BY county ORDER BY count(cdscode) DESC LIMIT 1",
          "SELECT county, count(virtual) FROM schools WHERE county IN ('San Diego', 'Santa Barbara') AND virtual = 'F' GROUP BY county ORDER BY count(virtual) DESC LIMIT 1",
          "SELECT county, count(virtual) FROM schools WHERE county IN ('San Diego', 'Santa Barbara') AND virtual = 'F' GROUP BY county ORDER BY count(county) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 80,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`school type`, frpm.`school name`, schools.latitude FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY schools.latitude DESC LIMIT 1",
          "SELECT frpm.`school type`, frpm.`school name`, schools.latitude FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.latitude IS NOT NULL ORDER BY schools.latitude DESC LIMIT 1",
          "SELECT frpm.`school type`, frpm.`school name`, schools.latitude FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.latitude DESC LIMIT 1",
          "SELECT frpm.`school type`, frpm.`school name`, schools.latitude FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.latitude = ( SELECT max(latitude) FROM schools )"
        ]
      ]
    },
    {
      "id": 81,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city, frpm.`low grade`, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' ORDER BY schools.latitude LIMIT 1",
          "SELECT schools.city, frpm.`low grade`, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1",
          "SELECT schools.city, frpm.`low grade`, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' ORDER BY schools.latitude LIMIT 1",
          "SELECT schools.city, frpm.`low grade`, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 82,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT gsoffered FROM schools ORDER BY longitude DESC LIMIT 1",
          "SELECT gsoffered FROM schools WHERE longitude = ( SELECT max(longitude) FROM schools )",
          "SELECT gsoffered FROM schools WHERE longitude IS NOT NULL ORDER BY longitude DESC LIMIT 1",
          "SELECT DISTINCT gsoffered FROM schools WHERE longitude = ( SELECT max(longitude) FROM schools )"
        ]
      ]
    },
    {
      "id": 83,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city, count(schools.city) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsserved = 'K-8' AND frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.magnet = 1 GROUP BY schools.city",
          "SELECT schools.city, count(schools.city) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsserved = 'Kindergarten to 8th grade' AND frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.magnet = 1 GROUP BY schools.city",
          "SELECT count(schools.city), schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsserved = 'K-8' AND frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.magnet = 1 GROUP BY schools.city",
          "SELECT count(schools.city), schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsserved = 'K-8' AND frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.magnet = 1"
        ]
      ]
    },
    {
      "id": 84,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT admfname1, admfname2 FROM schools GROUP BY admfname1, admfname2 ORDER BY count(admfname1) DESC LIMIT 2",
          "SELECT admfname1, admfname2 FROM schools ORDER BY admfname1, admfname2 DESC LIMIT 2",
          "SELECT admfname1, admfname2 FROM schools GROUP BY admfname1, admfname2 ORDER BY count(admfname1) DESC, count(admfname2) DESC LIMIT 2",
          "SELECT admfname1, admfname2 FROM schools ORDER BY admfname1 DESC, admfname2 DESC LIMIT 2"
        ]
      ]
    },
    {
      "id": 85,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`percent (%) eligible free (k-12)`, frpm.`district code` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Alusine'",
          "SELECT cast(frpm.`free meal count (k-12)` AS REAL) * 100 / frpm.`enrollment (k-12)`, frpm.`district code` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Alusine'",
          "SELECT frpm.`percent (%) eligible free (k-12)`, frpm.`district code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine'",
          "SELECT cast(frpm.`free meal count (k-12)` AS REAL) * 100 / frpm.`enrollment (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Alusine'"
        ]
      ]
    },
    {
      "id": 86,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admlname2, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = 40",
          "SELECT schools.admlname3, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = 40",
          "SELECT schools.admlname2, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '40'",
          "SELECT schools.admlname3, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '40'"
        ]
      ]
    },
    {
      "id": 87,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 62 AND schools.doc = 54 AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31' AND frpm.`school type` IN ('Public Intermediate/Middle Schools', 'Unified Schools')",
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 62 AND schools.doc = 54 AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31'",
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 62 AND schools.doc = 54 AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31' AND frpm.`school type` = 'Public Intermediate/Middle Schools' OR frpm.`school type` = 'Unified Schools'",
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = 54 AND schools.soc = 62 AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31' AND frpm.`school type` IN ('Public Intermediate/Middle Schools', 'Unified Schools')"
        ]
      ]
    },
    {
      "id": 88,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admemail1, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT schools.admemail1, schools.`school` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT schools.admemail1 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT schools.admemail1, schools.`school` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr > 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 89,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.a3 = 'east Bohemia'",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.a3 = 'east Bohemia'"
        ]
      ]
    },
    {
      "id": 90,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague'",
          "SELECT count(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague'",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'Prague'",
          "SELECT count(DISTINCT loan.account_id) FROM district INNER JOIN loan ON district.district_id = loan.account_id WHERE district.a3 = 'Prague'"
        ]
      ]
    },
    {
      "id": 91,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(a12), avg(a13) FROM district",
          "SELECT avg(a13), avg(a12) FROM district",
          "SELECT a12, a13 FROM district ORDER BY a12 - a13 DESC LIMIT 1",
          "SELECT a12, a13 FROM district ORDER BY a12 DESC, a13 DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 92,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(district_id) FROM district WHERE a11 BETWEEN 6000 AND 10000 AND gender = 'F'",
          "SELECT count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND district.a11 BETWEEN 6000 AND 10000",
          "SELECT count(district_id) FROM district WHERE a11 > 6000 AND a11 < 10000 AND gender = 'F'",
          "SELECT count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND district.a11 > 6000 AND district.a11 < 10000"
        ]
      ]
    },
    {
      "id": 93,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND district.a11 > 8000",
          "SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'M' AND district.a3 = 'North Bohemia' AND district.a11 > 8000",
          "SELECT count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND district.a11 > 8000",
          "SELECT count(*) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND district.a11 > 8000"
        ]
      ]
    },
    {
      "id": 94,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1",
          "SELECT account.account_id, max(district.a11) - min(district.a11) FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1",
          "SELECT account.account_id, district.a11, max(district.a11) - min(district.a11) FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1",
          "SELECT account.account_id, max(district.a11) - min(district.a11) FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F'"
        ]
      ]
    },
    {
      "id": 95,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.birth_date < client.birth_date ORDER BY district.a11 DESC LIMIT 1",
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.birth_date < client.birth_date ORDER BY district.a11 DESC LIMIT 1",
          "SELECT account.account_id FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN client ON account.district_id = client.district_id WHERE client.birth_date < client.birth_date ORDER BY district.a11 DESC LIMIT 1",
          "SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.birth_date < client.birth_date GROUP BY account.account_id ORDER BY district.a11 DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 96,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
          "SELECT count(disp.client_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
          "SELECT count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'"
        ]
      ]
    },
    {
      "id": 97,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'DISPONENT' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT'",
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id INNER JOIN disp ON card.disp_id = disp.disp_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT'",
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id INNER JOIN disp ON card.disp_id = disp.disp_id WHERE account.frequency = 'POPLATEK PO OBRATU'"
        ]
      ]
    },
    {
      "id": 98,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount ASC LIMIT 1",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' GROUP BY account.account_id ORDER BY sum(loan.amount) LIMIT 1"
        ]
      ]
    },
    {
      "id": 99,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.date LIKE '1993%' AND loan.duration > 12 ORDER BY loan.amount DESC LIMIT 1",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND account.date = '1993-01-01' ORDER BY loan.amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 100,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND client.birth_date < 1950 AND district.a2 = 'Slokolov'",
          "SELECT count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01'",
          "SELECT count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Slokolov'",
          "SELECT count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND client.district_id = 1"
        ]
      ]
    },
    {
      "id": 101,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account_id FROM account WHERE date = ( SELECT min(date) FROM account )",
          "SELECT account_id FROM trans WHERE strftime('%Y', `date`) = '1995' ORDER BY `date` ASC LIMIT 1",
          "SELECT account_id FROM trans WHERE substr(`date`, 1, 4) = '1995' ORDER BY `date` ASC LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', account.date) = '1995' ORDER BY account.date ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 102,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.amount > 3000",
          "SELECT DISTINCT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000",
          "SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < 1997 AND trans.amount > 3000"
        ]
      ]
    },
    {
      "id": 103,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE card.issued = '1994-03-03'",
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE strftime('%Y-%m-%d', card.issued) = '1994-03-03'",
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE strftime('%Y', card.issued) = '1994' AND strftime('%m', card.issued) = '03'",
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE strftime('%Y', card.issued) = '1994' AND strftime('%m', card.issued) = '03'"
        ]
      ]
    },
    {
      "id": 104,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT date FROM account WHERE account_id = 840",
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.date = '1998-10-14' AND trans.amount = 840",
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = 840 AND strftime('%Y', account.date) = '1998'",
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.date = '1998-10-14' AND account.account_id = 840"
        ]
      ]
    },
    {
      "id": 105,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district_id FROM account WHERE date = '1994-08-25'",
          "SELECT district_id FROM account WHERE `date` = '1994-08-25'",
          "SELECT district_id FROM account WHERE Date = '1994-08-25'",
          "SELECT account.district_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1994-08-25'"
        ]
      ]
    },
    {
      "id": 106,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT max(trans.amount) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE card.issued = '1996-10-21'",
          "SELECT max(trans.amount) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN account ON client.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE card.issued = '1996-10-21'",
          "SELECT max(trans.amount) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE card.issued = '1996-10-21'",
          "SELECT max(trans.amount) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE card.issued LIKE '1996-10-21%'"
        ]
      ]
    },
    {
      "id": 107,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.gender FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON account.district_id = district.district_id ORDER BY district.a11 DESC LIMIT 1",
          "SELECT client.gender FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id ORDER BY district.a11 DESC LIMIT 1",
          "SELECT client.gender FROM client INNER JOIN district ON client.district_id = district.district_id ORDER BY district.a11 DESC LIMIT 1",
          "SELECT client.gender FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON account.district_id = district.district_id ORDER BY district.a11 DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 108,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT trans.amount FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT trans.amount FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT trans.amount FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = ( SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1 )",
          "SELECT trans.amount FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = ( SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 109,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F'",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F'",
          "SELECT count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F'",
          "SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F'"
        ]
      ]
    },
    {
      "id": 110,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT disp.disp_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE trans.date = '1998-09-02' AND trans.amount = 5100",
          "SELECT card.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE trans.date = '1998-09-02' AND trans.amount = 5100",
          "SELECT disp.disp_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1998' AND strftime('%m', trans.date) = '09' AND trans.amount = 5100",
          "SELECT disp.disp_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1998' AND strftime('%m', trans.date) = '9' AND trans.amount = 5100"
        ]
      ]
    },
    {
      "id": 111,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Litomerice' AND strftime('%Y', account.date) = '1996'",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Litomerice' AND account.date LIKE '1996%'",
          "SELECT sum(CASE WHEN district.a2 = 'Litomerice' THEN 1 ELSE 0 END) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.date LIKE '1996%'",
          "SELECT sum(CASE WHEN district.a2 = 'Litomerice' THEN 1 ELSE 0 END) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1996'"
        ]
      ]
    },
    {
      "id": 112,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'",
          "SELECT district.a2 FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'",
          "SELECT district.a2 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'",
          "SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.birth_date = '1976-01-29' AND client.gender = 'F'"
        ]
      ]
    },
    {
      "id": 113,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE loan.date = '1996-01-03' AND loan.amount = 98832",
          "SELECT client.birth_date FROM loan INNER JOIN client ON loan.client_id = client.client_id WHERE loan.date = '1996-01-03' AND loan.amount = 98832",
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE loan.date = '1996-01-03' AND loan.amount = '98832'",
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE strftime('%Y', loan.`date`) = '1996' AND loan.amount = 98832"
        ]
      ]
    },
    {
      "id": 114,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague'",
          "SELECT account.account_id FROM account INNER JOIN client ON account.district_id = client.district_id WHERE client.district_id = ( SELECT district_id FROM district WHERE a3 = 'Prague' )",
          "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague'",
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague' ORDER BY client.birth_date LIMIT 1"
        ]
      ]
    },
    {
      "id": 115,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia'",
          "SELECT cast(count(CASE WHEN client.gender = 'M' THEN client.client_id ELSE NULL END) AS REAL) * 100 / count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia'"
        ]
      ]
    },
    {
      "id": 116,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast((sum(CASE WHEN account.date = '1998-12-27' THEN trans.balance ELSE 0 END) - sum(CASE WHEN account.date = '1993-03-22' THEN trans.balance ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date = '1993-03-22' THEN trans.balance ELSE 0 END) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-07-05'",
          "SELECT cast((sum(CASE WHEN account.date = '1998-12-27' THEN trans.balance ELSE 0 END) - sum(CASE WHEN account.date = '1993-03-22' THEN trans.balance ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date = '1993-03-22' THEN trans.balance ELSE 0 END) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-07-05'",
          "SELECT cast((sum(CASE WHEN account.date = '1998-12-27' THEN trans.balance ELSE 0 END) - sum(CASE WHEN account.date = '1993-3-22' THEN trans.balance ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date = '1993-3-22' THEN trans.balance ELSE 0 END) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-07-05'",
          "SELECT cast((sum(CASE WHEN account.date = '1993-03-22' THEN trans.balance ELSE 0 END) - sum(CASE WHEN account.date = '1998-12-27' THEN trans.balance ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date = '1998-12-27' THEN trans.balance ELSE 0 END) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-07-05'"
        ]
      ]
    },
    {
      "id": 117,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN status = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM loan",
          "SELECT cast(sum(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / sum(amount) FROM loan",
          "SELECT cast(sum(CASE WHEN status = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / count(loan_id) FROM loan",
          "SELECT cast(sum(CASE WHEN status = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / count(status) FROM loan"
        ]
      ]
    },
    {
      "id": 118,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN loan.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount < 100000",
          "SELECT cast(sum(CASE WHEN loan.amount < 100000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C'",
          "SELECT cast(sum(CASE WHEN loan.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount < 100000",
          "SELECT cast(sum(CASE WHEN loan.amount < 100000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C'"
        ]
      ]
    },
    {
      "id": 119,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND strftime('%Y', account.date) = '1993'",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND strftime('%Y', account.`date`) = '1993'",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date > '1992-12-31' AND account.frequency = 'POPLATEK PO OBRATU'"
        ]
      ]
    },
    {
      "id": 120,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, account.frequency FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.date BETWEEN '1995-01-01' AND '2000-12-31' AND district.a3 = 'east Bohemia'",
          "SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date BETWEEN '1995-01-01' AND '2000-12-31' AND district.a3 = 'east Bohemia'",
          "SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31'",
          "SELECT account.account_id, account.frequency FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31'"
        ]
      ]
    },
    {
      "id": 121,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice'",
          "SELECT account.account_id, account.date FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Prachatice'",
          "SELECT DISTINCT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice'",
          "SELECT account.account_id, account.`date` FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice'"
        ]
      ]
    },
    {
      "id": 122,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.loan_id = 4990",
          "SELECT district.a2, district.a3 FROM loan INNER JOIN district ON loan.district_id = district.district_id WHERE loan.loan_id = 4990",
          "SELECT district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990",
          "SELECT district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.loan_id = '4990'"
        ]
      ]
    },
    {
      "id": 123,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000",
          "SELECT account.account_id, district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.amount > 300000",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000"
        ]
      ]
    },
    {
      "id": 124,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60",
          "SELECT loan.loan_id, district.a3, district.a11 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.duration = 60",
          "SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.district_id = district.district_id WHERE loan.duration = 60",
          "SELECT loan.loan_id, client.district_id, district.a11 FROM loan INNER JOIN client ON loan.account_id = client.account_id INNER JOIN district ON client.district_id = district.district_id WHERE loan.duration = 60"
        ]
      ]
    },
    {
      "id": 125,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a12, district.a13 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'D'",
          "SELECT district.a3, district.a12, district.a13 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'D'",
          "SELECT district.a12, district.a13 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.`status` = 'D'",
          "SELECT district.a12, district.a13, district.a12 - district.a13 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'D'"
        ]
      ]
    },
    {
      "id": 126,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'",
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date LIKE '1993%'",
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'",
          "SELECT cast(count(CASE WHEN district.a2 = 'Decin' THEN account.account_id ELSE NULL END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'"
        ]
      ]
    },
    {
      "id": 127,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
          "SELECT DISTINCT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
          "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE' GROUP BY account_id",
          "SELECT account_id FROM account WHERE `frequency` = 'POPLATEK MESICNE'"
        ]
      ]
    },
    {
      "id": 128,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.gender = 'F' GROUP BY district.a2 ORDER BY count(account.gender) DESC LIMIT 10",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.gender = 'F' GROUP BY district.a2 ORDER BY count(district.a2) DESC LIMIT 10",
          "SELECT district.a2, sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id GROUP BY district.a2 ORDER BY sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) DESC LIMIT 10",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN client ON account.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.a2 ORDER BY count(district.a2) DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 129,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.district_id, district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.date LIKE '1996-01%' AND trans.type = 'VYDAJ' GROUP BY account.district_id, district.a2 ORDER BY count(district.a2) DESC LIMIT 10",
          "SELECT account.district_id, district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(trans.date, 1, 7) = '1996-01' AND trans.type = 'VYDAJ' GROUP BY account.district_id, district.a2 ORDER BY count(district.a2) DESC LIMIT 10",
          "SELECT account.district_id, district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.date LIKE '1996-01%' AND trans.type = 'VYDAJ' GROUP BY account.district_id, district.a2 ORDER BY count(account.district_id) DESC LIMIT 10",
          "SELECT account.district_id, district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(trans.date, 1, 7) = '1996-01' AND trans.type = 'VYDAJ' GROUP BY account.district_id, district.a2 ORDER BY count(account.district_id) DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 130,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F'",
          "SELECT count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F'",
          "SELECT count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F'",
          "SELECT count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND card.disp_id IS NULL"
        ]
      ]
    },
    {
      "id": 131,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY count(district.a3) DESC LIMIT 1",
          "SELECT district.a2 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'C' GROUP BY district.a2 ORDER BY count(district.a2) DESC LIMIT 1",
          "SELECT district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'C' ORDER BY loan.amount DESC LIMIT 1",
          "SELECT district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY count(loan.status) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 132,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'M'",
          "SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.client_id = client.client_id WHERE client.gender = 'M'",
          "SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M'",
          "SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M'"
        ]
      ]
    },
    {
      "id": 133,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district_id, a2 FROM district ORDER BY a13 DESC LIMIT 1",
          "SELECT district_id, a2 FROM district WHERE strftime('%Y', `date`) = '1996' ORDER BY a13 DESC LIMIT 1",
          "SELECT district.district_id, district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE strftime('%Y', account.date) = '1996' ORDER BY district.a13 DESC LIMIT 1",
          "SELECT district.district_id, district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.date LIKE '1996%' ORDER BY district.a13 DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 134,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a16 = ( SELECT max(a16) FROM district )",
          "SELECT count(district.district_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a16 = ( SELECT max(a16) FROM district )",
          "SELECT count(DISTINCT account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a16 = ( SELECT max(a16) FROM district )",
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a16 = ( SELECT max(a16) FROM district )"
        ]
      ]
    },
    {
      "id": 135,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0 AND trans.operation = 'VYBER KARTOU'",
          "SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.operation = 'VYBER KARTOU' AND trans.balance < 0",
          "SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0",
          "SELECT count(trans.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account WHERE account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0 AND trans.operation = 'VYBER KARTOU'"
        ]
      ]
    },
    {
      "id": 136,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(loan.loan_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000",
          "SELECT count(*) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31'",
          "SELECT count(loan.loan_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31'",
          "SELECT count(loan.loan_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.status = 'A' AND account.date BETWEEN '1995-01-01' AND '1997-12-31'"
        ]
      ]
    },
    {
      "id": 137,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account_id) FROM account WHERE district_id = 1 AND status = 'C'",
          "SELECT count(account_id) FROM loan WHERE status = 'C' AND district_id = 1",
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 1 AND loan.status = 'C'",
          "SELECT count(loan.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.district_id = 1 AND loan.status = 'C'"
        ]
      ]
    },
    {
      "id": 138,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a15 = ( SELECT max(a15) FROM district ) AND client.gender = 'M'",
          "SELECT count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a15 = ( SELECT max(a15) FROM district ) AND client.gender = 'M'",
          "SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a15 = ( SELECT max(a15) FROM district )",
          "SELECT count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a15 = ( SELECT max(a15) FROM district ) AND client.gender = 'M'"
        ]
      ]
    },
    {
      "id": 139,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.type = 'DISPONENT' AND card.type = 'gold'",
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'DISPONENT'",
          "SELECT count(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'DISPONENT'",
          "SELECT count(card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.type = 'DISPONENT' AND card.type = 'gold'"
        ]
      ]
    },
    {
      "id": 140,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Pisek'",
          "SELECT sum(CASE WHEN a2 = 'Pisek' THEN 1 ELSE 0 END) FROM district",
          "SELECT count(*) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Pisek'",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek'"
        ]
      ]
    },
    {
      "id": 141,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.`date`) = '1997' AND trans.amount > 10000",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1997' AND trans.amount > 10000",
          "SELECT district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1997' AND trans.amount > 10000",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(cast(trans.date AS TEXT), -4) = '1997' AND trans.amount > 10000"
        ]
      ]
    },
    {
      "id": 142,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO'",
          "SELECT account.account_id FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN order ON account.account_id = order.account_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO'",
          "SELECT account.account_id FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN order ON account.account_id = order.account_id WHERE order.k_symbol = 'SIPO' AND district.a2 = 'Pisek'",
          "SELECT DISTINCT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO'"
        ]
      ]
    },
    {
      "id": 143,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.card_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type IN ('gold', 'junior')",
          "SELECT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type IN ('gold', 'junior')",
          "SELECT card.card_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' OR card.type = 'junior'",
          "SELECT DISTINCT card.card_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type IN ('gold', 'junior')"
        ]
      ]
    },
    {
      "id": 144,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(trans.amount) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '2021' AND trans.operation = 'VYBER KARTOU'",
          "SELECT avg(trans.amount) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date LIKE '2021%' AND trans.operation = 'VYBER KARTOU'",
          "SELECT avg(trans.amount) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '2021'",
          "SELECT avg(trans.amount) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.`date`) = '2021' AND trans.operation = 'VYBER KARTOU'"
        ]
      ]
    },
    {
      "id": 145,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE strftime('%Y', account.date) = '1998' AND trans.operation = 'VYBER KARTOU' GROUP BY account.account_id HAVING sum(trans.amount) < ( SELECT avg(amount) FROM trans )",
          "SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE strftime('%Y', trans.date) = '1998' AND trans.operation = 'VYBER KARTOU' GROUP BY account.account_id HAVING sum(trans.amount) < ( SELECT avg(amount) FROM trans )",
          "SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE strftime('%Y', trans.date) = '1998' AND trans.operation = 'VYBER KARTOU' GROUP BY account.account_id HAVING sum(trans.amount) < ( SELECT avg(amount) FROM trans WHERE strftime('%Y', date) = '1998' )",
          "SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE strftime('%Y', account.date) = '1998' AND trans.operation = 'VYBER KARTOU' GROUP BY account.account_id HAVING sum(trans.amount) < ( SELECT avg(amount) FROM trans WHERE strftime('%Y', date) = '1998' )"
        ]
      ]
    },
    {
      "id": 146,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.gender FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F'",
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F'",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN card ON card.disp_id = loan.disp_id INNER JOIN client ON client.client_id = card.disp_id WHERE client.gender = 'F'",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN card ON loan.account_id = card.disp_id INNER JOIN client ON client.client_id = card.disp_id WHERE client.gender = 'F'"
        ]
      ]
    },
    {
      "id": 147,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F'",
          "SELECT count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F'",
          "SELECT count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a3 = 'south Bohemia'",
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F'"
        ]
      ]
    },
    {
      "id": 148,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN disp ON loan.disp_id = disp.disp_id WHERE account.district_id = ( SELECT district_id FROM district WHERE a2 = 'Tabor' ) AND disp.type = 'OWNER'",
          "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Tabor' AND disp.type = 'OWNER'",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN disp ON loan.disp_id = disp.disp_id WHERE account.district_id = ( SELECT district_id FROM district WHERE a2 = 'Tabor' )",
          "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE account.frequency = 'OWNER' AND district.a2 = 'Tabor'"
        ]
      ]
    },
    {
      "id": 149,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.type, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type = 'OWNER' AND district.a11 BETWEEN 8000 AND 9000",
          "SELECT DISTINCT account.type, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type = 'OWNER' AND district.a11 BETWEEN 8000 AND 9000",
          "SELECT account.type FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type = 'OWNER' AND district.a11 BETWEEN 8000 AND 9000",
          "SELECT account.type, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type = 'OWNER' AND district.a11 > 8000 AND district.a11 < 9000"
        ]
      ]
    },
    {
      "id": 150,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'North Bohemia' AND trans.bank = 'AB'",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'North Bohemia' AND trans.bank = 'AB'",
          "SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'North Bohemia' AND trans.bank = 'AB'",
          "SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id IN ( SELECT district_id FROM district WHERE a3 = 'North Bohemia' ) AND trans.bank = 'AB'"
        ]
      ]
    },
    {
      "id": 151,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ' GROUP BY district.a2",
          "SELECT district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'",
          "SELECT DISTINCT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'"
        ]
      ]
    },
    {
      "id": 152,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(district.a15) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a15 > 4000 AND account.date >= '1997-01-01'",
          "SELECT avg(district.a15) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a15 > 4000 AND account.date LIKE '1997%'",
          "SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN ( SELECT district_id FROM account WHERE strftime('%Y', `date`) >= '1997' )",
          "SELECT avg(district.a15) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a15 > 4000 AND strftime('%Y', account.date) > '1996'"
        ]
      ]
    },
    {
      "id": 153,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER'",
          "SELECT count(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER'",
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.type = 'OWNER' AND card.type = 'classic'",
          "SELECT count(card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER'"
        ]
      ]
    },
    {
      "id": 154,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M'",
          "SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M'",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M'",
          "SELECT count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M'"
        ]
      ]
    },
    {
      "id": 155,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN TYPE = 'gold' AND issued < '1998-01-01' THEN card_id ELSE NULL END) AS REAL) * 100 / count(card_id) FROM card",
          "SELECT cast(count(CASE WHEN TYPE = 'gold' AND strftime('%Y', issued) < '1998' THEN card_id ELSE NULL END) AS REAL) * 100 / count(card_id) FROM card",
          "SELECT cast(sum(CASE WHEN TYPE = 'gold' THEN 1 ELSE 0 END) AS REAL) * 100 / count(card_id) FROM card WHERE issued < '1998-01-01'",
          "SELECT cast(count(CASE WHEN TYPE = 'gold' THEN card_id ELSE NULL END) AS REAL) * 100 / count(card_id) FROM card WHERE issued < '1998-01-01'"
        ]
      ]
    },
    {
      "id": 156,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM loan INNER JOIN client ON loan.account_id = client.client_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT client.name FROM loan INNER JOIN client ON loan.account_id = client.client_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT client.first_name, client.last_name FROM loan INNER JOIN client ON loan.account_id = client.client_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT client.first_name, client.last_name FROM client INNER JOIN loan ON client.client_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 157,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532",
          "SELECT district.a15 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.account_id = 532",
          "SELECT district.a15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = '532'",
          "SELECT district.a15 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.account_id = '532'"
        ]
      ]
    },
    {
      "id": 158,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.district_id FROM order INNER JOIN account ON order.account_id = account.account_id WHERE order.order_id = 33333",
          "SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333",
          "SELECT account.district_id FROM account INNER JOIN `order` ON account.account_id = order.account_id WHERE order.order_id = 33333",
          "SELECT account_id FROM order WHERE order_id = 33333"
        ]
      ]
    },
    {
      "id": 159,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT trans.operation FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'",
          "SELECT trans.trans_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'",
          "SELECT trans.type FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'",
          "SELECT trans.trans_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.disp_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'"
        ]
      ]
    },
    {
      "id": 160,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000",
          "SELECT count(account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000",
          "SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK TYDNE' AND loan.amount < 200000",
          "SELECT count(loan.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000"
        ]
      ]
    },
    {
      "id": 161,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539",
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539",
          "SELECT card.type FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.client_id = 13539",
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE client.client_id = 13539"
        ]
      ]
    },
    {
      "id": 162,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541",
          "SELECT district.a3 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.client_id = 3541",
          "SELECT district.a3 FROM client INNER JOIN district ON district.district_id = client.district_id WHERE client.client_id = 3541",
          "SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = '3541'"
        ]
      ]
    },
    {
      "id": 163,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.status = 'A' GROUP BY district.a2 ORDER BY count(district.a2) DESC LIMIT 1",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.status = 'A' GROUP BY district.a2 ORDER BY count(district.a2) DESC LIMIT 1",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.status = 'A' GROUP BY district.district_id ORDER BY count(district.district_id) DESC LIMIT 1",
          "SELECT district.a2 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'A' GROUP BY district.a2 ORDER BY count(district.a2) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 164,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.first_name, client.last_name FROM client INNER JOIN order ON client.client_id = order.account_id WHERE order.order_id = 32423",
          "SELECT client.name FROM client INNER JOIN order ON client.client_id = order.account_id WHERE order.order_id = 32423",
          "SELECT client.client_id FROM client INNER JOIN order ON client.client_id = order.account_id WHERE order.order_id = 32423",
          "SELECT client.first_name, client.last_name FROM order INNER JOIN client ON order.account_id = client.client_id WHERE order.order_id = 32423"
        ]
      ]
    },
    {
      "id": 165,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT trans.trans_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id = 5",
          "SELECT DISTINCT trans.trans_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id = 5",
          "SELECT trans.operation FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id = 5",
          "SELECT trans.operation FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id = 5 GROUP BY trans.operation"
        ]
      ]
    },
    {
      "id": 166,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Jesenik'",
          "SELECT count(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik'",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik'",
          "SELECT count(account_id) FROM account WHERE district_id IN ( SELECT district_id FROM district WHERE a2 = 'Jesenik' )"
        ]
      ]
    },
    {
      "id": 167,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued > '1996-01-01' AND card.type = 'junior'",
          "SELECT card.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.issued > '1996-12-31' AND card.type = 'junior'",
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE strftime('%Y', card.issued) > '1996' AND card.type = 'junior'",
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued > '1996-12-31' AND card.type = 'junior'"
        ]
      ]
    },
    {
      "id": 168,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a11 > 10000",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a11 > 10000",
          "SELECT cast(sum(CASE WHEN district.a11 > 10000 AND client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id"
        ]
      ]
    },
    {
      "id": 169,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast((sum(CASE WHEN account.date LIKE '1997%' THEN loan.amount ELSE 0 END) - sum(CASE WHEN account.date LIKE '1996%' THEN loan.amount ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date LIKE '1996%' THEN loan.amount ELSE 0 END) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN account ON loan.account_id = account.account_id WHERE client.gender = 'M'",
          "SELECT cast((sum(CASE WHEN account.date LIKE '1997%' THEN loan.amount ELSE 0 END) - sum(CASE WHEN account.date LIKE '1996%' THEN loan.amount ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date LIKE '1996%' THEN loan.amount ELSE 0 END) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON client.client_id = account.district_id WHERE client.gender = 'M'",
          "SELECT cast((sum(CASE WHEN account.date LIKE '1997%' THEN loan.amount ELSE 0 END) - sum(CASE WHEN account.date LIKE '1996%' THEN loan.amount ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date LIKE '1996%' THEN loan.amount ELSE 0 END) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.district_id = client.district_id WHERE client.gender = 'M'",
          "SELECT cast((sum(CASE WHEN account.date BETWEEN '1996-01-01' AND '1997-12-31' THEN loan.amount ELSE 0 END) - sum(CASE WHEN account.date BETWEEN '1996-01-01' AND '1997-12-31' THEN loan.amount ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date BETWEEN '1996-01-01' AND '1997-12-31' THEN loan.amount ELSE 0 END) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN account ON loan.account_id = account.account_id WHERE client.gender = 'M'"
        ]
      ]
    },
    {
      "id": 170,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y', trans.date) > '1995' AND trans.operation = 'VYBER KARTOU'",
          "SELECT count(DISTINCT card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y', card.issued) > '1995' AND trans.operation = 'VYBER KARTOU'",
          "SELECT count(card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE substr(trans.date, 1, 4) > '1995' AND trans.operation = 'VYBER KARTOU'",
          "SELECT count(DISTINCT card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE substr(trans.date, 1, 4) > '1995' AND trans.operation = 'VYBER KARTOU'"
        ]
      ]
    },
    {
      "id": 171,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN a3 = 'east Bohemia' THEN a16 ELSE 0 END) - sum(CASE WHEN a3 = 'north Bohemia' THEN a16 ELSE 0 END) FROM district",
          "SELECT sum(CASE WHEN a3 = 'east Bohemia' THEN a16 ELSE 0 END) - sum(CASE WHEN a3 = 'north Bohemia' THEN a16 ELSE 0 END) AS diff FROM district",
          "SELECT sum(CASE WHEN district.a3 = 'east Bohemia' THEN district.a16 ELSE 0 END) - sum(CASE WHEN district.a3 = 'north Bohemia' THEN district.a16 ELSE 0 END) FROM district",
          "SELECT sum(CASE WHEN a3 = 'east Bohemia' THEN a16 ELSE 0 END) - sum(CASE WHEN a3 = 'north Bohemia' THEN a16 ELSE 0 END) AS difference FROM district"
        ]
      ]
    },
    {
      "id": 172,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(disp_id) FROM disp WHERE account_id BETWEEN 1 AND 10 AND TYPE = 'OWNER' OR TYPE = 'DISPONENT'",
          "SELECT count(disp_id) FROM disp WHERE account_id BETWEEN 1 AND 10 AND TYPE IN ('OWNER', 'DISPONENT')",
          "SELECT count(disp_id) FROM disp WHERE account_id BETWEEN 1 AND 10",
          "SELECT count(CASE WHEN account.account_id BETWEEN 1 AND 10 THEN 1 ELSE NULL END) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.type = 'OWNER' OR disp.type = 'DISPONENT'"
        ]
      ]
    },
    {
      "id": 173,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3539 GROUP BY account.frequency",
          "SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3539",
          "SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.account_id = 3539 GROUP BY account.frequency",
          "SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3 GROUP BY account.frequency"
        ]
      ]
    },
    {
      "id": 174,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT birth_date FROM client WHERE client_id = 130",
          "SELECT strftime('%Y', birth_date) FROM client WHERE client_id = 130",
          "SELECT YEAR(birth_date) FROM client WHERE client_id = 130",
          "SELECT client.birth_date FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.account_id = 130"
        ]
      ]
    },
    {
      "id": 175,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER'",
          "SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER'",
          "SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU'"
        ]
      ]
    },
    {
      "id": 176,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(order.amount), loan.status FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id WHERE client.client_id = 992",
          "SELECT sum(order.amount), loan.status FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id WHERE client.client_id = 992 GROUP BY loan.status",
          "SELECT sum(order.amount), loan.status FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 992",
          "SELECT sum(order.amount), loan.status FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id WHERE client.client_id = 992 GROUP BY client.client_id, loan.status"
        ]
      ]
    },
    {
      "id": 177,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(trans.amount), client.gender FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.trans_id = 851",
          "SELECT sum(trans.amount), client.gender FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.account_id = 851",
          "SELECT sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END), sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.trans_id = 851",
          "SELECT sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END), sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.account_id = 851"
        ]
      ]
    },
    {
      "id": 178,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 9",
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9",
          "SELECT card.type FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.client_id = 9",
          "SELECT card.type FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.client_id = 9"
        ]
      ]
    },
    {
      "id": 179,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(trans.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND strftime('%Y', trans.date) = '1998'",
          "SELECT sum(trans.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND trans.date LIKE '1998%'",
          "SELECT sum(trans.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND account.date LIKE '1998%'",
          "SELECT sum(trans.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND account.date = '1998-01-01'"
        ]
      ]
    },
    {
      "id": 180,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia'",
          "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND client.birth_date BETWEEN '1983-01-01' AND '1987-12-31'",
          "SELECT client.client_id FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia'",
          "SELECT client.client_id, client.district_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia'"
        ]
      ]
    },
    {
      "id": 181,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3",
          "SELECT client.client_id FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'F' GROUP BY client.client_id ORDER BY sum(loan.amount) DESC LIMIT 3",
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' GROUP BY client.client_id ORDER BY sum(loan.amount) DESC LIMIT 3",
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'F' GROUP BY client.client_id ORDER BY sum(loan.amount) DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 182,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000",
          "SELECT count(client.gender) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000",
          "SELECT count(*) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000"
        ]
      ]
    },
    {
      "id": 183,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01'",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > 1996",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01'",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Beroun' AND account.date > 1996"
        ]
      ]
    },
    {
      "id": 184,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'",
          "SELECT count(client.client_id) FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.type = 'junior' AND client.gender = 'F'",
          "SELECT count(client.gender) FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.type = 'junior' AND client.gender = 'F'",
          "SELECT count(card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' AND card.type = 'junior'"
        ]
      ]
    },
    {
      "id": 185,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.district_id = 1",
          "SELECT cast(count(CASE WHEN client.gender = 'F' THEN client.client_id ELSE NULL END) AS REAL) * 100 / count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague'",
          "SELECT cast(count(CASE WHEN client.gender = 'F' THEN client.client_id ELSE NULL END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.district_id = ( SELECT district_id FROM district WHERE a3 = 'Prague' )",
          "SELECT cast(count(CASE WHEN client.gender = 'F' THEN client.client_id ELSE NULL END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.district_id = 1"
        ]
      ]
    },
    {
      "id": 186,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'"
        ]
      ]
    },
    {
      "id": 187,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'",
          "SELECT count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE' AND client.gender = 'U'",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'",
          "SELECT count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE' AND client.gender = 'M'"
        ]
      ]
    },
    {
      "id": 188,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 189,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY district.a11 LIMIT 1",
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY district.a11 ASC LIMIT 1",
          "SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.gender = 'F' ORDER BY district.a11 LIMIT 1",
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' AND district.a11 = ( SELECT min(a11) FROM district )"
        ]
      ]
    },
    {
      "id": 190,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND strftime('%Y', client.birth_date) = '1920'",
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.birth_date LIKE '1920%' AND district.a3 = 'east Bohemia'",
          "SELECT count(client_id) FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE a3 = 'east Bohemia' ) AND birth_date LIKE '1920%'",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND client.birth_date LIKE '1920%'"
        ]
      ]
    },
    {
      "id": 191,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK TYDNE' AND duration = 24",
          "SELECT count(*) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24",
          "SELECT count(loan.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24",
          "SELECT count(loan.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24"
        ]
      ]
    },
    {
      "id": 192,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND loan.status = 'C'",
          "SELECT avg(loan.amount) FROM loan INNER JOIN trans ON loan.account_id = trans.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND loan.status = 'C'",
          "SELECT avg(loan.amount) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND loan.status = 'C'"
        ]
      ]
    },
    {
      "id": 193,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id, district.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type = 'OWNER'",
          "SELECT client.client_id, client.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'OWNER'",
          "SELECT client.client_id, account.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER'",
          "SELECT client.client_id, district.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER'"
        ]
      ]
    },
    {
      "id": 194,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id, client.birth_date FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.type = 'gold'",
          "SELECT card.disp_id, client.birth_date FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.type = 'gold'",
          "SELECT client.client_id, client.birth_date FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE card.type = 'gold'",
          "SELECT client.client_id, client.birth_date FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold'"
        ]
      ]
    },
    {
      "id": 195,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1",
          "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_id) DESC LIMIT 1",
          "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(*) DESC LIMIT 1",
          "SELECT max(count(bond_type)) FROM bond"
        ]
      ]
    },
    {
      "id": 196,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'",
          "SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'",
          "SELECT count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'"
        ]
      ]
    },
    {
      "id": 197,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT avg(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT avg(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'",
          "SELECT avg(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) AS REAL) / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 198,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT avg(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / count(molecule.label) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 199,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na'",
          "SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na'",
          "SELECT count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na'",
          "SELECT count(atom.element) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na'"
        ]
      ]
    },
    {
      "id": 200,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'",
          "SELECT bond.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'",
          "SELECT DISTINCT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'",
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 201,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '='",
          "SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '='",
          "SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '='",
          "SELECT cast(sum(CASE WHEN element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond_type = ' = '"
        ]
      ]
    },
    {
      "id": 202,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM bond WHERE bond_type = '#'",
          "SELECT count(*) FROM bond WHERE bond_type = '#'",
          "SELECT count(DISTINCT bond_id) FROM bond WHERE bond_type = '#'",
          "SELECT count(bond_type) FROM bond WHERE bond_type = '#'"
        ]
      ]
    },
    {
      "id": 203,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom_id) FROM atom WHERE element != 'br'",
          "SELECT count(*) FROM atom WHERE element != 'br'",
          "SELECT count(element) FROM atom WHERE element != 'br'",
          "SELECT count(atom_id) FROM atom WHERE element <> 'br'"
        ]
      ]
    },
    {
      "id": 204,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'",
          "SELECT count(molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR099'",
          "SELECT count(label) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'",
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR099'"
        ]
      ]
    },
    {
      "id": 205,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM atom WHERE element = 'si'",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'si'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'si'",
          "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'si'"
        ]
      ]
    },
    {
      "id": 206,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR004_8_9'",
          "SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR004_8_9'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9'",
          "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR004_8_9'"
        ]
      ]
    },
    {
      "id": 207,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = ' = '",
          "SELECT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = ' = ' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = ' = ' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = ' = '"
        ]
      ]
    },
    {
      "id": 208,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' GROUP BY molecule.label ORDER BY count(molecule.label) DESC LIMIT 1",
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' GROUP BY label ORDER BY count(label) DESC LIMIT 1",
          "SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' GROUP BY molecule.label ORDER BY count(molecule.label) DESC LIMIT 1",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' GROUP BY molecule.label ORDER BY count(atom.element) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 209,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'te'",
          "SELECT bond_type FROM bond WHERE element = 'te'",
          "SELECT bond_type FROM bond WHERE molecule_id = 'TR000' AND element = 'te'",
          "SELECT bond_type FROM bond WHERE molecule_id = ( SELECT molecule_id FROM molecule WHERE label = 'te' )"
        ]
      ]
    },
    {
      "id": 210,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'",
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-'",
          "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'",
          "SELECT atom.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 211,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id WHERE molecule.label = '-'",
          "SELECT connected.atom_id FROM connected INNER JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.label = '-'",
          "SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.label = '-'",
          "SELECT connected.atom_id2 FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id WHERE molecule.label = '-'"
        ]
      ]
    },
    {
      "id": 212,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT min(count(atom.element)) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-'",
          "SELECT min(element) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-'",
          "SELECT min(count(atom.element)) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT min(element) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
        ]
      ]
    },
    {
      "id": 213,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20'",
          "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20'",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20'",
          "SELECT DISTINCT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20'"
        ]
      ]
    },
    {
      "id": 214,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn'",
          "SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn' AND molecule.label != '+' AND molecule.label != '-'",
          "SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn' AND molecule.label IS NOT NULL"
        ]
      ]
    },
    {
      "id": 215,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND atom.element IN ('i', 's')",
          "SELECT count(atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND atom.element IN ('i', 's')",
          "SELECT count(atom.atom_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-' AND atom.element IN ('i', 's')",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 216,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'",
          "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'",
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'"
        ]
      ]
    },
    {
      "id": 217,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id WHERE molecule.molecule_id = 'TR181'",
          "SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181'",
          "SELECT connected.atom_id FROM connected INNER JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR181'",
          "SELECT connected.atom_id2 FROM connected INNER JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR181'"
        ]
      ]
    },
    {
      "id": 218,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(iif(atom.element = 'f', 1, 0)) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 219,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 220,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element LIMIT 3",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3",
          "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR000' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') ORDER BY atom.element LIMIT 3"
        ]
      ]
    },
    {
      "id": 221,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6'",
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6'",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6'",
          "SELECT atom.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_2_6'"
        ]
      ]
    },
    {
      "id": 222,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT sum(iif(label = '+', 1, 0)) - sum(iif(label = '-', 1, 0)) FROM molecule",
          "SELECT sum(iif(label = '+', 1, 0)) - sum(iif(label = '-', 1, 0)) AS diff FROM molecule",
          "SELECT sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) - sum(CASE WHEN label = '-' THEN 1 ELSE 0 END) FROM molecule",
          "SELECT sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) - sum(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS diff FROM molecule"
        ]
      ]
    },
    {
      "id": 223,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5'",
          "SELECT atom_id FROM connected WHERE bond_id = 'TR000_2_5'",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_5'",
          "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5'"
        ]
      ]
    },
    {
      "id": 224,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'",
          "SELECT DISTINCT bond_id FROM connected WHERE atom_id2 = 'TR000_2'",
          "SELECT bond_id FROM connected WHERE atom_id = 'TR000_2'",
          "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2' GROUP BY bond_id"
        ]
      ]
    },
    {
      "id": 225,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.label LIMIT 5",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.label LIMIT 5",
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(molecule.label) DESC LIMIT 5",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 226,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond_id) FROM bond WHERE molecule_id = 'TR008'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008'",
          "SELECT cast(sum(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond WHERE molecule_id = 'TR008'"
        ]
      ]
    },
    {
      "id": 227,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule_id) FROM molecule",
          "SELECT cast(sum(iif(label = '+', 1, 0)) AS REAL) * 100 / count(molecule_id) FROM molecule",
          "SELECT cast(count(CASE WHEN label = '+' THEN 1 ELSE NULL END) AS REAL) * 100 / count(molecule_id) FROM molecule",
          "SELECT cast(count(CASE WHEN label = '+' THEN molecule_id ELSE NULL END) AS REAL) * 100 / count(molecule_id) FROM molecule"
        ]
      ]
    },
    {
      "id": 228,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom_id) FROM atom WHERE molecule_id = 'TR206'",
          "SELECT cast(sum(iif(element = 'h', 1, 0)) AS REAL) * 100 / count(atom_id) FROM atom WHERE molecule_id = 'TR206'",
          "SELECT cast(count(CASE WHEN element = 'h' THEN 1 ELSE NULL END) AS REAL) * 100 / count(atom_id) FROM atom WHERE molecule_id = 'TR206'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR206'"
        ]
      ]
    },
    {
      "id": 229,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000'",
          "SELECT bond.bond_type FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR000'",
          "SELECT DISTINCT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000'",
          "SELECT bond_type FROM bond WHERE molecule_id = 'TR000'"
        ]
      ]
    },
    {
      "id": 230,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element, molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060'",
          "SELECT atom.element, molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060'",
          "SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060'",
          "SELECT DISTINCT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060'"
        ]
      ]
    },
    {
      "id": 231,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR018' GROUP BY bond.bond_type, molecule.label ORDER BY count(bond.bond_type) DESC LIMIT 1",
          "SELECT bond.bond_type, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR018' GROUP BY bond.bond_type, molecule.label ORDER BY count(bond.bond_type) DESC LIMIT 1",
          "SELECT bond.bond_type, molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR018' GROUP BY bond.bond_type, molecule.label ORDER BY count(bond.bond_type) DESC LIMIT 1",
          "SELECT bond.bond_type, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR018' GROUP BY bond.bond_type, molecule.label"
        ]
      ]
    },
    {
      "id": 232,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 3",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' GROUP BY molecule.label ORDER BY count(molecule.label) DESC LIMIT 3",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-' GROUP BY molecule.label ORDER BY count(molecule.label) DESC LIMIT 3",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-' AND molecule.label = '-' ORDER BY molecule.label LIMIT 3"
        ]
      ]
    },
    {
      "id": 233,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2",
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id ASC LIMIT 2",
          "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id LIMIT 2",
          "SELECT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2"
        ]
      ]
    },
    {
      "id": 234,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR009' AND (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12')",
          "SELECT count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12'",
          "SELECT count(*) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12'",
          "SELECT count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR009' AND (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12')"
        ]
      ]
    },
    {
      "id": 235,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br'",
          "SELECT count(atom.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br'",
          "SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br'"
        ]
      ]
    },
    {
      "id": 236,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_6_9'",
          "SELECT bond_type, atom_id, atom_id2 FROM bond WHERE bond_id = 'TR001_6_9'",
          "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9'",
          "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR001_6_9'"
        ]
      ]
    },
    {
      "id": 237,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10'",
          "SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10'",
          "SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE atom_id = 'TR001_10' )",
          "SELECT molecule.label FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR001_10'"
        ]
      ]
    },
    {
      "id": 238,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule_id) FROM bond WHERE bond_type = '#'",
          "SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'",
          "SELECT count(*) FROM bond WHERE bond_type = '#'",
          "SELECT count(bond_id) FROM bond WHERE bond_type = '#'"
        ]
      ]
    },
    {
      "id": 239,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR000_19'",
          "SELECT count(*) FROM connected WHERE atom_id = 'TR000_19'",
          "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR001_19'",
          "SELECT count(atom_id) FROM connected WHERE atom_id = 'TR000_19'"
        ]
      ]
    },
    {
      "id": 240,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR004'",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR004' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR004'"
        ]
      ]
    },
    {
      "id": 241,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(label) FROM molecule WHERE label = '-'",
          "SELECT count(molecule_id) FROM molecule WHERE label = '-'",
          "SELECT count(*) FROM molecule WHERE label = '-'",
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '-'"
        ]
      ]
    },
    {
      "id": 242,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN 21 AND 25 AND molecule.label = '+'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN 21 AND 25 AND molecule.label = '+'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN 21 AND 25",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 243,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element IN ('p', 'n')",
          "SELECT bond.bond_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element IN ('p', 'n')",
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'p' AND atom.element = 'n'",
          "SELECT bond.bond_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'p' AND atom.element = 'n'"
        ]
      ]
    },
    {
      "id": 244,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 245,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(count(connected.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'i'",
          "SELECT cast(count(bond.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i'",
          "SELECT cast(count(bond.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'i'",
          "SELECT cast(count(bond.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'i'"
        ]
      ]
    },
    {
      "id": 246,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_45'",
          "SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 45",
          "SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.atom_id = 'TR000_45'",
          "SELECT bond_type, bond_id FROM bond WHERE molecule_id = 'TR000' AND atom_id = 'TR000_45'"
        ]
      ]
    },
    {
      "id": 247,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected )",
          "SELECT DISTINCT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id2 FROM connected )",
          "SELECT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id2 FROM connected )",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.atom_id IS NULL"
        ]
      ]
    },
    {
      "id": 248,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR447' AND bond.bond_type = '#'",
          "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR447' AND bond.bond_type = '#'",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR447' AND bond.bond_type = '#'",
          "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' AND bond.molecule_id = 'TR447'"
        ]
      ]
    },
    {
      "id": 249,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19'",
          "SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR144_8_19'",
          "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR144_8_19'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19'"
        ]
      ]
    },
    {
      "id": 250,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 251,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT min(atom.element) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT min(atom.element) FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '+'",
          "SELECT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY atom.element ORDER BY count(atom.element) ASC LIMIT 1",
          "SELECT element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY count(element) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 252,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id2 FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'pb'",
          "SELECT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'pb'",
          "SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'pb'",
          "SELECT connected.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'pb'"
        ]
      ]
    },
    {
      "id": 253,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
        ]
      ]
    },
    {
      "id": 254,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(count(bond.bond_id) AS REAL) * 100 / count(DISTINCT atom.element) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id GROUP BY atom.element ORDER BY count(atom.element) DESC LIMIT 1",
          "SELECT cast(count(bond.bond_id) AS REAL) * 100 / count(DISTINCT connected.atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id GROUP BY connected.atom_id ORDER BY count(connected.atom_id) DESC LIMIT 1",
          "SELECT cast(count(bond.bond_id) AS REAL) * 100 / count(DISTINCT connected.atom_id) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id GROUP BY connected.atom_id ORDER BY count(connected.atom_id) DESC LIMIT 1",
          "SELECT cast(count(bond.bond_id) AS REAL) * 100 / count(DISTINCT connected.atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id GROUP BY connected.atom_id, connected.atom_id2 ORDER BY count(connected.atom_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 255,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' AND molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id"
        ]
      ]
    },
    {
      "id": 256,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom_id) FROM atom WHERE element IN ('c', 'h')",
          "SELECT count(*) FROM atom WHERE element IN ('c', 'h')",
          "SELECT sum(CASE WHEN element IN ('c', 'h') THEN 1 ELSE 0 END) FROM atom",
          "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element IN ('c', 'h')"
        ]
      ]
    },
    {
      "id": 257,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom_id2 FROM atom WHERE element = 's'",
          "SELECT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's'",
          "SELECT connected.atom_id2 FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 's'",
          "SELECT DISTINCT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's'"
        ]
      ]
    },
    {
      "id": 258,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'sn'",
          "SELECT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'sn'",
          "SELECT DISTINCT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'sn'",
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'sn' AND bond.bond_type IN ('=', '-')"
        ]
      ]
    },
    {
      "id": 259,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.element) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'",
          "SELECT count(DISTINCT atom.element) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'",
          "SELECT count(DISTINCT bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-'",
          "SELECT count(DISTINCT atom.element) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 260,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br')",
          "SELECT count(atom.atom_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br')",
          "SELECT count(atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br')",
          "SELECT count(DISTINCT atom.atom_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br')"
        ]
      ]
    },
    {
      "id": 261,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
          "SELECT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT DISTINCT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
          "SELECT DISTINCT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 262,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 263,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id"
        ]
      ]
    },
    {
      "id": 264,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
          "SELECT label FROM molecule WHERE molecule_id = 'TR000' OR molecule_id = 'TR001' OR molecule_id = 'TR002'",
          "SELECT label FROM molecule WHERE molecule_id IN ( 'TR000', 'TR001', 'TR002' )"
        ]
      ]
    },
    {
      "id": 265,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM molecule WHERE label = '-'",
          "SELECT DISTINCT molecule_id FROM molecule WHERE label = '-'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-'"
        ]
      ]
    },
    {
      "id": 266,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'",
          "SELECT count(molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'",
          "SELECT count(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'",
          "SELECT count(label) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'"
        ]
      ]
    },
    {
      "id": 267,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'",
          "SELECT bond_type FROM bond WHERE molecule_id IN ('TR000', 'TR050')",
          "SELECT DISTINCT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'",
          "SELECT bond_type FROM bond WHERE molecule_id = 'TR000' OR molecule_id = 'TR050'"
        ]
      ]
    },
    {
      "id": 268,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_10_11'"
        ]
      ]
    },
    {
      "id": 269,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM atom WHERE element = 'i'",
          "SELECT count(connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'i'",
          "SELECT count(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i'",
          "SELECT count(bond.bond_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'i'"
        ]
      ]
    },
    {
      "id": 270,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca' GROUP BY label ORDER BY count(label) DESC LIMIT 1",
          "SELECT label FROM molecule WHERE element = 'ca' GROUP BY label ORDER BY count(label) DESC LIMIT 1",
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca' GROUP BY label",
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca' GROUP BY label ORDER BY count(label) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 271,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND (atom.element = 'cl' OR atom.element = 'c')",
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND atom.element IN ('c', 'cl')",
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND (atom.element = 'c' OR atom.element = 'cl')",
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND atom.element = 'cl' AND atom.element = 'c'"
        ]
      ]
    },
    {
      "id": 272,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND atom.element = 'c' AND molecule.label = '-' LIMIT 2",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-' AND atom.element = 'c' LIMIT 2",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element = 'c' AND molecule.label = '-' LIMIT 2",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-' AND atom.element = 'c' LIMIT 2"
        ]
      ]
    },
    {
      "id": 273,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 274,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR001'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001'",
          "SELECT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR001'",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR001'"
        ]
      ]
    },
    {
      "id": 275,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM bond WHERE bond_type = ' = '",
          "SELECT molecule_id FROM bond WHERE bond_type = '='",
          "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = ' = '",
          "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = '"
        ]
      ]
    },
    {
      "id": 276,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'",
          "SELECT bond.molecule_id, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'"
        ]
      ]
    },
    {
      "id": 277,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR005_16_26'",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR005_16_26'",
          "SELECT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR005_16_26'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR005_16_26'"
        ]
      ]
    },
    {
      "id": 278,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT count(molecule_id) FROM bond WHERE bond_type = '-' AND label = '-'"
        ]
      ]
    },
    {
      "id": 279,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT molecule.label FROM bond INNER JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT DISTINCT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11'"
        ]
      ]
    },
    {
      "id": 280,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#'",
          "SELECT bond.bond_id, molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#'",
          "SELECT DISTINCT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#'",
          "SELECT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' GROUP BY bond.bond_id, molecule.label"
        ]
      ]
    },
    {
      "id": 281,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = 4",
          "SELECT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = 4",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = 4 AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = 4 AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
        ]
      ]
    },
    {
      "id": 282,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.element), molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006'",
          "SELECT cast(sum(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(element), label FROM atom WHERE molecule_id = 'TR006'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.element), molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006' GROUP BY molecule.label",
          "SELECT cast(sum(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(element), molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006'"
        ]
      ]
    },
    {
      "id": 283,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca'",
          "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca'",
          "SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'ca' )"
        ]
      ]
    },
    {
      "id": 284,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'te' )",
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'te'",
          "SELECT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te'",
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'te' AND bond.bond_type IN ('=', '-')"
        ]
      ]
    },
    {
      "id": 285,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11'"
        ]
      ]
    },
    {
      "id": 286,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id",
          "SELECT cast(count(CASE WHEN bond.bond_type = '#' THEN molecule.molecule_id ELSE NULL END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id"
        ]
      ]
    },
    {
      "id": 287,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR047'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047'"
        ]
      ]
    },
    {
      "id": 288,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR001_1'",
          "SELECT molecule.label FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR001_1'",
          "SELECT molecule.label FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.atom_id = 'TR001_1'",
          "SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR001_1'"
        ]
      ]
    },
    {
      "id": 289,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR151'",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id = 'TR151'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151'",
          "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule WHERE molecule_id = 'TR151'"
        ]
      ]
    },
    {
      "id": 290,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('c', 'n', 'o', 's', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ( 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )"
        ]
      ]
    },
    {
      "id": 291,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule_id) FROM molecule WHERE label = '+'",
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '+'",
          "SELECT count(label) FROM molecule WHERE label = '+'",
          "SELECT count(*) FROM molecule WHERE label = '+'"
        ]
      ]
    },
    {
      "id": 292,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c'",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c'",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(molecule.molecule_id, 3, 3) BETWEEN 10 AND 50 AND atom.element = 'c'",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c'"
        ]
      ]
    },
    {
      "id": 293,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT count(DISTINCT atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id",
          "SELECT sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) FROM molecule"
        ]
      ]
    },
    {
      "id": 294,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_id FROM bond WHERE bond_type = '='",
          "SELECT bond_id FROM bond WHERE bond_type = ' = '",
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '='",
          "SELECT bond_id FROM bond WHERE bond_type = ' = ' AND molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' )"
        ]
      ]
    },
    {
      "id": 295,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h'",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' AND molecule.label = '+'",
          "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h'",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = 'c' AND atom.element = 'h'"
        ]
      ]
    },
    {
      "id": 296,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM bond WHERE bond_id = 'TR000_1_2' AND atom_id = 'TR000_1'",
          "SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_1' AND bond.bond_id = 'TR000_1_2'",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_1' AND bond.bond_id = 'TR000_1_2'",
          "SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.atom_id = 'TR000_1' AND bond.bond_id = 'TR000_1_2'"
        ]
      ]
    },
    {
      "id": 297,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'c'",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'c'",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'",
          "SELECT DISTINCT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'c'"
        ]
      ]
    },
    {
      "id": 298,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' AND molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id"
        ]
      ]
    },
    {
      "id": 299,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR124'",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id = 'TR124'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR124'",
          "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule WHERE molecule_id = 'TR124'"
        ]
      ]
    },
    {
      "id": 300,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom_id FROM atom WHERE molecule_id = 'TR186'",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR186'",
          "SELECT DISTINCT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR186'",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR186'"
        ]
      ]
    },
    {
      "id": 301,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'",
          "SELECT DISTINCT bond_type FROM bond WHERE bond_id = 'TR007_4_19'",
          "SELECT bond_type FROM BOND WHERE bond_id = 'TR007_4_19'",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR007_4_19'"
        ]
      ]
    },
    {
      "id": 302,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_2_4'",
          "SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_2_4'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_2_4'",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON atom.atom_id = connected.atom_id WHERE bond.bond_id = 'TR001_2_4'"
        ]
      ]
    },
    {
      "id": 303,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond.bond_id), molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' AND bond.bond_type = '='",
          "SELECT count(bond.bond_id), molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR006' AND bond.bond_type = '='",
          "SELECT count(bond.bond_id), molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.molecule_id = 'TR006'",
          "SELECT count(bond.bond_id), molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR006' AND bond.bond_type = '='"
        ]
      ]
    },
    {
      "id": 304,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+'",
          "SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
        ]
      ]
    },
    {
      "id": 305,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'",
          "SELECT bond.bond_id, bond.molecule_id, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'",
          "SELECT bond.bond_id, atom.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT bond.bond_id, atom.atom_id, atom.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 306,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label, atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT molecule.label, atom.element FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT molecule.label, atom.element FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')",
          "SELECT DISTINCT molecule.label, atom.element FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
        ]
      ]
    },
    {
      "id": 307,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR000_2_3'",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR000_2_3'",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR000_2_3'",
          "SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR000_2_3'"
        ]
      ]
    },
    {
      "id": 308,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'cl'",
          "SELECT count(bond.bond_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'cl'",
          "SELECT count(bond.bond_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'cl'",
          "SELECT count(*) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'cl'"
        ]
      ]
    },
    {
      "id": 309,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id, count(bond.bond_type) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR346' GROUP BY connected.atom_id",
          "SELECT connected.atom_id, count(bond.bond_type) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR346'",
          "SELECT connected.atom_id, count(bond.bond_type) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR346' GROUP BY connected.atom_id",
          "SELECT connected.atom_id, count(bond.bond_type) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR346' GROUP BY connected.atom_id"
        ]
      ]
    },
    {
      "id": 310,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+'",
          "SELECT count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 311,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type != '='",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND atom.element = 's'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type != '=' AND atom.element = 's'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND atom.element != 's'"
        ]
      ]
    },
    {
      "id": 312,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4'",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4'",
          "SELECT DISTINCT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4'",
          "SELECT molecule.label FROM bond INNER JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4'"
        ]
      ]
    },
    {
      "id": 313,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR005'",
          "SELECT count(*) FROM atom WHERE molecule_id = 'TR005'",
          "SELECT count(molecule_id) FROM atom WHERE molecule_id = 'TR005'",
          "SELECT count(DISTINCT atom_id) FROM atom WHERE molecule_id = 'TR005'"
        ]
      ]
    },
    {
      "id": 314,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM bond WHERE bond_type = '-'",
          "SELECT count(*) FROM bond WHERE bond_type = '-'",
          "SELECT count(DISTINCT bond_id) FROM bond WHERE bond_type = '-'",
          "SELECT count(bond_type) FROM bond WHERE bond_type = '-'"
        ]
      ]
    },
    {
      "id": 315,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 316,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'",
          "SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'"
        ]
      ]
    },
    {
      "id": 317,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' AND molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(count(CASE WHEN atom.element = 'cl' AND molecule.label = '+' THEN 1 ELSE NULL END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id"
        ]
      ]
    },
    {
      "id": 318,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
          "SELECT molecule_id FROM BOND WHERE bond_id = 'TR001_1_7'",
          "SELECT DISTINCT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
          "SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_1_7'"
        ]
      ]
    },
    {
      "id": 319,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.element) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_3_4'",
          "SELECT count(DISTINCT atom.element) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_3_4'",
          "SELECT count(DISTINCT atom.element) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_3_4'",
          "SELECT count(atom.element) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_3_4'"
        ]
      ]
    },
    {
      "id": 320,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2'",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2'",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR000_1' AND connected.atom_id = 'TR000_2'",
          "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id2 = 'TR000_1' AND connected.atom_id = 'TR000_2'"
        ]
      ]
    },
    {
      "id": 321,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4'",
          "SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_2' AND atom.atom_id = 'TR000_4'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR000_2' AND atom.atom_id = 'TR000_4'"
        ]
      ]
    },
    {
      "id": 322,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom WHERE atom_id = 'TR000_1'",
          "SELECT ELEMENT FROM atom WHERE atom_id = 'TR000_1'",
          "SELECT DISTINCT element FROM atom WHERE atom_id = 'TR000_1'",
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_1'"
        ]
      ]
    },
    {
      "id": 323,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR000'",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id = 'TR000'",
          "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule WHERE molecule_id = 'TR000'",
          "SELECT CASE WHEN label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM molecule WHERE molecule_id = 'TR000'"
        ]
      ]
    },
    {
      "id": 324,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond_id) FROM bond",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id"
        ]
      ]
    },
    {
      "id": 325,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'",
          "SELECT count(atom.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'",
          "SELECT count(molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 326,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = '='",
          "SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = '='",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 's' AND bond.bond_type = '='",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' AND atom.element = 's'"
        ]
      ]
    },
    {
      "id": 327,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM molecule WHERE label = '-' GROUP BY molecule_id HAVING count(molecule_id) > 5",
          "SELECT count(molecule_id) FROM molecule WHERE label = '-' GROUP BY molecule_id HAVING count(molecule_id) > 5",
          "SELECT count(molecule_id) FROM molecule WHERE label = '-' AND count(molecule_id) > 5",
          "SELECT label FROM molecule WHERE label = '-' GROUP BY label HAVING count(molecule_id) > 5"
        ]
      ]
    },
    {
      "id": 328,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.molecule_id = 'TR024' AND bond.bond_type = '='",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR024' AND bond.bond_type = '='",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.molecule_id = 'TR024' AND bond.bond_type = '='",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR024'"
        ]
      ]
    },
    {
      "id": 329,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY molecule.label ORDER BY count(atom.molecule_id) DESC LIMIT 1",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.label ORDER BY count(atom.atom_id) DESC LIMIT 1",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.label ORDER BY count(atom.molecule_id) DESC LIMIT 1",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.atom_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 330,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'h' AND molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 331,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule_id) FROM molecule WHERE label = '+'",
          "SELECT count(label) FROM molecule WHERE label = '+'",
          "SELECT count(*) FROM molecule WHERE label = '+'",
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '+'"
        ]
      ]
    },
    {
      "id": 332,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010'",
          "SELECT count(DISTINCT bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010'",
          "SELECT count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010'"
        ]
      ]
    },
    {
      "id": 333,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c'",
          "SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c'",
          "SELECT count(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'"
        ]
      ]
    },
    {
      "id": 334,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR004_7'",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.atom_id = 'TR004_7'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR004_7'",
          "SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.atom_id = 'TR004_7'"
        ]
      ]
    },
    {
      "id": 335,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = ' = ' AND atom.element = 'o'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = ' = ' AND atom.element = 'o'",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '=' AND atom.element = 'o'",
          "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'o' AND bond.bond_type = '='"
        ]
      ]
    },
    {
      "id": 336,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-'",
          "SELECT count(DISTINCT bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-'",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-'",
          "SELECT count(*) FROM ( SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' GROUP BY molecule.label ) AS t2"
        ]
      ]
    },
    {
      "id": 337,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element, bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.molecule_id = 'TR016'",
          "SELECT DISTINCT atom.element, bond.bond_type FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR016'",
          "SELECT atom.element, bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.molecule_id = 'TR016'",
          "SELECT atom.element, bond.bond_type FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR016'"
        ]
      ]
    },
    {
      "id": 338,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '=' AND atom.element = 'c' AND bond.molecule_id = 'TR012'",
          "SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR012' AND bond.bond_type = '=' AND atom.element = 'c'",
          "SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR012' AND atom.element = 'c' AND bond.bond_type = '='",
          "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' AND atom.element = 'c' AND bond.molecule_id = 'TR012'"
        ]
      ]
    },
    {
      "id": 339,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'",
          "SELECT DISTINCT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'"
        ]
      ]
    },
    {
      "id": 340,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE cardkingdomid = cardkingdomfoilid AND cardkingdomid IS NOT NULL",
          "SELECT name FROM cards WHERE cardkingdomid IS NOT NULL AND cardkingdomfoilid = cardkingdomid",
          "SELECT name FROM cards WHERE cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL",
          "SELECT name FROM cards WHERE cardkingdomfoilid = cardkingdomid"
        ]
      ]
    },
    {
      "id": 341,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE bordercolor = 'borderless' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NULL",
          "SELECT id FROM cards WHERE bordercolor = 'borderless' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NULL",
          "SELECT name FROM cards WHERE cardkingdomid IS NULL AND cardkingdomfoilid IS NULL AND bordercolor = 'borderless'",
          "SELECT name FROM cards WHERE bordercolor = 'borderless' AND (cardkingdomid IS NULL OR cardkingdomid = 0)"
        ]
      ]
    },
    {
      "id": 342,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards ORDER BY faceconvertedmanacost DESC LIMIT 1",
          "SELECT name FROM cards WHERE faceconvertedmanacost = ( SELECT max(faceconvertedmanacost) FROM cards )",
          "SELECT name FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards )",
          "SELECT name FROM cards WHERE id = ( SELECT id FROM cards ORDER BY faceconvertedmanacost DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 343,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE frameversion = 2015 AND edhrecrank < 100",
          "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 2015 AND cards.edhrecrank < 100",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.frameversion = 2015 AND cards.edhrecrank < 100"
        ]
      ]
    },
    {
      "id": 344,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator'",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.format = 'gladiator' AND legalities.status = 'Banned'",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.rarity = 'mythic' AND legalities.format = 'gladiator'",
          "SELECT DISTINCT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator'"
        ]
      ]
    },
    {
      "id": 345,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.side IS NULL AND cards.types = 'Artifact' AND legalities.format = 'vintage'",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.side IS NULL AND cards.types = 'Artifact' AND legalities.format = 'vintage'",
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage'",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage'"
        ]
      ]
    },
    {
      "id": 346,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE power = '*' OR power IS NULL AND legalities.status = 'Legal' AND legalities.format = 'commander'",
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (power = '*' OR power IS NULL) AND legalities.status = 'Legal' AND legalities.format = 'commander'",
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legalities.status = 'Legal' AND legalities.format = 'commander'",
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE power = '*' OR power IS NULL AND legalities.format = 'commander' AND legalities.status = 'Legal'"
        ]
      ]
    },
    {
      "id": 347,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele'",
          "SELECT cards.text, rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele'",
          "SELECT cards.hascontentwarning, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele'",
          "SELECT cards.name, rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele'"
        ]
      ]
    },
    {
      "id": 348,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s'",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s'",
          "SELECT DISTINCT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.number = '74s' AND cards.name = 'Sublime Epiphany'"
        ]
      ]
    },
    {
      "id": 349,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, cards.artist, cards.ispromo FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, cards.ispromo ORDER BY count(rulings.uuid) DESC LIMIT 1",
          "SELECT cards.name, cards.artist, cards.ispromo FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid ORDER BY count(rulings.uuid) DESC LIMIT 1",
          "SELECT cards.name, cards.artist, cards.ispromo FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid GROUP BY cards.name, cards.artist, cards.ispromo ORDER BY count(rulings.uuid) DESC LIMIT 1",
          "SELECT cards.name, cards.artist, cards.ispromo FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid ORDER BY count(rulings.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 350,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29'",
          "SELECT DISTINCT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29'",
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = 29",
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29'"
        ]
      ]
    },
    {
      "id": 351,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese'",
          "SELECT cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese'",
          "SELECT cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1"
        ]
      ]
    },
    {
      "id": 352,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id"
        ]
      ]
    },
    {
      "id": 353,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name, sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian'",
          "SELECT sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian'",
          "SELECT DISTINCT sets.name, sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian'",
          "SELECT sets.name, totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian'"
        ]
      ]
    },
    {
      "id": 354,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd'",
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Boyd'",
          "SELECT count(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd'",
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Boyd' AND types = 'Creature'"
        ]
      ]
    },
    {
      "id": 355,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'",
          "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
          "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';",
          "SELECT keywords FROM cards WHERE NAME = 'Angel of Mercy'"
        ]
      ]
    },
    {
      "id": 356,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE power = '*'",
          "SELECT count(*) FROM cards WHERE power = '*'",
          "SELECT count(id) FROM cards WHERE power = '\u221e'",
          "SELECT count(power) FROM cards WHERE power = '*'"
        ]
      ]
    },
    {
      "id": 357,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT promotypes FROM cards WHERE name = 'Duress'",
          "SELECT DISTINCT promotypes FROM cards WHERE name = 'Duress'",
          "SELECT promotypes FROM cards WHERE NAME = 'Duress'",
          "SELECT promotypes FROM cards WHERE name = 'Duress' GROUP BY promotypes"
        ]
      ]
    },
    {
      "id": 358,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT colors FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT colorindicator FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT DISTINCT colors FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT coloridentity FROM cards WHERE name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 359,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT originaltype FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT DISTINCT originaltype FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT originaltype FROM cards WHERE name = 'Ancestor''s Chosen''",
          "SELECT originaltype FROM cards WHERE NAME = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 360,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy'",
          "SELECT foreign_data.language FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE cards.name = 'Angel of Mercy'",
          "SELECT foreign_data.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN sets ON sets.code = set_translations.setcode INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Angel of Mercy'",
          "SELECT foreign_data.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN sets ON sets.code = set_translations.setcode INNER JOIN foreign_data ON foreign_data.id = sets.id WHERE cards.name = 'Angel of Mercy'"
        ]
      ]
    },
    {
      "id": 361,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0",
          "SELECT count(cards.id) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0",
          "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0"
        ]
      ]
    },
    {
      "id": 362,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Condemn'",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Condemn'"
        ]
      ]
    },
    {
      "id": 363,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isstarter = 1",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE isstarter = 1 AND legalities.status = 'Restricted'",
          "SELECT count(cards.name) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isstarter = 1",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE isstarter = 1 AND legalities.status = 'Restricted'"
        ]
      ]
    },
    {
      "id": 364,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'",
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'",
          "SELECT rulings.status FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Cloudchaser Eagle'",
          "SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Cloudchaser Eagle'"
        ]
      ]
    },
    {
      "id": 365,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT TYPE FROM cards WHERE name = 'Benalish Knight'",
          "SELECT types FROM cards WHERE name = 'Benalish Knight'",
          "SELECT type FROM cards WHERE name = 'Benalish Knight'",
          "SELECT DISTINCT TYPE FROM cards WHERE name = 'Benalish Knight'"
        ]
      ]
    },
    {
      "id": 366,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'",
          "SELECT DISTINCT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'",
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'"
        ]
      ]
    },
    {
      "id": 367,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'",
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian'",
          "SELECT cards.artist FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian'"
        ]
      ]
    },
    {
      "id": 368,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bordercolor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards",
          "SELECT cast(count(CASE WHEN bordercolor = 'borderless' THEN id ELSE NULL END) AS REAL) * 100 / count(id) FROM cards",
          "SELECT cast(sum(CASE WHEN bordercolor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards",
          "SELECT cast(count(CASE WHEN bordercolor = 'borderless' THEN id END) AS REAL) * 100 / count(id) FROM cards"
        ]
      ]
    },
    {
      "id": 369,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1",
          "SELECT count(cards.id) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1",
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1",
          "SELECT count(cards.name) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1"
        ]
      ]
    },
    {
      "id": 370,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Russian' AND cards.bordercolor = 'borderless'",
          "SELECT count(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Russian' AND cards.bordercolor = 'borderless'",
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND foreign_data.language = 'Russian'",
          "SELECT count(id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Russian' AND cards.bordercolor = 'borderless'"
        ]
      ]
    },
    {
      "id": 371,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.isstoryspotlight = 1",
          "SELECT cast(sum(CASE WHEN isstoryspotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French'",
          "SELECT cast(sum(CASE WHEN isstoryspotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French'",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.isstoryspotlight = 1"
        ]
      ]
    },
    {
      "id": 372,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE toughness = 99",
          "SELECT count(id) FROM cards WHERE toughness = '99'",
          "SELECT count(*) FROM cards WHERE toughness = 99",
          "SELECT count(*) FROM cards WHERE toughness = '99'"
        ]
      ]
    },
    {
      "id": 373,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE artist = 'Aaron Boyd'",
          "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
          "SELECT name FROM cards WHERE artist LIKE 'Aaron Boyd%'",
          "SELECT name FROM cards WHERE artist = 'Aaron Boyd' AND isfullart = 1"
        ]
      ]
    },
    {
      "id": 374,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo'",
          "SELECT count(*) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo'",
          "SELECT count(id) FROM cards WHERE availability = 'mtgo' AND bordercolor = 'black'",
          "SELECT count(*) FROM cards WHERE availability = 'mtgo' AND bordercolor = 'black'"
        ]
      ]
    },
    {
      "id": 375,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE convertedmanacost = 0",
          "SELECT DISTINCT id FROM cards WHERE convertedmanacost = 0",
          "SELECT id FROM cards WHERE convertedmanacost = '0'",
          "SELECT id FROM cards WHERE convertedmanacost = 0 OR faceconvertedmanacost = 0"
        ]
      ]
    },
    {
      "id": 376,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT layout FROM cards WHERE keywords = 'Flying'",
          "SELECT layout FROM cards WHERE keywords = 'Flying'",
          "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%Flying%'",
          "SELECT DISTINCT cards.layout FROM cards INNER JOIN ( SELECT id FROM cards WHERE keywords = 'Flying' ) AS t2 ON cards.id = t2.id"
        ]
      ]
    },
    {
      "id": 377,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel'",
          "SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%'",
          "SELECT count(*) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel'",
          "SELECT count(*) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%'"
        ]
      ]
    },
    {
      "id": 378,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE hasfoil = 1 AND hasnonfoil = 1",
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE hasnonfoil = 1 AND hasfoil = 1",
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL",
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE cardkingdomfoilid IS NOT NULL OR cardkingdomid IS NOT NULL"
        ]
      ]
    },
    {
      "id": 379,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE dueldeck = 'a'",
          "SELECT id FROM cards WHERE dueldeck = 'A'",
          "SELECT id FROM cards WHERE dueldeck LIKE 'a'",
          "SELECT DISTINCT id FROM cards WHERE dueldeck = 'a'"
        ]
      ]
    },
    {
      "id": 380,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT edhrecrank FROM cards WHERE frameversion = 2015",
          "SELECT DISTINCT edhrecrank FROM cards WHERE frameversion = 2015",
          "SELECT edhrecrank FROM cards WHERE frameversion = '2015'",
          "SELECT edhrecrank FROM cards WHERE frameversion = 2015 GROUP BY edhrecrank"
        ]
      ]
    },
    {
      "id": 381,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Chinese Simplified'",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN set_translations ON cards.cardkingdomid = set_translations.id WHERE set_translations.language = 'Chinese Simplified'",
          "SELECT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Chinese Simplified'",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified'"
        ]
      ]
    },
    {
      "id": 382,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.availability = 'paper'",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.availability = 'paper' AND foreign_data.language = 'Japanese'",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese' AND cards.availability = 'paper'",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.availability = 'paper';"
        ]
      ]
    },
    {
      "id": 383,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white'",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND status = 'Banned'",
          "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white'",
          "SELECT count(id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white'"
        ]
      ]
    },
    {
      "id": 384,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.uuid, foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'legacy'",
          "SELECT foreign_data.uuid, foreign_data.language FROM foreign_data INNER JOIN legalities ON foreign_data.id = legalities.id WHERE legalities.format = 'legacy'",
          "SELECT foreign_data.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON foreign_data.id = legalities.id WHERE legalities.format = 'legacy'",
          "SELECT foreign_data.uuid, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'legacy'"
        ]
      ]
    },
    {
      "id": 385,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Beacon of Immortality'",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality'",
          "SELECT DISTINCT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Beacon of Immortality'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality'"
        ]
      ]
    },
    {
      "id": 386,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id), legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal'",
          "SELECT count(cards.id) , legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal'",
          "SELECT count(cards.name), legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal'",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal'"
        ]
      ]
    },
    {
      "id": 387,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name, colors FROM cards WHERE setcode = 'OGW'",
          "SELECT cards.name, cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.setcode = 'OGW'",
          "SELECT name, coloridentity FROM cards WHERE setcode = 'OGW'",
          "SELECT cards.name, cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW'"
        ]
      ]
    },
    {
      "id": 388,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, set_translations.translation, set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.convertedmanacost = 5 AND cards.setcode = '10E'",
          "SELECT cards.name, set_translations.translation, set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.setcode = '10E' AND cards.convertedmanacost = 5",
          "SELECT cards.name, set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.convertedmanacost = 5 AND cards.setcode = '10E'",
          "SELECT cards.name, set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.convertedmanacost = 5 AND cards.setcode = '10E'"
        ]
      ]
    },
    {
      "id": 389,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf'",
          "SELECT cards.name, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.originaltype = 'Creature - Elf'",
          "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE cards.originaltype = 'Creature - Elf'",
          "SELECT cards.name, rulings.`date` FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf'"
        ]
      ]
    },
    {
      "id": 390,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20",
          "SELECT colors, format FROM cards WHERE id BETWEEN 1 AND 20",
          "SELECT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20",
          "SELECT DISTINCT colors, format FROM cards WHERE id BETWEEN 1 AND 20"
        ]
      ]
    },
    {
      "id": 391,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'",
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'",
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'"
        ]
      ]
    },
    {
      "id": 392,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3",
          "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3",
          "SELECT cards.name FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date LIMIT 3",
          "SELECT cards.name, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3"
        ]
      ]
    },
    {
      "id": 393,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NOT NULL",
          "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND hasnonfoil = 1 AND cardkingdomid IS NULL AND cardkingdomfoilid IS NOT NULL",
          "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NOT NULL AND hasnonfoil = 1",
          "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NOT NULL AND hasnonfoil = 0"
        ]
      ]
    },
    {
      "id": 394,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid = cardkingdomid",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND (cardkingdomid = cardkingdomfoilid OR cardkingdomid IS NULL)",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND (cardkingdomid IS NULL OR cardkingdomid = cardkingdomfoilid)",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND cardkingdomid IS NOT NULL AND cardkingdomid = cardkingdomfoilid"
        ]
      ]
    },
    {
      "id": 395,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1",
          "SELECT count(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1",
          "SELECT count(id) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1'"
        ]
      ]
    },
    {
      "id": 396,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE frameversion = 1993 AND availability = 'paper' AND hascontentwarning = 1",
          "SELECT count(id) FROM cards WHERE hascontentwarning = 1 AND frameversion = 1993 AND availability = 'paper'",
          "SELECT count(id) FROM cards WHERE frameversion = 1993 AND hascontentwarning = 1 AND availability = 'paper'",
          "SELECT count(id) FROM cards WHERE availability = 'paper' AND frameversion = 1993 AND hascontentwarning = 1"
        ]
      ]
    },
    {
      "id": 397,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = 2003 AND bordercolor = 'black' AND (availability = 'paper' OR availability = 'mtgo')",
          "SELECT manacost FROM cards WHERE availability IN ('paper', 'mtgo') AND frameversion = 2003 AND bordercolor = 'black' AND layout = 'normal'",
          "SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = 2003 AND bordercolor = 'black' AND availability IN ('paper', 'mtgo')",
          "SELECT manacost FROM cards WHERE availability IN ('paper', 'mtgo') AND bordercolor = 'black' AND frameversion = 2003 AND layout = 'normal'"
        ]
      ]
    },
    {
      "id": 398,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sum(manacost) FROM cards WHERE artist = 'Rob Alexander'",
          "SELECT sum(CASE WHEN artist = 'Rob Alexander' THEN manacost ELSE 0 END) FROM cards",
          "SELECT sum(convertedmanacost) FROM cards WHERE artist = 'Rob Alexander'",
          "SELECT sum(cards.manacost) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.artist = 'Rob Alexander'"
        ]
      ]
    },
    {
      "id": 399,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT types FROM cards WHERE availability = 'arena'",
          "SELECT DISTINCT types, subtypes, supertypes FROM cards WHERE availability = 'arena'",
          "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena'",
          "SELECT types FROM cards WHERE availability = 'arena'"
        ]
      ]
    },
    {
      "id": 400,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT setcode FROM set_translations WHERE LANGUAGE = 'Spanish'",
          "SELECT DISTINCT set_translations.setcode FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Spanish'",
          "SELECT set_translations.setcode FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Spanish'",
          "SELECT set_translations.setcode FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Spanish'"
        ]
      ]
    },
    {
      "id": 401,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN hand = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary'",
          "SELECT cast(sum(CASE WHEN cards.hand = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameeffects = 'legendary'",
          "SELECT cast(sum(CASE WHEN cards.hand = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards WHERE cards.frameeffects = 'legendary'",
          "SELECT cast(sum(CASE WHEN cards.hand = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.frameeffects = 'legendary'"
        ]
      ]
    },
    {
      "id": 402,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN isstoryspotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards",
          "SELECT cast(sum(iif(isstoryspotlight = 1, 1, 0)) AS REAL) * 100 / count(id) FROM cards",
          "SELECT cast(sum(CASE WHEN isstoryspotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), id FROM cards GROUP BY id",
          "SELECT cast(sum(CASE WHEN cards.isstoryspotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id), cards.id FROM cards GROUP BY cards.id"
        ]
      ]
    },
    {
      "id": 403,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id), cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid GROUP BY cards.name",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id) FROM foreign_data"
        ]
      ]
    },
    {
      "id": 404,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 309",
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 309",
          "SELECT DISTINCT set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.basesetsize = 309",
          "SELECT t.language FROM sets INNER JOIN set_translations AS t ON sets.code = t.setcode WHERE sets.basesetsize = 309"
        ]
      ]
    },
    {
      "id": 405,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(set_translations.setcode) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)' AND sets.block = 'Commander'",
          "SELECT count(set_translations.setcode) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazilian)' AND sets.block = 'Commander'",
          "SELECT count(set_translations.setcode) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazilian)'",
          "SELECT count(set_translations.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazilian)'"
        ]
      ]
    },
    {
      "id": 406,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'Legal'",
          "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Legal' AND cards.types = 'Creature'",
          "SELECT DISTINCT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'Legal'",
          "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.type = 'Creature' AND legalities.status = 'Legal'"
        ]
      ]
    },
    {
      "id": 407,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT cards.types FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND (cards.subtypes IS NOT NULL OR cards.supertypes IS NOT NULL)",
          "SELECT DISTINCT cards.types FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND (cards.subtypes IS NOT NULL OR cards.supertypes IS NOT NULL)",
          "SELECT DISTINCT cards.types FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German'",
          "SELECT DISTINCT cards.types FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German'"
        ]
      ]
    },
    {
      "id": 408,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE power IS NULL OR power = '*'",
          "SELECT count(*) FROM cards WHERE power IS NULL OR power = '*'",
          "SELECT count(id) FROM cards WHERE power = '' OR power IS NULL",
          "SELECT count(id) FROM cards WHERE power IS NULL OR power = 'null'"
        ]
      ]
    },
    {
      "id": 409,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL",
          "SELECT count(id) FROM cards WHERE side IS NULL AND rulings.text = 'This is a triggered mana ability'",
          "SELECT count(*) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL"
        ]
      ]
    },
    {
      "id": 410,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND legalities.format = 'pauper'",
          "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper'",
          "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND format = 'pauper'",
          "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND legalities.format = 'pauper' AND cards.availability = 'paper'"
        ]
      ]
    },
    {
      "id": 411,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation'",
          "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation.'",
          "SELECT DISTINCT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation'",
          "SELECT artist FROM cards WHERE TEXT = 'Das perfekte Gegenmittel zu einer dichten Formation'"
        ]
      ]
    },
    {
      "id": 412,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Matthew D. Wilson' AND cards.bordercolor = 'black' AND cards.layout = 'normal' AND cards.types = 'Creature' AND foreign_data.language = 'French'",
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.bordercolor = 'black' AND cards.layout = 'normal' AND cards.types = 'Creature' AND cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French'",
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French' AND cards.bordercolor = 'black' AND cards.layout = 'normal' AND cards.type = 'Creature'",
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French' AND cards.bordercolor = 'black' AND cards.layout = 'normal' AND cards.types = 'Creature'"
        ]
      ]
    },
    {
      "id": 413,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(rulings.text) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2009-01-10' AND cards.rarity = 'rare'",
          "SELECT count(cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2009-01-10' AND cards.rarity = 'rare'",
          "SELECT count(rulings.text) FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE rulings.`date` = '2009-01-10' AND cards.rarity = 'rare'",
          "SELECT count(rulings.text) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10'"
        ]
      ]
    },
    {
      "id": 414,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica' AND sets.basesetsize = 180",
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica' AND sets.basesetsize = 180",
          "SELECT t.language FROM sets INNER JOIN set_translations AS t ON sets.code = t.setcode WHERE sets.block = 'Ravnica' AND sets.basesetsize = 180",
          "SELECT foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.block = 'Ravnica' AND sets.basesetsize = 180"
        ]
      ]
    },
    {
      "id": 415,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Legal' AND legalities.format = 'commander'",
          "SELECT cast(sum(CASE WHEN cards.hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'legal'",
          "SELECT cast(sum(CASE WHEN hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'legal'",
          "SELECT cast(sum(CASE WHEN cards.hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.hascontentwarning) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Legal' AND legalities.format = 'commander'"
        ]
      ]
    },
    {
      "id": 416,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE (cards.power IS NULL OR cards.power = '*')",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.power) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.power IS NULL OR cards.power = '*'",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.power IS NULL OR foreign_data.power = '*'",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.power IS NULL OR cards.power = '*'"
        ]
      ]
    },
    {
      "id": 417,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(set_translations.language = 'Japanese', 1, 0)) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(set_translations.language) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'",
          "SELECT cast(sum(iif(set_translations.language = 'Japanese', 1, 0)) AS REAL) * 100 / count(set_translations.language) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'"
        ]
      ]
    },
    {
      "id": 418,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT availability FROM cards WHERE artist = 'Daren Bader'",
          "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
          "SELECT availability FROM cards WHERE artist LIKE 'Daren Bader'",
          "SELECT DISTINCT availability FROM cards WHERE artist LIKE 'Daren Bader'"
        ]
      ]
    },
    {
      "id": 419,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE edhrecrank > 12000 AND bordercolor = 'borderless'",
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000",
          "SELECT count(*) FROM cards WHERE edhrecrank > 12000 AND bordercolor = 'borderless'",
          "SELECT count(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000"
        ]
      ]
    },
    {
      "id": 420,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1",
          "SELECT count(id) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1",
          "SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1",
          "SELECT count(id) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1"
        ]
      ]
    },
    {
      "id": 421,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promotypes = 'arenaleague' ORDER BY name ASC LIMIT 3",
          "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promotypes = 'arenaleague' ORDER BY name LIMIT 3",
          "SELECT name FROM cards WHERE promotypes = 'arenaleague' AND power IS NULL OR power = '*' LIMIT 3",
          "SELECT name FROM cards WHERE promotypes = 'arenaleague' AND power IS NULL ORDER BY name ASC LIMIT 3"
        ]
      ]
    },
    {
      "id": 422,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.multiverseid = 149934",
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.multiverseid = 149934",
          "SELECT LANGUAGE FROM foreign_data WHERE multiverseid = 149934",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.multiverseid = '149934'"
        ]
      ]
    },
    {
      "id": 423,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cardkingdomid, cardkingdomfoilid FROM cards ORDER BY cardkingdomfoilid LIMIT 3",
          "SELECT cardkingdomid, cardkingdomfoilid FROM cards ORDER BY cardkingdomfoilid DESC LIMIT 3",
          "SELECT cardkingdomid, cardkingdomfoilid FROM cards ORDER BY cardkingdomfoilid ASC LIMIT 3",
          "SELECT id FROM cards WHERE cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL ORDER BY cardkingdomfoilid ASC LIMIT 3"
        ]
      ]
    },
    {
      "id": 424,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE istextless = 1",
          "SELECT cast(sum(CASE WHEN layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards WHERE istextless = 1",
          "SELECT cast(sum(CASE WHEN layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(istextless) FROM cards WHERE istextless = 1",
          "SELECT cast(sum(CASE WHEN cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards WHERE istextless = 1"
        ]
      ]
    },
    {
      "id": 425,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT number FROM cards WHERE side = 'a' AND (subtypes = 'Angel' OR subtypes = 'Wizard') AND facename IS NULL",
          "SELECT DISTINCT number FROM cards WHERE side = 'a' AND (subtypes = 'Angel' OR subtypes = 'Wizard')",
          "SELECT number FROM cards WHERE side = 'a' AND subtypes IN ('Angel', 'Wizard') GROUP BY number HAVING count(number) = 1",
          "SELECT DISTINCT number FROM cards WHERE side = 'a' AND subtypes = 'Angel, Wizard' AND facename IS NULL"
        ]
      ]
    },
    {
      "id": 426,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name LIMIT 3",
          "SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name ASC LIMIT 3",
          "SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' LIMIT 3",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.mtgocode IS NULL OR sets.mtgocode = '' ORDER BY sets.name LIMIT 3"
        ]
      ]
    },
    {
      "id": 427,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC'",
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC'",
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.mcmname = 'Archenemy' AND set_translations.setcode = 'ARC'",
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.mcmname = 'Archenemy' AND set_translations.language IS NOT NULL AND sets.code = 'ARC'"
        ]
      ]
    },
    {
      "id": 428,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5",
          "SELECT set_translations.setcode, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5",
          "SELECT DISTINCT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5",
          "SELECT sets.name, set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.id = 5"
        ]
      ]
    },
    {
      "id": 429,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.language, sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 206",
          "SELECT DISTINCT set_translations.language, sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 206",
          "SELECT set_translations.language, sets.type FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206",
          "SELECT set_translations.language, sets.block FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 206"
        ]
      ]
    },
    {
      "id": 430,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name, sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.uuid WHERE sets.block = 'Shadowmoor' AND set_translations.language = 'Italian' ORDER BY sets.name LIMIT 2",
          "SELECT sets.name, sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.uuid WHERE sets.block = 'Shadowmoor' AND set_translations.language = 'Italian' ORDER BY cards.name LIMIT 2",
          "SELECT sets.name, sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE sets.block = 'Shadowmoor' AND set_translations.language = 'Italian' ORDER BY cards.name LIMIT 2",
          "SELECT sets.name, cards.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON set_translations.language = 'Italian' AND cards.uuid = set_translations.uuid WHERE sets.block = 'Shadowmoor' ORDER BY cards.name LIMIT 2"
        ]
      ]
    },
    {
      "id": 431,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND foreign_data.language = 'Japanese'",
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND set_translations.language = 'Japanese'",
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE foreign_data.language = 'Japanese' AND sets.isforeignonly = 1 AND sets.isfoilonly = 1",
          "SELECT DISTINCT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND foreign_data.language = 'Japanese'"
        ]
      ]
    },
    {
      "id": 432,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Russian' GROUP BY sets.name ORDER BY sum(sets.basesetsize) DESC LIMIT 1",
          "SELECT t.name FROM ( SELECT sets.name, sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1 ) t"
        ]
      ]
    },
    {
      "id": 433,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Chinese Simplified'",
          "SELECT cast(sum(CASE WHEN sets.isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.isonlineonly) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified'",
          "SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Chinese Simplified'",
          "SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Chinese Simplified'"
        ]
      ]
    },
    {
      "id": 434,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND (sets.mtgocode IS NULL OR sets.mtgocode = '')",
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND (sets.mtgocode IS NULL OR sets.mtgocode = '')",
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND (sets.mtgocode = '' OR sets.mtgocode IS NULL)",
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND sets.mtgocode IS NULL OR sets.mtgocode = ''"
        ]
      ]
    },
    {
      "id": 435,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'black'",
          "SELECT count(id), id FROM cards WHERE bordercolor = 'black'",
          "SELECT count(id) FROM cards WHERE bordercolor LIKE 'black'",
          "SELECT count(*) FROM cards WHERE bordercolor = 'black'"
        ]
      ]
    },
    {
      "id": 436,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE frameeffects = 'extendedart'",
          "SELECT count(id), id FROM cards WHERE frameeffects = 'extendedart'",
          "SELECT count(id) FROM cards WHERE frameeffects LIKE '%extendedart%'",
          "SELECT id FROM cards WHERE frameeffects = 'extendedart'"
        ]
      ]
    },
    {
      "id": 437,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE bordercolor = 'white' AND isfullart = 1",
          "SELECT name FROM cards WHERE bordercolor = 'black' AND isfullart = 1",
          "SELECT name FROM cards WHERE isfullart = 1 AND bordercolor = 'black'",
          "SELECT name FROM cards WHERE isfullart = 1 AND bordercolor = 'white'"
        ]
      ]
    },
    {
      "id": 438,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT language FROM set_translations WHERE setcode = '174'",
          "SELECT language FROM set_translations WHERE setcode = '10E'",
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 174",
          "SELECT language FROM set_translations WHERE setcode = 174"
        ]
      ]
    },
    {
      "id": 439,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM sets WHERE code = 'ALL'",
          "SELECT name FROM set_translations WHERE setcode = 'ALL'",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.code = 'ALL'",
          "SELECT t.name FROM sets AS t WHERE t.code = 'ALL'"
        ]
      ]
    },
    {
      "id": 440,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT LANGUAGE FROM foreign_data WHERE name = 'A Pedra Fellwar'",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.name = 'A Pedra Fellwar'",
          "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id WHERE foreign_data.name = 'A Pedra Fellwar'"
        ]
      ]
    },
    {
      "id": 441,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE releasedate = '2007-07-13'",
          "SELECT DISTINCT code FROM sets WHERE releasedate = '2007-07-13'",
          "SELECT DISTINCT sets.code FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.releasedate = '2007-07-13'",
          "SELECT t.setcode FROM sets AS t WHERE t.releasedate = '2007-07-13'"
        ]
      ]
    },
    {
      "id": 442,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT basesetsize, code FROM sets WHERE block IN ('Masques', 'Mirage')",
          "SELECT sets.basesetsize, sets.code FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block IN ('Masques', 'Mirage')",
          "SELECT DISTINCT sets.basesetsize, sets.code FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block IN ('Masques', 'Mirage')",
          "SELECT sets.basesetsize, sets.code FROM sets INNER JOIN sets ON sets.parentcode = sets.code WHERE sets.block IN ('Masques', 'Mirage')"
        ]
      ]
    },
    {
      "id": 443,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE TYPE = 'expansion'",
          "SELECT DISTINCT code FROM sets WHERE TYPE = 'expansion'",
          "SELECT t.code FROM sets AS t WHERE t.type = 'expansion'",
          "SELECT code FROM sets WHERE TYPE = 'expansion' GROUP BY code"
        ]
      ]
    },
    {
      "id": 444,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros'",
          "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros'",
          "SELECT foreign_data.name, foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros'",
          "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros'"
        ]
      ]
    },
    {
      "id": 445,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
          "SELECT foreign_data.language, foreign_data.flavortext, cards.types FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
          "SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie'",
          "SELECT foreign_data.language, foreign_data.flavortext FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'"
        ]
      ]
    },
    {
      "id": 446,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.convertedmanacost) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Abyssal Horror'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Abyssal Horror'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.name) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Abyssal Horror'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.convertedmanacost) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Abyssal Horror'"
        ]
      ]
    },
    {
      "id": 447,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE TYPE = 'expansion' AND TYPE = 'commander'",
          "SELECT code FROM sets WHERE TYPE = 'expansion' OR TYPE = 'commander'",
          "SELECT DISTINCT setcode FROM sets WHERE TYPE = 'expansion' AND TYPE = 'commander'",
          "SELECT setcode FROM sets WHERE TYPE = 'expansion' AND TYPE = 'commander'"
        ]
      ]
    },
    {
      "id": 448,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'",
          "SELECT foreign_data.name, foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan'",
          "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'",
          "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan'"
        ]
      ]
    },
    {
      "id": 449,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'",
          "SELECT foreign_data.language, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius'",
          "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azarius'",
          "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius'"
        ]
      ]
    },
    {
      "id": 450,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid = cardkingdomid",
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND (cardkingdomid = cardkingdomfoilid OR cardkingdomid IS NULL)",
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL",
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND (cardkingdomid IS NOT NULL OR cardkingdomfoilid IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 451,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'",
          "SELECT count(id) FROM cards WHERE hand LIKE '+%' AND availability LIKE '%paper%'",
          "SELECT count(id) FROM cards WHERE availability LIKE '%paper%' AND hand = '+'",
          "SELECT count(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'"
        ]
      ]
    },
    {
      "id": 452,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE istextless = 0",
          "SELECT DISTINCT name FROM cards WHERE istextless = 0",
          "SELECT name FROM cards WHERE istextless = 1",
          "SELECT name FROM cards WHERE istextless = 0 GROUP BY name"
        ]
      ]
    },
    {
      "id": 453,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT manacost FROM cards WHERE name = 'Ancestor`s Chosen'",
          "SELECT manacost FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT convertedmanacost FROM cards WHERE name = 'Ancestor`s Chosen'",
          "SELECT convertedmanacost FROM cards WHERE name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 454,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE power = '*' OR power IS NULL AND bordercolor = 'white'",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND (power = '*' OR power IS NULL)",
          "SELECT count(*) FROM cards WHERE bordercolor = 'white' AND (power = '*' OR power IS NULL)",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND (power IS NULL OR power = '*')"
        ]
      ]
    },
    {
      "id": 455,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE side IS NOT NULL AND ispromo = 1",
          "SELECT name FROM cards WHERE ispromo = 1 AND side IS NOT NULL",
          "SELECT name FROM cards WHERE ispromo = 1 AND side IS NULL",
          "SELECT name FROM cards WHERE ispromo = 1 AND side IS NOT NULL GROUP BY name"
        ]
      ]
    },
    {
      "id": 456,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT types, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
          "SELECT DISTINCT types, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
          "SELECT types, subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
          "SELECT DISTINCT types, subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'"
        ]
      ]
    },
    {
      "id": 457,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT purchaseurls FROM cards WHERE promotypes = 'bundle'",
          "SELECT DISTINCT purchaseurls FROM cards WHERE promotypes = 'bundle'",
          "SELECT purchaseurls FROM cards WHERE promotypes = 'Bundle'",
          "SELECT DISTINCT purchaseurls FROM cards WHERE promotypes = 'Bundle'"
        ]
      ]
    },
    {
      "id": 458,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT cards.artist) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.availability LIKE '%arena,mtgo%' AND cards.bordercolor = 'black'",
          "SELECT count(id) FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena,mtgo%'",
          "SELECT count(DISTINCT cards.artist) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.bordercolor = 'black' AND (availability LIKE '%arena%' OR availability LIKE '%mtgo%')",
          "SELECT count(DISTINCT cards.artist) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.bordercolor = 'black' AND (legalities.format = 'arena' OR legalities.format = 'mtgo') AND cards.availability = 'arena,mtgo'"
        ]
      ]
    },
    {
      "id": 459,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY convertedmanacost DESC LIMIT 1",
          "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedmanacost DESC LIMIT 1",
          "SELECT name FROM cards WHERE name = 'Shrine Keeper' OR name = 'Serra Angel' ORDER BY convertedmanacost DESC LIMIT 1",
          "SELECT name FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY ( CASE WHEN convertedmanacost > faceconvertedmanacost THEN convertedmanacost ELSE faceconvertedmanacost END ) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 460,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer'",
          "SELECT DISTINCT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer'",
          "SELECT artist FROM cards WHERE flavorname LIKE 'Battra, Dark Destroyer'",
          "SELECT artist FROM cards WHERE flavortext = 'Battra, Dark Destroyer'"
        ]
      ]
    },
    {
      "id": 461,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3",
          "SELECT name FROM cards ORDER BY convertedmanacost DESC LIMIT 3",
          "SELECT name FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards ) AND frameversion = '2003' LIMIT 3",
          "SELECT name FROM cards WHERE frameversion = '2003' AND convertedmanacost = ( SELECT max(convertedmanacost) FROM cards ) LIMIT 3"
        ]
      ]
    },
    {
      "id": 462,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Italian'",
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Italian'",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Italian'",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.name WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Italian'"
        ]
      ]
    },
    {
      "id": 463,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(set_translations.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Angel of Mercy'",
          "SELECT count(set_translations.translation) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Angel of Mercy'",
          "SELECT count(set_translations.id) FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Angel of Mercy'",
          "SELECT count(set_translations.translation) FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Angel of Mercy'"
        ]
      ]
    },
    {
      "id": 464,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON cards.uuid = set_translations.uuid WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.id WHERE set_translations.translation = 'Hauptset Zehnte Edition'"
        ]
      ]
    },
    {
      "id": 465,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT CASE WHEN count(set_translations.id) > 0 THEN 'Yes' ELSE 'No' END FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Korean'",
          "SELECT CASE WHEN count(set_translations.id) > 0 THEN 'Yes' ELSE 'No' END AS RESULT FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Korean'",
          "SELECT CASE WHEN count(set_translations.setcode) > 0 THEN 'Yes' ELSE 'No' END FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Korean'",
          "SELECT CASE WHEN count(set_translations.id) > 0 THEN 'Yes' ELSE 'No' END FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Korean'"
        ]
      ]
    },
    {
      "id": 466,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.artist = 'Adam Rex' AND set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT count(*) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.artist = 'Adam Rex' AND set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'",
          "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.cardkingdomid = set_translations.id WHERE cards.artist = 'Adam Rex' AND set_translations.translation = 'Hauptset Zehnte Edition'"
        ]
      ]
    },
    {
      "id": 467,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT basesetsize FROM sets WHERE code = ( SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' )",
          "SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT basesetsize FROM sets WHERE name = 'Hauptset Zehnte Edition'",
          "SELECT sum(sets.basesetsize) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'"
        ]
      ]
    },
    {
      "id": 468,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified'",
          "SELECT t.translation FROM sets INNER JOIN set_translations AS t ON sets.code = t.setcode WHERE sets.name = 'Eighth Edition' AND t.language = 'Chinese Simplified'",
          "SELECT translation FROM set_translations WHERE setcode = ( SELECT code FROM sets WHERE name = 'Eighth Edition' ) AND LANGUAGE = 'Chinese Simplified'",
          "SELECT translation FROM set_translations WHERE setcode = ( SELECT code FROM sets WHERE name = 'Eighth Edition' ) AND language = 'Chinese Simplified'"
        ]
      ]
    },
    {
      "id": 469,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.mtgocode FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Angel of Mercy'",
          "SELECT sets.mtgocode FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE cards.name = 'Angel of Mercy'",
          "SELECT sets.mtgocode FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.mtgocode = cards.mtgocode WHERE cards.name = 'Angel of Mercy'",
          "SELECT sets.mtgocode FROM cards INNER JOIN sets ON cards.name = 'Angel of Mercy' WHERE sets.mtgocode IS NOT NULL"
        ]
      ]
    },
    {
      "id": 470,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT DISTINCT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT sets.releasedate FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 471,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT TYPE FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT DISTINCT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT DISTINCT TYPE FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT TYPE FROM sets WHERE code = ( SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' )"
        ]
      ]
    },
    {
      "id": 472,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'",
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'",
          "SELECT count(sets.name) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'",
          "SELECT count(set_translations.setcode) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'"
        ]
      ]
    },
    {
      "id": 473,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.isforeignonly FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Adarkar Valkyrie'",
          "SELECT sets.isforeignonly FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE cards.name = 'Adarkar Valkyrie'",
          "SELECT sets.isforeignonly FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON set_translations.id = cards.id WHERE cards.name = 'Adarkar Valkyrie'",
          "SELECT sets.isforeignonly FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Adarkar Valkyrie'"
        ]
      ]
    },
    {
      "id": 474,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10",
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10",
          "SELECT count(set_translations.setcode) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10",
          "SELECT count(sets.name) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10"
        ]
      ]
    },
    {
      "id": 475,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.cardkingdomid = sets.id WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black'",
          "SELECT count(cards.name) FROM cards INNER JOIN sets ON cards.cardkingdomid = sets.id WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black'",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.cardkingdomid = sets.mcmid WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black'",
          "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.cardkingdomid = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black'"
        ]
      ]
    },
    {
      "id": 476,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON cards.id = set_translations.id WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE set_translations.translation = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 477,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND name = 'Coldsnap'",
          "SELECT cards.artist FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
          "SELECT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy') AND name = 'Coldsnap'",
          "SELECT cards.artist FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy')"
        ]
      ]
    },
    {
      "id": 478,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.number FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cards.number = 4",
          "SELECT cards.number FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.number = 4 AND sets.name = 'Coldsnap'",
          "SELECT cards.number FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON cards.id = set_translations.id WHERE sets.name = 'Coldsnap' AND cards.number = 4",
          "SELECT cards.number FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE cards.number = 4 AND set_translations.translation = 'Coldsnap'"
        ]
      ]
    },
    {
      "id": 479,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR cards.power IS NULL)",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR cards.power IS NULL)",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (power = '*' OR power IS NULL)",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR cards.power = 'T1')"
        ]
      ]
    },
    {
      "id": 480,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.flavortext FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian'",
          "SELECT foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian'",
          "SELECT foreign_data.flavortext FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen'",
          "SELECT foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 481,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language IS NOT NULL",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language IS NOT NULL",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavortext IS NOT NULL",
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavortext IS NOT NULL"
        ]
      ]
    },
    {
      "id": 482,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German'",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German'",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.name = 'Ancestor''s Chosen'",
          "SELECT foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 483,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian'",
          "SELECT rulings.text FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN rulings ON rulings.uuid = sets.code WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian'",
          "SELECT foreign_data.text FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.name = 'Coldsnap'",
          "SELECT rulings.text FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN rulings ON rulings.uuid = set_translations.uuid WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian'"
        ]
      ]
    },
    {
      "id": 484,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode INNER JOIN sets ON sets.code = set_translations.setcode WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON cards.uuid = set_translations.uuid WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode INNER JOIN sets ON sets.code = set_translations.setcode WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian' ORDER BY cast(replace(trim(cards.convertedmanacost, '{}'), ',', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 485,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce'",
          "SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce'",
          "SELECT rulings.date FROM cards INNER JOIN rulings ON cards.id = rulings.uuid WHERE cards.name = 'Reminisce'",
          "SELECT rulings.date FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.name = 'Reminisce'"
        ]
      ]
    },
    {
      "id": 486,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.convertedmanacost) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE set_translations.translation = 'Coldsnap'"
        ]
      ]
    },
    {
      "id": 487,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.name) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(iif(cards.cardkingdomid IS NOT NULL, 1, 0)) AS REAL) * 100 / count(cards.name) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.cardkingdomfoilid = cards.cardkingdomid THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.name) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'"
        ]
      ]
    },
    {
      "id": 488,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE releasedate = '2017-07-14'",
          "SELECT DISTINCT code FROM sets WHERE releasedate = '2017-07-14'",
          "SELECT id FROM sets WHERE releasedate = '2017-07-14'",
          "SELECT code FROM sets WHERE releasedate LIKE '2017-07-14%'"
        ]
      ]
    },
    {
      "id": 489,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT keyrunecode FROM sets WHERE code = 'PKHC'",
          "SELECT DISTINCT keyrunecode FROM sets WHERE code = 'PKHC'",
          "SELECT t.keyrunecode FROM sets AS t WHERE t.code = 'PKHC'",
          "SELECT t.keyrunecode FROM sets t WHERE t.code = 'PKHC'"
        ]
      ]
    },
    {
      "id": 490,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT mcmid FROM sets WHERE code = 'SS2'",
          "SELECT DISTINCT mcmid FROM sets WHERE code = 'SS2'",
          "SELECT id FROM sets WHERE code = 'SS2'",
          "SELECT DISTINCT mcmid FROM cards WHERE setcode = 'SS2'"
        ]
      ]
    },
    {
      "id": 491,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT mcmname FROM sets WHERE releasedate = '2017-06-09'",
          "SELECT mcmname FROM sets WHERE strftime('%Y-%m-%d', releasedate) = '2017-06-09'",
          "SELECT DISTINCT mcmname FROM sets WHERE releasedate = '2017-06-09'",
          "SELECT DISTINCT sets.mcmname FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.releasedate = '2017-06-09'"
        ]
      ]
    },
    {
      "id": 492,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT TYPE FROM sets WHERE name LIKE '%From the Vault: Lore%'",
          "SELECT TYPE FROM sets WHERE name = 'From the Vault: Lore'",
          "SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%'",
          "SELECT t.type FROM sets AS t WHERE t.name LIKE '%From the Vault: Lore%'"
        ]
      ]
    },
    {
      "id": 493,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized'",
          "SELECT DISTINCT parentcode FROM sets WHERE name = 'Commander 2014 Oversized'",
          "SELECT DISTINCT sets.parentcode FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Commander 2014 Oversized'",
          "SELECT code FROM sets WHERE name = 'Commander 2014 Oversized'"
        ]
      ]
    },
    {
      "id": 494,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec'",
          "SELECT cards.hascontentwarning, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec'",
          "SELECT cards.text, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec'",
          "SELECT cards.text, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec' AND cards.hascontentwarning = 0"
        ]
      ]
    },
    {
      "id": 495,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.releasedate FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Evacuation'",
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Evacuation'",
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.name WHERE cards.name = 'Evacuation'",
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.id WHERE cards.name = 'Evacuation'"
        ]
      ]
    },
    {
      "id": 496,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara'",
          "SELECT sum(sets.basesetsize) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara'",
          "SELECT count(sets.basesetsize) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara'",
          "SELECT DISTINCT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara'"
        ]
      ]
    },
    {
      "id": 497,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huiti\u00e8me \u00e9dition'",
          "SELECT TYPE FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huiti\u00e8me \u00e9dition'",
          "SELECT DISTINCT TYPE FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huiti\u00e8me \u00e9dition'",
          "SELECT TYPE FROM sets WHERE name = 'Huiti\u00e8me \u00e9dition'"
        ]
      ]
    },
    {
      "id": 498,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French'",
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French'",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.uuid WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French'",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.uuid WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French'"
        ]
      ]
    },
    {
      "id": 499,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(set_translations.translation) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL",
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL",
          "SELECT count(set_translations.translation) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Salvat 2011'",
          "SELECT count(set_translations.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL"
        ]
      ]
    },
    {
      "id": 500,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'",
          "SELECT DISTINCT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'",
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Japanese' AND cards.name = 'Fellwar Stone'"
        ]
      ]
    },
    {
      "id": 501,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON cards.id = set_translations.id WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cast(replace(trim(cards.manacost, '{}'), ',', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 502,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de fr\u00edo'",
          "SELECT DISTINCT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de fr\u00edo'",
          "SELECT sets.releasedate FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.translation = 'Ola de fr\u00edo'",
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de fr\u00edo' GROUP BY sets.releasedate"
        ]
      ]
    },
    {
      "id": 503,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Samite Pilgrim'",
          "SELECT sets.type FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Samite Pilgrim'",
          "SELECT sets.type FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN sets ON sets.code = set_translations.setcode WHERE cards.name = 'Samite Pilgrim'",
          "SELECT DISTINCT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Samite Pilgrim'"
        ]
      ]
    },
    {
      "id": 504,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = 3",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = 3",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = '3'",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = '3.0'"
        ]
      ]
    },
    {
      "id": 505,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified'",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified' AND sets.name = 'Mirrodin'",
          "SELECT DISTINCT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified'",
          "SELECT t.translation FROM sets INNER JOIN set_translations AS t ON sets.code = t.setcode WHERE t.language = 'Chinese Simplified' AND sets.name = 'Mirrodin'"
        ]
      ]
    },
    {
      "id": 506,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese'",
          "SELECT cast(sum(CASE WHEN isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese'",
          "SELECT cast(sum(CASE WHEN sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.isnonfoilonly) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese'",
          "SELECT cast(sum(CASE WHEN sets.isnonfoilonly = 1 AND set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode"
        ]
      ]
    },
    {
      "id": 507,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)'",
          "SELECT cast(sum(CASE WHEN sets.isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)'",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.isonlineonly = 1",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.isonlineonly = 1"
        ]
      ]
    },
    {
      "id": 508,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1",
          "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1",
          "SELECT DISTINCT availability FROM cards WHERE artist LIKE 'Aleksi Briclot' AND istextless = 1",
          "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1 AND availability IS NOT NULL"
        ]
      ]
    },
    {
      "id": 509,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM sets ORDER BY basesetsize DESC LIMIT 1",
          "SELECT id FROM sets WHERE basesetsize = ( SELECT max(basesetsize) FROM sets )",
          "SELECT t.id FROM sets AS t ORDER BY t.basesetsize DESC LIMIT 1",
          "SELECT t.id FROM ( SELECT id, basesetsize FROM sets ORDER BY basesetsize DESC LIMIT 1 ) t"
        ]
      ]
    },
    {
      "id": 510,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1",
          "SELECT artist FROM cards WHERE side IS NULL ORDER BY cast(manacost AS REAL) / convertedmanacost DESC LIMIT 1",
          "SELECT artist FROM cards WHERE side = '' ORDER BY convertedmanacost DESC LIMIT 1",
          "SELECT artist FROM cards WHERE side IS NULL ORDER BY cast(manacost AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 511,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT frameeffects FROM cards GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1",
          "SELECT frameeffects FROM cards ORDER BY power DESC LIMIT 1",
          "SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1",
          "SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL OR cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 512,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE dueldeck = 'a' AND power IS NULL AND hasfoil = 0",
          "SELECT count(id) FROM cards WHERE hasfoil = 0 AND (power IS NULL OR power = '*') AND dueldeck = 'a'",
          "SELECT count(id) FROM cards WHERE dueldeck = 'a' AND (power IS NULL OR power = '*') AND hasfoil = 0",
          "SELECT count(id) FROM cards WHERE dueldeck = 'a' AND hasfoil = 0 AND (power IS NULL OR power = '*')"
        ]
      ]
    },
    {
      "id": 513,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM sets WHERE TYPE = 'commander' ORDER BY totalsetsize DESC LIMIT 1",
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'commander' ORDER BY sets.totalsetsize DESC LIMIT 1",
          "SELECT id FROM sets WHERE TYPE = 'expansion' AND block = 'Commander' ORDER BY totalsetsize DESC LIMIT 1",
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion' AND sets.block = 'Commander' ORDER BY sets.totalsetsize DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 514,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.manacost DESC LIMIT 10",
          "SELECT name FROM cards WHERE manacost = ( SELECT max(manacost) FROM cards )",
          "SELECT name FROM cards WHERE manacost = ( SELECT max(manacost) FROM cards ) LIMIT 10",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.convertedmanacost DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 515,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.originalreleasedate, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' ORDER BY cards.originalreleasedate ASC LIMIT 1",
          "SELECT cards.originalreleasedate, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' ORDER BY cards.originalreleasedate LIMIT 1",
          "SELECT originalreleasedate, format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' ORDER BY originalreleasedate ASC LIMIT 1",
          "SELECT cards.originalreleasedate, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Legal' ORDER BY cards.originalreleasedate ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 516,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Baga'",
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Ba\u01f5a'",
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Pete Venters'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Baga'"
        ]
      ]
    },
    {
      "id": 517,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.name) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND cards.name = 'Abundance' AND legalities.status = 'Legal'",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance' AND cards.types = 'Enchantment' AND cards.rarity = 'rare' AND legalities.status = 'Legal'",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND cards.name = 'Abundance' AND legalities.status = 'Legal'",
          "SELECT count(cards.name) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance' AND cards.types = 'Enchantment' AND cards.rarity = 'rare' AND legalities.status = 'Legal'"
        ]
      ]
    },
    {
      "id": 518,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.format, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY count(legalities.status) DESC LIMIT 1",
          "SELECT DISTINCT legalities.format, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' ORDER BY legalities.status DESC LIMIT 1",
          "SELECT DISTINCT legalities.format, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' ORDER BY count(legalities.status) DESC LIMIT 1",
          "SELECT legalities.format, cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY count(legalities.status) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 519,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Battlebond'",
          "SELECT t.language FROM sets INNER JOIN set_translations AS t ON sets.code = t.setcode WHERE sets.name = 'Battlebond'",
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Battlebond'",
          "SELECT foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.name = 'Battlebond'"
        ]
      ]
    },
    {
      "id": 520,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid ORDER BY cards.artist LIMIT 1",
          "SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid ORDER BY cards.artist ASC LIMIT 1",
          "SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY cards.artist ORDER BY count(cards.artist) LIMIT 1",
          "SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY cards.artist, legalities.format ORDER BY count(cards.artist) LIMIT 1"
        ]
      ]
    },
    {
      "id": 521,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 1997 AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1",
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.hascontentwarning = 1 AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy'"
        ]
      ]
    },
    {
      "id": 522,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.edhrecrank = 1",
          "SELECT name, status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecrank = 1",
          "SELECT cards.name, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.edhrecrank = 1",
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecrank = 1 AND status = 'Banned'"
        ]
      ]
    },
    {
      "id": 523,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(count(sets.id) AS REAL) / 365, max(set_translations.language) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.releasedate BETWEEN '2012-01-01' AND '2015-12-31'",
          "SELECT cast(count(sets.id) AS REAL) / 365, foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.releasedate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY foreign_data.language ORDER BY count(foreign_data.language) DESC LIMIT 1",
          "SELECT cast(count(sets.id) AS REAL) / 365, foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.releasedate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY foreign_data.language ORDER BY count(sets.id) DESC LIMIT 1",
          "SELECT cast(count(sets.id) AS REAL) / 365, foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.releasedate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY foreign_data.language"
        ]
      ]
    },
    {
      "id": 524,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena'",
          "SELECT DISTINCT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena'",
          "SELECT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena' GROUP BY artist",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.bordercolor = 'black' AND cards.availability = 'arena'"
        ]
      ]
    },
    {
      "id": 525,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')",
          "SELECT cards.uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' AND (legalities.status = 'Banned' OR legalities.status = 'Restricted')",
          "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Restricted' OR status = 'Banned')",
          "SELECT uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' AND (legalities.status = 'Banned' OR legalities.status = 'Restricted')"
        ]
      ]
    },
    {
      "id": 526,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
          "SELECT count(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
          "SELECT count(id) FROM cards WHERE availability = 'paper' AND artist = 'Matthew D. Wilson'",
          "SELECT count(id) FROM cards WHERE artist LIKE 'Matthew D. Wilson' AND availability = 'paper'"
        ]
      ]
    },
    {
      "id": 527,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC",
          "SELECT rulings.date, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC",
          "SELECT rulings.text, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC"
        ]
      ]
    },
    {
      "id": 528,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON sets.code = cards.setcode WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'",
          "SELECT cards.name, legalities.format FROM sets INNER JOIN cards ON sets.code = cards.setcode INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'",
          "SELECT cards.name, legalities.format FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'",
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON sets.code = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'"
        ]
      ]
    },
    {
      "id": 529,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language != 'Japanese' AND set_translations.language = 'Korean'",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language != 'Japanese' AND set_translations.language = 'Korean'",
          "SELECT DISTINCT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND set_translations.language != 'Japanese'",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND set_translations.language != 'Japanese'"
        ]
      ]
    },
    {
      "id": 530,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT cards.frameversion, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
          "SELECT DISTINCT cards.frameversion, cards.artist, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
          "SELECT DISTINCT cards.frameversion, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
          "SELECT DISTINCT cards.frameversion, cards.artist, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'"
        ]
      ]
    },
    {
      "id": 531,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY reputation DESC LIMIT 1",
          "SELECT CASE WHEN reputation = ( SELECT max(reputation) FROM users ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname = 'Harlan' OR displayname = 'Jarrod Dixon'",
          "SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Jarrod Dixon' ) THEN 'Jarrod Dixon' ELSE 'Harlan' END FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon')",
          "SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Harlan' ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon')"
        ]
      ]
    },
    {
      "id": 532,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE strftime('%Y', creationdate) = '2014'",
          "SELECT DISTINCT displayname FROM users WHERE strftime('%Y', creationdate) = '2014'",
          "SELECT displayname FROM users WHERE substr(cast(creationdate AS TEXT), 1, 4) = '2014'",
          "SELECT displayname FROM users WHERE substr(cast(creationdate AS TEXT), -4) = '2014'"
        ]
      ]
    },
    {
      "id": 533,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01 00:00:00'",
          "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01'",
          "SELECT count(id) FROM users WHERE lastaccessdate LIKE '2014-09-01%'",
          "SELECT count(id) FROM users WHERE lastaccessdate >= '2014-09-01 00:00:00'"
        ]
      ]
    },
    {
      "id": 534,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users ORDER BY views DESC LIMIT 1",
          "SELECT displayname FROM users WHERE views = ( SELECT max(views) FROM users )",
          "SELECT DISTINCT displayname FROM users ORDER BY views DESC LIMIT 1",
          "SELECT displayname FROM users WHERE id = ( SELECT userid FROM users ORDER BY views DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 535,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1",
          "SELECT count(users.accountid) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1",
          "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 1 AND users.upvotes > 100 AND users.downvotes > 1"
        ]
      ]
    },
    {
      "id": 536,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE strftime('%Y', creationdate) > '2013' AND views > 10",
          "SELECT count(id) FROM users WHERE substr(cast(creationdate AS TEXT), 1, 4) > '2013' AND views > 10",
          "SELECT count(id) FROM users WHERE substr(cast(creationdate AS TEXT), -4) > '2013' AND views > 10",
          "SELECT count(id) FROM users WHERE strftime('%Y', creationdate) > 2013 AND views > 10"
        ]
      ]
    },
    {
      "id": 537,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
          "SELECT count(posts.owneruserid) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 538,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
          "SELECT DISTINCT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT DISTINCT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 539,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT ownerdisplayname FROM posts WHERE title = 'Eliciting priors from experts'",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts'",
          "SELECT ownerdisplayname FROM posts WHERE title LIKE 'Eliciting priors from experts'",
          "SELECT DISTINCT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts'"
        ]
      ]
    },
    {
      "id": 540,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY viewcount DESC LIMIT 1",
          "SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.ownerdisplayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 541,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT ownerdisplayname FROM posts ORDER BY favoritecount DESC LIMIT 1",
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1",
          "SELECT posts.ownerdisplayname FROM posts ORDER BY posts.favoritecount DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY posts.favoritecount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 542,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT sum(posts.commentcount) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
          "SELECT sum(comments.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'csgillespie'",
          "SELECT sum(commentcount) FROM posts WHERE ownerdisplayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 543,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT answercount FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY answercount DESC LIMIT 1",
          "SELECT posts.answercount FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' ORDER BY posts.answercount DESC LIMIT 1",
          "SELECT posts.answercount FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.answercount DESC LIMIT 1",
          "SELECT posts.answercount FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' ORDER BY answercount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 544,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT lasteditordisplayname FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'",
          "SELECT lasteditordisplayname FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'",
          "SELECT lasteditoruserid FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'",
          "SELECT lasteditordisplayname FROM posts WHERE title LIKE 'Examples for teaching: Correlation does not mean causation'"
        ]
      ]
    },
    {
      "id": 545,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' AND posts.parentid IS NULL",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' AND posts.parentid IS NULL",
          "SELECT count(id) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) AND parentid IS NULL",
          "SELECT count(id) FROM posts WHERE ownerdisplayname = 'csgillespie' AND parentid IS NULL"
        ]
      ]
    },
    {
      "id": 546,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT ownerdisplayname FROM posts WHERE closeddate IS NOT NULL",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.closeddate IS NOT NULL",
          "SELECT DISTINCT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL",
          "SELECT DISTINCT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL"
        ]
      ]
    },
    {
      "id": 547,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20",
          "SELECT count(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20"
        ]
      ]
    },
    {
      "id": 548,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts'",
          "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts'",
          "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title LIKE 'Eliciting priors from experts'",
          "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title LIKE 'Eliciting priors from experts'"
        ]
      ]
    },
    {
      "id": 549,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'bayesian'",
          "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'bayesian'",
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian'",
          "SELECT posts.title, posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'bayesian'"
        ]
      ]
    },
    {
      "id": 550,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.title, posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = ( SELECT tagname FROM tags ORDER BY count DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 551,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
          "SELECT count(badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
          "SELECT count(DISTINCT badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
          "SELECT count(id) FROM badges WHERE userid IN ( SELECT id FROM users WHERE displayname = 'csgillespie' )"
        ]
      ]
    },
    {
      "id": 552,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie'",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
          "SELECT DISTINCT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 553,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011'",
          "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011'",
          "SELECT count(DISTINCT badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011'",
          "SELECT count(DISTINCT badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2011' AND users.displayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 554,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.id) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 555,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
          "SELECT avg(score) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
          "SELECT cast(sum(posts.score) AS REAL) / count(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 556,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.displayname) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200",
          "SELECT cast(count(badges.id) AS REAL) / count(users.displayname) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200",
          "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.displayname) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.views > 200",
          "SELECT cast(count(badges.name) AS REAL) / count(DISTINCT users.displayname) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200"
        ]
      ]
    },
    {
      "id": 557,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 20",
          "SELECT cast(count(CASE WHEN users.age > 65 THEN 1 ELSE NULL END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 20",
          "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 20",
          "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.score > 20"
        ]
      ]
    },
    {
      "id": 558,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM votes WHERE creationdate = '2010-07-19' AND userid = 58",
          "SELECT count(id) FROM votes WHERE creationdate LIKE '2010-07-19' AND userid = 58",
          "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19'",
          "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate LIKE '2010-07-19%'"
        ]
      ]
    },
    {
      "id": 559,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1",
          "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(creationdate) DESC LIMIT 1",
          "SELECT votes.creationdate FROM votes INNER JOIN posts ON votes.postid = posts.id GROUP BY votes.creationdate ORDER BY count(votes.id) DESC LIMIT 1",
          "SELECT max(creationdate) FROM votes"
        ]
      ]
    },
    {
      "id": 560,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM badges WHERE name = 'Revival'",
          "SELECT count(name) FROM badges WHERE name = 'Revival'",
          "SELECT count(userid) FROM badges WHERE name = 'Revival'",
          "SELECT count(*) FROM badges WHERE name = 'Revival'"
        ]
      ]
    },
    {
      "id": 561,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM comments INNER JOIN posts ON comments.postid = posts.id ORDER BY comments.score DESC LIMIT 1",
          "SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid ORDER BY comments.score DESC LIMIT 1",
          "SELECT posts.title FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = ( SELECT max(score) FROM comments )",
          "SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = ( SELECT max(score) FROM comments )"
        ]
      ]
    },
    {
      "id": 562,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT commentcount FROM posts WHERE viewcount = 1910",
          "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910",
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount = 1910",
          "SELECT comments.commentcount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910"
        ]
      ]
    },
    {
      "id": 563,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.favoritecount FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.creationdate = '2014-04-23 20:29:39' AND posthistory.userid = 3025",
          "SELECT posts.favoritecount FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.userid = 3025 AND posthistory.creationdate = '2014-04-23 20:29:39'",
          "SELECT posts.favoritecount FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.creationdate = '2014-04-23 20:29:39' AND posts.owneruserid = 3025",
          "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 3025 AND comments.creationdate = '2014-04-23 20:29:39'"
        ]
      ]
    },
    {
      "id": 564,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comment FROM posts WHERE parentid = 107829 AND commentcount = 1",
          "SELECT comment FROM posts WHERE id = 107829 AND commentcount = 1",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 AND posts.commentcount = 1",
          "SELECT DISTINCT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 AND posts.commentcount = 1"
        ]
      ]
    },
    {
      "id": 565,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT CASE WHEN posts.closeddate IS NULL THEN 'YES' ELSE 'NO' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 23853 AND comments.creationdate = '2013-07-12 09:08:18.0'",
          "SELECT CASE WHEN posts.closeddate IS NULL THEN 'yes' ELSE 'no' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 23853 AND comments.creationdate = '2013-07-12 09:08:18.0'",
          "SELECT CASE WHEN posts.closeddate IS NULL THEN 'YES' ELSE 'NO' END FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.userid = 23853 AND posthistory.creationdate = '2013-07-12 09:08:18.0'",
          "SELECT CASE WHEN posts.closeddate IS NULL THEN 'yes' ELSE 'no' END FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.userid = 23853 AND posthistory.creationdate = '2013-07-12 09:08:18.0'"
        ]
      ]
    },
    {
      "id": 566,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 65041",
          "SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 65041",
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = '65041'",
          "SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = '65041'"
        ]
      ]
    },
    {
      "id": 567,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini'",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Tiago Pasqualini'",
          "SELECT count(posts.owneruserid) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini'",
          "SELECT count(posts.owneruserid) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Tiago Pasqualini'"
        ]
      ]
    },
    {
      "id": 568,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = 6347",
          "SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = 6347",
          "SELECT posthistory.userdisplayname FROM posthistory INNER JOIN votes ON posthistory.postid = votes.postid WHERE votes.id = 6347",
          "SELECT posthistory.userdisplayname FROM votes INNER JOIN posthistory ON votes.postid = posthistory.postid WHERE votes.id = 6347"
        ]
      ]
    },
    {
      "id": 569,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT votes.postid FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%'",
          "SELECT votes.postid FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data visualization%'",
          "SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%'",
          "SELECT votes.id FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%'"
        ]
      ]
    },
    {
      "id": 570,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms'",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'datepicCoderGuyWhoPrograms'",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatepicCoderGuyWhoPrograms'",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms'"
        ]
      ]
    },
    {
      "id": 571,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(posts.id) AS REAL) / count(votes.postid) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 24",
          "SELECT cast(count(posts.id) AS REAL) / count(votes.postid) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.owneruserid = 24",
          "SELECT cast(count(posts.id) AS REAL) / count(votes.id) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.owneruserid = 24",
          "SELECT cast(count(posts.id) AS REAL) / count(DISTINCT votes.postid) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.owneruserid = 24"
        ]
      ]
    },
    {
      "id": 572,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
          "SELECT viewcount FROM posts WHERE title LIKE 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
          "SELECT posts.viewcount FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
          "SELECT sum(viewcount) FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'"
        ]
      ]
    },
    {
      "id": 573,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE score = 17",
          "SELECT DISTINCT text FROM comments WHERE score = 17",
          "SELECT TEXT FROM comments WHERE score = 17",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 17"
        ]
      ]
    },
    {
      "id": 574,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com'",
          "SELECT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com/'",
          "SELECT DISTINCT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com'",
          "SELECT displayname FROM users WHERE websiteurl LIKE 'http://stackoverflow.com'"
        ]
      ]
    },
    {
      "id": 575,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost'",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'",
          "SELECT badges.name FROM badges INNER JOIN users ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'"
        ]
      ]
    },
    {
      "id": 576,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'thank you user93!'",
          "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'thank you user93!'",
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'thank you user93!'",
          "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'thank you user93!'"
        ]
      ]
    },
    {
      "id": 577,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'A Lion'",
          "SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'A Lion'",
          "SELECT comments.text FROM comments INNER JOIN users ON users.id = comments.userid WHERE users.displayname = 'A Lion'",
          "SELECT DISTINCT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'A Lion'"
        ]
      ]
    },
    {
      "id": 578,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
          "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
          "SELECT posts.ownerdisplayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
          "SELECT posts.ownerdisplayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?'"
        ]
      ]
    },
    {
      "id": 579,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?'",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'How does gentle boosting differ from AdaBoost?'",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title LIKE 'How does gentle boosting differ from AdaBoost?'",
          "SELECT DISTINCT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?'"
        ]
      ]
    },
    {
      "id": 580,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer'",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10"
        ]
      ]
    },
    {
      "id": 581,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?'",
          "SELECT posts.owneruserid FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?'",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?'",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data'"
        ]
      ]
    },
    {
      "id": 582,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Vebjorn Ljosa'",
          "SELECT DISTINCT posts.title FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Vebjorn Ljosa'",
          "SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE users.displayname = 'Vebjorn Ljosa'",
          "SELECT DISTINCT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE users.displayname = 'Vebjorn Ljosa'"
        ]
      ]
    },
    {
      "id": 583,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.score), users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'",
          "SELECT sum(posts.score), users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny' GROUP BY users.websiteurl",
          "SELECT sum(posts.score), users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN posthistory ON posts.id = posthistory.postid WHERE users.displayname = 'Yevgeny'",
          "SELECT sum(posts.score), users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.displayname = 'Yevgeny'"
        ]
      ]
    },
    {
      "id": 584,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.comment FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
          "SELECT posthistory.comment FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
          "SELECT posthistory.comment FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment LIKE '%Why square the difference instead of taking the absolute value in standard deviation?'",
          "SELECT posthistory.comment FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment LIKE '%Why square the difference instead of taking the absolute value in standard deviation?%'"
        ]
      ]
    },
    {
      "id": 585,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(votes.bountyamount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%'",
          "SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%'",
          "SELECT sum(votes.bountyamount) FROM posts INNER JOIN votes ON votes.postid = posts.id WHERE posts.title LIKE '%data%'",
          "SELECT sum(votes.bountyamount) FROM posthistory INNER JOIN votes ON posthistory.postid = votes.postid WHERE posthistory.comment LIKE '%data%'"
        ]
      ]
    },
    {
      "id": 586,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.userdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment = 'variance' AND posthistory.bountyamount = 50",
          "SELECT posthistory.userdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment LIKE '%variance%' AND posthistory.bountyamount = 50",
          "SELECT posthistory.userdisplayname FROM votes INNER JOIN posthistory ON votes.postid = posthistory.postid WHERE posthistory.comment LIKE '%variance%' AND votes.bountyamount = 50",
          "SELECT posthistory.userdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment LIKE '%variance%' AND posthistory.comment LIKE '%added%' AND posthistory.bountyamount = 50"
        ]
      ]
    },
    {
      "id": 587,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(posts.viewcount), posts.title, comments.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN comments ON posts.id = comments.postid WHERE tags.tagname = 'humor'",
          "SELECT avg(posts.viewcount), posts.title, comments.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN tags ON tags.wikipostid = posts.id INNER JOIN comments ON comments.postid = posts.id WHERE tags.tagname = 'humor'",
          "SELECT avg(posts.viewcount), posts.title, comments.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN comments ON posthistory.postid = comments.postid INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'humor'",
          "SELECT avg(posts.viewcount), posts.title, comments.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN comments ON posthistory.postid = comments.postid INNER JOIN tags ON posts.id = tags.wikipostid WHERE tags.tagname = 'humor'"
        ]
      ]
    },
    {
      "id": 588,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM comments WHERE userid = 13",
          "SELECT count(*) FROM comments WHERE userid = 13",
          "SELECT count(DISTINCT id) FROM comments WHERE userid = 13",
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.owneruserid = 13"
        ]
      ]
    },
    {
      "id": 589,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id FROM users ORDER BY reputation DESC LIMIT 1",
          "SELECT id FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
          "SELECT id FROM users ORDER BY reputation DESC LIMIT 1;",
          "SELECT max(reputation) FROM users"
        ]
      ]
    },
    {
      "id": 590,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id FROM users ORDER BY views ASC LIMIT 1",
          "SELECT id FROM users ORDER BY views LIMIT 1",
          "SELECT id FROM users WHERE views = ( SELECT min(views) FROM users )",
          "SELECT id FROM users ORDER BY viewcount ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 591,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(userid) FROM badges WHERE strftime('%Y', `date`) = '2011' AND name = 'Supporter'",
          "SELECT count(userid) FROM badges WHERE strftime('%Y', date) = '2011' AND name = 'Supporter'",
          "SELECT count(DISTINCT badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter'",
          "SELECT count(userid) FROM badges WHERE name = 'Supporter' AND strftime('%Y', date) = '2011'"
        ]
      ]
    },
    {
      "id": 592,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(userid) FROM badges GROUP BY userid HAVING count(name) > 5",
          "SELECT count(DISTINCT userid) FROM badges GROUP BY userid HAVING count(name) > 5",
          "SELECT count(DISTINCT badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY badges.userid HAVING count(badges.name) > 5",
          "SELECT count(DISTINCT badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY badges.userid HAVING count(name) > 5"
        ]
      ]
    },
    {
      "id": 593,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name IN ('Teacher', 'Supporter')",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name IN ('Supporter', 'Teacher')",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name = 'Teacher' OR badges.name = 'Supporter'",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name IN ('Teacher', 'Supporter')"
        ]
      ]
    },
    {
      "id": 594,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
          "SELECT users.accountid, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
          "SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 1"
        ]
      ]
    },
    {
      "id": 595,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.views >= 1000 GROUP BY users.id HAVING count(posthistory.postid) = 1",
          "SELECT users.displayname FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.postid IN ( SELECT postid FROM posthistory GROUP BY postid HAVING count(postid) = 1 ) AND users.views >= 1000",
          "SELECT users.displayname FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.views >= 1000 GROUP BY users.id HAVING count(posthistory.postid) = 1",
          "SELECT users.displayname FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.postid IN ( SELECT postid FROM posthistory GROUP BY postid HAVING count(postid) > 1 ) AND users.views >= 1000"
        ]
      ]
    },
    {
      "id": 596,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.userid, badges.name FROM posts INNER JOIN badges ON posts.owneruserid = badges.userid GROUP BY badges.userid ORDER BY count(posts.id) DESC LIMIT 1",
          "SELECT badges.userid, badges.name FROM posts INNER JOIN badges ON posts.owneruserid = badges.userid GROUP BY badges.userid, badges.name ORDER BY count(posts.id) DESC LIMIT 1",
          "SELECT badges.userid, badges.name FROM badges INNER JOIN posts ON badges.userid = posts.owneruserid GROUP BY badges.userid ORDER BY count(posts.id) DESC LIMIT 1",
          "SELECT badges.userid, badges.name FROM badges INNER JOIN posts ON badges.userid = posts.owneruserid GROUP BY badges.userid, badges.name ORDER BY count(posts.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 597,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' AND users.location = 'India'",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher'",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' AND users.location = 'India'",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher'"
        ]
      ]
    },
    {
      "id": 598,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN name = 'Student' THEN 1 ELSE 0 END) AS REAL) * 100 / count(name) FROM badges WHERE strftime('%Y', date) IN (2010, 2011)",
          "SELECT cast(sum(CASE WHEN name = 'Student' THEN 1 ELSE 0 END) AS REAL) * 100 / count(name) FROM badges WHERE strftime('%Y', `date`) IN (2010, 2011)",
          "SELECT cast(sum(CASE WHEN strftime('%Y', badges.date) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) - cast(sum(CASE WHEN strftime('%Y', badges.date) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) FROM badges",
          "SELECT cast(sum(CASE WHEN strftime('%Y', badges.date) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) - cast(sum(CASE WHEN strftime('%Y', badges.date) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) FROM badges WHERE name = 'Student'"
        ]
      ]
    },
    {
      "id": 599,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT DISTINCT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720",
          "SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid",
          "SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720",
          "SELECT count(DISTINCT posthistory.userid), posthistory.posthistorytypeid FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid"
        ]
      ]
    },
    {
      "id": 600,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT relatedpostid, viewcount FROM posts WHERE id = 61217",
          "SELECT posts.title, posts.viewcount FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.relatedpostid = 61217",
          "SELECT posts.title, posts.viewcount FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id WHERE postlinks.relatedpostid = 61217",
          "SELECT posts.title, posts.viewcount FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE postlinks.postid = 61217"
        ]
      ]
    },
    {
      "id": 601,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT score, linktypeid FROM postlinks WHERE postid = 395",
          "SELECT posts.score, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.postid = 395",
          "SELECT posts.score, postlinks.linktypeid FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id WHERE postlinks.postid = 395",
          "SELECT posts.score, postlinks.linktypeid FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE postlinks.postid = 395"
        ]
      ]
    },
    {
      "id": 602,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, owneruserid FROM posts WHERE score > 60",
          "SELECT postid, owneruserid FROM posts WHERE score > 60",
          "SELECT id, score, owneruserid FROM posts WHERE score > 60",
          "SELECT id, owneruserid FROM posts WHERE score > 60 GROUP BY owneruserid"
        ]
      ]
    },
    {
      "id": 603,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.favoritecount) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE strftime('%Y', posthistory.creationdate) = '2011' AND posthistory.userid = 686",
          "SELECT sum(posts.favoritecount) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.creationdate LIKE '2011%' AND posthistory.userid = 686",
          "SELECT sum(posts.favoritecount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.id = 686 AND strftime('%Y', posts.creaiondate) = '2011'",
          "SELECT sum(posts.favoritecount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE votes.userid = 686 AND strftime('%Y', votes.creationdate) = '2011'"
        ]
      ]
    },
    {
      "id": 604,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(users.upvotes), avg(users.age) FROM users INNER JOIN votes ON users.id = votes.userid GROUP BY users.id HAVING count(users.id) > 10",
          "SELECT cast(sum(users.upvotes) AS REAL) / count(users.id), avg(users.age) FROM users INNER JOIN votes ON users.id = votes.userid GROUP BY users.id HAVING count(users.id) > 10",
          "SELECT cast(sum(users.upvotes) AS REAL) / count(DISTINCT users.id), avg(users.age) FROM users INNER JOIN votes ON users.id = votes.userid GROUP BY users.id HAVING count(users.id) > 10",
          "SELECT cast(sum(users.upvotes) AS REAL) / count(DISTINCT users.id), avg(users.age) FROM users INNER JOIN votes ON users.id = votes.userid GROUP BY users.id HAVING count(DISTINCT users.id) > 10"
        ]
      ]
    },
    {
      "id": 605,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(userid) FROM badges WHERE name = 'Announcer'",
          "SELECT count(DISTINCT userid) FROM badges WHERE name = 'Announcer'",
          "SELECT count(DISTINCT badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer'",
          "SELECT count(badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer'"
        ]
      ]
    },
    {
      "id": 606,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08'",
          "SELECT name FROM badges WHERE `date` = '2010-07-19 19:39:08'",
          "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0'",
          "SELECT name FROM badges WHERE `date` = '2010-07-19 19:39:08.0'"
        ]
      ]
    },
    {
      "id": 607,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM comments WHERE score > 60",
          "SELECT count(score) FROM comments WHERE score > 60",
          "SELECT count(*) FROM comments WHERE score > 60",
          "SELECT count(postid) FROM comments WHERE score > 60"
        ]
      ]
    },
    {
      "id": 608,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47.0'",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47'",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14.0'",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14'"
        ]
      ]
    },
    {
      "id": 609,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE score = 10",
          "SELECT count(*) FROM posts WHERE score = 10",
          "SELECT count(postid) FROM posts WHERE score = 10",
          "SELECT count(score) FROM posts WHERE score = 10"
        ]
      ]
    },
    {
      "id": 610,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation DESC LIMIT 1",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 611,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'",
          "SELECT users.reputation FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0'",
          "SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08'",
          "SELECT users.reputation FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.`date` = '2010-07-19 19:39:08.0'"
        ]
      ]
    },
    {
      "id": 612,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Pierre'",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre'",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Pierre'",
          "SELECT badges.name FROM badges INNER JOIN users ON users.id = badges.userid WHERE users.displayname = 'Pierre'"
        ]
      ]
    },
    {
      "id": 613,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY'",
          "SELECT DISTINCT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY'",
          "SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY'",
          "SELECT DISTINCT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY'"
        ]
      ]
    },
    {
      "id": 614,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN badges.name = 'Teacher' THEN users.id ELSE NULL END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid",
          "SELECT cast(sum(CASE WHEN badges.name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid",
          "SELECT cast(count(CASE WHEN badges.name = 'Teacher' THEN badges.userid ELSE NULL END) AS REAL) * 100 / count(badges.userid) FROM badges",
          "SELECT cast(count(CASE WHEN badges.name = 'Teacher' THEN users.id ELSE NULL END) AS REAL) * 100 / count(users.id) FROM badges INNER JOIN users ON badges.userid = users.id"
        ]
      ]
    },
    {
      "id": 615,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN users.age >= 13 AND users.age <= 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT cast(sum(CASE WHEN users.age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT cast(count(CASE WHEN users.age >= 13 AND users.age <= 18 THEN users.id ELSE NULL END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT cast(count(CASE WHEN users.age >= 13 AND users.age <= 18 THEN 1 ELSE NULL END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'"
        ]
      ]
    },
    {
      "id": 616,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT score FROM posts WHERE creationdate = '2010-07-19 19:19:56.0'",
          "SELECT score FROM posts WHERE creationdate = '2010-07-19 19:19:56'",
          "SELECT score FROM posts WHERE creaiondate = '2010-07-19 19:19:56.0'",
          "SELECT score FROM posts WHERE creaiondate = '2010-07-19 19:19:56'"
        ]
      ]
    },
    {
      "id": 617,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:37:33'",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:37:33.0'",
          "SELECT text FROM comments WHERE creationdate LIKE '2010-07-19 19:37:33%'",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:37:33'"
        ]
      ]
    },
    {
      "id": 618,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria'",
          "SELECT DISTINCT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria'",
          "SELECT users.age FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Vienna, Austria'",
          "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria' GROUP BY users.age"
        ]
      ]
    },
    {
      "id": 619,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65",
          "SELECT count(badges.userid) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65"
        ]
      ]
    },
    {
      "id": 620,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'",
          "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0'",
          "SELECT users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08'",
          "SELECT sum(users.views) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'"
        ]
      ]
    },
    {
      "id": 621,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT min(reputation) FROM users )",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation LIMIT 1",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation ASC LIMIT 1",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation LIMIT 1"
        ]
      ]
    },
    {
      "id": 622,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie'",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Sharpie'",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie'",
          "SELECT badges.name FROM badges INNER JOIN users ON users.id = badges.userid WHERE users.displayname = 'Sharpie'"
        ]
      ]
    },
    {
      "id": 623,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65",
          "SELECT count(badges.userid) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter'"
        ]
      ]
    },
    {
      "id": 624,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE id = 30",
          "SELECT name FROM users WHERE id = 30",
          "SELECT DISTINCT displayname FROM users WHERE id = 30",
          "SELECT displayname FROM users WHERE id = '30'"
        ]
      ]
    },
    {
      "id": 625,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE LOCATION = 'New York'",
          "SELECT count(id) FROM users WHERE location = 'New York'",
          "SELECT count(*) FROM users WHERE LOCATION = 'New York'",
          "SELECT count(id) FROM users WHERE LOCATION LIKE 'New York'"
        ]
      ]
    },
    {
      "id": 626,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM votes WHERE strftime('%Y', creationdate) = '2010'",
          "SELECT count(*) FROM votes WHERE strftime('%Y', creationdate) = '2010'",
          "SELECT count(id) FROM votes WHERE cast(strftime('%Y', creationdate) AS INT) = 2010",
          "SELECT count(id) FROM votes WHERE cast(substr(creationdate, 1, 4) AS int) = 2010"
        ]
      ]
    },
    {
      "id": 627,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65",
          "SELECT count(id) FROM users WHERE age >= 19 AND age <= 65",
          "SELECT count(id) FROM users WHERE age >= 19 AND age < 66",
          "SELECT count(id) FROM users WHERE age > 19 AND age < 66"
        ]
      ]
    },
    {
      "id": 628,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users ORDER BY views DESC LIMIT 1",
          "SELECT displayname FROM users WHERE views = ( SELECT max(views) FROM users )",
          "SELECT DISTINCT displayname FROM users ORDER BY views DESC LIMIT 1",
          "SELECT id, displayname FROM users ORDER BY views DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 629,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes",
          "SELECT cast(sum(CASE WHEN strftime('%Y', votes.creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', votes.creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes",
          "SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN strftime('%Y', creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes",
          "SELECT cast(sum(CASE WHEN substr(votes.creationdate, 1, 4) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN substr(votes.creationdate, 1, 4) = '2011' THEN 1 ELSE 0 END) FROM votes"
        ]
      ]
    },
    {
      "id": 630,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT tags.tagname FROM posts INNER JOIN tags ON posts.id = tags.wikipostid WHERE posts.ownerdisplayname = 'John Stauffer'",
          "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE posts.ownerdisplayname = 'John Stauffer'",
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE users.displayname = 'John Stauffer'",
          "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'John Stauffer'"
        ]
      ]
    },
    {
      "id": 631,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Daniel Vassallo'",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Daniel Vassallo'",
          "SELECT count(id) FROM posts WHERE ownerdisplayname = 'Daniel Vassallo'",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Daniel Vassallo'"
        ]
      ]
    },
    {
      "id": 632,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(votes.bountyamount) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'Harlan'",
          "SELECT sum(votes.bountyamount) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Harlan'",
          "SELECT votes.votetypeid FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'Harlan'",
          "SELECT count(votes.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'Harlan'"
        ]
      ]
    },
    {
      "id": 633,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.id FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1",
          "SELECT posts.id FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1",
          "SELECT posts.id FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'SlashNick' ORDER BY posts.answercount DESC LIMIT 1",
          "SELECT posts.id FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'SlashNick' ORDER BY posts.answercount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 634,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Harvey Motulsky' OR users.displayname = 'Noah Snyder' ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY posts.title ORDER BY sum(posts.viewcount) DESC LIMIT 1",
          "SELECT CASE WHEN sum(CASE WHEN users.displayname = 'Harvey Motulsky' THEN posts.viewcount ELSE 0 END) > sum(CASE WHEN users.displayname = 'Noah Snyder' THEN posts.viewcount ELSE 0 END) THEN 'Harvey Motulsky' ELSE 'Noah Snyder' END FROM users INNER JOIN posts ON users.id = posts.owneruserid"
        ]
      ]
    },
    {
      "id": 635,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON users.id = votes.userid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4",
          "SELECT count(posts.id) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.ownerdisplayname = 'Matt Parker' AND votes.postid > 4",
          "SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4",
          "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON users.id = votes.userid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4"
        ]
      ]
    },
    {
      "id": 636,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(comments.score) FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60",
          "SELECT count(comments.id) FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60",
          "SELECT count(comments.score) FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60",
          "SELECT count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60"
        ]
      ]
    },
    {
      "id": 637,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0",
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON tags.wikipostid = posts.id WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0",
          "SELECT DISTINCT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0",
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON tags.wikipostid = posts.id WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0 GROUP BY tags.tagname"
        ]
      ]
    },
    {
      "id": 638,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer'",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT DISTINCT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer'"
        ]
      ]
    },
    {
      "id": 639,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN tags LIKE '%r%' THEN 1 ELSE 0 END) AS REAL) * 100 / count(tags) FROM posts INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community'",
          "SELECT cast(sum(CASE WHEN tags LIKE '%R%' THEN 1 ELSE 0 END) AS REAL) * 100 / count(tags) FROM posts INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community'",
          "SELECT cast(sum(CASE WHEN tags LIKE '%r%' THEN 1 ELSE 0 END) AS REAL) * 100 / count(tags) FROM posts INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN users ON users.id = posts.owneruserid WHERE users.displayname = 'Community'",
          "SELECT cast(sum(CASE WHEN tags LIKE '%r%' THEN 1 ELSE 0 END) AS REAL) * 100 / count(tags) FROM posts INNER JOIN tags ON tags.wikipostid = posts.id INNER JOIN users ON users.id = posts.owneruserid WHERE users.displayname = 'Community'"
        ]
      ]
    },
    {
      "id": 640,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) FROM users INNER JOIN posts ON users.id = posts.owneruserid",
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) FROM posts INNER JOIN users ON posts.owneruserid = users.id",
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS diff FROM users INNER JOIN posts ON users.id = posts.owneruserid",
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS difference FROM users INNER JOIN posts ON users.id = posts.owneruserid"
        ]
      ]
    },
    {
      "id": 641,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(userid) FROM badges WHERE strftime('%Y', date) = '2014' AND name = 'Commentator'",
          "SELECT count(DISTINCT userid) FROM badges WHERE strftime('%Y', date) = '2014' AND name = 'Commentator'",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2014' AND badges.name = 'Commentator'",
          "SELECT count(DISTINCT badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE strftime('%Y', badges.date) = '2014' AND badges.name = 'Commentator'"
        ]
      ]
    },
    {
      "id": 642,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE strftime('%Y-%m-%d', creationdate) = '2010-07-21'",
          "SELECT count(id) FROM posts WHERE creationdate LIKE '2010-07-21%'",
          "SELECT count(id) FROM posts WHERE strftime('%Y-%m-%d', creaiondate) = '2010-07-21'",
          "SELECT count(id) FROM posts WHERE cast(creaiondate AS date) = '2010-07-21'"
        ]
      ]
    },
    {
      "id": 643,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname, age FROM users ORDER BY views DESC LIMIT 1",
          "SELECT displayname, age FROM users WHERE views = ( SELECT max(views) FROM users )",
          "SELECT displayname, age FROM users WHERE id = ( SELECT id FROM users ORDER BY views DESC LIMIT 1 )",
          "SELECT users.displayname, users.age FROM users ORDER BY users.views DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 644,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images'",
          "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title LIKE 'Detecting a given face in a database of facial images'",
          "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images.'",
          "SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'Detecting a given face in a database of facial images'"
        ]
      ]
    },
    {
      "id": 645,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM comments WHERE userid = 13 AND score < 60",
          "SELECT count(id) FROM comments WHERE score < 60 AND userid = 13",
          "SELECT count(score) FROM comments WHERE userid = 13 AND score < 60",
          "SELECT count(id) FROM comments WHERE userid = 13 AND score < 0"
        ]
      ]
    },
    {
      "id": 646,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score > 60",
          "SELECT posts.title, users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON users.id = comments.userid WHERE posts.score > 60",
          "SELECT DISTINCT posts.title, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score > 60",
          "SELECT posts.title, users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON users.id = comments.userid WHERE comments.score > 60"
        ]
      ]
    },
    {
      "id": 647,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011'",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011'",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2011' AND users.location = 'North Pole'",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.`date`) = '2011'"
        ]
      ]
    },
    {
      "id": 648,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150",
          "SELECT users.displayname, users.websiteurl FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150",
          "SELECT DISTINCT users.displayname, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150",
          "SELECT DISTINCT users.displayname, users.websiteurl FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150"
        ]
      ]
    },
    {
      "id": 649,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.comment, posts.lasteditdate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?'",
          "SELECT count(posthistory.postid), posts.lasteditdate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?'",
          "SELECT posthistory.posthistorytypeid, posts.lasteditdate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?'",
          "SELECT posthistory.comment, posts.lasteditdate FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?'"
        ]
      ]
    },
    {
      "id": 650,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.lastaccessdate, users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outliers'",
          "SELECT users.lastaccessdate, users.location FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Outliers'",
          "SELECT users.lastaccessdate, users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outlier'",
          "SELECT users.lastaccessdate, users.location FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Outlier'"
        ]
      ]
    },
    {
      "id": 651,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.relatedpostid = ( SELECT id FROM posts WHERE title = 'How to tell if something happened in a data set which monitors a value over time' )",
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'How to tell if something happened in a data set which monitors a value over time'",
          "SELECT posts.title FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE posts.title = 'How to tell if something happened in a data set which monitors a value over time'",
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'How to tell if something happened in a data set which monitors a value over time.'"
        ]
      ]
    },
    {
      "id": 652,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.postid, badges.name FROM posthistory INNER JOIN badges ON posthistory.userid = badges.userid WHERE posthistory.userdisplayname = 'Samuel' AND strftime('%Y', posthistory.creationdate) = '2013'",
          "SELECT posthistory.postid, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.displayname = 'Samuel' AND strftime('%Y', badges.date) = '2013'",
          "SELECT posthistory.postid, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.userdisplayname = 'Samuel' AND strftime('%Y', badges.date) = '2013'",
          "SELECT posthistory.postid, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN posthistory ON users.id = posthistory.userid WHERE strftime('%Y', posthistory.creationdate) = '2013' AND posthistory.userdisplayname = 'Samuel'"
        ]
      ]
    },
    {
      "id": 653,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1",
          "SELECT ownerdisplayname FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts )",
          "SELECT posts.ownerdisplayname FROM posts ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.viewcount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 654,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing'",
          "SELECT users.displayname, users.location FROM users INNER JOIN tags ON users.id = tags.id WHERE tags.tagname = 'hypothesis-testing'",
          "SELECT users.displayname, users.location FROM posts INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing'",
          "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE tags.tagname = 'hypothesis-testing'"
        ]
      ]
    },
    {
      "id": 655,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?'",
          "SELECT DISTINCT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?'",
          "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title LIKE 'What are principal component scores?'",
          "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.relatedpostid = 173"
        ]
      ]
    },
    {
      "id": 656,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT ownerdisplayname FROM posts WHERE parentid IS NOT NULL ORDER BY score DESC LIMIT 1",
          "SELECT ownerdisplayname FROM posts WHERE id = ( SELECT parentid FROM posts ORDER BY score DESC LIMIT 1 )",
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL ORDER BY posts.score DESC LIMIT 1",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY posts.score DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 657,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.websiteurl FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1",
          "SELECT users.displayname, users.websiteurl FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1",
          "SELECT users.displayname, users.websiteurl FROM votes INNER JOIN users ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1",
          "SELECT DISTINCT users.displayname, users.websiteurl FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 658,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5",
          "SELECT title FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts ) LIMIT 5",
          "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 0, 5",
          "SELECT title FROM Posts ORDER BY viewcount DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 659,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM tags WHERE count BETWEEN 5000 AND 7000",
          "SELECT count(tagname) FROM tags WHERE count BETWEEN 5000 AND 7000",
          "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE posts.commentcount BETWEEN 5000 AND 7000",
          "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE posts.id BETWEEN 5000 AND 7000"
        ]
      ]
    },
    {
      "id": 660,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1",
          "SELECT owneruserid FROM posts WHERE favoritecount = ( SELECT max(favoritecount) FROM posts )",
          "SELECT DISTINCT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1",
          "SELECT owneruserid FROM posts ORDER BY FavoriteCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 661,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT age FROM users ORDER BY reputation DESC LIMIT 1",
          "SELECT age FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
          "SELECT max(age) FROM users",
          "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 662,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50",
          "SELECT count(votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE votes.creationdate LIKE '2011%' AND votes.bountyamount = 50",
          "SELECT count(DISTINCT votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50",
          "SELECT count(posts.id) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50"
        ]
      ]
    },
    {
      "id": 663,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id FROM users ORDER BY age LIMIT 1",
          "SELECT id FROM users ORDER BY age ASC LIMIT 1",
          "SELECT id FROM users WHERE age = ( SELECT min(age) FROM users )",
          "SELECT id FROM users WHERE age IS NOT NULL ORDER BY age LIMIT 1"
        ]
      ]
    },
    {
      "id": 664,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.score FROM tags INNER JOIN posts ON tags.wikipostid = posts.id ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.score FROM posts INNER JOIN tags ON posts.id = tags.wikipostid ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.score FROM tags INNER JOIN posts ON tags.id = posts.id ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.score FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 665,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(DISTINCT postlinks.postid) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE strftime('%Y', posts.creationdate) = '2010' AND posts.answercount <= 2",
          "SELECT cast(count(postlinks.postid) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE strftime('%Y', posts.creationdate) = '2010' AND posts.answercount <= 2",
          "SELECT cast(count(postlinks.id) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE strftime('%Y', posts.creationdate) = '2010' AND posts.answercount <= 2",
          "SELECT cast(sum(CASE WHEN strftime('%Y', posts.creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2"
        ]
      ]
    },
    {
      "id": 666,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT postid FROM votes WHERE userid = 1465 ORDER BY bountyamount DESC LIMIT 1",
          "SELECT posts.id FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE votes.userid = 1465 ORDER BY posts.favoritecount DESC LIMIT 1",
          "SELECT posts.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 ORDER BY posts.favoritecount DESC LIMIT 1",
          "SELECT postid FROM votes WHERE userid = 1465 ORDER BY votedate DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 667,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1",
          "SELECT posts.title FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id ORDER BY postlinks.creationdate ASC LIMIT 1",
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate LIMIT 1",
          "SELECT DISTINCT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 668,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.name) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 669,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT votes.creationdate FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl' ORDER BY votes.creationdate ASC LIMIT 1",
          "SELECT votes.creationdate FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl' ORDER BY votes.creationdate ASC LIMIT 1",
          "SELECT votes.creationdate FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl' ORDER BY votes.creationdate LIMIT 1",
          "SELECT votes.creationdate FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl' ORDER BY votes.creationdate LIMIT 1"
        ]
      ]
    },
    {
      "id": 670,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT creaiondate FROM users ORDER BY age LIMIT 1",
          "SELECT creationdate FROM users ORDER BY age LIMIT 1",
          "SELECT min(creationdate) FROM users ORDER BY age LIMIT 1",
          "SELECT creaiondate FROM users ORDER BY age ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 671,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1"
        ]
      ]
    },
    {
      "id": 672,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4",
          "SELECT count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN postlinks ON posts.id = postlinks.postid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN postlinks ON posts.id = postlinks.postid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4"
        ]
      ]
    },
    {
      "id": 673,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(votes.postid) FROM votes INNER JOIN users ON votes.userid = users.id ORDER BY users.age DESC LIMIT 1",
          "SELECT avg(votes.postid) FROM users INNER JOIN votes ON users.id = votes.userid ORDER BY users.age DESC LIMIT 1",
          "SELECT avg(votes.postid) FROM votes INNER JOIN users ON votes.userid = users.id ORDER BY users.age LIMIT 1",
          "SELECT avg(votes.postid) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.age = ( SELECT max(age) FROM users )"
        ]
      ]
    },
    {
      "id": 674,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1",
          "SELECT displayname FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
          "SELECT DISTINCT displayname FROM users ORDER BY reputation DESC LIMIT 1",
          "SELECT displayname FROM users WHERE reputation = 101"
        ]
      ]
    },
    {
      "id": 675,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000",
          "SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000",
          "SELECT count(accountid) FROM users WHERE reputation > 2000 AND views > 1000",
          "SELECT count(users.id) FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.reputation > 2000 AND users.views > 1000"
        ]
      ]
    },
    {
      "id": 676,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE age BETWEEN 19 AND 65",
          "SELECT displayname FROM users WHERE age >= 19 AND age <= 65",
          "SELECT DISTINCT displayname FROM users WHERE age BETWEEN 19 AND 65",
          "SELECT displayname FROM users WHERE age >= 19 AND age < 66"
        ]
      ]
    },
    {
      "id": 677,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creationdate) = '2010'",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creaiondate) = '2010'",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creationdate) = '2010'",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creationdate) = '2010'"
        ]
      ]
    },
    {
      "id": 678,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1",
          "SELECT posts.id, posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT posts.id, posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT id, title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'Harvey Motulsky' ) ORDER BY viewcount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 679,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, title FROM posts ORDER BY score DESC LIMIT 1",
          "SELECT id, title FROM posts WHERE score = ( SELECT max(score) FROM posts )",
          "SELECT id, title FROM posts WHERE score = ( SELECT score FROM posts ORDER BY score DESC LIMIT 1 )",
          "SELECT id, title FROM posts WHERE score = ( SELECT max(score) FROM posts ) LIMIT 1"
        ]
      ]
    },
    {
      "id": 680,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'",
          "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner'",
          "SELECT cast(sum(posts.score) AS REAL) / count(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'",
          "SELECT cast(sum(posts.score) AS REAL) / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'"
        ]
      ]
    },
    {
      "id": 681,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creaiondate) = '2011' AND posts.viewcount > 20000",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creaiondate) = '2011' AND posts.viewcount > 20000",
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE strftime('%Y', posts.creaiondate) = '2011' AND posts.viewcount > 20000",
          "SELECT DISTINCT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE strftime('%Y', posts.creaiondate) = '2011' AND posts.viewcount > 20000"
        ]
      ]
    },
    {
      "id": 682,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creaiondate) = '2010' ORDER BY favoritecount DESC LIMIT 1",
          "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creationdate) = '2010' ORDER BY favoritecount DESC LIMIT 1",
          "SELECT id, ownerdisplayname FROM posts ORDER BY favoritecount DESC LIMIT 1",
          "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creaiondate) = '2010' AND favoritecount = ( SELECT max(favoritecount) FROM posts WHERE strftime('%Y', creaiondate) = '2010' )"
        ]
      ]
    },
    {
      "id": 683,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', users.creationdate) = '2011'",
          "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011'",
          "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011'",
          "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creaiondate) = '2011'"
        ]
      ]
    },
    {
      "id": 684,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM users",
          "SELECT cast(count(CASE WHEN age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100 / count(id) FROM users",
          "SELECT cast(sum(CASE WHEN age >= 13 AND age <= 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM users",
          "SELECT cast(count(CASE WHEN age >= 13 AND age <= 18 THEN 1 ELSE NULL END) AS REAL) * 100 / count(id) FROM users"
        ]
      ]
    },
    {
      "id": 685,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, posts.viewcount FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.text = 'Computer Game Datasets'",
          "SELECT posts.viewcount, users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.text = 'Computer Game Datasets'",
          "SELECT users.displayname, posts.viewcount FROM posts INNER JOIN users ON posts.owneruserid = users.id INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.text = 'Computer Game Datasets'",
          "SELECT users.displayname, posts.viewcount FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.text = 'Computer Game Datasets'"
        ]
      ]
    },
    {
      "id": 686,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
          "SELECT count(*) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
          "SELECT count(viewcount) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
          "SELECT count(viewcount) FROM posts GROUP BY viewcount HAVING count(viewcount) > ( SELECT avg(viewcount) FROM posts )"
        ]
      ]
    },
    {
      "id": 687,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.score = ( SELECT max(score) FROM posts )",
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id ORDER BY posts.score DESC LIMIT 1",
          "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid ORDER BY posts.score DESC LIMIT 1",
          "SELECT count(id) FROM comments WHERE postid = ( SELECT id FROM posts ORDER BY score DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 688,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE viewcount > 35000 AND commentcount = 0",
          "SELECT count(id) FROM posts WHERE commentcount = 0 AND viewcount > 35000",
          "SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0",
          "SELECT count(posts.id) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.viewcount > 35000 AND posts.commentcount = 0"
        ]
      ]
    },
    {
      "id": 689,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1",
          "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1",
          "SELECT users.displayname, users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1",
          "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183"
        ]
      ]
    },
    {
      "id": 690,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1",
          "SELECT name FROM badges WHERE userid IN ( SELECT id FROM users WHERE displayname = 'Emmett' ) ORDER BY date DESC LIMIT 1",
          "SELECT badges.name FROM badges INNER JOIN users ON users.id = badges.userid WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 691,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE age >= 19 AND age <= 65 AND upvotes > 5000",
          "SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000",
          "SELECT count(id) FROM users WHERE upvotes > 5000 AND age >= 19 AND age <= 65",
          "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.age >= 19 AND users.age <= 65 AND users.upvotes > 5000"
        ]
      ]
    },
    {
      "id": 692,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.date - users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
          "SELECT badges.date - users.creationdate AS days FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
          "SELECT badges.date, users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
          "SELECT badges.date - users.creationdate, users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'"
        ]
      ]
    },
    {
      "id": 693,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id), count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1",
          "SELECT count(posts.id), count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON users.id = comments.userid ORDER BY users.creationdate DESC LIMIT 1",
          "SELECT posts.commentcount, posts.id FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.creationdate DESC LIMIT 1",
          "SELECT count(DISTINCT posts.id), count(DISTINCT comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 694,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.text, posthistory.userdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Analysing wind data with R' ORDER BY posthistory.creationdate DESC LIMIT 1",
          "SELECT comments.text, posthistory.userdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN comments ON posthistory.postid = comments.postid WHERE posts.title = 'Analysing wind data with R' ORDER BY posthistory.creationdate DESC LIMIT 1",
          "SELECT comments.text, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 1",
          "SELECT comments.text, posthistory.userdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Analysing wind data with R' ORDER BY posthistory.creationdate DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 695,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Citizen Patrol'",
          "SELECT count(badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Citizen Patrol'",
          "SELECT count(userid) FROM badges WHERE name = 'Citizen Patrol'",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Citizen Patrol'"
        ]
      ]
    },
    {
      "id": 696,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(tags.wikipostid) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'",
          "SELECT count(id) FROM tags WHERE tagname = 'careers'",
          "SELECT count(*) FROM tags WHERE tagname = 'careers'",
          "SELECT count(tags.wikipostid) FROM tags WHERE tags.tagname = 'careers'"
        ]
      ]
    },
    {
      "id": 697,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon'",
          "SELECT users.reputation, users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Jarrod Dixon'",
          "SELECT users.reputation, users.views FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jarrod Dixon'",
          "SELECT users.reputation, users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' AND users.displayname = 'Jarrod Dixon'"
        ]
      ]
    },
    {
      "id": 698,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(comments.id), count(posts.acceptedanswerid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data'",
          "SELECT sum(comments.score), sum(posts.score) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data'",
          "SELECT sum(comments.score), sum(posts.answercount) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data'",
          "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data'"
        ]
      ]
    },
    {
      "id": 699,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT creationdate FROM users WHERE displayname = 'IrishStat'",
          "SELECT users.creationdate FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.userdisplayname = 'IrishStat'",
          "SELECT creationdate FROM users WHERE displayname = 'irishstat'",
          "SELECT users.creationdate FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.displayname = 'IrishStat'"
        ]
      ]
    },
    {
      "id": 700,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM votes WHERE bountyamount >= 30",
          "SELECT count(id) FROM votes WHERE bountyamount > 30",
          "SELECT count(postid) FROM votes WHERE bountyamount >= 30",
          "SELECT count(postid) FROM votes WHERE bountyamount > 30"
        ]
      ]
    },
    {
      "id": 701,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN posts.score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
          "SELECT cast(sum(CASE WHEN posts.score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
          "SELECT cast(sum(CASE WHEN posts.score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
          "SELECT cast(sum(CASE WHEN posts.score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.reputation DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 702,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE score < 20",
          "SELECT count(*) FROM posts WHERE score < 20",
          "SELECT count(score) FROM posts WHERE score < 20",
          "SELECT count(postid) FROM posts WHERE score < 20"
        ]
      ]
    },
    {
      "id": 703,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(tagname) FROM tags WHERE id < 15 AND count <= 20",
          "SELECT count(id) FROM tags WHERE id < 15 AND count <= 20",
          "SELECT count(tags.tagname) FROM tags INNER JOIN postlinks ON tags.id = postlinks.id WHERE postlinks.id < 15 AND tags.count <= 20",
          "SELECT count(tags.tagname) FROM tags INNER JOIN ( SELECT tagname, count(tagname) FROM tags GROUP BY tagname HAVING count(tagname) <= 20 ) AS t2 ON tags.tagname = t2.tagname"
        ]
      ]
    },
    {
      "id": 704,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT excerptpostid, wikipostid FROM tags WHERE tagname = 'sample'",
          "SELECT excerptpostid, wikipostid FROM tags WHERE tagname LIKE 'sample'",
          "SELECT DISTINCT excerptpostid, wikipostid FROM tags WHERE tagname = 'sample'",
          "SELECT id, wikipostid FROM tags WHERE tagname = 'sample'"
        ]
      ]
    },
    {
      "id": 705,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)'",
          "SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'fine, you win :)'",
          "SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'fine, you win :)'",
          "SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'fine, you win :)'"
        ]
      ]
    },
    {
      "id": 706,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'How can I adapt ANOVA for binary data?'",
          "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'How can I adapt ANOVA for binary data?'",
          "SELECT posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title LIKE 'How can I adapt ANOVA for binary data?'",
          "SELECT posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment = 'Linear Regression' AND posts.title = 'How can I adapt ANOVA for binary data?'"
        ]
      ]
    },
    {
      "id": 707,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount >= 100 AND posts.viewcount <= 150 ORDER BY comments.score DESC LIMIT 1",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount >= 100 AND posts.viewcount < 151 ORDER BY comments.score DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 708,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE 'http://%'",
          "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE '%http://%'",
          "SELECT comments.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE 'http://%'",
          "SELECT comments.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE '%http://%'"
        ]
      ]
    },
    {
      "id": 709,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = 0 AND posts.viewcount < 5",
          "SELECT count(posts.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5",
          "SELECT count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount < 5 AND comments.score = 0",
          "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = 0 AND posts.viewcount < 5"
        ]
      ]
    },
    {
      "id": 710,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0",
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0",
          "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0",
          "SELECT count(comments.postid) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0"
        ]
      ]
    },
    {
      "id": 711,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.accountid) FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.age = 40 AND comments.score = 0",
          "SELECT count(users.id) FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.age = 40 AND comments.score = 0",
          "SELECT count(users.age) FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score = 0 AND users.age = 40",
          "SELECT count(DISTINCT users.accountid) FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.age = 40 AND comments.score = 0"
        ]
      ]
    },
    {
      "id": 712,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.postid, count(posthistory.comment) FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Group differences on a five point Likert item'",
          "SELECT posthistory.postid, count(posthistory.comment) FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Group differences on a five point Likert item' GROUP BY posthistory.postid",
          "SELECT posthistory.postid, count(posthistory.comment) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Group differences on a five point Likert item'",
          "SELECT posthistory.postid, count(posthistory.comment) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Group differences on a five point Likert item' GROUP BY posthistory.postid"
        ]
      ]
    },
    {
      "id": 713,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'R is also lazy evaluated.'",
          "SELECT users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'R is also lazy evaluated.'",
          "SELECT votes.userid FROM comments INNER JOIN votes ON comments.id = votes.postid WHERE comments.text = 'R is also lazy evaluated.'",
          "SELECT votes.userid FROM votes INNER JOIN comments ON votes.postid = comments.postid WHERE comments.text = 'R is also lazy evaluated.'"
        ]
      ]
    },
    {
      "id": 714,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'Harvey Motulsky'",
          "SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'Harvey Motulsky'",
          "SELECT comments.text FROM comments INNER JOIN users ON users.id = comments.userid WHERE users.displayname = 'Harvey Motulsky'",
          "SELECT text FROM comments WHERE userdisplayname = 'Harvey Motulsky'"
        ]
      ]
    },
    {
      "id": 715,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0",
          "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0",
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.downvotes = 0 AND comments.score BETWEEN 1 AND 5"
        ]
      ]
    },
    {
      "id": 716,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 5 AND 10",
          "SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.upvotes) FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 5 AND 10",
          "SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN comments ON votes.postid = comments.postid WHERE comments.score BETWEEN 5 AND 10",
          "SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.upvotes) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN comments ON votes.postid = comments.postid WHERE comments.score BETWEEN 5 AND 10"
        ]
      ]
    },
    {
      "id": 717,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = '3-D Man'"
        ]
      ]
    },
    {
      "id": 718,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'",
          "SELECT count(hero_power.hero_id) FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Super Strength'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Super Strength'",
          "SELECT count(superhero.id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Super Strength'"
        ]
      ]
    },
    {
      "id": 719,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 200 AND superpower.power_name = 'Super Strength'",
          "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200",
          "SELECT count(hero_power.hero_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200"
        ]
      ]
    },
    {
      "id": 720,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING count(superhero.full_name) > 15",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING count(superhero.full_name) > 15",
          "SELECT superhero.full_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id GROUP BY superhero.full_name HAVING count(superhero.full_name) > 15",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING count(superhero.id) > 15"
        ]
      ]
    },
    {
      "id": 721,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'",
          "SELECT count(*) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'",
          "SELECT count(id) FROM superhero WHERE eye_colour_id = ( SELECT id FROM colour WHERE colour = 'Blue' )",
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.eye_colour_id = colour.id"
        ]
      ]
    },
    {
      "id": 722,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.skin_colour_id WHERE superhero.superhero_name = 'Apocalypse'",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero_name = 'Apocalypse'"
        ]
      ]
    },
    {
      "id": 723,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superpower.power_name = 'Agility'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue'"
        ]
      ]
    },
    {
      "id": 724,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue' AND colour.colour = 'Blond'",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond' AND superpower.power_name = 'Agility'",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility'",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue' AND colour.colour = 'Blond'"
        ]
      ]
    },
    {
      "id": 725,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 726,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1",
          "SELECT superhero.full_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1",
          "SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id ORDER BY superhero.height_cm DESC LIMIT 1",
          "SELECT superhero.full_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id ORDER BY superhero.height_cm DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 727,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Sauron'",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero_name = 'Sauron'",
          "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'"
        ]
      ]
    },
    {
      "id": 728,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue'",
          "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue' AND superhero.eye_colour_id = colour.id"
        ]
      ]
    },
    {
      "id": 729,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT avg(superhero.height_cm) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(superhero.height_cm) AS REAL) / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 730,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN superpower.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN superpower.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(count(CASE WHEN superpower.power_name = 'Super Strength' THEN superhero.id ELSE NULL END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN superpower.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / count(hero_power.hero_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 731,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics'",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
          "SELECT count(DISTINCT superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics'"
        ]
      ]
    },
    {
      "id": 732,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN publisher ON publisher.id = superhero.publisher_id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN publisher ON publisher.id = superhero.publisher_id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 733,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold'",
          "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 734,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Blue Beetle II'",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero_name = 'Blue Beetle II'",
          "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'"
        ]
      ]
    },
    {
      "id": 735,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond'",
          "SELECT count(*) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond'",
          "SELECT count(id) FROM superhero WHERE hair_colour_id = ( SELECT id FROM colour WHERE colour = 'Blond' )",
          "SELECT count(superhero.id) FROM colour INNER JOIN superhero ON colour.id = superhero.hair_colour_id WHERE colour.colour = 'Blond'"
        ]
      ]
    },
    {
      "id": 736,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
          "SELECT superhero.full_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 737,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat'",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.superhero_name = 'Copycat'",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero_name = 'Copycat'",
          "SELECT race.race FROM superhero INNER JOIN race ON race.id = superhero.race_id WHERE superhero.superhero_name = 'Copycat'"
        ]
      ]
    },
    {
      "id": 738,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50",
          "SELECT count(hero_attribute.hero_id) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50",
          "SELECT count(superhero.id) FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50"
        ]
      ]
    },
    {
      "id": 739,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'",
          "SELECT superhero.superhero_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Death Touch'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Death Touch'",
          "SELECT superhero.superhero_name FROM superhero_power INNER JOIN hero_power ON superhero_power.hero_id = hero_power.hero_id INNER JOIN superpower ON superhero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Death Touch'"
        ]
      ]
    },
    {
      "id": 740,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100 AND gender.gender = 'Female'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE attribute.attribute_name = 'Strength' AND attribute_value = 100 AND gender.gender = 'Female'",
          "SELECT count(hero_attribute.hero_id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100 AND gender.gender = 'Female'"
        ]
      ]
    },
    {
      "id": 741,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY count(superhero.superhero_name) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id GROUP BY superhero.superhero_name ORDER BY count(superhero.superhero_name) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY count(superhero_name) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY count(hero_power.hero_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 742,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
          "SELECT count(*) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
          "SELECT count(superhero.id) FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Vampire'",
          "SELECT count(id) FROM superhero WHERE race_id = ( SELECT id FROM race WHERE race = 'Vampire' )"
        ]
      ]
    },
    {
      "id": 743,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id), count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id), count(DISTINCT superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id), count(DISTINCT publisher.publisher_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 744,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id",
          "SELECT sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id",
          "SELECT sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS diff FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id",
          "SELECT sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS diff FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id"
        ]
      ]
    },
    {
      "id": 745,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
          "SELECT t.id FROM publisher AS t WHERE t.publisher_name = 'Star Trek'",
          "SELECT publisher_id FROM publisher WHERE publisher_name = 'Star Trek'",
          "SELECT t.id FROM publisher t WHERE t.publisher_name = 'Star Trek'"
        ]
      ]
    },
    {
      "id": 746,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(attribute_value) FROM hero_attribute",
          "SELECT avg(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id",
          "SELECT avg(attribute_value) FROM hero_attribute GROUP BY hero_id",
          "SELECT cast(sum(hero_attribute.attribute_value) AS REAL) / count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id"
        ]
      ]
    },
    {
      "id": 747,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(id) FROM superhero WHERE full_name IS NULL",
          "SELECT count(*) FROM superhero WHERE full_name IS NULL",
          "SELECT count(id) FROM superhero WHERE full_name = ''",
          "SELECT count(full_name) FROM superhero WHERE full_name IS NULL"
        ]
      ]
    },
    {
      "id": 748,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.id = 75",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75"
        ]
      ]
    },
    {
      "id": 749,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Deathlok'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Deathlok'"
        ]
      ]
    },
    {
      "id": 750,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(weight_kg) FROM superhero WHERE gender_id = 2",
          "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female'",
          "SELECT avg(weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female'",
          "SELECT cast(sum(superhero.weight_kg) AS REAL) / count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female'"
        ]
      ]
    },
    {
      "id": 751,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' LIMIT 5",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' LIMIT 5",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' GROUP BY superpower.power_name LIMIT 5",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE gender.gender = 'Male' LIMIT 5"
        ]
      ]
    },
    {
      "id": 752,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
          "SELECT superhero_name FROM superhero WHERE race_id = ( SELECT id FROM race WHERE race = 'Alien' )",
          "SELECT superhero_name FROM superhero WHERE race_id IN ( SELECT id FROM race WHERE race = 'Alien' )",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'"
        ]
      ]
    },
    {
      "id": 753,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1",
          "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id != 1",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND superhero.eye_colour_id = 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND superhero.eye_colour_id = 1"
        ]
      ]
    },
    {
      "id": 754,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56",
          "SELECT DISTINCT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56"
        ]
      ]
    },
    {
      "id": 755,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5",
          "SELECT superhero.full_name FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Demi-God' LIMIT 5",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5",
          "SELECT full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5"
        ]
      ]
    },
    {
      "id": 756,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(id) FROM superhero WHERE alignment_id = 2",
          "SELECT count(id) FROM superhero WHERE alignment_id = 1",
          "SELECT count(*) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad'"
        ]
      ]
    },
    {
      "id": 757,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.weight_kg = 169",
          "SELECT race.race FROM superhero INNER JOIN race ON race.id = superhero.race_id WHERE superhero.weight_kg = 169",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = '169'"
        ]
      ]
    },
    {
      "id": 758,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE race.race = 'Human' AND superhero.height_cm = 185",
          "SELECT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE superhero.height_cm = 185 AND race.race = 'Human'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE race.race = 'Human' AND superhero.height_cm = 185",
          "SELECT colour.colour FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE race.race = 'Human' AND superhero.height_cm = 185"
        ]
      ]
    },
    {
      "id": 759,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 760,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180",
          "SELECT cast(sum(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.height_cm BETWEEN 150 AND 180",
          "SELECT cast(count(CASE WHEN publisher.id = 13 THEN superhero.id ELSE NULL END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180",
          "SELECT cast(sum(CASE WHEN superhero.publisher_id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180"
        ]
      ]
    },
    {
      "id": 761,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT avg(weight_kg) FROM superhero ) * 0.79",
          "SELECT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT avg(weight_kg) * 0.79 FROM superhero )",
          "SELECT full_name FROM superhero WHERE gender_id = 1 AND weight_kg > ( SELECT avg(weight_kg) * 0.79 FROM superhero )",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT avg(weight_kg) FROM superhero ) * 0.79"
        ]
      ]
    },
    {
      "id": 762,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY count(superhero.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 763,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT sum(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT sum(hero_attribute.attribute_value) FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination'"
        ]
      ]
    },
    {
      "id": 764,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1",
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 1",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 1",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 1"
        ]
      ]
    },
    {
      "id": 765,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(hero_power.hero_id) FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Stealth'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth'",
          "SELECT count(hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth'",
          "SELECT count(DISTINCT hero_power.hero_id) FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Stealth'"
        ]
      ]
    },
    {
      "id": 766,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.full_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.full_name FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 767,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(count(superhero.id) AS REAL) / count(DISTINCT superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.id = 1",
          "SELECT cast(sum(CASE WHEN superhero.skin_colour_id = 1 THEN 1 ELSE 0 END) AS REAL) / count(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id",
          "SELECT cast(sum(CASE WHEN superhero.skin_colour_id = 1 THEN 1 ELSE 0 END) AS REAL) / count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id",
          "SELECT cast(sum(CASE WHEN superhero.skin_colour_id = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id"
        ]
      ]
    },
    {
      "id": 768,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT count(id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics'"
        ]
      ]
    },
    {
      "id": 769,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND attribute.attribute_name = 'Durability' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND attribute.attribute_name = 'Durability' GROUP BY superhero.superhero_name ORDER BY sum(hero_attribute.attribute_value) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY sum(hero_attribute.attribute_value) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' ORDER BY hero_attribute.attribute_value DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 770,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Abraham Sapien'",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien'"
        ]
      ]
    },
    {
      "id": 771,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight'",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight'",
          "SELECT superhero.superhero_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Flight'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Flight'"
        ]
      ]
    },
    {
      "id": 772,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'",
          "SELECT DISTINCT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'",
          "SELECT colour.colour FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'",
          "SELECT colour.colour, colour.colour, colour.colour FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'"
        ]
      ]
    },
    {
      "id": 773,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id",
          "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.eye_colour_id = superhero.hair_colour_id",
          "SELECT DISTINCT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id"
        ]
      ]
    },
    {
      "id": 774,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb'",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.superhero_name = 'A-Bomb'",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero_name = 'A-Bomb'",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero_name = 'A-Bomb'"
        ]
      ]
    },
    {
      "id": 775,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female'",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.gender_id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female'",
          "SELECT cast(sum(CASE WHEN superhero.gender_id = 2 AND colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.gender_id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id",
          "SELECT cast(sum(iif(superhero.gender_id = 2 AND colour.colour = 'Blue', 1, 0)) AS REAL) * 100 / count(superhero.gender_id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id"
        ]
      ]
    },
    {
      "id": 776,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'",
          "SELECT superhero.superhero_name, race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.full_name = 'Charles Chandler'",
          "SELECT superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'",
          "SELECT superhero.full_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'"
        ]
      ]
    },
    {
      "id": 777,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13'",
          "SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero_name = 'Agent 13'",
          "SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.publisher_id = 13 AND superhero.superhero_name = 'Agent 13'",
          "SELECT gender.gender FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id WHERE superhero.superhero_name = 'Agent 13'"
        ]
      ]
    },
    {
      "id": 778,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'",
          "SELECT superhero.full_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Adaptation'",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Adaptation'"
        ]
      ]
    },
    {
      "id": 779,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo'",
          "SELECT count(DISTINCT hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo'",
          "SELECT count(hero_power.hero_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo'",
          "SELECT count(hero_power.power_id) FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Amazo'"
        ]
      ]
    },
    {
      "id": 780,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.full_name = 'Hunter Zolomon'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.full_name = 'Hunter Zolomon'"
        ]
      ]
    },
    {
      "id": 781,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'",
          "SELECT DISTINCT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'",
          "SELECT sum(superhero.height_cm) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'",
          "SELECT height_cm FROM superhero WHERE eye_colour_id = ( SELECT id FROM colour WHERE colour = 'Amber' )"
        ]
      ]
    },
    {
      "id": 782,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Black'",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Black' AND superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id"
        ]
      ]
    },
    {
      "id": 783,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT DISTINCT superhero.eye_colour_id FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'",
          "SELECT superhero.eye_colour_id FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.skin_colour_id = 1",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.skin_colour_id = 1"
        ]
      ]
    },
    {
      "id": 784,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
          "SELECT superhero.full_name FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Vampire'",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
          "SELECT full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'"
        ]
      ]
    },
    {
      "id": 785,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT superhero.superhero_name FROM alignment INNER JOIN superhero ON alignment.id = superhero.alignment_id WHERE alignment.alignment = 'Neutral'"
        ]
      ]
    },
    {
      "id": 786,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(hero_attribute.hero_id) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT count(hero_attribute.hero_id) FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT count(hero_attribute.hero_id) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = ( SELECT max(attribute_value) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' )",
          "SELECT count(*) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 787,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks'",
          "SELECT race.race, alignment.alignment FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Cameron Hicks'",
          "SELECT race.race, alignment.alignment FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN race ON race.id = superhero.race_id WHERE superhero.superhero_name = 'Cameron Hicks'",
          "SELECT race.race, alignment.alignment FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks'"
        ]
      ]
    },
    {
      "id": 788,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(iif(gender.gender = 'Female', 1, 0)) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.publisher_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female'"
        ]
      ]
    },
    {
      "id": 789,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
          "SELECT avg(superhero.weight_kg) FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Alien'",
          "SELECT cast(sum(superhero.weight_kg) AS REAL) / count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
          "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN race ON race.id = superhero.race_id WHERE race.race = 'Alien'"
        ]
      ]
    },
    {
      "id": 790,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN superhero.full_name = 'Emil Blonsky' THEN superhero.weight_kg ELSE 0 END) - sum(CASE WHEN superhero.full_name = 'Charles Chandler' THEN superhero.weight_kg ELSE 0 END) FROM superhero",
          "SELECT sum(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - sum(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) FROM superhero",
          "SELECT sum(CASE WHEN superhero.full_name = 'Emil Blonsky' THEN superhero.weight_kg ELSE 0 END) - sum(CASE WHEN superhero.full_name = 'Charles Chandler' THEN superhero.weight_kg ELSE 0 END) AS difference FROM superhero",
          "SELECT sum(CASE WHEN superhero.full_name = 'Emil Blonsky' THEN superhero.weight_kg ELSE 0 END) - sum(CASE WHEN superhero.full_name = 'Charles Chandler' THEN superhero.weight_kg ELSE 0 END) AS diff FROM superhero"
        ]
      ]
    },
    {
      "id": 791,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(height_cm) FROM superhero",
          "SELECT avg(superhero.height_cm) FROM superhero",
          "SELECT cast(sum(height_cm) AS REAL) / count(id) FROM superhero",
          "SELECT sum(height_cm) / count(id) FROM superhero"
        ]
      ]
    },
    {
      "id": 792,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination'"
        ]
      ]
    },
    {
      "id": 793,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.race_id = 21 AND gender.id = 1",
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE race.race = 'God/Eternal' AND gender.gender = 'Male'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.race_id = 21",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND race.race = 'God/Eternal'"
        ]
      ]
    },
    {
      "id": 794,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 795,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT count(id) FROM superhero WHERE alignment_id = 3",
          "SELECT count(*) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT count(alignment_id) FROM superhero WHERE alignment_id = 3"
        ]
      ]
    },
    {
      "id": 796,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man'"
        ]
      ]
    },
    {
      "id": 797,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Brown' AND colour.colour = 'Blue'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE superhero.eye_colour_id = 7 AND colour.colour = 'Brown'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.eye_colour_id = 7 AND superhero.hair_colour_id = 9"
        ]
      ]
    },
    {
      "id": 798,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
          "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
          "SELECT DISTINCT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
        ]
      ]
    },
    {
      "id": 799,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(id) FROM superhero WHERE publisher_id = 1",
          "SELECT count(*) FROM superhero WHERE publisher_id = 1",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.id = 1",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.id = 1"
        ]
      ]
    },
    {
      "id": 800,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM superhero",
          "SELECT cast(sum(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero_name) FROM superhero",
          "SELECT cast(sum(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero",
          "SELECT cast(sum(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero"
        ]
      ]
    },
    {
      "id": 801,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id",
          "SELECT cast(sum(iif(gender_id = 1, 1, 0)) AS REAL) / sum(iif(gender_id = 2, 1, 0)) FROM superhero",
          "SELECT cast(sum(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero",
          "SELECT cast(sum(iif(gender.gender = 'Male', 1, 0)) AS REAL) / sum(iif(gender.gender = 'Female', 1, 0)) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id"
        ]
      ]
    },
    {
      "id": 802,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
          "SELECT full_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
          "SELECT t.full_name FROM ( SELECT superhero_name, height_cm FROM superhero ORDER BY height_cm DESC LIMIT 1 ) t",
          "SELECT t.full_name FROM ( SELECT superhero.full_name, superhero.height_cm FROM superhero ORDER BY superhero.height_cm DESC LIMIT 1 ) t"
        ]
      ]
    },
    {
      "id": 803,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
          "SELECT id FROM superpower WHERE power_name = 'cryokinesis'",
          "SELECT t.id FROM superpower AS t WHERE t.power_name = 'Cryokinesis'",
          "SELECT power_id FROM superpower WHERE power_name = 'Cryokinesis'"
        ]
      ]
    },
    {
      "id": 804,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE id = 294",
          "SELECT full_name FROM superhero WHERE id = 294",
          "SELECT t.superhero_name FROM superhero AS t WHERE t.id = 294",
          "SELECT DISTINCT superhero_name FROM superhero WHERE id = 294"
        ]
      ]
    },
    {
      "id": 805,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL",
          "SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0",
          "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg = NULL",
          "SELECT full_name FROM superhero WHERE weight_kg IN (0, NULL)"
        ]
      ]
    },
    {
      "id": 806,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Karen Beecher-Duncan'",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan'"
        ]
      ]
    },
    {
      "id": 807,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.full_name = 'Helen Parr'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.full_name = 'Helen Parr'"
        ]
      ]
    },
    {
      "id": 808,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.height_cm = 188 AND superhero.weight_kg = 108",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.height_cm = 188 AND superhero.weight_kg = 108"
        ]
      ]
    },
    {
      "id": 809,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.id = 38",
          "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON publisher.id = superhero.publisher_id WHERE superhero.id = 38"
        ]
      ]
    },
    {
      "id": 810,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN race ON superhero.race_id = race.id ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT race.race FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN race ON race.id = superhero.race_id ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT race.race FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN race ON superhero.race_id = race.id ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id ORDER BY hero_attribute.attribute_value DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 811,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Atom IV'",
          "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id INNER JOIN alignment ON alignment.id = superhero.alignment_id WHERE superhero.superhero_name = 'Atom IV'",
          "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV'",
          "SELECT DISTINCT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV'"
        ]
      ]
    },
    {
      "id": 812,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5",
          "SELECT superhero.full_name FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Blue' LIMIT 5",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'"
        ]
      ]
    },
    {
      "id": 813,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 3",
          "SELECT avg(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.alignment_id = 3",
          "SELECT avg(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT avg(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 3"
        ]
      ]
    },
    {
      "id": 814,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100",
          "SELECT colour.colour FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100",
          "SELECT DISTINCT superhero.skin_colour_id FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON colour.id = superhero.skin_colour_id WHERE hero_attribute.attribute_value = 100"
        ]
      ]
    },
    {
      "id": 815,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Good' AND gender.gender = 'Female'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 1 AND gender.id = 2",
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE alignment.alignment = 'Good' AND gender.gender = 'Female'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE gender.id = 2 AND alignment.id = 1"
        ]
      ]
    },
    {
      "id": 816,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80",
          "SELECT superhero.superhero_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80",
          "SELECT DISTINCT superhero.superhero_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80"
        ]
      ]
    },
    {
      "id": 817,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND gender.gender = 'Male'",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE gender.gender = 'Male' AND colour.colour = 'Blue'",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'blue' AND gender.gender = 'Male'",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE superhero.gender_id = 1 AND colour.colour = 'Blue'"
        ]
      ]
    },
    {
      "id": 818,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.gender_id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2",
          "SELECT cast(sum(CASE WHEN gender.id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(alignment.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE alignment.id = 2",
          "SELECT cast(sum(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2",
          "SELECT cast(sum(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.alignment_id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2"
        ]
      ]
    },
    {
      "id": 819,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) - sum(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END) AS diff FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.weight_kg = 0",
          "SELECT sum(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) - sum(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.weight_kg = 0",
          "SELECT sum(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) - sum(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END) AS diff FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL",
          "SELECT sum(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) - sum(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END) AS diff FROM superhero LEFT JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.weight_kg = 0"
        ]
      ]
    },
    {
      "id": 820,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT sum(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength'",
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength'",
          "SELECT sum(hero_attribute.attribute_value) FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength'",
          "SELECT sum(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND superhero.superhero_name = 'Hulk'"
        ]
      ]
    },
    {
      "id": 821,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Ajax'",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Ajax'"
        ]
      ]
    },
    {
      "id": 822,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE alignment.alignment = 'Bad' AND colour.colour = 'Green'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE alignment.alignment = 'Good' AND colour.colour = 'Green'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Good' AND colour.colour = 'Green'",
          "SELECT count(*) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE alignment.alignment = 'Bad' AND colour.colour = 'Green'"
        ]
      ]
    },
    {
      "id": 823,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female'"
        ]
      ]
    },
    {
      "id": 824,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' GROUP BY superhero.superhero_name ORDER BY superhero.superhero_name ASC",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC"
        ]
      ]
    },
    {
      "id": 825,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force'",
          "SELECT superhero.gender_id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force'",
          "SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE superpower.power_name = 'Phoenix Force'",
          "SELECT gender.gender FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force'"
        ]
      ]
    },
    {
      "id": 826,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 827,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE race.race != 'Human' AND publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race != 'Human'",
          "SELECT avg(superhero.height_cm) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN race ON superhero.race_id = race.id WHERE race.race != 'Human' AND publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race != 'Human'"
        ]
      ]
    },
    {
      "id": 828,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100",
          "SELECT superhero.id FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100"
        ]
      ]
    },
    {
      "id": 829,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id",
          "SELECT sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id",
          "SELECT sum(iif(publisher.publisher_name = 'DC Comics', 1, 0)) - sum(iif(publisher.publisher_name = 'Marvel Comics', 1, 0)) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id",
          "SELECT sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS diff FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id"
        ]
      ]
    },
    {
      "id": 830,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
          "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
          "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1"
        ]
      ]
    },
    {
      "id": 831,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero_name = 'Abomination'"
        ]
      ]
    },
    {
      "id": 832,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
          "SELECT full_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
          "SELECT superhero_name FROM superhero WHERE height_cm = ( SELECT max(height_cm) FROM superhero )",
          "SELECT t.full_name FROM ( SELECT superhero.full_name, superhero.height_cm FROM superhero ORDER BY superhero.height_cm DESC LIMIT 1 ) t"
        ]
      ]
    },
    {
      "id": 833,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
          "SELECT full_name FROM superhero WHERE full_name = 'Charles Chandler'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'",
          "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"
        ]
      ]
    },
    {
      "id": 834,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(gender.gender) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.publisher_name) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'"
        ]
      ]
    },
    {
      "id": 835,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.publisher_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 836,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(id) FROM superhero WHERE full_name LIKE 'John%'",
          "SELECT count(*) FROM superhero WHERE full_name LIKE 'John%'",
          "SELECT count(full_name) FROM superhero WHERE full_name LIKE 'John%'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.full_name LIKE 'John%'"
        ]
      ]
    },
    {
      "id": 837,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1",
          "SELECT hero_id FROM hero_attribute ORDER BY attribute_value LIMIT 1",
          "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT min(attribute_value) FROM hero_attribute )",
          "SELECT hero_attribute.hero_id FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id ORDER BY hero_attribute.attribute_value ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 838,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Alien'",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Alien'",
          "SELECT DISTINCT full_name FROM superhero WHERE superhero_name = 'Alien'"
        ]
      ]
    },
    {
      "id": 839,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Brown' AND superhero.weight_kg < 100",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Brown' AND superhero.weight_kg < 100",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'Brown'",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'Brown'"
        ]
      ]
    },
    {
      "id": 840,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy'",
          "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy'",
          "SELECT sum(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy'",
          "SELECT sum(hero_attribute.attribute_value) FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy'"
        ]
      ]
    },
    {
      "id": 841,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40",
          "SELECT superhero.weight_kg, race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.id = 40",
          "SELECT weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40",
          "SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON race.id = superhero.race_id WHERE superhero.id = 40"
        ]
      ]
    },
    {
      "id": 842,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'"
        ]
      ]
    },
    {
      "id": 843,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_power.hero_id FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence'",
          "SELECT hero_power.hero_id FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Intelligence'",
          "SELECT hero_power.hero_id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence'",
          "SELECT hero_power.hero_id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Intelligence'"
        ]
      ]
    },
    {
      "id": 844,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf'",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Blackwulf'"
        ]
      ]
    },
    {
      "id": 845,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) FROM superhero ) * 0.8",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm * 100 > ( SELECT avg(height_cm) * 80 FROM superhero )",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) * 0.8 FROM superhero )",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm * 100 > ( SELECT avg(height_cm) * 80 FROM superhero )"
        ]
      ]
    },
    {
      "id": 846,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 18 ORDER BY qualifying.q1 DESC LIMIT 5",
          "SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 18 ORDER BY qualifying.q1 DESC LIMIT 5",
          "SELECT driverid FROM qualifying WHERE raceid = 18 ORDER BY q1 DESC LIMIT 5",
          "SELECT drivers.driverref FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 18 AND qualifying.q1 = ( SELECT max(q1) FROM qualifying WHERE raceid = 18 )"
        ]
      ]
    },
    {
      "id": 847,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.q2 = ( SELECT min(q2) FROM qualifying WHERE raceid = 19 )",
          "SELECT drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = '19' AND qualifying.q2 = ( SELECT min(q2) FROM qualifying WHERE raceid = '19' )",
          "SELECT drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.q2 = ( SELECT min(q2) FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 19 )",
          "SELECT drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 19 ORDER BY cast(replace(substr(qualifying.q2, 4), ':', '') AS REAL) LIMIT 1"
        ]
      ]
    },
    {
      "id": 848,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.location = 'Shanghai'",
          "SELECT DISTINCT races.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.location = 'Shanghai'",
          "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai'",
          "SELECT DISTINCT seasons.year FROM seasons INNER JOIN races ON seasons.year = races.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai'"
        ]
      ]
    },
    {
      "id": 849,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
          "SELECT races.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
          "SELECT DISTINCT races.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'"
        ]
      ]
    },
    {
      "id": 850,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Germany'",
          "SELECT DISTINCT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Germany'",
          "SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany'",
          "SELECT DISTINCT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany'"
        ]
      ]
    },
    {
      "id": 851,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT constructorstandings.position FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault'",
          "SELECT constructorstandings.position FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault'",
          "SELECT DISTINCT constructorstandings.position FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid WHERE constructors.name = 'Renault'",
          "SELECT DISTINCT constructorstandings.position FROM circuits INNER JOIN constructorstandings ON circuits.circuitid = constructorstandings.raceid INNER JOIN constructors ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault'"
        ]
      ]
    },
    {
      "id": 852,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe')",
          "SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe')",
          "SELECT count(DISTINCT races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe')",
          "SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe')"
        ]
      ]
    },
    {
      "id": 853,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Spain'",
          "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Spain'",
          "SELECT DISTINCT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain'",
          "SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain'"
        ]
      ]
    },
    {
      "id": 854,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Australian Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Australia' AND races.name = 'Australian Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Australia' AND races.name = 'Australian Grand Prix'"
        ]
      ]
    },
    {
      "id": 855,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT races.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT name FROM races WHERE circuitid IN ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' )",
          "SELECT DISTINCT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'"
        ]
      ]
    },
    {
      "id": 856,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT DISTINCT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT races.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT DISTINCT races.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Sepang International Circuit'"
        ]
      ]
    },
    {
      "id": 857,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Abu Dhabi Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Abu Dhabi Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Abu Dhabi Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Abu Dhabi Grand Prix'"
        ]
      ]
    },
    {
      "id": 858,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.raceid = 24 GROUP BY circuits.country",
          "SELECT circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE races.raceid = 24 ORDER BY results.points DESC LIMIT 1",
          "SELECT circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE races.raceid = 24 GROUP BY circuits.country",
          "SELECT circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.raceid = 24 AND results.points = 1"
        ]
      ]
    },
    {
      "id": 859,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354",
          "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354",
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = '354'",
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354 AND qualifying.qualifyid = 1"
        ]
      ]
    },
    {
      "id": 860,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40'",
          "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40'",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '1:01.40'",
          "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '1:01.40'"
        ]
      ]
    },
    {
      "id": 861,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '1:01:54'",
          "SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '1:01:54'",
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '1:01.54'",
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '1:01.540'"
        ]
      ]
    },
    {
      "id": 862,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time = ''",
          "SELECT count(DISTINCT results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL"
        ]
      ]
    },
    {
      "id": 863,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
          "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901",
          "SELECT DISTINCT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
          "SELECT DISTINCT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901"
        ]
      ]
    },
    {
      "id": 864,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015-11-29'",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '2015-11-29'",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.`date` = '2015-11-29'",
          "SELECT count(laptimes.driverid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.date = '2015-11-29'"
        ]
      ]
    },
    {
      "id": 865,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 592 ORDER BY drivers.dob LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 592 ORDER BY drivers.dob ASC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 592 ORDER BY drivers.dob LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid WHERE RESULTS.raceid = 592 ORDER BY drivers.dob ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 866,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.time = '01:27.000' AND laptimes.raceid = 161",
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '01:27.000'",
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '01:27:00'",
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND substr(laptimes.time, 4, 2) = '27'"
        ]
      ]
    },
    {
      "id": 867,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid WHERE RESULTS.raceid = 933 ORDER BY RESULTS.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 933 ORDER BY cast(replace(results.fastestlapspeed, ',', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 868,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix'",
          "SELECT circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix'",
          "SELECT circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix'"
        ]
      ]
    },
    {
      "id": 869,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.url FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.raceid = 9 ORDER BY constructorstandings.points DESC LIMIT 1",
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.raceid = 9 ORDER BY constructorstandings.points DESC LIMIT 1",
          "SELECT constructors.url FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid WHERE constructorstandings.raceid = 9 ORDER BY constructorstandings.points DESC LIMIT 1",
          "SELECT constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 9 ORDER BY constructorresults.points DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 870,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceid = 345",
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'Di Grassi' AND qualifying.raceid = 345",
          "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceid = 345",
          "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'Di Grassi' AND qualifying.raceid = 345"
        ]
      ]
    },
    {
      "id": 871,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '0:01:15'",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '0:01:15'",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '1:01:15'",
          "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '0:01:15'"
        ]
      ]
    },
    {
      "id": 872,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q3 = '0:01:33' AND qualifying.raceid = 45",
          "SELECT drivers.code FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.q3 = '0:01:33' AND qualifying.raceid = 45",
          "SELECT DISTINCT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q3 = '0:01:33' AND qualifying.raceid = 45",
          "SELECT DISTINCT drivers.code FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.q3 = '0:01:33' AND qualifying.raceid = 45"
        ]
      ]
    },
    {
      "id": 873,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceid = 743",
          "SELECT results.time FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceid = 743",
          "SELECT results.time FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND drivers.driverref = 'mclaren' AND results.raceid = 743",
          "SELECT results.time FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND laptimes.raceid = 743"
        ]
      ]
    },
    {
      "id": 874,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'San Marino Grand Prix' AND results.position = 2 AND races.year = 2006",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'San Marino Grand Prix' AND results.position = 2",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'San Marino Grand Prix' AND results.position = 2 AND races.year = 2006",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid INNER JOIN races ON RESULTS.raceid = races.raceid WHERE races.name = 'San Marino Grand Prix' AND RESULTS.position = 2 AND races.year = 2006"
        ]
      ]
    },
    {
      "id": 875,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
          "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901",
          "SELECT DISTINCT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
          "SELECT DISTINCT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901"
        ]
      ]
    },
    {
      "id": 876,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015-11-29'",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '2015-11-29'",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE strftime('%Y-%m-%d', races.date) = '2015-11-29'",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE strftime('%Y-%m-%d', races.date) = '2015-11-29'"
        ]
      ]
    },
    {
      "id": 877,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = '872' ORDER BY drivers.dob DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 878,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.time LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.time ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 879,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.nationality FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 348 ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT DISTINCT drivers.nationality FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 348 ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.nationality FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE raceid = 348 ORDER BY fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.nationality FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.fastestlapspeed = ( SELECT max(fastestlapspeed) FROM results )"
        ]
      ]
    },
    {
      "id": 880,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast((results.fastestlapspeed - results.fastestlapspeed - results.fastestlapspeed) AS REAL) * 100 / results.fastestlapspeed FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 853",
          "SELECT cast((results.fastestlapspeed - results.fastestlapspeed - results.fastestlapspeed) AS REAL) * 100 / results.fastestlapspeed FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.driverref = 'resta' AND results.raceid = 853",
          "SELECT cast((results.fastestlapspeed - results.fastestlapspeed) AS REAL) * 100 / results.fastestlapspeed FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.driverref = 'resta' AND results.raceid = 853",
          "SELECT cast((results.fastestlapspeed - results.fastestlapspeed - results.fastestlapspeed) AS REAL) * 100 / results.fastestlapspeed FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Paul' AND drivers.surname = 'di Resta' AND results.raceid = 853"
        ]
      ]
    },
    {
      "id": 881,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN results.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16'",
          "SELECT cast(count(CASE WHEN results.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16'",
          "SELECT cast(count(CASE WHEN races.date = '1983-07-16' THEN results.driverid ELSE NULL END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid",
          "SELECT cast(sum(CASE WHEN results.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '1983-07-16'"
        ]
      ]
    },
    {
      "id": 882,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT min(YEAR) FROM races WHERE name = 'Singapore Grand Prix'",
          "SELECT min(YEAR) FROM races WHERE NAME = 'Singapore Grand Prix'",
          "SELECT DISTINCT YEAR FROM races WHERE name = 'Singapore Grand Prix' ORDER BY YEAR ASC LIMIT 1",
          "SELECT YEAR FROM races WHERE name = 'Singapore Grand Prix' ORDER BY YEAR ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 883,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(raceid) FROM races WHERE YEAR = 2005 ORDER BY raceid DESC",
          "SELECT count(raceid) FROM races WHERE YEAR = 2005 ORDER BY name DESC",
          "SELECT count(raceid) FROM races WHERE substr(YEAR, 1, 4) = '2005' ORDER BY raceid DESC",
          "SELECT count(raceid) FROM races WHERE substr(YEAR, 1, 4) = '2005' ORDER BY name DESC"
        ]
      ]
    },
    {
      "id": 884,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM races WHERE strftime('%Y-%m', date) = ( SELECT strftime('%Y-%m', min(date)) FROM races )",
          "SELECT name FROM races WHERE strftime('%Y-%m', date) = strftime('%Y-%m', ( SELECT min(date) FROM races ))",
          "SELECT name FROM races WHERE strftime('%Y-%m', `date`) = ( SELECT strftime('%Y-%m', `date`) FROM races ORDER BY `date` ASC LIMIT 1 )",
          "SELECT name FROM races WHERE strftime('%Y-%m', `date`) = strftime('%Y-%m', ( SELECT min(`date`) FROM races ))"
        ]
      ]
    },
    {
      "id": 885,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name, date FROM races WHERE YEAR = 1999 ORDER BY round DESC LIMIT 1",
          "SELECT name, Date FROM races WHERE YEAR = 1999 ORDER BY round DESC LIMIT 1",
          "SELECT name, `date` FROM races WHERE YEAR = 1999 ORDER BY round DESC LIMIT 1",
          "SELECT name, date FROM races WHERE YEAR = '1999' ORDER BY round DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 886,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT YEAR FROM races GROUP BY YEAR ORDER BY count(YEAR) DESC LIMIT 1",
          "SELECT year FROM races GROUP BY YEAR ORDER BY count(YEAR) DESC LIMIT 1",
          "SELECT YEAR FROM races GROUP BY YEAR ORDER BY count(round) DESC LIMIT 1",
          "SELECT max(round) FROM races GROUP BY YEAR"
        ]
      ]
    },
    {
      "id": 887,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 AND seasons.year != 2000",
          "SELECT name FROM races WHERE YEAR = 2017 AND YEAR NOT IN ( SELECT YEAR FROM seasons )",
          "SELECT DISTINCT name FROM races WHERE YEAR = 2017 AND YEAR NOT IN ( SELECT YEAR FROM seasons )",
          "SELECT DISTINCT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year != 2000 AND races.year = 2017"
        ]
      ]
    },
    {
      "id": 888,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.country, circuits.name, circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year ASC LIMIT 1",
          "SELECT circuits.country, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year ASC LIMIT 1",
          "SELECT circuits.country, circuits.name, circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1",
          "SELECT circuits.country, circuits.name, circuits.location FROM seasons INNER JOIN races ON seasons.year = races.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY seasons.year ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 889,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix' ORDER BY seasons.year DESC LIMIT 1",
          "SELECT seasons.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix' ORDER BY seasons.year DESC LIMIT 1",
          "SELECT seasons.year FROM seasons INNER JOIN races ON seasons.year = races.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix' ORDER BY seasons.year DESC LIMIT 1",
          "SELECT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix' ORDER BY races.year DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 890,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(seasons.year) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix'",
          "SELECT count(seasons.year) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kingdom' AND races.name = 'British Grand Prix'",
          "SELECT count(DISTINCT seasons.year) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix'",
          "SELECT count(seasons.year) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix' AND circuits.country = 'United Kingdom'"
        ]
      ]
    },
    {
      "id": 891,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.driverid FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2010 ORDER BY results.position",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Singapore Grand Prix' AND races.year = 2010 ORDER BY results.position",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2010 ORDER BY results.position",
          "SELECT DISTINCT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY results.position"
        ]
      ]
    },
    {
      "id": 892,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.points DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid ORDER BY RESULTS.points DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.points DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM driverstandings INNER JOIN results ON driverstandings.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY driverstandings.points DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 893,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3",
          "SELECT drivers.forename, drivers.surname, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2017 AND races.name = 'Chinese Grand Prix' ORDER BY driverstandings.points DESC LIMIT 3",
          "SELECT drivers.forename, drivers.surname, results.points FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY results.points DESC LIMIT 3",
          "SELECT drivers.forename, drivers.surname, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 894,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time, drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.time ASC LIMIT 1",
          "SELECT results.time, drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.time LIMIT 1",
          "SELECT results.fastestlaptime, drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlaptime ASC LIMIT 1",
          "SELECT results.fastestlaptime, drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlaptime LIMIT 1"
        ]
      ]
    },
    {
      "id": 895,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(laptimes.milliseconds) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.name = 'Chinese Grand Prix' AND races.year = 2009",
          "SELECT avg(laptimes.milliseconds) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix'",
          "SELECT avg(laptimes.milliseconds) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.surname = 'Vettel' AND drivers.forename = 'Sebastian' AND races.name = 'Chinese Grand Prix' AND races.year = 2009",
          "SELECT avg(laptimes.milliseconds) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2009"
        ]
      ]
    },
    {
      "id": 896,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN driverstandings.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010",
          "SELECT cast(sum(CASE WHEN driverstandings.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(driverstandings.raceid) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010",
          "SELECT cast(sum(CASE WHEN driverstandings.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010 AND driverstandings.position = 1",
          "SELECT cast(sum(CASE WHEN driverstandings.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(driverstandings.raceid) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010 AND driverstandings.position = 1"
        ]
      ]
    },
    {
      "id": 897,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.nationality, avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.forename, drivers.surname, drivers.nationality ORDER BY count(driverstandings.wins) DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.driverid ORDER BY count(driverstandings.wins) DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.driverid, drivers.forename, drivers.surname, drivers.nationality ORDER BY count(driverstandings.wins) DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.forename, drivers.surname, drivers.nationality ORDER BY sum(driverstandings.wins) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 898,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT dob, forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
          "SELECT dob, forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob ASC LIMIT 1",
          "SELECT dob, forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob LIMIT 1",
          "SELECT dob FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 899,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(circuits.name) = 4",
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(races.raceid) = 4",
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(DISTINCT races.raceid) = 4",
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(races.year) = 4"
        ]
      ]
    },
    {
      "id": 900,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006",
          "SELECT circuits.name, circuits.location, races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'USA' AND races.year = 2006",
          "SELECT circuits.name, circuits.location, races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2006 AND circuits.country = 'USA'",
          "SELECT DISTINCT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006"
        ]
      ]
    },
    {
      "id": 901,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE strftime('%Y-%m', races.date) = '2005-09'",
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE strftime('%Y-%m', races.`date`) = '2005-09'",
          "SELECT circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE strftime('%Y-%m', races.date) = '2005-09'",
          "SELECT DISTINCT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE strftime('%Y-%m', races.date) = '2005-09'"
        ]
      ]
    },
    {
      "id": 902,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 10",
          "SELECT DISTINCT races.name FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND driverstandings.position < 10",
          "SELECT DISTINCT races.name FROM results INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND driverstandings.position < 10",
          "SELECT DISTINCT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND driverstandings.position < 10"
        ]
      ]
    },
    {
      "id": 903,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(races.raceid) FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid INNER JOIN races ON RESULTS.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.name = 'Sepang International Circuit'",
          "SELECT count(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' )",
          "SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' )",
          "SELECT count(driverstandings.raceid) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' )"
        ]
      ]
    },
    {
      "id": 904,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds LIMIT 1",
          "SELECT races.name, races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds ASC LIMIT 1",
          "SELECT races.name, seasons.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds LIMIT 1",
          "SELECT races.name, seasons.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 905,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(driverstandings.points) FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000",
          "SELECT avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND driverstandings.raceid IN ( SELECT raceid FROM races WHERE YEAR = 2000 )",
          "SELECT avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000",
          "SELECT avg(driverstandings.points) FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid INNER JOIN driverstandings ON RESULTS.raceid = driverstandings.raceid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND driverstandings.raceid = ( SELECT raceid FROM races WHERE YEAR = 2000 )"
        ]
      ]
    },
    {
      "id": 906,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.year, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year ASC LIMIT 1",
          "SELECT driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY driverstandings.raceid ASC LIMIT 1",
          "SELECT driverstandings.raceid, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY driverstandings.raceid ASC LIMIT 1",
          "SELECT races.year, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year LIMIT 1"
        ]
      ]
    },
    {
      "id": 907,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name, races.date FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = 2017 ORDER BY races.date",
          "SELECT circuits.name, races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date",
          "SELECT circuits.name, races.date FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = 2017 ORDER BY races.date ASC",
          "SELECT circuits.name, races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date ASC"
        ]
      ]
    },
    {
      "id": 908,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid ORDER BY races.laps DESC LIMIT 1",
          "SELECT races.name, seasons.year, circuits.location FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid ORDER BY races.laps DESC LIMIT 1",
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.name, races.year, circuits.location ORDER BY count(races.name) DESC LIMIT 1",
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.name, races.year, circuits.location ORDER BY count(races.raceid) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 909,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix'",
          "SELECT cast(sum(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'European Grand Prix'",
          "SELECT cast(sum(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix'",
          "SELECT cast(count(CASE WHEN circuits.country = 'Germany' THEN races.raceid ELSE NULL END) AS REAL) * 100 / count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix'"
        ]
      ]
    },
    {
      "id": 910,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
          "SELECT lat, lng FROM circuits WHERE NAME = 'Silverstone Circuit'",
          "SELECT lng, lat FROM circuits WHERE name = 'Silverstone Circuit'",
          "SELECT DISTINCT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'"
        ]
      ]
    },
    {
      "id": 911,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM circuits WHERE LOCATION IN ('Silverstone', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
          "SELECT name FROM circuits WHERE LOCATION = 'Silverstone' OR LOCATION = 'Hockenheimring' OR LOCATION = 'Hungaroring' ORDER BY lat DESC LIMIT 1",
          "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
          "SELECT name FROM circuits WHERE LOCATION IN ('Hungaroring', 'Silverstone', 'Hockenheimring') ORDER BY lat DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 912,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit'",
          "SELECT DISTINCT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit'",
          "SELECT circuitref FROM circuits WHERE NAME = 'Marina Bay Street Circuit'",
          "SELECT name FROM circuits WHERE name = 'Marina Bay Street Circuit'"
        ]
      ]
    },
    {
      "id": 913,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
          "SELECT country FROM circuits WHERE alt = ( SELECT max(alt) FROM circuits )",
          "SELECT DISTINCT country FROM circuits ORDER BY alt DESC LIMIT 1",
          "SELECT country FROM circuits WHERE alt = ( SELECT alt FROM circuits ORDER BY alt DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 914,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM drivers WHERE code IS NULL",
          "SELECT count(*) FROM drivers WHERE code IS NULL",
          "SELECT count(code) FROM drivers WHERE code IS NULL",
          "SELECT count(driverref) FROM drivers WHERE code IS NULL"
        ]
      ]
    },
    {
      "id": 915,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT country FROM drivers ORDER BY dob ASC LIMIT 1",
          "SELECT country FROM drivers ORDER BY dob LIMIT 1",
          "SELECT circuits.country FROM drivers INNER JOIN circuits ON drivers.driverid = circuits.circuitid ORDER BY drivers.dob ASC LIMIT 1",
          "SELECT circuits.country FROM circuits INNER JOIN drivers ON circuits.circuitid = drivers.driverid ORDER BY drivers.dob ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 916,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT surname FROM drivers WHERE nationality = 'Italian'",
          "SELECT DISTINCT surname FROM drivers WHERE nationality = 'Italian'",
          "SELECT surname FROM drivers WHERE nationality = 'Italian' GROUP BY surname",
          "SELECT surname FROM drivers WHERE nationality = 'italian'"
        ]
      ]
    },
    {
      "id": 917,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
          "SELECT url FROM drivers WHERE driverref = 'davidson' AND forename = 'Anthony' AND surname = 'Davidson'",
          "SELECT url FROM drivers WHERE surname = 'Davidson' AND forename = 'Anthony'",
          "SELECT DISTINCT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'"
        ]
      ]
    },
    {
      "id": 918,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis'",
          "SELECT driverref FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
          "SELECT DISTINCT driverref FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis'",
          "SELECT driverref FROM drivers WHERE surname = 'Lewis' AND forename = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 919,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
          "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'"
        ]
      ]
    },
    {
      "id": 920,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT DISTINCT races.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT DISTINCT seasons.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT DISTINCT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit'"
        ]
      ]
    },
    {
      "id": 921,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT DISTINCT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT DISTINCT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'"
        ]
      ]
    },
    {
      "id": 922,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit'",
          "SELECT races.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit'",
          "SELECT races.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.location = 'Abu Dhabi' AND races.year = 2010 AND races.name = 'Formula_1'",
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Abu Dhabi' AND races.year = 2010 AND races.name = 'Formula_1'"
        ]
      ]
    },
    {
      "id": 923,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy'",
          "SELECT count(races.raceid) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Italy'",
          "SELECT count(DISTINCT races.raceid) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Italy'",
          "SELECT count(DISTINCT races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy'"
        ]
      ]
    },
    {
      "id": 924,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya'",
          "SELECT DISTINCT races.date FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Barcelona-Catalunya'",
          "SELECT races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya'",
          "SELECT races.date FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Barcelona-Catalunya'"
        ]
      ]
    },
    {
      "id": 925,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT circuits.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT DISTINCT circuits.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT circuits.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'"
        ]
      ]
    },
    {
      "id": 926,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT min(results.fastestlaptime) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT min(results.fastestlaptime) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT results.fastestlaptime FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.fastestlaptime ASC LIMIT 1",
          "SELECT results.fastestlaptime FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.fastestlaptime LIMIT 1"
        ]
      ]
    },
    {
      "id": 927,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.fastestlapspeed = ( SELECT max(fastestlapspeed) FROM results )",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY cast(replace(results.fastestlapspeed, ',', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 928,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverstandings.driverid FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE driverstandings.position = 1 AND races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT driverstandings.driverid FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE driverstandings.position = 1 AND races.year = 2008",
          "SELECT driverstandings.driverid FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid WHERE driverstandings.position = 1 AND races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT driverstandings.driverid FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY driverstandings.position LIMIT 1"
        ]
      ]
    },
    {
      "id": 929,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT races.name FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid INNER JOIN races ON RESULTS.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 930,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank LIMIT 1",
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1",
          "SELECT results.raceid FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1",
          "SELECT races.name FROM results INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 931,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT max(results.fastestlapspeed) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
          "SELECT max(results.fastestlapspeed) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT max(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'"
        ]
      ]
    },
    {
      "id": 932,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT seasons.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT seasons.year FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid INNER JOIN races ON RESULTS.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT seasons.year FROM seasons INNER JOIN driverstandings ON seasons.year = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 933,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.positionorder FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008",
          "SELECT results.positionorder FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008",
          "SELECT results.positionorder FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT results.positionorder FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND drivers.nationality = 'Australian' AND races.year = 2008 AND races.name = 'Australian Grand Prix'"
        ]
      ]
    },
    {
      "id": 934,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND results.grid = 4",
          "SELECT DISTINCT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND results.grid = 4",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Australian Grand Prix' AND results.grid = 4",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.grid = 4 AND races.year = 2008"
        ]
      ]
    },
    {
      "id": 935,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND results.time IS NOT NULL",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.time IS NOT NULL"
        ]
      ]
    },
    {
      "id": 936,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.fastestlap FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008",
          "SELECT results.fastestlap FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND drivers.nationality = 'Australian' AND races.year = 2008",
          "SELECT results.fastestlap FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix' AND races.year = 2008",
          "SELECT results.fastestlap FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND drivers.nationality = 'Australian' AND races.name = 'Australian Grand Prix' AND races.year = 2008"
        ]
      ]
    },
    {
      "id": 937,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.rank = 2",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND results.rank = 2",
          "SELECT results.time FROM results INNER JOIN driverstandings ON results.raceid = driverstandings.raceid WHERE driverstandings.year = 2008 AND driverstandings.position = 2",
          "SELECT results.time FROM results INNER JOIN driverstandings ON results.raceid = driverstandings.raceid AND results.driverid = driverstandings.driverid WHERE driverstandings.year = 2008 AND driverstandings.position = 2"
        ]
      ]
    },
    {
      "id": 938,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.url FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.time DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.points DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.time DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.fastestlaptime DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 939,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND constructors.nationality = 'American'",
          "SELECT count(results.driverid) FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE constructors.nationality = 'American' AND races.year = 2008",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE constructors.nationality = 'American' AND races.year = 2008",
          "SELECT count(driverstandings.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE constructors.nationality = 'American' AND races.year = 2008"
        ]
      ]
    },
    {
      "id": 940,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008",
          "SELECT count(DISTINCT results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'"
        ]
      ]
    },
    {
      "id": 941,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT sum(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT sum(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT sum(results.points) FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT sum(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 942,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(replace(fastestlaptime, ':', '')) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT cast(sum(replace(results.fastestlaptime, ':', '')) AS REAL) / count(results.fastestlaptime) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(cast(replace(substr(results.fastestlaptime, instr(results.fastestlaptime, ':') + 1), ',', '') AS REAL)) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(cast(replace(substr(results.fastestlaptime, instr(results.fastestlaptime, ':') + 1), ',', '') AS REAL)) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 943,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN laptimes.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / count(laptimes.time) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT cast(count(CASE WHEN laptimes.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / count(laptimes.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT cast(sum(CASE WHEN laptimes.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(laptimes.time) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT cast(sum(CASE WHEN laptimes.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(laptimes.driverid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'"
        ]
      ]
    },
    {
      "id": 944,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast((cast(replace(results.time, ':', '') AS REAL) - cast(replace(laptimes.time, ':', '') AS REAL)) AS REAL) * 100 / (cast(replace(laptimes.time, ':', '') AS REAL) - cast(replace(pitstops.time, ':', '') AS REAL)) FROM results INNER JOIN laptimes ON results.driverid = laptimes.driverid AND results.raceid = laptimes.raceid INNER JOIN pitstops ON results.driverid = pitstops.driverid AND results.raceid = pitstops.raceid WHERE results.raceid = ( SELECT raceid FROM races WHERE name = 'Australian Grand Prix' AND YEAR = 2008 ORDER BY time DESC LIMIT 1 )",
          "SELECT cast((cast(replace(results.time, ':', '') AS REAL) - cast(replace(laptimes.time, ':', '') AS REAL)) AS REAL) * 100 / (cast(replace(laptimes.time, ':', '') AS REAL) - cast(replace(pitstops.time, ':', '') AS REAL)) FROM results INNER JOIN laptimes ON results.driverid = laptimes.driverid AND results.raceid = laptimes.raceid INNER JOIN pitstops ON results.driverid = pitstops.driverid AND results.raceid = pitstops.raceid WHERE results.raceid = ( SELECT raceid FROM races WHERE name = 'Australian Grand Prix' AND YEAR = 2008 ) ORDER BY cast(replace(results.time, ':', '') AS REAL) - cast(replace(laptimes.time, ':', '') AS REAL) DESC LIMIT 1",
          "SELECT cast((cast(replace(results.time, ':', '') AS REAL) - cast(replace(laptimes.time, ':', '') AS REAL)) AS REAL) * 100 / (cast(replace(laptimes.time, ':', '') AS REAL) - cast(replace(pitstops.time, ':', '') AS REAL)) FROM results INNER JOIN laptimes ON results.driverid = laptimes.driverid AND results.raceid = laptimes.raceid INNER JOIN pitstops ON results.driverid = pitstops.driverid AND results.raceid = pitstops.raceid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY cast(replace(results.time, ':', '') AS REAL) - cast(replace(laptimes.time, ':', '') AS REAL) DESC LIMIT 1",
          "SELECT cast((cast(replace(results.time, ':', '') AS REAL) - cast(replace(laptimes.time, ':', '') AS REAL)) AS REAL) * 100 / (cast(replace(laptimes.time, ':', '') AS REAL) - cast(replace(pitstops.time, ':', '') AS REAL)) FROM results INNER JOIN laptimes ON results.driverid = laptimes.driverid AND results.raceid = laptimes.raceid INNER JOIN pitstops ON results.driverid = pitstops.driverid AND results.raceid = pitstops.raceid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.time IS NOT NULL ORDER BY cast(replace(results.time, ':', '') AS REAL) - cast(replace(laptimes.time, ':', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 945,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(circuitid) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Melbourne'",
          "SELECT count(circuitid) FROM circuits WHERE LOCATION = 'Melbourne' AND country = 'Australia'",
          "SELECT count(*) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Melbourne'",
          "SELECT count(name) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Melbourne'"
        ]
      ]
    },
    {
      "id": 946,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT lat, lng FROM circuits WHERE country = 'USA'",
          "SELECT DISTINCT lat, lng FROM circuits WHERE country = 'USA'",
          "SELECT lat, lng FROM circuits WHERE country = 'United States'",
          "SELECT lng, lat FROM circuits WHERE country = 'USA'"
        ]
      ]
    },
    {
      "id": 947,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM drivers WHERE dob > 1980 AND nationality = 'British'",
          "SELECT count(driverid) FROM drivers WHERE dob > '1980-01-01' AND nationality = 'British'",
          "SELECT count(driverid) FROM drivers WHERE strftime('%Y', dob) > '1980' AND nationality = 'British'",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'British' AND dob > 1980"
        ]
      ]
    },
    {
      "id": 948,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(constructorresults.points) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'British'",
          "SELECT cast(sum(constructorresults.points) AS REAL) / count(constructorresults.points) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'British'",
          "SELECT cast(sum(constructorresults.points) AS REAL) / count(constructorresults.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'British'",
          "SELECT avg(constructorstandings.points) FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.nationality = 'British'"
        ]
      ]
    },
    {
      "id": 949,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM constructors ORDER BY points DESC LIMIT 1",
          "SELECT constructors.name FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT constructors.name FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid ORDER BY results.points DESC LIMIT 1",
          "SELECT constructors.name FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid ORDER BY constructorresults.points DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 950,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.raceid = 291 AND constructorstandings.points = 0",
          "SELECT DISTINCT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.raceid = 291 AND constructorstandings.points = 0",
          "SELECT constructors.name FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid WHERE constructorstandings.raceid = 291 AND constructorstandings.points = 0",
          "SELECT DISTINCT constructors.name FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid WHERE constructorstandings.raceid = 291 AND constructorstandings.points = 0"
        ]
      ]
    },
    {
      "id": 951,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(constructorstandings.constructorid) FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.nationality = 'Japanese' AND constructorstandings.points = 0",
          "SELECT count(constructorstandings.constructorid) FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.nationality = 'Japanese' AND constructorstandings.points = 0 AND constructorstandings.raceid IN ( SELECT raceid FROM constructorstandings GROUP BY raceid HAVING count(raceid) = 2 )",
          "SELECT count(constructorresults.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Japanese' AND constructorresults.points = 0 AND constructorresults.raceid IN ( SELECT raceid FROM results WHERE laps = 0 )",
          "SELECT count(constructorresults.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Japanese' AND constructorresults.points = 0 AND constructorresults.raceid IN ( SELECT raceid FROM races WHERE YEAR = 2008 )"
        ]
      ]
    },
    {
      "id": 952,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.name FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE results.rank = 1",
          "SELECT constructors.name FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.rank = 1",
          "SELECT DISTINCT constructors.name FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE results.rank = 1",
          "SELECT constructors.name FROM constructors INNER JOIN RESULTS ON constructors.constructorid = RESULTS.constructorid WHERE RESULTS.rank = 1"
        ]
      ]
    },
    {
      "id": 953,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.constructorid) FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50",
          "SELECT count(constructorresults.constructorid) FROM results INNER JOIN constructorresults ON results.constructorid = constructorresults.constructorid INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50",
          "SELECT count(constructorresults.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'French' AND constructorresults.raceid IN ( SELECT raceid FROM results WHERE laps > 50 )",
          "SELECT count(constructorresults.constructorid) FROM results INNER JOIN constructorresults ON results.constructorid = constructorresults.constructorid INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE results.laps > 50 AND constructors.nationality = 'French'"
        ]
      ]
    },
    {
      "id": 954,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN drivers.nationality = 'Japanese' THEN drivers.driverid ELSE NULL END) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year BETWEEN 2007 AND 2009",
          "SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year BETWEEN 2007 AND 2009",
          "SELECT cast(count(CASE WHEN drivers.nationality = 'Japanese' THEN drivers.driverid ELSE NULL END) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE strftime('%Y', laptimes.time) BETWEEN '2007' AND '2009'",
          "SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid"
        ]
      ]
    },
    {
      "id": 955,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(cast(strftime('%M', time) AS REAL) * 60 + cast(strftime('%S', time) AS REAL)) FROM results WHERE time IS NOT NULL",
          "SELECT avg(cast(strftime('%M', time) AS REAL) * 60 + cast(strftime('%S', time) AS REAL)) FROM results WHERE time IS NOT NULL GROUP BY YEAR",
          "SELECT avg(cast(strftime('%M', results.time) AS REAL) * 60 + cast(strftime('%S', results.time) AS REAL)) FROM results INNER JOIN races ON results.raceid = races.raceid",
          "SELECT avg(cast(strftime('%M', results.time) AS REAL) * 60 + cast(strftime('%S', results.time) AS REAL)) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.time IS NOT NULL"
        ]
      ]
    },
    {
      "id": 956,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE strftime('%Y', drivers.dob) > '1975' AND results.rank = 2",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid WHERE strftime('%Y', drivers.dob) > '1975' AND RESULTS.rank = 2",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE driverstandings.position = 2 AND strftime('%Y', drivers.dob) > '1975'",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE strftime('%Y', drivers.dob) > '1975' AND results.position = 2"
        ]
      ]
    },
    {
      "id": 957,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.nationality = 'Italian' AND results.time IS NULL",
          "SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.nationality = 'Italian' AND results.time IS NULL",
          "SELECT count(laptimes.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'Italian' AND laptimes.time IS NULL",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'Italian' AND time IS NULL"
        ]
      ]
    },
    {
      "id": 958,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlaptime DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlaptime LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY cast(replace(results.fastestlaptime, ':', '') AS REAL) DESC LIMIT 1",
          "SELECT DISTINCT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlaptime DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 959,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.fastestlap FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2009 ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT results.fastestlap FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT results.fastestlap FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2009 ORDER BY results.fastestlap DESC LIMIT 1",
          "SELECT results.fastestlap FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 ORDER BY results.fastestlap DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 960,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT avg(results.fastestlapspeed) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT avg(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
          "SELECT avg(fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009"
        ]
      ]
    },
    {
      "id": 961,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, races.year FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.milliseconds ASC LIMIT 1",
          "SELECT races.name, races.year FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1",
          "SELECT races.name, races.year FROM races INNER JOIN results ON races.raceid = results.raceid WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1",
          "SELECT races.name, races.year FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds LIMIT 1"
        ]
      ]
    },
    {
      "id": 962,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN drivers.dob < '1985-01-01' AND results.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid",
          "SELECT cast(sum(CASE WHEN drivers.dob < '1985-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE results.laps > 50",
          "SELECT cast(sum(CASE WHEN drivers.dob < '1985-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE strftime('%Y', races.date) BETWEEN '2000' AND '2005' AND results.laps > 50",
          "SELECT cast(sum(CASE WHEN drivers.dob < '1985-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE strftime('%Y', results.time) BETWEEN '2000' AND '2005' AND results.laps > 50"
        ]
      ]
    },
    {
      "id": 963,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(laptimes.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 720000",
          "SELECT count(laptimes.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.time < '02:00:00'",
          "SELECT count(laptimes.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.time < '02:00.00'",
          "SELECT count(laptimes.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND substr(laptimes.time, 4, 2) < 20"
        ]
      ]
    },
    {
      "id": 964,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT code FROM drivers WHERE nationality = 'America'",
          "SELECT DISTINCT code FROM drivers WHERE nationality = 'America'",
          "SELECT code FROM drivers WHERE nationality = 'American'",
          "SELECT DISTINCT code FROM drivers WHERE nationality = 'American'"
        ]
      ]
    },
    {
      "id": 965,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT raceid FROM races WHERE YEAR = 2009",
          "SELECT DISTINCT raceid FROM races WHERE YEAR = 2009",
          "SELECT raceid FROM races WHERE substr(YEAR, 1, 4) = '2009'",
          "SELECT DISTINCT raceid FROM races WHERE substr(YEAR, 1, 4) = '2009'"
        ]
      ]
    },
    {
      "id": 966,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM driverstandings WHERE raceid = 18",
          "SELECT count(driverid) FROM results WHERE raceid = 18",
          "SELECT count(driverid) FROM driverstandings WHERE raceid = '18'",
          "SELECT count(DISTINCT driverid) FROM driverstandings WHERE raceid = 18"
        ]
      ]
    },
    {
      "id": 967,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM drivers WHERE country = 'Netherlands' AND nationality = 'Dutch' ORDER BY dob LIMIT 3",
          "SELECT count(driverid) FROM drivers WHERE country = 'Netherlands' AND nationality = 'Dutch' ORDER BY dob DESC LIMIT 3",
          "SELECT count(drivers.driverid) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.nationality = 'Netherlands' ORDER BY drivers.dob LIMIT 3",
          "SELECT count(DISTINCT drivers.code) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.nationality = 'Netherlands' ORDER BY drivers.dob LIMIT 3"
        ]
      ]
    },
    {
      "id": 968,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
          "SELECT driverref FROM drivers WHERE surname = 'Kubica' AND forename = 'Robert'",
          "SELECT DISTINCT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
          "SELECT DISTINCT driverref FROM drivers WHERE surname = 'Kubica' AND forename = 'Robert'"
        ]
      ]
    },
    {
      "id": 969,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM drivers WHERE dob LIKE '1980%' AND nationality = 'Australian'",
          "SELECT count(driverid) FROM drivers WHERE strftime('%Y', dob) = '1980' AND nationality = 'Australian'",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'Australian' AND strftime('%Y', dob) = '1980'",
          "SELECT count(driverid) FROM drivers WHERE strftime('%Y', dob) = '1980'"
        ]
      ]
    },
    {
      "id": 970,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time ASC LIMIT 3",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time ASC LIMIT 3",
          "SELECT DISTINCT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time ASC LIMIT 3",
          "SELECT DISTINCT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time ASC LIMIT 3"
        ]
      ]
    },
    {
      "id": 971,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1",
          "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1",
          "SELECT driverref FROM drivers WHERE nationality = 'Germany' ORDER BY dob LIMIT 1",
          "SELECT driverref FROM drivers WHERE nationality = 'Germany' ORDER BY dob ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 972,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.dob = '1971-01-01' AND results.fastestlaptime IS NOT NULL",
          "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.dob = '1971-01-01' AND results.fastestlaptime IS NOT NULL",
          "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid WHERE drivers.dob = '1971-01-01' AND RESULTS.fastestlaptime IS NOT NULL",
          "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid WHERE drivers.dob = '1971-01-01' ORDER BY RESULTS.fastestlaptime DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 973,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'Spanish' AND drivers.dob < 1982 ORDER BY laptimes.time DESC LIMIT 10",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'Spanish' AND drivers.dob < '1982-01-01' ORDER BY laptimes.time DESC LIMIT 10",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'Spanish' AND strftime('%Y', drivers.dob) < '1982' ORDER BY laptimes.time DESC LIMIT 10",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE strftime('%Y', drivers.dob) < '1982' ORDER BY laptimes.time DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 974,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.fastestlaptime IS NOT NULL",
          "SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceid = results.raceid WHERE results.fastestlaptime IS NOT NULL",
          "SELECT DISTINCT seasons.year FROM seasons INNER JOIN races ON seasons.year = races.year INNER JOIN results ON races.raceid = results.raceid WHERE results.fastestlaptime IS NOT NULL",
          "SELECT DISTINCT races.year FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.fastestlaptime IS NOT NULL ORDER BY results.fastestlaptime DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 975,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT DISTINCT races.year FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.time DESC LIMIT 1",
          "SELECT DISTINCT races.year FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY cast(replace(results.fastestlaptime, ':', '') AS REAL) DESC LIMIT 1",
          "SELECT DISTINCT races.year FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY cast(replace(results.fastestlaptime, ':', '') AS REAL) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 976,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverid FROM laptimes ORDER BY milliseconds DESC LIMIT 5",
          "SELECT driverid FROM laptimes ORDER BY milliseconds LIMIT 5",
          "SELECT driverid FROM laptimes ORDER BY milliseconds ASC LIMIT 5",
          "SELECT driverid FROM laptimes ORDER BY substr(time, instr(time, ':') + 1) DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 977,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(raceid) FROM results WHERE statusid = 2 AND raceid BETWEEN 50 AND 100",
          "SELECT count(raceid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND raceid BETWEEN 50 AND 100",
          "SELECT count(raceid) FROM results WHERE raceid BETWEEN 50 AND 100 AND statusid = 2",
          "SELECT count(results.raceid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND results.raceid BETWEEN 50 AND 100"
        ]
      ]
    },
    {
      "id": 978,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(name), lat, lng FROM circuits WHERE country = 'Austria'",
          "SELECT name, lat, lng FROM circuits WHERE country = 'Austria'",
          "SELECT count(name) FROM circuits WHERE country = 'Austria'",
          "SELECT count(circuitid), lat, lng FROM circuits WHERE country = 'Austria'"
        ]
      ]
    },
    {
      "id": 979,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY count(raceid) DESC LIMIT 1",
          "SELECT count(results.number) FROM results INNER JOIN pitstops ON results.raceid = pitstops.raceid WHERE pitstops.time IS NOT NULL GROUP BY results.number ORDER BY count(results.number) DESC LIMIT 1",
          "SELECT results.number FROM results INNER JOIN pitstops ON results.raceid = pitstops.raceid WHERE pitstops.time IS NOT NULL GROUP BY results.number ORDER BY count(results.number) DESC LIMIT 1",
          "SELECT results.number FROM results INNER JOIN pitstops ON results.raceid = pitstops.raceid ORDER BY pitstops.time DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 980,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL",
          "SELECT drivers.driverref, drivers.nationality, drivers.dob FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL",
          "SELECT DISTINCT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL",
          "SELECT DISTINCT drivers.driverref, drivers.nationality, drivers.dob FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL"
        ]
      ]
    },
    {
      "id": 981,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, races.date, races.time FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, races.date, races.time FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid ORDER BY drivers.dob LIMIT 1",
          "SELECT drivers.forename, drivers.surname, races.date, races.time FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, races.date, races.time FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid ORDER BY drivers.dob ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 982,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN status ON results.statusid = status.statusid WHERE drivers.nationality = 'American' AND status.status = 'Disqualified'",
          "SELECT count(results.driverid) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.nationality = 'American' AND status.status = 'Disqualified'",
          "SELECT count(results.driverid) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE status.status = 'Disqualified' AND drivers.nationality = 'American'",
          "SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND drivers.nationality = 'American'"
        ]
      ]
    },
    {
      "id": 983,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.name, constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT constructors.name, constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorstandings.points DESC LIMIT 1",
          "SELECT constructors.name, constructors.url FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 984,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.url FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid ORDER BY constructorstandings.wins DESC LIMIT 1",
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid ORDER BY constructorstandings.wins DESC LIMIT 1",
          "SELECT constructors.url FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid GROUP BY constructors.url ORDER BY sum(constructorstandings.wins) DESC LIMIT 1",
          "SELECT constructors.url FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid GROUP BY constructors.url ORDER BY count(constructorstandings.wins) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 985,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' ORDER BY laptimes.time DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' ORDER BY laptimes.milliseconds DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE races.name = 'French Grand Prix' ORDER BY laptimes.time DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' ORDER BY substr(laptimes.time, 4) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 986,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT raceid, milliseconds FROM results ORDER BY milliseconds ASC LIMIT 1",
          "SELECT races.raceid, results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.milliseconds ASC LIMIT 1",
          "SELECT races.raceid, results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.milliseconds LIMIT 1",
          "SELECT results.raceid, results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.milliseconds ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 987,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(results.fastestlaptime) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank < 11",
          "SELECT avg(results.fastestlaptime) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2006 ORDER BY results.rank ASC LIMIT 10",
          "SELECT avg(results.fastestlaptime) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'United States Grand Prix' AND races.year = 2006 AND results.rank < 11",
          "SELECT avg(results.fastestlaptime) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2006 ORDER BY results.rank < 11"
        ]
      ]
    },
    {
      "id": 988,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.forename, drivers.surname ORDER BY sum(cast(pitstops.duration AS REAL)) / count(pitstops.duration) LIMIT 5",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.forename, drivers.surname ORDER BY sum(cast(pitstops.duration AS REAL)) / count(pitstops.duration) ASC LIMIT 5",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.forename, drivers.surname ORDER BY avg(pitstops.duration) LIMIT 5",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1985' GROUP BY drivers.forename, drivers.surname ORDER BY sum(cast(pitstops.duration AS REAL)) / count(pitstops.duration) LIMIT 5"
        ]
      ]
    },
    {
      "id": 989,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.points DESC LIMIT 1",
          "SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.points DESC LIMIT 1",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.milliseconds DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 990,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.name, constructors.url FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Singapore Grand Prix' AND races.year = 2009 ORDER BY results.time DESC LIMIT 1",
          "SELECT constructors.name, constructors.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON constructors.constructorid = results.constructorid WHERE races.name = 'Singapore Grand Prix' AND races.year = 2009 ORDER BY results.time DESC LIMIT 1",
          "SELECT constructors.name, constructors.url FROM constructors INNER JOIN RESULTS ON constructors.constructorid = RESULTS.constructorid INNER JOIN races ON RESULTS.raceid = races.raceid WHERE races.name = 'Singapore Grand Prix' AND races.year = 2009 ORDER BY RESULTS.time DESC LIMIT 1",
          "SELECT constructors.name, constructors.url FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Singapore Grand Prix' AND races.year = 2009 ORDER BY results.time DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 991,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT forename, surname, dob FROM drivers WHERE dob BETWEEN '1981-01-01' AND '1991-12-31' AND nationality = 'Austrian'",
          "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31'",
          "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991'",
          "SELECT forename, surname, dob FROM drivers WHERE strftime('%Y', dob) BETWEEN '1981' AND '1991' AND nationality = 'Austrian'"
        ]
      ]
    },
    {
      "id": 992,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC",
          "SELECT forname, surname, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC",
          "SELECT forename, surname, url, dob FROM drivers WHERE dob BETWEEN '1971-01-01' AND '1985-12-31' AND nationality = 'German' ORDER BY dob DESC",
          "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC"
        ]
      ]
    },
    {
      "id": 993,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT LOCATION, country FROM circuits WHERE name = 'Hungaroring'",
          "SELECT LOCATION, country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
          "SELECT LOCATION, country, lng, lat FROM circuits WHERE name = 'Hungaroring'",
          "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'"
        ]
      ]
    },
    {
      "id": 994,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT results.points, constructors.name, constructors.nationality FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY results.points DESC LIMIT 1",
          "SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.year BETWEEN 1980 AND 2010 AND races.name = 'Monaco Grand Prix' ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT constructorstandings.points, constructors.name, constructors.nationality FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid INNER JOIN races ON constructorstandings.raceid = races.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorstandings.points DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 995,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix'",
          "SELECT avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(driverstandings.points) FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 996,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(count(raceid) AS REAL) / 10 FROM races WHERE substr(date, 1, 4) BETWEEN '2000' AND '2010'",
          "SELECT cast(count(raceid) AS REAL) / 10 FROM races WHERE strftime('%Y', `date`) BETWEEN '2000' AND '2010'",
          "SELECT cast(count(raceid) AS REAL) / 10 FROM races WHERE substr(YEAR, 1, 2) BETWEEN '20' AND '21'",
          "SELECT avg(races.year) FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 2000 AND 2010"
        ]
      ]
    },
    {
      "id": 997,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1",
          "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(driverid) DESC LIMIT 1",
          "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(*) DESC LIMIT 1",
          "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC"
        ]
      ]
    },
    {
      "id": 998,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverstandings.wins FROM driverstandings INNER JOIN results ON driverstandings.raceid = results.raceid WHERE driverstandings.position = 91",
          "SELECT driverstandings.wins FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE driverstandings.position = 91",
          "SELECT driverstandings.wins FROM results INNER JOIN driverstandings ON results.raceid = driverstandings.raceid WHERE driverstandings.position = 91",
          "SELECT driverstandings.wins FROM results INNER JOIN driverstandings ON results.driverid = driverstandings.driverid WHERE driverstandings.position = 91"
        ]
      ]
    },
    {
      "id": 999,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.fastestlaptime LIMIT 1",
          "SELECT races.name FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.fastestlapspeed LIMIT 1",
          "SELECT races.name FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY cast(replace(results.fastestlaptime, ':', '') AS REAL) DESC LIMIT 1",
          "SELECT DISTINCT races.name FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.fastestlaptime LIMIT 1"
        ]
      ]
    },
    {
      "id": 1000,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.location, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid ORDER BY races.date DESC LIMIT 1",
          "SELECT circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid ORDER BY races.date DESC LIMIT 1",
          "SELECT circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.date = ( SELECT max(date) FROM races )",
          "SELECT circuits.location, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.date = ( SELECT max(date) FROM races )"
        ]
      ]
    },
    {
      "id": 1001,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' AND qualifying.position = 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' ORDER BY qualifying.q3 LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.year = 2008 AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY qualifying.q3 LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' ORDER BY qualifying.q3 LIMIT 1"
        ]
      ]
    },
    {
      "id": 1002,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM drivers INNER JOIN races ON drivers.driverid = races.driverid ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid INNER JOIN races ON RESULTS.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1003,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.statusid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Canadian Grand Prix' AND results.statusid = 3",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident' GROUP BY results.driverid ORDER BY count(results.driverid) DESC LIMIT 1",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident' ORDER BY count(results.driverid) DESC LIMIT 1",
          "SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Accident' AND races.name = 'Canadian Grand Prix' ORDER BY count(results.driverid) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1004,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY drivers.dob ASC LIMIT 1",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY drivers.dob LIMIT 1",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid ORDER BY drivers.dob ASC LIMIT 1",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid ORDER BY drivers.dob LIMIT 1"
        ]
      ]
    },
    {
      "id": 1005,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(duration) FROM pitstops",
          "SELECT max(milliseconds) FROM pitstops",
          "SELECT duration FROM pitstops ORDER BY duration DESC LIMIT 1",
          "SELECT max(pitstops.duration) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid"
        ]
      ]
    },
    {
      "id": 1006,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.time FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime DESC LIMIT 1",
          "SELECT races.time FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.fastestlaptime DESC LIMIT 1",
          "SELECT races.time FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime LIMIT 1",
          "SELECT DISTINCT races.time FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1007,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(pitstops.duration) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT pitstops.duration FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY pitstops.duration DESC LIMIT 1",
          "SELECT max(duration) FROM pitstops WHERE driverid = ( SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )",
          "SELECT max(pitstops.duration) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis'"
        ]
      ]
    },
    {
      "id": 1008,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT pitstops.lap FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2011",
          "SELECT pitstops.lap FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND pitstops.raceid IN ( SELECT raceid FROM races WHERE YEAR = 2011 )",
          "SELECT DISTINCT pitstops.lap FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND pitstops.raceid IN ( SELECT raceid FROM races WHERE YEAR = 2011 )",
          "SELECT pitstops.lap FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix' AND races.year = 2011"
        ]
      ]
    },
    {
      "id": 1009,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT pitstops.time FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.year = 2011",
          "SELECT DISTINCT pitstops.time FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.year = 2011",
          "SELECT DISTINCT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.year = 2011",
          "SELECT DISTINCT pitstops.time, drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.year = 2011"
        ]
      ]
    },
    {
      "id": 1010,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.laps FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT laptimes.lap FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT laptimes.lap FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT results.laps FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN results ON laptimes.raceid = results.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 1011,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid ORDER BY laptimes.time ASC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY laptimes.time ASC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid ORDER BY laptimes.time LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY laptimes.time LIMIT 1"
        ]
      ]
    },
    {
      "id": 1012,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.position FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.milliseconds LIMIT 1",
          "SELECT results.position FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.milliseconds LIMIT 1",
          "SELECT results.position FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.milliseconds LIMIT 1",
          "SELECT results.position FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.time LIMIT 1"
        ]
      ]
    },
    {
      "id": 1013,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT laptimes.milliseconds FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds DESC LIMIT 1",
          "SELECT max(laptimes.milliseconds) FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix'",
          "SELECT laptimes.milliseconds FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix'",
          "SELECT laptimes.milliseconds FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE circuits.country = 'Austria' AND races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1014,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT laptimes.milliseconds FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE circuits.country = 'Italy' ORDER BY laptimes.milliseconds DESC LIMIT 1",
          "SELECT DISTINCT laptimes.time FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE circuits.country = 'Italy'",
          "SELECT DISTINCT laptimes.milliseconds FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE circuits.country = 'Italy' ORDER BY laptimes.milliseconds DESC LIMIT 1",
          "SELECT laptimes.time FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE circuits.country = 'Italy' ORDER BY laptimes.milliseconds DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1015,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds DESC LIMIT 1",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY results.time LIMIT 1",
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.time LIMIT 1"
        ]
      ]
    },
    {
      "id": 1016,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.name = 'Austrian Grand Prix'",
          "SELECT DISTINCT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.name = 'Austrian Grand Prix'",
          "SELECT pitstops.duration FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix'",
          "SELECT sum(pitstops.duration) FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.name = 'Austrian Grand Prix'"
        ]
      ]
    },
    {
      "id": 1017,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.location FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488'",
          "SELECT circuits.lat, circuits.lng FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE laptimes.time = '1:29.488'",
          "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488'"
        ]
      ]
    },
    {
      "id": 1018,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(pitstops.milliseconds) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(pitstops.milliseconds) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(pitstops.milliseconds) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis'",
          "SELECT avg(pitstops.milliseconds) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.driverref = 'hamilton' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 1019,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(laptimes.milliseconds) FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE circuits.country = 'Italy'",
          "SELECT avg(laptimes.milliseconds) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE circuits.country = 'Italy'",
          "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy'",
          "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN circuits ON laptimes.raceid = circuits.circuitid WHERE circuits.country = 'Italy'"
        ]
      ]
    },
    {
      "id": 1020,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1",
          "SELECT player_fifa_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1",
          "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1021,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT height, player_name FROM player ORDER BY height DESC LIMIT 1",
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 1",
          "SELECT max(height), player_name FROM player ORDER BY height DESC LIMIT 1",
          "SELECT player.height, player.player_name FROM player ORDER BY player.height DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1022,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT preferred_foot FROM player_attributes ORDER BY potential ASC LIMIT 1",
          "SELECT preferred_foot FROM player_attributes ORDER BY potential LIMIT 1",
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player_attributes ORDER BY potential ASC LIMIT 1 )",
          "SELECT preferred_foot FROM player_attributes WHERE potential = ( SELECT min(potential) FROM player_attributes )"
        ]
      ]
    },
    {
      "id": 1023,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.defensive_work_rate = 'low'",
          "SELECT count(*) FROM player_attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
          "SELECT sum(CASE WHEN defensive_work_rate = 'low' THEN 1 ELSE 0 END) FROM player_attributes WHERE overall_rating BETWEEN 60 AND 65",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.defensive_work_rate = 'low' AND player_attributes.overall_rating BETWEEN 60 AND 65"
        ]
      ]
    },
    {
      "id": 1024,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 5",
          "SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5",
          "SELECT player_attributes.player_api_id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 5",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id GROUP BY player_attributes.player_api_id ORDER BY sum(player_attributes.crossing) DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1025,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' GROUP BY league.name ORDER BY sum(match.home_team_goal) + sum(match.away_team_goal) DESC LIMIT 1",
          "SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' GROUP BY league.name ORDER BY sum(match.home_team_goal + match.away_team_goal) DESC LIMIT 1",
          "SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY sum(match.home_team_goal) + sum(match.away_team_goal) DESC LIMIT 1",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2016/2017' GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) + sum(MATCH.away_team_goal) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1026,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' GROUP BY team.team_long_name ORDER BY sum(MATCH.home_team_goal - MATCH.away_team_goal) LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 ORDER BY MATCH.home_team_goal - MATCH.away_team_goal LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) ASC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1027,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY sum(player_attributes.penalties) DESC LIMIT 10",
          "SELECT player_name FROM player ORDER BY penalties DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1028,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id INNER JOIN league ON league.id = MATCH.league_id WHERE league.name = 'Scotland Premier League' AND MATCH.season = '2009/2010' GROUP BY team.team_long_name ORDER BY sum(MATCH.away_team_goal - MATCH.home_team_goal) DESC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id WHERE MATCH.season = '2009/2010' AND league.name = 'Scotland Premier League' GROUP BY team.team_long_name ORDER BY sum(MATCH.away_team_goal - MATCH.home_team_goal) DESC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id WHERE MATCH.season = '2009/2010' AND league.name = 'Scotland Premier League' ORDER BY MATCH.away_team_goal - MATCH.home_team_goal DESC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id INNER JOIN league ON league.id = MATCH.league_id WHERE league.name = 'Scotland Premier League' AND MATCH.season = '2009/2010' AND MATCH.away_team_goal - MATCH.home_team_goal > 0"
        ]
      ]
    },
    {
      "id": 1029,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplayspeed FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4",
          "SELECT team_attributes.buildupplayspeed FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4",
          "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4"
        ]
      ]
    },
    {
      "id": 1030,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' GROUP BY league.name ORDER BY sum(CASE WHEN match.home_team_goal = match.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1",
          "SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY sum(CASE WHEN match.home_team_goal = match.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2016/2017' GROUP BY league.name ORDER BY sum(CASE WHEN MATCH.home_team_goal = MATCH.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016' GROUP BY league.name ORDER BY sum(CASE WHEN MATCH.home_team_goal = MATCH.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1031,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00' AND player_attributes.sprint_speed >= 97",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.sprint_speed >= 97 AND strftime('%Y', player_attributes.`date`) BETWEEN '2013' AND '2015'",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00' AND player_attributes.sprint_speed > 97",
          "SELECT player.player_name, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', player.birthday) AS age FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.sprint_speed >= 97 AND player_attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00'"
        ]
      ]
    },
    {
      "id": 1032,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name, count(match.id) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY count(MATCH.id) DESC LIMIT 1",
          "SELECT league.name, count(match.match_api_id) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY count(MATCH.match_api_id) DESC LIMIT 1",
          "SELECT league.name, count(match.league_id) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY count(MATCH.league_id) DESC LIMIT 1",
          "SELECT league.name, count(match.match_api_id) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY count(league.name) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1033,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(height) FROM player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1995-12-31 23:59:59'",
          "SELECT avg(height) FROM player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'",
          "SELECT avg(height) FROM player WHERE birthday LIKE '1990%' OR birthday LIKE '1991%' OR birthday LIKE '1992%' OR birthday LIKE '1993%' OR birthday LIKE '1994%' OR birthday LIKE '1995%'",
          "SELECT avg(height) FROM player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1996-01-01 00:00:00'"
        ]
      ]
    },
    {
      "id": 1034,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_api_id FROM player_attributes WHERE substr(date, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE substr(player_attributes.`date`, 1, 4) = '2010' ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE substr(player_attributes.date, 1, 4) = '2010' ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_api_id FROM player_attributes WHERE strftime('%Y', `date`) = '2010' ORDER BY overall_rating DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1035,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT DISTINCT team_attributes.team_fifa_api_id FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed BETWEEN 51 AND 59",
          "SELECT team_attributes.team_fifa_api_id FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed BETWEEN 51 AND 59",
          "SELECT team_fifa_api_id FROM team_attributes WHERE buildupplayspeed BETWEEN 51 AND 59",
          "SELECT team_fifa_api_id FROM team_attributes WHERE buildupplayspeed BETWEEN 51 AND 59 GROUP BY team_fifa_api_id HAVING count(team_fifa_api_id) > 50"
        ]
      ]
    },
    {
      "id": 1036,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE strftime('%Y', team_attributes.`date`) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name ORDER BY sum(team_attributes.buildupplaypassing) / count(team.team_long_name) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1037,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_fifa_api_id) FROM player_attributes WHERE strftime('%Y', birthday) BETWEEN '1987' AND '1992'",
          "SELECT cast(sum(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_fifa_api_id) FROM player_attributes WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'",
          "SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'",
          "SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'"
        ]
      ]
    },
    {
      "id": 1038,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY sum(MATCH.home_team_goal + MATCH.away_team_goal) DESC LIMIT 5",
          "SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id GROUP BY league.name ORDER BY sum(match.home_team_goal + match.away_team_goal) DESC LIMIT 5",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) + sum(MATCH.away_team_goal) DESC LIMIT 5",
          "SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id GROUP BY league.name ORDER BY sum(match.home_team_goal + match.away_team_goal) DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1039,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.long_shots) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'",
          "SELECT avg(player_attributes.long_shots) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'",
          "SELECT cast(sum(player_attributes.long_shots) AS REAL) / count(player_attributes.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'",
          "SELECT avg(player_attributes.long_shots) FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Ahmed Samir Farag'"
        ]
      ]
    },
    {
      "id": 1040,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 ORDER BY avg(player_attributes.heading_accuracy) DESC LIMIT 10",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY avg(player_attributes.heading_accuracy) DESC LIMIT 10",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY sum(player_attributes.heading_accuracy) / count(player_attributes.player_api_id) DESC LIMIT 10",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name HAVING avg(player_attributes.heading_accuracy) > 180 ORDER BY avg(player_attributes.heading_accuracy) DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1041,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' ORDER BY cast(sum(team_attributes.chancecreationpassing) AS REAL) / count(team_attributes.id) DESC LIMIT 1",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' GROUP BY team.team_long_name ORDER BY sum(team_attributes.chancecreationpassing) / count(team_attributes.id) DESC",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' ORDER BY cast(sum(team_attributes.chancecreationpassing) AS REAL) / count(team_attributes.id) DESC",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' GROUP BY team.team_long_name ORDER BY sum(team_attributes.chancecreationpassing) / count(team_attributes.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1042,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2009/2010' GROUP BY league.name HAVING avg(match.home_team_goal) > avg(match.away_team_goal)",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2009/2010' GROUP BY league.name HAVING avg(MATCH.home_team_goal) > avg(MATCH.away_team_goal)",
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2009/2010' GROUP BY league.name HAVING avg(MATCH.home_team_goal) > avg(MATCH.away_team_goal)",
          "SELECT DISTINCT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2009/2010' GROUP BY league.name HAVING avg(match.home_team_goal) > avg(match.away_team_goal)"
        ]
      ]
    },
    {
      "id": 1043,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers'",
          "SELECT team_short_name FROM team WHERE team_long_name LIKE 'Queens Park Rangers'",
          "SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers '",
          "SELECT DISTINCT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers'"
        ]
      ]
    },
    {
      "id": 1044,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE substr(player.birthday, 1, 4) = '1970' AND substr(player.birthday, 6, 2) = '10'",
          "SELECT player_name FROM player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10'",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE substr(player_attributes.date, 1, 4) = '1970' AND substr(player_attributes.date, 6, 2) = '10'",
          "SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE substr(player.birthday, 1, 4) = '1970' AND substr(player.birthday, 6, 2) = '10'"
        ]
      ]
    },
    {
      "id": 1045,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Franco Zennaro'",
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Franco Zennaro'",
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Franco Zennaro'",
          "SELECT DISTINCT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Franco Zennaro'"
        ]
      ]
    },
    {
      "id": 1046,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaypositioningclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'ADO Den Haag'",
          "SELECT team_attributes.buildupplaypositioningclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag'",
          "SELECT DISTINCT team_attributes.buildupplaypositioningclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'ADO Den Haag'",
          "SELECT buildupplaypositioningclass FROM team_attributes WHERE team_long_name = 'ADO Den Haag'"
        ]
      ]
    },
    {
      "id": 1047,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.date = '2014-09-18 00:00:00'",
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.date = '2014-09-18'",
          "SELECT player_attributes.heading_accuracy FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.date = '2014-09-18 00:00:00'",
          "SELECT player_attributes.heading_accuracy FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.`date` = '2014-09-18 00:00:00'"
        ]
      ]
    },
    {
      "id": 1048,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', player_attributes.date) = '2011'",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', player_attributes.date) = '2011'",
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', player_attributes.`date`) = '2011'",
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player_attributes.date) = '2011' AND player.player_name = 'Gabriel Tamas'"
        ]
      ]
    },
    {
      "id": 1049,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN league.name = 'Scotland Premier League' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016'",
          "SELECT sum(CASE WHEN league.name = 'Scotland Premier League' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON league.id = match.league_id WHERE match.season = '2015/2016'",
          "SELECT sum(CASE WHEN league.name = 'Scotland Premier League' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016'",
          "SELECT sum(CASE WHEN league.name = 'Scotland Premier League' AND match.season = '2015/2016' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id"
        ]
      ]
    },
    {
      "id": 1050,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT preferred_foot FROM player_attributes ORDER BY birthday DESC LIMIT 1",
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player ORDER BY birthday DESC LIMIT 1 )",
          "SELECT player_attributes.preferred_foot FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.birthday DESC LIMIT 1",
          "SELECT player_attributes.preferred_foot FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player.birthday DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1051,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1",
          "SELECT player_name FROM player ORDER BY potential DESC LIMIT 1",
          "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.potential DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1052,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left'",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left'",
          "SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player.weight < 130",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player.weight < 130"
        ]
      ]
    },
    {
      "id": 1053,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky'",
          "SELECT DISTINCT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky'",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky'",
          "SELECT DISTINCT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky'"
        ]
      ]
    },
    {
      "id": 1054,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'David Wilson'",
          "SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'David Wilson'",
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'David Wilson'",
          "SELECT DISTINCT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'David Wilson'"
        ]
      ]
    },
    {
      "id": 1055,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.birthday FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player.birthday FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT birthday FROM player_attributes ORDER BY overall_rating DESC LIMIT 1",
          "SELECT birthday FROM player_attributes WHERE overall_rating = ( SELECT max(overall_rating) FROM player_attributes )"
        ]
      ]
    },
    {
      "id": 1056,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands'",
          "SELECT league.name FROM country INNER JOIN league ON country.id = league.country_id WHERE country.name = 'Netherlands'",
          "SELECT DISTINCT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands'",
          "SELECT DISTINCT league.name FROM country INNER JOIN league ON country.id = league.country_id WHERE country.name = 'Netherlands'"
        ]
      ]
    },
    {
      "id": 1057,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(match.home_team_goal) FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN MATCH ON league.id = MATCH.league_id WHERE country.name = 'Poland' AND MATCH.season = '2010/2011'",
          "SELECT avg(match.home_team_goal) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011'",
          "SELECT avg(MATCH.home_team_goal) FROM MATCH INNER JOIN league ON MATCH.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Poland' AND MATCH.season = '2010/2011'",
          "SELECT avg(match.home_team_goal) FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2010/2011' AND country.name = 'Poland'"
        ]
      ]
    },
    {
      "id": 1058,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY avg(player_attributes.finishing) DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.finishing DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY avg(player_attributes.finishing) DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY sum(player_attributes.finishing) / count(player_attributes.finishing) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1059,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height > 180",
          "SELECT DISTINCT player_name FROM player WHERE height > 180",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180",
          "SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180"
        ]
      ]
    },
    {
      "id": 1060,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(id) FROM player WHERE strftime('%Y', birthday) > '1990'",
          "SELECT count(*) FROM player WHERE strftime('%Y', birthday) > '1990'",
          "SELECT count(player_name) FROM player WHERE strftime('%Y', birthday) > '1990'",
          "SELECT count(id) FROM player WHERE substr(strftime('%Y', birthday), -2) > '90'"
        ]
      ]
    },
    {
      "id": 1061,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name LIKE 'Adam%' AND player.weight > 170",
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE substr(player.player_name, 1, 3) = 'Adam' AND player.weight > 170",
          "SELECT count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name LIKE 'Adam%' AND player.weight > 170",
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name LIKE 'Adam%' AND player.weight > 170 AND player_attributes.buildupplayspeedclass = 'Fast'"
        ]
      ]
    },
    {
      "id": 1062,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010' AND player_attributes.overall_rating > 80",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player_attributes.`date`) BETWEEN '2008' AND '2010' AND player_attributes.overall_rating > 80",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010'",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010'"
        ]
      ]
    },
    {
      "id": 1063,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran'",
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran'",
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Aaron Doran'",
          "SELECT potential FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Doran' )"
        ]
      ]
    },
    {
      "id": 1064,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left'",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left'",
          "SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left'",
          "SELECT DISTINCT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left'"
        ]
      ]
    },
    {
      "id": 1065,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast'",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast'",
          "SELECT DISTINCT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast'",
          "SELECT DISTINCT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast'"
        ]
      ]
    },
    {
      "id": 1066,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB'",
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'CLB'",
          "SELECT DISTINCT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB'",
          "SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB' GROUP BY team_attributes.buildupplaypassingclass"
        ]
      ]
    },
    {
      "id": 1067,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassing > 70",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplaypassing > 70",
          "SELECT DISTINCT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassing > 70",
          "SELECT DISTINCT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplaypassing > 70"
        ]
      ]
    },
    {
      "id": 1068,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(overall_rating) FROM player_attributes WHERE strftime('%Y', date) BETWEEN '2010' AND '2015' AND height > 170",
          "SELECT avg(overall_rating) FROM player_attributes WHERE strftime('%Y', `date`) BETWEEN '2010' AND '2015' AND height > 170",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player_attributes.date) BETWEEN '2010' AND '2015' AND player.height > 170",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 170 AND strftime('%Y', player_attributes.date) BETWEEN '2010' AND '2015'"
        ]
      ]
    },
    {
      "id": 1069,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
          "SELECT player_name FROM player ORDER BY height LIMIT 1",
          "SELECT player_name FROM player WHERE height = ( SELECT min(height) FROM player )",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.height ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1070,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A'",
          "SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Italy Serie A'",
          "SELECT country.name FROM league INNER JOIN country ON country.id = league.country_id WHERE league.name = 'Italy Serie A'",
          "SELECT country.name FROM country INNER JOIN league ON league.country_id = country.id WHERE league.name = 'Italy Serie A'"
        ]
      ]
    },
    {
      "id": 1071,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32",
          "SELECT DISTINCT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32",
          "SELECT DISTINCT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32"
        ]
      ]
    },
    {
      "id": 1072,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran'",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran'",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Doran' )",
          "SELECT cast(sum(player_attributes.overall_rating) AS REAL) / count(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran'"
        ]
      ]
    },
    {
      "id": 1073,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(match.id) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', MATCH.date) BETWEEN '2008-08' AND '2008-10'",
          "SELECT sum(CASE WHEN league.name = 'Germany 1. Bundesliga' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE strftime('%Y-%m', MATCH.date) BETWEEN '2008-08' AND '2008-10'",
          "SELECT sum(CASE WHEN league.name = 'Germany 1. Bundesliga' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON league.id = match.league_id WHERE match.date LIKE '2008-08%' OR match.date LIKE '2008-09%' OR match.date LIKE '2008-10%'",
          "SELECT sum(CASE WHEN league.name = 'Germany 1. Bundesliga' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.date LIKE '2008-08%' OR match.date LIKE '2008-09%' OR match.date LIKE '2008-10%'"
        ]
      ]
    },
    {
      "id": 1074,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.home_team_goal = 10",
          "SELECT DISTINCT team.team_short_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.home_team_goal = 10",
          "SELECT team.team_short_name FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.home_team_goal = 10",
          "SELECT DISTINCT team.team_short_name FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.home_team_goal = 10"
        ]
      ]
    },
    {
      "id": 1075,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.balance = 61 AND player_attributes.potential = 61",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.balance = 61 AND player_attributes.potential = 61",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.balance = ( SELECT max(balance) FROM player_attributes ) AND player_attributes.potential = 61",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.potential = 61 AND player_attributes.balance = 61"
        ]
      ]
    },
    {
      "id": 1076,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN player.player_name = 'Abdou Diallo' THEN player_attributes.ball_control ELSE 0 END) - sum(CASE WHEN player.player_name = 'Aaron Appindangoye' THEN player_attributes.ball_control ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT avg(player_attributes.ball_control) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo' OR player.player_name = 'Aaron Appindangoye'",
          "SELECT avg(player_attributes.ball_control) - avg(CASE WHEN player.player_name = 'Abdou Diallo' THEN player_attributes.ball_control ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT sum(CASE WHEN player.player_name = 'Abdou Diallo' THEN player_attributes.ball_control ELSE 0 END) - sum(CASE WHEN player.player_name = 'Aaron Appindangoye' THEN player_attributes.ball_control ELSE 0 END) AS diff FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id"
        ]
      ]
    },
    {
      "id": 1077,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_long_name FROM team WHERE team_short_name = 'GEN'",
          "SELECT t.team_long_name FROM team AS t WHERE t.team_short_name = 'GEN'",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'GEN'",
          "SELECT DISTINCT team_long_name FROM team WHERE team_short_name = 'GEN'"
        ]
      ]
    },
    {
      "id": 1078,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_name = 'Abdelaziz Barrada' OR player_name = 'Aaron Lennon' ORDER BY birthday LIMIT 1",
          "SELECT player_name FROM player WHERE player_name = 'Abdelaziz Barrada' OR player_name = 'Aaron Lennon' ORDER BY birthday ASC LIMIT 1",
          "SELECT player_name FROM player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' ORDER BY birthday LIMIT 1",
          "SELECT player_name FROM player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' ORDER BY birthday ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1079,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 1",
          "SELECT player_name FROM player WHERE height = ( SELECT max(height) FROM player )",
          "SELECT DISTINCT player_name FROM player ORDER BY height DESC LIMIT 1",
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1080,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low'",
          "SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low'",
          "SELECT sum(CASE WHEN player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low' THEN 1 ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT sum(CASE WHEN player_attributes.attacking_work_rate = 'low' THEN 1 ELSE 0 END) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left'"
        ]
      ]
    },
    {
      "id": 1081,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League'",
          "SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Belgium Jupiler League'",
          "SELECT country.name FROM league INNER JOIN country ON country.id = league.country_id WHERE league.name = 'Belgium Jupiler League'",
          "SELECT country.name FROM country INNER JOIN league ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League'"
        ]
      ]
    },
    {
      "id": 1082,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany'",
          "SELECT league.name FROM country INNER JOIN league ON country.id = league.country_id WHERE country.name = 'Germany'",
          "SELECT DISTINCT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany'",
          "SELECT DISTINCT league.name FROM country INNER JOIN league ON country.id = league.country_id WHERE country.name = 'Germany'"
        ]
      ]
    },
    {
      "id": 1083,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_name FROM player WHERE player_api_id = ( SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 1084,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986' AND player_attributes.defensive_work_rate = 'high'",
          "SELECT sum(CASE WHEN player_attributes.defensive_work_rate = 'high' THEN 1 ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986'",
          "SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986' AND player_attributes.defensive_work_rate = 'high'",
          "SELECT sum(CASE WHEN player_attributes.defensive_work_rate = 'high' THEN 1 ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday < '1986'"
        ]
      ]
    },
    {
      "id": 1085,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player_name FROM player WHERE player_name IN ('Ariel Borysiuk', 'Arouna Kone', 'Alexis') ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name IN ('Ariel Borysiuk', 'Arouna Kone', 'Alexis') ORDER BY player_attributes.crossing DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1086,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk'",
          "SELECT player_attributes.heading_accuracy FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ariel Borysiuk'",
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Ariel Borysiuk'",
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Ariel Borysiuk' )"
        ]
      ]
    },
    {
      "id": 1087,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70",
          "SELECT count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70",
          "SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70"
        ]
      ]
    },
    {
      "id": 1088,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70",
          "SELECT DISTINCT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.dribbling > 70 AND player_attributes.volleys > 70"
        ]
      ]
    },
    {
      "id": 1089,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN country.name = 'Belgium' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2008/2009'",
          "SELECT sum(CASE WHEN country.name = 'Belgium' THEN 1 ELSE 0 END) FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2008/2009'",
          "SELECT sum(CASE WHEN country.name = 'Belgium' THEN 1 ELSE 0 END) FROM country INNER JOIN MATCH ON country.id = MATCH.country_id WHERE MATCH.season = '2008/2009'",
          "SELECT sum(CASE WHEN country.name = 'Belgium' THEN 1 ELSE 0 END) FROM MATCH INNER JOIN league ON MATCH.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE MATCH.season = '2008/2009'"
        ]
      ]
    },
    {
      "id": 1090,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT long_passing FROM player_attributes ORDER BY birthday ASC LIMIT 1",
          "SELECT player_attributes.long_passing FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.birthday ASC LIMIT 1",
          "SELECT long_passing FROM player_attributes ORDER BY birthday LIMIT 1",
          "SELECT player_attributes.long_passing FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.birthday LIMIT 1"
        ]
      ]
    },
    {
      "id": 1091,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN league.name = 'Belgium Jupiler League' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE strftime('%Y', MATCH.date) = '2009' AND strftime('%m', MATCH.date) = '04'",
          "SELECT count(match.id) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Belgium Jupiler League' AND strftime('%Y', MATCH.date) = '2009' AND strftime('%m', MATCH.date) = '04'",
          "SELECT sum(CASE WHEN league.name = 'Belgium Jupiler League' AND strftime('%Y', match.date) = '2009' AND strftime('%m', match.date) = '04' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id",
          "SELECT sum(CASE WHEN league.name = 'Belgium Jupiler League' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id WHERE strftime('%Y', match.date) = '2009' AND strftime('%m', match.date) = '04'"
        ]
      ]
    },
    {
      "id": 1092,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2008/2009' GROUP BY league.name ORDER BY count(league.name) DESC LIMIT 1",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2008/2009' GROUP BY league.name ORDER BY count(MATCH.id) DESC LIMIT 1",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2008/2009' GROUP BY league.name ORDER BY count(MATCH.league_id) DESC LIMIT 1",
          "SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2008/2009' GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1093,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(overall_rating) FROM player_attributes WHERE strftime('%Y', birthday) < '1986'",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986'",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player.birthday) < '1986'",
          "SELECT avg(overall_rating) FROM player_attributes WHERE substr(date, 1, 4) < '1986'"
        ]
      ]
    },
    {
      "id": 1094,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast((sum(CASE WHEN player.player_name = 'Ariel Borysiuk' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT cast((player_attributes.overall_rating - ( SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Paulin Puel' )) AS REAL) * 100 / player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk'",
          "SELECT cast((sum(CASE WHEN player.player_name = 'Ariel Borysiuk' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating ELSE 0 END) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id",
          "SELECT cast((player_attributes.overall_rating - ( SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Paulin Puel' )) AS REAL) * 100 / ( SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Paulin Puel' ) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk'"
        ]
      ]
    },
    {
      "id": 1095,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(team_attributes.buildupplayspeed) FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Heart of Midlothian'",
          "SELECT avg(team_attributes.buildupplayspeed) FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Heart of Midlothian'",
          "SELECT avg(team_attributes.buildupplayspeed) FROM team INNER JOIN team_attributes ON team.team_fifa_api_id = team_attributes.team_fifa_api_id WHERE team.team_long_name = 'Heart of Midlothian'",
          "SELECT avg(team_attributes.buildupplayspeed) FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_long_name = 'Heart of Midlothian'"
        ]
      ]
    },
    {
      "id": 1096,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino'",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Pietro Marino'",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Pietro Marino'",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_name = 'Pietro Marino'"
        ]
      ]
    },
    {
      "id": 1097,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(player_attributes.crossing) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Lennox'",
          "SELECT sum(player_attributes.crossing) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Lennox'",
          "SELECT sum(player_attributes.crossing) FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Aaron Lennox'",
          "SELECT sum(player_attributes.crossing) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.player_fifa_api_id = ( SELECT player_fifa_api_id FROM player WHERE player_name = 'Aaron Lennox' )"
        ]
      ]
    },
    {
      "id": 1098,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1",
          "SELECT team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1",
          "SELECT max(team_attributes.chancecreationpassing), team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax'",
          "SELECT max(team_attributes.chancecreationpassing), team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax'"
        ]
      ]
    },
    {
      "id": 1099,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.preferred_foot FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo'",
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Abdou Diallo' )",
          "SELECT player_attributes.preferred_foot FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Abdou Diallo'",
          "SELECT player_attributes.preferred_foot FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Abdou Diallo'"
        ]
      ]
    },
    {
      "id": 1100,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Dorlan Pabon' ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Dorlan Pabon' ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT max(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Dorlan Pabon'",
          "SELECT max(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Dorlan Pabon'"
        ]
      ]
    },
    {
      "id": 1101,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(match.away_team_goal) FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id WHERE team.team_long_name = 'Parma'",
          "SELECT avg(match.away_team_goal) FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy'",
          "SELECT avg(match.away_team_goal) FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id WHERE team.team_long_name = 'Parma' AND MATCH.country_id = ( SELECT id FROM country WHERE name = 'Italy' )",
          "SELECT avg(MATCH.away_team_goal) FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy'"
        ]
      ]
    },
    {
      "id": 1102,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND strftime('%Y-%m-%d', player.birthday) = '2016-06-23' ORDER BY player.birthday ASC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.`date` = '2016-06-23' ORDER BY player.birthday LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.`date` = '2016-06-23' ORDER BY player.birthday ASC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND strftime('%Y-%m-%d', player.birthday) = '2016-06-23' ORDER BY player.birthday LIMIT 1"
        ]
      ]
    },
    {
      "id": 1103,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date = '2016-02-04 00:00:00'",
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date = '2016-02-04'",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.`date` = '2016-02-04 00:00:00'",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date = '2016-02-04 00:00:00'"
        ]
      ]
    },
    {
      "id": 1104,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30'",
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00'",
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.`date` = '2010-08-30'",
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30'"
        ]
      ]
    },
    {
      "id": 1105,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date = '2015-05-01 00:00:00'",
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date = '2015-05-01'",
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.`date` = '2015-05-01'",
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.`date` = '2015-05-01'"
        ]
      ]
    },
    {
      "id": 1106,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22 00:00:00'",
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22'",
          "SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22 00:00:00'",
          "SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22'"
        ]
      ]
    },
    {
      "id": 1107,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.date FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player_attributes.date FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player_attributes.`date` FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player_attributes.date FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Constant' GROUP BY player_attributes.date ORDER BY sum(player_attributes.crossing) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1108,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.`date` = '2012-02-22'",
          "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2012-02-22'",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2012-02-22'",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.`date` = '2011-02-22'"
        ]
      ]
    },
    {
      "id": 1109,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaydribblingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.`date` = '2015-09-10'",
          "SELECT team_attributes.buildupplaydribblingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.`date` = '2015-09-10'",
          "SELECT team_attributes.buildupplaydribblingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10'",
          "SELECT team_attributes.buildupplaydribblingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.`date` = '2015-09-10' AND team.team_short_name = 'LEI'"
        ]
      ]
    },
    {
      "id": 1110,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.`date` = '2010-02-22'",
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.`date` = '2010-02-22' AND team.team_long_name = 'FC Lorient'",
          "SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.date = '2010-02-22'",
          "SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.`date` = '2010-02-22'"
        ]
      ]
    },
    {
      "id": 1111,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.`date` = '2013-09-20'",
          "SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20'",
          "SELECT team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20'",
          "SELECT team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.`date` = '2013-09-20 00:00:00'"
        ]
      ]
    },
    {
      "id": 1112,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.`date` = '2010-02-22'",
          "SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22'",
          "SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22'",
          "SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.`date` = '2010-02-22' AND team.team_long_name = 'Hull City'"
        ]
      ]
    },
    {
      "id": 1113,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.`date` = '2015-09-10'",
          "SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.`date` = '2015-09-10 00:00:00'",
          "SELECT team_attributes.defenceaggressionclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.`date` = '2015-09-10'",
          "SELECT team_attributes.defenceaggressionclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date = '2015-09-10'"
        ]
      ]
    },
    {
      "id": 1114,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'",
          "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_name = 'Marko Arnautovic' AND `date` BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.`date` BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'"
        ]
      ]
    },
    {
      "id": 1115,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast((sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.date = '2013-07-12'",
          "SELECT cast((sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.date = '2013-07-12'",
          "SELECT cast(sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.date = '2013-07-12'",
          "SELECT cast((sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y-%m-%d', player_attributes.`date`) = '2013-07-12'"
        ]
      ]
    },
    {
      "id": 1116,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 5",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.height DESC LIMIT 5",
          "SELECT DISTINCT player_name FROM player ORDER BY height DESC LIMIT 5",
          "SELECT player.player_name FROM player ORDER BY player.height DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1117,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10",
          "SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 1",
          "SELECT player_api_id FROM player WHERE weight = ( SELECT max(weight) FROM player ) LIMIT 10",
          "SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 9"
        ]
      ]
    },
    {
      "id": 1118,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday) > 35",
          "SELECT player_name FROM player WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday) > 34",
          "SELECT player_name FROM player WHERE birthday IS NOT NULL AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday) > 35",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', player.birthday) > 35"
        ]
      ]
    },
    {
      "id": 1119,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN MATCH.home_player_1 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) THEN 1 ELSE 0 END) + sum(CASE WHEN MATCH.home_player_2 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) THEN 1 ELSE 0 END) + sum(CASE WHEN MATCH.home_player_3 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) THEN 1 ELSE 0 END) + sum(CASE WHEN MATCH.home_player_4 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) THEN 1 ELSE 0 END) + sum(CASE WHEN MATCH.home_player_5 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) THEN 1 ELSE 0 END) + sum(CASE WHEN MATCH.home_player_6 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) THEN 1 ELSE 0 END) + sum(CASE",
          "SELECT sum(CASE WHEN player.player_name = 'Aaron Lennon' THEN 1 ELSE 0 END) FROM MATCH INNER JOIN player ON player.player_api_id = MATCH.home_player_1",
          "SELECT sum(CASE WHEN player.player_name = 'Aaron Lennon' THEN 1 ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1",
          "SELECT sum(CASE WHEN player.player_name = 'Aaron Lennon' THEN 1 ELSE 0 END) FROM `match` INNER JOIN player ON match.home_player_1 = player.player_api_id OR match.home_player_2 = player.player_api_id OR match.home_player_3 = player.player_api_id OR match.home_player_4 = player.player_api_id OR match.home_player_5 = player.player_api_id OR match.home_player_6 = player.player_api_id OR match.home_player_7 = player.player_api_id OR match.home_player_8 = player.player_api_id OR match.home_player_9 = player.player_api_id OR match.home_player_10 = player.player_api_id OR match.home_player_11 = player.player_api_id"
        ]
      ]
    },
    {
      "id": 1120,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN 1 ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN 1 ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_11 OR player.player_api_id = MATCH.away_player_10 OR player.player_api_id = MATCH.away_player_9 OR player.player_api_id = MATCH.away_player_8 OR player.player_api_id = MATCH.away_player_7 OR player.player_api_id = MATCH.away_player_6 OR player.player_api_id = MATCH.away_player_5 OR player.player_api_id = MATCH.away_player_4 OR player.player_api_id = MATCH.away_player_3 OR player.player_api_id = MATCH.away_player_2 OR player.player_api_id = MATCH.away_player_1",
          "SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN 1 ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN 1 ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_11",
          "SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN match.goal ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN match.goal ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_11 OR player.player_api_id = MATCH.away_player_10 OR player.player_api_id = MATCH.away_player_9 OR player.player_api_id = MATCH.away_player_8 OR player.player_api_id = MATCH.away_player_7 OR player.player_api_id = MATCH.away_player_6 OR player.player_api_id = MATCH.away_player_5 OR player.player_api_id = MATCH.away_player_4 OR player.player_api_id = MATCH.away_player_3 OR player.player_api_id = MATCH.away_player_2 OR player.player_api_id = MATCH.away_player_1",
          "SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN match.away_team_goal ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN match.away_team_goal ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_11 OR player.player_api_id = MATCH.away_player_10 OR player.player_api_id = MATCH.away_player_9 OR player.player_api_id = MATCH.away_player_8 OR player.player_api_id = MATCH.away_player_7 OR player.player_api_id = MATCH.away_player_6 OR player.player_api_id = MATCH.away_player_5 OR player.player_api_id = MATCH.away_player_4 OR player.player_api_id = MATCH.away_player_3 OR player.player_api_id = MATCH.away_player_2 OR player.player_api_id = MATCH.away_player_1"
        ]
      ]
    },
    {
      "id": 1121,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_11 WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', player.birthday) < 30",
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_11 WHERE player.birthday < 31",
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', player.birthday) < 30",
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_11 WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', player.birthday) < 31"
        ]
      ]
    },
    {
      "id": 1122,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 10",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 10",
          "SELECT player_name FROM player_attributes ORDER BY overall_rating DESC LIMIT 10",
          "SELECT DISTINCT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1123,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1",
          "SELECT player_name FROM player ORDER BY potential DESC LIMIT 1",
          "SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1124,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high'",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.attacking_work_rate = 'high'",
          "SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high'",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate LIKE 'high'"
        ]
      ]
    },
    {
      "id": 1125,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY player.birthday ASC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY player.birthday DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY player.birthday LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', player.birthday) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1126,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 OR player.player_api_id = MATCH.home_player_2 OR player.player_api_id = MATCH.home_player_3 OR player.player_api_id = MATCH.home_player_4 OR player.player_api_id = MATCH.home_player_5 OR player.player_api_id = MATCH.home_player_6 OR player.player_api_id = MATCH.home_player_7 OR player.player_api_id = MATCH.home_player_8 OR player.player_api_id = MATCH.home_player_9 OR player.player_api_id = MATCH.home_player_10 OR player.player_api_id = MATCH.home_player_11 OR player.player_api_id = MATCH.away_player_1 OR player.player_api_id = MATCH.away_player_2 OR player.player_api_id = MATCH.away_player_3 OR player.player_api_id = MATCH.away_player_4 OR player.",
          "SELECT player.player_name FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 OR player.player_api_id = MATCH.home_player_2 OR player.player_api_id = MATCH.home_player_3 OR player.player_api_id = MATCH.home_player_4 OR player.player_api_id = MATCH.home_player_5 OR player.player_api_id = MATCH.home_player_6 OR player.player_api_id = MATCH.home_player_7 OR player.player_api_id = MATCH.home_player_8 OR player.player_api_id = MATCH.home_player_9 OR player.player_api_id = MATCH.home_player_10 OR player.player_api_id = MATCH.home_player_11 INNER JOIN league ON MATCH.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium'",
          "SELECT player.player_name FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 OR player.player_api_id = MATCH.home_player_2 OR player.player_api_id = MATCH.home_player_3 OR player.player_api_id = MATCH.home_player_4 OR player.player_api_id = MATCH.home_player_5 OR player.player_api_id = MATCH.home_player_6 OR player.player_api_id = MATCH.home_player_7 OR player.player_api_id = MATCH.home_player_8 OR player.player_api_id = MATCH.home_player_9 OR player.player_api_id = MATCH.home_player_10 OR player.player_api_id = MATCH.home_player_11 WHERE MATCH.country_id = ( SELECT id FROM country WHERE name = 'Belgium' )",
          "SELECT player.player_name FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 OR player.player_api_id = MATCH.home_player_2 OR player.player_api_id = MATCH.home_player_3 OR player.player_api_id = MATCH.home_player_4 OR player.player_api_id = MATCH.home_player_5 OR player.player_api_id = MATCH.home_player_6 OR player.player_api_id = MATCH.home_player_7 OR player.player_api_id = MATCH.home_player_8 OR player.player_api_id = MATCH.home_player_9 OR player.player_api_id = MATCH.home_player_10 OR player.player_api_id = MATCH.home_player_11 INNER JOIN league ON league.id = MATCH.league_id INNER JOIN country ON country.id = league.country_id WHERE country.name = 'Belgium'"
        ]
      ]
    },
    {
      "id": 1127,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name, country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = league.id INNER JOIN country ON country.id = league.country_id WHERE player_attributes.vision > 89",
          "SELECT player.player_name, country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.country_id = player.country_id INNER JOIN country ON country.id = league.country_id WHERE player_attributes.vision > 89",
          "SELECT DISTINCT player.player_name, country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = league.id INNER JOIN country ON country.id = league.country_id WHERE player_attributes.vision > 89",
          "SELECT player.player_name, country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = player.id INNER JOIN country ON country.id = league.country_id WHERE player_attributes.vision > 89"
        ]
      ]
    },
    {
      "id": 1128,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM player INNER JOIN league ON player.id = league.id INNER JOIN country ON league.country_id = country.id GROUP BY country.name ORDER BY avg(player.weight) DESC LIMIT 1",
          "SELECT country.name FROM player INNER JOIN league ON player.id = league.id INNER JOIN country ON country.id = league.country_id GROUP BY country.name ORDER BY avg(player.weight) DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY avg(player.weight) DESC LIMIT 1",
          "SELECT country.name FROM player INNER JOIN league ON player.id = league.id INNER JOIN country ON league.country_id = country.id GROUP BY country.name ORDER BY sum(player.weight) / count(player.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1129,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow'",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow'",
          "SELECT DISTINCT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow'",
          "SELECT team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow'"
        ]
      ]
    },
    {
      "id": 1130,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe'",
          "SELECT DISTINCT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe'",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe'",
          "SELECT DISTINCT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe'"
        ]
      ]
    },
    {
      "id": 1131,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player.height) FROM player INNER JOIN league ON player.player_api_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Italy'",
          "SELECT avg(player.height) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 OR player.player_api_id = MATCH.home_player_2 OR player.player_api_id = MATCH.home_player_3 OR player.player_api_id = MATCH.home_player_4 OR player.player_api_id = MATCH.home_player_5 OR player.player_api_id = MATCH.home_player_6 OR player.player_api_id = MATCH.home_player_7 OR player.player_api_id = MATCH.home_player_8 OR player.player_api_id = MATCH.home_player_9 OR player.player_api_id = MATCH.home_player_10 OR player.player_api_id = MATCH.home_player_11 INNER JOIN league ON league.id = MATCH.country_id INNER JOIN country ON country.id = league.country_id WHERE country.name = 'Italy'",
          "SELECT avg(player.height) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 OR player.player_api_id = MATCH.home_player_2 OR player.player_api_id = MATCH.home_player_3 OR player.player_api_id = MATCH.home_player_4 OR player.player_api_id = MATCH.home_player_5 OR player.player_api_id = MATCH.home_player_6 OR player.player_api_id = MATCH.home_player_7 OR player.player_api_id = MATCH.home_player_8 OR player.player_api_id = MATCH.home_player_9 OR player.player_api_id = MATCH.home_player_10 OR player.player_api_id = MATCH.home_player_11 INNER JOIN country ON country.id = MATCH.country_id WHERE country.name = 'Italy'",
          "SELECT avg(player.height) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 OR player.player_api_id = MATCH.home_player_2 OR player.player_api_id = MATCH.home_player_3 OR player.player_api_id = MATCH.home_player_4 OR player.player_api_id = MATCH.home_player_5 OR player.player_api_id = MATCH.home_player_6 OR player.player_api_id = MATCH.home_player_7 OR player.player_api_id = MATCH.home_player_8 OR player.player_api_id = MATCH.home_player_9 OR player.player_api_id = MATCH.home_player_10 OR player.player_api_id = MATCH.home_player_11 WHERE MATCH.country_id = ( SELECT id FROM country WHERE name = 'Italy' )"
        ]
      ]
    },
    {
      "id": 1132,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3",
          "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name LIMIT 3",
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 3",
          "SELECT player_name FROM player WHERE height > 180 LIMIT 3"
        ]
      ]
    },
    {
      "id": 1133,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_name) FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'",
          "SELECT count(*) FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'",
          "SELECT count(player_name) FROM player WHERE substr(birthday, 1, 4) > '1990' AND player_name LIKE 'Aaron%'",
          "SELECT count(player_name) FROM player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'"
        ]
      ]
    },
    {
      "id": 1134,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN id = 6 THEN jumping ELSE 0 END) - sum(CASE WHEN id = 23 THEN jumping ELSE 0 END) FROM player_attributes",
          "SELECT sum(CASE WHEN player_attributes.id = 6 THEN player_attributes.jumping ELSE 0 END) - sum(CASE WHEN player_attributes.id = 23 THEN player_attributes.jumping ELSE 0 END) FROM player_attributes",
          "SELECT sum(CASE WHEN id = 6 THEN jumping ELSE 0 END) - sum(CASE WHEN id = 23 THEN jumping ELSE 0 END) AS diff FROM player_attributes",
          "SELECT sum(CASE WHEN player_attributes.id = 6 THEN player_attributes.jumping ELSE 0 END) - sum(CASE WHEN player_attributes.id = 23 THEN player_attributes.jumping ELSE 0 END) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id"
        ]
      ]
    },
    {
      "id": 1135,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'right' ORDER BY player_attributes.potential ASC LIMIT 3",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.potential = ( SELECT min(potential) FROM player_attributes ) AND player_attributes.preferred_foot = 'right' LIMIT 3",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'right' ORDER BY player_attributes.potential LIMIT 3",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'right' AND player_attributes.potential = ( SELECT min(potential) FROM player_attributes ) LIMIT 3"
        ]
      ]
    },
    {
      "id": 1136,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = ( SELECT max(crossing) FROM player_attributes )",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = 49",
          "SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = ( SELECT max(crossing) FROM player_attributes )",
          "SELECT count(player_api_id) FROM player_attributes WHERE preferred_foot = 'left' AND crossing = ( SELECT max(crossing) FROM player_attributes )"
        ]
      ]
    },
    {
      "id": 1137,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(stamina > 80 AND strength > 80, 1, 0)) AS REAL) * 100 / count(id) FROM player_attributes",
          "SELECT cast(count(id) AS REAL) * 100 / ( SELECT count(id) FROM player_attributes ) FROM player_attributes WHERE stamina > 80 AND strength > 80",
          "SELECT cast(sum(CASE WHEN player_attributes.stamina > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id",
          "SELECT cast(sum(CASE WHEN player_attributes.stamina > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.player_api_id) FROM player_attributes"
        ]
      ]
    },
    {
      "id": 1138,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa'",
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Poland Ekstraklasa'",
          "SELECT country.name FROM league INNER JOIN country ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa'",
          "SELECT country.name FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Poland Ekstraklasa'"
        ]
      ]
    },
    {
      "id": 1139,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT match.home_team_goal, match.away_team_goal FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.date LIKE '2008-09-24%'",
          "SELECT match.home_team_goal, match.away_team_goal FROM `match` INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgian Jupiler League' AND match.`date` LIKE '2008-09-24%'",
          "SELECT match.home_team_goal, match.away_team_goal FROM `match` INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgian Jupiler League' AND match.date LIKE '2008-09-24%'",
          "SELECT match.home_team_goal, match.away_team_goal FROM `match` INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgian Jupiler League' AND match.`date` = '2008-09-24'"
        ]
      ]
    },
    {
      "id": 1140,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Alexis Blin'",
          "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Alexis Blin'",
          "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Alexis Blin'",
          "SELECT player_attributes.sprint_speed, player_attributes.acceleration, player_attributes.agility FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Alexis Blin'"
        ]
      ]
    },
    {
      "id": 1141,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
          "SELECT DISTINCT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
          "SELECT DISTINCT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'"
        ]
      ]
    },
    {
      "id": 1142,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN match.season = '2015/2016' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Italian Serie A'",
          "SELECT sum(CASE WHEN match.season = '2015/2016' THEN 1 ELSE 0 END) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Italian Serie A'",
          "SELECT sum(CASE WHEN match.season = '2015/2016' THEN 1 ELSE 0 END) FROM league INNER JOIN match ON league.id = match.league_id WHERE league.name = 'Italian Serie A'",
          "SELECT sum(CASE WHEN league.name = 'Italian Serie A' AND match.season = '2015/2016' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id"
        ]
      ]
    },
    {
      "id": 1143,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT match.home_team_goal FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Netherlands Eredivisie' ORDER BY MATCH.home_team_goal DESC LIMIT 1",
          "SELECT match.home_team_goal FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Netherlands Eredivisie' ORDER BY match.home_team_goal DESC LIMIT 1",
          "SELECT match.home_team_goal FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Netherlands Eredivisie' ORDER BY match.home_team_goal DESC LIMIT 1",
          "SELECT max(match.home_team_goal) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Netherlands Eredivisie'"
        ]
      ]
    },
    {
      "id": 1144,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.weight DESC LIMIT 1",
          "SELECT player_attributes.finishing, player_attributes.curve FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player.weight DESC LIMIT 1",
          "SELECT player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id ORDER BY player.weight DESC LIMIT 1",
          "SELECT player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight = ( SELECT max(weight) FROM player )"
        ]
      ]
    },
    {
      "id": 1145,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id OR team.team_api_id = MATCH.away_team_api_id WHERE MATCH.season = '2015/2016' GROUP BY team.team_long_name ORDER BY count(team.team_long_name) DESC LIMIT 1",
          "SELECT team.team_long_name FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.home_team_api_id OR team.team_api_id = MATCH.away_team_api_id WHERE MATCH.season = '2015/2016' GROUP BY team.team_long_name ORDER BY count(team.team_long_name) DESC LIMIT 1",
          "SELECT team.team_long_name FROM `match` INNER JOIN team ON team.team_api_id = match.home_team_api_id OR team.team_api_id = match.away_team_api_id WHERE match.season = '2015/2016' GROUP BY team.team_long_name ORDER BY count(team.team_long_name) DESC LIMIT 1",
          "SELECT league.name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id OR team.team_api_id = MATCH.away_team_api_id INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016' GROUP BY league.name ORDER BY count(league.name) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1146,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id ORDER BY MATCH.away_team_goal DESC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id GROUP BY team.team_long_name ORDER BY sum(MATCH.away_team_goal) DESC LIMIT 1",
          "SELECT team.team_long_name FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.away_team_api_id ORDER BY MATCH.away_team_goal DESC LIMIT 1",
          "SELECT team.team_long_name FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.away_team_api_id GROUP BY team.team_long_name ORDER BY sum(MATCH.away_team_goal) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1147,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_name FROM player_attributes ORDER BY overall_rating DESC LIMIT 1",
          "SELECT DISTINCT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1148,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id"
        ]
      ]
    },
    {
      "id": 1149,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), cast(sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'M'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / (sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) + sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END)) FROM patient WHERE sex = 'M'",
          "SELECT cast((sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) - sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) FROM patient WHERE sex = 'M'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / (sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) + sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END)) FROM patient WHERE sex = 'M'"
        ]
      ]
    },
    {
      "id": 1150,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) > '1930'",
          "SELECT cast(sum(CASE WHEN sex = 'F' AND strftime('%Y', birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient WHERE strftime('%Y', birthday) > '1930'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient WHERE strftime('%Y', birthday) > '1930'"
        ]
      ]
    },
    {
      "id": 1151,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE birthday BETWEEN '1930-01-01' AND '1940-12-31'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(admission) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'"
        ]
      ]
    },
    {
      "id": 1152,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
          "SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SLE'",
          "SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) AS per FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
          "SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'"
        ]
      ]
    },
    {
      "id": 1153,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'",
          "SELECT patient.diagnosis, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 30609",
          "SELECT patient.diagnosis, laboratory.`date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'",
          "SELECT patient.diagnosis, laboratory.`date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 30609"
        ]
      ]
    },
    {
      "id": 1154,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 163109",
          "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = '163109'",
          "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 163109",
          "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.id = 163109"
        ]
      ]
    },
    {
      "id": 1155,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > 500",
          "SELECT DISTINCT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500",
          "SELECT patient.id, patient.sex, patient.`first date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500"
        ]
      ]
    },
    {
      "id": 1156,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.rvvt = '+'",
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'",
          "SELECT id, strftime('%Y', `examination date`) - strftime('%Y', birthday) AS age FROM examination WHERE rvvt = '+'",
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'"
        ]
      ]
    },
    {
      "id": 1157,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2",
          "SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2",
          "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'thrombosis' AND examination.thrombosis = 2",
          "SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'thrombosis' AND examination.thrombosis = 2"
        ]
      ]
    },
    {
      "id": 1158,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` >= 250",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` > 250",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` >= 250",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` >= 250"
        ]
      ]
    },
    {
      "id": 1159,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb < 3.5",
          "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5",
          "SELECT DISTINCT patient.id, patient.sex, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb < 3.5",
          "SELECT DISTINCT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5"
        ]
      ]
    },
    {
      "id": 1160,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN laboratory.tp < 6 OR laboratory.tp > 8 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'",
          "SELECT cast(sum(CASE WHEN laboratory.tp < 6 OR laboratory.tp > 8 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.tp) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'",
          "SELECT cast(sum(CASE WHEN laboratory.tp < 6.0 OR laboratory.tp > 8.5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'",
          "SELECT cast(sum(CASE WHEN laboratory.tp < 6.0 OR laboratory.tp > 8.5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.tp) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'"
        ]
      ]
    },
    {
      "id": 1161,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(examination.`acl igg`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND patient.admission = '+'",
          "SELECT avg(examination.`acl igg`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 50 AND patient.admission = '+'",
          "SELECT avg(examination.`acl igg`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '+' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50",
          "SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50"
        ]
      ]
    },
    {
      "id": 1162,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE admission = '-' AND sex = 'F' AND strftime('%Y', description) = '1997'",
          "SELECT count(id) FROM patient WHERE strftime('%Y', description) = '1997' AND admission = '-' AND sex = 'F'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) = '1997' AND patient.sex = 'F' AND patient.admission = '-'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) = '1997' AND patient.admission = '-' AND patient.sex = 'F'"
        ]
      ]
    },
    {
      "id": 1163,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT strftime('%Y', birthday) - strftime('%Y', `first date`) AS age FROM patient ORDER BY `first date` LIMIT 1",
          "SELECT strftime('%Y', birthday) - strftime('%Y', `first date`) AS age FROM patient ORDER BY `first date` ASC LIMIT 1",
          "SELECT strftime('%Y', birthday) - strftime('%Y', `first date`) AS age FROM patient ORDER BY strftime('%Y', birthday) - strftime('%Y', `first date`) DESC LIMIT 1",
          "SELECT strftime('%Y', birthday) - strftime('%Y', `first date`) FROM patient ORDER BY `first date` LIMIT 1"
        ]
      ]
    },
    {
      "id": 1164,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE strftime('%Y', examination.`examination date`) = '1997' AND patient.sex = 'F' AND examination.thrombosis = 1",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', examination.`examination date`) = '1997' AND patient.sex = 'F' AND examination.thrombosis = 1",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 1 AND patient.sex = 'F' AND strftime('%Y', examination.`examination date`) = '1997'",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE strftime('%Y', examination.`examination date`) = '1997' AND patient.sex = 'F' AND examination.thrombosis = '1'"
        ]
      ]
    },
    {
      "id": 1165,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT max(strftime('%Y', birthday)) - min(strftime('%Y', birthday)) FROM patient WHERE tg >= 200",
          "SELECT max(strftime('%Y', birthday)) - min(strftime('%Y', birthday)) FROM laboratory WHERE tg >= 200",
          "SELECT max(strftime('%Y', birthday)) - min(strftime('%Y', birthday)) AS age FROM patient WHERE tg >= 200",
          "SELECT max(year(patient.birthday)) - min(year(patient.birthday)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg >= 200"
        ]
      ]
    },
    {
      "id": 1166,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.symptoms, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id ORDER BY patient.birthday LIMIT 1",
          "SELECT examination.symptoms, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id ORDER BY patient.birthday LIMIT 1",
          "SELECT examination.symptoms, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id ORDER BY patient.birthday ASC LIMIT 1",
          "SELECT examination.symptoms, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id ORDER BY patient.birthday ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1167,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(count(laboratory.id) AS REAL) / 12 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.`date` BETWEEN '1998-01-01' AND '1998-12-31'",
          "SELECT cast(count(patient.id) AS REAL) / 12 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.`date` BETWEEN '1998-01-01' AND '1998-12-31'",
          "SELECT cast(count(laboratory.id) AS REAL) / 12 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y-%m', laboratory.`date`) = '1998-12' AND patient.sex = 'M'",
          "SELECT cast(count(laboratory.id) AS REAL) / 12 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.`date` LIKE '1998%'"
        ]
      ]
    },
    {
      "id": 1168,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.date, strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday LIMIT 1",
          "SELECT laboratory.`date`, TIMESTAMPDIFF(YEAR, patient.birthday, laboratory.`date`) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday LIMIT 1",
          "SELECT laboratory.date, strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday LIMIT 1",
          "SELECT laboratory.date, strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1169,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN sex = 'M' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) FROM laboratory WHERE ua <= '8.0'",
          "SELECT cast(sum(CASE WHEN sex = 'M' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) FROM laboratory WHERE ua <= 8",
          "SELECT cast(sum(CASE WHEN sex = 'M' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) FROM laboratory WHERE ua <= 8.0",
          "SELECT cast(sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua <= '8.0'"
        ]
      ]
    },
    {
      "id": 1170,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE strftime('%Y', `first date`) - strftime('%Y', `examination date`) < 1",
          "SELECT count(id) FROM patient WHERE strftime('%Y', `first date`) - strftime('%Y', `examination date`) >= 1",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', examination.`examination date`) - strftime('%Y', patient.`first date`) < 1",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', examination.`examination date`) - strftime('%Y', patient.`first date`) >= 1"
        ]
      ]
    },
    {
      "id": 1171,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) < 18 AND examination.`examination date` BETWEEN '1990-01-01' AND '1993-12-31'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) < 18 AND strftime('%Y', examination.`examination date`) BETWEEN '1990' AND '1993'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) < '18' AND examination.`examination date` BETWEEN '1990-01-01' AND '1993-12-31'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) < '18' AND strftime('%Y', examination.`examination date`) BETWEEN '1990' AND '1993'"
        ]
      ]
    },
    {
      "id": 1172,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` > 2.0",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` > 2",
          "SELECT count(id) FROM patient WHERE sex = 'M' AND `t-bil` > 2.0",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` > '2.0'"
        ]
      ]
    },
    {
      "id": 1173,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT diagnosis FROM examination WHERE `examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis ORDER BY count(diagnosis) DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1",
          "SELECT diagnosis FROM examination WHERE `examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis ORDER BY count(id) DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY patient.diagnosis ORDER BY count(patient.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1174,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(cast(strftime('%Y', patient.`first date`) AS INT) - cast(strftime('%Y', birthday) AS INT)) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` = '1991-10-01'",
          "SELECT avg(cast(strftime('%Y', patient.`first date`) - strftime('%Y', birthday) AS INT)) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` = '1991-10-01'",
          "SELECT avg(cast(strftime('%Y', patient.`first date`) - strftime('%Y', birthday) AS INTEGER)) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` = '1991-10-01'",
          "SELECT avg(cast(strftime('%Y', patient.`first date`) AS INT) - cast(strftime('%Y', birthday) AS INT)) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = '1991-10-01'"
        ]
      ]
    },
    {
      "id": 1175,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.`first date`, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.hgb DESC LIMIT 1",
          "SELECT strftime('%Y', examination.`examination date`) - strftime('%Y', patient.birthday), patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id ORDER BY laboratory.hgb DESC LIMIT 1",
          "SELECT strftime('%Y', examination.`examination date`) - strftime('%Y', patient.birthday), patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id ORDER BY laboratory.hgb DESC LIMIT 1",
          "SELECT strftime('%Y', examination.`examination date`) - strftime('%Y', patient.birthday), patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.hgb DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1176,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT ana FROM examination WHERE `examination date` = '1996-12-02' AND id = 3605340",
          "SELECT ana FROM examination WHERE id = 3605340 AND `examination date` = '1996-12-02'",
          "SELECT ana FROM examination WHERE '`examination date`' = '1996-12-02' AND id = 3605340",
          "SELECT ana FROM examination WHERE `examination date` = '1996-12-02' AND id = '3605340'"
        ]
      ]
    },
    {
      "id": 1177,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT `t-cho` FROM laboratory WHERE id = 2927464 AND `date` = '1995-09-04'",
          "SELECT laboratory.`t-cho` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND laboratory.`t-cho` < 250",
          "SELECT laboratory.`t-cho` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND laboratory.date = '1995-09-04'",
          "SELECT laboratory.`t-cho` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND laboratory.`t-cho` < 250 AND laboratory.date = '1995-09-04'"
        ]
      ]
    },
    {
      "id": 1178,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS'",
          "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' GROUP BY sex",
          "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' LIMIT 1",
          "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' ORDER BY `first date` LIMIT 1"
        ]
      ]
    },
    {
      "id": 1179,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.`acl igm` FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.description = '1994-02-19' AND examination.diagnosis = 'SLE' AND patient.description = '1993-11-12'",
          "SELECT examination.`acl igm` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.description = '1994-02-19' AND examination.diagnosis = 'SLE' AND patient.description = '1993-11-12'",
          "SELECT examination.`acl igm` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.description = '1994-02-19' AND patient.diagnosis = 'SLE' AND laboratory.date = '1993-11-12'",
          "SELECT examination.`acl igm` FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.description = '1994-02-19' AND examination.diagnosis = 'SLE' AND patient.description = '1993-11-12' AND examination.`acl igm` IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1180,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9",
          "SELECT patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9",
          "SELECT patient.sex FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` = '1992-06-12' AND laboratory.gpt = 9",
          "SELECT patient.sex FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` = '1992-06-12' AND laboratory.gpt = '9'"
        ]
      ]
    },
    {
      "id": 1181,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT strftime('%Y', patient.birthday) - strftime('%Y', laboratory.`date`) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.`date` = '1991-10-21'",
          "SELECT strftime('%Y', patient.birthday) - strftime('%Y', laboratory.date) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21'",
          "SELECT strftime('%Y', patient.birthday) - strftime('%Y', laboratory.`date`) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = 8.4 AND laboratory.`date` = '1991-10-21'",
          "SELECT cast(strftime('%Y', patient.birthday) - strftime('%Y', laboratory.`date`) AS INTEGER) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.`date` = '1991-10-21'"
        ]
      ]
    },
    {
      "id": 1182,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date LIKE '1991%'",
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date LIKE '1991%'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.`date` LIKE '1991%'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date LIKE '1991-09%'"
        ]
      ]
    },
    {
      "id": 1183,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1997-01-27' AND patient.diagnosis = 'SLE'",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1997-01-27' AND patient.diagnosis = 'SLE' ORDER BY patient.`first date` LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1997-01-27' AND patient.diagnosis = 'SLE' ORDER BY patient.`first date` ASC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1997-01-27' AND patient.diagnosis = 'SLE' AND patient.`first date` = '1997-01-27'"
        ]
      ]
    },
    {
      "id": 1184,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.birthday = '1959-03-01' AND examination.`examination date` = '1993-09-27'",
          "SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.birthday = '1959-03-01' AND examination.`examination date` = '1993-09-27'",
          "SELECT DISTINCT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.birthday = '1959-03-01' AND examination.`examination date` = '1993-09-27'",
          "SELECT examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) = '1959' AND strftime('%Y', examination.`examination date`) = '1993' AND strftime('%Y-%m-%d', examination.`examination date`) = '1993-09-27'"
        ]
      ]
    },
    {
      "id": 1185,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN laboratory.date LIKE '1981-11%' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12%' THEN laboratory.`t-cho` ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN laboratory.date LIKE '1981-11%' THEN laboratory.`t-cho` ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.birthday = '1959-02-18'",
          "SELECT sum(CASE WHEN laboratory.date LIKE '1981-11-%' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12-%' THEN laboratory.`t-cho` ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.birthday = '1959-02-18'",
          "SELECT sum(CASE WHEN laboratory.date LIKE '1981-11%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id",
          "SELECT cast(sum(CASE WHEN laboratory.date LIKE '1981-11%' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12%' THEN laboratory.`t-cho` ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN laboratory.date LIKE '1981-11%' THEN laboratory.`t-cho` ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday = '1959-02-18'"
        ]
      ]
    },
    {
      "id": 1186,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) BETWEEN '1997' AND '1998' AND patient.diagnosis = 'BEHCET'",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) BETWEEN '1997' AND '1998' AND examination.diagnosis = 'Behcet'",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) BETWEEN '1997' AND '1998' AND patient.diagnosis = 'BEHCET'",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) BETWEEN '1997-1-1' AND '1998-1-1' AND patient.diagnosis = 'BEHCET'"
        ]
      ]
    },
    {
      "id": 1187,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alp < 4",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alp < 4",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alp < 4"
        ]
      ]
    },
    {
      "id": 1188,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE sex = 'F' AND strftime('%Y', birthday) = '1964' AND admission = '+'",
          "SELECT count(id) FROM patient WHERE admission = '+' AND sex = 'F' AND strftime('%Y', birthday) = '1964'",
          "SELECT count(id) FROM patient WHERE strftime('%Y', birthday) = '1964' AND admission = '+' AND sex = 'F'",
          "SELECT count(id) FROM patient WHERE strftime('%Y', birthday) = '1964' AND sex = 'F' AND admission = '+'"
        ]
      ]
    },
    {
      "id": 1189,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(count(examination.id) AS REAL) * (examination.`acl igm` + examination.`acl igm`) * 0.2 FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.`ana pattern` = 'S'",
          "SELECT cast(count(examination.id) AS REAL) / count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.`ana pattern` = 'S' AND examination.`acl igm` > ( SELECT avg(`acl igm`) FROM examination )",
          "SELECT cast(sum(examination.`acl igm`) AS REAL) / count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.`ana pattern` = 'S' AND examination.`acl igm` > ( SELECT avg(`acl igm`) FROM examination )",
          "SELECT cast(sum(examination.`acl igm`) AS REAL) / count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.`ana pattern` = 'S' AND examination.`acl igm` > ( SELECT avg(`acl igm`) + avg(`acl igm`) * 0.2 FROM examination )"
        ]
      ]
    },
    {
      "id": 1190,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN `u-pro` > 0 AND `u-pro` < 30 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM laboratory WHERE ua <= 6.5",
          "SELECT cast(sum(iif(`u-pro` > 0 AND `u-pro` < 30 AND ua <= 6.5, 1, 0)) AS REAL) * 100 / count(id) FROM laboratory",
          "SELECT cast(sum(CASE WHEN laboratory.`u-pro` > 0 AND laboratory.`u-pro` < 30 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory WHERE ua <= 6.5",
          "SELECT cast(sum(CASE WHEN laboratory.`u-pro` > 0 AND laboratory.`u-pro` < 30 AND laboratory.ua <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory"
        ]
      ]
    },
    {
      "id": 1191,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) = '1981' AND patient.sex = 'M'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'M' AND strftime('%Y', patient.`first date`) = '1981' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'BEHCET'",
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.diagnosis) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) = '1981' AND patient.sex = 'M'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'M' AND strftime('%Y', patient.`first date`) = '1981' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'BEHCET'"
        ]
      ]
    },
    {
      "id": 1192,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` LIKE '1991-10%' AND laboratory.`t-bil` < 2 AND patient.admission = '-'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y-%m', laboratory.`date`) = '1991-10' AND laboratory.`t-bil` < 2 AND patient.admission = '-'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', laboratory.`date`) = '1991' AND laboratory.`t-bil` < 2 AND patient.admission = '-'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` LIKE '1991-10%' AND laboratory.`t-bil` < 2.0 AND patient.admission = '-'"
        ]
      ]
    },
    {
      "id": 1193,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`ana pattern` != 'P' AND patient.sex = 'F' AND strftime('%Y', patient.birthday) BETWEEN '1980' AND '1989'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'p'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`ana pattern` != 'P' AND patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31'"
        ]
      ]
    },
    {
      "id": 1194,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123",
          "SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123",
          "SELECT patient.sex FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123",
          "SELECT patient.sex FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123"
        ]
      ]
    },
    {
      "id": 1195,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.diagnosis = 'SLE' AND laboratory.plt > 400",
          "SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'SLE' AND laboratory.plt > 400",
          "SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND patient.sex = 'F' AND laboratory.plt > 400",
          "SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.plt > 400 AND examination.diagnosis = 'SLE'"
        ]
      ]
    },
    {
      "id": 1196,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1",
          "SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(id) DESC LIMIT 1",
          "SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(diagnosis) DESC LIMIT 1",
          "SELECT symptoms FROM examination GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1197,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT `first date`, diagnosis FROM patient WHERE id = 48473",
          "SELECT description, diagnosis FROM patient WHERE id = 48473",
          "SELECT `first date`, diagnosis FROM patient WHERE id = '48473'",
          "SELECT description, diagnosis FROM patient WHERE id = '48473'"
        ]
      ]
    },
    {
      "id": 1198,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE diagnosis = 'APS' AND sex = 'F'",
          "SELECT count(id) FROM patient WHERE sex = 'F' AND diagnosis = 'APS'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.diagnosis = 'APS'",
          "SELECT count(*) FROM patient WHERE diagnosis = 'APS' AND sex = 'F'"
        ]
      ]
    },
    {
      "id": 1199,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND laboratory.tp BETWEEN 6 AND 8.5",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND laboratory.tp < 6 OR laboratory.tp > 8.5",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND laboratory.tp BETWEEN 6 AND 8.5",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND laboratory.tp NOT BETWEEN 6 AND 8.5"
        ]
      ]
    },
    {
      "id": 1200,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM examination WHERE symptoms = 'thrombocytopenia'",
          "SELECT cast(sum(CASE WHEN diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM examination WHERE symptoms = 'thrombocytopenia'",
          "SELECT cast(sum(CASE WHEN examination.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms = 'thrombocytopenia'",
          "SELECT cast(sum(CASE WHEN examination.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms = 'thrombocytopenia'"
        ]
      ]
    },
    {
      "id": 1201,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) = '1980' AND patient.diagnosis = 'RA'",
          "SELECT cast(sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(sex) FROM patient WHERE strftime('%Y', birthday) = '1980' AND diagnosis = 'RA'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) = '1980' AND patient.diagnosis = 'RA'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) = '1980' AND patient.diagnosis = 'RA'"
        ]
      ]
    },
    {
      "id": 1202,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND patient.admission = '-' AND examination.diagnosis = 'BEHCET'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND strftime('%Y', examination.`examination date`) BETWEEN '1995' AND '1997' AND patient.admission = '-' AND examination.diagnosis = 'BEHCET'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND patient.sex = 'M' AND patient.admission = '-' AND patient.diagnosis = 'BEHCET'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND patient.admission = '-' AND patient.diagnosis = 'BEHCET'"
        ]
      ]
    },
    {
      "id": 1203,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc < 3.5 AND patient.sex = 'F'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5"
        ]
      ]
    },
    {
      "id": 1204,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT strftime('%J', `examination date`) - strftime('%J', `first date`) AS days FROM patient WHERE id = 821298",
          "SELECT strftime('%J', `examination date`) - strftime('%J', `first date`) FROM patient WHERE id = 821298",
          "SELECT strftime('%J', `first date`) - strftime('%J', `examination date`) AS days FROM patient WHERE id = 821298",
          "SELECT strftime('%J', examination.`examination date`) - strftime('%J', patient.`first date`) AS days FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 821298"
        ]
      ]
    },
    {
      "id": 1205,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.ua FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266 AND (laboratory.ua > 8.0 OR laboratory.ua > 6.5)",
          "SELECT CASE WHEN laboratory.ua > 8.0 THEN 'YES' ELSE 'NO' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266",
          "SELECT laboratory.ua FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266 AND laboratory.ua > 8.0",
          "SELECT laboratory.ua FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266 AND (laboratory.ua > 8.0 OR laboratory.ua < 6.5)"
        ]
      ]
    },
    {
      "id": 1206,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 48473 AND laboratory.got >= 60",
          "SELECT laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = '48473' AND laboratory.got >= 60",
          "SELECT laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 48473 AND laboratory.got > 60",
          "SELECT laboratory.`date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 48473 AND laboratory.got >= 60"
        ]
      ]
    },
    {
      "id": 1207,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex, patient.birthday, laboratory.date FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', laboratory.`date`) = '1994' AND laboratory.got < 60",
          "SELECT patient.sex, patient.birthday, laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', laboratory.`date`) = '1994' AND laboratory.got < 60",
          "SELECT patient.sex, patient.birthday, laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` LIKE '1994%' AND laboratory.got < 60",
          "SELECT patient.sex, patient.birthday, laboratory.date FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date LIKE '1994%' AND laboratory.got < 60"
        ]
      ]
    },
    {
      "id": 1208,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt > 60",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60"
        ]
      ]
    },
    {
      "id": 1209,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday ASC",
          "SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday ASC",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday ASC"
        ]
      ]
    },
    {
      "id": 1210,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(ldh) FROM laboratory WHERE ldh < 500",
          "SELECT avg(LDH) FROM laboratory WHERE ldh < 500",
          "SELECT avg(laboratory.ldh) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500",
          "SELECT cast(sum(ldh) AS REAL) / count(id) FROM laboratory WHERE ldh < 500"
        ]
      ]
    },
    {
      "id": 1211,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800",
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh BETWEEN 600 AND 800",
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800",
          "SELECT DISTINCT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800"
        ]
      ]
    },
    {
      "id": 1212,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.admission FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE alp < 300 AND patient.admission IN ('+', '-')",
          "SELECT patient.admission FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE alp < 300",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission IN ('+', '-')"
        ]
      ]
    },
    {
      "id": 1213,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id, alp < 300 FROM patient WHERE birthday = '1982-04-01'",
          "SELECT patient.id, laboratory.alp < 300 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.birthday = '1982-04-01'",
          "SELECT patient.id, laboratory.alp < 300 FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y-%m-%d', patient.birthday) = '1982-04-01'",
          "SELECT patient.id, laboratory.alp < 300 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y-%m-%d', patient.birthday) = '1982-04-01'"
        ]
      ]
    },
    {
      "id": 1214,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tp < 6.0",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tp < 6",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND laboratory.tp < 6.0",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.tp < 6.0"
        ]
      ]
    },
    {
      "id": 1215,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN laboratory.tp > 8.5 THEN 1 ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'",
          "SELECT sum(CASE WHEN laboratory.tp > 8.5 THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F'",
          "SELECT sum(CASE WHEN laboratory.tp > 8.5 THEN laboratory.tp - 8.5 ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'",
          "SELECT sum(CASE WHEN laboratory.tp > 8.5 THEN 1 ELSE 0 END) - sum(CASE WHEN laboratory.tp <= 8.5 THEN 1 ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'"
        ]
      ]
    },
    {
      "id": 1216,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb < 3.5 OR laboratory.alb > 5.5) ORDER BY patient.birthday DESC",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND (laboratory.alb < 3.5 OR laboratory.alb > 5.5) ORDER BY patient.birthday DESC",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb > 3.5 OR laboratory.alb < 5.5) ORDER BY patient.birthday DESC",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb < 3.5 OR laboratory.alb > 5.5)"
        ]
      ]
    },
    {
      "id": 1217,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN alb BETWEEN 3.5 AND 5.5 THEN 'YES' ELSE 'NO' END FROM patient WHERE strftime('%Y', birthday) = '1982'",
          "SELECT iif(alb BETWEEN 3.5 AND 5.5, 'YES', 'NO') FROM patient WHERE strftime('%Y', birthday) = '1982'",
          "SELECT CASE WHEN alb BETWEEN 3.5 AND 5.5 THEN 'YES' ELSE 'NO' END AS RESULT FROM patient WHERE strftime('%Y', birthday) = '1982'",
          "SELECT CASE WHEN alb > 3.5 AND alb < 5.5 THEN 'YES' ELSE 'NO' END AS RESULT FROM patient WHERE strftime('%Y', birthday) = '1982'"
        ]
      ]
    },
    {
      "id": 1218,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN laboratory.ua > 8.0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'",
          "SELECT cast(sum(CASE WHEN laboratory.ua > 8.0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'",
          "SELECT cast(sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua > 8 OR laboratory.ua > 6.5",
          "SELECT cast(sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM laboratory WHERE ua > 8.0 OR ua > 6.5"
        ]
      ]
    },
    {
      "id": 1219,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE (laboratory.ua < 8.0 AND patient.sex = 'M') OR (laboratory.ua < 6.5 AND patient.sex = 'F')",
          "SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua < 8 AND (patient.sex = 'M' OR patient.sex = 'F')",
          "SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua < 8.0 OR (laboratory.ua < 6.5 AND patient.sex = 'F')",
          "SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua < 8.0 AND patient.sex = 'M' OR laboratory.ua < 6.5 AND patient.sex = 'F'"
        ]
      ]
    },
    {
      "id": 1220,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un = 29",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.un = 29",
          "SELECT id, sex, birthday FROM patient WHERE un = 29",
          "SELECT DISTINCT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.un = 29"
        ]
      ]
    },
    {
      "id": 1221,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id, sex, birthday FROM patient WHERE diagnosis = 'RA' AND un < 30",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'RA' AND laboratory.un < 30",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un < 30 AND patient.diagnosis = 'RA'",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'RA' AND laboratory.un < 30"
        ]
      ]
    },
    {
      "id": 1222,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.cre >= 1.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5 AND patient.sex = 'M'",
          "SELECT count(id) FROM patient WHERE sex = 'M' AND cre >= 1.5",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.cre >= 1.5"
        ]
      ]
    },
    {
      "id": 1223,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) > sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5",
          "SELECT sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) > sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.cre >= 1.5",
          "SELECT sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) - sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) > 0 FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5",
          "SELECT sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) > sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre BETWEEN 1.5 AND 2.5"
        ]
      ]
    },
    {
      "id": 1224,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT `t-bil`, id, sex, birthday FROM patient ORDER BY `t-bil` DESC LIMIT 1",
          "SELECT id, sex, birthday FROM patient ORDER BY `t-bil` DESC LIMIT 1",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT `t-bil`, id, sex, birthday FROM laboratory ORDER BY `t-bil` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1225,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` > 2",
          "SELECT patient.sex, count(laboratory.`t-bil`) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`t-bil` >= 2 GROUP BY patient.sex",
          "SELECT patient.sex, count(laboratory.`t-bil`) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`t-bil` > 2 GROUP BY patient.sex",
          "SELECT patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= 2"
        ]
      ]
    },
    {
      "id": 1226,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC LIMIT 1",
          "SELECT patient.id, laboratory.`t-cho` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id ORDER BY laboratory.`t-cho` DESC LIMIT 1",
          "SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC, patient.birthday ASC LIMIT 1",
          "SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC, patient.birthday DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1227,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday)) FROM patient WHERE sex = 'M' AND `t-cho` >= 250",
          "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday)) FROM patient WHERE sex = 'M' AND `t-cho` > 250",
          "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-cho` >= 250",
          "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday)) FROM patient WHERE gender = 'M' AND `t-cho` >= 250"
        ]
      ]
    },
    {
      "id": 1228,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tg > 100",
          "SELECT patient.id, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tg > 300",
          "SELECT patient.id, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 100",
          "SELECT patient.id, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300"
        ]
      ]
    },
    {
      "id": 1229,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 200 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 50",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg >= 200 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 50",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg >= 200 AND (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) > 50",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg >= 200 AND strftime('%Y', 'now') - strftime('%Y', patient.birthday) > 50"
        ]
      ]
    },
    {
      "id": 1230,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '-' AND laboratory.cpk < 250",
          "SELECT DISTINCT id FROM patient WHERE admission = '-' AND cpk < 250",
          "SELECT DISTINCT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.cpk < 250",
          "SELECT id FROM patient WHERE admission = '-' AND cpk < 250"
        ]
      ]
    },
    {
      "id": 1231,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956' AND patient.sex = 'M' AND laboratory.cpk >= 250",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956' AND patient.sex = 'M' AND laboratory.cpk > 250",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.cpk >= 250 AND strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956'",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE substr(cast(patient.birthday AS TEXT), 1, 4) BETWEEN '1936' AND '1956' AND patient.sex = 'M' AND laboratory.cpk >= 250"
        ]
      ]
    },
    {
      "id": 1232,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250",
          "SELECT patient.id, patient.sex, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250",
          "SELECT patient.id, patient.sex, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu > 180 AND laboratory.`t-cho` < 250",
          "SELECT patient.id, patient.sex, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND laboratory.`t-cho` < 250"
        ]
      ]
    },
    {
      "id": 1233,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, laboratory.glu FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.`first date`) = '1991' AND laboratory.glu < 180",
          "SELECT patient.id, laboratory.glu FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) = '1991' AND laboratory.glu < 180",
          "SELECT patient.id, laboratory.glu FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.`first date`) >= '1991' AND laboratory.glu < 180",
          "SELECT patient.id, laboratory.glu FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) >= '1991' AND laboratory.glu < 180"
        ]
      ]
    },
    {
      "id": 1234,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0 GROUP BY patient.id, patient.sex, patient.birthday ORDER BY patient.birthday ASC",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE (laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0) GROUP BY patient.id, patient.sex, patient.birthday ORDER BY patient.birthday ASC"
        ]
      ]
    },
    {
      "id": 1235,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc < 3.5",
          "SELECT patient.diagnosis, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc < 3.5",
          "SELECT patient.diagnosis, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rbc < 3.5",
          "SELECT DISTINCT patient.diagnosis, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc < 3.5"
        ]
      ]
    },
    {
      "id": 1236,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND laboratory.rbc BETWEEN 3.5 AND 6.0",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 50 AND laboratory.rbc BETWEEN 3.5 AND 6.0",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND (laboratory.rbc < 3.5 OR laboratory.rbc > 6.0)",
          "SELECT CASE WHEN patient.admission = '+' THEN 'YES' ELSE 'NO' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND laboratory.rbc BETWEEN 3.5 AND 6.0"
        ]
      ]
    },
    {
      "id": 1237,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id, sex FROM patient WHERE admission = '-' AND hgb < 10",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.hgb < 10",
          "SELECT DISTINCT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.hgb < 10",
          "SELECT patient.id, patient.sex FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.hgb < 10"
        ]
      ]
    },
    {
      "id": 1238,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.hgb BETWEEN 10 AND 17 ORDER BY patient.birthday LIMIT 1",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.hgb BETWEEN 10 AND 17 ORDER BY patient.birthday ASC LIMIT 1",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.hgb BETWEEN 10 AND 17 ORDER BY patient.birthday LIMIT 1",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.hgb BETWEEN 10 AND 17 ORDER BY patient.birthday ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1239,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct >= 52 GROUP BY patient.id HAVING count(laboratory.id) > 2",
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct >= 52 GROUP BY patient.id HAVING count(laboratory.id) > 2",
          "SELECT patient.id, (strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct >= 52 GROUP BY patient.id HAVING count(laboratory.id) > 2",
          "SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct > 52 GROUP BY patient.id HAVING count(laboratory.id) > 2"
        ]
      ]
    },
    {
      "id": 1240,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(hct) FROM laboratory WHERE date LIKE '1991%' AND hct < 29",
          "SELECT avg(hct) FROM laboratory WHERE `date` LIKE '1991%' AND hct < 29",
          "SELECT avg(hct) FROM laboratory WHERE strftime('%Y', `date`) = '1991' AND hct < 29",
          "SELECT avg(hct) FROM laboratory WHERE cast(strftime('%Y', `date`) AS INT) = 1991 AND hct < 29"
        ]
      ]
    },
    {
      "id": 1241,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END), sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) FROM laboratory",
          "SELECT cast(sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) FROM laboratory",
          "SELECT sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END) , sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) FROM laboratory",
          "SELECT cast(sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), cast(sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM laboratory"
        ]
      ]
    },
    {
      "id": 1242,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` LIKE '1984%' AND laboratory.plt BETWEEN 100 AND 400",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', `examination date`) = '1984' AND laboratory.plt BETWEEN 100 AND 400 AND strftime('%Y', birthday) - strftime('%Y', `examination date`) < 50",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', 'now') - strftime('%Y', birthday) < 50 AND laboratory.plt BETWEEN 100 AND 400 AND strftime('%Y', `examination date`) = '1984'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', 'now') - strftime('%Y', birthday) < 50 AND laboratory.plt BETWEEN 100 AND 400 AND laboratory.`date` LIKE '1984%'"
        ]
      ]
    },
    {
      "id": 1243,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id",
          "SELECT cast(sum(CASE WHEN laboratory.pt >= 14 AND patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 55"
        ]
      ]
    },
    {
      "id": 1244,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) > '1992' AND laboratory.pt < 14",
          "SELECT patient.`first date`, laboratory.pt FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) > '1992' AND laboratory.pt < 14",
          "SELECT patient.`first date`, laboratory.pt FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) > 1992 AND laboratory.pt < 14",
          "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) > '1992' AND laboratory.pt < 14"
        ]
      ]
    },
    {
      "id": 1245,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45",
          "SELECT count(laboratory.aptt) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45",
          "SELECT count(laboratory.`date`) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.aptt < 45 AND examination.`examination date` > '1997-01-01'"
        ]
      ]
    },
    {
      "id": 1246,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 3",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 3",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 3",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 3"
        ]
      ]
    },
    {
      "id": 1247,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND (laboratory.fg <= 150 OR laboratory.fg >= 450)",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND (laboratory.fg <= 150 OR laboratory.fg >= 450)",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND (laboratory.fg < 150 OR laboratory.fg > 450)",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND (laboratory.fg < 150 OR laboratory.fg > 450)"
        ]
      ]
    },
    {
      "id": 1248,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg BETWEEN 150 AND 450",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.fg BETWEEN 150 AND 450 AND patient.birthday > '1980-01-01'",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.fg BETWEEN 150 AND 450 AND patient.birthday > '1980-01-01'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg BETWEEN 150 AND 450"
        ]
      ]
    },
    {
      "id": 1249,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`u-pro` > 30",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` > 30",
          "SELECT DISTINCT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`u-pro` > 30",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` > 30"
        ]
      ]
    },
    {
      "id": 1250,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` BETWEEN 0 AND 30 AND patient.diagnosis = 'SLE'",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`u-pro` BETWEEN 0 AND 30 AND patient.diagnosis = 'SLE'",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SLE' AND laboratory.`u-pro` BETWEEN 0 AND 30",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.`u-pro` BETWEEN 0 AND 30"
        ]
      ]
    },
    {
      "id": 1251,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms = 'Abortion' AND laboratory.igg < 900",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms = 'abortion' AND laboratory.igg < 900",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms = 'abortion' AND laboratory.igg < 900",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms = 'Abortion' AND laboratory.igg < 900"
        ]
      ]
    },
    {
      "id": 1252,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms IS NOT NULL AND laboratory.igg BETWEEN 900 AND 2000",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms IS NOT NULL AND laboratory.igg BETWEEN 900 AND 2000",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND examination.symptoms IS NOT NULL AND laboratory.igg BETWEEN 900 AND 2000",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms IS NOT NULL AND laboratory.igg >= 900 AND laboratory.igg <= 2000"
        ]
      ]
    },
    {
      "id": 1253,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1254,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE strftime('%Y', `first date`) >= '1990' AND iga BETWEEN 80 AND 500",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) >= '1990' AND laboratory.iga BETWEEN 80 AND 500",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) >= '1990' AND laboratory.iga BETWEEN 80 AND 500",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.`first date`) >= '1990' AND laboratory.iga BETWEEN 80 AND 500"
        ]
      ]
    },
    {
      "id": 1255,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.igm NOT BETWEEN 40 AND 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1",
          "SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.igm < 40 OR laboratory.igm > 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE laboratory.igm < 40 OR laboratory.igm > 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE laboratory.igm NOT BETWEEN 40 AND 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1256,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.crp IN ('+', '-') AND patient.description IS NULL",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.description IS NULL AND (laboratory.crp LIKE '+' OR laboratory.crp LIKE '-' OR laboratory.crp < 1.0)",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.description IS NULL AND (laboratory.crp LIKE '+' OR laboratory.crp LIKE '-' OR laboratory.crp < 1)",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.description IS NULL AND laboratory.crp IN ('+', '-') AND laboratory.crp < 1"
        ]
      ]
    },
    {
      "id": 1257,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.crp NOT IN ('+-', '-') AND laboratory.crp >= 1.0 AND strftime('%Y', 'now') - strftime('%Y', patient.birthday) < 18",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.crp NOT IN ('-', '+') AND cast(strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS INT) < 18",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.crp NOT IN ('-', '+') AND cast(strftime('%Y', 'now') - strftime('%Y', birthday) AS INT) < 18",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.crp NOT IN ('-', '+') AND cast(strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS INTEGER) < 18"
        ]
      ]
    },
    {
      "id": 1258,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ra IN ('-', '+-') AND laboratory.kct = '+'",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ra IN ('-', '+-') AND laboratory.kct = '+'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ra IN ('-', '+-') AND laboratory.kct = '+'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ra IN ('-', '+-') AND examination.kct = '+'"
        ]
      ]
    },
    {
      "id": 1259,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) > '1995' AND laboratory.ra IN ('-', '+')",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) > '1995' AND laboratory.ra IN ('-', '+')",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) > 1995 AND laboratory.ra IN ('-', '+')",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) > 1995 AND laboratory.ra IN ('-', '+')"
        ]
      ]
    },
    {
      "id": 1260,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 60",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rf < 20 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 60",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND strftime('%Y', date) - strftime('%Y', birthday) > 60",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS INT) > 60 AND laboratory.rf < 20"
        ]
      ]
    },
    {
      "id": 1261,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND examination.thrombosis = 0",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.rf < 20 AND examination.thrombosis = 0",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND examination.thrombosis = 0",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < '20' AND examination.thrombosis = 0"
        ]
      ]
    },
    {
      "id": 1262,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND laboratory.c3 > 35",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`ana pattern` = 'P' AND laboratory.c3 > 35",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.c3 > 35 AND examination.`ana pattern` = 'P'",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND laboratory.c3 > 35 AND patient.diagnosis = 'ANA'"
        ]
      ]
    },
    {
      "id": 1263,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.hct < 29 OR laboratory.hct > 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct < 29 OR laboratory.hct > 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1264,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.diagnosis = 'APS' AND laboratory.c4 > 10",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'APS' AND laboratory.c4 > 10",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'APS' AND laboratory.c4 > 10",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'APS' AND laboratory.c4 > 10"
        ]
      ]
    },
    {
      "id": 1265,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rnp IN ('-', '+-') AND patient.admission = '+'",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rnp IN ('-', '+-') AND patient.admission = '+'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rnp = '-' AND patient.admission = '+'",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rnp = '-' AND patient.admission = '+'"
        ]
      ]
    },
    {
      "id": 1266,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT birthday FROM patient WHERE rnp != '-' ORDER BY birthday DESC LIMIT 1",
          "SELECT birthday FROM patient WHERE rnp != '-' ORDER BY birthday LIMIT 1",
          "SELECT birthday FROM patient WHERE rnp <> '-' ORDER BY birthday DESC LIMIT 1",
          "SELECT birthday FROM patient WHERE rnp NOT IN ('-', '+') ORDER BY birthday DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1267,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.sm IN ('-', '+-') AND examination.thrombosis = 1",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.sm IN ('-', '0', '+') AND examination.thrombosis = 1",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.sm IN ('-', '+-') AND examination.thrombosis = '1'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.sm IN ('-', '0', '+') AND examination.thrombosis = '1'"
        ]
      ]
    },
    {
      "id": 1268,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE birthday IN ( SELECT min(birthday) FROM patient ) LIMIT 3",
          "SELECT id FROM patient WHERE birthday = ( SELECT max(birthday) FROM patient ) ORDER BY birthday LIMIT 3",
          "SELECT id FROM patient WHERE birthday = ( SELECT max(birthday) FROM patient ) AND birthday = ( SELECT max(birthday) FROM patient ) AND birthday = ( SELECT max(birthday) FROM patient )",
          "SELECT id FROM patient WHERE birthday = ( SELECT min(birthday) FROM patient ) AND birthday = ( SELECT min(birthday) FROM patient ) AND birthday = ( SELECT min(birthday) FROM patient )"
        ]
      ]
    },
    {
      "id": 1269,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+-') AND examination.`examination date` >= '1997-01-01'",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+-') AND examination.`examination date` >= '1997-01-01'",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+') AND examination.`examination date` >= '1997-01-01'",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', examination.`examination date`) > '1997' AND laboratory.sc170 IN ('-', '+')"
        ]
      ]
    },
    {
      "id": 1270,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+-') AND patient.sex = 'M' AND examination.symptoms = 'vertigo'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+-') AND patient.sex = 'M' AND examination.symptoms = 'vertigo'",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+-') AND patient.sex = 'M' AND examination.diagnosis = 'Normal' AND examination.symptoms = 'vertigo'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+-') AND patient.sex = 'M' AND examination.diagnosis = 'Normal' AND examination.symptoms = 'vertigo'"
        ]
      ]
    },
    {
      "id": 1271,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN ('-', '++') AND strftime('%Y', patient.`first date`) < '1990'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN ('-','+') AND strftime('%Y', patient.`first date`) < '1990'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) < '1990' AND laboratory.ssa IN ('-', '++')",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) < '1990' AND laboratory.ssa IN ('-', '+-')"
        ]
      ]
    },
    {
      "id": 1272,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE `first date` = ( SELECT min(`first date`) FROM patient ) AND ssa != '-'",
          "SELECT id FROM patient WHERE `first date` = ( SELECT min(`first date`) FROM patient ) AND ssa NOT IN ('-', '+')",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa NOT IN ('-', '+') ORDER BY patient.`first date` ASC LIMIT 1",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ssa NOT IN ('-', '+') ORDER BY patient.`first date` ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1273,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.ssb IN ('-', '+-') AND examination.diagnosis = 'SLE'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.ssb IN ('-', '+-') AND examination.diagnosis = 'SLE'",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.ssb IN ('-', '+-') AND patient.diagnosis = 'SLE'",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.ssb IN ('-', '+-') AND examination.diagnosis = 'SLE'"
        ]
      ]
    },
    {
      "id": 1274,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms IS NOT NULL AND laboratory.ssb IN ('-', '+-')",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms IS NOT NULL AND patient.ssb IN ('-', '+-')",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms IS NOT NULL AND patient.ssb IN ('-', '+-')",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms IS NOT NULL AND patient.diagnosis = 'Normal' AND laboratory.ssb IN ('-', '+-')"
        ]
      ]
    },
    {
      "id": 1275,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.centromea IN ('-', '+') AND laboratory.ssa IN ('-', '+') AND patient.sex = 'M'",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.centromea IN ('-', '+') AND laboratory.ssa IN ('-', '+') AND patient.sex = 'M'",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.centromea IN ('-', '+') AND laboratory.ssa IN ('-', '+') AND patient.sex = 'M'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.centromea IN ('-', '+') AND laboratory.ssa IN ('-', '+')"
        ]
      ]
    },
    {
      "id": 1276,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE laboratory.dna >= 8",
          "SELECT DISTINCT examination.diagnosis FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.dna >= 8",
          "SELECT DISTINCT examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE laboratory.dna >= 8",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE laboratory.dna >= 8"
        ]
      ]
    },
    {
      "id": 1277,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE description IS NULL AND dna < 8",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.dna < 8 AND patient.description IS NULL",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL",
          "SELECT count(id) FROM laboratory WHERE dna < 8 AND description IS NULL"
        ]
      ]
    },
    {
      "id": 1278,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`dna-ii` < 8 AND patient.admission = '+'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '+' AND laboratory.`dna-ii` < 8",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.ana < 8 AND patient.admission = '+'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`ana` < 8 AND patient.admission = '+'"
        ]
      ]
    },
    {
      "id": 1279,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN laboratory.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.diagnosis = 'SLE'",
          "SELECT cast(sum(CASE WHEN examination.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.got >= 60",
          "SELECT cast(sum(CASE WHEN laboratory.got >= 60 AND examination.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id",
          "SELECT cast(sum(CASE WHEN laboratory.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'SLE'"
        ]
      ]
    },
    {
      "id": 1280,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE sex = 'M' AND got < 60",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.got < 60",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND patient.sex = 'M'",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.got < 60"
        ]
      ]
    },
    {
      "id": 1281,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT birthday FROM patient WHERE got >= 60 ORDER BY birthday LIMIT 1",
          "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60 ORDER BY patient.birthday LIMIT 1",
          "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60 ORDER BY patient.birthday DESC LIMIT 1",
          "SELECT birthday FROM patient WHERE got >= 60 ORDER BY birthday ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1282,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3",
          "SELECT patient.`first date`, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3",
          "SELECT patient.`first date`, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1283,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND patient.sex = 'M'",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.got < 60 AND patient.sex = 'M'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.got < 60 AND patient.sex = 'M'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.got < 60"
        ]
      ]
    },
    {
      "id": 1284,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.`first date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500 ORDER BY laboratory.ldh DESC LIMIT 1",
          "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh < 500 ORDER BY laboratory.ldh DESC LIMIT 1",
          "SELECT patient.`first date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id ORDER BY laboratory.ldh DESC LIMIT 1",
          "SELECT `first date` FROM patient WHERE id = ( SELECT id FROM laboratory ORDER BY ldh DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 1285,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT `first date` FROM patient WHERE ldh >= 500 ORDER BY `first date` DESC LIMIT 1",
          "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh >= 500 ORDER BY patient.`first date` DESC LIMIT 1",
          "SELECT `first date` FROM patient WHERE ldh > 500 ORDER BY `first date` DESC LIMIT 1",
          "SELECT patient.`first date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE ldh >= 500 ORDER BY patient.`first date` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1286,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp >= 300 AND patient.admission = '+'",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '+' AND laboratory.alp >= 300",
          "SELECT count(patient.admission) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp >= 300 AND patient.admission = '+'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '+' AND laboratory.alp >= 300"
        ]
      ]
    },
    {
      "id": 1287,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.alp < 300",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.alp < 300",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.alp < 300",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission = '-'"
        ]
      ]
    },
    {
      "id": 1288,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.tp < 6",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.tp < 6.0",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.tp < 6",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND laboratory.tp < 6"
        ]
      ]
    },
    {
      "id": 1289,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6 AND 8.5",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6 AND 8",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SJS' AND (laboratory.tp > 6.0 AND laboratory.tp < 8.5)",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6 AND 8"
        ]
      ]
    },
    {
      "id": 1290,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb > 3.5 AND laboratory.alb < 5.5 ORDER BY laboratory.alb DESC LIMIT 1",
          "SELECT `examination date` FROM laboratory WHERE alb > 3.5 AND alb < 5.5",
          "SELECT examination.`examination date` FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.alb > 3.5 AND laboratory.alb < 5.5",
          "SELECT examination.`examination date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.alb > 3.5 AND laboratory.alb < 5.5"
        ]
      ]
    },
    {
      "id": 1291,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5 AND patient.sex = 'M'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5"
        ]
      ]
    },
    {
      "id": 1292,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.`acl igg`, examination.`acl igm`, examination.`acl iga` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.ua > 6.50 ORDER BY laboratory.ua DESC LIMIT 1",
          "SELECT examination.`acl igg` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.ua > 6.50 ORDER BY laboratory.ua DESC LIMIT 1",
          "SELECT examination.`acl igg`, examination.`acl iga`, examination.`acl igm` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.ua > 6.50 ORDER BY laboratory.ua DESC LIMIT 1",
          "SELECT examination.`acl igg`, examination.`acl igm`, examination.`acl iga` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.ua > 6.50"
        ]
      ]
    },
    {
      "id": 1293,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT max(examination.ana) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cre < 1.5",
          "SELECT max(examination.ana) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.cre < 1.5",
          "SELECT examination.ana FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cre < 1.5 ORDER BY examination.ana DESC LIMIT 1",
          "SELECT max(examination.ana) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.cre < 1.5"
        ]
      ]
    },
    {
      "id": 1294,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.cre < 1.5 ORDER BY laboratory.`acl iga` DESC LIMIT 1",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.cre < 1.5 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre < 1.5 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cre < 1.5 ORDER BY examination.`acl iga` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1295,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-bil` >= 2 AND examination.`ana pattern` LIKE '%P%'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-bil` > 2 AND examination.`ana pattern` LIKE '%P%'",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-bil` >= 2 AND examination.`ana pattern` LIKE '%P%'",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-bil` > 2 AND examination.`ana pattern` LIKE '%P%'"
        ]
      ]
    },
    {
      "id": 1296,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.ana FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-bil` < 2 ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT examination.ana FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-bil` < 2.0 ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT examination.ana FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-bil` < 2.0 ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT examination.ana FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-bil` < 2 ORDER BY laboratory.`t-bil` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1297,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`t-cho` > 250 AND laboratory.kct = '-'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-cho` > 250 AND examination.kct = '-'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-cho` > 250 AND examination.kct = '-'",
          "SELECT count(laboratory.`t-cho`) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-cho` > 250 AND examination.kct = '-'"
        ]
      ]
    },
    {
      "id": 1298,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P'",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`ana pattern` = 'P' AND laboratory.`t-cho` < 250",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND laboratory.`t-cho` < 250"
        ]
      ]
    },
    {
      "id": 1299,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms IS NOT NULL AND laboratory.tg < 200",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.tg < 200 AND examination.symptoms IS NOT NULL",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND examination.symptoms IS NOT NULL AND laboratory.tg < 200",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND examination.symptoms IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1300,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200 ORDER BY laboratory.tg DESC LIMIT 1",
          "SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tg < 200 ORDER BY laboratory.tg DESC LIMIT 1",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200 ORDER BY laboratory.tg DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200 GROUP BY patient.diagnosis ORDER BY count(laboratory.tg) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1301,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250",
          "SELECT patient.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250",
          "SELECT patient.id FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250"
        ]
      ]
    },
    {
      "id": 1302,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+')",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+')",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+')",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cpk < 250 AND examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+'"
        ]
      ]
    },
    {
      "id": 1303,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT min(birthday) FROM patient WHERE birthday IS NOT NULL AND glucose > 180",
          "SELECT min(birthday) FROM patient WHERE birthday IS NOT NULL AND glu > 180",
          "SELECT min(birthday) FROM patient WHERE glu > 180",
          "SELECT min(birthday) FROM patient WHERE id IN ( SELECT id FROM laboratory WHERE glu > 180 )"
        ]
      ]
    },
    {
      "id": 1304,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 0 AND laboratory.glu < 180",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 0 AND patient.sex = 'F' AND laboratory.glu < 180",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.glu < 180 AND examination.diagnosis = 'Normal' AND examination.thrombosis = 0"
        ]
      ]
    },
    {
      "id": 1305,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE admission = '+' AND wbc BETWEEN 3.5 AND 9.0",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9 AND patient.admission = '+'",
          "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.wbc BETWEEN 3.5 AND 9 AND patient.admission = '+'",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0 AND patient.admission = '+'"
        ]
      ]
    },
    {
      "id": 1306,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0 AND patient.diagnosis = 'SLE'"
        ]
      ]
    },
    {
      "id": 1307,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc BETWEEN 3.5 AND 6.0 AND patient.admission = '-'",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rbc BETWEEN 3.5 AND 6.0 AND patient.admission = '-'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc BETWEEN 3.5 AND 6 AND patient.admission = '-'",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc BETWEEN 3.5 AND 6.0 AND patient.admission = '-'"
        ]
      ]
    },
    {
      "id": 1308,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis IS NOT NULL AND examination.plt BETWEEN 100 AND 399",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis IS NOT NULL AND patient.id IN ( SELECT id FROM patient WHERE plt > 100 AND plt < 400 )",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis IS NOT NULL AND patient.id IN ( SELECT id FROM patient WHERE plt BETWEEN 100 AND 399 )",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis IS NOT NULL AND patient.id IN ( SELECT id FROM patient WHERE plt BETWEEN 100 AND 300 )"
        ]
      ]
    },
    {
      "id": 1309,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.plt, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'MCTD' AND laboratory.plt BETWEEN 100 AND 400",
          "SELECT laboratory.plt, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'MCTD' AND laboratory.plt BETWEEN 100 AND 399",
          "SELECT laboratory.plt, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'MCTD' AND (laboratory.plt > 100 AND laboratory.plt < 400)",
          "SELECT laboratory.plt, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'MCTD' AND laboratory.plt BETWEEN 100 AND 400"
        ]
      ]
    },
    {
      "id": 1310,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.pt) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.pt < 14",
          "SELECT avg(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.pt < 14",
          "SELECT avg(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.pt < 14 AND patient.sex = 'M'",
          "SELECT cast(sum(laboratory.pt) AS REAL) / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.pt < 14"
        ]
      ]
    },
    {
      "id": 1311,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2 AND examination.pt < 14",
          "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.pt < 14",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2 OR examination.thrombosis = 1 AND examination.pt < 14"
        ]
      ]
    },
    {
      "id": 1312,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'",
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'",
          "SELECT major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'",
          "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'"
        ]
      ]
    },
    {
      "id": 1313,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
          "SELECT count(member.member_id) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
          "SELECT count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'"
        ]
      ]
    },
    {
      "id": 1314,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Art' AND major.department = 'Art and Design Department'",
          "SELECT member.first_name, member.last_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.department = 'Art and Design Department'",
          "SELECT DISTINCT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'"
        ]
      ]
    },
    {
      "id": 1315,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(attendance.link_to_member) FROM attendance INNER JOIN EVENT ON attendance.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'Women''s Soccer'"
        ]
      ]
    },
    {
      "id": 1316,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT member.phone FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT DISTINCT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
        ]
      ]
    },
    {
      "id": 1317,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'",
          "SELECT count(member.member_id) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'",
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'",
          "SELECT sum(CASE WHEN member.t_shirt_size = 'Medium' THEN 1 ELSE 0 END) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
        ]
      ]
    },
    {
      "id": 1318,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_name ORDER BY count(attendance.link_to_event) DESC LIMIT 1",
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_name ORDER BY count(attendance.link_to_member) DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY count(attendance.link_to_event) DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY count(attendance.link_to_member) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1319,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT DISTINCT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT college FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE POSITION = 'Vice President' )"
        ]
      ]
    },
    {
      "id": 1320,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT DISTINCT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT EVENT.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN EVENT ON attendance.link_to_event = EVENT.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'"
        ]
      ]
    },
    {
      "id": 1321,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE strftime('%Y', attendance.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT count(event.event_name) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.event_name = 'Student_Club'"
        ]
      ]
    },
    {
      "id": 1322,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING count(event.event_id) > 10",
          "SELECT count(event.event_id) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING count(event.event_id) > 10",
          "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_event) > 10",
          "SELECT count(event.event_id) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_event) > 10"
        ]
      ]
    },
    {
      "id": 1323,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING count(attendance.link_to_member) > 20",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING count(attendance.link_to_event) > 20",
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_name HAVING count(attendance.link_to_member) > 20",
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_name HAVING count(attendance.link_to_event) > 20"
        ]
      ]
    },
    {
      "id": 1324,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'",
          "SELECT cast(count(event.event_id) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'",
          "SELECT cast(count(attendance.link_to_event) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'",
          "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE substr(event.event_date, 1, 4) = '2020' AND event.type = 'Meeting'"
        ]
      ]
    },
    {
      "id": 1325,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
          "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id ORDER BY expense.cost DESC LIMIT 1",
          "SELECT expense_description FROM expense WHERE expense_description = ( SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1 )",
          "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id ORDER BY budget.spent DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1326,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT count(DISTINCT member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1327,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'",
          "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Laugh Out Loud'",
          "SELECT DISTINCT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'"
        ]
      ]
    },
    {
      "id": 1328,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
          "SELECT DISTINCT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
          "SELECT member.last_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Law and Constitutional Studies'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'"
        ]
      ]
    },
    {
      "id": 1329,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
          "SELECT zip_code.county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri'"
        ]
      ]
    },
    {
      "id": 1330,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'",
          "SELECT DISTINCT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'",
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'",
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler'"
        ]
      ]
    },
    {
      "id": 1331,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
          "SELECT sum(income.amount) FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President'",
          "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
          "SELECT income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President'"
        ]
      ]
    },
    {
      "id": 1332,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food'",
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'September Meeting' AND budget.category = 'Food'",
          "SELECT sum(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'September Meeting' AND budget.category = 'Food'",
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_event = attendance.link_to_event WHERE event.event_name = 'September Meeting' AND budget.category = 'Food'"
        ]
      ]
    },
    {
      "id": 1333,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President'",
          "SELECT zip_code.city, zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'President'",
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.position = 'President'",
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President of Student_Club'"
        ]
      ]
    },
    {
      "id": 1334,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois'",
          "SELECT member.first_name, member.last_name FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Illinois'",
          "SELECT DISTINCT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1335,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'",
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'",
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'",
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_event = attendance.link_to_event WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'"
        ]
      ]
    },
    {
      "id": 1336,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Pierce' AND member.last_name = 'Guidi'",
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Pierce' AND member.first_name = 'Guido'",
          "SELECT department FROM major WHERE major_id IN ( SELECT link_to_major FROM member WHERE last_name = 'Pierce' AND first_name = 'Guido' )",
          "SELECT DISTINCT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Pierce' AND member.last_name = 'Guidi'"
        ]
      ]
    },
    {
      "id": 1337,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'October Speaker'",
          "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker'",
          "SELECT sum(budget.amount) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'October Speaker'",
          "SELECT sum(budget.amount) FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker'"
        ]
      ]
    },
    {
      "id": 1338,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN expense.approved = 'true' THEN 1 ELSE 0 END) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08'",
          "SELECT expense.approved FROM expense INNER JOIN EVENT ON expense.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'October Meeting' AND expense.expense_date = '2019-10-08'",
          "SELECT sum(CASE WHEN expense.approved = 'true' THEN 1 ELSE 0 END) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_name = 'October Meeting' AND expense.expense_date = '2019-10-08'",
          "SELECT sum(CASE WHEN expense.approved = 'true' THEN 1 ELSE 0 END) FROM expense INNER JOIN event ON expense.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08'"
        ]
      ]
    },
    {
      "id": 1339,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE strftime('%Y-%m', expense.expense_date) IN ('2019-09', '2019-10') AND member.first_name = 'Elijah' AND member.last_name = 'Allen'",
          "SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND strftime('%Y-%m', expense.expense_date) IN ('2019-09', '2019-10')",
          "SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE substr(expense.expense_date, 1, 7) IN ('2019-09', '2019-10') AND member.first_name = 'Elijah' AND member.last_name = 'Allen'",
          "SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND substr(expense.expense_date, 1, 7) IN ('2019-09', '2019-10')"
        ]
      ]
    },
    {
      "id": 1340,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN strftime('%Y', event.event_date) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN strftime('%Y', event.event_date) = '2020' THEN budget.spent ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event",
          "SELECT sum(CASE WHEN strftime('%Y', event.event_date) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN strftime('%Y', event.event_date) = '2020' THEN budget.spent ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id",
          "SELECT sum(CASE WHEN substr(event.event_date, 1, 4) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN substr(event.event_date, 1, 4) = '2020' THEN budget.spent ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event",
          "SELECT sum(CASE WHEN substr(event.event_date, 1, 4) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN substr(event.event_date, 1, 4) = '2020' THEN budget.spent ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id"
        ]
      ]
    },
    {
      "id": 1341,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT LOCATION FROM event WHERE event_name = 'Spring Budget Review'",
          "SELECT LOCATION FROM EVENT WHERE event_name = 'Spring Budget Review'",
          "SELECT DISTINCT LOCATION FROM event WHERE event_name = 'Spring Budget Review'",
          "SELECT location FROM event WHERE event_name = 'Spring Budget Review'"
        ]
      ]
    },
    {
      "id": 1342,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cost FROM expense WHERE expense_date = '2019-09-04' AND expense_description = 'Posters'",
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2019-09-04' AND expense.expense_description = 'Posters'",
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_date = '2019-09-04' AND expense.expense_description = 'Posters'",
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_date = '2019-09-04' AND expense.expense_description = 'Posters'"
        ]
      ]
    },
    {
      "id": 1343,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.remaining FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1",
          "SELECT budget.remaining FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1",
          "SELECT max(budget.remaining) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
          "SELECT budget.remaining FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Budget' AND budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1344,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising'",
          "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
          "SELECT notes FROM income WHERE `date_received` = '2019-09-14' AND source = 'Fundraising'",
          "SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising';"
        ]
      ]
    },
    {
      "id": 1345,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences'",
          "SELECT count(*) FROM major WHERE college = 'College of Humanities and Social Sciences'",
          "SELECT count(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
          "SELECT count(major.major_id) FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.college = 'College of Humanities and Social Sciences'"
        ]
      ]
    },
    {
      "id": 1346,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
          "SELECT phone FROM member WHERE last_name = 'Jacobs' AND first_name = 'Carlo'",
          "SELECT phone FROM member WHERE FIRST_NAME = 'Carlo' AND LAST_NAME = 'Jacobs'",
          "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobson'"
        ]
      ]
    },
    {
      "id": 1347,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'",
          "SELECT zip_code.county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'",
          "SELECT DISTINCT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'"
        ]
      ]
    },
    {
      "id": 1348,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'November Meeting'",
          "SELECT sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'November Meeting'",
          "SELECT count(*) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'November Meeting' AND budget.remaining < 0",
          "SELECT count(budget.budget_id) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'November Meeting' AND budget.remaining < 0"
        ]
      ]
    },
    {
      "id": 1349,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'September Speaker'",
          "SELECT sum(budget.amount) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'September Speaker'",
          "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker'",
          "SELECT sum(budget.amount) FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker'"
        ]
      ]
    },
    {
      "id": 1350,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_date = '2019-08-20' AND expense.expense_description = 'Post Cards, Posters'",
          "SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20'",
          "SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_date = '2019-8-20' AND expense.expense_description = 'Post Cards, Posters'",
          "SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20'"
        ]
      ]
    },
    {
      "id": 1351,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Thomason' AND member.first_name = 'Brent'",
          "SELECT DISTINCT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'",
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'"
        ]
      ]
    },
    {
      "id": 1352,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large'",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large'",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE t_shirt_size = 'Large' AND major.major_name = 'Human Development and Family Studies'",
          "SELECT count(member.first_name) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large'"
        ]
      ]
    },
    {
      "id": 1353,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'",
          "SELECT zip_code.type FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'",
          "SELECT zip_code.type FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'",
          "SELECT DISTINCT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'"
        ]
      ]
    },
    {
      "id": 1354,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT DISTINCT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT major.major_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT DISTINCT major.major_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'"
        ]
      ]
    },
    {
      "id": 1355,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT DISTINCT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT DISTINCT zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'"
        ]
      ]
    },
    {
      "id": 1356,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President'",
          "SELECT department FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE POSITION = 'President' )",
          "SELECT department FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE position = 'President' )",
          "SELECT DISTINCT department FROM major WHERE major_id IN ( SELECT link_to_major FROM member WHERE POSITION = 'President' )"
        ]
      ]
    },
    {
      "id": 1357,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'Dues'",
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' AND member.first_name = 'Connor' AND member.last_name = 'Hilton'",
          "SELECT income.date_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'Dues'",
          "SELECT income.date_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.source = 'Dues' AND member.first_name = 'Connor' AND member.last_name = 'Hilton'"
        ]
      ]
    },
    {
      "id": 1358,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received LIMIT 1",
          "SELECT DISTINCT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' GROUP BY member.first_name, member.last_name ORDER BY income.date_received LIMIT 1"
        ]
      ]
    },
    {
      "id": 1359,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement'",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement'",
          "SELECT sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement'",
          "SELECT sum(CASE WHEN event.event_name = 'Yearly Kickoff' AND budget.category = 'Advertisement' THEN budget.amount ELSE 0 END) / sum(CASE WHEN event.event_name = 'October Meeting' AND budget.category = 'Advertisement' THEN budget.amount ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event"
        ]
      ]
    },
    {
      "id": 1360,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'November Speaker'",
          "SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker'",
          "SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'November Speaker'",
          "SELECT cast(sum(CASE WHEN event.event_name = 'November Speaker' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking'"
        ]
      ]
    },
    {
      "id": 1361,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Pizza'",
          "SELECT sum(cost) FROM expense WHERE expense_description = 'Pizza'",
          "SELECT sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza'",
          "SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza'"
        ]
      ]
    },
    {
      "id": 1362,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
          "SELECT count(city) FROM zip_code WHERE state = 'Virginia' AND county = 'Orange County'",
          "SELECT count(zip_code.city) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.county = 'Orange County' AND zip_code.state = 'Virginia'",
          "SELECT count(zip_code.city) FROM zip_code INNER JOIN zip_code ON zip_code.county = 'Orange County' AND zip_code.state = 'Virginia'"
        ]
      ]
    },
    {
      "id": 1363,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
          "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
          "SELECT department FROM major WHERE college = 'Col of Humanities and Social Sciences'",
          "SELECT department FROM major WHERE college = 'Col of Humanities & Social Sciences'"
        ]
      ]
    },
    {
      "id": 1364,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.county, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'",
          "SELECT zip_code.city, zip_code.county, zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'",
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'",
          "SELECT zip_code.city, zip_code.county, zip_code.state FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'"
        ]
      ]
    },
    {
      "id": 1365,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id ORDER BY budget.remaining ASC LIMIT 1",
          "SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY budget.remaining ASC LIMIT 1",
          "SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY budget.remaining LIMIT 1",
          "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id ORDER BY budget.remaining LIMIT 1"
        ]
      ]
    },
    {
      "id": 1366,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'October Meeting'",
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting'",
          "SELECT DISTINCT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting'"
        ]
      ]
    },
    {
      "id": 1367,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY count(major.college) DESC LIMIT 1",
          "SELECT college FROM major GROUP BY college ORDER BY count(college) DESC LIMIT 1",
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY count(member.member_id) DESC LIMIT 1",
          "SELECT college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY college ORDER BY count(college) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1368,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'",
          "SELECT DISTINCT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = 8095553360"
        ]
      ]
    },
    {
      "id": 1369,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id ORDER BY budget.amount DESC LIMIT 1",
          "SELECT event_name FROM budget ORDER BY amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1370,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President'",
          "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President'",
          "SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President'",
          "SELECT DISTINCT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President'"
        ]
      ]
    },
    {
      "id": 1371,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(member.member_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
        ]
      ]
    },
    {
      "id": 1372,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'",
          "SELECT income.date_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'",
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason' GROUP BY income.date_received",
          "SELECT DISTINCT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'"
        ]
      ]
    },
    {
      "id": 1373,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Maryland'",
          "SELECT count(zip_code.city) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Maryland'",
          "SELECT count(*) FROM zip_code WHERE state = 'Maryland'",
          "SELECT count(zip_code.city) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland'"
        ]
      ]
    },
    {
      "id": 1374,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'",
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'",
          "SELECT count(attendance.link_to_event) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.phone = '954-555-6240'",
          "SELECT count(event.event_id) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'"
        ]
      ]
    },
    {
      "id": 1375,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education'",
          "SELECT member.first_name, member.last_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.department = 'School of Applied Sciences, Technology and Education'",
          "SELECT DISTINCT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'School of Applied Sciences, Technology and Education'"
        ]
      ]
    },
    {
      "id": 1376,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' ORDER BY cast(budget.spent AS REAL) / budget.amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1377,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member WHERE POSITION = 'President'",
          "SELECT count(member_id) FROM member WHERE POSITION = 'President'",
          "SELECT count(*) FROM member WHERE position = 'President'",
          "SELECT count(member_id) FROM member WHERE position = 'President'"
        ]
      ]
    },
    {
      "id": 1378,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT max(spent) FROM budget",
          "SELECT spent FROM budget ORDER BY spent DESC LIMIT 1",
          "SELECT budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.spent DESC LIMIT 1",
          "SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.spent DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1379,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(event_id) FROM event WHERE strftime('%Y', event_date) = '2020' AND TYPE = 'Meeting'",
          "SELECT count(event_id) FROM event WHERE substr(event_date, 1, 4) = '2020' AND TYPE = 'Meeting'",
          "SELECT count(*) FROM event WHERE strftime('%Y', event_date) = '2020' AND TYPE = 'Meeting'",
          "SELECT count(event_id) FROM event WHERE event_date LIKE '2020%' AND TYPE = 'Meeting'"
        ]
      ]
    },
    {
      "id": 1380,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(spent) FROM budget WHERE category = 'Food'",
          "SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
          "SELECT sum(budget.spent) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Food'",
          "SELECT sum(spent) FROM budget WHERE category LIKE 'Food'"
        ]
      ]
    },
    {
      "id": 1381,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING count(attendance.link_to_event) > 7",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY attendance.link_to_member HAVING count(attendance.link_to_event) > 7",
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id GROUP BY member.first_name, member.last_name HAVING count(attendance.link_to_event) > 7",
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id GROUP BY attendance.link_to_member HAVING count(attendance.link_to_event) > 7"
        ]
      ]
    },
    {
      "id": 1382,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN major ON member.link_to_major = major.major_id WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design'",
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN major ON member.link_to_major = major.major_id WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design'"
        ]
      ]
    },
    {
      "id": 1383,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'",
          "SELECT member.first_name, member.last_name FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'",
          "SELECT DISTINCT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'",
          "SELECT DISTINCT member.first_name, member.last_name FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'"
        ]
      ]
    },
    {
      "id": 1384,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
          "SELECT count(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
          "SELECT sum(income.amount) FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
          "SELECT count(*) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'"
        ]
      ]
    },
    {
      "id": 1385,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 40",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 50",
          "SELECT DISTINCT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 40",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40"
        ]
      ]
    },
    {
      "id": 1386,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_name = 'Yearly Kickoff'",
          "SELECT sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.event_name = 'Yearly Kickoff'",
          "SELECT sum(expense.cost) FROM expense INNER JOIN EVENT ON expense.link_to_member = EVENT.event_id WHERE EVENT.event_name = 'Yearly Kickoff'",
          "SELECT sum(expense.cost) FROM expense INNER JOIN EVENT ON expense.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'Yearly Kickoff'"
        ]
      ]
    },
    {
      "id": 1387,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Yearly Kickoff'",
          "SELECT member.first_name, member.last_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON member.member_id = budget.link_to_event WHERE event.event_name = 'Yearly Kickoff'",
          "SELECT member.first_name, member.last_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_event = attendance.link_to_event WHERE event.event_name = 'Yearly Kickoff'",
          "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN budget ON budget.link_to_event = attendance.link_to_event INNER JOIN member ON member.member_id = attendance.link_to_member WHERE event.event_name = 'Yearly Kickoff'"
        ]
      ]
    },
    {
      "id": 1388,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1",
          "SELECT member.first_name, member.last_name, income.source FROM member INNER JOIN income ON member.member_id = income.link_to_member ORDER BY income.amount DESC LIMIT 1",
          "SELECT member.first_name, member.last_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id GROUP BY member.first_name, member.last_name, income.source ORDER BY sum(income.amount) DESC LIMIT 1",
          "SELECT member.first_name, member.last_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id GROUP BY income.source ORDER BY sum(income.amount) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1389,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY expense.cost ASC LIMIT 1",
          "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY expense.cost LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget ORDER BY expense.cost ASC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN expense ON event.event_id = expense.link_to_event ORDER BY expense.cost ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1390,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN event ON budget.link_to_event = event.event_id"
        ]
      ]
    },
    {
      "id": 1391,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) FROM member INNER JOIN major ON member.link_to_major = major.major_id",
          "SELECT cast(count(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE NULL END) AS REAL) / count(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE NULL END) FROM member INNER JOIN major ON member.link_to_major = major.major_id",
          "SELECT cast(sum(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) FROM member INNER JOIN major ON member.link_to_major = major.major_id",
          "SELECT cast(count(CASE WHEN major.major_name = 'Finance' THEN member.member_id ELSE NULL END) AS REAL) / count(CASE WHEN major.major_name = 'Physics' THEN member.member_id ELSE NULL END) FROM member INNER JOIN major ON member.link_to_major = major.major_id"
        ]
      ]
    },
    {
      "id": 1392,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT source, max(amount) FROM income WHERE date_received LIKE '2019-09%' GROUP BY source",
          "SELECT source, sum(amount) FROM income WHERE date_received LIKE '2019-09%' GROUP BY source ORDER BY sum(amount) DESC LIMIT 1",
          "SELECT source FROM income WHERE date_received LIKE '2019-09%' GROUP BY source ORDER BY sum(amount) DESC LIMIT 1",
          "SELECT source, max(amount) FROM income WHERE substr(`date_received`, 1, 7) = '2019-09' GROUP BY source"
        ]
      ]
    },
    {
      "id": 1393,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT first_name, last_name, email FROM member WHERE POSITION = 'Student Club Secretary'",
          "SELECT first_name, last_name, email FROM member WHERE POSITION = 'Secretary'",
          "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
          "SELECT first_name, last_name, email FROM member WHERE position = 'Student Club Secretary'"
        ]
      ]
    },
    {
      "id": 1394,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'",
          "SELECT count(DISTINCT member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'",
          "SELECT count(member.member_id) FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Physics Teaching'"
        ]
      ]
    },
    {
      "id": 1395,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2019' AND event.event_name = 'Community Theater'",
          "SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND event.event_name = 'Community Theater'",
          "SELECT count(member.member_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE strftime('%Y', event.event_date) = '2019' AND event.event_name = 'Community Theater'",
          "SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019'"
        ]
      ]
    },
    {
      "id": 1396,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_event), major.major_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'",
          "SELECT count(attendance.link_to_event), major.major_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'",
          "SELECT count(attendance.link_to_event), member.link_to_major FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'",
          "SELECT count(event.event_id), major.major_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'"
        ]
      ]
    },
    {
      "id": 1397,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT avg(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_status = 'Closed' AND budget.category = 'Food'",
          "SELECT avg(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_status = 'Closed' AND budget.category = 'Food'",
          "SELECT avg(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food' AND EVENT.event_status = 'Closed'",
          "SELECT avg(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food' AND event.event_status = 'Closed'"
        ]
      ]
    },
    {
      "id": 1398,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1",
          "SELECT event.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1",
          "SELECT EVENT.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1399,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT attendance.link_to_member FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT attendance.link_to_member FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT attendance.link_to_member FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT attendance.link_to_member FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.first_name = 'Maya' AND member.last_name = 'Mclean'"
        ]
      ]
    },
    {
      "id": 1400,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2019'",
          "SELECT cast(sum(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2019'",
          "SELECT cast(sum(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE substr(event.event_date, 1, 7) = '2019-01'",
          "SELECT cast(sum(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event WHERE strftime('%Y', event.event_date) = '2019'"
        ]
      ]
    },
    {
      "id": 1401,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters'",
          "SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'September Speaker' AND expense.expense_description = 'Posters'",
          "SELECT sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters'",
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters'"
        ]
      ]
    },
    {
      "id": 1402,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY count(t_shirt_size) DESC LIMIT 1",
          "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY count(*) DESC LIMIT 1",
          "SELECT t_shirt_size FROM member ORDER BY t_shirt_size DESC LIMIT 1",
          "SELECT member.t_shirt_size FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.t_shirt_size ORDER BY count(member.t_shirt_size) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1403,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' AND budget.remaining < 0",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status = 'Closed' AND budget.remaining < 0",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1404,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description, sum(expense.cost) FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description",
          "SELECT expense.expense_description, sum(expense.cost) FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' GROUP BY expense.expense_description",
          "SELECT expense.expense_description, sum(expense.cost) FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON event.event_id = attendance.link_to_event WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description",
          "SELECT DISTINCT expense.expense_description, sum(expense.cost) FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description"
        ]
      ]
    },
    {
      "id": 1405,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.amount, budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC",
          "SELECT budget.amount, budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'April Speaker' ORDER BY budget.amount ASC",
          "SELECT sum(budget.amount), budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY sum(budget.amount) ASC",
          "SELECT sum(budget.amount), budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' GROUP BY budget.category"
        ]
      ]
    },
    {
      "id": 1406,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1",
          "SELECT budget.budget_id FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1",
          "SELECT budget.amount FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1",
          "SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY budget.amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1407,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.amount DESC LIMIT 3",
          "SELECT budget.budget_id FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.amount DESC LIMIT 3",
          "SELECT budget.budget_id FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.amount DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1408,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(cost) FROM expense WHERE expense_description = 'Parking'",
          "SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Parking'",
          "SELECT sum(cost) FROM expense WHERE expense_description LIKE 'Parking'",
          "SELECT sum(CASE WHEN expense_description = 'Parking' THEN cost ELSE 0 END) FROM expense"
        ]
      ]
    },
    {
      "id": 1409,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(cost) FROM expense WHERE expense_date = '2019-08-20'",
          "SELECT sum(cost) FROM expense WHERE expense_date LIKE '2019-08-20'",
          "SELECT sum(cost) FROM expense WHERE expense_date LIKE '2019-08-20%'",
          "SELECT sum(t.cost) FROM expense AS t WHERE t.expense_date = '2019-08-20'"
        ]
      ]
    },
    {
      "id": 1410,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name",
          "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v'",
          "SELECT member.first_name, member.last_name, sum(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name",
          "SELECT member.first_name, member.last_name, sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name"
        ]
      ]
    },
    {
      "id": 1411,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT DISTINCT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'"
        ]
      ]
    },
    {
      "id": 1412,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'",
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'",
          "SELECT DISTINCT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.t_shirt_size = 'X-Large'",
          "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.t_shirt_size = 'X-Large'"
        ]
      ]
    },
    {
      "id": 1413,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.zip FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost < 50",
          "SELECT member.zip FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50",
          "SELECT DISTINCT member.zip FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost < 50",
          "SELECT zip FROM expense WHERE cost < 50"
        ]
      ]
    },
    {
      "id": 1414,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'",
          "SELECT DISTINCT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'",
          "SELECT major.major_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Philip' AND member.last_name = 'Cullen'"
        ]
      ]
    },
    {
      "id": 1415,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business'",
          "SELECT DISTINCT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business'",
          "SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' GROUP BY member.position",
          "SELECT member.position FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Business'"
        ]
      ]
    },
    {
      "id": 1416,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium'",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Economics' AND member.t_shirt_size = 'Medium'",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Economics' AND member.t_shirt_size = 'Medium'"
        ]
      ]
    },
    {
      "id": 1417,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30",
          "SELECT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30",
          "SELECT DISTINCT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30",
          "SELECT DISTINCT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30"
        ]
      ]
    },
    {
      "id": 1418,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.location = 'MU 215'",
          "SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215'"
        ]
      ]
    },
    {
      "id": 1419,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_date = '2020-03-24T12:00:00'",
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_date = '2020-03-24T12:00:00'",
          "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00'"
        ]
      ]
    },
    {
      "id": 1420,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT DISTINCT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT major.major_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President' GROUP BY major.major_name"
        ]
      ]
    },
    {
      "id": 1421,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Mathematics'",
          "SELECT cast(sum(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Mathematics'",
          "SELECT cast(sum(CASE WHEN member.position = 'Member' AND major.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id",
          "SELECT cast(count(CASE WHEN member.position = 'Member' AND major.major_name = 'Mathematics' THEN 1 ELSE NULL END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id"
        ]
      ]
    },
    {
      "id": 1422,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.location = 'MU 215'",
          "SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215'"
        ]
      ]
    },
    {
      "id": 1423,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(income_id) FROM income WHERE amount = 50",
          "SELECT count(*) FROM income WHERE amount = 50",
          "SELECT sum(CASE WHEN amount = 50 THEN 1 ELSE 0 END) FROM income",
          "SELECT sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) FROM income"
        ]
      ]
    },
    {
      "id": 1424,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member WHERE t_shirt_size = 'X-Large' AND POSITION = 'Member'",
          "SELECT count(member_id) FROM member WHERE t_shirt_size = 'X-Large' AND POSITION = 'Member'",
          "SELECT count(*) FROM member WHERE t_shirt_size = 'X-Large' AND position = 'Member'",
          "SELECT count(t_shirt_size) FROM member WHERE t_shirt_size = 'X-Large' AND POSITION = 'Member'"
        ]
      ]
    },
    {
      "id": 1425,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(major_id) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'",
          "SELECT count(major_name) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'",
          "SELECT count(major.major_name) FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.department = 'School of Applied Sciences, Technology and Education'",
          "SELECT count(major.major_name) FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences'"
        ]
      ]
    },
    {
      "id": 1426,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT member.first_name, member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT DISTINCT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT member.last_name, department, college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'"
        ]
      ]
    },
    {
      "id": 1427,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0",
          "SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0",
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.type = 'Guest Speaker' AND event.location = 'MU 215' AND budget.spent = 0"
        ]
      ]
    },
    {
      "id": 1428,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member'",
          "SELECT zip_code.city, zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member'",
          "SELECT zip_code.city, zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Member' AND major.department = 'Electrical and Computer Engineering'",
          "SELECT DISTINCT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1429,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.' AND event.type = 'Social'",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.location = '900 E. Washington St.' AND member.position = 'Vice President' AND event.type = 'Social'",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Social' AND member.position = 'Vice President' AND event.location = '900 E. Washington St.'",
          "SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.' AND event.type = 'Social'"
        ]
      ]
    },
    {
      "id": 1430,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza'",
          "SELECT member.last_name, member.position FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza'",
          "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10'",
          "SELECT DISTINCT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza'"
        ]
      ]
    },
    {
      "id": 1431,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'",
          "SELECT member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'",
          "SELECT DISTINCT member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'",
          "SELECT DISTINCT member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1432,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium'",
          "SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium'",
          "SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(income.link_to_member) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium'",
          "SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium'"
        ]
      ]
    },
    {
      "id": 1433,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT state FROM zip_code WHERE TYPE = 'PO Box'",
          "SELECT DISTINCT zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.type = 'PO Box'",
          "SELECT state FROM zip_code WHERE TYPE = 'PO Box'",
          "SELECT state FROM zip_code WHERE TYPE = 'PO Box' GROUP BY state"
        ]
      ]
    },
    {
      "id": 1434,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code FROM zip_code WHERE state = 'Puerto Rico' AND county = 'San Juan Municipio' AND TYPE = 'PO Box'",
          "SELECT zip_code.zip_code FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Puerto Rico' AND zip_code.county = 'San Juan Municipio' AND zip_code.type = 'PO Box'",
          "SELECT zip_code.zip_code FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.type = 'PO Box' AND zip_code.county = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico'",
          "SELECT zip_code FROM zip_code WHERE TYPE = 'PO Box' AND state = 'Puerto Rico' AND county = 'San Juan Municipio'"
        ]
      ]
    },
    {
      "id": 1435,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event_name FROM event WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND TYPE = 'Game' AND status = 'Closed'",
          "SELECT event_name FROM event WHERE status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20' AND TYPE = 'Game'",
          "SELECT event_name FROM event WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed' AND TYPE = 'Game'",
          "SELECT event_name FROM event WHERE status = 'Closed' AND TYPE = 'Game' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'"
        ]
      ]
    },
    {
      "id": 1436,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT expense.link_to_budget FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.cost > 50",
          "SELECT DISTINCT expense.link_to_event FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.cost > 50",
          "SELECT expense.link_to_budget FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.cost > 50",
          "SELECT DISTINCT expense.link_to_event FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.amount > 50"
        ]
      ]
    },
    {
      "id": 1437,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
          "SELECT member.first_name, member.last_name, attendance.link_to_event FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN attendance ON attendance.link_to_member = member.member_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
          "SELECT member.first_name, member.last_name, attendance.link_to_event FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
          "SELECT member.first_name, member.last_name, attendance.link_to_event FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'"
        ]
      ]
    },
    {
      "id": 1438,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy'",
          "SELECT DISTINCT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy'",
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO'",
          "SELECT college FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE first_name = 'Katy' )"
        ]
      ]
    },
    {
      "id": 1439,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'",
          "SELECT member.phone FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'",
          "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.department = 'Business'",
          "SELECT DISTINCT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'"
        ]
      ]
    },
    {
      "id": 1440,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20",
          "SELECT member.email FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20",
          "SELECT DISTINCT member.email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20",
          "SELECT member.email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' GROUP BY member.email HAVING sum(expense.cost) > 20"
        ]
      ]
    },
    {
      "id": 1441,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'College of Education & Human Services' AND member.position = 'Member'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Education & Human Services' AND member.position = 'Member'",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'College of Education & Human Services' AND member.position = 'Member'",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Education & Human Services' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1442,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM budget",
          "SELECT cast(sum(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event_id) FROM budget",
          "SELECT cast(sum(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(budget_id) FROM budget",
          "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event"
        ]
      ]
    },
    {
      "id": 1443,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event_id, LOCATION, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'",
          "SELECT event_id, LOCATION, status FROM event WHERE event_date LIKE '2019-11-%' OR event_date LIKE '2020-03-%'",
          "SELECT event_id, LOCATION, status FROM event WHERE event_date LIKE '2019-11%' OR event_date LIKE '2020-03%'",
          "SELECT event_id, LOCATION, status FROM event WHERE event_date LIKE '2019-11-%' OR event_date LIKE '2020-03-%'"
        ]
      ]
    },
    {
      "id": 1444,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense_description FROM expense GROUP BY expense_description HAVING sum(cost) / count(expense_id) > 50",
          "SELECT expense_description FROM expense GROUP BY expense_description HAVING sum(cost) > 50",
          "SELECT expense_description FROM expense GROUP BY expense_description HAVING avg(cost) > 50",
          "SELECT expense_description FROM expense GROUP BY expense_description ORDER BY sum(cost) / count(expense_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1445,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
          "SELECT DISTINCT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
          "SELECT FIRST_NAME, LAST_NAME FROM member WHERE t_shirt_size = 'X-Large'",
          "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';"
        ]
      ]
    },
    {
      "id": 1446,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN TYPE = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(zip_code) FROM zip_code",
          "SELECT cast(sum(CASE WHEN TYPE = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code",
          "SELECT cast(count(CASE WHEN TYPE = 'PO Box' THEN zip_code ELSE NULL END) AS REAL) * 100 / count(zip_code) FROM zip_code",
          "SELECT cast(sum(CASE WHEN TYPE = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(TYPE) FROM zip_code"
        ]
      ]
    },
    {
      "id": 1447,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name, event.location FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0",
          "SELECT event.event_name, event.location FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 0",
          "SELECT event.event_name, event.location FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE budget.remaining > 0",
          "SELECT event.event_name, event.location FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.remaining > 0"
        ]
      ]
    },
    {
      "id": 1448,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name, event.event_date FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100",
          "SELECT event.event_name, event.event_date FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost BETWEEN 50 AND 100",
          "SELECT event.event_name, event.event_date FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.cost > 50 AND expense.cost < 100 AND expense.expense_description = 'Pizza'",
          "SELECT event.event_name, event.event_date FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100"
        ]
      ]
    },
    {
      "id": 1449,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, major.major_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100",
          "SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100",
          "SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100",
          "SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN major ON major.major_id = member.link_to_major WHERE expense.cost > 100"
        ]
      ]
    },
    {
      "id": 1450,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40",
          "SELECT zip_code.city, zip_code.county FROM income INNER JOIN zip_code ON income.link_to_member = zip_code.zip_code WHERE income.amount > 40",
          "SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code GROUP BY income.link_to_member HAVING sum(income.amount) > 40",
          "SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40 GROUP BY zip_code.city, zip_code.county"
        ]
      ]
    },
    {
      "id": 1451,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name, expense.cost HAVING count(expense.event_id) > 1 ORDER BY sum(expense.cost) DESC LIMIT 1",
          "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name, expense.cost HAVING count(expense.expense_id) > 1 ORDER BY sum(expense.cost) DESC LIMIT 1",
          "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name, expense.cost HAVING count(expense.link_to_event) > 1 ORDER BY sum(expense.cost) DESC LIMIT 1",
          "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY count(expense.link_to_event) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1452,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member'",
          "SELECT avg(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position != 'Member'",
          "SELECT sum(expense.cost) / count(event.event_id) FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position != 'Member'",
          "SELECT sum(expense.cost) / count(event.event_id) FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.position != 'Member'"
        ]
      ]
    },
    {
      "id": 1453,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND expense.cost < ( SELECT avg(cost) FROM expense WHERE category = 'Parking' )",
          "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND expense.cost < ( SELECT avg(cost) FROM expense )",
          "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND expense.cost < ( SELECT avg(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' )",
          "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND expense.cost < ( SELECT avg(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.category = 'Parking' )"
        ]
      ]
    },
    {
      "id": 1454,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.type = 'Game'",
          "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.type = 'Game'",
          "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Game'",
          "SELECT cast(sum(CASE WHEN event.type = 'Game' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event"
        ]
      ]
    },
    {
      "id": 1455,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1",
          "SELECT expense_description FROM expense WHERE expense_description = 'Water, chips, cookies' ORDER BY cost DESC LIMIT 1",
          "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1",
          "SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1456,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id ORDER BY expense.cost DESC LIMIT 5",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member ORDER BY expense.cost DESC LIMIT 5",
          "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 5",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1457,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > ( SELECT avg(cost) FROM expense )",
          "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT avg(cost) FROM expense )",
          "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name, member.phone HAVING sum(expense.cost) > ( SELECT avg(cost) FROM expense )",
          "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY expense.link_to_member HAVING sum(expense.cost) > ( SELECT avg(cost) FROM expense )"
        ]
      ]
    },
    {
      "id": 1458,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member_id) - cast(sum(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member_id) FROM member",
          "SELECT cast(sum(CASE WHEN zip_code.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.position) - cast(sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.position) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member'",
          "SELECT cast(sum(CASE WHEN zip_code.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) - cast(sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member'",
          "SELECT cast(sum(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member_id) - cast(sum(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member_id) FROM member WHERE POSITION = 'Member'"
        ]
      ]
    },
    {
      "id": 1459,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'",
          "SELECT DISTINCT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'",
          "SELECT major.major_name, department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'",
          "SELECT major.major_name, major.department FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'"
        ]
      ]
    },
    {
      "id": 1460,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies'",
          "SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies'",
          "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, veggie tray, supplies'",
          "SELECT DISTINCT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies'"
        ]
      ]
    },
    {
      "id": 1461,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'",
          "SELECT DISTINCT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'",
          "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'",
          "SELECT member.last_name, member.phone FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Elementary Education'"
        ]
      ]
    },
    {
      "id": 1462,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category, budget.amount FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'January Speaker'",
          "SELECT budget.category, budget.amount FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'January Speaker'",
          "SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker'",
          "SELECT budget.category, budget.amount FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker'"
        ]
      ]
    },
    {
      "id": 1463,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food'",
          "SELECT event.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food'",
          "SELECT DISTINCT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'"
        ]
      ]
    },
    {
      "id": 1464,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09'",
          "SELECT DISTINCT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09'",
          "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received LIKE '2019-09-09'",
          "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE strftime('%Y-%m-%d', income.date_received) = '2019-09-09'"
        ]
      ]
    },
    {
      "id": 1465,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'",
          "SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters'",
          "SELECT DISTINCT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'",
          "SELECT category FROM budget WHERE budget_id IN ( SELECT link_to_budget FROM expense WHERE expense_description = 'Posters' )"
        ]
      ]
    },
    {
      "id": 1466,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary'",
          "SELECT first_name, last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary'",
          "SELECT first_name, last_name, college FROM member WHERE POSITION = 'Secretary'",
          "SELECT member.first_name, member.last_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary'"
        ]
      ]
    },
    {
      "id": 1467,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(spent), event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts'",
          "SELECT sum(spent), event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts' GROUP BY event.event_name",
          "SELECT sum(budget.spent), event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts'",
          "SELECT sum(spent), event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Speaker Gifts'"
        ]
      ]
    },
    {
      "id": 1468,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke'",
          "SELECT zip_code.city FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke'",
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett'",
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke'"
        ]
      ]
    },
    {
      "id": 1469,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND member.zip = 28092",
          "SELECT member.first_name, member.last_name, member.position FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND member.zip = 28092",
          "SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.zip_code = 28092 AND zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina'",
          "SELECT first_name, last_name, POSITION FROM member WHERE zip = 28092 AND city = 'Lincolnton' AND state = 'North Carolina'"
        ]
      ]
    },
    {
      "id": 1470,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'",
          "SELECT count(DISTINCT gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'",
          "SELECT count(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'",
          "SELECT count(segment) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'"
        ]
      ]
    },
    {
      "id": 1471,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN currency = 'EUR' THEN customerid ELSE NULL END) AS REAL) / count(CASE WHEN currency = 'CZK' THEN customerid ELSE NULL END) FROM customers",
          "SELECT cast(sum(iif(currency = 'EUR', 1, 0)) AS REAL) / sum(iif(currency = 'CZK', 1, 0)) FROM customers",
          "SELECT cast(sum(CASE WHEN currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN currency = 'CZK' THEN 1 ELSE 0 END) FROM customers",
          "SELECT cast(sum(iif(currency = 'EUR', 1, 0)) AS REAL) * 100 / sum(iif(currency = 'CZK', 1, 0)) FROM customers"
        ]
      ]
    },
    {
      "id": 1472,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.`date`) = '2012' AND customers.segment = 'LAM' ORDER BY YEARMONTH.consumption ASC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.`date`) = '2012' AND customers.segment = 'LAM' ORDER BY YEARMONTH.consumption LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM' AND strftime('%Y', YEARMONTH.date) = '2012' ORDER BY YEARMONTH.consumption ASC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM' AND substr(yearmonth.date, 1, 4) = '2012' ORDER BY yearmonth.consumption ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1473,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y', yearmonth.`date`) = '2013'",
          "SELECT avg(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT avg(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y', YEARMONTH.date) = '2013'",
          "SELECT avg(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.`date`, 1, 4) = '2013'"
        ]
      ]
    },
    {
      "id": 1474,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.date) = '2011' AND customers.currency = 'CZK' ORDER BY YEARMONTH.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'CZK' AND strftime('%Y', transactions_1k.`date`) = '2011' GROUP BY customers.customerid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'CZK' AND strftime('%Y', transactions_1k.`date`) = '2011' GROUP BY customers.customerid ORDER BY sum(transactions_1k.price) DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.`date`) = '2011' AND customers.currency = 'CZK' GROUP BY customers.customerid ORDER BY sum(YEARMONTH.consumption) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1475,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y', yearmonth.`date`) = '2012' AND yearmonth.consumption < 30000",
          "SELECT count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y', yearmonth.date) = '2012' AND yearmonth.consumption < 30000",
          "SELECT count(customers.customerid) FROM customers INNER JOIN `yearmonth` ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y', yearmonth.`date`) = '2012' AND yearmonth.consumption < 30000",
          "SELECT count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND substr(yearmonth.date, 1, 4) = '2012' AND yearmonth.consumption < 30000"
        ]
      ]
    },
    {
      "id": 1476,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN YEARMONTH.consumption ELSE 0 END) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.date) = '2012'",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN YEARMONTH.consumption ELSE 0 END) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2012'",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN YEARMONTH.consumption ELSE 0 END) AS diff FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.date) = '2012'",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN YEARMONTH.consumption ELSE 0 END) AS diff FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2012'"
        ]
      ]
    },
    {
      "id": 1477,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT strftime('%Y', `date`) FROM transactions_1k WHERE currency = 'EUR' GROUP BY strftime('%Y', `date`) ORDER BY count(strftime('%Y', `date`)) DESC LIMIT 1",
          "SELECT strftime('%Y', `date`) FROM transactions_1k WHERE currency = 'EUR' GROUP BY strftime('%Y', `date`) ORDER BY count(`date`) DESC LIMIT 1",
          "SELECT strftime('%Y', `date`) FROM transactions_1k WHERE currency = 'EUR' GROUP BY strftime('%Y', `date`) ORDER BY count(customerid) DESC LIMIT 1",
          "SELECT DISTINCT strftime('%Y', `date`) FROM transactions_1k WHERE currency = 'EUR' GROUP BY strftime('%Y', `date`) ORDER BY count(strftime('%Y', `date`)) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1478,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT segment FROM customers GROUP BY segment ORDER BY sum(consumption) LIMIT 1",
          "SELECT segment FROM customers ORDER BY consumption LIMIT 1",
          "SELECT segment FROM customers GROUP BY segment ORDER BY sum(consumption) ASC LIMIT 1",
          "SELECT segment FROM customers ORDER BY consumption ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1479,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT substr(date, 1, 4) FROM yearmonth GROUP BY substr(date, 1, 4) ORDER BY sum(consumption) DESC LIMIT 1",
          "SELECT strftime('%Y', `date`) FROM yearmonth GROUP BY strftime('%Y', `date`) ORDER BY sum(consumption) DESC LIMIT 1",
          "SELECT substr(t.date, 1, 4) FROM yearmonth AS t ORDER BY t.consumption DESC LIMIT 1",
          "SELECT substr(YEARMONTH.date, 1, 4) FROM yearmonth INNER JOIN transactions_1k ON transactions_1k.customerid = yearmonth.customerid GROUP BY substr(YEARMONTH.date, 1, 4) ORDER BY sum(consumption) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1480,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT max(YEARMONTH.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'SME' AND substr(YEARMONTH.date, 1, 4) = '2013'",
          "SELECT max(yearmonth.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'SME' AND substr(YEARMONTH.date, 1, 4) = '2013'",
          "SELECT max(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT max(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y', yearmonth.`date`) = '2013'"
        ]
      ]
    },
    {
      "id": 1481,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END), sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END), sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END), sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END), sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013' AND customers.currency = 'CZK'",
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END), sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END), sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.`date`, 1, 4) = '2013'"
        ]
      ]
    },
    {
      "id": 1482,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.segment, cast(sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.segment ORDER BY sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) DESC LIMIT 1",
          "SELECT customers.segment, cast(sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND customers.segment IN ('SME', 'LAM', 'KAM')",
          "SELECT customers.segment, cast(sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.segment ORDER BY sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) DESC LIMIT 1",
          "SELECT customers.segment, cast(sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND customers.segment IN ('SME', 'LAM', 'KAM')"
        ]
      ]
    },
    {
      "id": 1483,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.customerid = 6 AND substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.customerid = 6 AND substr(yearmonth.date, 1, 7) BETWEEN '201308' AND '201311'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.customerid = 6 AND substr(yearmonth.date, 1, 4) BETWEEN '201308' AND '201311'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.customerid = 6 AND substr(yearmonth.date, 1, 4) BETWEEN '2013' AND '2013'"
        ]
      ]
    },
    {
      "id": 1484,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - sum(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.segment = 'Discount'",
          "SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - sum(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations INNER JOIN customers ON gasstations.chainid = customers.chainid WHERE gasstations.segment = 'Discount'",
          "SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - sum(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations INNER JOIN customers ON gasstations.chainid = customers.segment WHERE gasstations.segment = 'Discount'",
          "SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - sum(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) AS diff FROM gasstations INNER JOIN customers ON gasstations.chainid = customers.chainid WHERE gasstations.segment = 'Discount'"
        ]
      ]
    },
    {
      "id": 1485,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customerid = 7 THEN consumption ELSE 0 END) - sum(CASE WHEN customerid = 5 THEN consumption ELSE 0 END) FROM yearmonth WHERE date LIKE '201304%'",
          "SELECT sum(CASE WHEN customerid = 7 THEN consumption ELSE 0 END) - sum(CASE WHEN customerid = 5 THEN consumption ELSE 0 END) FROM `yearmonth` WHERE date LIKE '201304%'",
          "SELECT sum(CASE WHEN customerid = 7 THEN consumption ELSE 0 END) - sum(CASE WHEN customerid = 5 THEN consumption ELSE 0 END) FROM yearmonth WHERE strftime('%Y-%m', `date`) = '201304'",
          "SELECT sum(CASE WHEN customers.customerid = 7 THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.customerid = 5 THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 7) = '201304'"
        ]
      ]
    },
    {
      "id": 1486,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN 1 ELSE 0 END) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'CZK'",
          "SELECT sum(iif(customers.segment = 'SME', 1, 0)) - sum(iif(customers.segment = 'SME', 1, 0)) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'CZK'",
          "SELECT cast(sum(iif(customers.segment = 'SME', 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'CZK'",
          "SELECT cast(sum(CASE WHEN customers.segment = 'SME' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'CZK'"
        ]
      ]
    },
    {
      "id": 1487,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND strftime('%Y%m', YEARMONTH.date) = '201310' ORDER BY YEARMONTH.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND substr(yearmonth.date, 1, 7) = '201310' ORDER BY yearmonth.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND strftime('%Y-%m', YEARMONTH.date) = '201310' ORDER BY YEARMONTH.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND strftime('%Y%m', YEARMONTH.`date`) = '201310' ORDER BY YEARMONTH.consumption DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1488,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid, sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1",
          "SELECT customers.customerid, sum(YEARMONTH.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(YEARMONTH.consumption) DESC LIMIT 1",
          "SELECT customers.customerid, sum(yearmonth.consumption) FROM customers INNER JOIN `yearmonth` ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1",
          "SELECT customers.customerid, sum(yearmonth.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(YEARMONTH.consumption) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1489,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y-%m', yearmonth.date) = '201305'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND substr(yearmonth.date, 1, 7) = '201305'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y-%m', yearmonth.`date`) = '201305'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN `yearmonth` ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y-%m', yearmonth.`date`) = '201305'"
        ]
      ]
    },
    {
      "id": 1490,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(yearmonth.consumption > 46.73, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM'",
          "SELECT cast(sum(iif(YEARMONTH.consumption > 46.73, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM'",
          "SELECT cast(sum(iif(YEARMONTH.consumption > 46.73, 1, 0)) AS REAL) * 100 / count(YEARMONTH.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM'",
          "SELECT cast(sum(iif(YEARMONTH.consumption > 46.73, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM'"
        ]
      ]
    },
    {
      "id": 1491,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT country, count(gasstationid) FROM gasstations WHERE segment = 'Value for money' GROUP BY country",
          "SELECT gasstations.country, count(gasstations.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country",
          "SELECT gasstations.country, count(gasstations.segment) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country",
          "SELECT gasstations.country, count(gasstations.country) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country"
        ]
      ]
    },
    {
      "id": 1492,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(customers.segment = 'KAM', transactions_1k.amount, 0)) AS REAL) * 100 / sum(iif(customers.segment = 'KAM', 1, 0)) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid",
          "SELECT cast(sum(iif(customers.currency = 'EUR', 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM'",
          "SELECT cast(sum(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM'",
          "SELECT cast(sum(iif(customers.segment = 'KAM', transactions_1k.amount, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid"
        ]
      ]
    },
    {
      "id": 1493,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(yearmonth.consumption > 528.3, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE strftime('%Y-%m', yearmonth.date) = '201202'",
          "SELECT cast(sum(iif(YEARMONTH.consumption > 528.3, 1, 0)) AS REAL) * 100 / count(YEARMONTH.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y-%m', YEARMONTH.date) = '201202'",
          "SELECT cast(sum(iif(yearmonth.consumption > 528.3, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE strftime('%Y-%m', yearmonth.`date`) = '201202'",
          "SELECT cast(sum(iif(yearmonth.consumption > 528.3, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 6, 2) = '02' AND substr(yearmonth.date, 1, 4) = '2012'"
        ]
      ]
    },
    {
      "id": 1494,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(segment) FROM gasstations WHERE country = 'SVK'",
          "SELECT cast(count(CASE WHEN segment = 'Premium' THEN gasstationid ELSE NULL END) AS REAL) * 100 / count(gasstationid) FROM gasstations WHERE country = 'SVK'",
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM gasstations WHERE country = 'SVK'",
          "SELECT cast(count(CASE WHEN segment = 'Premium' THEN gasstationid ELSE NULL END) AS REAL) * 100 / count(gasstationid) FROM gasstations WHERE country = 'SK'"
        ]
      ]
    },
    {
      "id": 1495,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customerid FROM yearmonth WHERE date = '201309' GROUP BY customerid ORDER BY sum(consumption) DESC LIMIT 1",
          "SELECT customerid FROM yearmonth WHERE date = '201309' ORDER BY consumption DESC LIMIT 1",
          "SELECT customerid FROM yearmonth WHERE strftime('%Y-%m', `date`) = '201309' GROUP BY customerid ORDER BY sum(consumption) DESC LIMIT 1",
          "SELECT customerid FROM yearmonth WHERE strftime('%Y-%m', `date`) = '201309' GROUP BY customerid ORDER BY count(customerid) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1496,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 7) = '201309' GROUP BY customers.segment ORDER BY sum(yearmonth.consumption) LIMIT 1",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 7) = '201309' GROUP BY customers.segment ORDER BY count(customers.customerid) LIMIT 1",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.`date`, 1, 7) = '201309' GROUP BY customers.segment ORDER BY count(customers.customerid) LIMIT 1",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE strftime('%Y-%m', yearmonth.`date`) = '201309' GROUP BY customers.segment ORDER BY count(customers.customerid) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1497,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y-%m', yearmonth.`date`) = '201206' ORDER BY yearmonth.consumption LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y-%m', yearmonth.`date`) = '201206' ORDER BY yearmonth.consumption ASC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y-%m', yearmonth.date) = '201206' ORDER BY yearmonth.consumption LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 7) = '201206' ORDER BY yearmonth.consumption ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1498,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT max(consumption) FROM yearmonth WHERE substr(date, 1, 4) = '2012'",
          "SELECT max(consumption) FROM yearmonth WHERE strftime('%Y', `date`) = '2012'",
          "SELECT max(consumption) FROM yearmonth WHERE date LIKE '2012%'",
          "SELECT max(consumption) FROM yearmonth WHERE strftime('%Y', date) = '2012'"
        ]
      ]
    },
    {
      "id": 1499,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR'",
          "SELECT sum(consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' ORDER BY sum(consumption) / 12 DESC LIMIT 1",
          "SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' ORDER BY sum(yearmonth.consumption) DESC LIMIT 1",
          "SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' ORDER BY sum(yearmonth.consumption) / 12 DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1500,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN `yearmonth` ON transactions_1k.`date` = yearmonth.`date` WHERE substr(`date`, 1, 7) = '201309'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN YEARMONTH ON transactions_1k.`date` = YEARMONTH.`date` WHERE substr(`date`, 1, 7) = '201309'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN `yearmonth` ON transactions_1k.`date` = yearmonth.`date` WHERE strftime('%Y-%m', `date`) = '201309'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN `yearmonth` ON substr(yearmonth.date, 1, 7) = substr(transactions_1k.`date`, 1, 7) WHERE substr(yearmonth.date, 5, 2) = '09'"
        ]
      ]
    },
    {
      "id": 1501,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE substr(`date`, 1, 7) = '201306'",
          "SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE strftime('%Y%m', transactions_1k.`date`) = '201306'",
          "SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`date` LIKE '201306%'",
          "SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date LIKE '201306%'"
        ]
      ]
    },
    {
      "id": 1502,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE customers.currency = 'EUR'",
          "SELECT DISTINCT gasstations.chainid FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE customers.currency = 'EUR'",
          "SELECT DISTINCT gasstations.chainid FROM transactions_1k INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE customers.currency = 'EUR'",
          "SELECT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE customers.currency = 'EUR'"
        ]
      ]
    },
    {
      "id": 1503,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid WHERE customers.currency = 'EUR'",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid WHERE customers.currency = 'EUR'",
          "SELECT DISTINCT products.description FROM transactions_1k INNER JOIN products ON transactions_1k.productid = products.productid WHERE customers.currency = 'EUR'",
          "SELECT DISTINCT products.description FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN products ON products.productid = transactions_1k.productid WHERE customers.currency = 'EUR'"
        ]
      ]
    },
    {
      "id": 1504,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(price) FROM transactions_1k WHERE date LIKE '2012-01%'",
          "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN `date` ON transactions_1k.`date` = date.`date` WHERE date.`date` LIKE '2012-01%'",
          "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN `date` ON transactions_1k.date = date.date WHERE date.date LIKE '2012-01%'",
          "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN `date` ON transactions_1k.`date` = date.`date` WHERE strftime('%Y-%m', `date`) = '2012-01'"
        ]
      ]
    },
    {
      "id": 1505,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(YEARMONTH.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' AND YEARMONTH.consumption > 1000",
          "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' AND YEARMONTH.consumption > 1000",
          "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000",
          "SELECT count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000"
        ]
      ]
    },
    {
      "id": 1506,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT products.description FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON products.productid = transactions_1k.productid WHERE gasstations.country = 'CZE'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'",
          "SELECT DISTINCT products.description FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE gasstations.country = 'CZE'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE'"
        ]
      ]
    },
    {
      "id": 1507,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT transactions_1k.time FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11",
          "SELECT DISTINCT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.chainid = 11",
          "SELECT DISTINCT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11",
          "SELECT DISTINCT transactions_1k.`time` FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11"
        ]
      ]
    },
    {
      "id": 1508,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000",
          "SELECT count(*) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000",
          "SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.price > 1000"
        ]
      ]
    },
    {
      "id": 1509,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01'",
          "SELECT count(transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01'",
          "SELECT count(DISTINCT gasstations.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01'",
          "SELECT count(DISTINCT transactions_1k.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01'"
        ]
      ]
    },
    {
      "id": 1510,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(transactions_1k.price) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'",
          "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE'",
          "SELECT sum(transactions_1k.price) / count(transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'",
          "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'"
        ]
      ]
    },
    {
      "id": 1511,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR'",
          "SELECT avg(price) FROM transactions_1k WHERE currency = 'EUR'",
          "SELECT avg(price) FROM transactions_1k WHERE customerid IN ( SELECT customerid FROM customers WHERE currency = 'EUR' )",
          "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR'"
        ]
      ]
    },
    {
      "id": 1512,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customerid FROM transactions_1k WHERE `date` = '2012-08-25' GROUP BY customerid ORDER BY sum(amount) DESC LIMIT 1",
          "SELECT customerid FROM transactions_1k WHERE `date` = '2012-08-25' ORDER BY price DESC LIMIT 1",
          "SELECT customerid FROM transactions_1k WHERE `date` = '2012-08-25' GROUP BY customerid ORDER BY sum(price) DESC LIMIT 1",
          "SELECT customerid FROM transactions_1k WHERE `date` = '2012-08-25' ORDER BY amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1513,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`date` = '2012-08-25' GROUP BY gasstations.country",
          "SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`date` = '2012-08-25'",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' GROUP BY gasstations.country",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`date` = '2012-08-25' ORDER BY transactions_1k.price LIMIT 1"
        ]
      ]
    },
    {
      "id": 1514,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24'",
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '16:25:00'",
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`time` = '16:25:00' AND transactions_1k.date = '2012-08-24'",
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`date` = '2012-08-24' AND transactions_1k.time = '16:25:00'"
        ]
      ]
    },
    {
      "id": 1515,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00'",
          "SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00'",
          "SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`date` = '2012-08-23' AND transactions_1k.time = '21:20:00'",
          "SELECT DISTINCT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '21:20:00' AND transactions_1k.date = '2012-08-23'"
        ]
      ]
    },
    {
      "id": 1516,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(transactionid) FROM transactions_1k WHERE date = '2012-08-26' AND time < '13:00:00' AND currency = 'EUR'",
          "SELECT sum(iif(transactions_1k.`time` < '13:00:00', 1, 0)) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR' AND transactions_1k.`date` = '2012-08-26'",
          "SELECT sum(iif(transactions_1k.`time` < '13:00:00', 1, 0)) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`date` = '2012-08-26' AND customers.currency = 'EUR'",
          "SELECT count(transactionid) FROM transactions_1k WHERE date = '2012-08-26' AND substr(time, 1, 2) < 13 AND currency = 'EUR'"
        ]
      ]
    },
    {
      "id": 1517,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT segment FROM customers WHERE customerid = ( SELECT min(customerid) FROM customers )",
          "SELECT segment FROM customers ORDER BY customerid ASC LIMIT 1",
          "SELECT segment FROM customers WHERE customerid = ( SELECT customerid FROM transactions_1k ORDER BY date ASC LIMIT 1 )",
          "SELECT segment FROM customers WHERE customerid = ( SELECT customerid FROM transactions_1k ORDER BY time ASC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 1518,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00'",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`date` = '2012-08-24' AND transactions_1k.time = '12:42:00'",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`date` = '2012-08-24' AND transactions_1k.`time` = '12:42:00'",
          "SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`date` = '2012-08-24' AND transactions_1k.time = '12:42:00'"
        ]
      ]
    },
    {
      "id": 1519,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT productid FROM transactions_1k WHERE date = '2012-08-23' AND time = '21:20:00'",
          "SELECT productid FROM transactions_1k WHERE `date` = '2012-08-23' AND time = '21:20:00'",
          "SELECT productid FROM transactions_1k WHERE `date` = '2012-08-23' AND `time` = '21:20:00'",
          "SELECT DISTINCT productid FROM transactions_1k WHERE `date` = '2012-08-23' AND time = '21:20:00'"
        ]
      ]
    },
    {
      "id": 1520,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(transactions_1k.price), transactions_1k.date FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 124",
          "SELECT sum(transactions_1k.price), transactions_1k.date FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE strftime('%Y-%m', transactions_1k.`date`) = '2012-01' AND transactions_1k.price = 124.05",
          "SELECT sum(transactions_1k.price), transactions_1k.date FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`date` = '2012-08-24' AND transactions_1k.price = 124",
          "SELECT sum(transactions_1k.price), transactions_1k.date FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-01-01' AND transactions_1k.price = 124.05"
        ]
      ]
    },
    {
      "id": 1521,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT gasstations.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-26' AND gasstations.country = 'CZE' AND transactions_1k.time BETWEEN '08:00' AND '09:00'",
          "SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`time` BETWEEN '08:00' AND '09:00' AND transactions_1k.date = '2012-08-26'",
          "SELECT count(DISTINCT gasstations.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE substr(transactions_1k.`time`, 1, 5) = '08:00' AND substr(transactions_1k.`time`, 6, 5) = '09:00' AND transactions_1k.`date` = '2012-08-26' AND gasstations.country = 'CZE'",
          "SELECT count(DISTINCT gasstations.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE substr(transactions_1k.`time`, 1, 5) = '08:00' AND substr(transactions_1k.`time`, 6, 5) = '09:00' AND transactions_1k.`date` = '2012-08-26'"
        ]
      ]
    },
    {
      "id": 1522,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.`date`, 1, 7) = '201306'",
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.`date`, 1, 7) = '201306'",
          "SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE strftime('%Y-%m', yearmonth.`date`) = '201306'",
          "SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.`date`, 6, 4) = '2013' AND substr(yearmonth.`date`, 1, 2) = '06'"
        ]
      ]
    },
    {
      "id": 1523,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.cardid = 667467",
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 667467",
          "SELECT gasstations.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.cardid = 667467",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.cardid = '667467'"
        ]
      ]
    },
    {
      "id": 1524,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 548.4",
          "SELECT DISTINCT customers.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 548.4",
          "SELECT customers.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`date` = '2012-08-24' AND transactions_1k.price = 548.4",
          "SELECT customers.nationality FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 548.4"
        ]
      ]
    },
    {
      "id": 1525,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(customers.currency = 'EUR', 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-25'",
          "SELECT cast(sum(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-25'",
          "SELECT cast(sum(iif(customers.currency = 'EUR', 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`date` = '2012-08-25'",
          "SELECT cast(sum(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.`date` = '2012-08-25'"
        ]
      ]
    },
    {
      "id": 1526,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT ( SELECT consumption FROM yearmonth WHERE strftime('%Y', `date`) = '2013' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) ) - ( SELECT consumption FROM yearmonth WHERE strftime('%Y', `date`) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) ) / ( SELECT consumption FROM yearmonth WHERE strftime('%Y', `date`) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) )",
          "SELECT ( SELECT consumption FROM yearmonth WHERE strftime('%Y', `date`) = '2013' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) ) / ( SELECT consumption FROM yearmonth WHERE strftime('%Y', `date`) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) )",
          "SELECT ( SELECT consumption FROM `yearmonth` WHERE strftime('%Y', `date`) = '2013' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) ) - ( SELECT consumption FROM `yearmonth` WHERE strftime('%Y', `date`) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) ) / ( SELECT consumption FROM `yearmonth` WHERE strftime('%Y', `date`) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) )",
          "SELECT ( SELECT consumption FROM `yearmonth` WHERE date = '201201' ) - ( SELECT consumption FROM `yearmonth` WHERE date = '201301' ) / ( SELECT consumption FROM `yearmonth` WHERE date = '201201' ) FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-24'"
        ]
      ]
    },
    {
      "id": 1527,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.gasstationid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid GROUP BY gasstations.gasstationid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1",
          "SELECT gasstations.gasstationid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid ORDER BY transactions_1k.amount DESC LIMIT 1",
          "SELECT gasstations.name FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid GROUP BY gasstations.name ORDER BY sum(transactions_1k.amount) DESC LIMIT 1",
          "SELECT gasstations.gasstationid FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid GROUP BY gasstations.gasstationid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1528,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(segment) FROM gasstations WHERE country = 'SVK'",
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM gasstations WHERE country = 'SVK'",
          "SELECT cast(sum(iif(segment = 'Premium', 1, 0)) AS REAL) * 100 / count(segment) FROM gasstations WHERE country = 'SVK'",
          "SELECT cast(sum(iif(segment = 'Premium', 1, 0)) AS REAL) * 100 / count(*) FROM gasstations WHERE country = 'SVK'"
        ]
      ]
    },
    {
      "id": 1529,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(t.amount) FROM transactions_1k AS t WHERE t.customerid = 38508 AND t.date LIKE '201201%'",
          "SELECT sum(price) FROM transactions_1k WHERE customerid = 38508 AND strftime('%Y-%m', `date`) = '201201'",
          "SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN `yearmonth` ON transactions_1k.customerid = yearmonth.customerid WHERE transactions_1k.customerid = 38508 AND strftime('%Y-%m', transactions_1k.`date`) = '201201'",
          "SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN YEARMONTH ON transactions_1k.customerid = YEARMONTH.customerid WHERE transactions_1k.customerid = 38508 AND strftime('%Y-%m', transactions_1k.`date`) = '201201'"
        ]
      ]
    },
    {
      "id": 1530,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid ORDER BY transactions_1k.amount DESC LIMIT 5",
          "SELECT description FROM products ORDER BY productid DESC LIMIT 5",
          "SELECT description FROM products ORDER BY products.productid DESC LIMIT 5",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid GROUP BY products.description ORDER BY count(products.productid) DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1531,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid, avg(transactions_1k.price / transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price / transactions_1k.amount) DESC LIMIT 1",
          "SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) / sum(transactions_1k.amount) DESC LIMIT 1",
          "SELECT customers.customerid, avg(transactions_1k.price / transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) DESC LIMIT 1",
          "SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1532,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE products.productid = 2 GROUP BY gasstations.country ORDER BY sum(transactions_1k.price) DESC LIMIT 1",
          "SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE products.productid = 2 ORDER BY transactions_1k.price DESC LIMIT 1",
          "SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.chainid = transactions_1k.gasstationid WHERE products.productid = 2 GROUP BY gasstations.country ORDER BY sum(transactions_1k.price) DESC LIMIT 1",
          "SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.chainid = transactions_1k.gasstationid WHERE products.productid = 2 ORDER BY transactions_1k.price DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1533,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT consumption FROM yearmonth WHERE customerid IN ( SELECT customerid FROM transactions_1k WHERE productid = 5 AND price / amount > 29 )",
          "SELECT yearmonth.consumption FROM transactions_1k INNER JOIN products ON transactions_1k.productid = products.productid INNER JOIN customers ON transactions_1k.customerid = customers.customerid INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE products.productid = 5 AND transactions_1k.amount > 29 AND strftime('%Y-%m', transactions_1k.`date`) = '2012-08'",
          "SELECT yearmonth.consumption FROM transactions_1k INNER JOIN products ON transactions_1k.productid = products.productid INNER JOIN customers ON transactions_1k.customerid = customers.customerid INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE products.productid = 5 AND transactions_1k.amount > 29 AND strftime('%Y-%m', transactions_1k.`date`) = '201208'",
          "SELECT yearmonth.consumption FROM transactions_1k INNER JOIN products ON transactions_1k.productid = products.productid INNER JOIN customers ON transactions_1k.customerid = customers.customerid INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE products.productid = 5 AND transactions_1k.date LIKE '201208%' AND transactions_1k.price / transactions_1k.amount > 29"
        ]
      ]
    }
  ]