[
    {
      "id": 0,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT max(frpm.`percent (%) eligible free (k-12)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Alameda'",
          "SELECT max(`percent (%) eligible free (k-12)`) FROM frpm WHERE `county name` = 'Alameda'",
          "SELECT max(`percent (%) eligible free (k-12)`) FROM frpm WHERE `county name` = 'Alameda';",
          "SELECT max(frpm.`percent (%) eligible free (k-12)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda'"
        ]
      ]
    },
    {
      "id": 1,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3",
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` LIMIT 3",
          "SELECT min(`free meal count (ages 5-17)`) / min(`enrollment (ages 5-17)`) FROM frpm WHERE `educational option type` = 'Continuation School'",
          "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 2,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1 AND schools.county = 'Fresno'",
          "SELECT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1 AND schools.county = 'Fresno'",
          "SELECT zip FROM schools WHERE charter = 1 AND county = 'Fresno'",
          "SELECT DISTINCT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1"
        ]
      ]
    },
    {
      "id": 3,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.mailstreet FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT DISTINCT schools.mailstreet FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
          "SELECT DISTINCT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 4,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone FROM schools WHERE charter = 1 AND opendate > '2000-01-01' AND fundingtype = 'Directly funded';",
          "SELECT phone FROM schools WHERE charter = 1 AND opendate > '2000-01-01' AND `charter funding type` = 'Directly funded';",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM frpm WHERE `charter school (y/n)` = 1 AND `charter funding type` = 'Directly funded') AND opendate > '2000-01-01';",
          "SELECT phone FROM schools WHERE charter = 1 AND opendate > '2000-01-01' AND fundingtype = 'Directly funded'"
        ]
      ]
    },
    {
      "id": 5,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 400 AND schools.virtual = 'F'",
          "SELECT count(schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 400 AND schools.virtual = 'F'",
          "SELECT count(*) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' AND satscores.avgscrmath > 400;",
          "SELECT count(*) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 400 AND schools.virtual = 'F'"
        ]
      ]
    },
    {
      "id": 6,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sname FROM satscores WHERE numge1500 > 500 AND magnet = 1",
          "SELECT sname FROM satscores WHERE numge1500 > 500 AND magnet = 1;",
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1",
          "SELECT DISTINCT sname FROM satscores WHERE numge1500 > 500 AND magnet = 1;"
        ]
      ]
    },
    {
      "id": 7,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM satscores WHERE numtsttakr = (SELECT max(numtsttakr) FROM satscores WHERE numtsttakr > 1500));",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM satscores WHERE numge1500 = (SELECT max(numge1500) FROM satscores WHERE numge1500 IS NOT NULL));",
          "SELECT schools.phone FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores);",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM satscores WHERE numge1500 = (SELECT max(numge1500) FROM satscores WHERE numge1500 > 0));"
        ]
      ]
    },
    {
      "id": 8,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(satscores.numtsttakr) FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.\"FRPM count (k-12)\" = ( SELECT max(\"FRPM count (k-12)\") FROM frpm )",
          "SELECT sum(satscores.numtsttakr) FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.\"FRPM count (k-12)\" = ( SELECT max(\"FRPM count (k-12)\") FROM frpm )",
          "SELECT satscores.numtsttakr FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.\"FRPM count (k-12)\" = ( SELECT max(\"FRPM count (k-12)\") FROM frpm )",
          "SELECT sum(satscores.numtsttakr) FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`frpm count (k-12)` = ( SELECT max(`frpm count (k-12)`) FROM frpm )"
        ]
      ]
    },
    {
      "id": 9,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.charter = 1",
          "SELECT count(DISTINCT schools.school) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1;",
          "SELECT count(schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1"
        ]
      ]
    },
    {
      "id": 10,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.\"FRPM count (ages 5-17)\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread DESC LIMIT 1",
          "SELECT frpm.\"FRPM count (ages 5-17)\" FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode JOIN frpm frpm ON schools.cdscode = frpm.\"School Code\" WHERE satscores.avgscrread = (SELECT max(avgscrread) FROM satscores) AND frpm.\"FRPM count (ages 5-17)\" IS NOT NULL;",
          "SELECT frpm.\"FRPM count (ages 5-17)\" FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE satscores.avgscrread = (SELECT max(satscores.avgscrread) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrread IS NOT NULL);",
          "SELECT frpm.\"FRPM count (ages 5-17)\" FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode JOIN frpm frpm ON schools.cdscode = frpm.\"School Code\" WHERE satscores.avgscrread = (SELECT max(satscores.avgscrread) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrread IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 11,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500",
          "SELECT \"School Code\" FROM frpm WHERE \"Enrollment (k-12)\" + \"Enrollment (ages 5-17)\" > 500",
          "SELECT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500",
          "SELECT DISTINCT frpm.`school code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` + frpm.`enrollment (ages 5-17)` > 500"
        ]
      ]
    },
    {
      "id": 12,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.numge1500 / satscores.numtsttakr > 0.3;",
          "SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.avgscrread IS NOT NULL AND satscores.avgscrmath IS NOT NULL AND satscores.numge1500 IS NOT NULL AND satscores.numtsttakr IS NOT NULL AND frpm.`free meal count (ages 5-17)` IS NOT NULL AND frpm.`enrollment (ages 5-17)` IS NOT NULL AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND satscores.numge1500 > 0 AND satscores.numtsttakr > ",
          "SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.avgscrread IS NOT NULL AND satscores.avgscrmath IS NOT NULL AND satscores.numge1500 IS NOT NULL AND satscores.numtsttakr IS NOT NULL AND frpm.`free meal count (ages 5-17)` IS NOT NULL AND frpm.`enrollment (ages 5-17)` IS NOT NULL;",
          "SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.avgscrread IS NOT NULL AND satscores.avgscrmath IS NOT NULL AND satscores.numge1500 IS NOT NULL AND satscores.numtsttakr IS NOT NULL AND frpm.`free meal count (ages 5-17)` IS NOT NULL AND frpm.`enrollment (ages 5-17)` IS NOT NULL AND satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > "
        ]
      ]
    },
    {
      "id": 13,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE numge1500 IS NOT NULL AND numtsttakr IS NOT NULL) ORDER BY cast(numge1500 AS REAL) / numtsttakr DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 14,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5",
          "SELECT ncesschool FROM schools WHERE cdscode IN (SELECT cdscode FROM frpm WHERE \"Enrollment (ages 5-17)\" = (SELECT max(\"Enrollment (ages 5-17)\") FROM frpm));",
          "SELECT schools.ncesdist FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5",
          "SELECT schools.ncesschool FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE frpm.\"Enrollment (ages 5-17)\" = (SELECT max(\"Enrollment (ages 5-17)\") FROM frpm) LIMIT 5;"
        ]
      ]
    },
    {
      "id": 15,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT dname FROM satscores WHERE avgscrread IS NOT NULL GROUP BY dname ORDER BY avg(avgscrread) DESC LIMIT 1;",
          "SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1",
          "SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1;",
          "SELECT dname FROM satscores WHERE avgscrread IS NOT NULL GROUP BY dname ORDER BY avg(avgscrread) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 16,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.cname = 'Alameda' AND satscores.numtsttakr < 100",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr < 100 AND schools.county = 'Alameda' AND schools.statustype = 'Merged'"
        ]
      ]
    },
    {
      "id": 17,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`charter school number` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrwrite > 499",
          "SELECT DISTINCT frpm.`charter school number` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrwrite > 499",
          "SELECT frpm.`charter school number` FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrwrite > 499;",
          "SELECT DISTINCT schools.charternum FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite > 499"
        ]
      ]
    },
    {
      "id": 18,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250",
          "SELECT count(*) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;"
        ]
      ]
    },
    {
      "id": 19,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE avgscrmath IS NOT NULL));",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores));",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE avgscrmath IS NOT NULL))",
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 20,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND schools.county = 'Amador'",
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`high grade` = 12 AND frpm.`low grade` = 9 AND schools.county = 'Amador'",
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Amador' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12",
          "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Amador' AND frpm.`high grade` = 12 AND frpm.`low grade` = 9"
        ]
      ]
    },
    {
      "id": 21,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Los Angeles' AND frpm.\"Free Meal Count (K-12)\" > 500 AND frpm.\"Free Meal Count (K-12)\" < 700",
          "SELECT count(frpm.`school code`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Los Angeles' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Los Angeles' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Los Angeles' AND frpm.\"Free Meal Count (K-12)\" BETWEEN 51 AND 69"
        ]
      ]
    },
    {
      "id": 22,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1;",
          "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 23,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT schools.`school name`, schools.street FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > 30",
          "SELECT DISTINCT schools.`school name`, schools.street FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30",
          "SELECT schools.`school name`, schools.street FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30",
          "SELECT DISTINCT schools.`school name`, schools.street FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.school = frpm.`school name` AND (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > 30;"
        ]
      ]
    },
    {
      "id": 24,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500",
          "SELECT DISTINCT schools.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500",
          "SELECT DISTINCT schools.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500",
          "SELECT DISTINCT frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0 AND satscores.numtsttakr >= 1500"
        ]
      ]
    },
    {
      "id": 25,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, schools.fundingtype FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Riverside' AND satscores.avgscrmath > 400",
          "SELECT schools.school, schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Riverside' AND satscores.avgscrmath > 400",
          "SELECT DISTINCT schools.school, schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Riverside' AND satscores.avgscrmath > 400",
          "SELECT schools.school, schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Riverside' AND satscores.avgscrmath > 400 GROUP BY schools.school, schools.fundingtype"
        ]
      ]
    },
    {
      "id": 26,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT frpm.`school name`, schools.street, schools.city, schools.state, schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Monterey' AND frpm.`free meal count (ages 15-17)` > 800",
          "SELECT DISTINCT frpm.`school name`, schools.street, schools.city, schools.state, schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 15-17)` > 800",
          "SELECT DISTINCT schools.school, schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 15-17)` > 800 AND schools.city = 'Monterey'",
          "SELECT DISTINCT frpm.`school name`, schools.street, schools.city, schools.state, schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 15-17)` > 800 AND schools.city = 'Monterey'"
        ]
      ]
    },
    {
      "id": 27,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT satscores.avgscrwrite, satscores.sname, schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'",
          "SELECT satscores.avgscrwrite, schools.school, schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'",
          "SELECT satscores.avgscrwrite, schools.school, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'",
          "SELECT satscores.avgscrwrite, satscores.sname, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'"
        ]
      ]
    },
    {
      "id": 28,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(`enrollment (k-12)` - `enrollment (ages 5-17)`) FROM frpm )",
          "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(`enrollment (k-12)` - `enrollment (ages 5-17)`) FROM frpm )",
          "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' )",
          "SELECT schools.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' )"
        ]
      ]
    },
    {
      "id": 29,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsoffered = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
          "SELECT opendate FROM schools WHERE gsoffered = 'K-12' ORDER BY `enrollment (k-12)` DESC LIMIT 1",
          "SELECT opendate FROM schools WHERE gsoffered = 'K-12' ORDER BY enroll12 DESC LIMIT 1",
          "SELECT opendate FROM schools WHERE gsoffered = 'K-12' ORDER BY enroll12 DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 30,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` LIMIT 5",
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 5",
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` IS NOT NULL ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 5",
          "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` IS NOT NULL ORDER BY frpm.`enrollment (k-12)` LIMIT 5"
        ]
      ]
    },
    {
      "id": 31,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool LIMIT 1, 2",
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool ASC LIMIT 1, 2",
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool ASC LIMIT 1, 10",
          "SELECT frpm.`free meal count (k-12)`, frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool LIMIT 9, 2"
        ]
      ]
    },
    {
      "id": 32,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5",
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.`school code` = schools.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5",
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.`school code` = schools.cdscode WHERE schools.soc = '66' ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5",
          "SELECT frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = '66' ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 33,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT schools.website, schools.school FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
          "SELECT DISTINCT schools.website, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
          "SELECT DISTINCT schools.website, frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
          "SELECT DISTINCT schools.website, schools.school FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 5-17)` = 1900 AND frpm.`free meal count (ages 5-17)` = 2000"
        ]
      ]
    },
    {
      "id": 34,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admfname2 = 'Gibson'",
          "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admfname2 = 'Gibson'",
          "SELECT cast(frpm.`free meal count (ages 5-17)` AS REAL) / frpm.`enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admfname2 = 'Gibson'",
          "SELECT frpm.\"Free meal count (ages 5-17)\" / frpm.\"Enrollment (ages 5-17)\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admfname2 = 'Gibson'"
        ]
      ]
    },
    {
      "id": 35,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 1",
          "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.charter = 1 ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 1",
          "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 1",
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` LIMIT 1"
        ]
      ]
    },
    {
      "id": 36,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores)",
          "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores WHERE numge1500 IS NOT NULL)",
          "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores WHERE numge1500 IS NOT NULL);",
          "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname1, schools.admlname2, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores)"
        ]
      ]
    },
    {
      "id": 37,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.street, schools.city, schools.state, schools.zip FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr LIMIT 1",
          "SELECT schools.street, schools.city, schools.state, schools.zip FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr ASC LIMIT 1",
          "SELECT schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE satscores.numge1500 IS NOT NULL ORDER BY satscores.numge1500 ASC LIMIT 1",
          "SELECT schools.street, schools.city, schools.state, schools.zip FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 IS NOT NULL AND satscores.numtsttakr IS NOT NULL ORDER BY satscores.numge1500 / satscores.numtsttakr ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 38,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.website FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr BETWEEN 2000 AND 3000 AND schools.county = 'Los Angeles'",
          "SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000 AND schools.county = 'Los Angeles'",
          "SELECT DISTINCT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000 AND schools.county = 'Los Angeles'",
          "SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Los Angeles' AND satscores.numtsttakr BETWEEN 2000 AND 3000"
        ]
      ]
    },
    {
      "id": 39,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31'",
          "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31' AND schools.city = 'Fresno'",
          "SELECT avg(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31'",
          "SELECT cast(sum(satscores.numtsttakr) AS REAL) / count(schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31'"
        ]
      ]
    },
    {
      "id": 40,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.avgscrread ASC LIMIT 1",
          "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.avgscrread ASC LIMIT 1",
          "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE dname = 'Fresno Unified' AND avgscrread IS NOT NULL ORDER BY avgscrread ASC LIMIT 1);",
          "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.avgscrread LIMIT 1"
        ]
      ]
    },
    {
      "id": 41,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' GROUP BY satscores.sname ORDER BY avg(satscores.avgscrread) DESC LIMIT 5",
          "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' GROUP BY satscores.sname ORDER BY sum(satscores.avgscrread) DESC LIMIT 5",
          "SELECT satscores.sname FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' AND satscores.avgscrread IS NOT NULL ORDER BY satscores.avgscrread DESC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 42,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT edopsname FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE avgscrmath IS NOT NULL));",
          "SELECT schools.edopsname FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1",
          "SELECT schools.`edopsname` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1",
          "SELECT DISTINCT schools.edopsname FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 43,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT satscores.avgscrmath, schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath ASC LIMIT 1",
          "SELECT satscores.avgscrmath, schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath LIMIT 1",
          "SELECT satscores.avgscrmath, satscores.cname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath ASC LIMIT 1",
          "SELECT satscores.avgscrmath, schools.county FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath = (SELECT min(avgscrmath) FROM satscores);"
        ]
      ]
    },
    {
      "id": 44,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT satscores.avgscrwrite, schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )",
          "SELECT satscores.avgscrwrite, schools.city FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = (SELECT max(numtsttakr) FROM satscores WHERE numtsttakr >= 1500);",
          "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )",
          "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = (SELECT max(numtsttakr) FROM satscores WHERE numtsttakr >= 1500) GROUP BY satscores.cds, schools.city;"
        ]
      ]
    },
    {
      "id": 45,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT satscores.avgscrwrite, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich'",
          "SELECT satscores.sname, avg(satscores.avgscrwrite) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich'",
          "SELECT satscores.sname, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich'",
          "SELECT satscores.sname, avg(satscores.avgscrwrite) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich' GROUP BY satscores.sname"
        ]
      ]
    },
    {
      "id": 46,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '31' AND schools.gsserved = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
          "SELECT schools.edopsname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '31' AND schools.gsserved = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
          "SELECT schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soctype = 'State Special Schools' AND schools.doc = '31' AND schools.gsserved = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
          "SELECT schools.school FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '31' AND schools.gsserved = 'K-12' GROUP BY schools.school ORDER BY sum(frpm.\"Enrollment (k-12)\") DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 47,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(count(schools.doc) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = '52' AND strftime('%Y', schools.opendate) = '1980'",
          "SELECT cast(count(schools.school) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = '52' AND strftime('%Y', schools.opendate) = '1980'",
          "SELECT cast(count(schools.school) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = 52 AND schools.county = 'Alameda' AND strftime('%Y', schools.opendate) = '1980'",
          "SELECT cast(count(schools.doc) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = 52 AND strftime('%Y', schools.opendate) = '1980'"
        ]
      ]
    },
    {
      "id": 48,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'",
          "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'",
          "SELECT cast(count(CASE WHEN schools.doc = 54 THEN 1 ELSE NULL END) AS REAL) / count(CASE WHEN schools.doc = 52 THEN 1 ELSE NULL END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'",
          "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange' AND schools.doc IN (52, 54)"
        ]
      ]
    },
    {
      "id": 49,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT DISTINCT schools.county, schools.school, schools.closeddate FROM schools schools WHERE schools.statustype = 'Closed';",
          "SELECT schools.county, schools.school, schools.closeddate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(schools.school) DESC LIMIT 1",
          "SELECT county, school, closeddate FROM schools WHERE statustype = 'Closed' GROUP BY county, school, closeddate ORDER BY county DESC LIMIT 1;",
          "SELECT schools.county, schools.school, schools.closeddate FROM schools schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(schools.school) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 50,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1, 1",
          "SELECT schools.mailstreet, schools.school FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1, 1",
          "SELECT schools.mailstreet, schools.street FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1, 1",
          "SELECT schools.mailstreet, schools.`school name` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1, 1"
        ]
      ]
    },
    {
      "id": 51,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.mailstreet, schools.ncesschool FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread ASC LIMIT 1",
          "SELECT schools.mailstreet, schools.ncesschool FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrread ASC LIMIT 1",
          "SELECT schools.mailstreet, schools.ncesschool FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread LIMIT 1",
          "SELECT schools.mailstreet, schools.ncesschool FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores )"
        ]
      ]
    },
    {
      "id": 52,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500",
          "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.numge1500 > 0",
          "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Lakeport' AND satscores.numge1500 > 0"
        ]
      ]
    },
    {
      "id": 53,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.mailcity) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno'",
          "SELECT count(schools.mailcity) FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno'",
          "SELECT count(DISTINCT satscores.numtsttakr) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno';",
          "SELECT sum(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno'"
        ]
      ]
    },
    {
      "id": 54,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT mailzip FROM schools WHERE admfname1 = 'Avetik'",
          "SELECT DISTINCT schools.school, schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Avetik'",
          "SELECT school, mailzip FROM schools WHERE admfname1 = 'Avetik'",
          "SELECT mailzip FROM schools WHERE admfname1 = 'Avetik' OR admfname2 = 'Avetik'"
        ]
      ]
    },
    {
      "id": 55,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT (SELECT count(*) FROM schools WHERE mailstate = 'CA' AND county = 'Colusa') * 1.0 / (SELECT count(*) FROM schools WHERE mailstate = 'CA' AND county = 'Humboldt') AS ratio;",
          "SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA'",
          "SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools schools WHERE schools.mailstate = 'CA';",
          "SELECT cast(sum(CASE WHEN counties.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN counties.county = 'Humboldt' THEN 1 ELSE 0 END) FROM counties INNER JOIN schools ON counties.code = schools.county WHERE schools.mailstate = 'CA'"
        ]
      ]
    },
    {
      "id": 56,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.mailstate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.city = 'San Joaquin' AND schools.statustype = 'Active'",
          "SELECT count(*) FROM schools WHERE mailstate = 'CA' AND city = 'San Joaquin' AND statustype = 'Active';",
          "SELECT count(schools.mailstate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.mailcity = 'San Joaquin' AND schools.statustype = 'Active'",
          "SELECT count(*) FROM schools WHERE state = 'CA' AND mailcity = 'San Joaquin' AND statustype = 'Active';"
        ]
      ]
    },
    {
      "id": 57,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.phone, schools.ext FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrwrite DESC LIMIT 332, 1",
          "SELECT schools.phone, schools.ext FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 332, 1",
          "SELECT schools.phone, schools.ext FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrwrite = (SELECT max(avgscrwrite) FROM satscores WHERE avgscrwrite IS NOT NULL) LIMIT 2, 1;",
          "SELECT schools.phone, schools.ext FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrwrite = (SELECT max(satscores.avgscrwrite) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode) LIMIT 2, 1;"
        ]
      ]
    },
    {
      "id": 58,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT phone, ext, school FROM schools WHERE zip = '95203-3704'",
          "SELECT phone, ext FROM schools WHERE zip = '95203-3704'",
          "SELECT phone, ext, school FROM schools WHERE zip = '95203-3704';",
          "SELECT phone, ext, school FROM schools WHERE zip = 952033704"
        ]
      ]
    },
    {
      "id": 59,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT website FROM schools WHERE (admfname1 = 'Mike' AND admfname2 = 'Larson') OR (admfname1 = 'Dante' AND admfname2 = 'Alvarez');",
          "SELECT website FROM schools WHERE admfname1 = 'Mike' AND admfname2 = 'Larson' OR admfname1 = 'Dante' AND admfname2 = 'Alvarez'",
          "SELECT website FROM schools WHERE (admfname1 = 'Mike' AND admfname2 = 'Larson') OR (admfname1 = 'Dante' AND admfname2 = 'Alvarez')",
          "SELECT website FROM schools WHERE admfname1 IN ('Mike', 'Dante') AND admfname2 = 'Larson' AND admfname3 = 'Alvarez'"
        ]
      ]
    },
    {
      "id": 60,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT website FROM schools WHERE charter = 1 AND virtual = 'P' AND county = 'San Joaquin'",
          "SELECT website FROM schools WHERE charter = 1 AND virtual = 'P' AND county = 'San Joaquin';",
          "SELECT DISTINCT website FROM schools WHERE charter = 1 AND virtual = 'P' AND county = 'San Joaquin'",
          "SELECT DISTINCT website FROM schools WHERE charter = 1 AND virtual = 'P' AND county = 'San Joaquin';"
        ]
      ]
    },
    {
      "id": 61,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM schools WHERE charter = 1 AND city = 'Hickman' AND doc = '52';",
          "SELECT count(*) FROM schools WHERE city = 'Hickman' AND charter = 1 AND doc = '52';",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.`charter school number` WHERE schools.city = 'Hickman' AND schools.doc = '52' AND schools.charter = 1",
          "SELECT count(*) FROM schools WHERE city = 'Hickman' AND doc = '52' AND charter = 1;"
        ]
      ]
    },
    {
      "id": 62,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.charter = 0 AND frpm.`percent (%) eligible free (k-12)` < 0.18",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.charter = 0 AND frpm.`free meal count (k-12)` * 100 / frpm.`enrollment (k-12)` < 0.18",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.charter = 0 AND frpm.`free meal count (k-12)` < 0.0018 AND frpm.`percent (%) eligible free (k-12)` < 0.18",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.charter = 0 AND frpm.`free meal count (k-12)` < 0.0018 AND frpm.`percent (%) eligible free (k-12)` < 0.0018"
        ]
      ]
    },
    {
      "id": 63,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admfname1, schools.admfname2, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2' AND schools.charter = 1",
          "SELECT schools.admfname1, schools.admfname2, schools.school, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2' AND schools.charter = 1",
          "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2' AND schools.charter = 1",
          "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.school, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2' AND schools.charter = 1"
        ]
      ]
    },
    {
      "id": 64,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailcity = 'Hickman' AND frpm.`charter school number` = '00D4'",
          "SELECT count(*) FROM schools WHERE mailcity = 'Hickman' AND `charter school number` = '00D4';",
          "SELECT count(schools.mailcity) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D4' AND schools.mailcity = 'Hickman'",
          "SELECT count(*) FROM schools WHERE mailcity = 'Hickman' AND `charter school number` = '00D4'"
        ]
      ]
    },
    {
      "id": 65,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN schools.fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(schools.fundingtype) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Santa Clara'",
          "SELECT cast(sum(CASE WHEN fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(fundingtype) FROM schools WHERE county = 'Santa Clara'",
          "SELECT cast(sum(CASE WHEN schools.fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Santa Clara'",
          "SELECT cast(sum(CASE WHEN fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM schools WHERE county = 'Santa Clara'"
        ]
      ]
    },
    {
      "id": 66,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(*) FROM schools WHERE fundingtype = 'Directly funded' AND county = 'Stanislaus' AND opendate BETWEEN '2000-01-01' AND '2005-12-31';",
          "SELECT count(*) FROM schools WHERE fundingtype = 'Directly Funded' AND county = 'Stanislaus' AND opendate BETWEEN '2000-01-01' AND '2005-12-31';",
          "SELECT count(DISTINCT schools.cdscode) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Directly funded' AND schools.county = 'Stanislaus' AND schools.opendate BETWEEN '2000-01-01' AND '2005-12-31';",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Directly funded' AND schools.county = 'Stanislaus' AND schools.opendate BETWEEN '2000-01-01' AND '2005-12-31'"
        ]
      ]
    },
    {
      "id": 67,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN strftime('%Y', schools.closeddate) = '1989' THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'San Francisco'",
          "SELECT sum(CASE WHEN strftime('%Y', schools.closeddate) = '1989' THEN 1 ELSE 0 END) FROM schools schools WHERE schools.city = 'San Francisco';",
          "SELECT sum(CASE WHEN strftime('%Y', closeddate) = '1989' THEN 1 ELSE 0 END) FROM schools WHERE city = 'San Francisco'",
          "SELECT sum(schools.closeddate IS NOT NULL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'San Francisco' AND strftime('%Y', schools.closeddate) = '1989'"
        ]
      ]
    },
    {
      "id": 68,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT county FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = '11' GROUP BY county ORDER BY county DESC LIMIT 1",
          "SELECT county FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = '11' GROUP BY county ORDER BY county DESC LIMIT 1;",
          "SELECT county FROM (SELECT county, count(school) AS numschools FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = '11' GROUP BY county) WHERE numschools = (SELECT max(numschools) FROM (SELECT county, count(school) AS numschools FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = '11' GROUP BY county))",
          "SELECT county FROM (SELECT county, count(*) AS numschools FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = '11' GROUP BY county) WHERE numschools = (SELECT max(numschools) FROM (SELECT county, count(*) AS numschools FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = '11' GROUP BY county))"
        ]
      ]
    },
    {
      "id": 69,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT ncesdist FROM schools WHERE soc = '31' AND soctype = 'State Special Schools'",
          "SELECT ncesdist FROM schools WHERE soc = '31' AND soctype = 'State Special Schools';",
          "SELECT ncesdist FROM schools WHERE soc = '31' AND doctype = 'State Special Schools'",
          "SELECT ncesdist FROM schools WHERE soc = 31;"
        ]
      ]
    },
    {
      "id": 70,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT schools.district) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND (schools.statustype = 'Active' OR schools.statustype = 'Closed') AND schools.edopsname = 'District Community Day School';",
          "SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND (schools.statustype = 'Active' OR schools.statustype = 'Closed') AND schools.edopsname = 'District Community Day School'",
          "SELECT count(*) FROM schools WHERE county = 'Alpine' AND edopsname = 'District Community Day School' AND (statustype = 'Active' OR statustype = 'Closed');",
          "SELECT count(DISTINCT schools.school) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND (schools.statustype = 'Active' OR schools.statustype = 'Closed') AND schools.edopsname = 'District Community Day School';"
        ]
      ]
    },
    {
      "id": 71,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.\"District Code\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.magnet = 0 AND schools.city = 'Fresno';",
          "SELECT DISTINCT frpm.\"District Code\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.magnet = 0 AND schools.city = 'Fresno';",
          "SELECT frpm.\"District Code\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0;",
          "SELECT DISTINCT frpm.\"District Code\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0;"
        ]
      ]
    },
    {
      "id": 72,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT sum(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'",
          "SELECT sum(frpm.`enrollment (ages 5-17)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'",
          "SELECT sum(frpm.`enrollment (ages 5-17)` * schools.edopscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'",
          "SELECT sum(frpm.`enrollment (ages 5-17)` * schools.edopscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'"
        ]
      ]
    },
    {
      "id": 73,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`free meal count (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstrabr = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School'",
          "SELECT frpm.`free meal count (ages 5-17)` FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstrabr = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School';",
          "SELECT frpm.`free meal count (ages 5-17)` FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstreet = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School';",
          "SELECT frpm.\"Free meal count (ages 5-17)\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstrabr = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School';"
        ]
      ]
    },
    {
      "id": 74,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.`low grade` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '0613360' ORDER BY frpm.`low grade` ASC LIMIT 1",
          "SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '0613360' ORDER BY frpm.`low grade` ASC LIMIT 1",
          "SELECT frpm.`low grade` FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '0613360' ORDER BY frpm.`low grade` ASC LIMIT 1;",
          "SELECT frpm.\"Low Grade\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '0613360' ORDER BY frpm.\"Low Grade\" ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 75,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.eilname, frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'",
          "SELECT DISTINCT schools.eilname, frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'",
          "SELECT schools.eilname, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'",
          "SELECT DISTINCT schools.eilname, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'"
        ]
      ]
    },
    {
      "id": 76,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND schools.county = 'Merced' AND schools.eilcode = 'HS'",
          "SELECT schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.eilcode = 'HS' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`county name` = 'Merced'",
          "SELECT schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.eilcode = 'HS' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND frpm.`nslp provision status` = 'Lunch Provision 2' AND schools.county = 'Merced'",
          "SELECT schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.eilcode = 'HS' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`county name` = 'Merced' GROUP BY schools.city"
        ]
      ]
    },
    {
      "id": 77,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.school, cast(frpm.\"FRPM Count (Ages 5-17)\" AS REAL) * 100 / schools.\"Enrollment (Ages 5-17)\" FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.\"Grade Span Served\" = 'Kindergarten to 9th grade'",
          "SELECT schools.school, cast(frpm.\"FRPM Count (Ages 5-17)\" AS REAL) * 100 / schools.\"Enrollment (Ages 5-17)\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.\"Grade Span Served\" = 'Kindergarten to 9th grade';",
          "SELECT schools.school, cast(frpm.\"FRPM Count (Ages 5-17)\" AS REAL) * 100 / schools.\"Enrollment (Ages 5-17)\" FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND schools.\"Grade Span Served\" = 'Kindergarten to 9th grade'",
          "SELECT schools.school, cast(frpm.\"FRPM Count (Ages 5-17)\" AS REAL) * 100 / schools.\"Enrollment (Ages 5-17)\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.\"Grade Span Served\" = 'Kindergarten to 9th grade'"
        ]
      ]
    },
    {
      "id": 78,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(gsserved) DESC LIMIT 1;",
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(*) DESC LIMIT 1;",
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM schools WHERE city = 'Adelanto' GROUP BY gsserved));",
          "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved HAVING count(*) = (SELECT max(cnt) FROM (SELECT count(*) AS cnt FROM schools WHERE city = 'Adelanto' GROUP BY gsserved));"
        ]
      ]
    },
    {
      "id": 79,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT county, count(*) FROM schools WHERE city IN ('San Diego', 'Santa Barbara') AND virtual = 'N' GROUP BY county ORDER BY county DESC LIMIT 1;",
          "SELECT county, count(*) FROM schools WHERE city IN ('San Diego', 'Santa Barbara') AND virtual = 'N' GROUP BY county ORDER BY county DESC LIMIT 1",
          "SELECT county, count(*) FROM schools WHERE city IN ('San Diego', 'Santa Barbara') AND virtual = 'N' GROUP BY county ORDER BY count(*) DESC LIMIT 1;",
          "SELECT counties.county, count(schools.city) FROM schools INNER JOIN counties ON schools.county = counties.county WHERE schools.city IN ('San Diego', 'Santa Barbara') AND schools.virtual = 'N' GROUP BY counties.county ORDER BY count(schools.city) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 80,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.\"School Type\", schools.school, schools.latitude FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.latitude = (SELECT max(latitude) FROM schools);",
          "SELECT frpm.\"School Type\", schools.school, schools.latitude FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.latitude DESC LIMIT 1",
          "SELECT \"School Type\" FROM schools WHERE latitude = ( SELECT max(latitude) FROM schools )",
          "SELECT frpm.\"School Type\", schools.school, schools.latitude FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.latitude IS NOT NULL ORDER BY schools.latitude DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 81,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city, frpm.\"Low Grade\" FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1",
          "SELECT schools.city, frpm.`low grade` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1",
          "SELECT schools.city, frpm.\"Low Grade\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' AND schools.latitude IS NOT NULL ORDER BY schools.latitude ASC LIMIT 1;",
          "SELECT schools.city, frpm.\"Low Grade\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 82,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT gsoffered FROM schools ORDER BY abs(longitude) DESC LIMIT 1",
          "SELECT gsoffered FROM schools ORDER BY longitude DESC LIMIT 1",
          "SELECT gsserved FROM schools ORDER BY abs(longitude) DESC LIMIT 1",
          "SELECT gsoffered FROM schools WHERE longitude = ( SELECT max(abs(longitude)) FROM schools )"
        ]
      ]
    },
    {
      "id": 83,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.city, count(schools.city) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.magnet = 1 AND frpm.`nslp provision status` = 'Multiple Provision Types' GROUP BY schools.city",
          "SELECT schools.city, count(schools.city) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.magnet = 1 AND frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.gsserved = 'K-8 to 8' GROUP BY schools.city",
          "SELECT count(schools.city), schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.magnet = 1 AND frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.gsserved = 'K-8 to 8' GROUP BY schools.city",
          "SELECT schools.city, count(schools.city) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.magnet = 1 AND frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.gsserved = 'K-8 - 8' GROUP BY schools.city"
        ]
      ]
    },
    {
      "id": 84,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT admfname1, admfname1 FROM schools GROUP BY admfname1 ORDER BY count(admfname1) DESC LIMIT 2",
          "SELECT admfname1, admfname2 FROM schools GROUP BY admfname1, admfname2 ORDER BY count(admfname1) DESC LIMIT 2;",
          "SELECT admfname1, admfname2 FROM schools GROUP BY admfname1, admfname2 ORDER BY count(admfname1) DESC LIMIT 2",
          "SELECT admfname1, admfname1 FROM schools GROUP BY admfname1 ORDER BY count(admfname1) DESC LIMIT 2;"
        ]
      ]
    },
    {
      "id": 85,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT frpm.\"District Code\", frpm.\"Percent (%) Eligible Free (K-12)\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine'",
          "SELECT frpm.\"District Code\", frpm.\"Percent (%) Eligible Free (K-12)\" FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Alusine'",
          "SELECT frpm.\"District Code\", frpm.\"Percent (%) Eligible Free (K-12)\" FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Alusine';",
          "SELECT frpm.\"District Code\", (frpm.\"Free Meal Count (K-12)\" / frpm.\"Enrollment (K-12)\")) * 100 AS \"Percent (%) Eligible Free (K-12)\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine'"
        ]
      ]
    },
    {
      "id": 86,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admlname3, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = 40",
          "SELECT schools.admlname1, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = 40",
          "SELECT schools.admlname3, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '40'",
          "SELECT schools.admlname3, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.\"Charter School Number\" = 40"
        ]
      ]
    },
    {
      "id": 87,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = '62' AND schools.doc = '54' AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31'",
          "SELECT DISTINCT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = '62' AND schools.doc = '54' AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31'",
          "SELECT DISTINCT schools.admemail1 FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = '62' AND schools.doc = '54' AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31' AND frpm.\"School Type\" IN ('Public Intermediate/Middle Schools', 'Public Unified Schools');",
          "SELECT DISTINCT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = '62' AND schools.doc = '54' AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31' AND frpm.`school type` IN ( 'Public Intermediate/Middle Schools', 'Public Unified Schools' )"
        ]
      ]
    },
    {
      "id": 88,
      "db_id": "california_schools",
      "infer_predictions": [
        [
          "SELECT schools.admemail1, schools.school FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT schools.admemail1, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1",
          "SELECT schools.admemail1, schools.school FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1;",
          "SELECT schools.admemail1, schools.`school` FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 89,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN account account ON district.district_id = account.district_id WHERE district.a3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU';",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT count(*) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN district district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.a3 = 'east Bohemia';"
        ]
      ]
    },
    {
      "id": 90,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE a3 = 'Prague');",
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN account account ON district.district_id = account.district_id WHERE district.a3 = 'Prague';",
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN district district ON account.district_id = district.district_id WHERE district.a3 = 'Prague';",
          "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague'"
        ]
      ]
    },
    {
      "id": 91,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(a12), avg(a13) FROM district",
          "SELECT a12, a13 FROM district ORDER BY a12 - a13 DESC LIMIT 1",
          "SELECT a12, a13 FROM district ORDER BY (a12 - a13) DESC LIMIT 1",
          "SELECT a12, a13 FROM district ORDER BY (a13 - a12) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 92,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(district_id) FROM district WHERE a11 > 6000 AND a11 < 10000 AND gender = 'F'",
          "SELECT count(district_id) FROM district WHERE a11 BETWEEN 6000 AND 9999 AND gender = 'F'",
          "SELECT count(DISTINCT district_id) FROM district WHERE a11 > 6000 AND a11 < 10000 AND gender = 'F';",
          "SELECT count(district_id) FROM district WHERE district_id IN (SELECT district_id FROM client WHERE gender = 'F') AND a11 > 6000 AND a11 < 10000;"
        ]
      ]
    },
    {
      "id": 93,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a3 = 'North Bohemia' AND client.gender = 'M' AND district.a11 > 8000;",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND district.a11 > 8000;",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'North Bohemia' AND district.a11 > 8000;",
          "SELECT count(*) FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a3 = 'North Bohemia' AND client.gender = 'M' AND district.a11 > 8000;"
        ]
      ]
    },
    {
      "id": 94,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, ( SELECT district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1 ) - ( SELECT district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date DESC LIMIT 1 )",
          "SELECT account.account_id, ( SELECT district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1 ) - ( SELECT district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date DESC LIMIT 1 ) AS gap FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1",
          "SELECT account.account_id, ( SELECT district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC LIMIT 1 ) - ( SELECT district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date DESC LIMIT 1 ) AS gap FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC LIMIT 1",
          "SELECT account.account_id, ( SELECT district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1 ) - ( SELECT district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date DESC LIMIT 1 ) AS salary_gap FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1"
        ]
      ]
    },
    {
      "id": 95,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.birth_date < client.birth_date ORDER BY district.a11 DESC LIMIT 1",
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.birth_date < client.birth_date ORDER BY district.a11 DESC LIMIT 1",
          "SELECT account.account_id FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE client.birth_date < client.birth_date AND district.a11 = (SELECT max(a11) FROM district);",
          "SELECT account.account_id FROM client client JOIN district district ON client.district_id = district.district_id JOIN account account ON client.district_id = account.district_id WHERE client.birth_date < client.birth_date AND district.a11 = (SELECT max(a11) FROM district);"
        ]
      ]
    },
    {
      "id": 96,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN disp disp ON client.client_id = disp.client_id JOIN account account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN card card ON client.client_id = card.disp_id JOIN disp disp ON card.disp_id = disp.disp_id JOIN account account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';"
        ]
      ]
    },
    {
      "id": 97,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT'",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT'",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN account ON card.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT'"
        ]
      ]
    },
    {
      "id": 98,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount ASC LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE strftime('%Y', loan.date) = '1997' AND account.frequency = 'POPLATEK TYDNE' ORDER BY loan.amount LIMIT 1",
          "SELECT account.account_id, account.frequency FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount LIMIT 1"
        ]
      ]
    },
    {
      "id": 99,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date LIKE '1993%' AND loan.duration > 12 ORDER BY loan.amount DESC LIMIT 1",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.date LIKE '1993%' AND loan.duration > 12 ORDER BY loan.amount DESC LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1",
          "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 100,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id JOIN account account ON client.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Sokolov';",
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE district.a2 = 'Sokolov' AND client.gender = 'F' AND client.birth_date < '1950-01-01';",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Sokolov'",
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Sokolov';"
        ]
      ]
    },
    {
      "id": 101,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account_id FROM account WHERE date = ( SELECT min(date) FROM account WHERE strftime('%Y', date) = '1995' )",
          "SELECT account_id FROM account WHERE date = ( SELECT min(date) FROM account WHERE date LIKE '1995%' )",
          "SELECT account_id FROM account WHERE date = (SELECT min(date) FROM account WHERE strftime('%Y', date) = '1995');",
          "SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', account.date) = '1995' ORDER BY account.date ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 102,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.amount > 3000",
          "SELECT DISTINCT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.amount > 3000",
          "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.date < '1997-01-01' AND order.amount > 3000",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND account.account_id IN ( SELECT account_id FROM order WHERE amount > 3000 )"
        ]
      ]
    },
    {
      "id": 103,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE strftime('%Y-%m-%d', card.issued) = '1994-03-03'",
          "SELECT card.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE strftime('%Y-%m-%d', card.issued) = '1994-03-03'",
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE strftime('%Y-%m-%d', card.issued) = '1994-03-03'",
          "SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE strftime('%Y-%m-%d', card.issued) = '1994-03-03'"
        ]
      ]
    },
    {
      "id": 104,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = 840 AND strftime('%Y-%m-%d', trans.date) = '1998-10-14'",
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.date = '1998-10-14' AND account.account_id = 840",
          "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y-%m-%d', trans.date) = '1998-10-14' AND account.account_id = 840",
          "SELECT date FROM account WHERE account_id = 840"
        ]
      ]
    },
    {
      "id": 105,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district_id FROM account WHERE date = '1994-08-25';",
          "SELECT district_id FROM account WHERE date = '1994-08-25'",
          "SELECT account.district_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1994-08-25'",
          "SELECT district_id FROM account WHERE Date = '1994-08-25';"
        ]
      ]
    },
    {
      "id": 106,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT max(trans.amount) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y-%m-%d', card.issued) = '1996-10-21'",
          "SELECT max(trans.amount) FROM card card JOIN disp disp ON card.disp_id = disp.disp_id JOIN client client ON disp.client_id = client.client_id JOIN account account ON disp.account_id = account.account_id JOIN trans trans ON account.account_id = trans.account_id WHERE strftime('%Y-%m-%d', card.issued) = '1996-10-21';",
          "SELECT max(trans.amount) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id INNER JOIN account ON account.account_id = disp.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y-%m-%d', card.issued) = '1996-10-21'",
          "SELECT max(trans.amount) FROM card card JOIN disp disp ON card.disp_id = disp.disp_id JOIN client client ON disp.client_id = client.client_id JOIN account account ON disp.account_id = account.account_id JOIN trans trans ON account.account_id = trans.account_id WHERE card.issued BETWEEN '1996-10-21' AND '1996-10-21';"
        ]
      ]
    },
    {
      "id": 107,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.gender FROM client INNER JOIN district ON client.district_id = district.district_id ORDER BY district.a11 DESC LIMIT 1",
          "SELECT client.gender FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON account.district_id = district.district_id ORDER BY district.a11 DESC LIMIT 1",
          "SELECT client.gender FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a11 = (SELECT max(a11) FROM district);",
          "SELECT client.gender FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a11 = (SELECT max(a11) FROM district) AND client.birth_date = (SELECT min(birth_date) FROM client);"
        ]
      ]
    },
    {
      "id": 108,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT trans.amount FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN client ON client.client_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT t.amount FROM ( SELECT account.account_id, trans.amount FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1 ) AS t",
          "SELECT t.amount FROM ( SELECT account.account_id, trans.amount FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1 ) t",
          "SELECT trans.amount FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = ( SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1 ) ORDER BY trans.date LIMIT 1"
        ]
      ]
    },
    {
      "id": 109,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F';",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F'",
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F'",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a2 = 'Jesenik';"
        ]
      ]
    },
    {
      "id": 110,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.disp_id FROM card INNER JOIN trans ON card.disp_id = trans.disp_id WHERE strftime('%Y-%m-%d', trans.date) = '1998-09-02' AND trans.amount = 5100",
          "SELECT card.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y-%m-%d', trans.date) = '1998-09-02' AND trans.amount = 5100",
          "SELECT card.disp_id FROM trans INNER JOIN card ON trans.disp_id = card.disp_id WHERE strftime('%Y-%m-%d', trans.date) = '1998-09-02' AND trans.amount = 5100",
          "SELECT card.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y-%m-%d', trans.date) = '1998-09-02' AND trans.amount = '5100'"
        ]
      ]
    },
    {
      "id": 111,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Litomerice' AND strftime('%Y', account.date) = '1996'",
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN account account ON district.district_id = account.district_id WHERE district.a2 = 'Litomerice' AND strftime('%Y', account.date) = '1996';",
          "SELECT sum(CASE WHEN district.a2 = 'Litomerice' THEN 1 ELSE 0 END) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE strftime('%Y', account.date) = '1996'",
          "SELECT count(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND strftime('%Y', account.date) = '1996'"
        ]
      ]
    },
    {
      "id": 112,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'",
          "SELECT district.a2 FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'",
          "SELECT district.a2 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'",
          "SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.birth_date = '1976-01-29' AND client.gender = 'F'"
        ]
      ]
    },
    {
      "id": 113,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.date = '1996-01-03' AND loan.amount = 98832",
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE loan.date = '1996-01-03' AND loan.amount = 98832",
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND strftime('%Y', loan.date) = '1996' AND strftime('%m', loan.date) = '01' AND strftime('%d', loan.date) = '03'",
          "SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date LIKE '1996-01-03%'"
        ]
      ]
    },
    {
      "id": 114,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague' ORDER BY client.client_id LIMIT 1",
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague' ORDER BY client.birth_date LIMIT 1",
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague' ORDER BY client.client_id ASC LIMIT 1",
          "SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague' AND client.gender = 'M' ORDER BY client.birth_date LIMIT 1"
        ]
      ]
    },
    {
      "id": 115,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia'",
          "SELECT cast(count(CASE WHEN client.gender = 'M' THEN client.client_id ELSE NULL END) AS REAL) * 100 / count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia'"
        ]
      ]
    },
    {
      "id": 116,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast((sum(trans.balance) - sum(trans.balance)) AS REAL) * 100 / sum(trans.balance) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-03-22' AND account.date = '1998-12-27'",
          "SELECT cast((sum(trans.balance) - sum(trans.balance)) AS REAL) * 100 / sum(trans.balance) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-03-22' AND account.date = '1998-12-27'",
          "SELECT cast((sum(trans.balance) - sum(trans.balance)) AS REAL) * 100 / sum(trans.balance) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-03-22' AND account.date = '1998-12-27' AND loan.date = '1993-07-05'",
          "SELECT cast((sum(trans.balance) - sum(trans.balance)) AS REAL) * 100 / sum(trans.balance) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-03-22' AND account.date = '1998-12-27' AND loan.status = 'A'"
        ]
      ]
    },
    {
      "id": 117,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / sum(amount) FROM loan",
          "SELECT cast(sum(CASE WHEN status = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM loan",
          "SELECT cast(sum(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) AS REAL) * 100 / sum(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id",
          "SELECT cast(sum(CASE WHEN status = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / count(loan_id) FROM loan"
        ]
      ]
    },
    {
      "id": 118,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN loan.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount < 100000",
          "SELECT cast(sum(CASE WHEN loan.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount < 100000",
          "SELECT cast(sum(CASE WHEN loan.amount < 100000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C'",
          "SELECT cast(sum(CASE WHEN loan.amount < 100000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(loan.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id"
        ]
      ]
    },
    {
      "id": 119,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND strftime('%Y', account.date) = '1993'",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date LIKE '1993%' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND account.date LIKE '1993%'"
        ]
      ]
    },
    {
      "id": 120,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, account.frequency FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31'",
          "SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31'",
          "SELECT account.account_id, account.frequency FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.date BETWEEN '1995-01-01' AND '2000-12-31' AND district.a3 = 'east Bohemia'",
          "SELECT account.account_id, account.frequency FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'east Bohemia' AND strftime('%Y', account.date) BETWEEN '1995' AND '2000'"
        ]
      ]
    },
    {
      "id": 121,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, account.date FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Prachatice'",
          "SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice'",
          "SELECT account.account_id, account.date FROM district district JOIN account account ON district.district_id = account.district_id WHERE district.a2 = 'Prachatice';",
          "SELECT a.account_id, a.date FROM district d JOIN account a ON d.district_id = a.district_id WHERE d.a2 = 'Prachatice';"
        ]
      ]
    },
    {
      "id": 122,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990'",
          "SELECT district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.loan_id = '4990'",
          "SELECT district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.account_id WHERE loan.loan_id = '4990'",
          "SELECT a2, a3 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE loan_id = '4990'));"
        ]
      ]
    },
    {
      "id": 123,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount > 300000",
          "SELECT account.account_id, district.a2, district.a3 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount > 300000",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000",
          "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.amount > 300000"
        ]
      ]
    },
    {
      "id": 124,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT loan.loan_id, district.a3, district.a11 FROM district INNER JOIN loan ON district.district_id = loan.account_id WHERE loan.duration = 60",
          "SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60",
          "SELECT loan.loan_id, district.a3, district.a11 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.duration = 60",
          "SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.district_id = district.district_id WHERE loan.duration = 60"
        ]
      ]
    },
    {
      "id": 125,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a3, (district.a13 - district.a12) * 100 / district.a12 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'D'",
          "SELECT district.a3, (district.a13 - district.a12) * 100 / district.a12 FROM district INNER JOIN loan ON district.district_id = loan.account_id WHERE loan.status = 'D'",
          "SELECT district.a12, district.a13, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'D'",
          "SELECT district.a3, (district.a13 - district.a12) * 100 / district.a12 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.status = 'D'"
        ]
      ]
    },
    {
      "id": 126,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'",
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE strftime('%Y', account.date) = '1993'",
          "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'",
          "SELECT cast(count(CASE WHEN district.a2 = 'Decin' THEN account.account_id ELSE NULL END) AS REAL) * 100 / count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE strftime('%Y', account.date) = '1993'"
        ]
      ]
    },
    {
      "id": 127,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';",
          "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
          "SELECT DISTINCT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';",
          "SELECT account_id FROM account WHERE frequency LIKE 'POPLATEK MESICNE';"
        ]
      ]
    },
    {
      "id": 128,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN client ON account.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.a2 ORDER BY count(client.gender) DESC LIMIT 9",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN client ON account.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.a2 ORDER BY count(client.client_id) DESC LIMIT 9",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN client ON account.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.district_id ORDER BY count(client.client_id) DESC LIMIT 9",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN client ON account.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.district_id ORDER BY count(client.gender) DESC LIMIT 9"
        ]
      ]
    },
    {
      "id": 129,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2, sum(trans.amount) FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(trans.date, 1, 7) = '1996-01' AND trans.type = 'VYDAJ' GROUP BY district.a2 ORDER BY sum(trans.amount) DESC LIMIT 10",
          "SELECT district.a2, sum(trans.amount) FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(trans.date, 1, 7) = '1996-01' AND trans.type = 'VYDAJ' AND card.card_id IS NULL GROUP BY district.a2 ORDER BY sum(trans.amount) DESC LIMIT 10",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(trans.date, 1, 7) = '1996-01' AND trans.type = 'VYDAJ' GROUP BY district.a2 ORDER BY count(district.a2) DESC LIMIT 10",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(trans.date, 1, 7) = '1996-01' AND trans.type = 'VYDAJ'"
        ]
      ]
    },
    {
      "id": 130,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE district.a3 = 'south Bohemia' AND client.client_id NOT IN (SELECT client_id FROM card);",
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE district.a3 = 'south Bohemia' AND account.card_id IS NULL;",
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE district.a3 = 'south Bohemia' AND account.account_id NOT IN (SELECT client_id FROM card);",
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE district.a3 = 'south Bohemia' AND account.account_id NOT IN (SELECT account_id FROM card);"
        ]
      ]
    },
    {
      "id": 131,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY count(loan.status) DESC LIMIT 1",
          "SELECT district.a3 FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'C' ORDER BY loan.duration DESC LIMIT 1",
          "SELECT district.a3 FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'C' ORDER BY loan.amount DESC LIMIT 1",
          "SELECT district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' ORDER BY loan.duration DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 132,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'M'",
          "SELECT avg(loan.amount) FROM client client JOIN loan loan ON client.client_id = loan.client_id WHERE client.gender = 'M';",
          "SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.client_id = client.client_id WHERE client.gender = 'M'",
          "SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M'"
        ]
      ]
    },
    {
      "id": 133,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district_id, a2 FROM district WHERE a13 = ( SELECT max(a13) FROM district )",
          "SELECT district_id, a2 FROM district WHERE a13 = (SELECT max(a13) FROM district WHERE a13 IS NOT NULL);",
          "SELECT district_id, a2 FROM district ORDER BY a13 DESC LIMIT 1",
          "SELECT district_id, a2 FROM district WHERE a13 = (SELECT max(a13) FROM district WHERE a13 IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 134,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM account WHERE district_id = (SELECT district_id FROM district ORDER BY a16 DESC LIMIT 1);",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a16 = ( SELECT max(a16) FROM district )",
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN account account ON district.district_id = account.district_id WHERE district.a16 = (SELECT max(a16) FROM district);",
          "SELECT count(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE a16 = (SELECT max(a16) FROM district));"
        ]
      ]
    },
    {
      "id": 135,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0",
          "SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0 AND trans.operation = 'VYBER KARTOU'",
          "SELECT count(t.account_id) FROM ( SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.operation = 'VYBER KARTOU' AND trans.balance < 0 GROUP BY account.account_id ) t",
          "SELECT count(account.account_id) FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0"
        ]
      ]
    },
    {
      "id": 136,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT loan.loan_id) FROM account account JOIN loan loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND account.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.amount >= 250000;",
          "SELECT count(loan.loan_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND account.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.amount >= 250000",
          "SELECT count(loan.loan_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31'",
          "SELECT count(DISTINCT loan.loan_id) FROM account account JOIN loan loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND account.date BETWEEN '1995-01-01' AND '1997-12-31';"
        ]
      ]
    },
    {
      "id": 137,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM account WHERE district_id = 1 AND status = 'C';",
          "SELECT count(account_id) FROM account WHERE district_id = 1 AND status = 'C'",
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN loan loan ON account.account_id = loan.account_id WHERE account.district_id = 1 AND loan.status = 'C';",
          "SELECT count(account_id) FROM account WHERE district_id = 1 AND status = 'C';"
        ]
      ]
    },
    {
      "id": 138,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a15 = (SELECT max(a15) FROM district) AND client.gender = 'M';",
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a15 = (SELECT max(a15) FROM district WHERE a15 IS NOT NULL) AND client.gender = 'M';",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a15 = (SELECT max(a15) FROM district);",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a15 = (SELECT max(a15) FROM district WHERE a15 IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 139,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT card.card_id) FROM card card JOIN disp disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
          "SELECT count(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'",
          "SELECT count(*) FROM card card JOIN disp disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'"
        ]
      ]
    },
    {
      "id": 140,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE a2 = 'Pisek');",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Pisek'",
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN account account ON district.district_id = account.district_id WHERE district.a2 = 'Pisek';",
          "SELECT sum(CASE WHEN a2 = 'Pisek' THEN 1 ELSE 0 END) FROM district"
        ]
      ]
    },
    {
      "id": 141,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.district_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1997' AND trans.amount > 10000",
          "SELECT district.a3 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', account.date) = '1997' AND trans.amount > 10000",
          "SELECT district.a3 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(trans.date, 1, 4) = '1997' AND trans.amount > 10000",
          "SELECT district.district_id FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE substr(trans.date, 1, 4) = '1997' AND trans.amount > 10000"
        ]
      ]
    },
    {
      "id": 142,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN order ON account.account_id = order.account_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO'",
          "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO'",
          "SELECT account.account_id FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN order ON account.account_id = order.account_id WHERE order.k_symbol = 'SIPO' AND district.a2 = 'Pisek'",
          "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id INNER JOIN district ON account.district_id = district.district_id WHERE order.k_symbol = 'SIPO' AND district.a2 = 'Pisek'"
        ]
      ]
    },
    {
      "id": 143,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type = 'gold'",
          "SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.disp_id WHERE card.type = 'gold'",
          "SELECT DISTINCT account.account_id FROM card card JOIN disp disp ON card.disp_id = disp.disp_id JOIN account account ON disp.account_id = account.account_id WHERE card.type = 'gold';",
          "SELECT DISTINCT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type = 'gold'"
        ]
      ]
    },
    {
      "id": 144,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(trans.amount) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '2021' AND trans.operation = 'VYBER KARTOU'",
          "SELECT avg(amount) FROM trans WHERE strftime('%Y', date) = '2021' AND operation = 'VYBER KARTOU'",
          "SELECT avg(trans.amount) FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE strftime('%Y', trans.date) = '2021' AND trans.operation = 'VYBER KARTOU'",
          "SELECT avg(trans.amount) FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON card.card_id = trans.account_id WHERE strftime('%Y', trans.date) = '2021' AND trans.operation = 'VYBER KARTOU'"
        ]
      ]
    },
    {
      "id": 145,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT DISTINCT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1998' AND trans.operation = 'VYBER KARTOU' AND trans.amount < ( SELECT avg(amount) FROM trans WHERE strftime('%Y', date) = '1998' AND operation = 'VYBER KARTOU' )",
          "SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1998' AND trans.operation = 'VYBER KARTOU' AND trans.amount < ( SELECT avg(amount) FROM trans WHERE strftime('%Y', date) = '1998' AND operation = 'VYBER KARTOU' )",
          "SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1998' AND trans.operation = 'VYBER KARTOU' GROUP BY account.account_id HAVING sum(trans.amount) < ( SELECT avg(amount) FROM trans )",
          "SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1998' AND trans.amount < ( SELECT avg(amount) FROM trans WHERE strftime('%Y', date) = '1998' )"
        ]
      ]
    },
    {
      "id": 146,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id INNER JOIN loan ON card.disp_id = loan.account_id WHERE client.gender = 'F'",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F'",
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE client.gender = 'F'",
          "SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN card ON card.disp_id = disp.disp_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F'"
        ]
      ]
    },
    {
      "id": 147,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a3 = 'south Bohemia';",
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F';",
          "SELECT count(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a3 = 'south Bohemia';",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a3 = 'south Bohemia'"
        ]
      ]
    },
    {
      "id": 148,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Tabor' AND account.`type` = 'OWNER'",
          "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Tabor' AND account.frequency = 'ELIGIBLE'",
          "SELECT account.account_id FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Tabor' AND account.frequency = 'ELIGIBLE'",
          "SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Tabor' AND account.frequency = 'ELIGIBLE' AND account.account_id IN ( SELECT account_id FROM loan )"
        ]
      ]
    },
    {
      "id": 149,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT DISTINCT account.frequency, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'OWNER' AND district.a11 > 8000 AND district.a11 < 9000",
          "SELECT DISTINCT account.frequency, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'OWNER' AND district.a11 > 8000 AND district.a11 <= 9000",
          "SELECT DISTINCT account.frequency, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'OWNER' AND district.a11 > 8000 AND district.a11 < 9001",
          "SELECT account.account_id, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_type = 'OWNER' AND district.a11 > 8000 AND district.a11 < 9000"
        ]
      ]
    },
    {
      "id": 150,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN account account ON district.district_id = account.district_id JOIN trans trans ON account.account_id = trans.account_id WHERE district.a3 = 'North Bohemia' AND trans.bank = 'AB';",
          "SELECT count(*) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'North Bohemia' AND trans.bank = 'AB'",
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'North Bohemia' AND trans.bank = 'AB'",
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'North Bohemia' AND account.bank = 'AB'"
        ]
      ]
    },
    {
      "id": 151,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'",
          "SELECT a2 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM trans WHERE TYPE = 'VYDAJ'));",
          "SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ' GROUP BY district.a2",
          "SELECT district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'"
        ]
      ]
    },
    {
      "id": 152,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(a15) FROM district WHERE district_id IN (SELECT district_id FROM account WHERE strftime('%Y', date) >= '1997') AND a15 > 4000;",
          "SELECT avg(a15) FROM district WHERE district_id IN (SELECT district_id FROM account WHERE strftime('%Y', date) > '1996') AND a15 > 4000;",
          "SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE strftime('%Y', date) >= '1997');",
          "SELECT cast(sum(a15) AS REAL) / count(district_id) FROM district WHERE district_id IN (SELECT district_id FROM account WHERE strftime('%Y', date) >= '1997') AND a15 > 4000;"
        ]
      ]
    },
    {
      "id": 153,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT card.card_id) FROM card card JOIN disp disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER';",
          "SELECT count(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER'",
          "SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER'",
          "SELECT count(*) FROM card card JOIN disp disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER';"
        ]
      ]
    },
    {
      "id": 154,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M'",
          "SELECT count(DISTINCT client.client_id) FROM district district JOIN client client ON district.district_id = client.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M';",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M'",
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'M' AND district.a2 = 'Hl.m. Praha'"
        ]
      ]
    },
    {
      "id": 155,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN substr(card.issued, 1, 4) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold'",
          "SELECT cast(sum(CASE WHEN TYPE = 'gold' AND strftime('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / count(card_id) FROM card",
          "SELECT cast(sum(CASE WHEN strftime('%Y', card.issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / count(card_id) FROM card WHERE TYPE = 'gold'",
          "SELECT cast(sum(CASE WHEN strftime('%Y', card.issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / count(card.card_id) FROM card WHERE TYPE = 'gold'"
        ]
      ]
    },
    {
      "id": 156,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT client.client_id FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN client ON client.client_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT client.client_id FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN client ON client.client_id = account.district_id ORDER BY loan.amount DESC LIMIT 1",
          "SELECT client.first_name, client.last_name FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN client ON client.client_id = account.district_id ORDER BY loan.amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 157,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT a15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532);",
          "SELECT a15 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id = 532);",
          "SELECT district.a15 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.account_id = 532",
          "SELECT district.a15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532"
        ]
      ]
    },
    {
      "id": 158,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.district_id FROM order INNER JOIN account ON order.account_id = account.account_id WHERE order.order_id = 33333",
          "SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333",
          "SELECT order.account_id FROM order INNER JOIN account ON order.account_id = account.account_id WHERE order.order_id = 33333",
          "SELECT account.district_id FROM order INNER JOIN account ON order.account_id = account.account_id WHERE order.order_id = '33333'"
        ]
      ]
    },
    {
      "id": 159,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT trans.trans_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'",
          "SELECT trans.trans_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.disp_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'",
          "SELECT DISTINCT trans.trans_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'",
          "SELECT DISTINCT trans.trans_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.disp_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'"
        ]
      ]
    },
    {
      "id": 160,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN loan loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;",
          "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000",
          "SELECT count(*) FROM ( SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000 )",
          "SELECT count(*) FROM (SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000 GROUP BY account.account_id);"
        ]
      ]
    },
    {
      "id": 161,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539",
          "SELECT card.type FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.client_id = 13539",
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE client.client_id = 13539",
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = '13539'"
        ]
      ]
    },
    {
      "id": 162,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541",
          "SELECT district.a3 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.client_id = 3541",
          "SELECT a3 FROM district WHERE district_id = (SELECT district_id FROM client WHERE client_id = 3541);",
          "SELECT a3 FROM district WHERE district_id IN (SELECT district_id FROM client WHERE client_id = 3541);"
        ]
      ]
    },
    {
      "id": 163,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE status = 'A');",
          "SELECT district.a3 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.status = 'A' GROUP BY district.a3 ORDER BY count(account.account_id) DESC LIMIT 1",
          "SELECT district.a3 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.status = 'A' GROUP BY district.district_id ORDER BY count(account.account_id) DESC LIMIT 1",
          "SELECT district.district_id FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.status = 'A' GROUP BY district.district_id ORDER BY count(account.account_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 164,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN order ON client.client_id = order.account_id WHERE order.order_id = 32423",
          "SELECT client.client_id FROM order INNER JOIN client ON order.account_id = client.client_id WHERE order.order_id = 32423",
          "SELECT client.first_name, client.last_name FROM client INNER JOIN order ON client.client_id = order.account_id WHERE order.order_id = 32423",
          "SELECT client.first_name, client.last_name FROM order INNER JOIN client ON order.account_id = client.client_id WHERE order.order_id = 32423"
        ]
      ]
    },
    {
      "id": 165,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT * FROM trans WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 5);",
          "SELECT trans.trans_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id = 5",
          "SELECT trans.operation FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id = 5",
          "SELECT * FROM trans WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 5)"
        ]
      ]
    },
    {
      "id": 166,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE a2 = 'Jesenik');",
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN account account ON district.district_id = account.district_id WHERE district.a2 = 'Jesenik';",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Jesenik'",
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN district district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';"
        ]
      ]
    },
    {
      "id": 167,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.type = 'junior' AND strftime('%Y', card.issued) > '1996'",
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE strftime('%Y', card.issued) > '1996' AND card.type = 'junior'",
          "SELECT DISTINCT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.type = 'junior' AND strftime('%Y', card.issued) > '1996'",
          "SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.type = 'junior' AND card.issued > '1996-12-31'"
        ]
      ]
    },
    {
      "id": 168,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a11 > 10000",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a11 > 10000",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a11 > 10000",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a11 > 10000"
        ]
      ]
    },
    {
      "id": 169,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast((sum(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - sum(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'M'",
          "SELECT cast(sum(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - sum(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'M'",
          "SELECT (sum(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - sum(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) * 100 / sum(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'M'",
          "SELECT cast(sum(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - sum(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M'"
        ]
      ]
    },
    {
      "id": 170,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(account_id) FROM trans WHERE substr(date, 1, 4) > '1995' AND operation = 'VYBER KARTOU'",
          "SELECT count(*) FROM trans WHERE substr(`date`, 1, 4) > '1995' AND operation = 'VYBER KARTOU';",
          "SELECT count(trans.trans_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE substr(trans.date, 1, 4) > '1995' AND trans.operation = 'VYBER KARTOU'",
          "SELECT count(trans.trans_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y', trans.date) > '1995' AND trans.operation = 'VYBER KARTOU'"
        ]
      ]
    },
    {
      "id": 171,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN a3 = 'east Bohemia' THEN a16 ELSE 0 END) - sum(CASE WHEN a3 = 'north Bohemia' THEN a16 ELSE 0 END) AS difference FROM district",
          "SELECT district.a16 - district.a16 FROM district INNER JOIN district ON district.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND district.a3 = 'north Bohemia' AND district.a16 IS NOT NULL",
          "SELECT district.a16 - district.a16 FROM district INNER JOIN district ON district.district_id = district.district_id WHERE district.a3 = 'East Bohemia' AND district.a3 = 'North Bohemia' AND district.a16 IS NOT NULL",
          "SELECT sum(CASE WHEN a3 = 'east Bohemia' THEN a16 ELSE 0 END) - sum(CASE WHEN a3 = 'north Bohemia' THEN a16 ELSE 0 END) AS difference FROM district;"
        ]
      ]
    },
    {
      "id": 172,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(CASE WHEN account.account_id = 1 THEN 1 END) AS owner, count(CASE WHEN account.account_id = 10 THEN 1 END) AS disponent FROM account INNER JOIN disp ON account.account_id = disp.account_id",
          "SELECT count(CASE WHEN account_id = 1 THEN 1 END) AS owner, count(CASE WHEN account_id = 10 THEN 1 END) AS disponent FROM disp WHERE account_id IN (1, 10);",
          "SELECT count(DISTINCT CASE WHEN account.account_id = 1 THEN disp.disp_id END) AS owner, count(DISTINCT CASE WHEN account.account_id = 10 THEN disp.disp_id END) AS disponent FROM account INNER JOIN disp ON account.account_id = disp.account_id",
          "SELECT count(CASE WHEN account.account_id = 1 THEN 1 END) AS owner, count(CASE WHEN account.account_id = 10 THEN 1 END) AS disponent FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.account_id BETWEEN 1 AND 10"
        ]
      ]
    },
    {
      "id": 173,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3 GROUP BY account.frequency",
          "SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.account_id = 3539",
          "SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.account_id = 3539 GROUP BY account.frequency",
          "SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3 AND order.account_id = 3539"
        ]
      ]
    },
    {
      "id": 174,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT birth_date FROM client WHERE client_id = 130",
          "SELECT strftime('%Y', birth_date) FROM client WHERE client_id = 130",
          "SELECT substr(birth_date, 1, 4) FROM client WHERE client_id = 130",
          "SELECT birth_date FROM client WHERE client_id = 130;"
        ]
      ]
    },
    {
      "id": 175,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER'",
          "SELECT count(*) FROM account WHERE account_id IN (SELECT account_id FROM disp WHERE TYPE = 'OWNER') AND frequency = 'POPLATEK PO OBRATU';",
          "SELECT count(DISTINCT account.account_id) FROM account account JOIN disp disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER';",
          "SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER'"
        ]
      ]
    },
    {
      "id": 176,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(order.amount), loan.status FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id WHERE client.client_id = 992",
          "SELECT sum(order.amount), loan.status FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id WHERE client.client_id = 992 GROUP BY loan.status",
          "SELECT sum(order.amount), loan.status FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN order ON account.account_id = order.account_id WHERE client.client_id = 992",
          "SELECT sum(order.amount), loan.status FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id WHERE client.client_id = 992 GROUP BY client.client_id, loan.status"
        ]
      ]
    },
    {
      "id": 177,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(trans.amount), client.gender FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.account_id = 851",
          "SELECT sum(trans.amount), client.gender FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.account_id = 851",
          "SELECT sum(trans.amount), client.gender FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.account_id = 851 GROUP BY client.gender",
          "SELECT sum(trans.amount), client.gender FROM client INNER JOIN trans ON client.client_id = trans.account_id WHERE client.client_id = 4 AND trans.account_id = 851"
        ]
      ]
    },
    {
      "id": 178,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9",
          "SELECT card.type FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.client_id = 9",
          "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE client.client_id = 9",
          "SELECT card.type FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON card.disp_id = disp.disp_id WHERE client.client_id = 9"
        ]
      ]
    },
    {
      "id": 179,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT sum(trans.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND strftime('%Y', trans.date) = '1998'",
          "SELECT sum(TRANS.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND strftime('%Y', trans.date) = '1998'",
          "SELECT sum(trans.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND strftime('%Y', account.date) = '1998'",
          "SELECT sum(trans.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND trans.date LIKE '1998%'"
        ]
      ]
    },
    {
      "id": 180,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia'",
          "SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND client.birth_date BETWEEN '1983-01-01' AND '1987-12-31'",
          "SELECT client.client_id FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia'",
          "SELECT c.client_id FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.a3 = 'east Bohemia';"
        ]
      ]
    },
    {
      "id": 181,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3",
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'F' GROUP BY client.client_id ORDER BY sum(loan.amount) DESC LIMIT 3",
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' GROUP BY client.client_id ORDER BY sum(loan.amount) DESC LIMIT 3",
          "SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'F' GROUP BY client.client_id ORDER BY count(loan.loan_id) DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 182,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN loan loan ON client.client_id = loan.client_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000 AND loan.k_symbol = 'SIPO';",
          "SELECT count(client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN loan loan ON client.client_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000 AND loan.k_symbol = 'SIPO';",
          "SELECT count(client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000 AND loan.k_symbol = 'SIPO'"
        ]
      ]
    },
    {
      "id": 183,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN account account ON district.district_id = account.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-12-31';",
          "SELECT count(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE a2 = 'Beroun') AND date > '1996-12-31';",
          "SELECT count(DISTINCT account.account_id) FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-12-31';",
          "SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-12-31'"
        ]
      ]
    },
    {
      "id": 184,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN card card ON client.client_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';",
          "SELECT count(client.client_id) FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'",
          "SELECT count(client.gender) FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'",
          "SELECT count(*) FROM client JOIN card ON client.client_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';"
        ]
      ]
    },
    {
      "id": 185,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.district_id = ( SELECT district_id FROM district WHERE a3 = 'Prague' )",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.district_id = ( SELECT district_id FROM district WHERE a3 = 'Prague' )",
          "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 = 'Prague'",
          "SELECT cast(count(CASE WHEN client.gender = 'F' THEN client.client_id ELSE NULL END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.district_id = ( SELECT district_id FROM district WHERE a3 = 'Prague' )"
        ]
      ]
    },
    {
      "id": 186,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE'",
          "SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE'"
        ]
      ]
    },
    {
      "id": 187,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN disp disp ON client.client_id = disp.client_id JOIN account account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN card card ON client.client_id = card.disp_id JOIN disp disp ON card.disp_id = disp.disp_id WHERE client.client_id IN (SELECT client_id FROM disp WHERE TYPE = 'OWNER') AND account.frequency = 'POPLATEK TYDNE';",
          "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';"
        ]
      ]
    },
    {
      "id": 188,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.duration > 24 ORDER BY loan.amount ASC LIMIT 1",
          "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.duration > 24 ORDER BY loan.amount LIMIT 1"
        ]
      ]
    },
    {
      "id": 189,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC, district.a11 ASC LIMIT 1",
          "SELECT account.account_id FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date = (SELECT min(birth_date) FROM client WHERE gender = 'F') AND district.a11 = (SELECT min(a11) FROM district WHERE a11 IS NOT NULL);",
          "SELECT account.account_id FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT min(a11) FROM district WHERE a11 IS NOT NULL);",
          "SELECT account.account_id FROM district district JOIN client client ON district.district_id = client.district_id JOIN account account ON client.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date = (SELECT min(birth_date) FROM client WHERE gender = 'F') AND district.a11 = (SELECT min(a11) FROM district);"
        ]
      ]
    },
    {
      "id": 190,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND strftime('%Y', client.birth_date) = '1920'",
          "SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date LIKE '1920%' AND district.a3 = 'east Bohemia'",
          "SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'east Bohemia' AND strftime('%Y', client.birth_date) = '1920'",
          "SELECT count(DISTINCT client.client_id) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.birth_date LIKE '1920%' AND district.a3 = 'east Bohemia';"
        ]
      ]
    },
    {
      "id": 191,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT count(loan.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24",
          "SELECT count(DISTINCT loan.account_id) FROM account account JOIN loan loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24;",
          "SELECT count(*) FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE duration = 24 AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE'));",
          "SELECT count(account_id) FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE duration = 24 AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE'));"
        ]
      ]
    },
    {
      "id": 192,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT avg(loan.amount) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND loan.status = 'C'",
          "SELECT avg(loan.amount) FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU'",
          "SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND loan.status = 'C'",
          "SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU'"
        ]
      ]
    },
    {
      "id": 193,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id, account.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER'",
          "SELECT client.client_id, client.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'OWNER'",
          "SELECT client.client_id, account.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON account.account_id = disp.account_id WHERE disp.type = 'OWNER'",
          "SELECT client.client_id, account.district_id FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN order ON account.account_id = order.account_id WHERE order.account_to IS NULL"
        ]
      ]
    },
    {
      "id": 194,
      "db_id": "financial",
      "infer_predictions": [
        [
          "SELECT client.client_id, client.birth_date FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.type = 'gold' AND disp.type = 'OWNER'",
          "SELECT client.client_id, client.birth_date FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'",
          "SELECT client.client_id, client.birth_date FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'",
          "SELECT client.client_id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', client.birth_date) AS age FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'"
        ]
      ]
    },
    {
      "id": 195,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1",
          "SELECT bond_type FROM bond GROUP BY bond_type HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM bond GROUP BY bond_type));",
          "SELECT bond_type FROM bond GROUP BY bond_type HAVING count(*) = (SELECT max(cnt) FROM (SELECT count(*) AS cnt FROM bond GROUP BY bond_type));",
          "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 196,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl';",
          "SELECT count(DISTINCT atom.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl';",
          "SELECT count(DISTINCT a.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' AND a.element = 'cl';",
          "SELECT count(*) FROM (SELECT molecule.molecule_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl') t1;"
        ]
      ]
    },
    {
      "id": 197,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) AS REAL) / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) AS REAL) / count(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) AS REAL) / count(connected.atom_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) AS REAL) / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 198,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / count(connected.atom_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / count(bond.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / count(atom.atom_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 199,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na';",
          "SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na'",
          "SELECT count(*) FROM (SELECT molecule.molecule_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na' GROUP BY molecule.molecule_id);"
        ]
      ]
    },
    {
      "id": 200,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'",
          "SELECT DISTINCT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'",
          "SELECT DISTINCT bond.molecule_id FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';",
          "SELECT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 201,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '='",
          "SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '='",
          "SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '='",
          "SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '='"
        ]
      ]
    },
    {
      "id": 202,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM bond WHERE bond_type = '#';",
          "SELECT count(bond_id) FROM bond WHERE bond_type = '#'",
          "SELECT count(DISTINCT bond_id) FROM bond WHERE bond_type = '#';",
          "SELECT count(DISTINCT bond.bond_id) FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';"
        ]
      ]
    },
    {
      "id": 203,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(atom_id) FROM atom WHERE element != 'br'",
          "SELECT count(*) FROM atom WHERE element != 'br'",
          "SELECT count(*) FROM atom WHERE element != 'br';",
          "SELECT count(DISTINCT atom_id) FROM atom WHERE element != 'br';"
        ]
      ]
    },
    {
      "id": 204,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR099' AND molecule.label = '+';",
          "SELECT count(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'",
          "SELECT count(label) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'"
        ]
      ]
    },
    {
      "id": 205,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c'",
          "SELECT molecule_id FROM atom WHERE element = 'c'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';",
          "SELECT molecule_id FROM atom WHERE element = 'c';"
        ]
      ]
    },
    {
      "id": 206,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9'",
          "SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR004_8_9'",
          "SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9');",
          "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR004_8_9';"
        ]
      ]
    },
    {
      "id": 207,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '='",
          "SELECT DISTINCT atom.element FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '='",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '='",
          "SELECT DISTINCT atom.element FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '=';"
        ]
      ]
    },
    {
      "id": 208,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM (SELECT label, count(*) AS num FROM atom WHERE element = 'h' GROUP BY label) WHERE num = (SELECT max(num) FROM (SELECT count(*) AS num FROM atom WHERE element = 'h' GROUP BY label))",
          "SELECT label FROM (SELECT label, count(*) AS num FROM atom WHERE element = 'h' GROUP BY label) WHERE num = (SELECT max(num) FROM (SELECT count(*) AS num FROM atom WHERE element = 'h' GROUP BY label));",
          "SELECT label FROM (SELECT label, count(label) AS num FROM atom WHERE element = 'h' GROUP BY label) WHERE num = (SELECT max(num) FROM (SELECT count(label) AS num FROM atom WHERE element = 'h' GROUP BY label))",
          "SELECT label FROM (SELECT label, count(label) AS num FROM atom WHERE element = 'h' GROUP BY label) WHERE num = (SELECT max(num) FROM (SELECT count(label) AS num FROM atom WHERE element = 'h' GROUP BY label));"
        ]
      ]
    },
    {
      "id": 209,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'cl'",
          "SELECT DISTINCT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'cl'",
          "SELECT bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'cl');",
          "SELECT DISTINCT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'cl'"
        ]
      ]
    },
    {
      "id": 210,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'",
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-'",
          "SELECT DISTINCT connected.atom_id FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';",
          "SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-')"
        ]
      ]
    },
    {
      "id": 211,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id WHERE molecule.label = '-'",
          "SELECT DISTINCT connected.atom_id FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id WHERE molecule.label = '-';",
          "SELECT connected.atom_id FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.atom_id WHERE molecule.label = '-'",
          "SELECT connected.atom_id FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id WHERE molecule.label = '-';"
        ]
      ]
    },
    {
      "id": 212,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM (SELECT element, count(*) AS num FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) WHERE num = (SELECT min(num) FROM (SELECT count(*) AS num FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element))",
          "SELECT element FROM (SELECT element, count(*) AS num FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) WHERE num = (SELECT min(num) FROM (SELECT count(*) AS num FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element));",
          "SELECT element FROM (SELECT element, count(element) AS num FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) WHERE num = (SELECT min(num) FROM (SELECT count(element) AS num FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element))",
          "SELECT element FROM (SELECT element, count(element) AS num FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) WHERE num = (SELECT min(num) FROM (SELECT count(element) AS num FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element));"
        ]
      ]
    },
    {
      "id": 213,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20') OR (connected.atom_id2 = 'TR004_8' AND connected.atom_id = 'TR004_20')",
          "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20') OR (connected.atom_id2 = 'TR004_8' AND connected.atom_id = 'TR004_20')",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20'",
          "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20'"
        ]
      ]
    },
    {
      "id": 214,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') OR label IS NULL;",
          "SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') AND label NOT IN ('+', '-');",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') AND label NOT IN ('+', '-');",
          "SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') OR label IS NULL"
        ]
      ]
    },
    {
      "id": 215,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT connected.atom_id) FROM atom atom JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-';",
          "SELECT count(DISTINCT connected.atom_id) FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '-' AND (atom.element = 'i' OR atom.element = 's');",
          "SELECT count(DISTINCT connected.atom_id) FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '-' AND atom.element IN ('i', 's') AND bond.bond_type = '-';",
          "SELECT count(DISTINCT connected.atom_id) FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '-' AND (atom.element = 'i' OR atom.element = 's') AND bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 216,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'",
          "SELECT DISTINCT connected.atom_id FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';",
          "SELECT DISTINCT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'",
          "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'"
        ]
      ]
    },
    {
      "id": 217,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181'",
          "SELECT connected.atom_id FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.atom_id WHERE molecule.molecule_id = 'TR181'",
          "SELECT DISTINCT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181'",
          "SELECT connected.atom_id2 FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181'"
        ]
      ]
    },
    {
      "id": 218,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(iif(atom.element = 'f', 1, 0)) AS REAL) * 100 / count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 219,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 220,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3",
          "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3",
          "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;",
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 221,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6'",
          "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6'",
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6'",
          "SELECT atom.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_2_6'"
        ]
      ]
    },
    {
      "id": 222,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT (SELECT count(*) FROM molecule WHERE label = '+') - (SELECT count(*) FROM molecule WHERE label = '-') AS difference;",
          "SELECT sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) - sum(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS difference FROM molecule",
          "SELECT sum(iif(label = '+', 1, 0)) - sum(iif(label = '-', 1, 0)) AS difference FROM molecule",
          "SELECT sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) - sum(CASE WHEN label = '-' THEN 1 ELSE 0 END) FROM molecule"
        ]
      ]
    },
    {
      "id": 223,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_5'",
          "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_5'",
          "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5';",
          "SELECT atom_id FROM connected WHERE bond_id = 'TR000_2_5';"
        ]
      ]
    },
    {
      "id": 224,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';",
          "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'",
          "SELECT DISTINCT bond.bond_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id2 = 'TR000_2'",
          "SELECT bond.bond_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id2 = 'TR000_2'"
        ]
      ]
    },
    {
      "id": 225,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = ' = ' ORDER BY molecule_id LIMIT 5);",
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.label LIMIT 5",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 5",
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(molecule.label) DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 226,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR008'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR008'"
        ]
      ]
    },
    {
      "id": 227,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule_id) FROM molecule",
          "SELECT cast(sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(label) FROM molecule",
          "SELECT cast(sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule",
          "SELECT cast(sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule_id) FROM molecule"
        ]
      ]
    },
    {
      "id": 228,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom_id) FROM atom WHERE molecule_id = 'TR206'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR206'",
          "SELECT cast(sum(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM atom WHERE molecule_id = 'TR206'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR206'"
        ]
      ]
    },
    {
      "id": 229,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR000'",
          "SELECT DISTINCT bond.bond_type FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR000'",
          "SELECT DISTINCT bond.bond_type FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR000';",
          "SELECT DISTINCT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000'"
        ]
      ]
    },
    {
      "id": 230,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element, molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060'",
          "SELECT DISTINCT atom.element, molecule.label FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060';",
          "SELECT atom.element, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060'",
          "SELECT DISTINCT atom.element, molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060'"
        ]
      ]
    },
    {
      "id": 231,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR010' GROUP BY bond.bond_type ORDER BY count(bond.bond_type) DESC LIMIT 1",
          "SELECT bond.bond_type, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR010' GROUP BY bond.bond_type ORDER BY count(bond.bond_type) DESC LIMIT 1",
          "SELECT bond.bond_type, molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR010' GROUP BY bond.bond_type ORDER BY count(bond.bond_type) DESC LIMIT 1",
          "SELECT bond.bond_type, molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR010' GROUP BY bond.bond_type ORDER BY count(bond.bond_type) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 232,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-' ORDER BY molecule.molecule_id LIMIT 3",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-' AND molecule.label = '-' ORDER BY molecule.molecule_id LIMIT 3",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-' GROUP BY molecule.molecule_id ORDER BY count(*) DESC LIMIT 3",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-' GROUP BY molecule.molecule_id ORDER BY count(molecule.molecule_id) DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 233,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2",
          "SELECT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2",
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id ASC LIMIT 2",
          "SELECT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id ASC LIMIT 2"
        ]
      ]
    },
    {
      "id": 234,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM bond WHERE molecule_id = 'TR009' AND (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12');",
          "SELECT count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR009' AND (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12')",
          "SELECT count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR009' AND (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12')",
          "SELECT count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12') AND molecule.molecule_id = 'TR009'"
        ]
      ]
    },
    {
      "id": 235,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br';",
          "SELECT count(*) FROM (SELECT molecule.molecule_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br' GROUP BY molecule.molecule_id);",
          "SELECT count(*) FROM (SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'br' GROUP BY molecule.molecule_id HAVING molecule.label = '+')"
        ]
      ]
    },
    {
      "id": 236,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_6_9'",
          "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';",
          "SELECT bond.bond_type, connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_6_9'",
          "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9'"
        ]
      ]
    },
    {
      "id": 237,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label, molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10'",
          "SELECT molecule.label, CASE WHEN molecule.label = '+' THEN 'YES' ELSE 'NO' END FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10'",
          "SELECT molecule.label, CASE WHEN molecule.label = '+' THEN 'YES' ELSE 'NO' END AS carcinogenic FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10'"
        ]
      ]
    },
    {
      "id": 238,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';",
          "SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'",
          "SELECT count(*) FROM (SELECT molecule_id FROM bond WHERE bond_type = '#' GROUP BY molecule_id HAVING count(DISTINCT bond_id) = 3);",
          "SELECT count(DISTINCT molecule_id) FROM BOND WHERE bond_type = '#';"
        ]
      ]
    },
    {
      "id": 239,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR000_19';",
          "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR000_19'",
          "SELECT count(*) FROM connected WHERE atom_id = 'TR000_19';",
          "SELECT count(connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_19'"
        ]
      ]
    },
    {
      "id": 240,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom WHERE molecule_id = 'TR004';",
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR004';",
          "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR004';",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR004'"
        ]
      ]
    },
    {
      "id": 241,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '-';",
          "SELECT count(*) FROM molecule WHERE label = '-';",
          "SELECT count(label) FROM molecule WHERE label = '-'",
          "SELECT count(molecule_id) FROM molecule WHERE label = '-'"
        ]
      ]
    },
    {
      "id": 242,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 243,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'p' AND atom.element = 'n'",
          "SELECT bond.bond_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'p' AND atom.element = 'n'",
          "SELECT DISTINCT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'p' AND atom.element = 'n'",
          "SELECT DISTINCT bond.bond_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'p' AND atom.element = 'n'"
        ]
      ]
    },
    {
      "id": 244,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id)));",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id HAVING count(*) = (SELECT max(cnt) FROM (SELECT count(*) AS cnt FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id)));",
          "SELECT molecule.label FROM (SELECT molecule_id, count(*) AS num_double_bonds FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id) AS t1 JOIN molecule ON t1.molecule_id = molecule.molecule_id WHERE t1.num_double_bonds = (SELECT max(num_double_bonds) FROM (SELECT count(*) AS num_double_bonds FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id)) AND molecule.label = '+';",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id HAVING count(DISTINCT bond_id) = (SELECT max(bond_count) FROM (SELECT count(DISTINCT bond_id) AS bond_count FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id)));"
        ]
      ]
    },
    {
      "id": 245,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(count(connected.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'i'",
          "SELECT cast(count(connected.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM atom atom JOIN connected connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'i';",
          "SELECT cast(count(bond.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'i'",
          "SELECT cast(count(bond.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM atom atom JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i';"
        ]
      ]
    },
    {
      "id": 246,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_45'",
          "SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE substr(connected.atom_id, 7, 2) + 0 = 45",
          "SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE substr(connected.atom_id, 7, 2) = '45'",
          "SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE substr(connected.atom_id, 7, 2) = 45"
        ]
      ]
    },
    {
      "id": 247,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected);",
          "SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected);",
          "SELECT DISTINCT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected )",
          "SELECT DISTINCT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id2 FROM connected )"
        ]
      ]
    },
    {
      "id": 248,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR041' AND bond.bond_type = '#'",
          "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR041' AND bond.bond_type = '#'",
          "SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR041' AND bond.bond_type = '#'",
          "SELECT atom.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR041' AND bond.bond_type = '#'"
        ]
      ]
    },
    {
      "id": 249,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR144_8_19');",
          "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR144_8_19';",
          "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR144_8_19'",
          "SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR144_8_19'"
        ]
      ]
    },
    {
      "id": 250,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.molecule_id ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(bond.bond_id) DESC LIMIT 1",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(bond.bond_type) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 251,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT min(DISTINCT atom.element) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
          "SELECT min(atom.element) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
          "SELECT min(atom.element) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT min(DISTINCT atom.element) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 252,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'pb'",
          "SELECT atom.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.element = 'pb'",
          "SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'pb'",
          "SELECT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'pb'"
        ]
      ]
    },
    {
      "id": 253,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#'",
          "SELECT DISTINCT atom.element FROM bond bond JOIN atom atom ON bond.molecule_id = atom.molecule_id JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';",
          "SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '#'));"
        ]
      ]
    },
    {
      "id": 254,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(count(connected.bond_id) AS REAL) * 100 / count(DISTINCT connected.atom_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id GROUP BY connected.atom_id ORDER BY count(connected.atom_id) DESC LIMIT 1",
          "SELECT cast(count(DISTINCT bond.bond_id) AS REAL) * 100 / count(DISTINCT connected.atom_id) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id GROUP BY connected.atom_id ORDER BY count(connected.atom_id) DESC LIMIT 1",
          "SELECT cast(count(DISTINCT bond.bond_id) AS REAL) * 100 / count(DISTINCT atom.atom_id) FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id GROUP BY bond.bond_id HAVING count(DISTINCT atom.element) = (SELECT max(cnt) FROM (SELECT count(DISTINCT atom.element) AS cnt FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id GROUP BY bond.bond_id));",
          "SELECT cast(count(DISTINCT bond.bond_id) AS REAL) * 100 / count(DISTINCT atom.atom_id) FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id GROUP BY bond.bond_id HAVING count(DISTINCT atom.element) = (SELECT max(COUNT) FROM (SELECT count(DISTINCT atom.element) AS COUNT FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id GROUP BY bond.bond_id));"
        ]
      ]
    },
    {
      "id": 255,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 256,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(*) FROM atom WHERE element IN ('c', 'h');",
          "SELECT count(atom_id) FROM atom WHERE element IN ('c', 'h')",
          "SELECT count(atom_id) FROM atom WHERE element IN ('c', 'h');",
          "SELECT count(DISTINCT atom_id) FROM atom WHERE element IN ('c', 'h');"
        ]
      ]
    },
    {
      "id": 257,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's'",
          "SELECT connected.atom_id2 FROM atom atom JOIN connected connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's';",
          "SELECT DISTINCT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's'",
          "SELECT atom.atom_id2 FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 's'"
        ]
      ]
    },
    {
      "id": 258,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'sn' AND bond.bond_type IN ('=', '-')",
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'sn' AND bond.bond_type IN ('=', '-')",
          "SELECT DISTINCT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'sn' AND bond.bond_type IN ('=', '-');",
          "SELECT DISTINCT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'sn' AND bond.bond_type = ' = '"
        ]
      ]
    },
    {
      "id": 259,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.element) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-';",
          "SELECT count(DISTINCT atom.element) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'",
          "SELECT count(DISTINCT atom.element) FROM bond bond JOIN atom atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-';",
          "SELECT count(DISTINCT atom.element) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-' AND molecule.label = '+';"
        ]
      ]
    },
    {
      "id": 260,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');",
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');",
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+' AND bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');",
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '+' AND bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');"
        ]
      ]
    },
    {
      "id": 261,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT DISTINCT bond.bond_id FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';",
          "SELECT DISTINCT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'",
          "SELECT DISTINCT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 262,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT DISTINCT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';"
        ]
      ]
    },
    {
      "id": 263,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON atom.atom_id = connected.atom_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 264,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
          "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');"
        ]
      ]
    },
    {
      "id": 265,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM molecule WHERE label = '-';",
          "SELECT molecule_id FROM molecule WHERE label = '-'",
          "SELECT DISTINCT molecule_id FROM molecule WHERE label = '-';",
          "SELECT DISTINCT molecule_id FROM molecule WHERE label = '-'"
        ]
      ]
    },
    {
      "id": 266,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';",
          "SELECT count(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR030' AND molecule.label = '+';",
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE molecule_id >= 'TR000' AND molecule_id <= 'TR030' AND label = '+';"
        ]
      ]
    },
    {
      "id": 267,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond WHERE molecule_id IN ('TR000', 'TR001', 'TR002', 'TR003', 'TR004', 'TR005', 'TR006', 'TR007', 'TR008', 'TR009', 'TR010', 'TR011', 'TR012', 'TR013', 'TR014', 'TR015', 'TR016', 'TR017', 'TR018', 'TR019', 'TR020', 'TR021', 'TR022', 'TR023', 'TR024', 'TR025', 'TR026', 'TR027', 'TR028', 'TR029', 'TR030', 'TR031', 'TR032', 'TR033', 'TR034', 'TR035', 'TR036', 'TR037', 'TR038', 'TR039', 'TR040",
          "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'",
          "SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';",
          "SELECT DISTINCT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';"
        ]
      ]
    },
    {
      "id": 268,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11'",
          "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_10_11'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11'",
          "SELECT a.element, b.element FROM atom a JOIN atom b ON a.atom_id = b.atom_id JOIN connected c ON a.atom_id = c.atom_id AND b.atom_id = c.atom_id2 WHERE c.bond_id = 'TR001_10_11';"
        ]
      ]
    },
    {
      "id": 269,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i'",
          "SELECT count(DISTINCT bond.bond_id) FROM atom atom JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i';",
          "SELECT count(DISTINCT bond.bond_id) FROM bond bond JOIN atom atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i';",
          "SELECT count(DISTINCT bond.bond_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'i'"
        ]
      ]
    },
    {
      "id": 270,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca') GROUP BY label",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca') AND label IN ('+', '-');",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca') GROUP BY label ORDER BY count(label) DESC LIMIT 1;",
          "SELECT label FROM molecule WHERE element = 'ca' GROUP BY label"
        ]
      ]
    },
    {
      "id": 271,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT CASE WHEN atom.element = 'cl' AND atom.element = 'c' THEN 'YES' ELSE 'NO' END FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_1_8'",
          "SELECT CASE WHEN (SELECT element FROM atom WHERE atom_id = (SELECT atom_id FROM connected WHERE bond_id = 'TR001_1_8') AND element = 'cl') AND (SELECT element FROM atom WHERE atom_id = (SELECT atom_id FROM connected WHERE bond_id = 'TR001_1_8') AND element = 'c') THEN 'YES' ELSE 'NO' END;",
          "SELECT CASE WHEN (SELECT element FROM atom WHERE atom_id = (SELECT atom_id FROM connected WHERE bond_id = 'TR001_1_8') AND molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_8')) = 'cl' AND (SELECT element FROM atom WHERE atom_id = (SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_1_8') AND molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_8')) = 'c' THEN 'YES' ELSE 'NO' END;",
          "SELECT CASE WHEN (SELECT element FROM atom WHERE atom_id = (SELECT atom_id FROM connected WHERE bond_id = 'TR001_1_8') AND element = 'cl') AND (SELECT element FROM atom WHERE atom_id = (SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_1_8') AND element = 'c') THEN 'YES' ELSE 'NO' END;"
        ]
      ]
    },
    {
      "id": 272,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element = 'c' AND molecule.label = '-'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element = 'c' AND molecule.label = '-'",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN BOND ON molecule.molecule_id = BOND.molecule_id INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE BOND.bond_type = '#' AND atom.element = 'c' AND molecule.label = '-'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'c' AND bond.bond_type = '#';"
        ]
      ]
    },
    {
      "id": 273,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule_id) FROM molecule WHERE label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 274,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR001';",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR001'",
          "SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR001';",
          "SELECT element FROM atom WHERE molecule_id = 'TR001';"
        ]
      ]
    },
    {
      "id": 275,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT molecule_id FROM bond WHERE bond_type = ' = '",
          "SELECT molecule_id FROM bond WHERE bond_type = ' = '",
          "SELECT DISTINCT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = '",
          "SELECT DISTINCT bond.molecule_id FROM bond bond WHERE bond.bond_type = ' = '"
        ]
      ]
    },
    {
      "id": 276,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'",
          "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'",
          "SELECT connected.atom_id, connected.atom_id2 FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';",
          "SELECT connected.atom_id, connected.atom_id2 FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'"
        ]
      ]
    },
    {
      "id": 277,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_1_2'",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_1_2'",
          "SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR000_1_2')",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR000_1_2'"
        ]
      ]
    },
    {
      "id": 278,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';",
          "SELECT count(DISTINCT bond.molecule_id) FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-' AND bond.bond_type = '-';",
          "SELECT count(DISTINCT bond.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';"
        ]
      ]
    },
    {
      "id": 279,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_10_11')",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_10_11');",
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11'"
        ]
      ]
    },
    {
      "id": 280,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#'",
          "SELECT DISTINCT bond.bond_id, molecule.label FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';",
          "SELECT DISTINCT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#'",
          "SELECT DISTINCT bond.bond_id, molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#'"
        ]
      ]
    },
    {
      "id": 281,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND molecule.label = '+'",
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 1) = '4' AND molecule.label = '+';",
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = '4';",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = '4'"
        ]
      ]
    },
    {
      "id": 282,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) / count(atom.element), molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.element), molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) / count(atom.element), molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006' GROUP BY molecule.label",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.element), molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006' GROUP BY molecule.label"
        ]
      ]
    },
    {
      "id": 283,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca')",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca') AND label = '+';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca'",
          "SELECT label FROM molecule WHERE EXISTS (SELECT 1 FROM atom WHERE molecule_id = molecule.molecule_id AND element = 'ca')"
        ]
      ]
    },
    {
      "id": 284,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'c' AND bond.bond_type = ' = '",
          "SELECT DISTINCT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'c' AND bond.bond_type = ' = '",
          "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'c' AND bond.bond_type IN ('=', '-')",
          "SELECT DISTINCT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'c' AND bond.bond_type IN ('=', '-')"
        ]
      ]
    },
    {
      "id": 285,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11'",
          "SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_10_11'",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_10_11'",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11'"
        ]
      ]
    },
    {
      "id": 286,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id"
        ]
      ]
    },
    {
      "id": 287,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR047'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR047'",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR047'"
        ]
      ]
    },
    {
      "id": 288,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_1')",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_1') AND label = '+';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_1'",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_1');"
        ]
      ]
    },
    {
      "id": 289,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR151'",
          "SELECT label FROM molecule WHERE molecule_id = 'TR151';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151'",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id = 'TR151'"
        ]
      ]
    },
    {
      "id": 290,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151';",
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');",
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');",
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('c', 'n', 'o', 's', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');"
        ]
      ]
    },
    {
      "id": 291,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '+';",
          "SELECT count(*) FROM molecule WHERE label = '+';",
          "SELECT count(molecule_id) FROM molecule WHERE label = '+'",
          "SELECT count(label) FROM molecule WHERE label = '+'"
        ]
      ]
    },
    {
      "id": 292,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c';",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(molecule.molecule_id, 3, 3) BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c'",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(molecule.molecule_id, 3, 3) BETWEEN 10 AND 50 AND atom.element = 'c'",
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(molecule.molecule_id, 3, 3) BETWEEN '10' AND '50' AND atom.element = 'c'"
        ]
      ]
    },
    {
      "id": 293,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
          "SELECT count(DISTINCT a.atom_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';",
          "SELECT count(DISTINCT atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+'",
          "SELECT count(DISTINCT atom.atom_id) FROM atom INNER JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 294,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'",
          "SELECT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'",
          "SELECT DISTINCT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+'",
          "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = '"
        ]
      ]
    },
    {
      "id": 295,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h'",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' AND molecule.label = '+'",
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h'"
        ]
      ]
    },
    {
      "id": 296,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR000_1_2' AND connected.atom_id = 'TR000_1'",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND bond.bond_id = 'TR000_1_2'",
          "SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1'",
          "SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR000_1_2' AND connected.atom_id = 'TR000_1'"
        ]
      ]
    },
    {
      "id": 297,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'",
          "SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label = '-';",
          "SELECT DISTINCT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'"
        ]
      ]
    },
    {
      "id": 298,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id"
        ]
      ]
    },
    {
      "id": 299,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR124'",
          "SELECT label FROM molecule WHERE molecule_id = 'TR124';",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR124'",
          "SELECT DISTINCT label FROM molecule WHERE molecule_id = 'TR124'"
        ]
      ]
    },
    {
      "id": 300,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR186'",
          "SELECT atom_id FROM atom WHERE molecule_id = 'TR186';",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR186'",
          "SELECT DISTINCT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR186'"
        ]
      ]
    },
    {
      "id": 301,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'",
          "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';",
          "SELECT bond_type FROM bond WHERE molecule_id = 'TR007' AND bond_id = 'TR007_4_19'",
          "SELECT bond_type FROM bond WHERE molecule_id = 'TR007' AND bond_id = 'TR007_4_19';"
        ]
      ]
    },
    {
      "id": 302,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_2_4'",
          "SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_2_4'",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_2_4'",
          "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_2_4'"
        ]
      ]
    },
    {
      "id": 303,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT bond.bond_id), molecule.label FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR006' AND bond.bond_type = ' = ' GROUP BY molecule.label;",
          "SELECT count(DISTINCT bond.bond_id), molecule.label FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR006' AND bond.bond_type = '=' GROUP BY molecule.label;",
          "SELECT count(DISTINCT bond.bond_id), molecule.label FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR006' AND bond.bond_type = '=' GROUP BY molecule.label;",
          "SELECT count(DISTINCT bond.bond_id), molecule.label FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR006' AND bond.bond_type = ' = ' GROUP BY molecule.label;"
        ]
      ]
    },
    {
      "id": 304,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )",
          "SELECT DISTINCT molecule.label, atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';",
          "SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )",
          "SELECT DISTINCT molecule.molecule_id, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )"
        ]
      ]
    },
    {
      "id": 305,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_id, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'",
          "SELECT bond.bond_id, connected.atom_id, connected.atom_id2 FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'",
          "SELECT bond.bond_id, connected.atom_id, connected.atom_id2 FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';",
          "SELECT DISTINCT bond.bond_id, connected.atom_id, connected.atom_id2 FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'"
        ]
      ]
    },
    {
      "id": 306,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )",
          "SELECT DISTINCT molecule.molecule_id, atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element IN ( 'cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca' )",
          "SELECT DISTINCT molecule.molecule_id, atom.element FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');",
          "SELECT DISTINCT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')"
        ]
      ]
    },
    {
      "id": 307,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR000_2_3')",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_2_3'",
          "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_2_3'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR000_2_3'"
        ]
      ]
    },
    {
      "id": 308,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT bond.bond_id) FROM atom atom JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl';",
          "SELECT count(bond.bond_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'cl'",
          "SELECT count(*) FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl') AND atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'cl'));",
          "SELECT count(*) FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl')) AND bond_id IN (SELECT bond_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl'));"
        ]
      ]
    },
    {
      "id": 309,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id, count(bond.bond_type) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR346' GROUP BY connected.atom_id",
          "SELECT connected.atom_id, count(bond.bond_type) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR346' GROUP BY connected.atom_id",
          "SELECT connected.atom_id, count(bond.bond_type) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR346' GROUP BY connected.atom_id",
          "SELECT connected.atom_id, count(bond.bond_type) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR346'"
        ]
      ]
    },
    {
      "id": 310,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id), count(DISTINCT CASE WHEN molecule.label = '+' THEN molecule.molecule_id END) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id), count(DISTINCT CASE WHEN molecule.label = '+' THEN molecule.molecule_id END) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ';",
          "SELECT count(DISTINCT bond.molecule_id), (SELECT count(*) FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = ' = ' AND label = '+')) FROM bond WHERE bond_type = ' = ' AND label = '+';"
        ]
      ]
    },
    {
      "id": 311,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 's') AND bond.bond_type != ' = ';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-' AND atom.element != 's' AND bond.bond_type != '=';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 's') AND bond.bond_type != ' = ' AND bond.bond_type IS NOT NULL;",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-' AND atom.element != 's' AND bond.bond_type != ' = ';"
        ]
      ]
    },
    {
      "id": 312,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4'",
          "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4'",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_2_4')",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_4') AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+'));"
        ]
      ]
    },
    {
      "id": 313,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom_id) FROM atom WHERE molecule_id = 'TR001';",
          "SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR001'",
          "SELECT count(*) FROM atom WHERE molecule_id = 'TR001';",
          "SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR001';"
        ]
      ]
    },
    {
      "id": 314,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(bond_id) FROM bond WHERE bond_type = '-'",
          "SELECT count(*) FROM bond WHERE bond_type = '-'",
          "SELECT count(*) FROM bond WHERE bond_type = '-';",
          "SELECT count(DISTINCT bond.bond_id) FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';"
        ]
      ]
    },
    {
      "id": 315,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'cl') AND label = '+';",
          "SELECT molecule.molecule_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'cl';"
        ]
      ]
    },
    {
      "id": 316,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'c') AND label = '-';",
          "SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'",
          "SELECT molecule.molecule_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';"
        ]
      ]
    },
    {
      "id": 317,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'",
          "SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'"
        ]
      ]
    },
    {
      "id": 318,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
          "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';",
          "SELECT molecule_id FROM BOND WHERE bond_id = 'TR001_1_7'",
          "SELECT DISTINCT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';"
        ]
      ]
    },
    {
      "id": 319,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.element) FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_3_4';",
          "SELECT count(DISTINCT atom.element) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_3_4'",
          "SELECT count(DISTINCT atom.element) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_3_4'",
          "SELECT count(DISTINCT atom.element) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_3_4'"
        ]
      ]
    },
    {
      "id": 320,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2'",
          "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2'",
          "SELECT bond.bond_type FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.molecule_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2'",
          "SELECT bond.bond_type FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2'"
        ]
      ]
    },
    {
      "id": 321,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4'",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4'",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4'",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4'"
        ]
      ]
    },
    {
      "id": 322,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT element FROM atom WHERE atom_id = 'TR000_1'",
          "SELECT element FROM atom WHERE atom_id = 'TR000_1';",
          "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_1'",
          "SELECT atom.element FROM atom INNER JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR000_1'"
        ]
      ]
    },
    {
      "id": 323,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT label FROM molecule WHERE molecule_id = 'TR000'",
          "SELECT label FROM molecule WHERE molecule_id = 'TR000';",
          "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule WHERE molecule_id = 'TR000';",
          "SELECT CASE WHEN label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS label FROM molecule WHERE molecule_id = 'TR000';"
        ]
      ]
    },
    {
      "id": 324,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id",
          "SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id"
        ]
      ]
    },
    {
      "id": 325,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'n';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'n';",
          "SELECT count(*) FROM (SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+' GROUP BY molecule.molecule_id);"
        ]
      ]
    },
    {
      "id": 326,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = ' = '",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = ' = '",
          "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = '='",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = '='"
        ]
      ]
    },
    {
      "id": 327,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' GROUP BY molecule.molecule_id HAVING count(atom.atom_id) > 5;",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom GROUP BY molecule_id HAVING count(atom_id) > 5) AND label = '-';",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom GROUP BY molecule_id HAVING count(DISTINCT atom_id) > 5) AND label = '-';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' GROUP BY molecule.molecule_id HAVING count(DISTINCT atom.atom_id) > 5;"
        ]
      ]
    },
    {
      "id": 328,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.molecule_id = 'TR024' AND bond.bond_type = '='",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR024' AND bond.bond_type = '='",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR024'",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.molecule_id = 'TR024' AND bond.bond_type = '='"
        ]
      ]
    },
    {
      "id": 329,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.atom_id) DESC LIMIT 1",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = 'c' GROUP BY molecule.molecule_id ORDER BY count(atom.atom_id) DESC LIMIT 1",
          "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.molecule_id) DESC LIMIT 1",
          "SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom GROUP BY molecule_id HAVING count(atom_id) = (SELECT max(atom_count) FROM (SELECT count(atom_id) AS atom_count FROM atom GROUP BY molecule_id)));"
        ]
      ]
    },
    {
      "id": 330,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'",
          "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'"
        ]
      ]
    },
    {
      "id": 331,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '+';",
          "SELECT count(*) FROM molecule WHERE label = '+';",
          "SELECT count(molecule_id) FROM molecule WHERE label = '+'",
          "SELECT count(label) FROM molecule WHERE label = '+'"
        ]
      ]
    },
    {
      "id": 332,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-';",
          "SELECT count(DISTINCT bond.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-';",
          "SELECT count(DISTINCT bond.molecule_id) FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-';",
          "SELECT count(DISTINCT bond.molecule_id) FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010';"
        ]
      ]
    },
    {
      "id": 333,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT atom.atom_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c';",
          "SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c'",
          "SELECT count(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c';",
          "SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'"
        ]
      ]
    },
    {
      "id": 334,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.atom_id = 'TR004_7'",
          "SELECT DISTINCT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.atom_id = 'TR004_7'",
          "SELECT DISTINCT atom.element FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.atom_id = 'TR004_7';",
          "SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-'"
        ]
      ]
    },
    {
      "id": 335,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND atom.element = 'o';",
          "SELECT count(DISTINCT molecule_id) FROM atom WHERE element = 'o' AND EXISTS (SELECT 1 FROM bond WHERE bond_type = ' = ' AND molecule_id = atom.molecule_id);",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-' AND atom.element = 'o' AND bond.bond_type = '=';"
        ]
      ]
    },
    {
      "id": 336,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT bond.bond_id) FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-';",
          "SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-';",
          "SELECT count(DISTINCT bond.bond_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-' AND bond.bond_type = '#';",
          "SELECT count(DISTINCT bond.bond_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-' AND bond.bond_type = '#' AND count(DISTINCT bond.bond_id) > 1;"
        ]
      ]
    },
    {
      "id": 337,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.element, bond.bond_type FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR002'",
          "SELECT a.element, b.bond_type FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR002';",
          "SELECT DISTINCT atom.element, bond.bond_type FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR002';",
          "SELECT DISTINCT atom.element, bond.bond_type FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR002'"
        ]
      ]
    },
    {
      "id": 338,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR012' AND atom.element = 'c' AND bond.bond_type = '='",
          "SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR012' AND bond.bond_type = '=' AND atom.element = 'c'",
          "SELECT connected.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = ' = ' AND atom.element = 'c' AND bond.molecule_id = 'TR012'",
          "SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR012' AND bond.bond_type = ' = ' AND atom.element = 'c'"
        ]
      ]
    },
    {
      "id": 339,
      "db_id": "toxicology",
      "infer_predictions": [
        [
          "SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'",
          "SELECT atom.atom_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';",
          "SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'o';",
          "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'"
        ]
      ]
    },
    {
      "id": 340,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL;",
          "SELECT id FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;",
          "SELECT name FROM cards WHERE cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL;",
          "SELECT name FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 341,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE bordercolor = 'borderless' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NULL;",
          "SELECT id FROM cards WHERE bordercolor = 'borderless' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NULL;",
          "SELECT id FROM cards WHERE bordercolor = 'borderless' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NOT NULL;",
          "SELECT name FROM cards WHERE bordercolor = 'borderless' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NULL;"
        ]
      ]
    },
    {
      "id": 342,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE faceconvertedmanacost = ( SELECT max(faceconvertedmanacost) FROM cards )",
          "SELECT name FROM cards WHERE faceconvertedmanacost = (SELECT max(faceconvertedmanacost) FROM cards);",
          "SELECT name FROM cards WHERE faceconvertedmanacost = ( SELECT max(faceconvertedmanacost) FROM cards );",
          "SELECT name FROM cards ORDER BY faceconvertedmanacost DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 343,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015;",
          "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015",
          "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = '2015'",
          "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = '2015';"
        ]
      ]
    },
    {
      "id": 344,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator'",
          "SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';",
          "SELECT name FROM cards WHERE rarity = 'mythic' AND status = 'Banned' AND format = 'gladiator';",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.rarity = 'mythic' AND legalities.format = 'gladiator'"
        ]
      ]
    },
    {
      "id": 345,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage'",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage'",
          "SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';",
          "SELECT DISTINCT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';"
        ]
      ]
    },
    {
      "id": 346,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.power = '*' OR c.power IS NULL AND l.format = 'commander' AND l.status = 'Legal';",
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legalities.format = 'commander' AND legalities.status = 'Legal'",
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.power = '*' OR cards.power IS NULL AND legalities.format = 'commander' AND legalities.status = 'Legal'",
          "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legalities.status = 'Legal' AND legalities.format = 'commander'"
        ]
      ]
    },
    {
      "id": 347,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id, rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele'",
          "SELECT c.id, c.hascontentwarning, r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniele';",
          "SELECT c.id, r.text, c.hascontentwarning FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniele';",
          "SELECT cards.id, rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.id = rulings.uuid WHERE cards.artist = 'Stephen Daniele'"
        ]
      ]
    },
    {
      "id": 348,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s'",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.id WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s'"
        ]
      ]
    },
    {
      "id": 349,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, cards.artist, cards.ispromo FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid GROUP BY cards.name, cards.artist, cards.ispromo ORDER BY count(rulings.id) DESC LIMIT 1",
          "SELECT cards.name, cards.artist, cards.ispromo FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid GROUP BY rulings.uuid ORDER BY count(rulings.id) DESC LIMIT 1",
          "SELECT cards.name, cards.artist, cards.ispromo FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.ispromo = 1 GROUP BY cards.name, cards.artist, cards.ispromo ORDER BY count(rulings.id) DESC LIMIT 1",
          "SELECT cards.name, cards.artist, cards.ispromo FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid GROUP BY cards.name, cards.artist, cards.ispromo ORDER BY count(rulings.uuid) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 350,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29'",
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29'",
          "SELECT DISTINCT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29'",
          "SELECT DISTINCT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29'"
        ]
      ]
    },
    {
      "id": 351,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Japanese' AND cards.isalternative = 1",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE set_translations.language = 'Japanese' AND cards.isalternative = 1"
        ]
      ]
    },
    {
      "id": 352,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id",
          "SELECT cast(sum(CASE WHEN LANGUAGE = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(set_translations.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id"
        ]
      ]
    },
    {
      "id": 353,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name, sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian'",
          "SELECT s.name, s.totalsetsize FROM sets s JOIN set_translations st ON s.code = st.setcode WHERE st.language = 'Italian';",
          "SELECT totalsetsize FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Italian');",
          "SELECT name, totalsetsize FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Italian');"
        ]
      ]
    },
    {
      "id": 354,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';",
          "SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd'",
          "SELECT count(DISTINCT TYPE) FROM cards WHERE artist = 'Aaron Boyd';",
          "SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd' AND isfullart = 0"
        ]
      ]
    },
    {
      "id": 355,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'",
          "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';",
          "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
          "SELECT keywords FROM cards WHERE NAME = 'Angel of Mercy'"
        ]
      ]
    },
    {
      "id": 356,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE power = '*';",
          "SELECT count(id) FROM cards WHERE power = '*'",
          "SELECT count(*) FROM cards WHERE power = '*';",
          "SELECT count(id) FROM cards WHERE power LIKE '%*%'"
        ]
      ]
    },
    {
      "id": 357,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT promotypes FROM cards WHERE name = 'Duress'",
          "SELECT DISTINCT promotypes FROM cards WHERE name = 'Duress'",
          "SELECT promotypes FROM cards WHERE name = 'Duress';",
          "SELECT DISTINCT promotypes FROM cards WHERE name = 'Duress';"
        ]
      ]
    },
    {
      "id": 358,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT bordercolor FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT cards.bordercolor FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT DISTINCT bordercolor FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT bordercolor FROM cards WHERE name = 'Ancestor''s Chosen';"
        ]
      ]
    },
    {
      "id": 359,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT originaltype FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT originaltype FROM cards WHERE name = 'Ancestor''s Chosen';",
          "SELECT DISTINCT originaltype FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT originaltype FROM cards WHERE name LIKE 'Ancestor%s Chosen'"
        ]
      ]
    },
    {
      "id": 360,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE cards.name = 'Angel of Mercy'",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy'",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy'",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.setcode WHERE cards.name = 'Angel of Mercy'"
        ]
      ]
    },
    {
      "id": 361,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0",
          "SELECT count(id) FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE status = 'Restricted') AND istextless = 0;",
          "SELECT count(id) FROM cards WHERE id IN (SELECT uuid FROM legalities WHERE status = 'Restricted') AND istextless = 0;",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0"
        ]
      ]
    },
    {
      "id": 362,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Condemn'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Condemn'",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 363,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT cards.id) FROM cards cards JOIN legalities legalities ON cards.uuid = legalities.uuid WHERE cards.isstarter = 1 AND legalities.status = 'Restricted';",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isstarter = 1",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE isstarter = 1 AND legalities.status = 'Restricted'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isstarter = 1"
        ]
      ]
    },
    {
      "id": 364,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'",
          "SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Cloudchaser Eagle';",
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'",
          "SELECT status FROM legalities WHERE uuid = ( SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle' )"
        ]
      ]
    },
    {
      "id": 365,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT TYPE FROM cards WHERE name = 'Benalish Knight'",
          "SELECT TYPE FROM cards WHERE name = 'Benalish Knight';",
          "SELECT type FROM cards WHERE name = 'Benalish Knight'",
          "SELECT types FROM cards WHERE name = 'Benalish Knight'"
        ]
      ]
    },
    {
      "id": 366,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'",
          "SELECT DISTINCT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'",
          "SELECT l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Benalish Knight';",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'"
        ]
      ]
    },
    {
      "id": 367,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE LANGUAGE = 'Phyrexian');",
          "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'",
          "SELECT cards.artist FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian'",
          "SELECT artist FROM cards WHERE uuid IN (SELECT foreign_data.uuid FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian');"
        ]
      ]
    },
    {
      "id": 368,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN bordercolor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards",
          "SELECT cast(sum(CASE WHEN bordercolor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards",
          "SELECT (count(*) filter (WHERE bordercolor = 'borderless') * 100.0 / count(*)) AS percentage FROM cards;",
          "SELECT cast(count(CASE WHEN bordercolor = 'borderless' THEN id ELSE NULL END) AS REAL) * 100 / count(id) FROM cards"
        ]
      ]
    },
    {
      "id": 369,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1",
          "SELECT count(id) FROM cards WHERE isreprint = 1 AND uuid IN (SELECT uuid FROM foreign_data WHERE LANGUAGE = 'German');",
          "SELECT count(id) FROM cards WHERE isreprint = 1 AND (SELECT language FROM foreign_data WHERE uuid = cards.uuid) = 'German';",
          "SELECT count(id) FROM cards WHERE isreprint = 1 AND uuid IN (SELECT foreign_data.uuid FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German');"
        ]
      ]
    },
    {
      "id": 370,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND LANGUAGE = 'Russian'",
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND foreign_data.language = 'Russian'",
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Russian' AND cards.bordercolor = 'borderless'",
          "SELECT count(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Russian' AND cards.bordercolor = 'borderless'"
        ]
      ]
    },
    {
      "id": 371,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.isstoryspotlight = 1",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.isstoryspotlight = 1",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.isstoryspotlight = 1",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.isstoryspotlight = 1"
        ]
      ]
    },
    {
      "id": 372,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE toughness = 99",
          "SELECT count(id) FROM cards WHERE toughness = '99'",
          "SELECT count(*) FROM cards WHERE toughness = 99",
          "SELECT count(*) FROM cards WHERE toughness = '99';"
        ]
      ]
    },
    {
      "id": 373,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE artist = 'Aaron Boyd'",
          "SELECT name FROM cards WHERE artist = 'Aaron Boyd';",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Aaron Boyd'",
          "SELECT name FROM cards WHERE artist = 'Aaron Boyd' AND isfullart = 1;"
        ]
      ]
    },
    {
      "id": 374,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo'",
          "SELECT count(*) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo';",
          "SELECT count(*) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo'",
          "SELECT count(id) FROM cards WHERE availability = 'mtgo' AND bordercolor = 'black'"
        ]
      ]
    },
    {
      "id": 375,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE convertedmanacost = 0",
          "SELECT id FROM cards WHERE convertedmanacost = 0;",
          "SELECT id FROM cards WHERE convertedmanacost = '0';",
          "SELECT id FROM cards WHERE cast(convertedmanacost AS INTEGER) = 0;"
        ]
      ]
    },
    {
      "id": 376,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%'",
          "SELECT DISTINCT layout FROM cards WHERE keywords = 'flying';",
          "SELECT DISTINCT layout FROM cards WHERE keywords = 'Flying';",
          "SELECT DISTINCT cards.layout FROM cards INNER JOIN ( SELECT id FROM cards WHERE keywords = 'Flying' ) AS t2 ON cards.id = t2.id"
        ]
      ]
    },
    {
      "id": 377,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes NOT LIKE 'Angel'",
          "SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%'",
          "SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel'",
          "SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes NOT LIKE 'Angel';"
        ]
      ]
    },
    {
      "id": 378,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT c.id FROM cards c WHERE c.cardkingdomid IS NOT NULL AND c.cardkingdomfoilid IS NOT NULL;",
          "SELECT cardkingdomid, cardkingdomfoilid FROM cards WHERE cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL;",
          "SELECT c.id FROM cards c WHERE c.hasfoil = 1 AND (c.cardkingdomid IS NOT NULL OR c.cardkingdomfoilid IS NOT NULL);",
          "SELECT cardkingdomid, cardkingdomfoilid FROM cards WHERE cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL"
        ]
      ]
    },
    {
      "id": 379,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE dueldeck = 'a'",
          "SELECT id FROM cards WHERE dueldeck = 'a';",
          "SELECT id FROM cards WHERE dueldeck = 'A'",
          "SELECT id FROM cards WHERE dueldeck = 'A';"
        ]
      ]
    },
    {
      "id": 380,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT edhrecrank FROM cards WHERE frameversion = 2015",
          "SELECT edhrecrank FROM cards WHERE frameversion = '2015';",
          "SELECT edhrecrank FROM cards WHERE frameversion = '2015'",
          "SELECT edhrecrank FROM cards WHERE frameversion = 2015;"
        ]
      ]
    },
    {
      "id": 381,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE foreign_data.language = 'Chinese Simplified'",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified'",
          "SELECT DISTINCT cards.artist FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified'",
          "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON foreign_data.setcode = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified'"
        ]
      ]
    },
    {
      "id": 382,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.availability = 'paper'",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.availability = 'paper' AND foreign_data.language = 'Japanese'",
          "SELECT name FROM cards WHERE availability = 'paper' AND foreign_data.language = 'Japanese'",
          "SELECT c.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.availability = 'paper' AND f.language = 'Japanese';"
        ]
      ]
    },
    {
      "id": 383,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND status = 'Banned'",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.bordercolor = 'white' AND legalities.status = 'Banned'",
          "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.bordercolor = 'white' AND legalities.status = 'Banned'",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white'"
        ]
      ]
    },
    {
      "id": 384,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.uuid, foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'legacy'",
          "SELECT foreign_data.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy'",
          "SELECT foreign_data.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON foreign_data.id = cards.id WHERE legalities.format = 'legacy'",
          "SELECT foreign_data.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON foreign_data.id = cards.foreigndataid WHERE legalities.format = 'legacy'"
        ]
      ]
    },
    {
      "id": 385,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.uuid WHERE cards.name = 'Beacon of Immortality'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Beacon of Immortality'",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality'"
        ]
      ]
    },
    {
      "id": 386,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id), legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal'",
          "SELECT count(cards.id) , legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal'",
          "SELECT count(DISTINCT cards.id), legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal'",
          "SELECT count(DISTINCT cards.id), legalities.status FROM cards cards JOIN legalities legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal';"
        ]
      ]
    },
    {
      "id": 387,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name, colors FROM cards WHERE setcode = 'OGW';",
          "SELECT name, colors FROM cards WHERE setcode = 'OGW'",
          "SELECT cards.name, cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.setcode = 'OGW'",
          "SELECT c.name, c.colors FROM cards c JOIN sets s ON c.setcode = s.code WHERE c.setcode = 'OGW';"
        ]
      ]
    },
    {
      "id": 388,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.setcode = '10E' AND cards.convertedmanacost = 5",
          "SELECT cards.name, set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.convertedmanacost = 5 AND cards.setcode = '10E'",
          "SELECT cards.id, set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.setcode = '10E' AND cards.convertedmanacost = 5",
          "SELECT cards.id, set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.convertedmanacost = 5 AND cards.setcode = '10E'"
        ]
      ]
    },
    {
      "id": 389,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf'",
          "SELECT cards.name, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.originaltype = 'Creature - Elf'",
          "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE cards.originaltype = 'Creature - Elf'",
          "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.originaltype = 'Creature - Elf'"
        ]
      ]
    },
    {
      "id": 390,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT colors, format FROM cards WHERE id BETWEEN 1 AND 20;",
          "SELECT DISTINCT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20",
          "SELECT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20",
          "SELECT colors, format FROM cards WHERE id BETWEEN 1 AND 20"
        ]
      ]
    },
    {
      "id": 391,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'",
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'",
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B' GROUP BY foreign_data.language"
        ]
      ]
    },
    {
      "id": 392,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3",
          "SELECT cards.name FROM cards INNER JOIN rulings ON cards.id = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3",
          "SELECT cards.name FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date LIMIT 3",
          "SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3"
        ]
      ]
    },
    {
      "id": 393,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND (cardkingdomid IS NOT NULL OR cardkingdomfoilid IS NOT NULL);",
          "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NOT NULL",
          "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NOT NULL;",
          "SELECT count(id) FROM cards WHERE artist = 'John Avon' AND (cardkingdomid IS NULL OR cardkingdomid = '') AND (cardkingdomfoilid IS NULL OR cardkingdomfoilid = '');"
        ]
      ]
    },
    {
      "id": 394,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND (cardkingdomid IS NOT NULL OR cardkingdomfoilid IS NOT NULL);",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL",
          "SELECT count(*) FROM cards WHERE bordercolor = 'white' AND (cardkingdomid IS NOT NULL OR cardkingdomfoilid IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 395,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1",
          "SELECT count(id) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1'",
          "SELECT count(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1';",
          "SELECT count(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;"
        ]
      ]
    },
    {
      "id": 396,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE frameversion = '1993' AND availability = 'paper' AND hascontentwarning = 1",
          "SELECT count(id) FROM cards WHERE frameversion = '1993' AND hascontentwarning = 1 AND availability = 'paper'",
          "SELECT count(id) FROM cards WHERE frameversion = 1993 AND hascontentwarning = 1 AND availability = 'paper'",
          "SELECT count(id) FROM cards WHERE hascontentwarning = 1 AND availability = 'paper' AND frameversion = '1993'"
        ]
      ]
    },
    {
      "id": 397,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT manacost FROM cards WHERE availability = 'mtgo,paper' AND frameversion = '2003' AND bordercolor = 'black' AND layout = 'normal'",
          "SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND availability = 'mtgo,paper';",
          "SELECT manacost FROM cards WHERE availability = 'mtgo,paper' AND frameversion = '2003' AND layout = 'normal' AND bordercolor = 'black';",
          "SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND (availability = 'mtgo,paper' OR availability = 'paper');"
        ]
      ]
    },
    {
      "id": 398,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sum(manacost) FROM cards WHERE artist = 'Rob Alexander'",
          "SELECT sum(manacost) FROM cards WHERE artist = 'Rob Alexander' AND manacost IS NOT NULL;",
          "SELECT sum(CASE WHEN artist = 'Rob Alexander' THEN manacost ELSE 0 END) FROM cards",
          "SELECT sum(cast(manacost AS INTEGER)) FROM cards WHERE artist = 'Rob Alexander'"
        ]
      ]
    },
    {
      "id": 399,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena'",
          "SELECT subtypes, supertypes FROM cards WHERE availability = 'arena'",
          "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena';",
          "SELECT subtypes, supertypes FROM cards WHERE availability = 'arena';"
        ]
      ]
    },
    {
      "id": 400,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT setcode FROM set_translations WHERE LANGUAGE = 'Spanish';",
          "SELECT setcode FROM set_translations WHERE LANGUAGE = 'Spanish'",
          "SELECT DISTINCT set_translations.setcode FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Spanish'",
          "SELECT DISTINCT set_translations.setcode FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE foreign_data.language = 'Spanish'"
        ]
      ]
    },
    {
      "id": 401,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary'",
          "SELECT cast(count(CASE WHEN isonlineonly = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary'",
          "SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards WHERE frameeffects = 'legendary'",
          "SELECT cast(count(CASE WHEN isonlineonly = 1 THEN 1 END) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary'"
        ]
      ]
    },
    {
      "id": 402,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN isstoryspotlight = 1 AND istextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards",
          "SELECT cast(sum(CASE WHEN isstoryspotlight = 1 AND istextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), id FROM cards GROUP BY id",
          "SELECT cast(sum(CASE WHEN isstoryspotlight = 1 AND istextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), id FROM cards GROUP BY id;",
          "SELECT cast(sum(CASE WHEN cards.isstoryspotlight = 1 AND cards.istextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id), cards.id FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.isstoryspotlight = 1 AND cards.istextless = 0 GROUP BY cards.id"
        ]
      ]
    },
    {
      "id": 403,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id), cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid GROUP BY cards.name",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id), foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid GROUP BY foreign_data.name",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id), foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid",
          "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id), cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid GROUP BY cards.name"
        ]
      ]
    },
    {
      "id": 404,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 309",
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 309",
          "SELECT language FROM set_translations WHERE setcode IN (SELECT code FROM sets WHERE basesetsize = 309);",
          "SELECT language FROM set_translations WHERE setcode = ( SELECT code FROM sets WHERE basesetsize = 309 )"
        ]
      ]
    },
    {
      "id": 405,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(set_translations.setcode) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)'",
          "SELECT count(DISTINCT set_translations.setcode) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)'",
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)'",
          "SELECT count(set_translations.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)'"
        ]
      ]
    },
    {
      "id": 406,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'Legal'",
          "SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Creature' AND l.status = 'Legal';",
          "SELECT id FROM cards WHERE types = 'Creature' AND uuid IN (SELECT uuid FROM legalities WHERE status = 'Legal');",
          "SELECT id FROM cards WHERE types = 'Creature' AND (SELECT status FROM legalities WHERE uuid = cards.uuid) = 'Legal';"
        ]
      ]
    },
    {
      "id": 407,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL",
          "SELECT DISTINCT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL GROUP BY foreign_data.name"
        ]
      ]
    },
    {
      "id": 408,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%'",
          "SELECT count(*) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%'",
          "SELECT count(*) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%';",
          "SELECT count(id) FROM cards WHERE power = '*' AND text LIKE '%triggered ability%'"
        ]
      ]
    },
    {
      "id": 409,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT rulings.id) FROM rulings rulings JOIN cards cards ON rulings.uuid = cards.uuid WHERE rulings.text = 'This is a triggered mana ability.' AND rulings.format = 'premodern' AND cards.side IS NULL;",
          "SELECT count(DISTINCT rulings.id) FROM rulings rulings JOIN cards cards ON rulings.uuid = cards.uuid WHERE rulings.format = 'premodern' AND rulings.text = 'This is a triggered mana ability.' AND cards.side IS NULL;",
          "SELECT count(DISTINCT cards.id) FROM cards cards JOIN rulings rulings ON cards.uuid = rulings.uuid JOIN legalities legalities ON cards.uuid = legalities.uuid WHERE rulings.text = 'This is a triggered mana ability.' AND legalities.format = 'premodern' AND cards.side IS NULL;",
          "SELECT count(DISTINCT cards.id) FROM cards cards JOIN rulings rulings ON cards.uuid = rulings.uuid JOIN legalities legalities ON cards.uuid = legalities.uuid WHERE rulings.text = 'This is a triggered mana ability.' AND cards.side IS NULL AND legalities.format = 'premodern';"
        ]
      ]
    },
    {
      "id": 410,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.status = 'Legal' AND l.format = 'pauper' AND c.availability = 'paper';",
          "SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.status = 'Legal' AND c.availability = 'paper' AND l.format = 'pauper';",
          "SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.format = 'pauper' AND c.availability = 'paper';",
          "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND EXISTS (SELECT 1 FROM legalities WHERE uuid = cards.uuid AND format = 'pauper' AND status = 'Legal');"
        ]
      ]
    },
    {
      "id": 411,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';",
          "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation'",
          "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation.'",
          "SELECT artist FROM cards WHERE text LIKE '%Das perfekte Gegenmittel zu einer dichten Formation%'"
        ]
      ]
    },
    {
      "id": 412,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson' AND cards.type = 'Creature' AND cards.layout = 'normal'",
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.bordercolor = 'black' AND cards.type = 'Creature' AND cards.layout = 'normal' AND cards.artist = 'Matthew D. Wilson'",
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson' AND cards.types = 'Creature' AND cards.layout = 'normal'",
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson' AND cards.layout = 'normal' AND cards.type = 'Creature'"
        ]
      ]
    },
    {
      "id": 413,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT cards.id) FROM rulings rulings JOIN cards cards ON rulings.uuid = cards.uuid WHERE rulings.date = '2007-02-01' AND cards.rarity = 'rare';",
          "SELECT count(rulings.id) FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE rulings.date = '2007-02-01' AND cards.rarity = 'rare'",
          "SELECT count(rulings.text) FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE rulings.date = '2007-02-01' AND cards.rarity = 'rare'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2007-02-01' AND cards.rarity = 'rare'"
        ]
      ]
    },
    {
      "id": 414,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica' AND sets.basesetsize = 180",
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica' AND sets.basesetsize = 180",
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 180 AND sets.block = 'Ravnica'",
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 180 AND sets.block = 'Ravnica'"
        ]
      ]
    },
    {
      "id": 415,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal'",
          "SELECT cast(sum(CASE WHEN cards.hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal'",
          "SELECT cast(sum(CASE WHEN hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Legal' AND legalities.format = 'commander'",
          "SELECT cast(sum(CASE WHEN hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal');"
        ]
      ]
    },
    {
      "id": 416,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN power IS NULL OR power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE power IS NOT NULL",
          "SELECT cast(sum(CASE WHEN power IS NULL OR power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(power) FROM cards WHERE power IS NOT NULL",
          "SELECT cast(sum(CASE WHEN power IS NULL OR power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards WHERE power IS NOT NULL",
          "SELECT cast(sum(CASE WHEN cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.power) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French'"
        ]
      ]
    },
    {
      "id": 417,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'",
          "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'",
          "SELECT cast(sum(iif(set_translations.language = 'Japanese', 1, 0)) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'"
        ]
      ]
    },
    {
      "id": 418,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT availability FROM cards WHERE artist = 'Daren Bader'",
          "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
          "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader';",
          "SELECT availability FROM cards WHERE artist = 'Daren Bader';"
        ]
      ]
    },
    {
      "id": 419,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE edhrecrank > 12000 AND bordercolor = 'borderless'",
          "SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000",
          "SELECT count(*) FROM cards WHERE edhrecrank > 12000 AND bordercolor = 'borderless';",
          "SELECT count(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000"
        ]
      ]
    },
    {
      "id": 420,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1",
          "SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1",
          "SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;",
          "SELECT count(id) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;"
        ]
      ]
    },
    {
      "id": 421,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promotypes = 'arenaleague' ORDER BY name ASC LIMIT 3;",
          "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promotypes = 'arenaleague' ORDER BY name ASC LIMIT 3",
          "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promotypes = 'arenaleague' ORDER BY name LIMIT 3;",
          "SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promotypes = 'arenaleague' ORDER BY name LIMIT 3"
        ]
      ]
    },
    {
      "id": 422,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.multiverseid = 149934",
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.multiverseid = 149934",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.multiverseid = '149934'",
          "SELECT LANGUAGE FROM foreign_data WHERE multiverseid = 149934"
        ]
      ]
    },
    {
      "id": 423,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards ORDER BY cardkingdomfoilid LIMIT 3",
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards ORDER BY cardkingdomfoilid ASC LIMIT 3",
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL ORDER BY cardkingdomfoilid ASC LIMIT 3",
          "SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL ORDER BY cardkingdomfoilid ASC LIMIT 3;"
        ]
      ]
    },
    {
      "id": 424,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE istextless = 1",
          "SELECT cast(sum(CASE WHEN istextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards",
          "SELECT cast(sum(CASE WHEN layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards WHERE istextless = 1",
          "SELECT cast(sum(CASE WHEN cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.istextless = 1"
        ]
      ]
    },
    {
      "id": 425,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE subtypes IN ('Angel', 'Wizard') GROUP BY id HAVING count(DISTINCT side) = 1;",
          "SELECT id FROM cards WHERE subtypes IN ('Angel', 'Wizard') AND (side IS NULL OR side = '');",
          "SELECT id FROM cards WHERE side = 'a' AND (subtypes = 'Angel' OR subtypes = 'Wizard') GROUP BY id HAVING count(DISTINCT side) = 1;",
          "SELECT id FROM cards WHERE side = 'a' AND (subtypes = 'Angel' OR subtypes = 'Wizard') GROUP BY id HAVING count(DISTINCT face) = 1;"
        ]
      ]
    },
    {
      "id": 426,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name ASC LIMIT 3",
          "SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name LIMIT 3",
          "SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name ASC LIMIT 3;",
          "SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name LIMIT 3;"
        ]
      ]
    },
    {
      "id": 427,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC'",
          "SELECT language FROM set_translations WHERE setcode = 'ARC' AND setcode IN (SELECT code FROM sets WHERE mcmname = 'Archenemy');",
          "SELECT language FROM set_translations WHERE setcode = 'ARC' AND setcode = (SELECT code FROM sets WHERE mcmname = 'Archenemy');",
          "SELECT DISTINCT LANGUAGE FROM set_translations WHERE setcode = 'ARC' AND setcode IN (SELECT code FROM sets WHERE mcmname = 'Archenemy');"
        ]
      ]
    },
    {
      "id": 428,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5",
          "SELECT name, translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5",
          "SELECT DISTINCT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5"
        ]
      ]
    },
    {
      "id": 429,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.language, sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 206",
          "SELECT st.language, s.type FROM sets s JOIN set_translations st ON s.code = st.setcode WHERE s.id = 206;",
          "SELECT foreign_data.language, sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.id = 206",
          "SELECT foreign_data.language, sets.type FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206"
        ]
      ]
    },
    {
      "id": 430,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.id, sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name LIMIT 2",
          "SELECT sets.id, sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE sets.block = 'Shadowmoor' AND set_translations.language = 'Italian' ORDER BY sets.name LIMIT 2",
          "SELECT DISTINCT sets.id, sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE sets.block = 'Shadowmoor' AND set_translations.language = 'Italian' ORDER BY sets.name LIMIT 2",
          "SELECT sets.id, sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE sets.block = 'Shadowmoor' AND set_translations.language = 'Italian' GROUP BY sets.id, sets.name ORDER BY count(cards.id) DESC LIMIT 2"
        ]
      ]
    },
    {
      "id": 431,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND foreign_data.language = 'Japanese'",
          "SELECT DISTINCT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND foreign_data.language = 'Japanese'",
          "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE foreign_data.language = 'Japanese' AND sets.isforeignonly = 1 AND sets.isfoilonly = 1",
          "SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setcode JOIN foreign_data fd ON st.language = fd.language WHERE s.isforeignonly = 1 AND s.isfoilonly = 1 AND fd.language = 'Japanese';"
        ]
      ]
    },
    {
      "id": 432,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Russian') AND basesetsize = (SELECT max(basesetsize) FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Russian'))",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE foreign_data.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1",
          "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON foreign_data.id = sets.id WHERE foreign_data.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1",
          "SELECT name FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Russian') AND basesetsize = (SELECT max(basesetsize) FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Russian'));"
        ]
      ]
    },
    {
      "id": 433,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified'",
          "SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Chinese Simplified'",
          "SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified'",
          "SELECT cast(sum(CASE WHEN cards.isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE foreign_data.language = 'Chinese Simplified'"
        ]
      ]
    },
    {
      "id": 434,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND (sets.mtgocode IS NULL OR sets.mtgocode = '')",
          "SELECT count(id) FROM sets WHERE mtgocode IS NULL OR mtgocode = '' AND id IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Japanese');",
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND (sets.mtgocode = '' OR sets.mtgocode IS NULL)",
          "SELECT count(*) FROM sets WHERE mtgocode IS NULL OR mtgocode = '' AND id IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Japanese');"
        ]
      ]
    },
    {
      "id": 435,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE bordercolor = 'black'",
          "SELECT id FROM cards WHERE bordercolor = 'black';",
          "SELECT count(id) FROM cards WHERE bordercolor = 'black'",
          "SELECT count(id), id FROM cards WHERE bordercolor = 'black'"
        ]
      ]
    },
    {
      "id": 436,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM cards WHERE frameeffects = 'extendedart'",
          "SELECT id FROM cards WHERE frameeffects = 'extendedart';",
          "SELECT id FROM cards WHERE frameeffects LIKE '%extendedart%'",
          "SELECT id FROM cards WHERE frameeffects LIKE 'extendedart'"
        ]
      ]
    },
    {
      "id": 437,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE bordercolor = 'white' AND isfullart = 1",
          "SELECT name FROM cards WHERE bordercolor = 'black' AND isfullart = 1",
          "SELECT name FROM cards WHERE bordercolor = 'white' AND isfullart = 1;",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.bordercolor = 'white' AND cards.isfullart = 1"
        ]
      ]
    },
    {
      "id": 438,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT language FROM set_translations WHERE setcode = ( SELECT code FROM sets WHERE id = 174 )",
          "SELECT language FROM set_translations WHERE setcode IN (SELECT code FROM sets WHERE id = 174);",
          "SELECT language FROM set_translations WHERE setcode = (SELECT code FROM sets WHERE id = 174);",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE set_translations.setcode = '174'"
        ]
      ]
    },
    {
      "id": 439,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM sets WHERE code = 'ALL'",
          "SELECT name FROM sets WHERE code = 'ALL';",
          "SELECT name FROM set_translations WHERE setcode = 'ALL'",
          "SELECT DISTINCT name FROM sets WHERE code = 'ALL';"
        ]
      ]
    },
    {
      "id": 440,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT LANGUAGE FROM foreign_data WHERE name = 'A Pedra Fellwar'",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.name = 'A Pedra Fellwar'",
          "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
          "SELECT LANGUAGE FROM foreign_data WHERE name = 'A Pedra Fellwar';"
        ]
      ]
    },
    {
      "id": 441,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE releasedate = '2007-07-13';",
          "SELECT code FROM sets WHERE releasedate = '2007-07-13'",
          "SELECT DISTINCT code FROM sets WHERE releasedate = '2007-07-13';",
          "SELECT code FROM sets WHERE strftime('%Y-%m-%d', releasedate) = '2007-07-13';"
        ]
      ]
    },
    {
      "id": 442,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT basesetsize, code FROM sets WHERE block IN ('Masques', 'Mirage');",
          "SELECT basesetsize, code FROM sets WHERE block IN ('Masques', 'Mirage')",
          "SELECT s.basesetsize, s.code FROM sets s WHERE s.block IN ('Masques', 'Mirage');",
          "SELECT basesetsize, code FROM sets WHERE block = 'Masques' OR block = 'Mirage'"
        ]
      ]
    },
    {
      "id": 443,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE TYPE = 'expansion';",
          "SELECT code FROM sets WHERE TYPE = 'expansion'",
          "SELECT DISTINCT code FROM sets WHERE TYPE = 'expansion';",
          "SELECT code FROM SETS WHERE TYPE = 'expansion';"
        ]
      ]
    },
    {
      "id": 444,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros'",
          "SELECT foreign_data.name, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros'",
          "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros'",
          "SELECT foreign_data.name, foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros'"
        ]
      ]
    },
    {
      "id": 445,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language, cards.flavortext, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
          "SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
          "SELECT foreign_data.language, cards.flavortext FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
          "SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie'"
        ]
      ]
    },
    {
      "id": 446,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Abyssal Horror'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.convertedmanacost) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Abyssal Horror'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.name) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Abyssal Horror'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON sets.id = cards.setcode WHERE cards.name = 'Abyssal Horror'"
        ]
      ]
    },
    {
      "id": 447,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE TYPE = 'expansion' OR TYPE = 'commander';",
          "SELECT code FROM sets WHERE TYPE = 'expansion' AND TYPE = 'commander';",
          "SELECT code FROM sets WHERE TYPE = 'expansion' AND TYPE = 'commander'",
          "SELECT code FROM sets WHERE TYPE = 'expansion' OR TYPE = 'commander'"
        ]
      ]
    },
    {
      "id": 448,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'",
          "SELECT foreign_data.name, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'",
          "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan'",
          "SELECT foreign_data.name, foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan'"
        ]
      ]
    },
    {
      "id": 449,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'",
          "SELECT foreign_data.language, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius'",
          "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azarius'",
          "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'"
        ]
      ]
    },
    {
      "id": 450,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND (cardkingdomid IS NOT NULL OR cardkingdomfoilid IS NOT NULL);",
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL",
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL",
          "SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND (cardkingdomfoilid IS NOT NULL OR cardkingdomid IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 451,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE hand = '3' AND availability LIKE '%paper%'",
          "SELECT count(id) FROM cards WHERE availability LIKE '%paper%' AND hand = '3'",
          "SELECT count(*) FROM cards WHERE hand = '3' AND availability LIKE '%paper%'",
          "SELECT count(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '3';"
        ]
      ]
    },
    {
      "id": 452,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE istextless = 0",
          "SELECT name FROM cards WHERE istextless = 0;",
          "SELECT DISTINCT name FROM cards WHERE istextless = 0",
          "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.istextless = 0"
        ]
      ]
    },
    {
      "id": 453,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT manacost FROM cards WHERE name = 'Ancestor`s Chosen'",
          "SELECT manacost FROM cards WHERE name = 'Ancestor''s Chosen'",
          "SELECT manacost FROM cards WHERE name = 'Ancestor`s Chosen' AND convertedmanacost = 0",
          "SELECT manacost FROM cards WHERE name = 'Ancestor`s Chosen';"
        ]
      ]
    },
    {
      "id": 454,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND (power = '*' OR power IS NULL)",
          "SELECT count(*) FROM cards WHERE bordercolor = 'white' AND (power = '*' OR power IS NULL);",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND (power IS NULL OR power = '*')",
          "SELECT count(id) FROM cards WHERE bordercolor = 'white' AND (power = '*' OR power IS NULL);"
        ]
      ]
    },
    {
      "id": 455,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE ispromo = 1 AND side IS NOT NULL",
          "SELECT name FROM cards WHERE ispromo = 1 AND side IS NOT NULL;",
          "SELECT name FROM cards WHERE side IS NOT NULL AND ispromo = 1",
          "SELECT name FROM cards WHERE side IS NOT NULL AND ispromo = 1;"
        ]
      ]
    },
    {
      "id": 456,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
          "SELECT types, subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
          "SELECT DISTINCT types, subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
          "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';"
        ]
      ]
    },
    {
      "id": 457,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT purchaseurls FROM cards WHERE promotypes = 'bundle';",
          "SELECT purchaseurls FROM cards WHERE promotypes = 'bundle';",
          "SELECT purchaseurls FROM cards WHERE promotypes = 'bundle'",
          "SELECT DISTINCT purchaseurls FROM cards WHERE promotypes = 'bundle'"
        ]
      ]
    },
    {
      "id": 458,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT artist) FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena,mtgo%'",
          "SELECT count(DISTINCT artist) FROM cards WHERE availability LIKE '%arena,mtgo%' AND bordercolor = 'black';",
          "SELECT count(DISTINCT artist) FROM cards WHERE bordercolor = 'black' AND (availability LIKE '%arena%' OR availability LIKE '%mtgo%');",
          "SELECT count(DISTINCT artist) FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena,mtgo%';"
        ]
      ]
    },
    {
      "id": 459,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE name = 'Serra Angel' AND convertedmanacost > ( SELECT convertedmanacost FROM cards WHERE name = 'Shrine Keeper' )",
          "SELECT name FROM cards WHERE (name = 'Serra Angel' AND convertedmanacost > (SELECT convertedmanacost FROM cards WHERE name = 'Shrine Keeper')) OR (name = 'Shrine Keeper' AND convertedmanacost > (SELECT convertedmanacost FROM cards WHERE name = 'Serra Angel'))",
          "SELECT name FROM cards WHERE (name = 'Serra Angel' AND convertedmanacost > (SELECT max(convertedmanacost) FROM cards WHERE name = 'Shrine Keeper')) OR (name = 'Shrine Keeper' AND convertedmanacost > (SELECT max(convertedmanacost) FROM cards WHERE name = 'Serra Angel'))",
          "SELECT name FROM cards WHERE (name = 'Serra Angel' AND convertedmanacost > (SELECT convertedmanacost FROM cards WHERE name = 'Shrine Keeper')) OR (name = 'Shrine Keeper' AND convertedmanacost > (SELECT convertedmanacost FROM cards WHERE name = 'Serra Angel'));"
        ]
      ]
    },
    {
      "id": 460,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer'",
          "SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer';",
          "SELECT DISTINCT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer'",
          "SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer' GROUP BY artist"
        ]
      ]
    },
    {
      "id": 461,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY cast(manacost AS INTEGER) DESC LIMIT 3;",
          "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY cast(manacost AS INTEGER) DESC LIMIT 3",
          "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3;",
          "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 462,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Italian'",
          "SELECT DISTINCT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Italian'",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.id = cards.setcode WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian'",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian'"
        ]
      ]
    },
    {
      "id": 463,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(set_translations.id) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Angel of Mercy'",
          "SELECT count(*) FROM set_translations WHERE setcode IN (SELECT setcode FROM cards WHERE name = 'Angel of Mercy');",
          "SELECT count(DISTINCT set_translations.id) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Angel of Mercy'",
          "SELECT count(set_translations.translation) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Angel of Mercy'"
        ]
      ]
    },
    {
      "id": 464,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT DISTINCT cards.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT cards.name FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'"
        ]
      ]
    },
    {
      "id": 465,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT 'YES' FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Korean'",
          "SELECT CASE WHEN count(CASE WHEN set_translations.language = 'Korean' THEN 1 ELSE NULL END) > 0 THEN 'YES' ELSE 'NO' END FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT CASE WHEN count(CASE WHEN set_translations.language = 'Korean' THEN 1 END) > 0 THEN 'YES' ELSE 'NO' END FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT CASE WHEN count(CASE WHEN set_translations.language = 'Korean' THEN 1 ELSE NULL END) > 0 THEN 'YES' ELSE 'NO' END FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 466,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.artist = 'Adam Rex' AND set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.artist = 'Adam Rex' AND set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.artist = 'Adam Rex' AND set_translations.translation = 'Hauptset Zehnte Edition'"
        ]
      ]
    },
    {
      "id": 467,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT basesetsize FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');",
          "SELECT totalsetsize FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');",
          "SELECT basesetsize FROM sets WHERE code = ( SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' )",
          "SELECT basesetsize FROM sets WHERE code IN ( SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' )"
        ]
      ]
    },
    {
      "id": 468,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT translation FROM set_translations WHERE language = 'Chinese Simplified' AND setcode = ( SELECT code FROM sets WHERE name = 'Eighth Edition' )",
          "SELECT translation FROM set_translations WHERE language = 'Chinese Simplified' AND setcode IN (SELECT code FROM sets WHERE name = 'Eighth Edition');",
          "SELECT translation FROM set_translations WHERE setcode IN (SELECT code FROM sets WHERE name = 'Eighth Edition') AND language = 'Chinese Simplified'",
          "SELECT translation FROM set_translations WHERE setcode IN (SELECT code FROM sets WHERE name = 'Eighth Edition') AND language = 'Chinese Simplified';"
        ]
      ]
    },
    {
      "id": 469,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT CASE WHEN count(sets.mtgocode) > 0 THEN 'YES' ELSE 'NO' END FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Angel of Mercy'",
          "SELECT CASE WHEN EXISTS (SELECT 1 FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgocode IS NOT NULL) THEN 'YES' ELSE 'NO' END",
          "SELECT CASE WHEN EXISTS (SELECT 1 FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgocode IS NOT NULL) THEN 'YES' ELSE 'NO' END AS appearsononline , CASE WHEN EXISTS (SELECT 1 FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgocode IS NULL) THEN 'YES' ELSE 'NO' END AS appearsonmtgo",
          "SELECT CASE WHEN EXISTS (SELECT 1 FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgocode IS NOT NULL) THEN 'YES' ELSE 'NO' END AS EXISTS , CASE WHEN EXISTS (SELECT 1 FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgocode IS NULL) THEN 'YES' ELSE 'NO' END AS DOESNOTEXIST"
        ]
      ]
    },
    {
      "id": 470,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT releasedate FROM sets WHERE id IN (SELECT setcode FROM cards WHERE name = 'Ancestor''s Chosen');",
          "SELECT releasedate FROM sets WHERE code IN (SELECT setcode FROM cards WHERE name = 'Ancestor''s Chosen');",
          "SELECT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Ancestor''s Chosen'",
          "SELECT DISTINCT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 471,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT TYPE FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');",
          "SELECT DISTINCT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'",
          "SELECT type FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');",
          "SELECT TYPE FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = ' Hauptset Zehnte Edition');"
        ]
      ]
    },
    {
      "id": 472,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL",
          "SELECT count(DISTINCT sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL",
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL",
          "SELECT count(sets.name) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL"
        ]
      ]
    },
    {
      "id": 473,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT CASE WHEN sets.isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Adarkar Valkyrie'",
          "SELECT CASE WHEN sets.isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.id = cards.id WHERE cards.name = 'Adarkar Valkyrie'",
          "SELECT CASE WHEN isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM sets WHERE name = 'Adarkar Valkyrie'",
          "SELECT CASE WHEN isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM sets WHERE id IN (SELECT setcode FROM set_translations WHERE translation = 'Adarkar Valkyrie')"
        ]
      ]
    },
    {
      "id": 474,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10",
          "SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10",
          "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize < 10 AND set_translations.language = 'Italian'",
          "SELECT count(DISTINCT sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10"
        ]
      ]
    },
    {
      "id": 475,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black'",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.bordercolor = 'black' AND sets.name = 'Coldsnap'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black'",
          "SELECT count(cards.id) FROM cards INNER JOIN SETS ON cards.setcode = SETS.code WHERE cards.bordercolor = 'black' AND SETS.name = 'Coldsnap'"
        ]
      ]
    },
    {
      "id": 476,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cast(cards.convertedmanacost AS INTEGER) DESC LIMIT 1",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cast(replace(substr(cards.manacost, 2), ',', '') AS REAL) DESC LIMIT 1",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cast(replace(trim(cards.manacost, '{}'), ',', '') AS REAL) DESC LIMIT 1",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cast(replace(trim(cards.manacost, '{}'), ',', '') AS INTEGER) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 477,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND id IN (SELECT cardid FROM sets WHERE name = 'Coldsnap');",
          "SELECT cards.artist FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND sets.name = 'Coldsnap'",
          "SELECT cards.artist FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
          "SELECT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND id IN (SELECT cardid FROM sets WHERE name = 'Coldsnap' AND id IN (SELECT id FROM sets WHERE name = 'Coldsnap'));"
        ]
      ]
    },
    {
      "id": 478,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.number = 4 AND sets.name = 'Coldsnap'",
          "SELECT cards.number FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.number = 4 AND sets.name = 'Coldsnap'",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.number = '4' AND sets.name = 'Coldsnap'",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = 4"
        ]
      ]
    },
    {
      "id": 479,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR cards.power IS NULL)",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.convertedmanacost > 5 AND (cards.power = '*' OR cards.power IS NULL) AND sets.name = 'Coldsnap'",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cast(cards.convertedmanacost AS INTEGER) > 5 AND (cards.power = '*' OR cards.power IS NULL)",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.convertedmanacost > 5 AND (cards.power = '*' OR (SELECT power FROM cards WHERE id = cards.id AND power IS NOT NULL) IS NULL) AND sets.name = 'Coldsnap'"
        ]
      ]
    },
    {
      "id": 480,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.flavortext FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian'",
          "SELECT flavortext FROM cards WHERE name = 'Ancestor''s Chosen' AND flavortext IS NOT NULL AND LANGUAGE = 'Italian'",
          "SELECT foreign_data.flavortext FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen'",
          "SELECT flavortext FROM cards WHERE name = 'Ancestor''s Chosen' AND flavortext IS NOT NULL"
        ]
      ]
    },
    {
      "id": 481,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavortext IS NOT NULL",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavortext IS NOT NULL",
          "SELECT DISTINCT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavortext IS NOT NULL",
          "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavortext IS NOT NULL GROUP BY foreign_data.language"
        ]
      ]
    },
    {
      "id": 482,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German'",
          "SELECT foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.name = 'Ancestor''s Chosen'",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German'",
          "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.name = 'Ancestor''s Chosen'"
        ]
      ]
    },
    {
      "id": 483,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian'",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Italian' AND set_translations.translation = 'Coldsnap'",
          "SELECT rulings.text FROM rulings INNER JOIN sets ON rulings.uuid = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian'",
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Italian' AND set_translations.setcode = ( SELECT code FROM sets WHERE name = 'Coldsnap' )"
        ]
      ]
    },
    {
      "id": 484,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.setid WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost = ( SELECT max(convertedmanacost) FROM cards INNER JOIN sets ON cards.setid = sets.id WHERE sets.name = 'Coldsnap' )",
          "SELECT cards.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.id WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost = ( SELECT max(convertedmanacost) FROM cards )",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON sets.code = set_translations.setcode WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost = ( SELECT max(convertedmanacost) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' )",
          "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost = ( SELECT max(convertedmanacost) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' )"
        ]
      ]
    },
    {
      "id": 485,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce'",
          "SELECT rulings.date FROM cards INNER JOIN rulings ON cards.id = rulings.uuid WHERE cards.name = 'Reminisce'",
          "SELECT rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce'",
          "SELECT rulings.date FROM cards INNER JOIN rulings ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce'"
        ]
      ]
    },
    {
      "id": 486,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN SETS ON cards.id = SETS.id WHERE SETS.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN SETS ON cards.id = sets.id WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN SETS ON cards.id = SETS.id WHERE cards.convertedmanacost IS NOT NULL AND SETS.name = 'Coldsnap'"
        ]
      ]
    },
    {
      "id": 487,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.name) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(CASE WHEN cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap'",
          "SELECT cast(sum(iif(cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL, 1, 0)) AS REAL) * 100 / count(cards.name) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap'"
        ]
      ]
    },
    {
      "id": 488,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT code FROM sets WHERE releasedate = '2017-07-14'",
          "SELECT code FROM sets WHERE releasedate = '2017-07-14';",
          "SELECT DISTINCT code FROM sets WHERE releasedate = '2017-07-14';",
          "SELECT code FROM sets WHERE releasedate LIKE '2017-07-14'"
        ]
      ]
    },
    {
      "id": 489,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT keyrunecode FROM sets WHERE code = 'PKHC';",
          "SELECT keyrunecode FROM sets WHERE code = 'PKHC'",
          "SELECT t.keyrunecode FROM sets AS t WHERE t.code = 'PKHC'",
          "SELECT DISTINCT keyrunecode FROM sets WHERE code = 'PKHC';"
        ]
      ]
    },
    {
      "id": 490,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT mcmid FROM sets WHERE code = 'SS2'",
          "SELECT mcmid FROM sets WHERE code = 'SS2';",
          "SELECT mcmid FROM sets WHERE code LIKE 'SS2'",
          "SELECT mcmid FROM sets WHERE code = 'SS2' LIMIT 1"
        ]
      ]
    },
    {
      "id": 491,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT mcmname FROM sets WHERE releasedate = '2017-06-09';",
          "SELECT mcmname FROM sets WHERE releasedate = '2017-06-09'",
          "SELECT s.mcmname FROM sets s WHERE s.releasedate = '2017-06-09';",
          "SELECT DISTINCT mcmname FROM sets WHERE releasedate = '2017-06-09';"
        ]
      ]
    },
    {
      "id": 492,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT TYPE FROM sets WHERE name LIKE '%From the Vault: Lore%'",
          "SELECT TYPE FROM sets WHERE mcmname = 'From the Vault: Lore'",
          "SELECT TYPE FROM sets WHERE name LIKE 'From the Vault: Lore'",
          "SELECT TYPE FROM sets WHERE mcmname LIKE '%From the Vault: Lore%'"
        ]
      ]
    },
    {
      "id": 493,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized'",
          "SELECT DISTINCT parentcode FROM sets WHERE name = 'Commander 2014 Oversized'",
          "SELECT code FROM sets WHERE name = 'Commander 2014 Oversized'",
          "SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized';"
        ]
      ]
    },
    {
      "id": 494,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT CASE WHEN cards.hascontentwarning = 1 THEN 'YES' ELSE 'NO' END AS hascontentwarning, rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = 'Jim Pavelec'",
          "SELECT CASE WHEN cards.hascontentwarning = 1 THEN 'YES' ELSE 'NO' END AS hascontentwarning, rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Jim Pavelec'",
          "SELECT CASE WHEN cards.hascontentwarning = 1 THEN 'YES' ELSE 'NO' END AS hascontent, rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = 'Jim Pavelec'",
          "SELECT CASE WHEN hascontentwarning = 1 THEN 'YES' ELSE 'NO' END AS hascontent, rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = 'Jim Pavelec'"
        ]
      ]
    },
    {
      "id": 495,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Evacuation'",
          "SELECT DISTINCT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Evacuation'",
          "SELECT s.releasedate FROM cards c JOIN sets s ON c.setcode = s.code WHERE c.name = 'Evacuation';",
          "SELECT s.releasedate FROM cards c JOIN sets s ON c.setcode = s.code WHERE c.name = 'Evacuation' AND s.releasedate IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 496,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara'",
          "SELECT totalsetsize FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = 'Rinascita di Alara');",
          "SELECT sum(sets.basesetsize) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara'",
          "SELECT totalsetsize FROM sets WHERE code IN ( SELECT setcode FROM set_translations WHERE translation = 'Rinascita di Alara' )"
        ]
      ]
    },
    {
      "id": 497,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT TYPE FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition');",
          "SELECT DISTINCT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huiti\u00e8me \u00e9dition'",
          "SELECT type FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition');",
          "SELECT TYPE FROM sets WHERE code IN ( SELECT setcode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )"
        ]
      ]
    },
    {
      "id": 498,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French'",
          "SELECT DISTINCT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French'",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Tendo Ice Bridge' AND foreign_data.language = 'French'",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE foreign_data.language = 'French' AND set_translations.translation = 'Tendo Ice Bridge'"
        ]
      ]
    },
    {
      "id": 499,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(set_translations.translation) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Tenth Edition' AND set_translations.translation IS NOT NULL",
          "SELECT count(*) FROM set_translations WHERE setcode IN (SELECT code FROM sets WHERE name = 'Tenth Edition') AND translation IS NOT NULL;",
          "SELECT count(set_translations.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Tenth Edition' AND set_translations.translation IS NOT NULL",
          "SELECT count(set_translations.translation) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Tenth Edition'"
        ]
      ]
    },
    {
      "id": 500,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE cards.name = 'Fellwar Stone' AND foreign_data.language = 'Japanese'",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE foreign_data.language = 'Japanese' AND cards.name = 'Fellwar Stone'",
          "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Fellwar Stone' AND foreign_data.language = 'Japanese'",
          "SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'"
        ]
      ]
    },
    {
      "id": 501,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM sets INNER JOIN cards ON sets.id = cards.setcode WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cast(cards.convertedmanacost AS INTEGER) DESC LIMIT 1",
          "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cast(replace(trim(cards.manacost, '{}'), ',', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 502,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de fr\u00edo'",
          "SELECT DISTINCT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de fr\u00edo'",
          "SELECT releasedate FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE translation = 'Ola de fr\u00edo');",
          "SELECT sets.releasedate FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.translation = 'Ola de fr\u00edo'"
        ]
      ]
    },
    {
      "id": 503,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT sets.type FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Samite Pilgrim'",
          "SELECT DISTINCT sets.type FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Samite Pilgrim'",
          "SELECT s.type FROM cards c JOIN sets s ON c.setcode = s.code WHERE c.name = 'Samite Pilgrim';",
          "SELECT s.type FROM sets s JOIN cards c ON s.code = c.setcode WHERE c.name = 'Samite Pilgrim';"
        ]
      ]
    },
    {
      "id": 504,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = '3'",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cast(cards.convertedmanacost AS INTEGER) = 3",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.convertedmanacost = '3' AND sets.name = 'World Championship Decks 2004'",
          "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cast(replace(trim(cards.manacost, '{}'), ',', '') AS INTEGER) = 3"
        ]
      ]
    },
    {
      "id": 505,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT translation FROM set_translations WHERE language = 'Chinese Simplified' AND setcode IN (SELECT code FROM sets WHERE name = 'Mirrodin');",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified'",
          "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified' AND sets.name = 'Mirrodin'",
          "SELECT DISTINCT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified' AND sets.name = 'Mirrodin'"
        ]
      ]
    },
    {
      "id": 506,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese'",
          "SELECT cast(sum(CASE WHEN sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese'",
          "SELECT cast(sum(CASE WHEN sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese'",
          "SELECT cast(sum(CASE WHEN sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE foreign_data.language = 'Japanese'"
        ]
      ]
    },
    {
      "id": 507,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN sets.isonlineonly = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)'",
          "SELECT cast(sum(CASE WHEN sets.isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)'",
          "SELECT cast(count(CASE WHEN sets.isonlineonly = 1 THEN sets.id ELSE NULL END) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)'",
          "SELECT cast(count(CASE WHEN sets.isonlineonly = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)'"
        ]
      ]
    },
    {
      "id": 508,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1;",
          "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1",
          "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1;",
          "SELECT DISTINCT availability FROM cards WHERE artist LIKE 'Aleksi Briclot' AND istextless = 1;"
        ]
      ]
    },
    {
      "id": 509,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM sets WHERE basesetsize = (SELECT max(basesetsize) FROM sets);",
          "SELECT id FROM sets WHERE basesetsize = ( SELECT max(basesetsize) FROM sets )",
          "SELECT id FROM sets ORDER BY basesetsize DESC LIMIT 1",
          "SELECT id FROM sets WHERE basesetsize = (SELECT max(basesetsize) FROM sets)"
        ]
      ]
    },
    {
      "id": 510,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE side IS NULL ORDER BY cast(replace(manacost, '{', '') AS INTEGER) DESC LIMIT 1",
          "SELECT artist FROM cards WHERE side IS NULL ORDER BY cast(replace(manacost, '{', '') AS INTEGER) DESC LIMIT 1;",
          "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1",
          "SELECT artist FROM cards WHERE side IS NULL ORDER BY cast(convertedmanacost AS INTEGER) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 511,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT max(frameeffects) FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;",
          "SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1;",
          "SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1",
          "SELECT frameeffects FROM cards GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 512,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE dueldeck = 'a' AND power IS NULL AND hasfoil = 0",
          "SELECT count(id) FROM cards WHERE dueldeck = 'a' AND (power IS NULL OR power = '*') AND hasfoil = 0",
          "SELECT count(id) FROM cards WHERE dueldeck = 'a' AND hasfoil = 0 AND (power IS NULL OR power = '*')",
          "SELECT count(id) FROM cards WHERE hasfoil = 0 AND dueldeck = 'a' AND (power IS NULL OR power = '*')"
        ]
      ]
    },
    {
      "id": 513,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT id FROM sets WHERE TYPE = 'commander' ORDER BY totalsetsize DESC LIMIT 1",
          "SELECT id FROM sets WHERE TYPE = 'commander' ORDER BY totalsetsize DESC LIMIT 1;",
          "SELECT id FROM sets WHERE TYPE = 'commander' AND totalsetsize = (SELECT max(totalsetsize) FROM sets WHERE TYPE = 'commander');",
          "SELECT id FROM sets WHERE TYPE = 'commander' AND totalsetsize = (SELECT max(totalsetsize) FROM sets WHERE TYPE = 'commander')"
        ]
      ]
    },
    {
      "id": 514,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM cards WHERE manacost = ( SELECT max(manacost) FROM cards ) AND format = 'duel' LIMIT 10",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.manacost DESC LIMIT 10",
          "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.convertedmanacost DESC LIMIT 10",
          "SELECT name FROM cards WHERE manacost = ( SELECT max(manacost) FROM cards ) AND format = 'duel' LIMIT 10;"
        ]
      ]
    },
    {
      "id": 515,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT min(cards.originalreleasedate), legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Legal'",
          "SELECT min(cards.originalreleasedate), legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'legal'",
          "SELECT min(originalreleasedate), format FROM cards WHERE rarity = 'mythic' AND status = 'legal'",
          "SELECT originalreleasedate, format FROM cards WHERE rarity = 'mythic' AND originalreleasedate IS NOT NULL ORDER BY originalreleasedate ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 516,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT cards.id) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Ba\u01f5a'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Ba\u01f5a'",
          "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Ba\u01f5a'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Ba\u01f5a'"
        ]
      ]
    },
    {
      "id": 517,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance' AND cards.types = 'Enchantment' AND legalities.status = 'Legal' AND cards.rarity = 'rare'",
          "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance' AND cards.types = 'Enchantment' AND cards.rarity = 'rare' AND legalities.status = 'Legal'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance' AND cards.types = 'Enchantment' AND legalities.status = 'Legal' AND cards.rarity = 'rare'",
          "SELECT count(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance' AND cards.types = 'Enchantment' AND cards.rarity = 'rare' AND legalities.status = 'Legal'"
        ]
      ]
    },
    {
      "id": 518,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.format, cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY count(legalities.status) DESC LIMIT 1",
          "SELECT l.format, c.name FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'Banned' GROUP BY l.format, c.name ORDER BY count(l.status) DESC LIMIT 1;",
          "SELECT l.format, c.name FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'Banned' GROUP BY l.format ORDER BY count(l.status) DESC LIMIT 1;",
          "SELECT DISTINCT legalities.format, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY count(legalities.status) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 519,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Battlebond'",
          "SELECT foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.name = 'Battlebond'",
          "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Battlebond'",
          "SELECT foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON foreign_data.id = set_translations.id WHERE sets.name = 'Battlebond'"
        ]
      ]
    },
    {
      "id": 520,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid ORDER BY cards.artist LIMIT 1",
          "SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY cards.artist, legalities.format ORDER BY count(cards.artist) ASC LIMIT 1",
          "SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY cards.artist, legalities.format ORDER BY count(cards.artist) LIMIT 1",
          "SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY cards.artist ORDER BY count(cards.artist) LIMIT 1"
        ]
      ]
    },
    {
      "id": 521,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1",
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1",
          "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND hascontentwarning = 1 AND legalities.format = 'legacy'",
          "SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND hascontentwarning = 1 AND legalities.format = 'legacy'"
        ]
      ]
    },
    {
      "id": 522,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecrank = 1 AND legalities.status = 'Banned'",
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.edhrecrank = 1",
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecrank = 1 AND legalities.status = 'Banned'",
          "SELECT name, status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecrank = 1 AND status = 'Banned'"
        ]
      ]
    },
    {
      "id": 523,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cast(count(sets.id) AS REAL) / 365, max(set_translations.language) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE strftime('%Y', sets.releasedate) BETWEEN '2012' AND '2015'",
          "SELECT cast(count(sets.id) AS REAL) / 365, max(set_translations.language) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.releasedate BETWEEN '2012-01-01' AND '2015-12-31'",
          "SELECT cast(count(DISTINCT sets.id) AS REAL) / 365, max(set_translations.language) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE strftime('%Y', sets.releasedate) BETWEEN '2012' AND '2015'",
          "SELECT cast(count(sets.id) AS REAL) / 365, max(set_translations.language) AS common_language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE strftime('%Y', sets.releasedate) BETWEEN '2012' AND '2015'"
        ]
      ]
    },
    {
      "id": 524,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena';",
          "SELECT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena'",
          "SELECT DISTINCT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena';",
          "SELECT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena' GROUP BY artist"
        ]
      ]
    },
    {
      "id": 525,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted');",
          "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Restricted' OR status = 'Banned');",
          "SELECT uuid FROM legalities WHERE status IN ('Restricted', 'Banned') AND format = 'oldschool';",
          "SELECT cards.uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' AND (legalities.status = 'Banned' OR legalities.status = 'Restricted')"
        ]
      ]
    },
    {
      "id": 526,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT count(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
          "SELECT count(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';",
          "SELECT count(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';",
          "SELECT count(id) FROM cards WHERE artist LIKE 'Matthew D. Wilson' AND availability LIKE 'paper'"
        ]
      ]
    },
    {
      "id": 527,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC",
          "SELECT rulings.date, rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC",
          "SELECT rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC"
        ]
      ]
    },
    {
      "id": 528,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON sets.id = cards.setcode WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'",
          "SELECT cards.name, legalities.format FROM sets INNER JOIN cards ON sets.id = cards.setcode INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'",
          "SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN sets s ON c.setcode = s.code WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';",
          "SELECT cards.name, legalities.format FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'"
        ]
      ]
    },
    {
      "id": 529,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT name FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE LIKE '%Korean%' AND LANGUAGE NOT LIKE '%Japanese%');",
          "SELECT DISTINCT set_translations.setcode FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language NOT LIKE '%Japanese%' AND set_translations.language = 'Korean'",
          "SELECT name FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE = 'Korean') AND code NOT IN (SELECT setcode FROM set_translations WHERE LANGUAGE LIKE '%Japanese%');",
          "SELECT name FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE LANGUAGE LIKE '%Korean%' AND LANGUAGE NOT LIKE '%Japanese%')"
        ]
      ]
    },
    {
      "id": 530,
      "db_id": "card_games",
      "infer_predictions": [
        [
          "SELECT DISTINCT cards.frameversion, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
          "SELECT DISTINCT cards.frameversion, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
          "SELECT cards.frameversion, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'",
          "SELECT DISTINCT cards.frameversion, cards.artist, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'"
        ]
      ]
    },
    {
      "id": 531,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Jarrod Dixon' ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname IN ( 'Harlan', 'Jarrod Dixon' )",
          "SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Jarrod Dixon' ) THEN 'Jarrod Dixon' ELSE 'Harlan' END FROM users WHERE displayname IN ( 'Harlan', 'Jarrod Dixon' )",
          "SELECT CASE WHEN reputation = ( SELECT max(reputation) FROM users ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname IN ( 'Harlan', 'Jarrod Dixon' )",
          "SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Jarrod Dixon' ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname = 'Harlan' OR displayname = 'Jarrod Dixon'"
        ]
      ]
    },
    {
      "id": 532,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE strftime('%Y', creationdate) = '2011'",
          "SELECT displayname FROM users WHERE strftime('%Y', creationdate) = '2011';",
          "SELECT DISTINCT displayname FROM users WHERE strftime('%Y', creationdate) = '2011'",
          "SELECT displayname FROM users WHERE substr(cast(creationdate AS TEXT), 1, 4) = '2011';"
        ]
      ]
    },
    {
      "id": 533,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01'",
          "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01';",
          "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01 00:00:00'",
          "SELECT count(id) FROM users WHERE lastaccessdate >= '2014-09-01'"
        ]
      ]
    },
    {
      "id": 534,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE views = ( SELECT max(views) FROM users )",
          "SELECT displayname FROM users ORDER BY views DESC LIMIT 1",
          "SELECT displayname FROM users ORDER BY views DESC LIMIT 1;",
          "SELECT displayname FROM users WHERE id = ( SELECT userid FROM users ORDER BY views DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 535,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT users.id) FROM users users JOIN votes votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1;",
          "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1",
          "SELECT count(DISTINCT users.id) FROM users users WHERE users.upvotes > 100 AND users.downvotes > 1;",
          "SELECT count(*) FROM users WHERE upvotes > 100 AND downvotes > 1;"
        ]
      ]
    },
    {
      "id": 536,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE substr(cast(creationdate AS TEXT), 1, 4) > '2013' AND views > 10",
          "SELECT count(id) FROM users WHERE strftime('%Y', creationdate) > '2013' AND views > 10",
          "SELECT count(id) FROM users WHERE YEAR(creationdate) > 2013 AND views > 10",
          "SELECT count(id) FROM users WHERE substr(cast(creationdate AS TEXT), -4) > '2013' AND views > 10"
        ]
      ]
    },
    {
      "id": 537,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT count(id) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
          "SELECT count(id) FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'csgillespie');"
        ]
      ]
    },
    {
      "id": 538,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
          "SELECT title FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'csgillespie');",
          "SELECT title FROM posts WHERE owneruserid IN ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
          "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 539,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Eliciting priors from experts'",
          "SELECT ownerdisplayname FROM posts WHERE title = 'Eliciting priors from experts'",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment = 'Eliciting priors from experts'",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title LIKE 'Eliciting priors from experts'"
        ]
      ]
    },
    {
      "id": 540,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY viewcount DESC LIMIT 1",
          "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY viewcount DESC LIMIT 1;",
          "SELECT title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) ORDER BY viewcount DESC LIMIT 1",
          "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' AND viewcount = ( SELECT max(viewcount) FROM posts WHERE ownerdisplayname = 'csgillespie' )"
        ]
      ]
    },
    {
      "id": 541,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT ownerdisplayname FROM posts ORDER BY favoritecount DESC LIMIT 1",
          "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY posts.favoritecount DESC LIMIT 1",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 542,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT sum(comments.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'csgillespie'",
          "SELECT sum(posts.commentcount) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
          "SELECT sum(commentcount) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )"
        ]
      ]
    },
    {
      "id": 543,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT answercount FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY answercount DESC LIMIT 1",
          "SELECT answercount FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) ORDER BY answercount DESC LIMIT 1",
          "SELECT answercount FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY answercount DESC LIMIT 1;",
          "SELECT posts.answercount FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' ORDER BY posts.answercount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 544,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT lasteditordisplayname FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'",
          "SELECT lasteditoruserid FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'",
          "SELECT lasteditordisplayname FROM posts WHERE title LIKE 'Examples for teaching: Correlation does not mean causation'",
          "SELECT lasteditordisplayname FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'"
        ]
      ]
    },
    {
      "id": 545,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) AND parentid IS NULL",
          "SELECT count(*) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) AND parentid IS NULL",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' AND posts.parentid IS NULL",
          "SELECT count(id) FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'csgillespie') AND parentid IS NULL"
        ]
      ]
    },
    {
      "id": 546,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT DISTINCT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.closeddate IS NOT NULL",
          "SELECT ownerdisplayname FROM posts WHERE closeddate IS NOT NULL",
          "SELECT DISTINCT ownerdisplayname FROM posts WHERE closeddate IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 547,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score > 19",
          "SELECT count(DISTINCT posts.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20;"
        ]
      ]
    },
    {
      "id": 548,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts'",
          "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts'",
          "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title LIKE 'Eliciting priors from experts'",
          "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title LIKE 'Eliciting priors from experts'"
        ]
      ]
    },
    {
      "id": 549,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian'",
          "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'bayesian'",
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'bayesian'",
          "SELECT posts.body FROM tags tags JOIN posts posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian';"
        ]
      ]
    },
    {
      "id": 550,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.title, posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1",
          "SELECT posts.body FROM tags tags JOIN posts posts ON tags.excerptpostid = posts.id WHERE tags.count = (SELECT max(count) FROM tags);"
        ]
      ]
    },
    {
      "id": 551,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'csgillespie');",
          "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
          "SELECT count(badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
          "SELECT count(id) FROM badges WHERE userid IN ( SELECT id FROM users WHERE displayname = 'csgillespie' )"
        ]
      ]
    },
    {
      "id": 552,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'csgillespie');",
          "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'csgillespie';",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 553,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT badges.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';",
          "SELECT count(DISTINCT badges.name) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';",
          "SELECT count(DISTINCT badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011'",
          "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011'"
        ]
      ]
    },
    {
      "id": 554,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.id) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id, users.displayname ORDER BY count(badges.id) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 555,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT cast(sum(posts.score) AS REAL) / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
          "SELECT avg(score) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
          "SELECT avg(score) FROM posts WHERE ownerdisplayname = 'csgillespie'"
        ]
      ]
    },
    {
      "id": 556,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200",
          "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.views > 200;",
          "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.accountid) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200",
          "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.accountid) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.views > 200;"
        ]
      ]
    },
    {
      "id": 557,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 5",
          "SELECT (count(DISTINCT CASE WHEN users.age > 65 THEN posts.id END) * 100.0 / count(DISTINCT posts.id)) AS percentage FROM posts posts JOIN users users ON posts.owneruserid = users.id WHERE posts.score > 5;",
          "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 5",
          "SELECT (count(DISTINCT CASE WHEN users.age > 65 THEN posts.id END) * 100.0 / count(DISTINCT posts.id)) AS percentage FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 5"
        ]
      ]
    },
    {
      "id": 558,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(*) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19';",
          "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19';",
          "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19'",
          "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate LIKE '2010-07-19'"
        ]
      ]
    },
    {
      "id": 559,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1",
          "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;",
          "SELECT votes.creationdate FROM votes INNER JOIN tags ON votes.postid = tags.wikipostid GROUP BY votes.postid ORDER BY count(votes.id) DESC LIMIT 1",
          "SELECT votes.creationdate FROM votes INNER JOIN tags ON votes.postid = tags.wikipostid GROUP BY votes.creationdate ORDER BY count(votes.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 560,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM badges WHERE name = 'Revival'",
          "SELECT count(userid) FROM badges WHERE name = 'Revival'",
          "SELECT count(name) FROM badges WHERE name = 'Revival'",
          "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Revival';"
        ]
      ]
    },
    {
      "id": 561,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT title FROM posts WHERE id IN (SELECT postid FROM comments WHERE score = (SELECT max(score) FROM comments));",
          "SELECT title FROM posts WHERE id = (SELECT postid FROM comments WHERE score = (SELECT max(score) FROM comments));",
          "SELECT title FROM posts WHERE id = (SELECT postid FROM comments ORDER BY score DESC LIMIT 1);",
          "SELECT title FROM posts WHERE id IN (SELECT postid FROM comments WHERE score = (SELECT max(score) FROM comments WHERE score IS NOT NULL));"
        ]
      ]
    },
    {
      "id": 562,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT commentcount FROM posts WHERE viewcount = 1910",
          "SELECT comments.commentcount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910",
          "SELECT commentcount FROM posts WHERE id = 1910",
          "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910"
        ]
      ]
    },
    {
      "id": 563,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2014-04-23 20:29:39' AND comments.userid = 3025",
          "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate LIKE '2014-04-23 20:29:39' AND comments.userid = 3025",
          "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 3025 AND comments.creationdate LIKE '2014-04-23 20:29:39'",
          "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 3025 AND comments.creationdate = '2014-04-23 20:29:39'"
        ]
      ]
    },
    {
      "id": 564,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 AND posts.commentcount = 1",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.parentid = 107829 AND posts.commentcount = 1",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.parentid = 107829 AND comments.commentcount = 1",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 AND comments.commentcount = 1"
        ]
      ]
    },
    {
      "id": 565,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2013-07-12 09:08:18.0' AND comments.userid = 23853",
          "SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 23853 AND comments.creationdate = '2013-07-12 09:08:18.0'",
          "SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2013-07-12 09:08:18' AND comments.userid = 23853",
          "SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END AS RESULT FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2013-07-12 09:08:18.0' AND comments.userid = 23853"
        ]
      ]
    },
    {
      "id": 566,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT reputation FROM users WHERE id = (SELECT owneruserid FROM posts WHERE id = 65041);",
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 65041",
          "SELECT reputation FROM users WHERE id = ( SELECT owneruserid FROM posts WHERE id = 65041 )",
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = '65041'"
        ]
      ]
    },
    {
      "id": 567,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini'",
          "SELECT count(*) FROM posts WHERE ownerdisplayname = 'Tiago Pasqualini'",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Tiago Pasqualini'",
          "SELECT count(id) FROM posts WHERE ownerdisplayname = 'Tiago Pasqualini'"
        ]
      ]
    },
    {
      "id": 568,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = 6347",
          "SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = 6347",
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = '6347'",
          "SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = '6347'"
        ]
      ]
    },
    {
      "id": 569,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN posts.title LIKE '%data visualization%' THEN 1 ELSE 0 END) FROM posts INNER JOIN votes ON posts.id = votes.postid",
          "SELECT sum(CASE WHEN posts.title LIKE '%data visualization%' THEN 1 ELSE 0 END) FROM votes INNER JOIN posts ON votes.postid = posts.id",
          "SELECT sum(v.votes) FROM votes v JOIN posts p ON v.postid = p.id WHERE p.title LIKE '%data visualization%'",
          "SELECT sum(CASE WHEN posts.title LIKE '%data visualization%' THEN 1 ELSE 0 END) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data visualization%'"
        ]
      ]
    },
    {
      "id": 570,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms'",
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'DatEpicCoderGuyWhoPrograms');",
          "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'DatEpicCoderGuyWhoPrograms' )",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatepicCoderGuyWhoPrograms'"
        ]
      ]
    },
    {
      "id": 571,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(posts.id) AS REAL) / count(votes.id) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 24",
          "SELECT cast(count(posts.id) AS REAL) / count(votes.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN votes ON posts.id = votes.postid WHERE users.id = 24",
          "SELECT cast(count(posts.id) AS REAL) / count(votes.postid) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN votes ON posts.id = votes.postid WHERE users.id = 24",
          "SELECT cast(( SELECT count(id) FROM posts WHERE owneruserid = 24 ) AS REAL) / ( SELECT count(id) FROM votes WHERE userid = 24 ) AS ratio;"
        ]
      ]
    },
    {
      "id": 572,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
          "SELECT viewcount FROM posts WHERE title LIKE 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
          "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
          "SELECT viewcount FROM posts WHERE title LIKE 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/%'"
        ]
      ]
    },
    {
      "id": 573,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE score = 17",
          "SELECT text FROM comments WHERE score = 17;",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 17",
          "SELECT c.text FROM comments c JOIN posts p ON c.postid = p.id WHERE c.score = 17;"
        ]
      ]
    },
    {
      "id": 574,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com'",
          "SELECT id FROM users WHERE websiteurl = 'http://stackoverflow.com'",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.websiteurl = 'http://stackoverflow.com'",
          "SELECT * FROM users WHERE websiteurl = 'http://stackoverflow.com'"
        ]
      ]
    },
    {
      "id": 575,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'",
          "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'SilentGhost';",
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'SilentGhost');",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'"
        ]
      ]
    },
    {
      "id": 576,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'thank you user93!'",
          "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'thank you user93!'",
          "SELECT users.displayname FROM comments INNER JOIN users ON users.id = comments.userid WHERE comments.text = 'thank you user93!'",
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'thank you user93!'"
        ]
      ]
    },
    {
      "id": 577,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'A Lion'",
          "SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'A Lion'",
          "SELECT comments.text FROM comments INNER JOIN users ON users.id = comments.userid WHERE users.displayname = 'A Lion'",
          "SELECT c.text FROM comments c JOIN users u ON c.userid = u.id WHERE u.displayname = 'A Lion';"
        ]
      ]
    },
    {
      "id": 578,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
          "SELECT users.reputation, users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
          "SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
          "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title LIKE 'Understanding what Dassault iSight is doing?'"
        ]
      ]
    },
    {
      "id": 579,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?'",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'How does gentle boosting differ from AdaBoost?'",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title LIKE 'How does gentle boosting differ from AdaBoost?'",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title LIKE 'How does gentle boosting differ from AdaBoost?'"
        ]
      ]
    },
    {
      "id": 580,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10",
          "SELECT users.id FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10",
          "SELECT users.displayname FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10"
        ]
      ]
    },
    {
      "id": 581,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?'",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?'",
          "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?'",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title LIKE 'Open source tools for visualizing multi-dimensional data?'"
        ]
      ]
    },
    {
      "id": 582,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT title FROM posts WHERE lasteditoruserid = ( SELECT id FROM users WHERE displayname = 'Vebjorn Ljosa' )",
          "SELECT title FROM posts WHERE lasteditoruserid IN (SELECT id FROM users WHERE displayname = 'Vebjorn Ljosa');",
          "SELECT DISTINCT posts.title FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Vebjorn Ljosa'",
          "SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Vebjorn Ljosa'"
        ]
      ]
    },
    {
      "id": 583,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.score), users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'",
          "SELECT posts.score, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'",
          "SELECT users.websiteurl, sum(posts.score) FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'",
          "SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny'"
        ]
      ]
    },
    {
      "id": 584,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comment FROM posthistory WHERE postid = ( SELECT id FROM posts WHERE title = 'Why square the difference instead of taking the absolute value in standard deviation?' )",
          "SELECT comments.text FROM comments INNER JOIN posthistory ON comments.postid = posthistory.postid INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
          "SELECT comments.text FROM comments INNER JOIN posthistory ON comments.postid = posthistory.postid WHERE posthistory.text = 'Why square the difference instead of taking the absolute value in standard deviation?'",
          "SELECT DISTINCT comments.text FROM comments INNER JOIN posthistory ON comments.postid = posthistory.postid WHERE posthistory.text = 'Why square the difference instead of taking the absolute value in standard deviation?'"
        ]
      ]
    },
    {
      "id": 585,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(votes.bountyamount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%'",
          "SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%'",
          "SELECT sum(votes.bountyamount) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%'",
          "SELECT sum(v.bountyamount) FROM votes v JOIN posts p ON v.postid = p.id WHERE p.title LIKE '%data%' AND v.bountyamount IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 586,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE votes.bountyamount = 50 AND posts.title LIKE '%variance%'",
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON posts.id = votes.postid WHERE votes.bountyamount = 50 AND posts.title LIKE '%variance%'",
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%variance%' AND votes.bountyamount = 50",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE votes.bountyamount = 50 AND posts.title LIKE '%variance%'"
        ]
      ]
    },
    {
      "id": 587,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(posts.viewcount), posts.title, posthistory.text FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN posthistory ON posts.id = posthistory.postid WHERE tags.tagname = 'humor'",
          "SELECT posts.viewcount, posts.title, posthistory.text FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN posthistory ON posts.id = posthistory.postid WHERE tags.tagname = 'humor'",
          "SELECT avg(posts.viewcount), posts.title, posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN tags ON posts.id = tags.wikipostid WHERE tags.tagname = 'humor'",
          "SELECT avg(posts.viewcount), posts.title, posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN tags ON tags.wikipostid = posts.id WHERE tags.tagname = 'humor'"
        ]
      ]
    },
    {
      "id": 588,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM comments WHERE userid = 13",
          "SELECT count(id) FROM comments WHERE postid IN (SELECT id FROM posts WHERE owneruserid = 13);",
          "SELECT count(*) FROM comments WHERE userid = 13",
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 13"
        ]
      ]
    },
    {
      "id": 589,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id FROM users ORDER BY reputation DESC LIMIT 1",
          "SELECT id FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
          "SELECT id FROM users ORDER BY reputation DESC LIMIT 1;",
          "SELECT id FROM users WHERE reputation = (SELECT max(reputation) FROM users);"
        ]
      ]
    },
    {
      "id": 590,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id FROM users ORDER BY views ASC LIMIT 1",
          "SELECT id FROM users ORDER BY views LIMIT 1",
          "SELECT id FROM users ORDER BY views ASC LIMIT 1;",
          "SELECT id FROM users WHERE views = ( SELECT min(views) FROM users )"
        ]
      ]
    },
    {
      "id": 591,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter';",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter';",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter'",
          "SELECT count(DISTINCT users.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter';"
        ]
      ]
    },
    {
      "id": 592,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT userid) FROM badges WHERE userid IN (SELECT id FROM users) GROUP BY userid HAVING count(name) > 5;",
          "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id GROUP BY badges.userid HAVING count(badges.name) > 5;",
          "SELECT count(DISTINCT userid) FROM badges WHERE userid IN (SELECT userid FROM users) GROUP BY userid HAVING count(name) > 5;",
          "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Teacher' GROUP BY badges.userid HAVING count(badges.name) > 5;"
        ]
      ]
    },
    {
      "id": 593,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'New York' AND (badges.name = 'Teacher' OR badges.name = 'Supporter');",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'New York' AND (badges.name = 'Supporter' OR badges.name = 'Teacher');",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name IN ('Supporter', 'Teacher');",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name IN ('Teacher', 'Supporter');"
        ]
      ]
    },
    {
      "id": 594,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
          "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
          "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
          "SELECT users.reputation, users.id FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1"
        ]
      ]
    },
    {
      "id": 595,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.views >= 1000 GROUP BY users.id HAVING count(posthistory.postid) = 1",
          "SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.views >= 1000 GROUP BY users.id HAVING count(DISTINCT posthistory.postid) = 1",
          "SELECT posthistory.userid FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.views >= 1000 GROUP BY posthistory.postid HAVING count(posthistory.postid) = 1",
          "SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.views >= 1000 GROUP BY posthistory.postid HAVING count(posthistory.postid) = 1"
        ]
      ]
    },
    {
      "id": 596,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN posts ON users.id = posts.owneruserid GROUP BY users.id ORDER BY count(posts.id) DESC LIMIT 1",
          "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN ( SELECT userid, count(id) AS commentcount FROM comments GROUP BY userid ) AS t2 ON users.id = t2.userid ORDER BY t2.commentcount DESC LIMIT 1",
          "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN ( SELECT userid, count(id) AS commentcount FROM comments GROUP BY userid ORDER BY commentcount DESC LIMIT 1 ) AS t2 ON users.id = t2.userid",
          "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.id IN ( SELECT userid FROM comments GROUP BY userid HAVING count(id) = ( SELECT max(commentcount) FROM posts ) )"
        ]
      ]
    },
    {
      "id": 597,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher';",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher'",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher'",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' AND users.location = 'India'"
        ]
      ]
    },
    {
      "id": 598,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN strftime('%Y', badges.date) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN strftime('%Y', badges.date) = '2011' THEN 1 ELSE 0 END) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Student'",
          "SELECT cast((sum(CASE WHEN strftime('%Y', badges.date) = '2010' THEN 1 ELSE 0 END) - sum(CASE WHEN strftime('%Y', badges.date) = '2011' THEN 1 ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN strftime('%Y', badges.date) = '2010' THEN 1 ELSE 0 END) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Student'",
          "SELECT cast(sum(CASE WHEN strftime('%Y', badges.date) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name), cast(sum(CASE WHEN strftime('%Y', badges.date) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) FROM badges badges WHERE badges.name = 'Student';",
          "SELECT cast(sum(CASE WHEN strftime('%Y', badges.date) = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) - cast(sum(CASE WHEN strftime('%Y', badges.date) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) FROM badges badges WHERE badges.name = 'Student';"
        ]
      ]
    },
    {
      "id": 599,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;",
          "SELECT DISTINCT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720;",
          "SELECT DISTINCT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720",
          "SELECT posthistorytypeid, count(DISTINCT userid) AS numusers FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;"
        ]
      ]
    },
    {
      "id": 600,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT relatedpostid, viewcount FROM posts WHERE id = 61217",
          "SELECT postlinks.relatedpostid, posts.viewcount FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE postlinks.postid = 61217",
          "SELECT relatedpostid, viewcount FROM posts WHERE id IN (SELECT postid FROM postlinks WHERE relatedpostid = 61217);",
          "SELECT relatedpostid, viewcount FROM posts WHERE id = 61217;"
        ]
      ]
    },
    {
      "id": 601,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT score, linktypeid FROM posts WHERE id = 395",
          "SELECT score, linktypeid FROM posts WHERE id = 395;",
          "SELECT posts.score, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.postid = 395",
          "SELECT posts.score, postlinks.linktypeid FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id WHERE postlinks.postid = 395"
        ]
      ]
    },
    {
      "id": 602,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, owneruserid FROM posts WHERE score > 60",
          "SELECT id, owneruserid FROM posts WHERE score > 60;",
          "SELECT p.id, p.owneruserid FROM posts p WHERE p.score > 60;",
          "SELECT id, lasteditoruserid FROM posts WHERE score > 60"
        ]
      ]
    },
    {
      "id": 603,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(posts.favoritecount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.id = 686 AND strftime('%Y', posts.creaiondate) = '2011'",
          "SELECT sum(posts.favoritecount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creaiondate) = '2011' AND users.id = 686",
          "SELECT sum(posts.favoritecount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011' AND users.id = 686",
          "SELECT sum(posts.favoritecount) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE strftime('%Y', posts.creaiondate) = '2011' AND posthistory.userid = 686"
        ]
      ]
    },
    {
      "id": 604,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(users.upvotes), avg(users.age) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id GROUP BY users.id HAVING count(users.id) > 10",
          "SELECT cast(sum(users.upvotes) AS REAL) / count(users.id), cast(sum(users.age) AS REAL) / count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON posts.id = votes.postid GROUP BY users.id HAVING count(users.id) > 10",
          "SELECT cast(sum(users.upvotes) AS REAL) / count(users.id), cast(sum(users.age) AS REAL) / count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id GROUP BY users.id HAVING count(users.id) > 10",
          "SELECT cast(sum(users.upvotes) AS REAL) / count(users.id), cast(sum(users.age) AS REAL) / count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE posts.owneruserid = users.id GROUP BY users.id HAVING count(users.id) > 10"
        ]
      ]
    },
    {
      "id": 605,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT userid) FROM badges WHERE name = 'Announcer';",
          "SELECT count(userid) FROM badges WHERE name = 'Announcer'",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Announcer';",
          "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Announcer';"
        ]
      ]
    },
    {
      "id": 606,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0'",
          "SELECT name FROM badges WHERE date LIKE '2010-07-19 19:39:08%'",
          "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0';",
          "SELECT name FROM badges WHERE DATE = '2010-07-19 19:39:08.0'"
        ]
      ]
    },
    {
      "id": 607,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM comments WHERE score > 60",
          "SELECT count(score) FROM comments WHERE score > 60",
          "SELECT count(*) FROM comments WHERE score > 60",
          "SELECT count(postid) FROM comments WHERE score > 60"
        ]
      ]
    },
    {
      "id": 608,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47.0'",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14.0'",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14'",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47'"
        ]
      ]
    },
    {
      "id": 609,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE score = 10",
          "SELECT count(*) FROM posts WHERE score = 10",
          "SELECT count(postid) FROM posts WHERE score = 10",
          "SELECT count(score) FROM posts WHERE score = 10"
        ]
      ]
    },
    {
      "id": 610,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE reputation = (SELECT max(reputation) FROM users));",
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users ORDER BY reputation DESC LIMIT 1);",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 611,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'",
          "SELECT users.reputation FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0'",
          "SELECT users.reputation FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';",
          "SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.`date` = '2010-07-19 19:39:08'"
        ]
      ]
    },
    {
      "id": 612,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Pierre'",
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'Pierre');",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre'",
          "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'Pierre';"
        ]
      ]
    },
    {
      "id": 613,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY'",
          "SELECT DISTINCT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY'",
          "SELECT badges.date FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY';",
          "SELECT b.date FROM users u JOIN badges b ON u.id = b.userid WHERE u.location = 'Rochester, NY';"
        ]
      ]
    },
    {
      "id": 614,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN badges.name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid",
          "SELECT (count(DISTINCT users.id) * 100.0 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Teacher')) AS percentage FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Teacher';",
          "SELECT cast(count(DISTINCT users.id) AS REAL) * 100 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Teacher') FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher'",
          "SELECT cast(count(DISTINCT users.id) AS REAL) * 100 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Teacher') FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Teacher';"
        ]
      ]
    },
    {
      "id": 615,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN users.age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT cast(sum(CASE WHEN users.age >= 13 AND users.age <= 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT (count(DISTINCT users.id) * 100.0 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Organizer')) AS percentage FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;",
          "SELECT (count(DISTINCT users.id) * 100.0 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Organizer')) AS percentage FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.age BETWEEN 13 AND 18 AND badges.name = 'Organizer';"
        ]
      ]
    },
    {
      "id": 616,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56.0'",
          "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56'",
          "SELECT score FROM posts WHERE id IN (SELECT postid FROM comments WHERE creationdate = '2010-07-19 19:19:56.0');",
          "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creationdate = '2010-07-19 19:19:56.0'"
        ]
      ]
    },
    {
      "id": 617,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT text FROM comments WHERE postid = ( SELECT id FROM posts WHERE creaiondate = '2010-07-19 19:37:33' )",
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:37:33'",
          "SELECT text FROM comments WHERE postid = ( SELECT id FROM posts WHERE creationdate = '2010-07-19 19:37:33' )",
          "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:37:33'"
        ]
      ]
    },
    {
      "id": 618,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria'",
          "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria' AND badges.name = 'Student'",
          "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria' AND badges.name = 'Teacher'",
          "SELECT users.age FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';"
        ]
      ]
    },
    {
      "id": 619,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.age >= 19 AND users.age <= 65 AND badges.name = 'Supporter';",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65;",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65"
        ]
      ]
    },
    {
      "id": 620,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'",
          "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0'",
          "SELECT users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.`date` = '2010-07-19 19:39:08.0'",
          "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.`date` = '2010-07-19 19:39:08.0'"
        ]
      ]
    },
    {
      "id": 621,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT min(reputation) FROM users )",
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE reputation = (SELECT min(reputation) FROM users));",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT min(reputation) FROM users )",
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation LIMIT 1"
        ]
      ]
    },
    {
      "id": 622,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie'",
          "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'Sharpie';",
          "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'Sharpie');",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie'"
        ]
      ]
    },
    {
      "id": 623,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter';",
          "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65;",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65"
        ]
      ]
    },
    {
      "id": 624,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE id = 30",
          "SELECT name FROM users WHERE id = 30",
          "SELECT DISTINCT displayname FROM users WHERE id = 30",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.id = 30"
        ]
      ]
    },
    {
      "id": 625,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE LOCATION = 'New York'",
          "SELECT count(id) FROM users WHERE location = 'New York'",
          "SELECT count(*) FROM users WHERE LOCATION = 'New York'",
          "SELECT count(id) FROM users WHERE LOCATION LIKE 'New York'"
        ]
      ]
    },
    {
      "id": 626,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM votes WHERE strftime('%Y', creationdate) = '2010'",
          "SELECT count(id) FROM votes WHERE strftime('%Y', creationdate) = '2010';",
          "SELECT count(*) FROM votes WHERE strftime('%Y', creationdate) = '2010';",
          "SELECT count(id) FROM votes WHERE substr(creationdate, 1, 4) = '2010';"
        ]
      ]
    },
    {
      "id": 627,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE age >= 19 AND age <= 65",
          "SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65",
          "SELECT count(id) FROM users WHERE age > 19 AND age < 65",
          "SELECT count(id) FROM users WHERE age > 19 AND age < 66"
        ]
      ]
    },
    {
      "id": 628,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE views = ( SELECT max(views) FROM users )",
          "SELECT displayname FROM users ORDER BY views DESC LIMIT 1",
          "SELECT id FROM users WHERE views = ( SELECT max(views) FROM users )",
          "SELECT id FROM users ORDER BY views DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 629,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes",
          "SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes;",
          "SELECT (SELECT count(*) FROM votes WHERE strftime('%Y', creationdate) = '2010') * 1.0 / (SELECT count(*) FROM votes WHERE strftime('%Y', creationdate) = '2011') AS ratio;",
          "SELECT cast(sum(CASE WHEN strftime('%Y', votes.creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', votes.creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes"
        ]
      ]
    },
    {
      "id": 630,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON tags.wikipostid = posts.id WHERE users.displayname = 'John Salvatier'",
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE users.displayname = 'John Salvatier'",
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.tags LIKE '%' || tags.tagname || '%' WHERE users.displayname = 'John Salvatier'",
          "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'John Salvatier'"
        ]
      ]
    },
    {
      "id": 631,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Daniel Vassallo'",
          "SELECT count(id) FROM posts WHERE ownerdisplayname = 'Daniel Vassallo'",
          "SELECT count(*) FROM posts WHERE ownerdisplayname = 'Daniel Vassallo'",
          "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Daniel Vassallo'"
        ]
      ]
    },
    {
      "id": 632,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN users.displayname = 'Harlan' THEN 1 ELSE 0 END) FROM users INNER JOIN votes ON users.id = votes.userid",
          "SELECT count(votes.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'Harlan'",
          "SELECT sum(CASE WHEN users.displayname = 'Harlan' THEN 1 ELSE 0 END) FROM votes INNER JOIN users ON votes.userid = users.id",
          "SELECT count(votes.userid) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'Harlan'"
        ]
      ]
    },
    {
      "id": 633,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id FROM posts WHERE ownerdisplayname = 'slashnick' ORDER BY answercount DESC LIMIT 1",
          "SELECT posts.id FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1",
          "SELECT p.id FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'slashnick' ORDER BY p.answercount DESC LIMIT 1;",
          "SELECT id FROM posts WHERE ownerdisplayname = 'slashnick' ORDER BY answercount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 634,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT CASE WHEN sum(CASE WHEN users.displayname = 'Harvey Motulsky' THEN posts.viewcount ELSE 0 END) > sum(CASE WHEN users.displayname = 'Noah Snyder' THEN posts.viewcount ELSE 0 END) THEN 'Harvey Motulsky' ELSE 'Noah Snyder' END FROM users INNER JOIN posts ON users.id = posts.owneruserid",
          "SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT CASE WHEN sum(CASE WHEN users.displayname = 'Harvey Motulsky' THEN posts.viewcount ELSE 0 END) > sum(CASE WHEN users.displayname = 'Noah Snyder' THEN posts.viewcount ELSE 0 END) THEN 'Harvey Motulsky' ELSE 'Noah Snyder' END FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname IN ('Harvey Motulsky', 'Noah Snyder')",
          "SELECT CASE WHEN sum(CASE WHEN users.displayname = 'Harvey Motulsky' THEN posts.viewcount ELSE 0 END) > sum(CASE WHEN users.displayname = 'Noah Snyder' THEN posts.viewcount ELSE 0 END) THEN 'Harvey Motulsky' ELSE 'Noah Snyder' END AS winner FROM users INNER JOIN posts ON users.id = posts.owneruserid"
        ]
      ]
    },
    {
      "id": 635,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN votes ON posts.id = votes.postid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4",
          "SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON users.id = votes.userid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4"
        ]
      ]
    },
    {
      "id": 636,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60",
          "SELECT count(*) FROM comments WHERE postid IN (SELECT id FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Neil McGuigan')) AND score < 60;",
          "SELECT count(comments.id) FROM users INNER JOIN comments ON users.id = comments.userid INNER JOIN posts ON comments.postid = posts.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60",
          "SELECT count(comments.id) FROM comments INNER JOIN users ON comments.userid = users.id INNER JOIN posts ON comments.postid = posts.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60"
        ]
      ]
    },
    {
      "id": 637,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.tags LIKE '%' || tags.tagname || '%' WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0",
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON tags.wikipostid = posts.id WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0",
          "SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0",
          "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0"
        ]
      ]
    },
    {
      "id": 638,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer'",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
          "SELECT users.displayname FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Organizer';"
        ]
      ]
    },
    {
      "id": 639,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN tags.tagname = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM posts INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community'",
          "SELECT cast(sum(CASE WHEN tags.tagname = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community'",
          "SELECT cast(sum(CASE WHEN tags.tagname = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / count(tags.tagname) FROM posts INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community'",
          "SELECT cast(sum(CASE WHEN tags.tagname = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / count(tags.tagname), cast(sum(CASE WHEN users.displayname = 'Community' THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.displayname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id"
        ]
      ]
    },
    {
      "id": 640,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS difference FROM users INNER JOIN posts ON users.id = posts.owneruserid",
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) FROM users INNER JOIN posts ON users.id = posts.owneruserid",
          "SELECT (SELECT sum(viewcount) FROM posts WHERE ownerdisplayname = 'Mornington') - (SELECT sum(viewcount) FROM posts WHERE ownerdisplayname = 'Amos') AS difference;",
          "SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS viewcountdifference FROM users INNER JOIN posts ON users.id = posts.owneruserid"
        ]
      ]
    },
    {
      "id": 641,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2014' AND badges.name = 'Commentator';",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Commentator' AND strftime('%Y', badges.date) = '2014';",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2014' AND badges.name = 'Commentator'",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.creationdate BETWEEN '2014-01-01' AND '2014-12-31' AND badges.name = 'Commentator';"
        ]
      ]
    },
    {
      "id": 642,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE strftime('%Y-%m-%d', creationdate) = '2010-07-21'",
          "SELECT count(id) FROM posts WHERE strftime('%Y-%m-%d', creaiondate) = '2010-07-21'",
          "SELECT count(id) FROM posts WHERE strftime('%Y-%m-%d', creationdate) = '2010-07-21';",
          "SELECT count(id) FROM posts WHERE strftime('%Y-%m-%d', creaiondate) = '2010-07-21';"
        ]
      ]
    },
    {
      "id": 643,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname, age FROM users WHERE views = ( SELECT max(views) FROM users )",
          "SELECT displayname, age FROM users ORDER BY views DESC LIMIT 1",
          "SELECT id, displayname, age FROM users WHERE views = ( SELECT max(views) FROM users )",
          "SELECT users.displayname, users.age FROM users WHERE users.views = ( SELECT max(views) FROM users )"
        ]
      ]
    },
    {
      "id": 644,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images'",
          "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images';",
          "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title LIKE 'Detecting a given face in a database of facial images'",
          "SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Detecting a given face in a database of facial images'"
        ]
      ]
    },
    {
      "id": 645,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM comments WHERE userid = 13 AND score < 60",
          "SELECT count(*) FROM comments WHERE userid = 13 AND score < 60",
          "SELECT count(*) FROM comments WHERE score < 60 AND userid = 13",
          "SELECT count(*) FROM comments WHERE score < 60 AND userid = 13;"
        ]
      ]
    },
    {
      "id": 646,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT DISTINCT posts.title, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON comments.userid = users.id WHERE comments.score > 60",
          "SELECT DISTINCT posts.title, users.displayname FROM users INNER JOIN comments ON users.id = comments.userid INNER JOIN posts ON comments.postid = posts.id WHERE comments.score > 60",
          "SELECT DISTINCT posts.title, users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON users.id = comments.userid WHERE comments.score > 60",
          "SELECT DISTINCT posts.title, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON users.id = comments.userid WHERE comments.score > 60"
        ]
      ]
    },
    {
      "id": 647,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011'",
          "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011'",
          "SELECT DISTINCT badges.name FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011';",
          "SELECT badges.name FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011';"
        ]
      ]
    },
    {
      "id": 648,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150",
          "SELECT DISTINCT users.displayname, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150",
          "SELECT users.displayname, users.websiteurl FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150",
          "SELECT DISTINCT users.displayname, users.websiteurl FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150"
        ]
      ]
    },
    {
      "id": 649,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.comment, posthistory.creationdate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?'",
          "SELECT count(posthistory.postid), posthistory.creationdate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?'",
          "SELECT count(posthistory.postid), max(posthistory.creationdate) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?'",
          "SELECT count(posthistory.postid), posthistory.creationdate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY posthistory.postid, posthistory.creationdate"
        ]
      ]
    },
    {
      "id": 650,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.lastaccessdate, users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outliers'",
          "SELECT users.lastaccessdate, users.location FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Outliers'",
          "SELECT users.lastaccessdate, users.location FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Outliers';",
          "SELECT users.lastaccessdate, users.location FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Outliers';"
        ]
      ]
    },
    {
      "id": 651,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.relatedpostid = ( SELECT id FROM posts WHERE title = 'How to tell if something happened in a data set which monitors a value over time' )",
          "SELECT title FROM posts WHERE id IN (SELECT relatedpostid FROM postlinks WHERE postid = (SELECT id FROM posts WHERE title = 'How to tell if something happened in a data set which monitors a value over time'));",
          "SELECT DISTINCT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.relatedpostid = ( SELECT id FROM posts WHERE title = 'How to tell if something happened in a data set which monitors a value over time' )",
          "SELECT title FROM posts WHERE id IN (SELECT postid FROM postlinks WHERE relatedpostid = (SELECT id FROM posts WHERE title = 'How to tell if something happened in a data set which monitors a value over time'));"
        ]
      ]
    },
    {
      "id": 652,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posthistory.postid, badges.name FROM users INNER JOIN posthistory ON users.id = posthistory.userid INNER JOIN badges ON posthistory.userid = badges.userid WHERE users.displayname = 'Samuel' AND strftime('%Y', posthistory.creationdate) = '2013'",
          "SELECT posthistory.postid, badges.name FROM users INNER JOIN posthistory ON users.id = posthistory.userid INNER JOIN badges ON badges.userid = users.id WHERE users.displayname = 'Samuel' AND strftime('%Y', posthistory.creationdate) = '2013'",
          "SELECT posthistory.postid, badges.name FROM users INNER JOIN posthistory ON users.id = posthistory.userid INNER JOIN badges ON posthistory.postid = badges.id WHERE users.displayname = 'Samuel' AND strftime('%Y', posthistory.creationdate) = '2013'",
          "SELECT posthistory.postid, badges.name FROM users INNER JOIN posthistory ON users.id = posthistory.userid INNER JOIN badges ON posthistory.postid = badges.userid WHERE users.displayname = 'Samuel' AND strftime('%Y', posthistory.creationdate) = '2013'"
        ]
      ]
    },
    {
      "id": 653,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1",
          "SELECT ownerdisplayname FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts )",
          "SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1;",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.viewcount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 654,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing'",
          "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE tags.tagname = 'hypothesis-testing'",
          "SELECT users.displayname, users.location FROM users INNER JOIN tags ON users.id = tags.owneruserid WHERE tags.tagname = 'hypothesis-testing'",
          "SELECT users.displayname, users.location FROM users INNER JOIN tags ON users.id = tags.id WHERE tags.tagname = 'hypothesis-testing'"
        ]
      ]
    },
    {
      "id": 655,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?'",
          "SELECT posts.title, postlinks.linktypeid FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE posts.title = 'What are principal component scores?'",
          "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title LIKE 'What are principal component scores?'",
          "SELECT p.title, pl.linktypeid FROM posts p JOIN postlinks pl ON p.id = pl.postid WHERE p.title = 'What are principal component scores?';"
        ]
      ]
    },
    {
      "id": 656,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.parentid IS NOT NULL ORDER BY posthistory.score DESC LIMIT 1",
          "SELECT DISTINCT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.parentid IS NOT NULL ORDER BY posthistory.score DESC LIMIT 1",
          "SELECT ownerdisplayname FROM posts WHERE parentid IS NOT NULL AND score = ( SELECT max(score) FROM posts )",
          "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.score = ( SELECT max(score) FROM posthistory ) AND posts.parentid IS NOT NULL"
        ]
      ]
    },
    {
      "id": 657,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.websiteurl FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1",
          "SELECT users.displayname, users.websiteurl FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1",
          "SELECT u.displayname, u.websiteurl FROM users u JOIN votes v ON u.id = v.userid WHERE v.votetypeid = 8 AND v.bountyamount = (SELECT max(bountyamount) FROM votes WHERE votetypeid = 8);",
          "SELECT u.displayname, u.websiteurl FROM users u JOIN votes v ON u.id = v.userid WHERE v.votetypeid = 8 ORDER BY v.bountyamount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 658,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5",
          "SELECT title FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts ) LIMIT 5",
          "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5;",
          "SELECT title FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts ) ORDER BY viewcount DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 659,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM tags WHERE wikipostid IN ( SELECT id FROM posts WHERE commentcount BETWEEN 5000 AND 7000 )",
          "SELECT count(id) FROM tags WHERE wikipostid IN (SELECT id FROM posts WHERE commentcount BETWEEN 5000 AND 7000);",
          "SELECT count(id) FROM tags WHERE wikipostid IN (SELECT id FROM posts WHERE id BETWEEN 5000 AND 7000);",
          "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE posts.commentcount BETWEEN 5000 AND 7000"
        ]
      ]
    },
    {
      "id": 660,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1",
          "SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1;",
          "SELECT owneruserid FROM posts WHERE favoritecount = ( SELECT max(favoritecount) FROM posts )",
          "SELECT owneruserid FROM posts WHERE favoritecount = (SELECT max(favoritecount) FROM posts);"
        ]
      ]
    },
    {
      "id": 661,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT age FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
          "SELECT age FROM users ORDER BY reputation DESC LIMIT 1",
          "SELECT age FROM users ORDER BY reputation DESC LIMIT 1;",
          "SELECT age FROM users WHERE reputation = (SELECT max(reputation) FROM users);"
        ]
      ]
    },
    {
      "id": 662,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50",
          "SELECT count(DISTINCT votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50",
          "SELECT count(DISTINCT votes.postid) FROM votes votes JOIN posts posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50;",
          "SELECT count(votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE votes.creationdate LIKE '2011%' AND votes.bountyamount = 50"
        ]
      ]
    },
    {
      "id": 663,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id FROM users ORDER BY age LIMIT 1",
          "SELECT id FROM users ORDER BY age ASC LIMIT 1",
          "SELECT id FROM users WHERE age = ( SELECT min(age) FROM users )",
          "SELECT id FROM users ORDER BY age LIMIT 1;"
        ]
      ]
    },
    {
      "id": 664,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%'",
          "SELECT sum(posts.score) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.lasactivitydate LIKE '2010-07-19%'",
          "SELECT sum(posts.score) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE strftime('%Y-%m-%d', posts.lasactivitydate) = '2010-07-19'",
          "SELECT sum(posts.score) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.creationdate LIKE '2010-07-19%'"
        ]
      ]
    },
    {
      "id": 665,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / 12 FROM postlinks WHERE postid IN (SELECT id FROM posts WHERE answercount <= 2);",
          "SELECT cast(count(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE NULL END) AS REAL) / 12 FROM postlinks WHERE postid IN (SELECT id FROM posts WHERE answercount <= 2);",
          "SELECT cast(count(CASE WHEN strftime('%Y', posts.creationdate) = '2010' THEN 1 ELSE NULL END) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2",
          "SELECT cast(count(CASE WHEN strftime('%Y', creationdate) = '2010' AND answercount <= 2 THEN 1 ELSE NULL END) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid"
        ]
      ]
    },
    {
      "id": 666,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT postid FROM votes WHERE userid = 1465 ORDER BY bountyamount DESC LIMIT 1",
          "SELECT postid FROM votes WHERE userid = 1465 ORDER BY bountyamount DESC LIMIT 1;",
          "SELECT postid FROM votes WHERE userid = 1465 ORDER BY votedate DESC LIMIT 1",
          "SELECT postid FROM votes WHERE userid = 1465 ORDER BY votedate DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 667,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT title FROM posts WHERE id IN (SELECT postid FROM postlinks WHERE creationdate = (SELECT min(creationdate) FROM postlinks));",
          "SELECT title FROM posts WHERE id IN (SELECT postid FROM postlinks ORDER BY creationdate ASC LIMIT 1);",
          "SELECT title FROM posts WHERE id = (SELECT postid FROM postlinks ORDER BY creationdate ASC LIMIT 1);",
          "SELECT title FROM posts WHERE id IN (SELECT postid FROM postlinks WHERE creationdate = (SELECT min(creationdate) FROM postlinks WHERE creationdate IS NOT NULL));"
        ]
      ]
    },
    {
      "id": 668,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.name) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id, users.displayname ORDER BY count(badges.name) DESC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 669,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT votes.creationdate FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl' ORDER BY votes.creationdate ASC LIMIT 1",
          "SELECT votes.creationdate FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl' ORDER BY votes.creationdate LIMIT 1",
          "SELECT votes.creationdate FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl' ORDER BY votes.creationdate ASC LIMIT 1",
          "SELECT votes.creationdate FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl' ORDER BY votes.creationdate LIMIT 1"
        ]
      ]
    },
    {
      "id": 670,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT min(posts.creaiondate) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.age LIMIT 1",
          "SELECT min(posts.creationdate) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.age LIMIT 1",
          "SELECT min(posts.creaiondate) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.age ASC LIMIT 1",
          "SELECT min(creationdate) FROM posts WHERE owneruserid = (SELECT id FROM users ORDER BY age LIMIT 1);"
        ]
      ]
    },
    {
      "id": 671,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1",
          "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1",
          "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1"
        ]
      ]
    },
    {
      "id": 672,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT users.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4",
          "SELECT count(DISTINCT users.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid JOIN votes votes ON posts.id = votes.postid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;",
          "SELECT count(DISTINCT users.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid JOIN posthistory posthistory ON posts.id = posthistory.postid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;"
        ]
      ]
    },
    {
      "id": 673,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(v.postid) FROM votes v JOIN users u ON v.userid = u.id WHERE u.age = (SELECT max(age) FROM users);",
          "SELECT avg(v.postid) FROM users u JOIN votes v ON u.id = v.userid WHERE u.age = (SELECT max(age) FROM users);",
          "SELECT cast(sum(v.postid) AS REAL) / count(v.userid) FROM votes v JOIN users u ON v.userid = u.id WHERE u.age = (SELECT max(age) FROM users);",
          "SELECT avg(v.postid) FROM users u JOIN votes v ON u.id = v.userid WHERE u.age = (SELECT max(age) FROM users)"
        ]
      ]
    },
    {
      "id": 674,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1",
          "SELECT displayname FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
          "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1;",
          "SELECT displayname FROM users WHERE reputation = (SELECT max(reputation) FROM users);"
        ]
      ]
    },
    {
      "id": 675,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000",
          "SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000",
          "SELECT count(accountid) FROM users WHERE reputation > 2000 AND views > 1000",
          "SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000;"
        ]
      ]
    },
    {
      "id": 676,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT displayname FROM users WHERE age >= 19 AND age <= 65",
          "SELECT displayname FROM users WHERE age BETWEEN 19 AND 65",
          "SELECT displayname FROM users WHERE age >= 19 AND age <= 65;",
          "SELECT displayname FROM users WHERE age > 18 AND age < 66"
        ]
      ]
    },
    {
      "id": 677,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creationdate) = '2010'",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creaiondate) = '2010'",
          "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', users.creationdate) = '2010' AND users.displayname = 'Jay Stevens'",
          "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creationdate) = '2010'"
        ]
      ]
    },
    {
      "id": 678,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1",
          "SELECT posts.id, posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1",
          "SELECT p.id, p.title FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Harvey Motulsky' ORDER BY p.viewcount DESC LIMIT 1;",
          "SELECT id, title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'Harvey Motulsky' ) ORDER BY viewcount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 679,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, title FROM posts WHERE score = ( SELECT max(score) FROM posts )",
          "SELECT id, title FROM posts ORDER BY score DESC LIMIT 1",
          "SELECT id, title FROM posts WHERE score = (SELECT max(score) FROM posts);",
          "SELECT id, title FROM posts ORDER BY score DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 680,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'",
          "SELECT cast(sum(posts.score) AS REAL) / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'",
          "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner'",
          "SELECT cast(sum(posts.score) AS REAL) / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'"
        ]
      ]
    },
    {
      "id": 681,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND strftime('%Y', posts.creationdate) = '2011'",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011' AND posts.viewcount > 20000",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND strftime('%Y', posts.creaiondate) = '2011'",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creaiondate) = '2011' AND posts.viewcount > 20000"
        ]
      ]
    },
    {
      "id": 682,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creaiondate) = '2010' ORDER BY favoritecount DESC LIMIT 1",
          "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creationdate) = '2010' ORDER BY favoritecount DESC LIMIT 1",
          "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creaiondate) = '2010' ORDER BY favoritecount DESC LIMIT 1;",
          "SELECT id, ownerdisplayname FROM posts ORDER BY favoritecount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 683,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011'",
          "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', users.creationdate) = '2011'",
          "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011'",
          "SELECT cast(count(CASE WHEN users.reputation > 1000 THEN 1 ELSE NULL END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011'"
        ]
      ]
    },
    {
      "id": 684,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM users",
          "SELECT cast(count(CASE WHEN age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100 / count(id) FROM users",
          "SELECT cast(count(CASE WHEN age BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / count(id) FROM users",
          "SELECT cast(count(CASE WHEN age >= 13 AND age <= 18 THEN 1 ELSE NULL END) AS REAL) * 100 / count(id) FROM users"
        ]
      ]
    },
    {
      "id": 685,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT posts.viewcount, users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.text = 'Computer Game Datasets'",
          "SELECT posts.viewcount, users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.text = 'Computer Game Datasets'",
          "SELECT posts.viewcount, users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id INNER JOIN posthistory ON posthistory.postid = posts.id WHERE posthistory.text = 'Computer Game Datasets'",
          "SELECT posthistory.text, users.displayname FROM users INNER JOIN posthistory ON users.id = posthistory.userid INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.text = 'Computer Game Datasets'"
        ]
      ]
    },
    {
      "id": 686,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
          "SELECT count(*) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
          "SELECT count(viewcount) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
          "SELECT count(id) FROM posts WHERE viewcount > (SELECT avg(viewcount) FROM posts);"
        ]
      ]
    },
    {
      "id": 687,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.score = ( SELECT max(score) FROM posts )",
          "SELECT count(*) FROM comments WHERE postid = ( SELECT id FROM posts ORDER BY score DESC LIMIT 1 )",
          "SELECT count(*) FROM comments WHERE postid = (SELECT id FROM posts ORDER BY score DESC LIMIT 1);",
          "SELECT count(id) FROM comments WHERE postid = ( SELECT id FROM posts ORDER BY score DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 688,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE viewcount > 35000 AND commentcount = 0",
          "SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0;",
          "SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0",
          "SELECT count(id) FROM posts WHERE viewcount > 35000 AND commentcount = 0;"
        ]
      ]
    },
    {
      "id": 689,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1",
          "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1",
          "SELECT users.displayname, users.location FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1",
          "SELECT posts.lasteditordisplayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 690,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1",
          "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1",
          "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'Emmett' ORDER BY b.date DESC LIMIT 1;",
          "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'Emmett' AND b.date = (SELECT max(date) FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'Emmett'));"
        ]
      ]
    },
    {
      "id": 691,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM users WHERE age >= 19 AND age <= 65 AND upvotes > 5000",
          "SELECT count(id) FROM users WHERE age > 19 AND age < 65 AND upvotes > 5000",
          "SELECT count(DISTINCT users.id) FROM users users JOIN votes votes ON users.id = votes.userid WHERE users.age >= 19 AND users.age <= 65 AND users.upvotes > 5000;",
          "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.age >= 19 AND users.age <= 65 AND users.upvotes > 5000"
        ]
      ]
    },
    {
      "id": 692,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT badges.date - users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
          "SELECT strftime('%J', badges.date) - strftime('%J', users.creationdate), users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
          "SELECT strftime('%J', badges.date) - strftime('%J', users.creationdate) AS days , users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
          "SELECT strftime('%J', badges.date) - strftime('%J', users.creationdate) AS days FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'"
        ]
      ]
    },
    {
      "id": 693,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(posts.id), count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1",
          "SELECT count(posts.id) AS postcount, count(comments.id) AS commentcount FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1",
          "SELECT count(posts.id) AS post_count, count(comments.id) AS comment_count FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1",
          "SELECT count(DISTINCT posts.id) AS postcount, count(DISTINCT comments.id) AS commentcount FROM users users JOIN posts posts ON users.id = posts.owneruserid JOIN comments comments ON users.id = comments.userid WHERE users.creationdate = (SELECT max(creationdate) FROM users);"
        ]
      ]
    },
    {
      "id": 694,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON comments.userid = users.id WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10",
          "SELECT comments.text, users.displayname FROM comments INNER JOIN users ON comments.userid = users.id INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10",
          "SELECT comments.text, comments.userdisplayname FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10",
          "SELECT comments.text, users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON users.id = comments.userid WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 695,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Citizen Patrol';",
          "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Citizen Patrol';",
          "SELECT count(DISTINCT userid) FROM badges WHERE name = 'Citizen Patrol';",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Citizen Patrol'"
        ]
      ]
    },
    {
      "id": 696,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(tags.wikipostid) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'",
          "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'",
          "SELECT count(tags.wikipostid) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname LIKE 'careers'",
          "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'"
        ]
      ]
    },
    {
      "id": 697,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon'",
          "SELECT users.reputation, users.views FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jarrod Dixon'",
          "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon';",
          "SELECT reputation, viewcount FROM users WHERE displayname = 'Jarrod Dixon'"
        ]
      ]
    },
    {
      "id": 698,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 1 ELSE 0 END), sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 0 ELSE 1 END) FROM posts INNER JOIN comments ON posts.id = comments.postid",
          "SELECT sum(comments.score), sum(posts.answercount) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data'",
          "SELECT sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 1 ELSE 0 END), sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 0 ELSE 1 END) FROM comments INNER JOIN posts ON comments.postid = posts.id",
          "SELECT sum(comments.score), sum(posts.answercount) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title LIKE 'Clustering 1D data'"
        ]
      ]
    },
    {
      "id": 699,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT creationdate FROM users WHERE displayname = 'IrishStat'",
          "SELECT users.creationdate FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.userdisplayname = 'IrishStat'",
          "SELECT users.creationdate FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'IrishStat'",
          "SELECT users.creationdate FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.displayname = 'IrishStat'"
        ]
      ]
    },
    {
      "id": 700,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM votes WHERE bountyamount >= 30",
          "SELECT count(postid) FROM votes WHERE bountyamount >= 30",
          "SELECT count(id) FROM votes WHERE bountyamount > 30",
          "SELECT count(postid) FROM votes WHERE bountyamount > 30"
        ]
      ]
    },
    {
      "id": 701,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN posts.score > 50 THEN 1 ELSE NULL END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
          "SELECT cast(count(CASE WHEN posts.score > 50 THEN 1 ELSE NULL END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.reputation DESC LIMIT 1",
          "SELECT cast(sum(CASE WHEN posts.score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
          "SELECT cast(sum(CASE WHEN posts.score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.reputation = ( SELECT max(reputation) FROM users )"
        ]
      ]
    },
    {
      "id": 702,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(id) FROM posts WHERE score < 20",
          "SELECT count(*) FROM posts WHERE score < 20",
          "SELECT count(postid) FROM posts WHERE score < 20",
          "SELECT count(score) FROM posts WHERE score < 20"
        ]
      ]
    },
    {
      "id": 703,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 AND tags.count <= 20",
          "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 AND tags.count <= 20",
          "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 GROUP BY tags.tagname HAVING count(tags.tagname) <= 20",
          "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 GROUP BY tags.id HAVING count(tags.id) <= 20"
        ]
      ]
    },
    {
      "id": 704,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT excerptpostid, wikipostid FROM tags WHERE tagname = 'sample'",
          "SELECT excerptpostid, wikipostid FROM tags WHERE tagname LIKE 'sample'",
          "SELECT tags.excerptpostid, tags.wikipostid FROM tags WHERE tags.tagname = 'sample'",
          "SELECT tags.excerptpostid, tags.wikipostid FROM tags INNER JOIN postlinks ON tags.id = postlinks.id WHERE tags.tagname = 'sample'"
        ]
      ]
    },
    {
      "id": 705,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)'",
          "SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'fine, you win :)'",
          "SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'fine, you win :)'",
          "SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON users.id = comments.userid WHERE comments.text = 'fine, you win :)'"
        ]
      ]
    },
    {
      "id": 706,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title LIKE '%linear regression%'",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title LIKE '%linear regression%'",
          "SELECT DISTINCT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title LIKE '%linear regression%'",
          "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE title LIKE '%linear regression%');"
        ]
      ]
    },
    {
      "id": 707,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1",
          "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1",
          "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150) AND score = (SELECT max(score) FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150));",
          "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150) ORDER BY score DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 708,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE '%http://%'",
          "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE 'http://%'",
          "SELECT comments.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE '%http://%'",
          "SELECT comments.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE 'http://%'"
        ]
      ]
    },
    {
      "id": 709,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT comments.postid) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5",
          "SELECT count(DISTINCT comments.postid) FROM comments comments JOIN posts posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;",
          "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = 0 AND posts.viewcount < 5",
          "SELECT count(DISTINCT p.id) FROM posts p JOIN comments c ON p.id = c.postid WHERE p.viewcount < 5 AND c.score = 0;"
        ]
      ]
    },
    {
      "id": 710,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0",
          "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0",
          "SELECT count(DISTINCT comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0",
          "SELECT count(*) FROM (SELECT postid FROM posts WHERE commentcount = 1 AND score = 0) AS t2;"
        ]
      ]
    },
    {
      "id": 711,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT users.accountid) FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.age = 40 AND comments.score = 0",
          "SELECT count(DISTINCT users.id) FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.age = 40 AND comments.score = 0",
          "SELECT count(DISTINCT users.accountid) FROM users users JOIN comments comments ON users.id = comments.userid WHERE users.age = 40 AND comments.score = 0;",
          "SELECT count(DISTINCT users.accountid) FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score = 0 AND users.age = 40"
        ]
      ]
    },
    {
      "id": 712,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT p.id, count(c.id) AS commentcount FROM posts p LEFT JOIN comments c ON p.id = c.postid WHERE p.title = 'Group differences on a five point Likert item' GROUP BY p.id;",
          "SELECT p.id, count(c.id) FROM posts p LEFT JOIN comments c ON p.id = c.postid WHERE p.title = 'Group differences on a five point Likert item' GROUP BY p.id;",
          "SELECT posts.id, count(comments.id) AS commentcount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item' GROUP BY posts.id",
          "SELECT ph.postid, count(c.id) AS commentcount FROM posthistory ph INNER JOIN posts p ON ph.postid = p.id LEFT JOIN comments c ON ph.postid = c.postid WHERE p.title = 'Group differences on a five point Likert item' GROUP BY ph.postid;"
        ]
      ]
    },
    {
      "id": 713,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'R is also lazy evaluated.'",
          "SELECT users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'R is also lazy evaluated.'",
          "SELECT users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'R is also lazy evaluated.'",
          "SELECT users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'R is also lazy evaluated.'"
        ]
      ]
    },
    {
      "id": 714,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'Harvey Motulsky'",
          "SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'Harvey Motulsky'",
          "SELECT comments.text FROM comments INNER JOIN users ON users.id = comments.userid WHERE users.displayname = 'Harvey Motulsky'",
          "SELECT c.text FROM comments c JOIN users u ON c.userid = u.id WHERE u.displayname = 'Harvey Motulsky';"
        ]
      ]
    },
    {
      "id": 715,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0",
          "SELECT DISTINCT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0",
          "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0",
          "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN comments ON votes.postid = comments.postid WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0"
        ]
      ]
    },
    {
      "id": 716,
      "db_id": "codebase_community",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 5 AND 10",
          "SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN comments ON votes.postid = comments.postid AND votes.userid = comments.userid WHERE comments.score BETWEEN 5 AND 10",
          "SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.upvotes) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN comments ON votes.postid = comments.postid AND votes.userid = comments.userid WHERE comments.score BETWEEN 5 AND 10",
          "SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN comments ON votes.postid = comments.postid WHERE comments.score BETWEEN 5 AND 10"
        ]
      ]
    },
    {
      "id": 717,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = '3-D Man'));",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = '3-D Man'));"
        ]
      ]
    },
    {
      "id": 718,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT hp.hero_id) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';"
        ]
      ]
    },
    {
      "id": 719,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 200 AND superpower.power_name = 'Super Strength';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 200 AND superpower.power_name = 'Super Strength'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 200 AND superpower.power_name = 'Super Strength'"
        ]
      ]
    },
    {
      "id": 720,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING count(DISTINCT power_id) > 15);",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING count(superhero.id) > 15",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING count(superhero.id) > 15",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING count(superhero.full_name) > 15"
        ]
      ]
    },
    {
      "id": 721,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'",
          "SELECT count(id) FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue');",
          "SELECT count(*) FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue');",
          "SELECT count(id) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');"
        ]
      ]
    },
    {
      "id": 722,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.skin_colour_id WHERE superhero.superhero_name = 'Apocalypse'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'",
          "SELECT c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse';"
        ]
      ]
    },
    {
      "id": 723,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility'",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue'",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Agility')) AND colour.colour = 'Blue';"
        ]
      ]
    },
    {
      "id": 724,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond' AND superpower.power_name = 'Agility'",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond' AND superpower.power_name = 'Agility'",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue' AND colour.colour = 'Blond'",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue' AND colour.colour = 'Blond'"
        ]
      ]
    },
    {
      "id": 725,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 726,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name, superhero.height_cm FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC",
          "SELECT superhero.superhero_name, superhero.height_cm FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC",
          "SELECT superhero.height_cm FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC"
        ]
      ]
    },
    {
      "id": 727,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Sauron'",
          "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Sauron');",
          "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'"
        ]
      ]
    },
    {
      "id": 728,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour, count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour ORDER BY count(superhero.id) DESC LIMIT 1",
          "SELECT colour.colour, count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY superhero.eye_colour_id ORDER BY count(superhero.id) DESC LIMIT 1",
          "SELECT colour.colour, count(superhero.id) AS num FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour ORDER BY num DESC LIMIT 1",
          "SELECT superhero.id, colour.colour FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY superhero.id ORDER BY count(superhero.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 729,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT avg(superhero.height_cm) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT avg(superhero.height_cm) AS average_height FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(superhero.height_cm) AS REAL) / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 730,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'",
          "SELECT superhero.full_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'",
          "SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength';",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'"
        ]
      ]
    },
    {
      "id": 731,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'"
        ]
      ]
    },
    {
      "id": 732,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT publisher.publisher_name FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id INNER JOIN publisher ON publisher.id = superhero.publisher_id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
          "SELECT publisher.publisher_name FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id INNER JOIN publisher ON publisher.id = superhero.publisher_id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 733,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold'",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold'",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold';"
        ]
      ]
    },
    {
      "id": 734,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Blue Beetle II'",
          "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Blue Beetle II');",
          "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'"
        ]
      ]
    },
    {
      "id": 735,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond'",
          "SELECT count(id) FROM superhero WHERE hair_colour_id IN (SELECT id FROM colour WHERE colour = 'Blond');",
          "SELECT count(*) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond'",
          "SELECT count(*) FROM superhero WHERE hair_colour_id IN (SELECT id FROM colour WHERE colour = 'Blond');"
        ]
      ]
    },
    {
      "id": 736,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT superhero.full_name FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT superhero.full_name FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 737,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat'",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.superhero_name = 'Copycat'",
          "SELECT race FROM race WHERE id IN (SELECT race_id FROM superhero WHERE superhero_name = 'Copycat');",
          "SELECT race FROM race WHERE id = (SELECT race_id FROM superhero WHERE superhero_name = 'Copycat');"
        ]
      ]
    },
    {
      "id": 738,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50",
          "SELECT superhero.id FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50",
          "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;"
        ]
      ]
    },
    {
      "id": 739,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'",
          "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'"
        ]
      ]
    },
    {
      "id": 740,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100 AND gender.gender = 'Female'",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id JOIN gender gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;",
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE attribute.attribute_name = 'Strength' AND attribute_value = 100 AND gender.gender = 'Female'"
        ]
      ]
    },
    {
      "id": 741,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY count(superhero.superhero_name) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id ORDER BY count(superhero.id) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id ORDER BY count(superhero.superhero_name) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY count(superhero.id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 742,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
          "SELECT count(superhero.id) FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Vampire'",
          "SELECT count(*) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'"
        ]
      ]
    },
    {
      "id": 743,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN alignment.alignment = 'Bad' THEN superhero.id ELSE NULL END) AS REAL) * 100 / count(superhero.id), count(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN superhero.id ELSE NULL END) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id), count(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN superhero.id ELSE NULL END) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id), count(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id",
          "SELECT cast(count(CASE WHEN alignment.alignment = 'Bad' THEN superhero.id ELSE NULL END) AS REAL) * 100 / count(superhero.id), count(CASE WHEN superhero.publisher_id = 13 THEN superhero.id ELSE NULL END) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 744,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id",
          "SELECT sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id",
          "SELECT (SELECT count(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics') - (SELECT count(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics') AS difference;",
          "SELECT sum(iif(publisher.publisher_name = 'Marvel Comics', 1, 0)) - sum(iif(publisher.publisher_name = 'DC Comics', 1, 0)) AS difference FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id"
        ]
      ]
    },
    {
      "id": 745,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
          "SELECT t.id FROM publisher AS t WHERE t.publisher_name = 'Star Trek'",
          "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';",
          "SELECT t.id FROM publisher t WHERE t.publisher_name = 'Star Trek'"
        ]
      ]
    },
    {
      "id": 746,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(attribute_value) FROM hero_attribute;",
          "SELECT cast(sum(hero_attribute.attribute_value) AS REAL) / count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id",
          "SELECT avg(attribute_value) FROM hero_attribute WHERE attribute_value IS NOT NULL;",
          "SELECT avg(attribute_value) FROM hero_attribute WHERE attribute_value IS NOT NULL"
        ]
      ]
    },
    {
      "id": 747,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(*) FROM superhero WHERE full_name IS NULL",
          "SELECT count(id) FROM superhero WHERE full_name IS NULL",
          "SELECT count(*) FROM superhero WHERE full_name IS NULL;",
          "SELECT sum(iif(full_name IS NULL, 1, 0)) FROM superhero"
        ]
      ]
    },
    {
      "id": 748,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.id = 75",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75",
          "SELECT colour.colour FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;"
        ]
      ]
    },
    {
      "id": 749,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok'",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Deathlok');",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Deathlok'));"
        ]
      ]
    },
    {
      "id": 750,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female'",
          "SELECT avg(weight_kg) FROM superhero WHERE gender_id = ( SELECT id FROM gender WHERE gender = 'Female' )",
          "SELECT avg(weight_kg) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female');",
          "SELECT avg(weight_kg) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')"
        ]
      ]
    },
    {
      "id": 751,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' LIMIT 5",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' LIMIT 5",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE gender.gender = 'Male' LIMIT 5",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' GROUP BY superpower.power_name LIMIT 5"
        ]
      ]
    },
    {
      "id": 752,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
          "SELECT superhero.superhero_name FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Alien'",
          "SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');",
          "SELECT superhero_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien');"
        ]
      ]
    },
    {
      "id": 753,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.colour = 'No Colour'",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.colour = 'No Colour'",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'No Colour' AND superhero.height_cm BETWEEN 170 AND 190",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.colour = 'No Colour'"
        ]
      ]
    },
    {
      "id": 754,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id = 56);",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56"
        ]
      ]
    },
    {
      "id": 755,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5;",
          "SELECT full_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5",
          "SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5",
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5"
        ]
      ]
    },
    {
      "id": 756,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(id) FROM superhero WHERE alignment_id = 2",
          "SELECT count(id) FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Bad' )",
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad'",
          "SELECT count(*) FROM superhero WHERE alignment_id = 2"
        ]
      ]
    },
    {
      "id": 757,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.weight_kg = 169",
          "SELECT race.race FROM superhero superhero JOIN race race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = '169'"
        ]
      ]
    },
    {
      "id": 758,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE race.race = 'Human' AND superhero.height_cm = 185",
          "SELECT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE superhero.height_cm = 185 AND race.race = 'Human'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE race.race = 'Human' AND superhero.height_cm = 185",
          "SELECT colour.colour FROM superhero superhero JOIN race race ON superhero.race_id = race.id JOIN colour colour ON superhero.hair_colour_id = colour.id WHERE superhero.height_cm = 185 AND race.race = 'Human';"
        ]
      ]
    },
    {
      "id": 759,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT colour.colour FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = (SELECT max(weight_kg) FROM superhero);",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = ( SELECT max(weight_kg) FROM superhero )",
          "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg = (SELECT max(weight_kg) FROM superhero);"
        ]
      ]
    },
    {
      "id": 760,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN publisher.id = 13 THEN superhero.id ELSE NULL END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180",
          "SELECT cast(sum(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180",
          "SELECT cast(sum(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.height_cm BETWEEN 150 AND 180",
          "SELECT cast(sum(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180"
        ]
      ]
    },
    {
      "id": 761,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT avg(weight_kg) * 0.79 FROM superhero )",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT avg(weight_kg) FROM superhero ) * 0.79",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT 0.79 * avg(weight_kg) FROM superhero )",
          "SELECT s.superhero_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT 0.79 * avg(weight_kg) FROM superhero)"
        ]
      ]
    },
    {
      "id": 762,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY count(superhero.id) DESC LIMIT 1",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power GROUP BY power_id HAVING count(*) = (SELECT max(cnt) FROM (SELECT count(*) AS cnt FROM hero_power GROUP BY power_id)));",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.id ORDER BY count(superpower.power_name) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 763,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT DISTINCT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination' GROUP BY hero_attribute.attribute_value"
        ]
      ]
    },
    {
      "id": 764,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 1",
          "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1",
          "SELECT DISTINCT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 1",
          "SELECT DISTINCT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1"
        ]
      ]
    },
    {
      "id": 765,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT hero_power.hero_id) FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Stealth'",
          "SELECT count(DISTINCT hero_power.hero_id) FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'stealth'",
          "SELECT count(DISTINCT hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth'",
          "SELECT count(DISTINCT hp.hero_id) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth';"
        ]
      ]
    },
    {
      "id": 766,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT max(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength')));",
          "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' ORDER BY ha.attribute_value DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 767,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(count(superhero.id) AS REAL) / count(DISTINCT superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.id = 1",
          "SELECT cast(count(superhero.id) AS REAL) / count(DISTINCT superhero.id) FROM superhero superhero LEFT JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE colour.id = 1;",
          "SELECT cast(sum(CASE WHEN superhero.skin_colour_id = 1 THEN 1 ELSE 0 END) AS REAL) / count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id",
          "SELECT cast(count(superhero.id) AS REAL) / count(DISTINCT CASE WHEN superhero.skin_colour_id = 1 THEN superhero.id END) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id"
        ]
      ]
    },
    {
      "id": 768,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Dark Horse Comics'"
        ]
      ]
    },
    {
      "id": 769,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND attribute.attribute_name = 'Durability' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY sum(hero_attribute.attribute_value) DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND attribute.attribute_name = 'Durability' GROUP BY superhero.superhero_name ORDER BY sum(hero_attribute.attribute_value) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 770,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien'",
          "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien';",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Abraham Sapien'"
        ]
      ]
    },
    {
      "id": 771,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight'",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight'",
          "SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';",
          "SELECT DISTINCT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';"
        ]
      ]
    },
    {
      "id": 772,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'",
          "SELECT DISTINCT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'",
          "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT DISTINCT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics'"
        ]
      ]
    },
    {
      "id": 773,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id",
          "SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.hair_colour_id = s.skin_colour_id AND s.hair_colour_id = s.eye_colour_id;",
          "SELECT DISTINCT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id",
          "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.eye_colour_id = superhero.hair_colour_id"
        ]
      ]
    },
    {
      "id": 774,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb'",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.superhero_name = 'A-Bomb'",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb' GROUP BY race.race",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero_name = 'A-Bomb'"
        ]
      ]
    },
    {
      "id": 775,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female'",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.gender_id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female'",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female'",
          "SELECT (count(*) * 100.0 / (SELECT count(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female'))) AS percentage FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female' AND colour.colour = 'Blue';"
        ]
      ]
    },
    {
      "id": 776,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'",
          "SELECT s.superhero_name, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.full_name = 'Charles Chandler';",
          "SELECT superhero.superhero_name, race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.full_name = 'Charles Chandler'",
          "SELECT s.superhero_name, r.race FROM superhero s INNER JOIN race r ON s.race_id = r.id WHERE s.full_name = 'Charles Chandler'"
        ]
      ]
    },
    {
      "id": 777,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13'",
          "SELECT gender FROM gender WHERE id IN (SELECT gender_id FROM superhero WHERE superhero_name = 'Agent 13');",
          "SELECT gender.gender FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id WHERE superhero.superhero_name = 'Agent 13'",
          "SELECT gender.gender FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';"
        ]
      ]
    },
    {
      "id": 778,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'",
          "SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'",
          "SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Adaptation'));"
        ]
      ]
    },
    {
      "id": 779,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo'",
          "SELECT count(DISTINCT hero_power.power_id) FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo';",
          "SELECT count(DISTINCT hp.power_id) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id WHERE s.superhero_name = 'Amazo';",
          "SELECT count(hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo'"
        ]
      ]
    },
    {
      "id": 780,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.full_name = 'Hunter Zolomon'",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = 'Hunter Zolomon');"
        ]
      ]
    },
    {
      "id": 781,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'",
          "SELECT height_cm FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Amber');",
          "SELECT DISTINCT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'",
          "SELECT height_cm FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Amber');"
        ]
      ]
    },
    {
      "id": 782,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black'",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black'",
          "SELECT s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id AND s.hair_colour_id = c.id WHERE c.colour = 'Black';"
        ]
      ]
    },
    {
      "id": 783,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT DISTINCT superhero.eye_colour_id FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'",
          "SELECT superhero.eye_colour_id FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'",
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.skin_colour_id = ( SELECT id FROM colour WHERE colour = 'Gold' )"
        ]
      ]
    },
    {
      "id": 784,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Vampire');",
          "SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');",
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'",
          "SELECT full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';"
        ]
      ]
    },
    {
      "id": 785,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT superhero.full_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT full_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')"
        ]
      ]
    },
    {
      "id": 786,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT count(DISTINCT hero_attribute.hero_id) FROM hero_attribute hero_attribute JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = (SELECT max(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'));",
          "SELECT count(DISTINCT hero_attribute.hero_id) FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = ( SELECT max(attribute_value) FROM hero_attribute WHERE attribute_id = ( SELECT id FROM attribute WHERE attribute_name = 'Strength' ) )",
          "SELECT count(DISTINCT hero_attribute.hero_id) FROM hero_attribute hero_attribute JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = (SELECT max(attribute_value) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength');"
        ]
      ]
    },
    {
      "id": 787,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks'",
          "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.full_name = 'Cameron Hicks'",
          "SELECT race.race, alignment.alignment FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks'",
          "SELECT race.race, alignment.alignment FROM superhero superhero JOIN race race ON superhero.race_id = race.id JOIN alignment alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';"
        ]
      ]
    },
    {
      "id": 788,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(iif(gender.gender = 'Female', 1, 0)) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.publisher_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(gender.gender) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 789,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
          "SELECT avg(superhero.weight_kg) FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Alien'",
          "SELECT cast(sum(superhero.weight_kg) AS REAL) / count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
          "SELECT avg(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');"
        ]
      ]
    },
    {
      "id": 790,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS difference;",
          "SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;",
          "SELECT sum(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - sum(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) FROM superhero",
          "SELECT weight_kg - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') FROM superhero WHERE full_name = 'Emil Blonsky'"
        ]
      ]
    },
    {
      "id": 791,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(height_cm) FROM superhero",
          "SELECT avg(height_cm) FROM superhero;",
          "SELECT avg(height_cm) AS average_height FROM superhero;",
          "SELECT cast(sum(height_cm) AS REAL) / count(id) FROM superhero"
        ]
      ]
    },
    {
      "id": 792,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Abomination'));"
        ]
      ]
    },
    {
      "id": 793,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE race.race = 'God/Eternal' AND gender.gender = 'Male'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.race_id = 21 AND gender.id = 1",
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND race.race = 'God/Eternal'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE race.race = 'God/Eternal' AND gender.id = 1"
        ]
      ]
    },
    {
      "id": 794,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') AND attribute_value = (SELECT max(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed')));"
        ]
      ]
    },
    {
      "id": 795,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(id) FROM superhero WHERE alignment_id = 3",
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 3",
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT count(*) FROM superhero WHERE alignment_id = 3"
        ]
      ]
    },
    {
      "id": 796,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man'",
          "SELECT attribute_name, attribute_value FROM attribute WHERE id IN (SELECT attribute_id FROM hero_attribute WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = '3-D Man'))"
        ]
      ]
    },
    {
      "id": 797,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Brown'",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Brown'",
          "SELECT s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN colour c2 ON s.hair_colour_id = c2.id WHERE c.colour = 'Blue' AND c2.colour = 'Brown';",
          "SELECT full_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Brown');"
        ]
      ]
    },
    {
      "id": 798,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
          "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
          "SELECT DISTINCT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
        ]
      ]
    },
    {
      "id": 799,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(id) FROM superhero WHERE publisher_id IS NULL",
          "SELECT count(id) FROM superhero WHERE publisher_id = 1",
          "SELECT count(*) FROM superhero WHERE publisher_id = 1",
          "SELECT count(*) FROM superhero WHERE publisher_id = 1;"
        ]
      ]
    },
    {
      "id": 800,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.eye_colour_id = 7",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.id = 7",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.eye_colour_id = 7",
          "SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id"
        ]
      ]
    },
    {
      "id": 801,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id",
          "SELECT sum(iif(gender.gender = 'Male', 1, 0)) / sum(iif(gender.gender = 'Female', 1, 0)) AS ratio FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id",
          "SELECT cast(sum(iif(gender.gender = 'Male', 1, 0)) AS REAL) / sum(iif(gender.gender = 'Female', 1, 0)) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id"
        ]
      ]
    },
    {
      "id": 802,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
          "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
          "SELECT full_name FROM superhero WHERE height_cm = ( SELECT max(height_cm) FROM superhero )",
          "SELECT full_name FROM superhero WHERE height_cm = (SELECT max(height_cm) FROM superhero);"
        ]
      ]
    },
    {
      "id": 803,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
          "SELECT id FROM superpower WHERE power_name = 'cryokinesis'",
          "SELECT id FROM superpower WHERE power_name = 'Cryokinesis';",
          "SELECT t.id FROM superpower AS t WHERE t.power_name = 'Cryokinesis'"
        ]
      ]
    },
    {
      "id": 804,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE id = 294",
          "SELECT superhero_name FROM superhero WHERE id = 294",
          "SELECT full_name FROM superhero WHERE id = 294;",
          "SELECT superhero_name FROM superhero WHERE id = 294;"
        ]
      ]
    },
    {
      "id": 805,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL",
          "SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0",
          "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;",
          "SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0;"
        ]
      ]
    },
    {
      "id": 806,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Karen Beecher-Duncan'",
          "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan';"
        ]
      ]
    },
    {
      "id": 807,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE full_name = 'Helen Parr'));",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE full_name = 'Helen Parr'));"
        ]
      ]
    },
    {
      "id": 808,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.height_cm = 188 AND superhero.weight_kg = 108",
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.height_cm = 188 AND superhero.weight_kg = 108"
        ]
      ]
    },
    {
      "id": 809,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38",
          "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.id = 38",
          "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = '38'",
          "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE id = 38);"
        ]
      ]
    },
    {
      "id": 810,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT race.race FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN race ON superhero.race_id = race.id ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT race.race FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id INNER JOIN race ON race.id = superhero.race_id ORDER BY hero_attribute.attribute_value DESC LIMIT 1",
          "SELECT race.race FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN race race ON superhero.race_id = race.id WHERE hero_attribute.attribute_value = (SELECT max(attribute_value) FROM hero_attribute);"
        ]
      ]
    },
    {
      "id": 811,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Atom IV'",
          "SELECT DISTINCT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Atom IV'",
          "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.full_name = 'Atom IV'",
          "SELECT alignment.alignment, superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id JOIN alignment alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Atom IV';"
        ]
      ]
    },
    {
      "id": 812,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5",
          "SELECT full_name FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue') LIMIT 5;",
          "SELECT full_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') LIMIT 5;"
        ]
      ]
    },
    {
      "id": 813,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT cast(sum(hero_attribute.attribute_value) AS REAL) / count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT avg(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.alignment_id = 3",
          "SELECT avg(attribute_value) FROM hero_attribute WHERE hero_id IN (SELECT id FROM superhero WHERE alignment_id = 3);"
        ]
      ]
    },
    {
      "id": 814,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100",
          "SELECT colour.colour FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100",
          "SELECT DISTINCT colour.colour FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;",
          "SELECT colour.colour FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;"
        ]
      ]
    },
    {
      "id": 815,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 1 AND gender.id = 2",
          "SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE gender.id = 2 AND alignment.id = 1",
          "SELECT count(*) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 1 AND gender.id = 2",
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE alignment.id = 1 AND gender.id = 2"
        ]
      ]
    },
    {
      "id": 816,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80",
          "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80",
          "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value BETWEEN 75 AND 80;"
        ]
      ]
    },
    {
      "id": 817,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'blue' AND gender.gender = 'Male'",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE gender.gender = 'Male' AND colour.colour = 'Blue'",
          "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE gender.gender = 'Male' AND colour.colour = 'blue'",
          "SELECT race.race FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE gender.gender = 'Male' AND colour.colour = 'Blue'"
        ]
      ]
    },
    {
      "id": 818,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN gender.id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2",
          "SELECT cast(sum(CASE WHEN gender.id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE alignment.id = 2",
          "SELECT cast(sum(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.gender_id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2"
        ]
      ]
    },
    {
      "id": 819,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT (SELECT count(*) FROM superhero WHERE eye_colour_id = 7) - (SELECT count(*) FROM superhero WHERE eye_colour_id = 1) AS difference;",
          "SELECT sum(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) - sum(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END) AS difference FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE (superhero.weight_kg = 0 OR superhero.weight_kg IS NULL)",
          "SELECT count(CASE WHEN superhero.eye_colour_id = 7 THEN superhero.id ELSE NULL END) - count(CASE WHEN superhero.eye_colour_id = 1 THEN superhero.id ELSE NULL END) AS difference FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE (superhero.weight_kg = 0 OR superhero.weight_kg IS NULL)",
          "SELECT count(DISTINCT CASE WHEN superhero.eye_colour_id = 7 THEN superhero.id END) - count(DISTINCT CASE WHEN superhero.eye_colour_id = 1 THEN superhero.id END) AS difference FROM superhero superhero LEFT JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;"
        ]
      ]
    },
    {
      "id": 820,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength'",
          "SELECT sum(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength'",
          "SELECT hero_attribute.attribute_value FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength'",
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND superhero.superhero_name = 'Hulk'"
        ]
      ]
    },
    {
      "id": 821,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax'",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax'",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Ajax'",
          "SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Ajax');"
        ]
      ]
    },
    {
      "id": 822,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad' AND colour.colour = 'Green'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE alignment.alignment = 'Bad' AND colour.colour = 'Green'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad'",
          "SELECT count(*) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad' AND colour.colour = 'Green'"
        ]
      ]
    },
    {
      "id": 823,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female'",
          "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics'",
          "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female'",
          "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 824,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.full_name ASC",
          "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.full_name ASC",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.full_name",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC"
        ]
      ]
    },
    {
      "id": 825,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force'",
          "SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id INNER JOIN gender ON gender.id = superhero.gender_id WHERE superpower.power_name = 'Phoenix Force'",
          "SELECT gender.gender FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force'",
          "SELECT superhero.gender_id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force'"
        ]
      ]
    },
    {
      "id": 826,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1",
          "SELECT superhero.superhero_name FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics' AND superhero.weight_kg = (SELECT max(weight_kg) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics');",
          "SELECT superhero.superhero_name FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 827,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND race.race != 'Human'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE race.race != 'Human' AND publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE race.race != 'Human' AND publisher.publisher_name = 'Dark Horse Comics'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics'"
        ]
      ]
    },
    {
      "id": 828,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100",
          "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;",
          "SELECT count(DISTINCT hero_attribute.hero_id) FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100",
          "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100"
        ]
      ]
    },
    {
      "id": 829,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id",
          "SELECT sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id",
          "SELECT sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id",
          "SELECT (SELECT count(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) - (SELECT count(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference;"
        ]
      ]
    },
    {
      "id": 830,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
          "SELECT attribute.attribute_name FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1",
          "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' GROUP BY attribute.attribute_name ORDER BY min(hero_attribute.attribute_value) LIMIT 1"
        ]
      ]
    },
    {
      "id": 831,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'",
          "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Abomination';"
        ]
      ]
    },
    {
      "id": 832,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
          "SELECT full_name FROM superhero WHERE height_cm = ( SELECT max(height_cm) FROM superhero )",
          "SELECT full_name FROM superhero WHERE height_cm = (SELECT max(height_cm) FROM superhero);",
          "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 833,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
          "SELECT full_name FROM superhero WHERE full_name = 'Charles Chandler'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'",
          "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Human' AND superhero.full_name = 'Charles Chandler'"
        ]
      ]
    },
    {
      "id": 834,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.publisher_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'",
          "SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(gender.gender) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'"
        ]
      ]
    },
    {
      "id": 835,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(count(CASE WHEN alignment.alignment = 'Good' THEN superhero.id ELSE NULL END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'",
          "SELECT cast(sum(iif(alignment.alignment = 'Good', 1, 0)) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'"
        ]
      ]
    },
    {
      "id": 836,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT count(id) FROM superhero WHERE full_name LIKE 'John%'",
          "SELECT count(*) FROM superhero WHERE full_name LIKE 'John%'",
          "SELECT count(*) FROM superhero WHERE full_name LIKE 'John%';",
          "SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Human' AND superhero.full_name LIKE 'John%'"
        ]
      ]
    },
    {
      "id": 837,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT min(attribute_value) FROM hero_attribute )",
          "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT min(attribute_value) FROM hero_attribute);",
          "SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1",
          "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT min(attribute_value) FROM hero_attribute WHERE attribute_value IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 838,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'",
          "SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien' AND superhero.superhero_name = 'Alien'",
          "SELECT full_name FROM superhero WHERE superhero_name = 'Alien';"
        ]
      ]
    },
    {
      "id": 839,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Brown');",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'Brown'",
          "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Brown' AND superhero.weight_kg < 100",
          "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'Brown'"
        ]
      ]
    },
    {
      "id": 840,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy'",
          "SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Aquababy'",
          "SELECT attribute_value FROM hero_attribute WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Aquababy');",
          "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy'"
        ]
      ]
    },
    {
      "id": 841,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40",
          "SELECT weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40",
          "SELECT weight_kg, race FROM superhero WHERE id = 40",
          "SELECT superhero.weight_kg, race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE superhero.id = 40"
        ]
      ]
    },
    {
      "id": 842,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT cast(sum(superhero.height_cm) AS REAL) / count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
          "SELECT avg(height_cm) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')"
        ]
      ]
    },
    {
      "id": 843,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT hp.hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence';",
          "SELECT hero_power.hero_id FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Intelligence'",
          "SELECT hero_power.hero_id FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence'",
          "SELECT DISTINCT hp.hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence';"
        ]
      ]
    },
    {
      "id": 844,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf'",
          "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf'",
          "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Blackwulf'",
          "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Blackwulf';"
        ]
      ]
    },
    {
      "id": 845,
      "db_id": "superhero",
      "infer_predictions": [
        [
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) FROM superhero ) * 0.8",
          "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) * 0.8 FROM superhero )",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) * 0.8 FROM superhero )",
          "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) FROM superhero ) * 0.8"
        ]
      ]
    },
    {
      "id": 846,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 20 ORDER BY qualifying.q1 DESC LIMIT 5",
          "SELECT d.driverref FROM drivers d JOIN qualifying q ON d.driverid = q.driverid WHERE q.raceid = 20 AND q.q1 = (SELECT max(q1) FROM qualifying WHERE raceid = 20);",
          "SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 20 AND qualifying.q1 = ( SELECT max(q1) FROM qualifying WHERE raceid = 20 )",
          "SELECT drivers.driverref FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 20 ORDER BY qualifying.q1 DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 847,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.q2 = ( SELECT min(q2) FROM qualifying WHERE raceid = 19 )",
          "SELECT drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 19 AND qualifying.q2 = ( SELECT min(q2) FROM qualifying WHERE raceid = 19 )",
          "SELECT drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 19 ORDER BY cast(replace(substr(qualifying.q2, 3), ',', '') AS REAL) LIMIT 1",
          "SELECT drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 19 ORDER BY cast(replace(substr(qualifying.q2, 3), ':', '') AS REAL) LIMIT 1"
        ]
      ]
    },
    {
      "id": 848,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai'",
          "SELECT DISTINCT races.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.location = 'Shanghai'",
          "SELECT DISTINCT races.year FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai';",
          "SELECT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai'"
        ]
      ]
    },
    {
      "id": 849,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
          "SELECT DISTINCT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
          "SELECT races.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
          "SELECT url FROM races WHERE circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya' )"
        ]
      ]
    },
    {
      "id": 850,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany'",
          "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Germany'",
          "SELECT DISTINCT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany'",
          "SELECT DISTINCT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Germany'"
        ]
      ]
    },
    {
      "id": 851,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.circuitid, constructorstandings.position FROM races INNER JOIN constructorstandings ON races.raceid = constructorstandings.raceid INNER JOIN constructors ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault'",
          "SELECT circuits.name, constructorstandings.position FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN constructorstandings ON races.raceid = constructorstandings.raceid INNER JOIN constructors ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault'",
          "SELECT DISTINCT circuits.name, constructorstandings.position FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN constructorstandings ON races.raceid = constructorstandings.raceid INNER JOIN constructors ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault'",
          "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON constructors.constructorid = results.constructorid WHERE constructors.name = 'Renault'"
        ]
      ]
    },
    {
      "id": 852,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT races.raceid) FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe');",
          "SELECT count(DISTINCT raceid) FROM races WHERE YEAR = 2010 AND circuitid NOT IN (SELECT circuitid FROM circuits WHERE country IN ('Asia', 'Europe'));",
          "SELECT count(raceid) FROM races WHERE YEAR = 2010 AND circuitid NOT IN (SELECT circuitid FROM circuits WHERE country IN ('Asia', 'Europe'));",
          "SELECT count(DISTINCT raceid) FROM races WHERE substr(YEAR, 1, 4) = '2010' AND circuitid NOT IN (SELECT circuitid FROM circuits WHERE country IN ('Asia', 'Europe'));"
        ]
      ]
    },
    {
      "id": 853,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain'",
          "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Spain'",
          "SELECT DISTINCT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain'",
          "SELECT races.name FROM circuits INNER JOIN races ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain'"
        ]
      ]
    },
    {
      "id": 854,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Australian Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix'",
          "SELECT DISTINCT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Australian Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Australian Grand Prix';"
        ]
      ]
    },
    {
      "id": 855,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT races.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT races.url FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit';",
          "SELECT url FROM races WHERE circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' )"
        ]
      ]
    },
    {
      "id": 856,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT DISTINCT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT races.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Sepang International Circuit'",
          "SELECT DISTINCT races.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Sepang International Circuit'"
        ]
      ]
    },
    {
      "id": 857,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Abu Dhabi Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Abu Dhabi Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Abu Dhabi Grand Prix';",
          "SELECT lat, lng FROM circuits WHERE circuitid IN (SELECT circuitid FROM races WHERE name = 'Abu Dhabi Grand Prix');"
        ]
      ]
    },
    {
      "id": 858,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 ORDER BY results.points DESC LIMIT 1",
          "SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 AND results.points = 1",
          "SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 GROUP BY circuits.country ORDER BY count(circuits.country) DESC LIMIT 1",
          "SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 GROUP BY circuits.country ORDER BY count(results.points) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 859,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354",
          "SELECT qualifying.q1 FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354;",
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = '354'",
          "SELECT drivers.forename, drivers.surname, qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.driverref = 'senna' AND qualifying.raceid = 354"
        ]
      ]
    },
    {
      "id": 860,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT nationality FROM drivers WHERE driverid IN (SELECT driverid FROM qualifying WHERE raceid = 355 AND q2 = '0:01:40');",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40'",
          "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40'",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '1:01:40'"
        ]
      ]
    },
    {
      "id": 861,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverid FROM qualifying WHERE raceid = 903 AND q3 LIKE '1:01:54%'",
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 LIKE '1:01:54%'",
          "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '1:01:54'",
          "SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 LIKE '1:01:54%'"
        ]
      ]
    },
    {
      "id": 862,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT results.driverid) FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;",
          "SELECT count(DISTINCT results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL",
          "SELECT count(DISTINCT results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL"
        ]
      ]
    },
    {
      "id": 863,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
          "SELECT DISTINCT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = '901'",
          "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901"
        ]
      ]
    },
    {
      "id": 864,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '2015-11-29'",
          "SELECT count(DISTINCT results.driverid) FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.date = '2015-11-29';",
          "SELECT count(DISTINCT drivers.driverid) FROM races races JOIN results results ON races.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid WHERE races.date = '2015-11-29';",
          "SELECT count(DISTINCT results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '2015-11-29'"
        ]
      ]
    },
    {
      "id": 865,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND TIME IS NOT NULL) ORDER BY dob LIMIT 1",
          "SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND TIME IS NOT NULL) ORDER BY dob LIMIT 1;",
          "SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND time IS NOT NULL) ORDER BY dob LIMIT 1;",
          "SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND time IS NOT NULL) ORDER BY dob LIMIT 1"
        ]
      ]
    },
    {
      "id": 866,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '0:01:27'",
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = '161' AND laptimes.time = '0:01:27'",
          "SELECT drivers.url FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '0:01:27';",
          "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '0:01:27.000'"
        ]
      ]
    },
    {
      "id": 867,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 933 ORDER BY cast(replace(substr(results.fastestlapspeed, 2), ',', '') AS REAL) DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 933 ORDER BY cast(replace(substr(results.fastestlapspeed, 2), ',', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 868,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix'",
          "SELECT circuits.lat, circuits.lng FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';",
          "SELECT lat, lng FROM circuits WHERE circuitid IN (SELECT circuitid FROM races WHERE name = 'Malaysian Grand Prix');"
        ]
      ]
    },
    {
      "id": 869,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.url FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.raceid = 9 ORDER BY results.points DESC LIMIT 1",
          "SELECT constructors.url FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructorresults.raceid = 9 ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 9 ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT constructors.url FROM races INNER JOIN constructorresults ON races.raceid = constructorresults.raceid INNER JOIN constructors ON constructors.constructorid = constructorresults.constructorid WHERE races.raceid = 9 ORDER BY constructorresults.points DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 870,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'DiGrassi' AND qualifying.raceid = 345",
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'Di Grassi' AND qualifying.raceid = 345",
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceid = 345",
          "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'DiGrassi' AND qualifying.raceid = '345'"
        ]
      ]
    },
    {
      "id": 871,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '0:01:15'",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '0:01:15'",
          "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '1:01:15'",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '1:01:15'"
        ]
      ]
    },
    {
      "id": 872,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 45 AND qualifying.q3 = '1:01:33'",
          "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 45 AND qualifying.q3 LIKE '0:01:33%'",
          "SELECT code FROM drivers WHERE driverid IN (SELECT driverid FROM qualifying WHERE raceid = 45 AND q3 = '1:01:33');",
          "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 45 AND qualifying.q3 = '1:01.33'"
        ]
      ]
    },
    {
      "id": 873,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceid = 743",
          "SELECT results.time FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceid = 743",
          "SELECT results.time FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceid = '743'",
          "SELECT results.time FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceid = 743;"
        ]
      ]
    },
    {
      "id": 874,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'San Marino Grand Prix' AND results.position = 2 AND races.year = 2006",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND results.position = 2",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE races.name = 'San Marino Grand Prix' AND driverstandings.position = 2 AND races.year = 2006",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'San Marino Grand Prix' AND results.position = 2 AND races.year = 2006"
        ]
      ]
    },
    {
      "id": 875,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
          "SELECT DISTINCT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
          "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = '901'",
          "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901"
        ]
      ]
    },
    {
      "id": 876,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM races races JOIN results results ON races.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid WHERE races.date = '2015-11-29' AND results.time IS NULL;",
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '2015-11-29' AND results.time IS NULL",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE races.date = '2015-11-29' AND results.time IS NULL;",
          "SELECT count(DISTINCT laptimes.driverid) FROM races races JOIN laptimes laptimes ON races.raceid = laptimes.raceid WHERE races.date = '2015-11-29';"
        ]
      ]
    },
    {
      "id": 877,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 878,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.time LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.time ASC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.time LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY cast(replace(substr(laptimes.time, 3), ':', '') AS REAL) LIMIT 1"
        ]
      ]
    },
    {
      "id": 879,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT nationality FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE fastestlapspeed = (SELECT max(fastestlapspeed) FROM results));",
          "SELECT nationality FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE fastestlapspeed = (SELECT max(fastestlapspeed) FROM results WHERE fastestlapspeed IS NOT NULL));",
          "SELECT drivers.nationality FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT nationality FROM drivers WHERE driverid = (SELECT driverid FROM results WHERE fastestlapspeed = (SELECT max(fastestlapspeed) FROM results));"
        ]
      ]
    },
    {
      "id": 880,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast((results.fastestlapspeed - results.fastestlapspeed) AS REAL) * 100 / results.fastestlapspeed FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Paul' AND drivers.surname = 'di Resta' AND results.raceid = 853",
          "SELECT cast((results.fastestlapspeed - results.fastestlapspeed) AS REAL) * 100 / results.fastestlapspeed FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Paul' AND drivers.surname = 'di Resta' AND results.raceid = 853",
          "SELECT cast((results.fastestlapspeed - ( SELECT fastestlapspeed FROM results WHERE raceid = 854 )) AS REAL) * 100 / results.fastestlapspeed FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Paul' AND drivers.surname = 'di Resta' AND results.raceid = 853",
          "SELECT cast((results.fastestlapspeed - results.fastestlapspeed) AS REAL) * 100 / results.fastestlapspeed FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Paul' AND drivers.surname = 'Di Resta' AND results.raceid = 853"
        ]
      ]
    },
    {
      "id": 881,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN results.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '1983-07-16'",
          "SELECT cast(count(results.driverid) AS REAL) * 100 / count(DISTINCT results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '1983-07-16'",
          "SELECT cast(count(results.driverid) AS REAL) * 100 / count(DISTINCT drivers.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.date = '1983-07-16'",
          "SELECT cast(count(CASE WHEN results.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16'"
        ]
      ]
    },
    {
      "id": 882,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT min(YEAR) FROM races WHERE name = 'Singapore Grand Prix'",
          "SELECT min(YEAR) FROM races WHERE name = 'Singapore Grand Prix' AND YEAR IS NOT NULL;",
          "SELECT YEAR FROM races WHERE name = 'Singapore Grand Prix' AND YEAR = (SELECT min(YEAR) FROM races WHERE name = 'Singapore Grand Prix')",
          "SELECT YEAR FROM races WHERE name = 'Singapore Grand Prix' AND YEAR = (SELECT min(YEAR) FROM races WHERE name = 'Singapore Grand Prix');"
        ]
      ]
    },
    {
      "id": 883,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM races WHERE YEAR = 2005 ORDER BY raceid DESC",
          "SELECT name FROM races WHERE YEAR = 2005 ORDER BY raceid DESC;",
          "SELECT name FROM races WHERE substr(YEAR, 1, 4) = '2005' ORDER BY raceid DESC",
          "SELECT name FROM races WHERE YEAR = 2005 ORDER BY name DESC"
        ]
      ]
    },
    {
      "id": 884,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM races WHERE substr(date, 1, instr(date, '-') - 1) = ( SELECT min(substr(date, 1, instr(date, '-') - 1)) FROM races )",
          "SELECT name FROM races WHERE strftime('%Y-%m', date) = (SELECT min(strftime('%Y-%m', date)) FROM races WHERE strftime('%Y', date) = (SELECT min(strftime('%Y', date)) FROM races));",
          "SELECT name FROM races WHERE strftime('%Y-%m', date) = (SELECT min(strftime('%Y-%m', date)) FROM races WHERE strftime('%Y', date) = (SELECT min(strftime('%Y', date)) FROM races))",
          "SELECT name FROM races WHERE strftime('%Y-%m', date) = (SELECT strftime('%Y-%m', min(date)) FROM races WHERE strftime('%Y', date) = (SELECT min(strftime('%Y', date)) FROM races))"
        ]
      ]
    },
    {
      "id": 885,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name, date FROM races WHERE YEAR = 1999 AND round = ( SELECT max(round) FROM races WHERE YEAR = 1999 )",
          "SELECT name, date FROM races WHERE YEAR = 1999 AND round = (SELECT max(round) FROM races WHERE YEAR = 1999);",
          "SELECT name, date FROM races WHERE YEAR = 1999 ORDER BY round DESC LIMIT 1",
          "SELECT name, date FROM races WHERE YEAR = '1999' AND round = ( SELECT max(round) FROM races WHERE YEAR = '1999' )"
        ]
      ]
    },
    {
      "id": 886,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT YEAR FROM races GROUP BY YEAR ORDER BY count(YEAR) DESC LIMIT 1",
          "SELECT YEAR FROM races GROUP BY YEAR ORDER BY count(YEAR) DESC LIMIT 1;",
          "SELECT YEAR FROM races GROUP BY YEAR HAVING count(YEAR) = (SELECT max(COUNT) FROM (SELECT count(YEAR) AS COUNT FROM races GROUP BY YEAR));",
          "SELECT YEAR FROM (SELECT YEAR, count(YEAR) AS num FROM races GROUP BY YEAR) WHERE num = (SELECT max(num) FROM (SELECT count(YEAR) AS num FROM races GROUP BY YEAR))"
        ]
      ]
    },
    {
      "id": 887,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM races WHERE YEAR = 2017 AND circuitid NOT IN (SELECT circuitid FROM races WHERE YEAR = 2000);",
          "SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 AND seasons.year != 2000",
          "SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 AND seasons.year = 2000",
          "SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = '2017' AND seasons.year != '2000'"
        ]
      ]
    },
    {
      "id": 888,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.country, circuits.name, circuits.location FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1",
          "SELECT country, LOCATION FROM circuits WHERE circuitid IN (SELECT circuitid FROM races WHERE YEAR = (SELECT min(YEAR) FROM races WHERE name = 'European Grand Prix'));",
          "SELECT circuits.country, circuits.name, circuits.location FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year ASC LIMIT 1",
          "SELECT DISTINCT circuits.country, circuits.name, circuits.location FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1"
        ]
      ]
    },
    {
      "id": 889,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT seasons.year FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix' ORDER BY races.year DESC LIMIT 1",
          "SELECT seasons.year FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix' ORDER BY seasons.year DESC LIMIT 1",
          "SELECT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix' ORDER BY races.year DESC LIMIT 1",
          "SELECT seasons.year FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'British Grand Prix' AND circuits.name = 'Brands Hatch' ORDER BY seasons.year DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 890,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT seasons.year) FROM races races JOIN seasons seasons ON races.year = seasons.year JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'British Grand Prix' AND circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kingdom';",
          "SELECT count(DISTINCT seasons.year) FROM races races JOIN seasons seasons ON races.year = seasons.year JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'British Grand Prix' AND circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kindom';",
          "SELECT count(DISTINCT races.year) FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'British Grand Prix' AND circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kingdom';",
          "SELECT count(DISTINCT seasons.year) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE races.name = 'British Grand Prix' AND circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kingdom'"
        ]
      ]
    },
    {
      "id": 891,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY results.position",
          "SELECT DISTINCT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY results.position",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY results.position",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY driverstandings.position"
        ]
      ]
    },
    {
      "id": 892,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.points DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.points DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN RESULTS ON drivers.driverid = RESULTS.driverid ORDER BY RESULTS.points DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, max(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid GROUP BY results.driverid ORDER BY max(results.points) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 893,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, driverstandings.points FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3",
          "SELECT drivers.forename, drivers.surname, driverstandings.points FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE races.year = 2017 AND races.name = 'Chinese Grand Prix' ORDER BY driverstandings.points DESC LIMIT 3",
          "SELECT drivers.forename, drivers.surname, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3",
          "SELECT drivers.driverid, driverstandings.points FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 894,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, races.name FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT drivers.forename, drivers.surname, races.name FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT drivers.forename, drivers.surname, races.name FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds ASC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid ORDER BY results.milliseconds LIMIT 1"
        ]
      ]
    },
    {
      "id": 895,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(results.milliseconds) AS REAL) / count(results.milliseconds) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009",
          "SELECT cast(sum(results.milliseconds) AS REAL) / count(results.milliseconds) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix'",
          "SELECT cast(sum(results.milliseconds) AS REAL) / count(results.milliseconds) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Malaysian Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT cast(sum(results.milliseconds) AS REAL) / count(results.resultid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009"
        ]
      ]
    },
    {
      "id": 896,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN drivers.surname = 'Hamilton' AND results.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year >= 2010 AND races.circuitid = 1",
          "SELECT cast(sum(CASE WHEN drivers.surname = 'Hamilton' THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.raceid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year >= 2010 AND races.circuitid = 1 AND results.position != 1",
          "SELECT cast(sum(CASE WHEN drivers.surname = 'Hamilton' THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year >= 2010 AND races.circuitid = 1 AND results.position != 1",
          "SELECT cast(sum(CASE WHEN drivers.surname = 'Hamilton' AND results.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year >= 2010 AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'F1' )"
        ]
      ]
    },
    {
      "id": 897,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.nationality, max(driverstandings.points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid GROUP BY driverstandings.driverid ORDER BY count(driverstandings.wins) DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, max(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.driverid ORDER BY count(driverstandings.wins) DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, max(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.driverid, drivers.forename, drivers.surname, drivers.nationality ORDER BY count(driverstandings.wins) DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, max(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.driverid, drivers.forename, drivers.surname, drivers.nationality ORDER BY driverstandings.wins DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 898,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT dob FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
          "SELECT dob, (strftime('%Y', 'now') - strftime('%Y', dob)) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY age DESC LIMIT 1",
          "SELECT dob, (strftime('%Y', 'now') - strftime('%Y', dob)) AS age, forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY age DESC LIMIT 1",
          "SELECT cast((strftime('%Y', 'now') - strftime('%Y', dob)) AS REAL) FROM drivers WHERE nationality = 'Japanese' ORDER BY cast((strftime('%Y', 'now') - strftime('%Y', dob)) AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 899,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(races.raceid) = 4",
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(DISTINCT races.raceid) = 4",
          "SELECT DISTINCT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(races.raceid) = 4",
          "SELECT DISTINCT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(DISTINCT races.raceid) = 4"
        ]
      ]
    },
    {
      "id": 900,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name, circuits.location, races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2006 AND circuits.country = 'USA'",
          "SELECT c.name, c.location, r.name FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE c.country = 'USA' AND r.year = 2006;",
          "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = 2006 AND circuits.country = 'USA'",
          "SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON races.circuitid = circuits.circuitid WHERE races.year = 2006 AND circuits.country = 'USA'"
        ]
      ]
    },
    {
      "id": 901,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE strftime('%Y-%m', races.date) = '2005-09'",
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE strftime('%Y-%m', races.`date`) = '2005-09'",
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE seasons.year = 2005 AND strftime('%m', races.date) = '9'",
          "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE seasons.year = 2005 AND strftime('%Y-%m', races.date) = '2005-09'"
        ]
      ]
    },
    {
      "id": 902,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20",
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20",
          "SELECT races.name FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20",
          "SELECT races.name FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20"
        ]
      ]
    },
    {
      "id": 903,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' )",
          "SELECT count(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' )",
          "SELECT count(*) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' ) AND results.points = ( SELECT max(points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' ) )",
          "SELECT count(*) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' ) AND results.points = ( SELECT max(points) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' ) )"
        ]
      ]
    },
    {
      "id": 904,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds LIMIT 1",
          "SELECT races.year, races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds LIMIT 1",
          "SELECT races.name, races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds ASC LIMIT 1",
          "SELECT races.name, races.year FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND results.milliseconds = (SELECT min(milliseconds) FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher'))"
        ]
      ]
    },
    {
      "id": 905,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000",
          "SELECT avg(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND strftime('%Y', races.date) = '2000'",
          "SELECT avg(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND results.year = 2000",
          "SELECT cast(sum(results.points) AS REAL) / count(results.resultid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000"
        ]
      ]
    },
    {
      "id": 906,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.year, results.points FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year LIMIT 1",
          "SELECT races.year, results.points FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year ASC LIMIT 1",
          "SELECT races.year, results.points FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year LIMIT 1",
          "SELECT results.points, races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year LIMIT 1"
        ]
      ]
    },
    {
      "id": 907,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.date, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date ASC",
          "SELECT races.date, circuits.country FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date;",
          "SELECT races.date, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date",
          "SELECT races.name, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date"
        ]
      ]
    },
    {
      "id": 908,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid ORDER BY races.laps DESC LIMIT 1",
          "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.laps = ( SELECT max(laps) FROM races )",
          "SELECT races.name, races.year, circuits.location FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.laps = (SELECT max(laps) FROM races);",
          "SELECT races.name, races.year, circuits.location FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.laps = (SELECT max(laps) FROM races)"
        ]
      ]
    },
    {
      "id": 909,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix'",
          "SELECT cast(sum(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.name) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix'",
          "SELECT cast(sum(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix'",
          "SELECT (count(DISTINCT CASE WHEN circuits.country = 'Germany' THEN races.raceid END) * 100.0 / count(DISTINCT races.raceid)) AS percentage FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix';"
        ]
      ]
    },
    {
      "id": 910,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT lat, lng FROM circuits WHERE NAME = 'Silverstone Circuit'"
        ]
      ]
    },
    {
      "id": 911,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM circuits WHERE LOCATION IN ('Silverstone', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
          "SELECT name FROM circuits WHERE LOCATION = 'Silverstone' OR name = 'Hockenheimring' OR name = 'Hungaroring' ORDER BY lat DESC LIMIT 1",
          "SELECT name FROM circuits WHERE LOCATION IN ('Silverstone', 'Hockenheimring', 'Hungaroring') AND lat = ( SELECT max(lat) FROM circuits WHERE LOCATION IN ('Silverstone', 'Hockenheimring', 'Hungaroring') )",
          "SELECT name FROM circuits WHERE LOCATION IN ('Silverstone', 'Hockenheimring', 'Hungaroring') AND lat = (SELECT max(lat) FROM circuits WHERE LOCATION IN ('Silverstone', 'Hockenheimring', 'Hungaroring'))"
        ]
      ]
    },
    {
      "id": 912,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit'",
          "SELECT circuits.circuitref FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Marina Bay Street Circuit'",
          "SELECT name FROM circuits WHERE name = 'Marina Bay Street Circuit'",
          "SELECT DISTINCT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit'"
        ]
      ]
    },
    {
      "id": 913,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT country FROM circuits WHERE alt = ( SELECT max(alt) FROM circuits )",
          "SELECT country FROM circuits WHERE alt = (SELECT max(alt) FROM circuits);",
          "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
          "SELECT country FROM circuits WHERE alt = (SELECT max(alt) FROM circuits)"
        ]
      ]
    },
    {
      "id": 914,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM drivers WHERE code IS NULL",
          "SELECT count(*) FROM drivers WHERE code IS NULL",
          "SELECT count(code) FROM drivers WHERE code IS NULL",
          "SELECT count(*) FROM drivers WHERE code IS NULL;"
        ]
      ]
    },
    {
      "id": 915,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT country FROM circuits WHERE circuitid IN (SELECT circuitid FROM races JOIN driverstandings ON races.raceid = driverstandings.raceid JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE dob IS NOT NULL ORDER BY dob LIMIT 1);",
          "SELECT country FROM circuits WHERE circuitid IN (SELECT circuitid FROM races JOIN driverstandings ON races.raceid = driverstandings.raceid JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1);",
          "SELECT country FROM circuits WHERE circuitid IN (SELECT circuitid FROM races JOIN driverstandings ON races.raceid = driverstandings.raceid JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE strftime('%Y', drivers.dob) = (SELECT max(strftime('%Y', dob)) FROM drivers));",
          "SELECT country FROM circuits WHERE circuitid IN (SELECT circuitid FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE dob IS NOT NULL ORDER BY dob LIMIT 1);"
        ]
      ]
    },
    {
      "id": 916,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT surname FROM drivers WHERE nationality = 'Italian'",
          "SELECT surname FROM drivers WHERE nationality = 'Italian' GROUP BY surname",
          "SELECT surname FROM drivers WHERE nationality LIKE 'Italian'",
          "SELECT surname FROM drivers WHERE nationality = 'Italian' AND surname IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 917,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
          "SELECT url FROM constructors WHERE constructorid IN (SELECT constructorid FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson');",
          "SELECT url FROM constructors WHERE constructorid IN (SELECT driverid FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson');",
          "SELECT url FROM constructors WHERE constructorid IN ( SELECT driverid FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson' )"
        ]
      ]
    },
    {
      "id": 918,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
          "SELECT driverref FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis'",
          "SELECT driverref FROM drivers WHERE (forename = 'Lewis' AND surname = 'Hamilton')",
          "SELECT driverref FROM drivers WHERE driverid = ( SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )"
        ]
      ]
    },
    {
      "id": 919,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
          "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT circuits.name FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';",
          "SELECT circuits.name FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;"
        ]
      ]
    },
    {
      "id": 920,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT DISTINCT races.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT DISTINCT races.year FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit';",
          "SELECT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'"
        ]
      ]
    },
    {
      "id": 921,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT races.name, races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit'",
          "SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.url = 'silverstone'"
        ]
      ]
    },
    {
      "id": 922,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit'",
          "SELECT races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit'",
          "SELECT DISTINCT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit'",
          "SELECT races.time FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit';"
        ]
      ]
    },
    {
      "id": 923,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT races.raceid) FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';",
          "SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy'",
          "SELECT count(DISTINCT races.raceid) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Italy'",
          "SELECT count(DISTINCT races.raceid) FROM circuits circuits JOIN races races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Italy';"
        ]
      ]
    },
    {
      "id": 924,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya'",
          "SELECT DISTINCT races.date FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya';",
          "SELECT races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya'",
          "SELECT DISTINCT races.date FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Barcelona-Catalunya'"
        ]
      ]
    },
    {
      "id": 925,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
          "SELECT circuits.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT DISTINCT circuits.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
          "SELECT DISTINCT circuits.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009"
        ]
      ]
    },
    {
      "id": 926,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT min(results.fastestlaptime) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT min(results.fastestlaptime) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT fastestlaptime FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY fastestlaptime LIMIT 1",
          "SELECT fastestlaptime FROM results WHERE driverid = ( SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) ORDER BY fastestlaptime LIMIT 1"
        ]
      ]
    },
    {
      "id": 927,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = ( SELECT fastestlapspeed FROM results ORDER BY fastestlapspeed DESC LIMIT 1 )",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = ( SELECT max(fastestlapspeed) FROM results )",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY cast(replace(substr(results.fastestlapspeed, 3), ':', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 928,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2007 ORDER BY results.rank LIMIT 1",
          "SELECT drivers.driverref FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2007 ORDER BY results.position LIMIT 1",
          "SELECT drivers.driverref FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2007 AND results.position = 1",
          "SELECT drivers.driverref FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2007 AND results.rank = 1"
        ]
      ]
    },
    {
      "id": 929,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 930,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank LIMIT 1",
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1",
          "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank LIMIT 1",
          "SELECT races.name FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank LIMIT 1"
        ]
      ]
    },
    {
      "id": 931,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT max(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix'",
          "SELECT max(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
          "SELECT max(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND results.fastestlapspeed IS NOT NULL"
        ]
      ]
    },
    {
      "id": 932,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT races.year FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT DISTINCT races.year FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 933,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.positionorder FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Chinese Grand Prix' AND races.year = 2008",
          "SELECT results.rank FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Chinese Grand Prix' AND races.year = 2008",
          "SELECT results.positionorder FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Chinese Grand Prix' AND races.year = '2008'",
          "SELECT results.positionorder FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Chinese Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008"
        ]
      ]
    },
    {
      "id": 934,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = '1989' AND results.grid = 4",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 1989 AND results.grid = 4",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 1989 AND results.grid = 4",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = '1989' AND results.grid = '4'"
        ]
      ]
    },
    {
      "id": 935,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT results.driverid) FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;",
          "SELECT count(DISTINCT results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL",
          "SELECT count(DISTINCT results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND results.time IS NOT NULL",
          "SELECT count(DISTINCT results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL"
        ]
      ]
    },
    {
      "id": 936,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.fastestlap FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix' AND races.year = 2008",
          "SELECT results.fastestlap FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008 AND drivers.driverref = 'hamilton'",
          "SELECT results.fastestlap FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix' AND races.year = '2008'",
          "SELECT results.fastestlap FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix' AND races.year = 2008 AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 937,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Chinese Grand Prix' AND results.rank = 2 AND races.year = 2008",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2008 AND results.rank = 2",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND results.rank = 2",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2008 AND results.position = 2"
        ]
      ]
    },
    {
      "id": 938,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, races.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 939,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE drivers.nationality = 'British' AND races.year = 2008 AND races.name = 'Australian Grand Prix';",
          "SELECT count(DISTINCT drivers.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND drivers.nationality = 'British'",
          "SELECT count(DISTINCT drivers.driverid) FROM races races JOIN results results ON races.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND drivers.nationality = 'British';",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND drivers.nationality = 'British'"
        ]
      ]
    },
    {
      "id": 940,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND results.time IS NOT NULL;",
          "SELECT count(DISTINCT results.driverid) FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND results.time IS NOT NULL;",
          "SELECT count(DISTINCT results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND results.time IS NOT NULL",
          "SELECT count(DISTINCT results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND results.time IS NOT NULL"
        ]
      ]
    },
    {
      "id": 941,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT sum(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT sum(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT sum(results.points) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT total(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 942,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(results.fastestlaptime) AS REAL) / count(results.fastestlaptime) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT cast(sum(results.fastestlaptime) AS REAL) / count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(cast(replace(substr(results.fastestlaptime, 4), ':', '') AS REAL)) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT cast(sum(replace(results.fastestlaptime, ':', '')) AS REAL) / count(results.fastestlaptime) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 943,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(count(CASE WHEN results.time IS NOT NULL THEN races.raceid ELSE NULL END) AS REAL) * 100 / count(races.raceid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT cast(sum(CASE WHEN results.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT cast(sum(CASE WHEN results.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'",
          "SELECT cast(sum(CASE WHEN results.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.time) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'"
        ]
      ]
    },
    {
      "id": 944,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast((results.milliseconds - ( SELECT results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1 )) AS REAL) * 100 / ( SELECT results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1 )",
          "SELECT cast((results.milliseconds - ( SELECT results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1 ) ) AS REAL) * 100 / ( SELECT results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1 )",
          "SELECT cast((replace(results.time, ':', '') - replace(results.fastestlaptime, ':', '')) AS REAL) * 100 / replace(results.fastestlaptime, ':', '') FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT cast((results.milliseconds - ( SELECT results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1 )) AS REAL) * 100 / ( SELECT results.milliseconds FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1 ) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 945,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(circuitid) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Adelaide'",
          "SELECT count(name) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Adelaide'",
          "SELECT count(*) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Adelaide'",
          "SELECT count(circuitid) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Melbourne'"
        ]
      ]
    },
    {
      "id": 946,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT lat, lng FROM circuits WHERE country = 'USA'",
          "SELECT lat, lng FROM circuits WHERE country = 'USA';",
          "SELECT DISTINCT lat, lng FROM circuits WHERE country = 'USA'",
          "SELECT DISTINCT lat, lng FROM circuits WHERE country = 'USA';"
        ]
      ]
    },
    {
      "id": 947,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM drivers WHERE dob > '1980-12-31' AND nationality = 'British'",
          "SELECT count(driverid) FROM drivers WHERE dob > '1980-12-31' AND nationality = 'British';",
          "SELECT count(driverid) FROM drivers WHERE strftime('%Y', dob) > '1980' AND nationality = 'British'",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'British' AND dob > '1980-12-31';"
        ]
      ]
    },
    {
      "id": 948,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(constructorresults.points) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'British'",
          "SELECT max(results.points) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE constructors.nationality = 'British'",
          "SELECT max(results.points) FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE constructors.nationality = 'British'",
          "SELECT max(constructorresults.points) FROM constructors constructors JOIN constructorresults constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'British';"
        ]
      ]
    },
    {
      "id": 949,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM constructors WHERE constructorid IN (SELECT constructorid FROM constructorresults WHERE points = (SELECT max(points) FROM constructorresults));",
          "SELECT name FROM constructors WHERE constructorid IN (SELECT constructorid FROM constructorresults WHERE points = (SELECT max(points) FROM constructorresults WHERE points IS NOT NULL));",
          "SELECT name FROM constructors WHERE constructorid = (SELECT constructorid FROM constructorresults ORDER BY points DESC LIMIT 1);",
          "SELECT name FROM constructors WHERE constructorid = ( SELECT constructorid FROM constructorresults ORDER BY points DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 950,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM constructors WHERE constructorid IN (SELECT constructorid FROM constructorstandings WHERE raceid = 291 AND points = 0);",
          "SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.raceid = 291 AND constructorstandings.points = 0",
          "SELECT DISTINCT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.raceid = 291 AND constructorstandings.points = 0",
          "SELECT name FROM constructors WHERE constructorid IN (SELECT constructorid FROM constructorstandings WHERE raceid = 291 AND POSITION = 1 AND points = 0);"
        ]
      ]
    },
    {
      "id": 951,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(constructorresults.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Japanese' AND constructorresults.points = 0 GROUP BY constructorresults.constructorid HAVING count(constructorresults.raceid) = 2",
          "SELECT count(constructorresults.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Japanese' GROUP BY constructorresults.constructorid HAVING count(constructorresults.raceid) = 2 AND sum(constructorresults.points) = 0",
          "SELECT count(constructorresults.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Japanese' GROUP BY constructorresults.constructorid HAVING count(DISTINCT races.raceid) = 2 AND sum(constructorresults.points) = 0",
          "SELECT count(DISTINCT constructors.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE constructors.nationality = 'Japanese' AND races.raceid IN ( SELECT raceid FROM races GROUP BY raceid HAVING count(raceid) = 2 ) AND constructorresults.points = 0"
        ]
      ]
    },
    {
      "id": 952,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name FROM constructors WHERE constructorid IN (SELECT constructorid FROM results WHERE rank = 1);",
          "SELECT constructors.name FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.rank = 1",
          "SELECT name FROM constructors WHERE constructorid IN (SELECT constructorid FROM constructorresults WHERE rank = 1);",
          "SELECT DISTINCT constructors.name FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.rank = 1"
        ]
      ]
    },
    {
      "id": 953,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.constructorid) FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.laps > 50 AND constructors.nationality = 'French'",
          "SELECT count(results.constructorid) FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50",
          "SELECT count(DISTINCT constructors.name) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50",
          "SELECT count(DISTINCT constructors.name) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE results.laps > 50 AND constructors.nationality = 'French'"
        ]
      ]
    },
    {
      "id": 954,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN races.year BETWEEN 2007 AND 2009 THEN 1 ELSE 0 END) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.nationality = 'Japanese'",
          "SELECT cast(sum(CASE WHEN races.year BETWEEN 2007 AND 2009 THEN 1 ELSE 0 END) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.nationality = 'Japanese' AND results.time IS NOT NULL",
          "SELECT cast(sum(CASE WHEN races.year BETWEEN 2007 AND 2009 THEN 1 ELSE 0 END) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN races ON drivers.driverid = races.driverid WHERE drivers.nationality = 'Japanese' AND races.time IS NOT NULL",
          "SELECT cast(sum(CASE WHEN races.year BETWEEN 2007 AND 2009 THEN 1 ELSE 0 END) AS REAL) * 100 / count(drivers.driverid) FROM drivers drivers JOIN races races ON drivers.driverid = races.driverid WHERE drivers.nationality = 'Japanese';"
        ]
      ]
    },
    {
      "id": 955,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(cast(replace(substr(results.time, 2), ':', '') AS REAL)) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year < 1975 AND results.time IS NOT NULL",
          "SELECT avg(cast(replace(substr(results.time, 3), ':', '') AS REAL)) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year < 1975 AND results.time IS NOT NULL",
          "SELECT avg(cast(replace(substr(results.time, 3), ':', '') AS REAL)) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year < 1975",
          "SELECT avg(cast(replace(substr(results.time, 2), ':', '') AS REAL)) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year < 1975"
        ]
      ]
    },
    {
      "id": 956,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.dob > '1975-12-31' AND results.rank = 2",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE strftime('%Y', drivers.dob) > '1975' AND driverstandings.rank = 2",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE strftime('%Y', drivers.dob) > '1975' AND driverstandings.position = 2",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE driverstandings.rank = 2 AND strftime('%Y', drivers.dob) > '1975'"
        ]
      ]
    },
    {
      "id": 957,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers LEFT JOIN results results ON drivers.driverid = results.driverid WHERE drivers.nationality = 'Italian' AND results.time IS NULL;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid WHERE drivers.nationality = 'Italian' AND results.time IS NULL;",
          "SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.nationality = 'Italian' AND results.time IS NULL",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers LEFT JOIN results results ON drivers.driverid = results.driverid WHERE drivers.nationality = 'Italian' AND (results.time IS NULL OR results.time = '');"
        ]
      ]
    },
    {
      "id": 958,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlaptime DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlaptime LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.fastestlaptime DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY cast(replace(substr(results.fastestlaptime, 3), ':', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 959,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT fastestlap FROM results WHERE YEAR = 2009 ORDER BY fastestlap DESC LIMIT 1",
          "SELECT fastestlaptime FROM results WHERE YEAR = 2009 ORDER BY fastestlaptime LIMIT 1",
          "SELECT fastestlaptime FROM results WHERE YEAR = 2009 ORDER BY fastestlaptime DESC LIMIT 1",
          "SELECT fastestlaptime FROM RESULTS WHERE YEAR = 2009 ORDER BY fastestlaptime LIMIT 1"
        ]
      ]
    },
    {
      "id": 960,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT avg(cast(fastestlapspeed AS REAL)) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT avg(cast(results.fastestlapspeed AS REAL)) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
          "SELECT avg(fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009"
        ]
      ]
    },
    {
      "id": 961,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name, races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds IS NOT NULL ORDER BY laptimes.milliseconds ASC LIMIT 1",
          "SELECT races.name, races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds IS NOT NULL ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT races.name, races.year FROM races INNER JOIN results ON races.raceid = results.raceid WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1",
          "SELECT races.name, races.year FROM races races JOIN laptimes laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds IS NOT NULL ORDER BY laptimes.milliseconds ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 962,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN races.year < drivers.dob AND results.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year BETWEEN 2000 AND 2005",
          "SELECT cast(sum(CASE WHEN races.year < drivers.dob AND results.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON drivers.driverid = results.driverid WHERE races.year BETWEEN 2000 AND 2005",
          "SELECT cast(sum(CASE WHEN drivers.dob < '1985-01-01' AND results.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE strftime('%Y', drivers.dob) BETWEEN '2000' AND '2005'",
          "SELECT cast(sum(CASE WHEN drivers.dob < '1985-01-01' AND results.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE strftime('%Y', races.date) BETWEEN '2000' AND '2005'"
        ]
      ]
    },
    {
      "id": 963,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.time < '02:00:00';",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND cast(substr(laptimes.time, 3, 2) AS INTEGER) * 60 + cast(substr(laptimes.time, 6, 2) AS INTEGER) < 120;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.time < '02:00:00' AND cast(substr(laptimes.time, 3, 2) AS INTEGER) * 60 + cast(substr(laptimes.time, 6, 2) AS INTEGER) < 120;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND cast(substr(laptimes.time, 3, 2) AS INTEGER) < 20 AND cast(substr(laptimes.time, 6, 2) AS INTEGER) < 20;"
        ]
      ]
    },
    {
      "id": 964,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT code FROM drivers WHERE nationality = 'American'",
          "SELECT code FROM drivers WHERE nationality = 'American';",
          "SELECT DISTINCT code FROM drivers WHERE nationality = 'American'",
          "SELECT DISTINCT code FROM drivers WHERE nationality = 'American';"
        ]
      ]
    },
    {
      "id": 965,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT raceid FROM races WHERE substr(YEAR, 1, 4) = '2009';",
          "SELECT DISTINCT raceid FROM races WHERE substr(YEAR, 1, 4) = '2009';",
          "SELECT raceid FROM races WHERE substr(`date`, 1, 4) = '2009';",
          "SELECT raceid FROM races WHERE strftime('%Y', date) = '2009';"
        ]
      ]
    },
    {
      "id": 966,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT driverid) FROM driverstandings WHERE raceid = 18;",
          "SELECT count(driverid) FROM driverstandings WHERE raceid = 18",
          "SELECT count(DISTINCT driverid) FROM results WHERE raceid = 18;",
          "SELECT count(DISTINCT driverid) FROM driverstandings WHERE raceid = 18"
        ]
      ]
    },
    {
      "id": 967,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(code) FROM drivers WHERE nationality = 'Netherlands' AND driverid IN (SELECT driverid FROM driverstandings WHERE POSITION = 1 ORDER BY driverid DESC LIMIT 3);",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN circuits circuits ON drivers.code = circuits.circuitid WHERE drivers.dob IS NOT NULL AND drivers.nationality = 'Netherlands' AND circuits.country = 'Netherlands' ORDER BY drivers.dob DESC LIMIT 3;",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN circuits circuits ON drivers.code = circuits.circuitid WHERE drivers.dob IS NOT NULL AND drivers.nationality = 'Netherlands' AND drivers.driverid IN (SELECT driverid FROM driverstandings ORDER BY position DESC LIMIT 3);",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN circuits circuits ON drivers.code = circuits.circuitid WHERE drivers.dob IS NOT NULL AND drivers.nationality = 'Netherlands' AND circuits.country = 'Netherlands' AND drivers.driverid IN (SELECT driverid FROM driverstandings ORDER BY position DESC LIMIT 3);"
        ]
      ]
    },
    {
      "id": 968,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
          "SELECT driverref FROM drivers WHERE surname = 'Kubica' AND forename = 'Robert'",
          "SELECT driverref FROM drivers WHERE (forename = 'Robert' AND surname = 'Kubica')",
          "SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';"
        ]
      ]
    },
    {
      "id": 969,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(driverid) FROM drivers WHERE strftime('%Y', dob) = '1980' AND nationality = 'British'",
          "SELECT count(driverid) FROM drivers WHERE dob LIKE '1980%' AND nationality = 'British'",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'British' AND strftime('%Y', dob) = '1980'",
          "SELECT count(driverid) FROM drivers WHERE nationality = 'British' AND strftime('%Y', dob) = '1980';"
        ]
      ]
    },
    {
      "id": 970,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time ASC LIMIT 3",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time LIMIT 3",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' ORDER BY laptimes.time ASC LIMIT 3",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' ORDER BY laptimes.time LIMIT 3"
        ]
      ]
    },
    {
      "id": 971,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1",
          "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1",
          "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1;",
          "SELECT driverref FROM drivers WHERE nationality = 'German' AND dob IS NOT NULL ORDER BY dob ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 972,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT d.driverid, d.code FROM drivers d JOIN results r ON d.driverid = r.driverid WHERE d.dob LIKE '1971%' AND r.fastestlaptime IS NOT NULL;",
          "SELECT drivers.driverid, drivers.code FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid WHERE drivers.dob LIKE '1971%' AND results.fastestlaptime IS NOT NULL;",
          "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.dob LIKE '1971%' AND results.fastestlaptime IS NOT NULL",
          "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.dob LIKE '1971%' ORDER BY results.fastestlaptime LIMIT 1"
        ]
      ]
    },
    {
      "id": 973,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'Spanish' AND drivers.dob < '1982-01-01' ORDER BY laptimes.time DESC LIMIT 10",
          "SELECT d.forename, d.surname FROM drivers d JOIN laptimes l ON d.driverid = l.driverid WHERE d.nationality = 'Spanish' AND d.dob < '1982-01-01' ORDER BY l.time DESC LIMIT 10;",
          "SELECT drivers.forename, drivers.surname FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'Spanish' AND drivers.dob < '1982-01-01' ORDER BY laptimes.time DESC LIMIT 10;",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'Spanish' AND strftime('%Y', drivers.dob) < '1982' ORDER BY laptimes.time DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 974,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceid = results.raceid WHERE results.fastestlaptime IS NOT NULL",
          "SELECT DISTINCT races.year FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.fastestlaptime IS NOT NULL",
          "SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime LIMIT 1",
          "SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceid = results.raceid WHERE results.fastestlaptime IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 975,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT YEAR FROM (SELECT YEAR, max(milliseconds) AS maxtime FROM laptimes GROUP BY YEAR) WHERE maxtime = (SELECT max(milliseconds) FROM laptimes);",
          "SELECT DISTINCT races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid ORDER BY cast(replace(substr(laptimes.time, 2), ':', '') AS REAL) DESC LIMIT 1",
          "SELECT races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid ORDER BY cast(replace(substr(laptimes.time, 2), ':', '') AS REAL) DESC LIMIT 1",
          "SELECT DISTINCT races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid ORDER BY cast(replace(substr(laptimes.time, 3), ':', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 976,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverid FROM results ORDER BY fastestlaptime LIMIT 5",
          "SELECT driverid FROM (SELECT driverid, min(time) AS fastesttime FROM laptimes GROUP BY driverid) WHERE fastesttime IS NOT NULL ORDER BY fastesttime DESC LIMIT 5;",
          "SELECT driverid FROM results WHERE fastestlaptime = ( SELECT min(fastestlaptime) FROM results ) LIMIT 5",
          "SELECT driverid FROM results WHERE fastestlaptime = ( SELECT min(fastestlaptime) FROM results ) ORDER BY fastestlaptime DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 977,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.raceid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND results.raceid BETWEEN 50 AND 100",
          "SELECT count(raceid) FROM results WHERE statusid = 2 AND raceid BETWEEN 50 AND 100",
          "SELECT count(results.raceid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE results.raceid BETWEEN 50 AND 100 AND status.status = 'Disqualified'",
          "SELECT count(results.raceid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE results.raceid BETWEEN 50 AND 100 AND status.status = 'Disqualified' AND results.time IS NOT NULL"
        ]
      ]
    },
    {
      "id": 978,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT name, location, lat, lng FROM circuits WHERE country = 'Austria'",
          "SELECT name, lat, lng FROM circuits WHERE country = 'Austria'",
          "SELECT name, LOCATION, lat, lng FROM circuits WHERE country = 'Austria'",
          "SELECT location, lat, lng FROM circuits WHERE country = 'Austria'"
        ]
      ]
    },
    {
      "id": 979,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.number FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.time IS NOT NULL GROUP BY results.number ORDER BY count(results.number) DESC LIMIT 1",
          "SELECT raceid FROM results WHERE TIME IS NOT NULL GROUP BY raceid HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM results WHERE TIME IS NOT NULL GROUP BY raceid));",
          "SELECT results.number FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.time IS NOT NULL GROUP BY results.number ORDER BY count(results.time) DESC LIMIT 1",
          "SELECT results.number FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.time IS NOT NULL GROUP BY results.raceid ORDER BY count(results.number) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 980,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL",
          "SELECT drivers.driverref, drivers.nationality, drivers.dob FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL",
          "SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL;",
          "SELECT DISTINCT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL"
        ]
      ]
    },
    {
      "id": 981,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.year, races.date, races.time FROM qualifying INNER JOIN races ON qualifying.raceid = races.raceid ORDER BY drivers.dob LIMIT 1",
          "SELECT races.year, races.date, races.time FROM qualifying INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN drivers ON qualifying.driverid = drivers.driverid ORDER BY drivers.dob LIMIT 1",
          "SELECT races.year, races.date, races.time FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid JOIN races races ON qualifying.raceid = races.raceid ORDER BY drivers.dob LIMIT 1;",
          "SELECT races.year, races.date, races.time FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid JOIN races races ON qualifying.raceid = races.raceid WHERE drivers.dob = (SELECT min(dob) FROM drivers)"
        ]
      ]
    },
    {
      "id": 982,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN status status ON results.statusid = status.statusid WHERE drivers.nationality = 'American' AND status.status = 'Puncture';",
          "SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN status status ON results.statusid = status.statusid WHERE status.status = 'Puncture' AND drivers.nationality = 'American';",
          "SELECT count(DISTINCT results.driverid) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE status.status = 'Puncture' AND drivers.nationality = 'American'",
          "SELECT count(DISTINCT d.driverid) FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN status s ON r.statusid = s.statusid WHERE d.nationality = 'American' AND s.status = 'Puncture';"
        ]
      ]
    },
    {
      "id": 983,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.name, constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT name, url FROM constructors WHERE nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT url FROM constructors WHERE nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1",
          "SELECT name, url FROM constructors WHERE nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 984,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY sum(constructorstandings.wins) DESC LIMIT 1",
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid ORDER BY constructorstandings.wins DESC LIMIT 1",
          "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY count(constructorstandings.wins) DESC LIMIT 1",
          "SELECT url FROM constructors WHERE constructorid IN (SELECT constructorid FROM constructorstandings WHERE wins = (SELECT max(wins) FROM constructorstandings WHERE wins IS NOT NULL));"
        ]
      ]
    },
    {
      "id": 985,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'French Grand Prix' ORDER BY results.time DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'French Grand Prix' ORDER BY results.time LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'French Grand Prix' ORDER BY cast(replace(substr(results.time, 3), ':', '') AS REAL) DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'French Grand Prix' ORDER BY cast(replace(substr(results.time, 4), ':', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 986,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.raceid, results.milliseconds FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime LIMIT 1",
          "SELECT races.raceid, laptimes.milliseconds FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT races.raceid, laptimes.milliseconds FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid ORDER BY laptimes.milliseconds ASC LIMIT 1",
          "SELECT races.raceid, laptimes.milliseconds FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid ORDER BY cast(replace(substr(laptimes.time, 3), ':', '') AS REAL) LIMIT 1"
        ]
      ]
    },
    {
      "id": 987,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(sum(results.fastestlaptime) AS REAL) / count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2006 ORDER BY results.rank ASC LIMIT 10",
          "SELECT avg(cast(substr(results.fastestlaptime, 3) AS REAL)) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2006 ORDER BY results.rank ASC LIMIT 10",
          "SELECT cast(sum(results.fastestlaptime) AS REAL) / count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank < 11",
          "SELECT avg(cast(replace(substr(results.fastestlaptime, 3), ':', '') AS REAL)) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2006 ORDER BY results.rank ASC LIMIT 10"
        ]
      ]
    },
    {
      "id": 988,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.driverid ORDER BY sum(cast(pitstops.duration AS REAL)) / count(pitstops.duration) ASC LIMIT 3",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.driverid ORDER BY avg(cast(pitstops.duration AS REAL)) ASC LIMIT 3",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1985' GROUP BY drivers.driverid ORDER BY sum(cast(pitstops.duration AS REAL)) / count(pitstops.duration) ASC LIMIT 3",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.driverid ORDER BY sum(cast(pitstops.duration AS REAL)) / count(pitstops.duration) LIMIT 3"
        ]
      ]
    },
    {
      "id": 989,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2008 AND races.name = 'Canadian Grand Prix' ORDER BY results.milliseconds DESC LIMIT 1",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.milliseconds LIMIT 1",
          "SELECT results.fastestlaptime FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.fastestlaptime LIMIT 1"
        ]
      ]
    },
    {
      "id": 990,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT constructors.constructorref, constructors.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE races.year = 2009 ORDER BY races.time DESC LIMIT 1",
          "SELECT constructors.constructorref, constructors.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE races.name = 'Singapore Grand Prix' ORDER BY races.time DESC LIMIT 1",
          "SELECT constructors.name, constructors.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE races.name = 'Singapore Grand Prix' ORDER BY races.time DESC LIMIT 1",
          "SELECT constructors.constructorref, constructors.url FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE races.name = 'Singapore Grand Prix' AND races.year = 2009 ORDER BY races.time DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 991,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.dob BETWEEN '1981-01-01' AND '1991-12-31' AND drivers.nationality = 'Austrian'",
          "SELECT forename, surname, dob FROM drivers WHERE dob BETWEEN '1981-01-01' AND '1991-12-31' AND nationality = 'Austrian'",
          "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.nationality = 'Austrian' AND strftime('%Y', drivers.dob) BETWEEN '1981' AND '1991'",
          "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1992-12-31';"
        ]
      ]
    },
    {
      "id": 992,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC",
          "SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;",
          "SELECT forename || ' ' || surname AS fullname, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;",
          "SELECT drivers.forename, drivers.surname, drivers.url, drivers.dob FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1971' AND '1985' ORDER BY drivers.dob DESC"
        ]
      ]
    },
    {
      "id": 993,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT LOCATION, country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
          "SELECT LOCATION, country FROM circuits WHERE name = 'Hungaroring'",
          "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
          "SELECT LOCATION, country, lng, lat FROM circuits WHERE name = 'Hungaroring'"
        ]
      ]
    },
    {
      "id": 994,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.points, constructors.name, constructors.nationality FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON constructors.constructorid = results.constructorid WHERE races.year BETWEEN 1980 AND 2010 AND races.name = 'Monaco Grand Prix' ORDER BY results.points DESC LIMIT 1",
          "SELECT results.points, constructors.name, constructors.nationality FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON constructors.constructorid = results.constructorid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY results.points DESC LIMIT 1",
          "SELECT results.points, constructors.name, constructors.nationality FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE races.year BETWEEN 1980 AND 2010 AND races.name = 'Monaco Grand Prix' ORDER BY results.points DESC LIMIT 1",
          "SELECT results.points, constructors.name, constructors.nationality FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON constructors.constructorid = results.constructorid WHERE races.year BETWEEN 1980 AND 2010 ORDER BY results.points DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 995,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix'",
          "SELECT avg(results.points) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix'",
          "SELECT avg(results.points) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix'"
        ]
      ]
    },
    {
      "id": 996,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT cast(count(DISTINCT raceid) AS REAL) / 10 FROM races WHERE strftime('%Y', date) BETWEEN '2000' AND '2010';",
          "SELECT avg(races) FROM (SELECT count(raceid) AS races FROM races WHERE substr(YEAR, 1, 4) BETWEEN '2000' AND '2010' GROUP BY substr(YEAR, 1, 4))",
          "SELECT avg(races) FROM (SELECT count(raceid) AS races FROM races WHERE substr(YEAR, 1, 4) BETWEEN '2000' AND '2010' GROUP BY YEAR)",
          "SELECT cast(count(raceid) AS REAL) / 10 FROM races WHERE substr(YEAR, 1, 4) >= '2000' AND substr(YEAR, 1, 4) < '2011';"
        ]
      ]
    },
    {
      "id": 997,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT nationality FROM drivers GROUP BY nationality HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM drivers GROUP BY nationality));",
          "SELECT nationality FROM drivers GROUP BY nationality HAVING count(nationality) = (SELECT max(driver_count) FROM (SELECT count(nationality) AS driver_count FROM drivers GROUP BY nationality));",
          "SELECT nationality FROM drivers GROUP BY nationality HAVING count(*) = (SELECT max(driver_count) FROM (SELECT count(*) AS driver_count FROM drivers GROUP BY nationality));",
          "SELECT nationality FROM drivers GROUP BY nationality HAVING count(driverid) = (SELECT max(driver_count) FROM (SELECT count(driverid) AS driver_count FROM drivers GROUP BY nationality));"
        ]
      ]
    },
    {
      "id": 998,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT wins FROM driverstandings WHERE POSITION = 91",
          "SELECT wins FROM driverstandings WHERE rank = 91",
          "SELECT driverstandings.wins FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE driverstandings.position = 91",
          "SELECT driverstandings.wins FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE driverstandings.rank = 91"
        ]
      ]
    },
    {
      "id": 999,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime LIMIT 1",
          "SELECT name FROM races WHERE raceid IN (SELECT raceid FROM results WHERE fastestlapspeed = (SELECT min(fastestlapspeed) FROM results WHERE fastestlapspeed IS NOT NULL));",
          "SELECT name FROM races WHERE raceid IN (SELECT raceid FROM results WHERE fastestlapspeed = (SELECT min(fastestlapspeed) FROM results WHERE fastestlapspeed IS NOT NULL))",
          "SELECT races.name FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY cast(replace(substr(results.fastestlaptime, 3), ':', '') AS REAL) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1000,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.location, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid ORDER BY races.date DESC LIMIT 1",
          "SELECT circuits.location, circuits.country FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.date = (SELECT max(date) FROM races);",
          "SELECT circuits.location, circuits.country FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.date = (SELECT max(DATE) FROM races);",
          "SELECT circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid ORDER BY races.date DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1001,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' ORDER BY qualifying.q3 LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' ORDER BY qualifying.q3 ASC LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' ORDER BY cast(replace(qualifying.q3, ':', '') AS REAL) LIMIT 1",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' ORDER BY cast(replace(substr(qualifying.q3, 3), ',', '') AS REAL) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1002,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM drivers INNER JOIN races ON drivers.driverid = races.driverid ORDER BY drivers.dob DESC LIMIT 1",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM drivers drivers JOIN races races ON drivers.driverid = races.driverid WHERE drivers.dob = (SELECT max(dob) FROM drivers);",
          "SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM races INNER JOIN drivers ON races.driverid = drivers.driverid ORDER BY drivers.dob DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1003,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident'",
          "SELECT count(results.statusid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Canadian Grand Prix' AND results.statusid = 3",
          "SELECT count(*) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident' AND results.driverid = ( SELECT driverid FROM driverstandings ORDER BY wins DESC LIMIT 1 )",
          "SELECT count(results.resultid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident' AND results.driverid = ( SELECT driverid FROM driverstandings ORDER BY wins DESC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 1004,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY drivers.dob LIMIT 1",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid ORDER BY drivers.dob LIMIT 1",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM drivers drivers JOIN driverstandings driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.dob = (SELECT min(dob) FROM drivers);",
          "SELECT driverstandings.wins, drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY drivers.dob ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1005,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(duration) FROM pitstops",
          "SELECT max(cast(duration AS REAL)) FROM pitstops",
          "SELECT max(duration) FROM pitstops;",
          "SELECT max(cast(duration AS INTEGER)) FROM pitstops"
        ]
      ]
    },
    {
      "id": 1006,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.time FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime DESC LIMIT 1",
          "SELECT races.time FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlapspeed DESC LIMIT 1",
          "SELECT races.time FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid ORDER BY laptimes.milliseconds DESC LIMIT 1",
          "SELECT races.time FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime LIMIT 1"
        ]
      ]
    },
    {
      "id": 1007,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT max(pitstops.duration) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT max(pitstops.duration) FROM drivers drivers JOIN pitstops pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT max(P.duration) FROM drivers D JOIN pitstops P ON D.driverid = P.driverid WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton';",
          "SELECT max(duration) FROM pitstops WHERE driverid = ( SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )"
        ]
      ]
    },
    {
      "id": 1008,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT pitstops.lap FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2011",
          "SELECT DISTINCT pitstops.lap FROM drivers drivers JOIN pitstops pitstops ON drivers.driverid = pitstops.driverid JOIN races races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2011;",
          "SELECT DISTINCT pitstops.lap FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2011",
          "SELECT pitstops.lap FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix'"
        ]
      ]
    },
    {
      "id": 1009,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix'",
          "SELECT DISTINCT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.year = 2011",
          "SELECT DISTINCT drivers.driverid, pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid INNER JOIN drivers ON drivers.driverid = pitstops.driverid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix'",
          "SELECT DISTINCT pitstops.duration, drivers.forename, drivers.surname FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid INNER JOIN drivers ON drivers.driverid = pitstops.driverid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix'"
        ]
      ]
    },
    {
      "id": 1010,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.laps FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT results.fastestlap FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT results.laps FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.time LIMIT 1",
          "SELECT results.laps FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.fastestlap = 'YES'"
        ]
      ]
    },
    {
      "id": 1011,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY laptimes.time LIMIT 20",
          "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid ORDER BY laptimes.time LIMIT 20",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY cast(replace(substr(laptimes.time, instr(laptimes.time, ':') + 1), '.', '') AS REAL) LIMIT 20",
          "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY cast(replace(substr(laptimes.time, 3), ':', '') AS REAL) LIMIT 20"
        ]
      ]
    },
    {
      "id": 1012,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.position FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.fastestlaptime LIMIT 1",
          "SELECT results.position FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT results.position FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN laptimes ON results.raceid = laptimes.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT results.position FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY laptimes.time LIMIT 1"
        ]
      ]
    },
    {
      "id": 1013,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix'",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY results.time LIMIT 1",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY results.time DESC LIMIT 1",
          "SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY results.time ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1014,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT laptimes.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE circuits.country = 'Italy'",
          "SELECT laptimes.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE circuits.country = 'Italy'",
          "SELECT DISTINCT r.time FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE c.country = 'Italy';",
          "SELECT circuits.name, laptimes.time FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE circuits.country = 'Italy'"
        ]
      ]
    },
    {
      "id": 1015,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY results.milliseconds LIMIT 1",
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds DESC LIMIT 1",
          "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds LIMIT 1",
          "SELECT races.name FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix' AND results.time = (SELECT min(results.time) FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.name = 'Austrian Grand Prix');"
        ]
      ]
    },
    {
      "id": 1016,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.name = 'Austrian Grand Prix'",
          "SELECT DISTINCT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.name = 'Austrian Grand Prix'",
          "SELECT DISTINCT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.name = 'Austrian Grand Prix' AND pitstops.time IS NOT NULL",
          "SELECT DISTINCT pitstops.duration FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN pitstops ON results.raceid = pitstops.raceid WHERE races.name = 'Austrian Grand Prix'"
        ]
      ]
    },
    {
      "id": 1017,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488'",
          "SELECT circuits.lat, circuits.lng FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE laptimes.time = '1:29.488'",
          "SELECT circuits.lat, circuits.lng FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE laptimes.time = '1:29.488'",
          "SELECT lat, lng FROM circuits WHERE circuitid IN (SELECT raceid FROM laptimes WHERE TIME = '1:29.488');"
        ]
      ]
    },
    {
      "id": 1018,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(pitstops.milliseconds) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(cast(pitstops.milliseconds AS INTEGER)) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
          "SELECT avg(cast(pitstops.milliseconds AS INTEGER)) FROM drivers drivers JOIN pitstops pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
          "SELECT cast(sum(pitstops.milliseconds) AS REAL) / count(pitstops.driverid) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'"
        ]
      ]
    },
    {
      "id": 1019,
      "db_id": "formula_1",
      "infer_predictions": [
        [
          "SELECT avg(milliseconds) FROM laptimes WHERE raceid IN (SELECT raceid FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE country = 'Italy');",
          "SELECT avg(cast(milliseconds AS INTEGER)) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy'",
          "SELECT avg(milliseconds) FROM laptimes WHERE raceid IN (SELECT raceid FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy');",
          "SELECT avg(cast(milliseconds AS INTEGER)) FROM laptimes WHERE raceid IN (SELECT raceid FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy');"
        ]
      ]
    },
    {
      "id": 1020,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1",
          "SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1;",
          "SELECT player_api_id FROM player_attributes WHERE overall_rating = ( SELECT max(overall_rating) FROM player_attributes )",
          "SELECT player_fifa_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1021,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT height, player_name FROM player WHERE height = ( SELECT max(height) FROM player )",
          "SELECT height, player_name FROM player WHERE height = (SELECT max(height) FROM player);",
          "SELECT height, player_name FROM player ORDER BY height DESC LIMIT 1",
          "SELECT player.height, player.player_name FROM player player WHERE player.height = (SELECT max(height) FROM player);"
        ]
      ]
    },
    {
      "id": 1022,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT preferred_foot FROM player_attributes WHERE potential = ( SELECT min(potential) FROM player_attributes )",
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player_attributes ORDER BY potential ASC LIMIT 1);",
          "SELECT preferred_foot FROM player_attributes ORDER BY potential ASC LIMIT 1",
          "SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT min(potential) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1023,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.defensive_work_rate LIKE 'low'",
          "SELECT count(*) FROM player_attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';",
          "SELECT count(*) FROM player_attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.defensive_work_rate = 'low'"
        ]
      ]
    },
    {
      "id": 1024,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN MATCH ON player_attributes.player_api_id = MATCH.home_player_1 OR player_attributes.player_api_id = MATCH.home_player_2 OR player_attributes.player_api_id = MATCH.home_player_3 OR player_attributes.player_api_id = MATCH.home_player_4 OR player_attributes.player_api_id = MATCH.home_player_5 OR player_attributes.player_api_id = MATCH.home_player_6 OR player_attributes.player_api_id = MATCH.home_player_7 OR player_attributes.player_api_id = MATCH.home_player_8 OR player_attributes.player_api_id = MATCH.home_player_9 OR player_attributes.player_api_id = MATCH.home_player_10 OR player_attributes.player_api_id = MATCH.home_player_11 ORDER BY player_attributes.crossing DESC LIMIT 5",
          "SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5",
          "SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5;",
          "SELECT player_attributes.player_api_id FROM player_attributes player_attributes WHERE player_attributes.crossing = (SELECT max(crossing) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1025,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2016/2017' GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) - sum(MATCH.away_team_goal) DESC LIMIT 1",
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016' GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) - sum(MATCH.away_team_goal) DESC LIMIT 1",
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2016/2017' GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) + sum(MATCH.away_team_goal) DESC LIMIT 1",
          "SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' GROUP BY league.name ORDER BY sum(match.home_team_goal) - sum(match.away_team_goal) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1026,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) ASC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(*) ASC LIMIT 1",
          "SELECT team.team_long_name FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) ASC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1027,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes ORDER BY penalties DESC LIMIT 10);",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE penalties = (SELECT max(penalties) FROM player_attributes));",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1028,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id INNER JOIN league ON league.id = MATCH.league_id WHERE league.name = 'Scotland Premier League' AND MATCH.season = '2009/2010' GROUP BY team.team_long_name ORDER BY sum(MATCH.away_team_goal - MATCH.home_team_goal) DESC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id INNER JOIN league ON league.id = MATCH.league_id WHERE league.name = 'Scotland Premier League' AND MATCH.season = '2009/2010' GROUP BY team.team_long_name ORDER BY sum(CASE WHEN MATCH.away_team_goal - MATCH.home_team_goal > 0 THEN 1 ELSE 0 END) DESC LIMIT 1",
          "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id INNER JOIN league ON league.id = MATCH.league_id WHERE league.name = 'Scotland Premier League' AND MATCH.season = '2009/2010' GROUP BY team.team_long_name ORDER BY sum(CASE WHEN MATCH.away_team_goal > MATCH.home_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1",
          "SELECT team.team_long_name FROM league league JOIN MATCH MATCH ON league.id = MATCH.league_id JOIN team team ON MATCH.away_team_api_id = team.team_api_id WHERE league.name = 'Scotland Premier League' AND MATCH.season = '2009/2010' AND MATCH.away_team_goal - MATCH.home_team_goal > 0 GROUP BY team.team_long_name ORDER BY count(*) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1029,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplayspeed FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4",
          "SELECT team_attributes.buildupplayspeed FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4",
          "SELECT max(team_attributes.buildupplayspeed) FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4",
          "SELECT team_attributes.buildupplayspeed FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 0, 4"
        ]
      ]
    },
    {
      "id": 1030,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016' GROUP BY league.name ORDER BY sum(CASE WHEN MATCH.home_team_goal = MATCH.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1",
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2016/2017' GROUP BY league.name ORDER BY sum(CASE WHEN MATCH.home_team_goal = MATCH.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1",
          "SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY sum(CASE WHEN match.home_team_goal = match.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1",
          "SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' GROUP BY league.name ORDER BY sum(CASE WHEN match.home_team_goal = match.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1031,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.sprint_speed >= 97 AND strftime('%Y', player_attributes.date) BETWEEN '2013' AND '2015'",
          "SELECT player.id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.sprint_speed >= 97 AND strftime('%Y', player_attributes.date) BETWEEN '2013' AND '2015'",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.sprint_speed >= 97 AND strftime('%Y', player_attributes.`date`) BETWEEN '2013' AND '2015'",
          "SELECT player.player_name FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.sprint_speed >= 97 AND strftime('%Y', player_attributes.date) BETWEEN '2013' AND '2015';"
        ]
      ]
    },
    {
      "id": 1032,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name, count(match.league_id) FROM league INNER JOIN MATCH ON league.id = match.league_id GROUP BY league.name ORDER BY count(match.league_id) DESC LIMIT 1",
          "SELECT league.name, count(match.id) FROM league league JOIN MATCH MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY count(MATCH.id) DESC LIMIT 1;",
          "SELECT league.name, (SELECT count(*) FROM MATCH WHERE league_id = league.id) AS matches FROM league league WHERE league.id IN (SELECT league_id FROM MATCH GROUP BY league_id HAVING count(*) = (SELECT max(match_count) FROM (SELECT count(*) AS match_count FROM MATCH GROUP BY league_id)))",
          "SELECT league.name, (SELECT count(*) FROM MATCH WHERE league_id = league.id) AS total_matches FROM league league WHERE league.id IN (SELECT league_id FROM MATCH GROUP BY league_id HAVING count(*) = (SELECT max(match_count) FROM (SELECT count(*) AS match_count FROM MATCH GROUP BY league_id)))"
        ]
      ]
    },
    {
      "id": 1033,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(height) FROM player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1995-12-31 23:59:59'",
          "SELECT avg(height) FROM player WHERE birthday LIKE '1990%' OR birthday LIKE '1991%' OR birthday LIKE '1992%' OR birthday LIKE '1993%' OR birthday LIKE '1994%' OR birthday LIKE '1995%'",
          "SELECT avg(height) FROM player WHERE cast(strftime('%Y', birthday) AS INT) BETWEEN 1990 AND 1995",
          "SELECT avg(height) FROM player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1995-12-31 23:59:59';"
        ]
      ]
    },
    {
      "id": 1034,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_api_id FROM player_attributes WHERE substr(date, 1, 4) = '2010' AND overall_rating = (SELECT max(overall_rating) FROM player_attributes WHERE substr(date, 1, 4) = '2010');",
          "SELECT player_api_id FROM player_attributes WHERE substr(date, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE substr(player_attributes.date, 1, 4) = '2010' ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_api_id FROM player_attributes WHERE substr(date, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1035,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_fifa_api_id FROM team_attributes WHERE buildupplayspeed > 50 AND buildupplayspeed < 60",
          "SELECT team_fifa_api_id FROM team_attributes WHERE buildupplayspeed > 50 AND buildupplayspeed < 60;",
          "SELECT DISTINCT team_attributes.team_fifa_api_id FROM team_attributes team_attributes WHERE team_attributes.buildupplayspeed > 50 AND team_attributes.buildupplayspeed < 60;",
          "SELECT team_attributes.team_fifa_api_id FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed > 50 AND team_attributes.buildupplayspeed < 60"
        ]
      ]
    },
    {
      "id": 1036,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name HAVING avg(team_attributes.buildupplaypassing) > 0",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name HAVING avg(team_attributes.buildupplaypassing) > 0",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name HAVING sum(team_attributes.buildupplaypassing) / count(team.team_long_name) > 60",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name HAVING sum(team_attributes.buildupplaypassing) / count(team.team_long_name) > ( SELECT avg(team_attributes.buildupplaypassing) FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL )"
        ]
      ]
    },
    {
      "id": 1037,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) BETWEEN '1987' AND '1992'",
          "SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) BETWEEN '1987' AND '1992'",
          "SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE substr(player.birthday, 1, 4) BETWEEN '1987' AND '1992'",
          "SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.player_fifa_api_id) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) BETWEEN '1987' AND '1992';"
        ]
      ]
    },
    {
      "id": 1038,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) + sum(MATCH.away_team_goal) DESC LIMIT 5",
          "SELECT league.name FROM (SELECT league_id, sum(home_team_goal + away_team_goal) AS total_goals FROM MATCH GROUP BY league_id) AS t1 JOIN league ON t1.league_id = league.id ORDER BY t1.total_goals DESC LIMIT 5;",
          "SELECT league.name FROM league league WHERE league.id IN (SELECT match.league_id FROM MATCH match GROUP BY match.league_id HAVING sum(match.home_team_goal) + sum(match.away_team_goal) IS NOT NULL ORDER BY sum(match.home_team_goal) + sum(match.away_team_goal) DESC LIMIT 5);",
          "SELECT league.name FROM league league WHERE league.id IN (SELECT match.league_id FROM MATCH match GROUP BY match.league_id HAVING sum(match.home_team_goal) + sum(match.away_team_goal) IS NOT NULL) ORDER BY sum(home_team_goal) + sum(away_team_goal) DESC LIMIT 5;"
        ]
      ]
    },
    {
      "id": 1039,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.long_shots) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'",
          "SELECT cast(sum(player_attributes.long_shots) AS REAL) / count(player_attributes.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'",
          "SELECT avg(player_attributes.long_shots) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'",
          "SELECT cast(sum(player_attributes.long_shots) AS REAL) / count(DISTINCT player_attributes.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'"
        ]
      ]
    },
    {
      "id": 1040,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY avg(player_attributes.heading_accuracy) DESC LIMIT 10",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY sum(player_attributes.heading_accuracy) / count(player.player_api_id) DESC LIMIT 10",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY sum(player_attributes.heading_accuracy) / count(player_attributes.player_api_id) DESC LIMIT 10",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY sum(player_attributes.heading_accuracy) / count(player_attributes.player_fifa_api_id) DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1041,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' ORDER BY cast(team_attributes.chancecreationpassing AS REAL) / team_attributes.chancecreationpassing DESC",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' ORDER BY cast(team_attributes.chancecreationpassing AS REAL) / team_attributes.chancecreationpassing DESC LIMIT 1",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' ORDER BY cast(team_attributes.chancecreationpassing AS REAL) / team_attributes.id DESC"
        ]
      ]
    },
    {
      "id": 1042,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT DISTINCT league.name FROM league league JOIN MATCH m ON league.id = m.league_id WHERE m.season = '2009/2010' AND m.home_team_goal > m.away_team_goal;",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2009/2010' GROUP BY league.name HAVING avg(MATCH.home_team_goal) > avg(MATCH.away_team_goal)",
          "SELECT league.name FROM league league JOIN MATCH m ON league.id = m.league_id WHERE m.season = '2009/2010' AND m.home_team_goal > m.away_team_goal;",
          "SELECT league.name FROM league league JOIN MATCH m ON league.id = m.league_id WHERE m.season = '2009/2010' AND m.home_team_goal > m.away_team_goal GROUP BY league.name;"
        ]
      ]
    },
    {
      "id": 1043,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers'",
          "SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers';",
          "SELECT team_short_name FROM team WHERE team_long_name LIKE 'Queens Park Rangers'",
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Queens Park Rangers'"
        ]
      ]
    },
    {
      "id": 1044,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE substr(birthday, 1, 7) = '1970-10';",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE substr(player.birthday, 1, 7) = '1970-10'",
          "SELECT player_name FROM player WHERE birthday LIKE '1970-10%'",
          "SELECT player_name FROM player WHERE substr(birthday, 1, 7) = '1970-10'"
        ]
      ]
    },
    {
      "id": 1045,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Franco Zennaro'",
          "SELECT player_attributes.attacking_work_rate FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Franco Zennaro';",
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Franco Zennaro'",
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Franco Zennaro'"
        ]
      ]
    },
    {
      "id": 1046,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaypositioningclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag'",
          "SELECT team_attributes.buildupplaypositioningclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'ADO Den Haag'",
          "SELECT team_attributes.buildupplaypositioningclass FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_long_name = 'ADO Den Haag'",
          "SELECT team_attributes.buildupplaypositioningclass FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag';"
        ]
      ]
    },
    {
      "id": 1047,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.date = '2014-09-18 00:00:00'",
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.date = '2014-09-18'",
          "SELECT player_attributes.heading_accuracy FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.date = '2014-09-18 00:00:00';",
          "SELECT player_attributes.heading_accuracy FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.date = '2014-09-18 00:00:00'"
        ]
      ]
    },
    {
      "id": 1048,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', player_attributes.date) = '2011'",
          "SELECT player_attributes.overall_rating FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', player_attributes.date) = '2011';",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', player_attributes.date) = '2011'",
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', player_attributes.date) = '2011'"
        ]
      ]
    },
    {
      "id": 1049,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM MATCH JOIN league ON match.league_id = league.id WHERE league.name = 'Scotland Premier League' AND match.season = '2015/2016';",
          "SELECT sum(CASE WHEN league.name = 'Scotland Premier League' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016'",
          "SELECT sum(CASE WHEN league.name = 'Scotland Premier League' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016'",
          "SELECT count(match.id) FROM league league JOIN MATCH MATCH ON league.id = MATCH.league_id WHERE league.name = 'Scotland Premier League' AND MATCH.season = '2015/2016';"
        ]
      ]
    },
    {
      "id": 1050,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player ORDER BY birthday DESC LIMIT 1);",
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player ORDER BY birthday DESC LIMIT 1 )",
          "SELECT player_attributes.preferred_foot FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.birthday DESC LIMIT 1;",
          "SELECT player_attributes.preferred_foot FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday = (SELECT max(birthday) FROM player);"
        ]
      ]
    },
    {
      "id": 1051,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE potential = (SELECT max(potential) FROM player_attributes));",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1",
          "SELECT player.player_name FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.potential = (SELECT max(potential) FROM player_attributes);"
        ]
      ]
    },
    {
      "id": 1052,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left'",
          "SELECT count(player_attributes.player_api_id) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left';",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left'",
          "SELECT count(player_attributes.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left'"
        ]
      ]
    },
    {
      "id": 1053,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE chancecreationpassingclass = 'Risky');",
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky'",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky'",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky'"
        ]
      ]
    },
    {
      "id": 1054,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'David Wilson'",
          "SELECT player_attributes.defensive_work_rate FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'David Wilson';",
          "SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'David Wilson'",
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'David Wilson'"
        ]
      ]
    },
    {
      "id": 1055,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT birthday FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes));",
          "SELECT player.birthday FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player.birthday FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT birthday FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes))"
        ]
      ]
    },
    {
      "id": 1056,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT name FROM league WHERE country_id IN (SELECT id FROM country WHERE name = 'Netherlands');",
          "SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands'",
          "SELECT name FROM league WHERE country_id = (SELECT id FROM country WHERE name = 'Netherlands');",
          "SELECT league.name FROM country INNER JOIN league ON country.id = league.country_id WHERE country.name = 'Netherlands'"
        ]
      ]
    },
    {
      "id": 1057,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(home_team_goal) FROM MATCH JOIN country ON match.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';",
          "SELECT cast(sum(match.home_team_goal) AS REAL) / count(DISTINCT match.id) FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN MATCH ON league.id = MATCH.league_id WHERE country.name = 'Poland' AND MATCH.season = '2010/2011'",
          "SELECT cast(sum(match.home_team_goal) AS REAL) / count(DISTINCT match.id) FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN MATCH ON league.id = match.league_id WHERE country.name = 'Poland' AND match.season = '2010/2011'",
          "SELECT cast(sum(match.home_team_goal) AS REAL) / count(DISTINCT match.id) FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN team ON league.id = team.team_api_id INNER JOIN match ON team.team_api_id = match.home_team_api_id WHERE country.name = 'Poland' AND match.season = '2010/2011'"
        ]
      ]
    },
    {
      "id": 1058,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY avg(player_attributes.finishing) DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_api_id ORDER BY avg(player_attributes.finishing) DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.height DESC LIMIT 1, 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY avg(player_attributes.finishing) DESC LIMIT 1, 1"
        ]
      ]
    },
    {
      "id": 1059,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height > 180",
          "SELECT player_name FROM player WHERE height > 180;",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180",
          "SELECT DISTINCT player_name FROM player WHERE height > 180"
        ]
      ]
    },
    {
      "id": 1060,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(id) FROM player WHERE strftime('%Y', birthday) > '1990'",
          "SELECT count(*) FROM player WHERE strftime('%Y', birthday) > '1990';",
          "SELECT count(player_name) FROM player WHERE strftime('%Y', birthday) > '1990'",
          "SELECT count(id) FROM player WHERE strftime('%Y', birthday) > '1990';"
        ]
      ]
    },
    {
      "id": 1061,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player WHERE player_name LIKE 'Adam%' AND weight > 170",
          "SELECT count(player.player_name) FROM player INNER JOIN team_attributes ON player.player_fifa_api_id = team_attributes.team_fifa_api_id WHERE player.player_name LIKE 'Adam%' AND player.weight > 170 AND team_attributes.buildupplayspeedclass = 'Fast'",
          "SELECT count(DISTINCT player.player_name) FROM player player JOIN team_attributes team_attributes ON player.player_fifa_api_id = team_attributes.team_fifa_api_id WHERE player.player_name LIKE 'Adam%' AND player.weight > 170 AND team_attributes.buildupplayspeedclass = 'Fast';",
          "SELECT count(DISTINCT player.id) FROM player player JOIN team_attributes team_attributes ON player.player_fifa_api_id = team_attributes.team_fifa_api_id WHERE player.player_name LIKE 'Adam%' AND player.weight > 170 AND team_attributes.buildupplayspeedclass = 'Fast';"
        ]
      ]
    },
    {
      "id": 1062,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating > 80 AND strftime('%Y', date) BETWEEN '2008' AND '2010');",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE strftime('%Y', date) BETWEEN '2008' AND '2010' AND overall_rating > 80);",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010'",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010' AND player_attributes.overall_rating > 80"
        ]
      ]
    },
    {
      "id": 1063,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran'",
          "SELECT player_attributes.potential FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran';",
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran'",
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Aaron Doran'"
        ]
      ]
    },
    {
      "id": 1064,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left'",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE preferred_foot = 'left');",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left'",
          "SELECT player.player_name FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left';"
        ]
      ]
    },
    {
      "id": 1065,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_long_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE buildupplayspeedclass = 'Fast');",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast'",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast'",
          "SELECT DISTINCT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast'"
        ]
      ]
    },
    {
      "id": 1066,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB'",
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'CLB'",
          "SELECT team_attributes.buildupplaypassingclass FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB';",
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_short_name = 'CLB'"
        ]
      ]
    },
    {
      "id": 1067,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE buildupplaypassing > 70);",
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassing > 70",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplaypassing > 70",
          "SELECT team.team_short_name FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassing > 70;"
        ]
      ]
    },
    {
      "id": 1068,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 170 AND strftime('%Y', player_attributes.date) BETWEEN '2010' AND '2015'",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE height > 170 AND strftime('%Y', date) BETWEEN '2010' AND '2015');",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player_attributes.date) BETWEEN '2010' AND '2015' AND player.height > 170",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE height > 170) AND Date LIKE '%2010%'"
        ]
      ]
    },
    {
      "id": 1069,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height = ( SELECT min(height) FROM player )",
          "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
          "SELECT player_name FROM player WHERE height = (SELECT min(height) FROM player);",
          "SELECT player_name FROM player ORDER BY height LIMIT 1"
        ]
      ]
    },
    {
      "id": 1070,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM league league JOIN country country ON league.country_id = country.id WHERE league.name = 'Italy Serie A';",
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A'",
          "SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Italy Serie A'",
          "SELECT country.name FROM league league JOIN country country ON league.country_id = country.id WHERE league.name = 'Italy Serie A'"
        ]
      ]
    },
    {
      "id": 1071,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE buildupplayspeed = 31 AND buildupplaydribbling = 53 AND buildupplaypassing = 32);",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32",
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32",
          "SELECT team.team_short_name FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;"
        ]
      ]
    },
    {
      "id": 1072,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE player_name = 'Aaron Doran');",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Doran');",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Doran' )",
          "SELECT cast(sum(player_attributes.overall_rating) AS REAL) / count(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran'"
        ]
      ]
    },
    {
      "id": 1073,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM MATCH JOIN league ON match.league_id = league.id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';",
          "SELECT count(match.id) FROM league league JOIN MATCH MATCH ON league.id = MATCH.league_id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', MATCH.date) BETWEEN '2008-08' AND '2008-10';",
          "SELECT sum(CASE WHEN league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = match.league_id",
          "SELECT sum(CASE WHEN league.name = 'Germany 1. Bundesliga' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE strftime('%Y-%m', MATCH.date) BETWEEN '2008-08' AND '2008-10'"
        ]
      ]
    },
    {
      "id": 1074,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team WHERE team_api_id IN (SELECT home_team_api_id FROM MATCH WHERE home_team_goal = 10);",
          "SELECT team_short_name FROM team WHERE team_api_id IN (SELECT home_team_api_id FROM MATCH WHERE home_team_goal = 10) OR team_api_id IN (SELECT away_team_api_id FROM MATCH WHERE away_team_goal = 10);",
          "SELECT team.team_short_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.home_team_goal = 10",
          "SELECT team_short_name FROM team WHERE team_api_id IN (SELECT home_team_api_id FROM MATCH WHERE home_team_goal = 10) OR team_api_id IN (SELECT away_team_api_id FROM MATCH WHERE home_team_goal = 10);"
        ]
      ]
    },
    {
      "id": 1075,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.balance = 61 AND player_attributes.potential = 61",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.balance = 61 AND player_attributes.potential = 61",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE balance = 61 AND potential = 61);",
          "SELECT player.player_name FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.balance = 61 AND player_attributes.potential = 61;"
        ]
      ]
    },
    {
      "id": 1076,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(CASE WHEN player.player_name = 'Abdou Diallo' THEN player_attributes.ball_control ELSE NULL END) - avg(CASE WHEN player.player_name = 'Aaron Appindangoye' THEN player_attributes.ball_control ELSE NULL END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT avg(CASE WHEN player.player_name = 'Abdou Diallo' THEN player_attributes.ball_control ELSE 0 END) - avg(CASE WHEN player.player_name = 'Aaron Appindangoye' THEN player_attributes.ball_control ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT avg(CASE WHEN player.player_name = 'Abdou Diallo' THEN player_attributes.ball_control ELSE NULL END) - avg(CASE WHEN player.player_name = 'Aaron Appindangoye' THEN player_attributes.ball_control ELSE NULL END) AS difference FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT avg(player_attributes.ball_control) - ( SELECT avg(player_attributes.ball_control) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Appindangoye' ) AS difference FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo'"
        ]
      ]
    },
    {
      "id": 1077,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_long_name FROM team WHERE team_short_name = 'GEN'",
          "SELECT team_long_name FROM team WHERE team_short_name = 'GEN';",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'GEN'",
          "SELECT t.team_long_name FROM team t WHERE t.team_short_name = 'GEN'"
        ]
      ]
    },
    {
      "id": 1078,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' ORDER BY birthday LIMIT 1",
          "SELECT player_name FROM player WHERE player_name = 'Abdelaziz Barrada' OR player_name = 'Aaron Lennon' ORDER BY birthday LIMIT 1",
          "SELECT player_name FROM player WHERE player_name = 'Abdelaziz Barrada' OR player_name = 'Aaron Lennon' ORDER BY birthday LIMIT 1;",
          "SELECT player_name FROM player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' ORDER BY birthday LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1079,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height = ( SELECT max(height) FROM player )",
          "SELECT player_name FROM player WHERE height = (SELECT max(height) FROM player);",
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 1",
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1080,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low'",
          "SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low'",
          "SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low'",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN MATCH ON player_attributes.player_api_id = MATCH.home_player_1 WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low'"
        ]
      ]
    },
    {
      "id": 1081,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM league league JOIN country country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League';",
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League'",
          "SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Belgium Jupiler League'",
          "SELECT name FROM country WHERE id IN (SELECT country_id FROM league WHERE name = 'Belgium Jupiler League');"
        ]
      ]
    },
    {
      "id": 1082,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany'",
          "SELECT league.name FROM country INNER JOIN league ON country.id = league.country_id WHERE country.name = 'Germany'",
          "SELECT league.name FROM league league JOIN country country ON league.country_id = country.id WHERE country.name = 'Germany';",
          "SELECT l.name FROM league l JOIN country c ON l.country_id = c.id WHERE c.name = 'Germany';"
        ]
      ]
    },
    {
      "id": 1083,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes));",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes WHERE overall_rating IS NOT NULL));"
        ]
      ]
    },
    {
      "id": 1084,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT player.id) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986' AND player_attributes.defensive_work_rate = 'high';",
          "SELECT count(DISTINCT player.id) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday < '1986-01-01' AND player_attributes.defensive_work_rate = 'high';",
          "SELECT count(DISTINCT player.player_name) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday < '1986-01-01' AND player_attributes.defensive_work_rate = 'high';",
          "SELECT count(DISTINCT player.player_api_id) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday < '1986-01-01' AND player_attributes.defensive_work_rate = 'high';"
        ]
      ]
    },
    {
      "id": 1085,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE crossing = (SELECT max(crossing) FROM player_attributes));",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name IN ('Ariel Borysiuk', 'Arouna Kone', 'Alexis') ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE crossing = (SELECT max(crossing) FROM player_attributes WHERE crossing IS NOT NULL));",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.crossing = ( SELECT max(crossing) FROM player_attributes )"
        ]
      ]
    },
    {
      "id": 1086,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk'",
          "SELECT player_attributes.heading_accuracy FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk';",
          "SELECT player_attributes.heading_accuracy FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ariel Borysiuk'",
          "SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Ariel Borysiuk'"
        ]
      ]
    },
    {
      "id": 1087,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT player.id) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;",
          "SELECT count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70",
          "SELECT count(DISTINCT player.player_api_id) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;",
          "SELECT count(player_attributes.player_api_id) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;"
        ]
      ]
    },
    {
      "id": 1088,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE volleys > 70 AND dribbling > 70);",
          "SELECT player.player_name FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;"
        ]
      ]
    },
    {
      "id": 1089,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM MATCH JOIN league ON match.league_id = league.id JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND match.season = '2008/2009';",
          "SELECT count(*) FROM MATCH INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND match.season = '2008/2009'",
          "SELECT count(*) FROM MATCH JOIN league ON match.league_id = league.id JOIN country ON league.country_id = country.id WHERE match.season = '2008/2009' AND country.name = 'Belgium';",
          "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND match.season = '2008/2009'"
        ]
      ]
    },
    {
      "id": 1090,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT long_passing FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player ORDER BY birthday ASC LIMIT 1);",
          "SELECT long_passing FROM player_attributes ORDER BY birthday ASC LIMIT 1",
          "SELECT long_passing FROM player_attributes ORDER BY birthday LIMIT 1",
          "SELECT long_passing FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player ORDER BY birthday ASC LIMIT 1 )"
        ]
      ]
    },
    {
      "id": 1091,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM MATCH JOIN league ON match.league_id = league.id WHERE league.name = 'Belgium Jupiler League' AND substr(`date`, 1, 7) = '2009-04';",
          "SELECT count(*) FROM MATCH INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgium Jupiler League' AND substr(`date`, 1, 7) = '2009-04'",
          "SELECT sum(CASE WHEN league.name = 'Belgium Jupiler League' AND substr(`date`, 1, 7) = '2009-04' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id",
          "SELECT sum(CASE WHEN league.name = 'Belgium Jupiler League' AND substr(`date`, 1, 7) = '2009-04' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON league.id = match.league_id"
        ]
      ]
    },
    {
      "id": 1092,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2008/2009' GROUP BY league.name ORDER BY count(league.name) DESC LIMIT 1",
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2008/2009' GROUP BY league.name ORDER BY count(MATCH.id) DESC LIMIT 1",
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2008/2009' GROUP BY league.name ORDER BY count(MATCH.id) DESC LIMIT 1",
          "SELECT league.name FROM league league JOIN (SELECT league_id FROM MATCH WHERE season = '2008/2009' GROUP BY league_id HAVING count(*) = (SELECT max(match_count) FROM (SELECT league_id, count(*) AS match_count FROM MATCH WHERE season = '2008/2009' GROUP BY league_id) t2))) t3 ON league.id = t3.league_id;"
        ]
      ]
    },
    {
      "id": 1093,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(overall_rating) FROM player_attributes WHERE strftime('%Y', birthday) < '1986';",
          "SELECT avg(overall_rating) FROM player_attributes WHERE strftime('%Y', birthday) < '1986'",
          "SELECT avg(overall_rating) FROM player WHERE strftime('%Y', birthday) < '1986'",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE strftime('%Y', birthday) < '1986');"
        ]
      ]
    },
    {
      "id": 1094,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast((player_attributes.overall_rating - (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel') AND player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE player_name = 'Paulin Puel')) ) AS REAL) * 100 / (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel') AND player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE player_name = 'Paulin Puel'))",
          "SELECT cast((player_attributes.overall_rating - (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel') ) ) AS REAL) * 100 / (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel')) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk';",
          "SELECT cast((player_attributes.overall_rating - (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel') AND player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE player_name = 'Paulin Puel')) ) AS REAL) * 100 / (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel') AND player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE player_name = 'Paulin Puel')) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ariel Borysiuk'",
          "SELECT cast((player_attributes.overall_rating - (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel') ) ) AS REAL) * 100 / (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel') ) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk';"
        ]
      ]
    },
    {
      "id": 1095,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(team_attributes.buildupplayspeed) FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Heart of Midlothian'",
          "SELECT avg(team_attributes.buildupplayspeed) FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Heart of Midlothian'",
          "SELECT avg(team_attributes.buildupplayspeed) FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_long_name = 'Heart of Midlothian'",
          "SELECT cast(sum(team_attributes.buildupplayspeed) AS REAL) / count(team_attributes.team_api_id) FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Heart of Midlothian'"
        ]
      ]
    },
    {
      "id": 1096,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino'",
          "SELECT avg(player_attributes.overall_rating) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino';",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE player_name = 'Pietro Marino');",
          "SELECT cast(sum(player_attributes.overall_rating) AS REAL) / count(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino'"
        ]
      ]
    },
    {
      "id": 1097,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(player_attributes.crossing) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Lennox'",
          "SELECT sum(player_attributes.crossing) FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Lennox';",
          "SELECT sum(player_attributes.crossing) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Lennox'",
          "SELECT sum(player_attributes.crossing) FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.player_name = 'Aaron Lennox'"
        ]
      ]
    },
    {
      "id": 1098,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT max(team_attributes.chancecreationpassing), team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax'",
          "SELECT max(team_attributes.chancecreationpassing), team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax'",
          "SELECT team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1",
          "SELECT team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1099,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.preferred_foot FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo'",
          "SELECT player_attributes.preferred_foot FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo';",
          "SELECT player_attributes.preferred_foot FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Abdou Diallo'",
          "SELECT preferred_foot FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Abdou Diallo');"
        ]
      ]
    },
    {
      "id": 1100,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT max(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE player_name = 'Dorlan Pabon');",
          "SELECT max(overall_rating) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Dorlan Pabon');",
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Dorlan Pabon' ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT max(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Dorlan Pabon'"
        ]
      ]
    },
    {
      "id": 1101,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(match.away_team_goal) FROM team INNER JOIN league ON team.id = league.id INNER JOIN country ON league.country_id = country.id INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy'",
          "SELECT avg(MATCH.away_team_goal) FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.away_team_api_id INNER JOIN league ON league.id = team.id INNER JOIN country ON country.id = league.country_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy'",
          "SELECT avg(MATCH.away_team_goal) FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.away_team_api_id WHERE team.team_long_name = 'Parma' AND team.country_id = ( SELECT id FROM country WHERE name = 'Italy' )",
          "SELECT avg(MATCH.away_team_goal) FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.away_team_api_id WHERE team.team_long_name = 'Parma' AND team.team_long_name = 'Italy'"
        ]
      ]
    },
    {
      "id": 1102,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY player.birthday LIMIT 1",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY player.birthday LIMIT 1",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY player.birthday DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY player.birthday DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1103,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date LIKE '2016-02-04%'",
          "SELECT player_attributes.overall_rating FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date LIKE '2016-02-04%'",
          "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date LIKE '2016-02-04%'",
          "SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Mooy') AND Date LIKE '2016-02-04%'"
        ]
      ]
    },
    {
      "id": 1104,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30'",
          "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00'",
          "SELECT player_attributes.potential FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30';",
          "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30'"
        ]
      ]
    },
    {
      "id": 1105,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date LIKE '2015-05-01%'",
          "SELECT player_attributes.attacking_work_rate FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date LIKE '2015-05-01%'",
          "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date LIKE '2015-05-01%'",
          "SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date = '2015-05-01%'"
        ]
      ]
    },
    {
      "id": 1106,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22 00:00:00'",
          "SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22'",
          "SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22 00:00:00'",
          "SELECT player_attributes.defensive_work_rate FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22 00:00:00';"
        ]
      ]
    },
    {
      "id": 1107,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.date FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player_attributes.date FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1;",
          "SELECT player_attributes.date FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1",
          "SELECT player_attributes.date FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Constant' AND player_attributes.crossing = (SELECT max(crossing) FROM player_attributes WHERE player_api_id = player.player_api_id);"
        ]
      ]
    },
    {
      "id": 1108,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2011-02-22'",
          "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2012-02-22'",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.`date` = '2011-02-22'",
          "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.`date` = '2011-02-22'"
        ]
      ]
    },
    {
      "id": 1109,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaydribblingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10'",
          "SELECT team_attributes.buildupplaydribblingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10 00:00:00'",
          "SELECT team_attributes.buildupplaydribblingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10'",
          "SELECT team_attributes.buildupplaydribblingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10 00:00:00'"
        ]
      ]
    },
    {
      "id": 1110,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.date LIKE '2010-02-22%'",
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.date LIKE '2010-02-22%'",
          "SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.`date` LIKE '2010-02-22%'",
          "SELECT team_attributes.buildupplaypassingclass FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.date LIKE '2010-02-22%'"
        ]
      ]
    },
    {
      "id": 1111,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20'",
          "SELECT team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20'",
          "SELECT team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date = '2013-09-20' AND team.team_long_name = 'PEC Zwolle'",
          "SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20 00:00:00'"
        ]
      ]
    },
    {
      "id": 1112,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22'",
          "SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22'",
          "SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id AND team.team_fifa_api_id = team_attributes.team_fifa_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22'",
          "SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00'"
        ]
      ]
    },
    {
      "id": 1113,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.defenceaggressionclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%'",
          "SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%'",
          "SELECT team_attributes.defenceaggressionclass FROM team INNER JOIN team_attributes ON team.team_fifa_api_id = team_attributes.team_fifa_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%'",
          "SELECT team_attributes.defenceaggressionclass FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%'"
        ]
      ]
    },
    {
      "id": 1114,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE player_name = 'Marko Arnautovic') AND date BETWEEN '2007-02-22' AND '2016-04-21';",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE player_name = 'Marko Arnautovic') AND Date BETWEEN '2007-02-22' AND '2016-04-21';",
          "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.date BETWEEN '2007-02-22' AND '2016-04-21'",
          "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE player_name = 'Marko Arnautovic') AND `date` BETWEEN '2007-02-22' AND '2016-04-21';"
        ]
      ]
    },
    {
      "id": 1115,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast((sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.date = '2013-07-12'",
          "SELECT cast((sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y-%m-%d', player_attributes.date) = '2013-07-12'",
          "SELECT cast((sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id AND player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player_attributes.date = '2013-07-12'",
          "SELECT cast((sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id AND player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE strftime('%Y-%m-%d', player_attributes.date) = '2013-07-12'"
        ]
      ]
    },
    {
      "id": 1116,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 1",
          "SELECT player_name FROM player WHERE height = ( SELECT max(height) FROM player )",
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 3",
          "SELECT player_name FROM player WHERE height = (SELECT max(height) FROM player);"
        ]
      ]
    },
    {
      "id": 1117,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10",
          "SELECT player_api_id FROM player WHERE weight = (SELECT max(weight) FROM player);",
          "SELECT player_api_id FROM player WHERE weight = ( SELECT max(weight) FROM player ) LIMIT 10",
          "SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10;"
        ]
      ]
    },
    {
      "id": 1118,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE julianday(CURRENT_TIMESTAMP) - julianday(birthday) > 34",
          "SELECT player_name FROM player WHERE strftime('%Y', 'now') - strftime('%Y', birthday) > 35",
          "SELECT player_name FROM player WHERE strftime('%J', 'now') - strftime('%J', birthday) > 34",
          "SELECT player_name FROM player WHERE julianday(CURRENT_TIMESTAMP) - julianday(birthday) > 34;"
        ]
      ]
    },
    {
      "id": 1119,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(home_team_goal) FROM MATCH WHERE home_player_1 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) OR home_player_2 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) OR home_player_3 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) OR home_player_4 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) OR home_player_5 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) OR home_player_6 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) OR home_player_7 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) OR home_player_8 = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennon' ) OR home_player_9 = ( SELECT player_api_id FROM player WHERE player_name =",
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 WHERE player.player_name = 'Aaron Lennon'",
          "SELECT sum(CASE WHEN player.player_name = 'Aaron Lennon' THEN match.home_team_goal ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1",
          "SELECT sum(CASE WHEN player.player_name = 'Aaron Lennon' THEN 1 ELSE 0 END) FROM MATCH INNER JOIN player ON player.player_api_id = MATCH.home_player_1"
        ]
      ]
    },
    {
      "id": 1120,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN match.away_team_goal ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN match.away_team_goal ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_11 OR player.player_api_id = MATCH.away_player_10 OR player.player_api_id = MATCH.away_player_9 OR player.player_api_id = MATCH.away_player_8 OR player.player_api_id = MATCH.away_player_7 OR player.player_api_id = MATCH.away_player_6 OR player.player_api_id = MATCH.away_player_5 OR player.player_api_id = MATCH.away_player_4 OR player.player_api_id = MATCH.away_player_3 OR player.player_api_id = MATCH.away_player_2 OR player.player_api_id = MATCH.away_player_1",
          "SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN match.away_team_goal ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN match.away_team_goal ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_1",
          "SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN match.away_team_goal ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN match.away_team_goal ELSE 0 END) FROM MATCH INNER JOIN player ON player.player_api_id IN (match.away_player_1, match.away_player_2, match.away_player_3, match.away_player_4, match.away_player_5, match.away_player_6, match.away_player_7, match.away_player_8, match.away_player_9, match.away_player_10, match.away_player_11)",
          "SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN match.away_team_goal ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN match.away_team_goal ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_1 UNION ALL SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN match.away_team_goal ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN match.away_team_goal ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_2 UNION ALL SELECT sum(CASE WHEN player.player_name = 'Daan Smith' THEN match.away_team_goal ELSE 0 END) + sum(CASE WHEN player.player_name = 'Filipe Ferreira' THEN match.away_team_goal ELSE 0 END) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.away_player_3 UNION ALL SELECT"
        ]
      ]
    },
    {
      "id": 1121,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_11 OR player.player_api_id = MATCH.home_player_12 OR player.player_api_id = MATCH.home_player_13 OR player.player_api_id = MATCH.home_player_14 OR player.player_api_id = MATCH.home_player_15 OR player.player_api_id = MATCH.home_player_16 OR player.player_api_id = MATCH.home_player_17 OR player.player_api_id = MATCH.home_player_18 OR player.player_api_id = MATCH.home_player_19 OR player.player_api_id = MATCH.home_player_20 OR player.player_api_id = MATCH.home_player_21 OR player.player_api_id = MATCH.home_player_22 OR player.player_api_id = MATCH.home_player_23 OR player.player_api_id = MATCH.home_player_24 OR player",
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_11 OR player.player_api_id = MATCH.home_player_10 OR player.player_api_id = MATCH.home_player_9 OR player.player_api_id = MATCH.home_player_8 OR player.player_api_id = MATCH.home_player_7 OR player.player_api_id = MATCH.home_player_6 OR player.player_api_id = MATCH.home_player_5 OR player.player_api_id = MATCH.home_player_4 OR player.player_api_id = MATCH.home_player_3 OR player.player_api_id = MATCH.home_player_2 OR player.player_api_id = MATCH.home_player_1",
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_11 WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', player.birthday) <= 30",
          "SELECT sum(match.home_team_goal) FROM player INNER JOIN MATCH ON player.player_api_id = MATCH.home_player_1 WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', player.birthday) <= 30"
        ]
      ]
    },
    {
      "id": 1122,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes));",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_name FROM player WHERE player_api_id = (SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1);"
        ]
      ]
    },
    {
      "id": 1123,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE potential = (SELECT max(potential) FROM player_attributes));",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE potential = (SELECT max(potential) FROM player_attributes WHERE potential IS NOT NULL));",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1124,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high'",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE attacking_work_rate = 'high');",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.attacking_work_rate = 'high'",
          "SELECT player.player_name FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';"
        ]
      ]
    },
    {
      "id": 1125,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY strftime('%J', CURRENT_TIMESTAMP) - strftime('%J', player.birthday) DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY strftime('%J', 'now') - strftime('%J', player.birthday) DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY julianday(CURRENT_TIMESTAMP) - julianday(player.birthday) DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY julianday(CURRENT_TIMESTAMP) - julianday(player.birthday) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1126,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player.player_name FROM player INNER JOIN league ON player.id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium'",
          "SELECT player.player_name FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN player ON league.id = player.id WHERE country.name = 'Belgium'",
          "SELECT player.player_name FROM league INNER JOIN country ON league.country_id = country.id INNER JOIN player ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE country.name = 'Belgium'",
          "SELECT player.player_name FROM player INNER JOIN league ON player.id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND player.player_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1127,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT p.player_name, c.name FROM player p JOIN player_attributes pa ON p.player_api_id = pa.player_api_id JOIN country c ON p.country_id = c.id WHERE pa.vision > 89;",
          "SELECT country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = player.id INNER JOIN country ON country.id = league.country_id WHERE player_attributes.vision > 89",
          "SELECT country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = player.id INNER JOIN country ON country.id = league.country_id WHERE player_attributes.vision >= 90",
          "SELECT player.player_name, country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = player.id INNER JOIN country ON country.id = league.country_id WHERE player_attributes.vision > 89"
        ]
      ]
    },
    {
      "id": 1128,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = player.player_api_id INNER JOIN country ON country.id = league.country_id GROUP BY country.name ORDER BY avg(player.weight) DESC LIMIT 1",
          "SELECT country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = player.league_id INNER JOIN country ON country.id = league.country_id GROUP BY country.name ORDER BY avg(player.weight) DESC LIMIT 1",
          "SELECT country.name FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id JOIN league league ON player.player_api_id = league.id JOIN country country ON league.country_id = country.id GROUP BY country.name ORDER BY avg(player.weight) DESC LIMIT 1;",
          "SELECT country.name FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id JOIN league league ON player.player_fifa_api_id = league.id JOIN country country ON league.country_id = country.id GROUP BY country.name ORDER BY avg(player.weight) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1129,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_long_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE buildupplayspeedclass = 'Slow');",
          "SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow'",
          "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow'",
          "SELECT t.team_long_name FROM team t JOIN team_attributes ta ON t.team_api_id = ta.team_api_id WHERE ta.buildupplayspeedclass = 'Slow';"
        ]
      ]
    },
    {
      "id": 1130,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_short_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE chancecreationpassingclass = 'Safe');",
          "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe'",
          "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe'",
          "SELECT team.team_short_name FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe';"
        ]
      ]
    },
    {
      "id": 1131,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT avg(player.height) FROM player INNER JOIN league ON player.id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Italy'",
          "SELECT avg(player.height) FROM player INNER JOIN league ON player.player_api_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Italy'",
          "SELECT avg(player.height) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = player.player_api_id INNER JOIN country ON country.id = league.country_id WHERE country.name = 'Italy'",
          "SELECT avg(player.height) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON player.player_api_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Italy'"
        ]
      ]
    },
    {
      "id": 1132,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3",
          "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name LIMIT 3",
          "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;",
          "SELECT player_name FROM player ORDER BY height DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1133,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player WHERE player_name LIKE 'Aaron%' AND strftime('%Y', birthday) > '1990';",
          "SELECT count(player_name) FROM player WHERE player_name LIKE 'Aaron%' AND strftime('%Y', birthday) > '1990'",
          "SELECT count(*) FROM player WHERE player_name LIKE 'Aaron%' AND cast(strftime('%Y', birthday) AS INT) > 1990",
          "SELECT count(player_name) FROM player WHERE player_name LIKE 'Aaron%' AND cast(strftime('%Y', birthday) AS INT) > 1990"
        ]
      ]
    },
    {
      "id": 1134,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN id = 6 THEN jumping ELSE 0 END) - sum(CASE WHEN id = 23 THEN jumping ELSE 0 END) AS difference FROM player_attributes;",
          "SELECT player_attributes.jumping - ( SELECT player_attributes.jumping FROM player_attributes player_attributes WHERE player_attributes.id = 6 ) - ( SELECT player_attributes.jumping FROM player_attributes player_attributes WHERE player_attributes.id = 23 ) AS difference;",
          "SELECT sum(CASE WHEN player_attributes.id = 6 THEN player_attributes.jumping ELSE 0 END) - sum(CASE WHEN player_attributes.id = 23 THEN player_attributes.jumping ELSE 0 END) AS difference FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id",
          "SELECT player_attributes.jumping - ( SELECT player_attributes.jumping FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.player_api_id = 6 ) - ( SELECT player_attributes.jumping FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.player_api_id = 23 ) AS difference;"
        ]
      ]
    },
    {
      "id": 1135,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'right' ORDER BY player_attributes.potential ASC LIMIT 5",
          "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'right' AND player_attributes.potential = ( SELECT min(potential) FROM player_attributes ) LIMIT 5",
          "SELECT player_attributes.player_api_id FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'right' AND player_attributes.potential = (SELECT min(potential) FROM player_attributes WHERE preferred_foot = 'right') LIMIT 5;",
          "SELECT player_attributes.player_api_id FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'right' AND player_attributes.potential = (SELECT min(potential) FROM player_attributes WHERE preferred_foot = 'right') LIMIT 5;"
        ]
      ]
    },
    {
      "id": 1136,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = 49",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = ( SELECT max(crossing) FROM player_attributes )",
          "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = ( SELECT max(player_attributes.crossing) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' )",
          "SELECT count(*) FROM player_attributes WHERE preferred_foot = 'left' AND crossing = ( SELECT max(crossing) FROM player_attributes )"
        ]
      ]
    },
    {
      "id": 1137,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast(count(id) AS REAL) * 100 / ( SELECT count(id) FROM player_attributes ) FROM player_attributes WHERE stamina > 80 AND strength > 80",
          "SELECT cast(sum(iif(stamina > 80 AND strength > 80, 1, 0)) AS REAL) * 100 / count(id) FROM player_attributes",
          "SELECT cast(sum(CASE WHEN player_attributes.stamina > 80 AND player_attributes.strength > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id",
          "SELECT cast(count(id) AS REAL) * 100 / ( SELECT count(id) FROM player ) FROM player_attributes WHERE stamina > 80 AND strength > 80"
        ]
      ]
    },
    {
      "id": 1138,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT country.name FROM league league JOIN country country ON league.country_id = country.id WHERE league.name = 'Poland Ekstraklasa';",
          "SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa'",
          "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Poland Ekstraklasa'",
          "SELECT name FROM country WHERE id IN (SELECT country_id FROM league WHERE name = 'Poland Ekstraklasa');"
        ]
      ]
    },
    {
      "id": 1139,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT MATCH.home_team_goal, MATCH.away_team_goal FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE league.name = 'Belgium Jupiler League' AND MATCH.date LIKE '2008-09-24%'",
          "SELECT match.home_team_goal, match.away_team_goal FROM league league JOIN MATCH MATCH ON league.id = MATCH.league_id WHERE league.name = 'Belgium Jupiler League' AND MATCH.date LIKE '2008-09-24%'",
          "SELECT match.home_team_goal, match.away_team_goal FROM `match` INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgium Jupiler League' AND match.date LIKE '2008-09-24%'",
          "SELECT match.home_team_goal, match.away_team_goal FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Belgium Jupiler League' AND MATCH.date LIKE '2008-09-24%'"
        ]
      ]
    },
    {
      "id": 1140,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Alexis Blin'",
          "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Alexis Blin';",
          "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Alexis Blin'",
          "SELECT player_attributes.sprint_speed, player_attributes.acceleration, player_attributes.agility FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Alexis Blin'"
        ]
      ]
    },
    {
      "id": 1141,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
          "SELECT team_attributes.buildupplayspeedclass FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';",
          "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'"
        ]
      ]
    },
    {
      "id": 1142,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT m.id) FROM MATCH m JOIN league l ON m.league_id = l.id WHERE m.season = '2015/2016' AND l.name = 'Italian Serie A';",
          "SELECT count(DISTINCT m.id) FROM MATCH m JOIN league l ON m.league_id = l.id WHERE l.name = 'Italian Serie A' AND m.season = '2015/2016';",
          "SELECT count(DISTINCT match.id) FROM league league JOIN MATCH match ON league.id = match.league_id WHERE league.name = 'Italian Serie A' AND match.season = '2015/2016';",
          "SELECT count(DISTINCT match.id) FROM league league JOIN match match ON league.id = match.league_id WHERE league.name = 'Italian Serie A' AND match.season = '2015/2016';"
        ]
      ]
    },
    {
      "id": 1143,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT max(match.home_team_goal) FROM league league JOIN MATCH MATCH ON league.id = MATCH.league_id WHERE league.name = 'Netherlands Eredivisie';",
          "SELECT max(home_team_goal) FROM MATCH JOIN league ON match.league_id = league.id WHERE league.name = 'Netherlands Eredivisie';",
          "SELECT max(match.home_team_goal) FROM league league JOIN MATCH match ON league.id = match.league_id WHERE league.name = 'Netherlands Eredivisie';",
          "SELECT max(home_team_goal) FROM MATCH JOIN league ON match.league_id = league.id WHERE league.name = 'Netherlands Eredivisie' AND home_team_goal IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1144,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_attributes.finishing, player_attributes.curve FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);",
          "SELECT player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.weight DESC LIMIT 1",
          "SELECT player_attributes.finishing, player_attributes.curve FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player.weight DESC LIMIT 1",
          "SELECT player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight = ( SELECT max(weight) FROM player )"
        ]
      ]
    },
    {
      "id": 1145,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016' GROUP BY league.name ORDER BY count(MATCH.id) DESC LIMIT 4",
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016' GROUP BY league.name ORDER BY count(MATCH.id) DESC LIMIT 4",
          "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016' GROUP BY league.name ORDER BY count(league.name) DESC LIMIT 4",
          "SELECT league.name FROM league league JOIN (SELECT league_id FROM MATCH WHERE season = '2015/2016' GROUP BY league_id HAVING count(id) = (SELECT max(game_count) FROM (SELECT league_id, count(id) AS game_count FROM MATCH WHERE season = '2015/2016' GROUP BY league_id) t))) t2 ON league.id = t2.league_id LIMIT 4;"
        ]
      ]
    },
    {
      "id": 1146,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT team.team_long_name FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.away_team_api_id ORDER BY MATCH.away_team_goal DESC LIMIT 1",
          "SELECT team_long_name FROM team WHERE team_api_id IN (SELECT away_team_api_id FROM MATCH WHERE away_team_goal = (SELECT max(away_team_goal) FROM MATCH WHERE away_team_goal IS NOT NULL));",
          "SELECT team_long_name FROM team WHERE team_api_id IN (SELECT away_team_api_id FROM MATCH WHERE away_team_goal = (SELECT max(away_team_goal) FROM MATCH));",
          "SELECT team_long_name FROM team WHERE team_api_id IN (SELECT away_team_api_id FROM MATCH GROUP BY away_team_api_id HAVING sum(away_team_goal) = (SELECT max(total_goals) FROM (SELECT sum(away_team_goal) AS total_goals FROM MATCH GROUP BY away_team_api_id)));"
        ]
      ]
    },
    {
      "id": 1147,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes));",
          "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
          "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes WHERE overall_rating IS NOT NULL));"
        ]
      ]
    },
    {
      "id": 1148,
      "db_id": "european_football_2",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id",
          "SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id"
        ]
      ]
    },
    {
      "id": 1149,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), cast(sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'M'",
          "SELECT (count(*) filter (WHERE admission = '+') * 100.0 / count(*)) - (count(*) filter (WHERE admission = '-') * 100.0 / count(*)) AS deviation FROM patient WHERE sex = 'M';",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) * 100 / count(id) FROM patient WHERE sex = 'M'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), cast(sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'M';"
        ]
      ]
    },
    {
      "id": 1150,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN strftime('%Y', birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'F'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND strftime('%Y', patient.birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id",
          "SELECT cast(sum(CASE WHEN sex = 'F' AND strftime('%Y', birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND strftime('%Y', patient.birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id"
        ]
      ]
    },
    {
      "id": 1151,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE birthday BETWEEN '1930-01-01' AND '1940-12-31'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'",
          "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE birthday LIKE '1930%'"
        ]
      ]
    },
    {
      "id": 1152,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
          "SELECT cast(count(CASE WHEN patient.admission = '+' THEN patient.id ELSE NULL END) AS REAL) / count(CASE WHEN patient.admission = '-' THEN patient.id ELSE NULL END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
          "SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) AS per FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
          "SELECT (SELECT count(*) FROM patient WHERE admission = '-' AND diagnosis = 'SLE') * 1.0 / (SELECT count(*) FROM patient WHERE admission = '+' AND diagnosis = 'SLE') AS ratio;"
        ]
      ]
    },
    {
      "id": 1153,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'",
          "SELECT patient.diagnosis, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'",
          "SELECT laboratory.date FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = '30609'",
          "SELECT DISTINCT patient.diagnosis, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'"
        ]
      ]
    },
    {
      "id": 1154,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = '163109'",
          "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 163109",
          "SELECT patient.`first date`, patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = '163109'",
          "SELECT patient.`first date`, patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 163109"
        ]
      ]
    },
    {
      "id": 1155,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > 500",
          "SELECT p.id, p.sex, p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.ldh > 500;",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500",
          "SELECT DISTINCT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > 500"
        ]
      ]
    },
    {
      "id": 1156,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'",
          "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', patient.birthday) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'",
          "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS age FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.rvvt = '+'",
          "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'"
        ]
      ]
    },
    {
      "id": 1157,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2",
          "SELECT patient.id, patient.sex, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2",
          "SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2",
          "SELECT p.id, p.sex, e.diagnosis FROM patient p JOIN examination e ON p.id = e.id WHERE e.thrombosis = 2;"
        ]
      ]
    },
    {
      "id": 1158,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` > 250",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` >= 250",
          "SELECT p.id FROM patient p JOIN laboratory l ON p.id = l.`date` WHERE strftime('%Y', p.birthday) = '1937' AND l.`t-cho` >= 250;",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` > 250"
        ]
      ]
    },
    {
      "id": 1159,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5",
          "SELECT p.id, p.sex, p.diagnosis FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.alb < 3.5;",
          "SELECT patient.id, patient.sex, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb < 3.5",
          "SELECT DISTINCT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5"
        ]
      ]
    },
    {
      "id": 1160,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN laboratory.tp < '6.0' OR laboratory.tp > '8.5' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.tp) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F'",
          "SELECT cast(sum(CASE WHEN laboratory.tp < '6.0' OR laboratory.tp > '8.5' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F'",
          "SELECT cast(sum(CASE WHEN laboratory.tp < '6.0' OR laboratory.tp > '8.5' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'",
          "SELECT cast(sum(CASE WHEN laboratory.tp < '6.0' OR laboratory.tp > '8.5' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.tp) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'"
        ]
      ]
    },
    {
      "id": 1161,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(examination.`acl igg`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '+' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50",
          "SELECT avg(examination.\"ACL IgG\") FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '+' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50",
          "SELECT avg(examination.`acl igg`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '+' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= '50'",
          "SELECT avg(laboratory.igg) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50"
        ]
      ]
    },
    {
      "id": 1162,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE admission = '-' AND sex = 'F' AND strftime('%Y', description) = '1997'",
          "SELECT count(id) FROM patient WHERE sex = 'F' AND strftime('%Y', description) = '1997' AND admission = '-'",
          "SELECT count(id) FROM patient WHERE strftime('%Y', `first date`) = '1997' AND sex = 'F' AND admission = '-'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND strftime('%Y', patient.description) = '1997' AND patient.admission = '-';"
        ]
      ]
    },
    {
      "id": 1163,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT strftime('%Y', `first date`) - strftime('%Y', birthday) FROM patient ORDER BY strftime('%Y', `first date`) - strftime('%Y', birthday) DESC LIMIT 1",
          "SELECT (strftime('%Y', `first date`) - strftime('%Y', birthday)) AS age FROM patient ORDER BY age DESC LIMIT 1",
          "SELECT (strftime('%Y', `first date`) - strftime('%Y', birthday)) AS age FROM patient ORDER BY (strftime('%Y', `first date`) - strftime('%Y', birthday)) DESC LIMIT 1",
          "SELECT (strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.`first date`)) - (strftime('%m', CURRENT_TIMESTAMP) < strftime('%m', patient.birthday)) AS age FROM patient ORDER BY age DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1164,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.thrombosis = 1 AND strftime('%Y', examination.`examination date`) = '1997'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.thrombosis = 1 AND strftime('%Y', examination.`examination date`) = '1997';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.thrombosis = '1' AND strftime('%Y', examination.`examination date`) = '1997'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.thrombosis = '1' AND strftime('%Y', examination.`examination date`) = '1997';"
        ]
      ]
    },
    {
      "id": 1165,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT max(strftime('%Y', birthday)) - min(strftime('%Y', birthday)) AS agegap FROM patient WHERE id IN (SELECT id FROM laboratory WHERE tg >= 200);",
          "SELECT max(strftime('%Y', birthday)) - min(strftime('%Y', birthday)) AS agegap FROM patient WHERE tg >= 200;",
          "SELECT max(cast(strftime('%Y', birthday) AS int)) - min(cast(strftime('%Y', birthday) AS int)) FROM patient WHERE tg >= 200",
          "SELECT max(cast(strftime('%Y', birthday) AS int)) - min(cast(strftime('%Y', birthday) AS int)) AS agegap FROM patient WHERE id IN (SELECT id FROM laboratory WHERE tg >= 200);"
        ]
      ]
    },
    {
      "id": 1166,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.symptoms, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id ORDER BY patient.birthday DESC LIMIT 1",
          "SELECT examination.symptoms, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id ORDER BY patient.birthday DESC LIMIT 1",
          "SELECT e.symptoms, p.diagnosis FROM examination e JOIN patient p ON e.id = p.id WHERE e.symptoms IS NOT NULL ORDER BY p.birthday DESC LIMIT 1;",
          "SELECT examination.symptoms, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id ORDER BY patient.birthday DESC, patient.id DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1167,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(count(laboratory.id) AS REAL) / 12 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.`date` BETWEEN '1998-01-01' AND '1998-12-31'",
          "SELECT cast(count(laboratory.id) AS REAL) / 12 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.`date` LIKE '1998%'",
          "SELECT cast(count(laboratory.id) AS REAL) / 12 FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y-%m', laboratory.`date`) = '1998-12' AND patient.sex = 'M'",
          "SELECT cast(count(laboratory.id) AS REAL) / 12 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND strftime('%Y-%m', laboratory.`date`) BETWEEN '1998-01' AND '1998-12'"
        ]
      ]
    },
    {
      "id": 1168,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.`date`, strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday LIMIT 1",
          "SELECT laboratory.`date`, strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday LIMIT 1",
          "SELECT laboratory.`date`, strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SJS'",
          "SELECT laboratory.`date`, strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday LIMIT 1"
        ]
      ]
    },
    {
      "id": 1169,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua <= '8.0'",
          "SELECT (SELECT count(*) FROM patient WHERE sex = 'M' AND ua <= '8.0') * 1.0 / (SELECT count(*) FROM patient WHERE sex = 'F' AND ua <= '6.5') AS ratio;",
          "SELECT cast(sum(CASE WHEN sex = 'M' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua <= '8.0'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua <= 8.0"
        ]
      ]
    },
    {
      "id": 1170,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE id IN (SELECT id FROM examination WHERE strftime('%Y', `examination date`) - strftime('%Y', `first date`) < 1);",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', examination.`examination date`) - strftime('%Y', patient.`first date`) < 1",
          "SELECT count(DISTINCT patient.id) FROM patient patient LEFT JOIN examination examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) - strftime('%Y', examination.`examination date`) < 1;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) - strftime('%Y', examination.`examination date`) < 1"
        ]
      ]
    },
    {
      "id": 1171,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) < '18' AND strftime('%Y', examination.`examination date`) BETWEEN '1990' AND '1993'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) < '18' AND strftime('%Y', examination.`examination date`) BETWEEN '1990' AND '1993'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) < '18' AND strftime('%Y', examination.`examination date`) BETWEEN '1990' AND '1993';",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE strftime('%Y', patient.birthday) < '18' AND strftime('%Y', examination.`examination date`) BETWEEN '1990' AND '1993'"
        ]
      ]
    },
    {
      "id": 1172,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` >= '2.0'",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` > 2.0",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` >= '2.0';",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` > '2.0'"
        ]
      ]
    },
    {
      "id": 1173,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1",
          "SELECT diagnosis FROM (SELECT diagnosis, count(diagnosis) AS cnt FROM examination WHERE \"Examination Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis) WHERE cnt = (SELECT max(cnt) FROM (SELECT count(diagnosis) AS cnt FROM examination WHERE \"Examination Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis));",
          "SELECT diagnosis FROM (SELECT diagnosis, count(diagnosis) AS cnt FROM examination WHERE \"Examination Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis) WHERE cnt = (SELECT max(cnt) FROM (SELECT count(diagnosis) AS cnt FROM examination WHERE \"Examination Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis))",
          "SELECT diagnosis FROM (SELECT diagnosis, count(diagnosis) AS COUNT FROM examination WHERE \"Examination Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis) WHERE COUNT = (SELECT max(COUNT) FROM (SELECT count(diagnosis) AS COUNT FROM examination WHERE \"Examination Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis));"
        ]
      ]
    },
    {
      "id": 1174,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1991-10-01'",
          "SELECT avg(strftime('%Y', patient.birthday) - strftime('%Y', laboratory.`date`)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` BETWEEN '1991-10-01' AND '1991-10-30'",
          "SELECT avg(strftime('%Y', patient.birthday) - strftime('%Y', laboratory.`date`)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` BETWEEN '1991-10-01' AND '1991-10-31'",
          "SELECT avg(strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`)) AS average_age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1991-10-01'"
        ]
      ]
    },
    {
      "id": 1175,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT strftime('%Y', examination.`examination date`) - strftime('%Y', patient.birthday), patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.hgb DESC LIMIT 1",
          "SELECT (strftime('%Y', examination.`examination date`) - strftime('%Y', patient.birthday)) AS age, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.hgb DESC LIMIT 1",
          "SELECT strftime('%Y', examination.`examination date`) - strftime('%Y', patient.birthday) AS age, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.hgb DESC LIMIT 1",
          "SELECT (strftime('%Y', examination.`examination date`) - strftime('%Y', patient.birthday)) AS age, patient.diagnosis FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id JOIN examination examination ON patient.id = examination.id WHERE laboratory.hgb = (SELECT max(hgb) FROM laboratory);"
        ]
      ]
    },
    {
      "id": 1176,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT ana FROM examination WHERE `examination date` = '1996-12-02' AND id = 3605340",
          "SELECT ana FROM examination WHERE id = 3605340 AND `examination date` = '1996-12-02'",
          "SELECT ana FROM examination WHERE id = 3605340 AND \"Examination Date\" = '1996-12-02';",
          "SELECT ana FROM examination WHERE id = 3605340 AND \"Examination Date\" = '1996-12-02'"
        ]
      ]
    },
    {
      "id": 1177,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN `t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM laboratory WHERE id = 2927464 AND `date` = '1995-09-04';",
          "SELECT CASE WHEN sum(`t-cho`) < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory WHERE id = 2927464 AND `date` = '1995-09-04';",
          "SELECT CASE WHEN sum(laboratory.`t-cho`) < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND laboratory.date = '1995-09-04'",
          "SELECT CASE WHEN sum(laboratory.`t-cho`) < 250 THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND laboratory.date = '1995-09-04'"
        ]
      ]
    },
    {
      "id": 1178,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' LIMIT 1",
          "SELECT sex FROM patient WHERE id IN (SELECT id FROM examination WHERE diagnosis = 'AORTITIS') LIMIT 1;",
          "SELECT sex FROM patient WHERE id IN (SELECT id FROM examination WHERE diagnosis = 'Aortitis') LIMIT 1;",
          "SELECT sex FROM patient WHERE id IN (SELECT id FROM examination WHERE diagnosis = 'AORTITIS') LIMIT 1"
        ]
      ]
    },
    {
      "id": 1179,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT \"ACL IGM\" FROM examination WHERE \"Examination Date\" = '1993-11-12' AND diagnosis = 'SLE' AND id IN (SELECT id FROM patient WHERE description = '1994-02-19');",
          "SELECT examination.`acl igm` FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.description = '1994-02-19' AND examination.`examination date` = '1993-11-12' AND examination.diagnosis = 'SLE'",
          "SELECT \"ACL IGM\" FROM examination WHERE id IN (SELECT id FROM patient WHERE description = '1994-02-19' AND diagnosis = 'SLE') AND \"Examination Date\" = '1993-11-12';",
          "SELECT examination.\"ACL IGM\" FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.description = '1994-02-19' AND examination.\"ACL IGM\" IS NOT NULL AND examination.\"ACL IGM\" != '' AND examination.\"ACL IGM\" IS NOT NULL AND examination.\"ACL IGM\" != 0"
        ]
      ]
    },
    {
      "id": 1180,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9",
          "SELECT patient.sex FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9",
          "SELECT patient.sex FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` = '1992-06-12' AND laboratory.gpt = 9",
          "SELECT patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = '9'"
        ]
      ]
    },
    {
      "id": 1181,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (strftime('%Y', laboratory.`date`) - strftime('%Y', patient.birthday)) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.`date` = '1991-10-21'",
          "SELECT (strftime('%Y', laboratory.`date`) - strftime('%Y', patient.birthday)) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = '1991-10-21' AND laboratory.ua = '8.4'",
          "SELECT 365 * (strftime('%Y', laboratory.`examination date`) - strftime('%Y', patient.birthday)) + 30 * (strftime('%M', laboratory.`examination date`) - strftime('%M', patient.birthday)) + (strftime('%d', laboratory.`examination date`) - strftime('%d', patient.birthday)) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = '1991-10-21' AND laboratory.ua = '8.4'",
          "SELECT 365 * (strftime('%Y', laboratory.`examination date`) - strftime('%Y', patient.birthday)) + 30 * (strftime('%M', laboratory.`examination date`) - strftime('%M', patient.birthday)) + (strftime('%d', laboratory.`examination date`) - strftime('%d', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1991-10-21' AND laboratory.ua = '8.4'"
        ]
      ]
    },
    {
      "id": 1182,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date LIKE '1991-09%'",
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date LIKE '%1995%'",
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date LIKE '1995%'",
          "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date LIKE '1991-09-%'"
        ]
      ]
    },
    {
      "id": 1183,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1997-01-27' AND patient.diagnosis = 'SLE'",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1997-01-27' AND patient.diagnosis = 'SLE' ORDER BY patient.`first date` LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND examination.`examination date` = '1997-01-27' ORDER BY patient.`first date` LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1997-01-27' AND patient.diagnosis = 'SLE' ORDER BY patient.`first date` ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1184,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.birthday = '1959-03-01' AND examination.`examination date` = '1993-09-27'",
          "SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.birthday = '1959-03-01' AND examination.`examination date` = '1993-09-27'",
          "SELECT examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y-%m-%d', patient.birthday) = '1959-03-01' AND strftime('%Y-%m-%d', examination.`examination date`) = '1993-09-27'",
          "SELECT DISTINCT examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.birthday = '1959-03-01' AND examination.`examination date` = '1993-09-27'"
        ]
      ]
    },
    {
      "id": 1185,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN laboratory.date LIKE '1981-11%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) AS decrease_rate FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday = '1959-02-18'",
          "SELECT sum(CASE WHEN laboratory.date LIKE '1981-11%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) AS decreaterate FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday = '1959-02-18'",
          "SELECT sum(CASE WHEN laboratory.date LIKE '1981-11-%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12-%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) AS decrease_rate FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday = '1959-02-18'",
          "SELECT sum(CASE WHEN laboratory.date LIKE '1981-11-%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12-%' AND patient.birthday = '1959-02-18' THEN laboratory.`t-cho` ELSE 0 END) AS decreaterate FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday = '1959-02-18'"
        ]
      ]
    },
    {
      "id": 1186,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) BETWEEN '1997' AND '1998' AND patient.diagnosis = 'Behcet'",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) BETWEEN '1997' AND '1998' AND patient.diagnosis = 'BEHCET'",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) = '1997' AND patient.diagnosis = 'Behcet'",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) = '1997' AND patient.diagnosis = 'BEHCET'"
        ]
      ]
    },
    {
      "id": 1187,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alp < 4",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alp < 4",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alp < 4",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.gpt > 30 AND laboratory.alp < 4 AND laboratory.`date` BETWEEN '1987-07-06' AND '1996-01-31'"
        ]
      ]
    },
    {
      "id": 1188,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT id FROM patient WHERE sex = 'F' AND strftime('%Y', birthday) = '1964' AND admission = '+'",
          "SELECT id FROM patient WHERE admission = '+' AND sex = 'F' AND strftime('%Y', birthday) = '1964'",
          "SELECT id FROM patient WHERE admission = '+' AND birthday LIKE '1964%' AND sex = 'F'",
          "SELECT id FROM patient WHERE sex = 'F' AND strftime('%Y', birthday) = '1964' AND admission = '+';"
        ]
      ]
    },
    {
      "id": 1189,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN `acl igm` > (SELECT avg(`acl igm`) FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S') THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S'",
          "SELECT cast(sum(CASE WHEN `acl igm` > (SELECT avg(`acl igm`) * 1.2 FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S') THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S'",
          "SELECT cast(sum(CASE WHEN examination.`acl igm` > (SELECT avg(`acl igm`) FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S') THEN 1 ELSE 0 END) AS REAL) * 100 / count(examination.id) FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S'",
          "SELECT cast(sum(CASE WHEN examination.`acl igm` > (SELECT avg(`acl igm`) FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S') * 1.2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.`ana pattern` = 'S'"
        ]
      ]
    },
    {
      "id": 1190,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN laboratory.`u-pro` > 0 AND laboratory.`u-pro` < 30 AND laboratory.ua <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory",
          "SELECT cast(sum(CASE WHEN `u-pro` > 0 AND `u-pro` < 30 AND ua <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM laboratory",
          "SELECT cast(sum(CASE WHEN laboratory.`u-pro` > 0 AND laboratory.`u-pro` < 30 AND laboratory.ua <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id",
          "SELECT cast(sum(CASE WHEN laboratory.`u-pro` > 0 AND laboratory.`u-pro` < 30 AND laboratory.ua <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.`u-pro`) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id"
        ]
      ]
    },
    {
      "id": 1191,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) = '1981' AND patient.sex = 'M'",
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) = '1981' AND patient.sex = 'M'",
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND strftime('%Y', patient.`first date`) = '1981'",
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.diagnosis) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) = '1981' AND patient.sex = 'M'"
        ]
      ]
    },
    {
      "id": 1192,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` LIKE '1991-10%' AND laboratory.`t-bil` < 2 AND patient.admission = '-'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE substr(laboratory.date, 1, 7) = '1991-10' AND laboratory.`t-bil` < 2 AND patient.admission = '-'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` LIKE '1991-10%' AND laboratory.`t-bil` < 2.0 AND patient.admission = '-'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y-%m', laboratory.`date`) = '1991-10' AND laboratory.`t-bil` < 2 AND patient.admission = '-'"
        ]
      ]
    },
    {
      "id": 1193,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'",
          "SELECT count(*) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P';"
        ]
      ]
    },
    {
      "id": 1194,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123",
          "SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'PSS' AND laboratory.crp = 2 AND laboratory.cre = 1 AND laboratory.ldh = 123",
          "SELECT patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123",
          "SELECT DISTINCT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123"
        ]
      ]
    },
    {
      "id": 1195,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.alb) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.plt > 400 AND patient.diagnosis = 'SLE'",
          "SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.diagnosis = 'SLE' AND laboratory.plt > 400",
          "SELECT avg(laboratory.alb) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.diagnosis = 'SLE' AND laboratory.plt > 400",
          "SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.plt > 400 AND patient.diagnosis = 'SLE'"
        ]
      ]
    },
    {
      "id": 1196,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1",
          "SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(*) DESC LIMIT 1",
          "SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(*) DESC LIMIT 1;",
          "SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1197,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT description, diagnosis FROM patient WHERE id = 48473",
          "SELECT description, diagnosis FROM patient WHERE id = 48473;",
          "SELECT `first date`, diagnosis FROM patient WHERE id = 48473",
          "SELECT `description`, diagnosis FROM patient WHERE id = 48473"
        ]
      ]
    },
    {
      "id": 1198,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE sex = 'F' AND diagnosis = 'APS'",
          "SELECT count(id) FROM patient WHERE diagnosis = 'APS' AND sex = 'F'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.diagnosis = 'APS';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.diagnosis = 'APS'"
        ]
      ]
    },
    {
      "id": 1199,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND laboratory.tp < 6 OR laboratory.tp > 8.5",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND laboratory.tp BETWEEN 6 AND 8.5",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND laboratory.tp < 6 OR laboratory.tp > 8.5",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND (laboratory.tp < 6 OR laboratory.tp > 8.5)"
        ]
      ]
    },
    {
      "id": 1200,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN examination.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms = 'thrombocytopenia'",
          "SELECT cast(sum(CASE WHEN examination.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(examination.diagnosis) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms = 'thrombocytopenia'",
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms = 'thrombocytopenia'",
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(examination.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms = 'thrombocytopenia'"
        ]
      ]
    },
    {
      "id": 1201,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) = '1980' AND patient.diagnosis = 'RA'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) = '1980' AND patient.diagnosis = 'RA'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) = '1980' AND patient.diagnosis = 'RA'",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.birthday LIKE '1980%' AND patient.diagnosis = 'RA'"
        ]
      ]
    },
    {
      "id": 1202,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND patient.admission = '-' AND patient.diagnosis = 'Behcet'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND patient.admission = '-' AND patient.diagnosis = 'BEHCET'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.\"Examination Date\" BETWEEN '1995-01-01' AND '1997-12-31' AND patient.admission = '-' AND patient.diagnosis = 'Behcet';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND patient.admission = '-' AND examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND patient.diagnosis = 'Behcet'"
        ]
      ]
    },
    {
      "id": 1203,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc < 3.5 AND patient.sex = 'F'"
        ]
      ]
    },
    {
      "id": 1204,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT strftime('%J', `examination date`) - strftime('%J', `first date`) FROM patient WHERE id = 821298",
          "SELECT strftime('%J', `examination date`) - strftime('%J', `first date`) AS days FROM patient WHERE id = 821298",
          "SELECT strftime('%J', `examination date`) - strftime('%J', `first date`) FROM patient WHERE id = '821298'",
          "SELECT strftime('%J', `examination date`) - strftime('%J', `first date`) AS days FROM patient WHERE id = '821298'"
        ]
      ]
    },
    {
      "id": 1205,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN laboratory.ua > 8.0 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266",
          "SELECT CASE WHEN laboratory.ua > 8.0 THEN 'Normal' ELSE 'Abnormal' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 57266",
          "SELECT CASE WHEN laboratory.ua > 8.0 OR (laboratory.ua > 6.5 AND patient.sex = 'F') THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 57266",
          "SELECT CASE WHEN laboratory.ua > 8.0 AND patient.sex = 'M' THEN 'Normal' WHEN laboratory.ua > 6.5 AND patient.sex = 'F' THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 57266"
        ]
      ]
    },
    {
      "id": 1206,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 48473 AND laboratory.got >= 60",
          "SELECT laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = '48473' AND laboratory.got >= 60",
          "SELECT laboratory.`date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 48473 AND laboratory.got >= 60",
          "SELECT laboratory.`date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '48473' AND laboratory.got >= 60"
        ]
      ]
    },
    {
      "id": 1207,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex, patient.birthday, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', laboratory.date) = '1994' AND laboratory.got < 60",
          "SELECT patient.sex, patient.birthday, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date LIKE '1994%' AND laboratory.got < 60",
          "SELECT patient.sex, patient.birthday, laboratory.date FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', laboratory.date) = '1994' AND laboratory.got < 60",
          "SELECT patient.sex, patient.`first date`, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date LIKE '1994%' AND laboratory.got < 60"
        ]
      ]
    },
    {
      "id": 1208,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt > 60",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt > 60",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60",
          "SELECT p.id FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.sex = 'M' AND l.gpt > 60;"
        ]
      ]
    },
    {
      "id": 1209,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday ASC",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday ASC"
        ]
      ]
    },
    {
      "id": 1210,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.ldh) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500",
          "SELECT avg(ldh) FROM laboratory WHERE ldh < 500",
          "SELECT cast(sum(laboratory.ldh) AS REAL) / count(laboratory.ldh) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500",
          "SELECT avg(laboratory.ldh) FROM laboratory laboratory WHERE laboratory.ldh < 500;"
        ]
      ]
    },
    {
      "id": 1211,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh BETWEEN 700 AND 900",
          "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh BETWEEN 600 AND 800",
          "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', birthday) AS age FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800;",
          "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800;"
        ]
      ]
    },
    {
      "id": 1212,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission IN ('+', '-')",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE alp < 300 AND patient.admission IN ('+', '-')",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 GROUP BY patient.admission"
        ]
      ]
    },
    {
      "id": 1213,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END FROM patient WHERE strftime('%Y-%m-%d', birthday) = '1982-04-01';",
          "SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END AS status FROM patient WHERE strftime('%Y-%m-%d', birthday) = '1982-04-01';",
          "SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM patient WHERE strftime('%Y-%m-%d', birthday) = '1982-04-01';",
          "SELECT p.id, CASE WHEN l.alp < 300 THEN 'Normal' ELSE 'Abnormal' END AS status FROM patient p LEFT JOIN laboratory l ON p.id = l.id WHERE p.birthday = '1982-04-01';"
        ]
      ]
    },
    {
      "id": 1214,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0",
          "SELECT patient.id, patient.sex, patient.`first date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tp < 6.0",
          "SELECT p.id, p.sex, p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.tp < 6.0;"
        ]
      ]
    },
    {
      "id": 1215,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT (laboratory.tp - 8.5) AS deviation FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.tp > 8.5",
          "SELECT (laboratory.tp - 8.5) AS deviation FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.tp > 8.5",
          "SELECT (laboratory.tp - 8.5) AS deviation FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.tp > 8.5;",
          "SELECT abs(laboratory.tp - 8.5) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.tp > 8.5"
        ]
      ]
    },
    {
      "id": 1216,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb < 3.5 OR laboratory.alb > 5.5) ORDER BY patient.birthday DESC",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb > 5.5 OR laboratory.alb < 3.5) ORDER BY patient.birthday DESC",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb < 3.5 OR laboratory.alb > 5.5) ORDER BY patient.birthday DESC",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb > 5.5 OR laboratory.alb < 3.5) ORDER BY patient.birthday DESC"
        ]
      ]
    },
    {
      "id": 1217,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM patient WHERE strftime('%Y', birthday) = '1982';",
          "SELECT CASE WHEN alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM patient WHERE strftime('%Y', birthday) = '1982';",
          "SELECT CASE WHEN alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM patient WHERE strftime('%Y', birthday) = '1982'",
          "SELECT CASE WHEN alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM patient WHERE strftime('%Y', birthday) = '1982'"
        ]
      ]
    },
    {
      "id": 1218,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.ua > 8.0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.ua) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.ua > 8.0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.ua > 8.0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.ua > 8.0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id"
        ]
      ]
    },
    {
      "id": 1219,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.ua) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua < 8.0",
          "SELECT avg(laboratory.ua) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua < 8.0 OR laboratory.ua < 6.5",
          "SELECT avg(laboratory.ua) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua < 8.0 OR (laboratory.ua < 6.5 AND patient.sex = 'F')",
          "SELECT avg(laboratory.ua) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua < 8.0"
        ]
      ]
    },
    {
      "id": 1220,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un = 29",
          "SELECT p.id, p.sex, p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.un = 29;",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.un = 29",
          "SELECT DISTINCT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un = 29"
        ]
      ]
    },
    {
      "id": 1221,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'RA' AND laboratory.un < 30",
          "SELECT p.id, p.sex, p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.diagnosis = 'RA' AND l.un < 30;",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un < 30 AND patient.diagnosis = 'RA'",
          "SELECT id, sex, birthday FROM patient WHERE diagnosis = 'RA' AND un < 30"
        ]
      ]
    },
    {
      "id": 1222,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE sex = 'M' AND cre >= 1.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.cre >= 1.5",
          "SELECT count(id) FROM patient WHERE sex = 'M' AND cre >= 1.5;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.cre >= 1.5;"
        ]
      ]
    },
    {
      "id": 1223,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT CASE WHEN (SELECT count(*) FROM patient WHERE sex = 'M' AND cre >= 1.5) > (SELECT count(*) FROM patient WHERE sex = 'F' AND cre >= 1.5) THEN 'True' ELSE 'False' END AS answer;",
          "SELECT CASE WHEN (SELECT sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5) > (SELECT sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5) THEN 'True' ELSE 'False' END AS answer;",
          "SELECT CASE WHEN sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) > sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END AS answer FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5",
          "SELECT CASE WHEN sum(CASE WHEN patient.sex = 'M' AND laboratory.cre >= 1.5 THEN 1 ELSE 0 END) > sum(CASE WHEN patient.sex = 'F' AND laboratory.cre >= 1.5 THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END AS answer FROM patient INNER JOIN laboratory ON patient.id = laboratory.id"
        ]
      ]
    },
    {
      "id": 1224,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT p.id, p.sex, p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.\"`t-bil`\" = (SELECT max(\"`t-bil`\") FROM laboratory);",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` = ( SELECT max(`t-bil`) FROM laboratory )"
        ]
      ]
    },
    {
      "id": 1225,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.sex, GROUP_CONCAT(DISTINCT laboratory.`t-bil`) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 GROUP BY patient.sex",
          "SELECT patient.sex, GROUP_CONCAT(DISTINCT laboratory.`t-bil`) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 GROUP BY patient.sex",
          "SELECT sex, GROUP_CONCAT(DISTINCT id) FROM laboratory WHERE `t-bil` >= 2.0 GROUP BY sex;",
          "SELECT patient.sex, GROUP_CONCAT(DISTINCT laboratory.`t-bil`) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`t-bil` >= 2.0 GROUP BY patient.sex"
        ]
      ]
    },
    {
      "id": 1226,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC LIMIT 1",
          "SELECT patient.id, laboratory.`t-cho` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id ORDER BY laboratory.`t-cho` DESC LIMIT 1",
          "SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-cho` = ( SELECT max(`t-cho`) FROM laboratory )",
          "SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-cho` = ( SELECT max(laboratory.`t-cho`) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id )"
        ]
      ]
    },
    {
      "id": 1227,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday)) FROM patient WHERE sex = 'M' AND `t-cho` >= 250",
          "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday)) AS average_age FROM patient WHERE sex = 'M' AND `t-cho` >= 250;",
          "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday)) FROM patient WHERE sex = 'M' AND `t-cho` >= 250;",
          "SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday)) FROM patient WHERE sex = 'M' AND `t-cho` > 250"
        ]
      ]
    },
    {
      "id": 1228,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300",
          "SELECT p.id, p.diagnosis FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.tg > 300;",
          "SELECT patient.id, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tg > 300",
          "SELECT DISTINCT patient.id, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300"
        ]
      ]
    },
    {
      "id": 1229,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 200 AND strftime('%Y', 'now') - strftime('%Y', patient.birthday) > 50",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 200 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 50",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg >= 200 AND strftime('%Y', 'now') - strftime('%Y', patient.birthday) > 50",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 200 AND strftime('%Y', 'now') - strftime('%Y', patient.birthday) > 50;"
        ]
      ]
    },
    {
      "id": 1230,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.cpk < 250",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cpk < 250 AND patient.admission = '-'",
          "SELECT DISTINCT p.id FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.admission = '-' AND l.cpk < 250;",
          "SELECT DISTINCT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.cpk < 250"
        ]
      ]
    },
    {
      "id": 1231,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956' AND patient.sex = 'M' AND laboratory.cpk > 250",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.cpk > 250 AND strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.cpk > 250 AND strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND patient.birthday BETWEEN '1936-01-01' AND '1956-12-31' AND laboratory.cpk > 250;"
        ]
      ]
    },
    {
      "id": 1232,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250",
          "SELECT patient.id, patient.sex, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250",
          "SELECT patient.id, patient.sex, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu > 180 AND laboratory.`t-cho` < 250",
          "SELECT patient.id, patient.sex, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250;"
        ]
      ]
    },
    {
      "id": 1233,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, laboratory.glu FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.description) = '1991' AND laboratory.glu < 180",
          "SELECT patient.id, laboratory.glu FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) = '1991' AND laboratory.glu < 180",
          "SELECT patient.id, laboratory.glu FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', laboratory.`date`) = '1991' AND laboratory.glu < 180",
          "SELECT patient.id, laboratory.glu FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', laboratory.date) = '1991' AND laboratory.glu < 180"
        ]
      ]
    },
    {
      "id": 1234,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc < 3.5 OR laboratory.wbc > 9.0 GROUP BY patient.id, patient.sex, patient.birthday ORDER BY patient.birthday ASC",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE (laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0) GROUP BY patient.id, patient.sex, patient.birthday ORDER BY patient.birthday ASC",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE (laboratory.wbc < 3.5 OR laboratory.wbc > 9.0) GROUP BY patient.id, patient.sex, patient.birthday ORDER BY patient.birthday ASC",
          "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc > 9.0 OR laboratory.wbc < 3.5 GROUP BY patient.id, patient.sex, patient.birthday ORDER BY patient.birthday ASC"
        ]
      ]
    },
    {
      "id": 1235,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc < 3.5",
          "SELECT patient.diagnosis, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(laboratory.rbc AS REAL) < 3.5",
          "SELECT patient.diagnosis, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE cast(laboratory.rbc AS REAL) < 3.5",
          "SELECT patient.diagnosis, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE cast(laboratory.rbc AS REAL) < 3.5;"
        ]
      ]
    },
    {
      "id": 1236,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND laboratory.rbc BETWEEN 3.5 AND 6.0",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', 'now') - strftime('%Y', birthday) >= 50 AND laboratory.rbc BETWEEN 3.5 AND 6.0",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND (laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0)",
          "SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND (laboratory.rbc > 3.5 OR laboratory.rbc < 6)"
        ]
      ]
    },
    {
      "id": 1237,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT p.id, p.sex FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.admission = '-' AND l.hgb < 10;",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.hgb < 10",
          "SELECT DISTINCT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.hgb < 10",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hgb < 10 AND patient.admission = '-'"
        ]
      ]
    },
    {
      "id": 1238,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.hgb BETWEEN 10 AND 17 ORDER BY patient.birthday LIMIT 1",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND 10 < laboratory.hgb < 17 ORDER BY patient.birthday LIMIT 1",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND 10 < laboratory.hgb AND laboratory.hgb < 17",
          "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.hgb BETWEEN 10 AND 16"
        ]
      ]
    },
    {
      "id": 1239,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct >= 52 GROUP BY patient.id HAVING count(laboratory.id) > 2",
          "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct >= 52 GROUP BY patient.id HAVING count(laboratory.id) > 2",
          "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct > 52 GROUP BY patient.id HAVING count(laboratory.id) > 2",
          "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct > 52 GROUP BY patient.id HAVING count(laboratory.id) > 2"
        ]
      ]
    },
    {
      "id": 1240,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(hct) FROM laboratory WHERE date LIKE '1991%' AND hct < 29",
          "SELECT avg(hct) FROM laboratory WHERE Date LIKE '1991%' AND hct < 29",
          "SELECT avg(hct) FROM laboratory WHERE strftime('%Y', `date`) = '1991' AND hct < 29",
          "SELECT avg(hct) FROM laboratory WHERE substr(`date`, 1, 4) = '1991' AND hct < 29"
        ]
      ]
    },
    {
      "id": 1241,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END), sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) FROM laboratory",
          "SELECT sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END), sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) FROM laboratory;",
          "SELECT (SELECT count(*) FROM laboratory WHERE plt < 100) - (SELECT count(*) FROM laboratory WHERE plt > 400) AS diff FROM laboratory LIMIT 1;",
          "SELECT sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END), sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) , cast(sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) FROM laboratory"
        ]
      ]
    },
    {
      "id": 1242,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', laboratory.`date`) = '1984' AND laboratory.plt BETWEEN 100 AND 400",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', laboratory.date) = '1984' AND laboratory.plt BETWEEN 100 AND 400",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', laboratory.`date`) = '1984' AND laboratory.plt BETWEEN 100 AND 400 AND strftime('%Y', patient.birthday) - strftime('%Y', patient.birthday) < 50",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) - strftime('%Y', patient.admission) < 50 AND laboratory.plt BETWEEN 100 AND 400 AND strftime('%Y', laboratory.`examination date`) = '1984'"
        ]
      ]
    },
    {
      "id": 1243,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 55",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 55 AND laboratory.pt >= 14",
          "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', date('now')) - strftime('%Y', patient.birthday) > 55 AND laboratory.pt >= 14"
        ]
      ]
    },
    {
      "id": 1244,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) > '1992' AND laboratory.pt < 14",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) > '1992' AND laboratory.pt < 14",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.pt < 14 AND strftime('%Y', patient.`first date`) > '1992'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.`first date` > '1992-12-31' AND laboratory.pt < 14"
        ]
      ]
    },
    {
      "id": 1245,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.aptt) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.aptt < 45 AND examination.`examination date` > '1997-01-01'",
          "SELECT count(laboratory.aptt) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.aptt < 45 AND examination.`examination date` > '1997-01-01'",
          "SELECT count(*) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.aptt < 45 AND examination.`examination date` > '1997-01-01'"
        ]
      ]
    },
    {
      "id": 1246,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 0",
          "SELECT count(laboratory.aptt) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 0",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.id IN (SELECT id FROM patient WHERE aptt > 45) AND examination.thrombosis = 0;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 0;"
        ]
      ]
    },
    {
      "id": 1247,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 8.9 AND (laboratory.fg <= 150 OR laboratory.fg >= 450);",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 8.9 AND (laboratory.fg <= 150 OR laboratory.fg >= 450)",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 8.9 AND (laboratory.fg > 450 OR laboratory.fg < 150);",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 8.9 AND laboratory.fg BETWEEN 150 AND 450;"
        ]
      ]
    },
    {
      "id": 1248,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg BETWEEN 150 AND 450;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg NOT BETWEEN 150 AND 450;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg BETWEEN 150 AND 450",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.fg BETWEEN 150 AND 450 AND patient.birthday > '1980-01-01'"
        ]
      ]
    },
    {
      "id": 1249,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(laboratory.`u-pro` AS INTEGER) > 30",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(laboratory.`u-pro` AS INTEGER) > 30",
          "SELECT DISTINCT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE cast(laboratory.`u-pro` AS INTEGER) > 30",
          "SELECT DISTINCT examination.diagnosis FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE cast(laboratory.`u-pro` AS INTEGER) > 30"
        ]
      ]
    },
    {
      "id": 1250,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`u-pro` BETWEEN 0 AND 30 AND patient.diagnosis = 'SLE'",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND cast(laboratory.`u-pro` AS INTEGER) BETWEEN 0 AND 30",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`u-pro` BETWEEN 0 AND 30 AND patient.diagnosis = 'SLE'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`u-pro` BETWEEN 0 AND 30 AND examination.diagnosis = 'SLE'"
        ]
      ]
    },
    {
      "id": 1251,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.igg >= 2000",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.igg >= 2000",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl igg` > 2000",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.igg > 2000"
        ]
      ]
    },
    {
      "id": 1252,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms IS NOT NULL AND laboratory.igg > 900 AND laboratory.igg < 2000",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms IS NOT NULL AND laboratory.igg > 900 AND laboratory.igg < 2000",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.id IN (SELECT patient.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.igg > 900 AND laboratory.igg < 2000) AND examination.symptoms IS NOT NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.id IN (SELECT id FROM patient WHERE igg BETWEEN 900 AND 2000) AND examination.symptoms IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1253,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.iga > 80 AND laboratory.iga < 500 ORDER BY laboratory.iga DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1254,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) >= '1990' AND examination.`acl iga` > 80 AND examination.`acl iga` < 500",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) >= '1990' AND examination.`acl iga` > 80 AND examination.`acl iga` < 500",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) >= '1990' AND examination.`acl iga` BETWEEN 80 AND 499",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) >= '1990' AND examination.`acl iga` IS NOT NULL AND examination.`acl iga` > 80 AND examination.`acl iga` < 500;"
        ]
      ]
    },
    {
      "id": 1255,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl igm` > 40 OR examination.`acl igm` < 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1",
          "SELECT examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE (examination.`acl igm` <= 40 OR examination.`acl igm` >= 400) GROUP BY examination.diagnosis ORDER BY count(examination.diagnosis) DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl igm` BETWEEN 41 AND 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl igm` > 40 OR examination.`acl igm` < 400 GROUP BY patient.id ORDER BY count(patient.diagnosis) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1256,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE crp = '+') AND description IS NULL",
          "SELECT count(*) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE crp = '+') AND description IS NULL",
          "SELECT count(id) FROM patient WHERE description IS NULL AND crp != '+'",
          "SELECT count(*) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE crp = '+') AND description IS NULL;"
        ]
      ]
    },
    {
      "id": 1257,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(strftime('%Y', date) AS INT) - cast(strftime('%Y', birthday) AS INT) < 70 AND laboratory.cre >= 1.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(strftime('%Y', date) AS INT) - cast(strftime('%Y', patient.birthday) AS INT) < 70 AND laboratory.cre >= 1.5",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE cast(strftime('%Y', date) AS INT) - cast(strftime('%Y', birthday) AS INT) < 70 AND cast(laboratory.c3 AS REAL) >= 1.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(strftime('%Y', date) AS INT) - cast(strftime('%Y', birthday) AS INT) < 70 AND cast(laboratory.cre AS REAL) >= 1.5"
        ]
      ]
    },
    {
      "id": 1258,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.ra IN ('-', '+') AND examination.kct = '+'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ra IN ('-', '+') AND examination.kct = '+'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ra IN ('-', '+-') AND examination.kct = '+'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.ra IN ('-', '+-') AND examination.kct = '+'"
        ]
      ]
    },
    {
      "id": 1259,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) > '1985' AND laboratory.ra IN ('-', '+')",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) > '1985' AND laboratory.ra IN ('-', '+')",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) >= '1985' AND laboratory.ra IN ('-', '+')",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) > '1985' AND laboratory.ra IN ('-', '+');"
        ]
      ]
    },
    {
      "id": 1260,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT p.id FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.rf < '20' AND strftime('%Y', 'now') - strftime('%Y', p.birthday) > 60;",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast((strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS INT) > 60 AND laboratory.rf < '20'",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast((strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS INT) > 60 AND cast(laboratory.rf AS REAL) < 20",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast((strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS INTEGER) > 60 AND cast(laboratory.rf AS REAL) < 20"
        ]
      ]
    },
    {
      "id": 1261,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < '20' AND examination.thrombosis = '0'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.rf < '20' AND examination.thrombosis = '0'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < '20' AND examination.thrombosis = 0",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < '20' AND examination.thrombosis = 0"
        ]
      ]
    },
    {
      "id": 1262,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`ana pattern` = 'P' AND laboratory.c3 > 35",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.c3 > 35 AND examination.`ana pattern` = 'P'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.c3 > 35 AND examination.`ana pattern` = 'P'",
          "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.c3 > 35 AND examination.ana = 256 AND examination.`ana pattern` = 'P'"
        ]
      ]
    },
    {
      "id": 1263,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY examination.`acl iga` DESC LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY patient.id LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY patient.id LIMIT 1"
        ]
      ]
    },
    {
      "id": 1264,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'APS' AND laboratory.c4 > 10;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'APS' AND laboratory.c4 > 10",
          "SELECT count(DISTINCT patient.id) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id JOIN examination examination ON patient.id = examination.id WHERE laboratory.c4 > 10 AND patient.diagnosis = 'APS';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'APS' AND laboratory.c4 > 10;"
        ]
      ]
    },
    {
      "id": 1265,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.rnp IN ('-', '+-') AND patient.admission = '+';",
          "SELECT count(DISTINCT patient.id) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.rnp IN ('-', '+-') AND patient.admission = '+';",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rnp IN ('-', '+-') AND patient.admission = '+'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rnp IN ('-', '+-') AND patient.admission = '+';"
        ]
      ]
    },
    {
      "id": 1266,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT birthday FROM patient WHERE rnp NOT IN ('-', '+') ORDER BY birthday DESC LIMIT 1",
          "SELECT p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.rnp NOT IN ('-', '+');",
          "SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE rnp != '-');",
          "SELECT birthday FROM patient WHERE rnp != '-' AND rnp != '+';"
        ]
      ]
    },
    {
      "id": 1267,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.sm IN ('-', '+-') AND examination.thrombosis = 0",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sm IN ('-', '+-') AND examination.thrombosis = 0",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sm IN ('-', '+-') AND examination.thrombosis = 0",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sm IN ('-', '+-') AND examination.thrombosis = 0"
        ]
      ]
    },
    {
      "id": 1268,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sm NOT IN ('negative', '0') ORDER BY patient.birthday LIMIT 3",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sm NOT IN ('negative', '0') ORDER BY patient.birthday DESC LIMIT 3",
          "SELECT p.id FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.sm NOT IN ('negative', '0') ORDER BY p.birthday LIMIT 3;",
          "SELECT id FROM patient WHERE id IN (SELECT id FROM laboratory WHERE sm NOT IN ('negative', '0')) ORDER BY birthday LIMIT 3;"
        ]
      ]
    },
    {
      "id": 1269,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sc170 IN ('negative', '0') AND examination.`examination date` > '1997-01-01'",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', examination.`examination date`) > '1997' AND laboratory.sc170 IN ('negative', '0')",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sc170 IN ('negative', '0') AND examination.`examination date` > '1997-01-01'",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', examination.`examination date`) > '1997' AND laboratory.sc170 IN ('negative', '0')"
        ]
      ]
    },
    {
      "id": 1270,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('negative', '0') AND patient.sex = 'F' AND (examination.symptoms IS NULL OR examination.symptoms = '')",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('negative', '0') AND patient.sex = 'F' AND examination.symptoms IS NULL",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.sc170 IN ('negative', '0') AND (examination.symptoms IS NULL OR examination.symptoms = '');",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('negative', '0') AND patient.sex = 'F' AND (examination.symptoms IS NULL OR examination.symptoms = '');"
        ]
      ]
    },
    {
      "id": 1271,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN ('-','+') AND strftime('%Y', patient.`first date`) < '2000'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN ('-','+') AND strftime('%Y', patient.`first date`) < '2000';",
          "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ssa IN ('-','+') AND strftime('%Y', patient.`first date`) < '2000'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN ('-', '+-') AND strftime('%Y', patient.`first date`) < '2000'"
        ]
      ]
    },
    {
      "id": 1272,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa NOT IN ('negative', '0') ORDER BY patient.`first date` LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa NOT IN ('negative', '0') ORDER BY patient.`first date` ASC LIMIT 1",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ssa NOT IN ('negative', '0') ORDER BY patient.`first date` LIMIT 1",
          "SELECT id FROM patient WHERE id = (SELECT id FROM patient ORDER BY `first date` ASC LIMIT 1) AND ssa NOT IN ('negative', '0');"
        ]
      ]
    },
    {
      "id": 1273,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.ssb IN ('-', '+-')",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssb IN ('-', '+-') AND patient.diagnosis = 'SLE'",
          "SELECT count(DISTINCT patient.id) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id JOIN examination examination ON patient.id = examination.id WHERE laboratory.ssb IN ('-', '+-') AND patient.diagnosis = 'SLE';",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.ssb IN ('-', '+-');"
        ]
      ]
    },
    {
      "id": 1274,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.ssb IN ('negative', '0') AND examination.symptoms IS NOT NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.ssb IN ('negative', '0') AND examination.symptoms IS NOT NULL",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms IS NOT NULL AND laboratory.ssb IN ('negative', '0')",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.ssb IN ('negative', '0') AND examination.symptoms IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1275,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.centromea IN ('-', '+') AND laboratory.ssb IN ('-', '+') AND patient.sex = 'M'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.centromea IN ('-', '+') AND laboratory.ssb IN ('-', '+');",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.centromea IN ('-', '+') AND laboratory.ssb IN ('-', '+');",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.centromea IN ('-', '+') AND laboratory.ssb IN ('-', '+')"
        ]
      ]
    },
    {
      "id": 1276,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.dna >= 8",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.dna >= 8",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE cast(laboratory.dna AS REAL) > 8",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE cast(laboratory.dna AS REAL) > 8"
        ]
      ]
    },
    {
      "id": 1277,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL",
          "SELECT count(DISTINCT patient.id) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.dna < 8 AND patient.description IS NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient patient LEFT JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL;"
        ]
      ]
    },
    {
      "id": 1278,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '+' AND examination.`acl igg` BETWEEN 900 AND 2000",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.admission = '+' AND 900 < patient.igg < 2000;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.admission = '+' AND 900 < patient.igg < 2000 AND examination.diagnosis = 'Normal';",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '+' AND examination.`acl igg` BETWEEN 900 AND 1999"
        ]
      ]
    },
    {
      "id": 1279,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN laboratory.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
          "SELECT cast(sum(CASE WHEN laboratory.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.got) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
          "SELECT cast(sum(CASE WHEN laboratory.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
          "SELECT cast(sum(CASE WHEN patient.diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60"
        ]
      ]
    },
    {
      "id": 1280,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(id) FROM patient WHERE sex = 'M' AND got < 60",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.got < 60",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.got < 60;",
          "SELECT count(id) FROM patient WHERE sex = 'M' AND got < 60;"
        ]
      ]
    },
    {
      "id": 1281,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT min(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60",
          "SELECT min(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got > 60",
          "SELECT min(patient.`first date`) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60",
          "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60 ORDER BY patient.birthday LIMIT 1"
        ]
      ]
    },
    {
      "id": 1282,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3",
          "SELECT patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 LIMIT 3",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 GROUP BY patient.birthday ORDER BY count(laboratory.gpt) DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1283,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND patient.sex = 'M'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND patient.sex = 'M'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.got < 60 AND patient.sex = 'M'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.got < 60;"
        ]
      ]
    },
    {
      "id": 1284,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT min(`first date`) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE ldh = (SELECT max(ldh) FROM laboratory WHERE ldh < 500));",
          "SELECT min(`first date`) FROM patient WHERE id = (SELECT id FROM laboratory WHERE ldh = (SELECT max(ldh) FROM laboratory WHERE ldh < 500));",
          "SELECT min(`first date`) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE ldh = (SELECT max(ldh) FROM laboratory WHERE ldh < 500))",
          "SELECT min(`first date`) FROM patient WHERE id = (SELECT id FROM laboratory WHERE ldh = (SELECT max(ldh) FROM laboratory WHERE ldh < 500))"
        ]
      ]
    },
    {
      "id": 1285,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh >= 500 ORDER BY patient.`first date` DESC LIMIT 1",
          "SELECT `examination date` FROM examination WHERE id = (SELECT id FROM patient ORDER BY `first date` DESC LIMIT 1) AND ldh >= 500",
          "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > 500 ORDER BY patient.`first date` DESC LIMIT 1",
          "SELECT `examination date` FROM examination WHERE id = (SELECT id FROM patient ORDER BY `first date` DESC LIMIT 1) AND ldh >= 500;"
        ]
      ]
    },
    {
      "id": 1286,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.alp >= 300;",
          "SELECT count(patient.admission) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp >= 300 AND patient.admission = '+'",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp >= 300 AND patient.admission = '+'",
          "SELECT count(id) FROM patient WHERE admission = '+' AND alp >= 300"
        ]
      ]
    },
    {
      "id": 1287,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.alp < 300;",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.alp < 300",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.alp < 300",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.alp < 300"
        ]
      ]
    },
    {
      "id": 1288,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(laboratory.tp AS REAL) < 6.0",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(laboratory.tp AS REAL) < 6.0",
          "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(laboratory.tp AS REAL) < 6",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cast(laboratory.tp AS REAL) < 6"
        ]
      ]
    },
    {
      "id": 1289,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6.0 AND 8.5;",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6.0 AND 8.5",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6.0 AND 8.5",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6.0 AND 8.5"
        ]
      ]
    },
    {
      "id": 1290,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.`examination date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb > 3.5 AND laboratory.alb < 5.5 ORDER BY laboratory.alb DESC LIMIT 1",
          "SELECT laboratory.`examination date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb BETWEEN 3.5 AND 5.5 ORDER BY laboratory.alb DESC LIMIT 1",
          "SELECT e.`examination date` FROM laboratory l JOIN examination e ON l.id = e.id WHERE l.alb BETWEEN 3.5 AND 5.5 ORDER BY l.alb DESC LIMIT 1;",
          "SELECT e.`examination date` FROM laboratory l JOIN examination e ON l.id = e.id WHERE l.alb > 3.5 AND l.alb < 5.5;"
        ]
      ]
    },
    {
      "id": 1291,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.alb BETWEEN 3.5 AND 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.alb BETWEEN 3.5 AND 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.alb BETWEEN 3.5 AND 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5"
        ]
      ]
    },
    {
      "id": 1292,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.`acl igg`, examination.`acl igm`, examination.`acl iga` FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.ua > 6.50 ORDER BY laboratory.ua DESC LIMIT 1",
          "SELECT examination.`acl igg`, examination.`acl igm`, examination.`acl iga` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.ua > 6.50 ORDER BY laboratory.ua DESC LIMIT 1",
          "SELECT e.`acl igg`, e.`acl igm`, e.`acl iga` FROM patient p JOIN examination e ON p.id = e.id JOIN laboratory l ON p.id = l.id WHERE p.sex = 'F' AND l.ua > 6.50 ORDER BY l.ua DESC LIMIT 1;",
          "SELECT examination.`acl igg`, examination.`acl igm`, examination.`acl iga` FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.ua > 6.50 ORDER BY examination.ua DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1293,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT max(examination.ana) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre < 1.5",
          "SELECT max(examination.ana) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cre < 1.5",
          "SELECT max(examination.ana) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.cre < 1.5",
          "SELECT max(examination.ana) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.cre < 1.5"
        ]
      ]
    },
    {
      "id": 1294,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre < 1.5 ORDER BY laboratory.`acl iga` DESC LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cre < 1.5 ORDER BY examination.`acl iga` DESC LIMIT 1",
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre < 1.5 ORDER BY laboratory.iga DESC LIMIT 1",
          "SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.cre < 1.5 ORDER BY laboratory.iga DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1295,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` > 2 AND examination.`ana pattern` LIKE '%P%'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` > 2 AND examination.`ana pattern` LIKE '%P%'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 AND examination.`ana pattern` LIKE '%P%'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` > 2.0 AND examination.`ana pattern` LIKE '%P%'"
        ]
      ]
    },
    {
      "id": 1296,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT examination.ana FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-bil` < 2.0 ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT examination.ana FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-bil` < 2.0 ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT examination.ana FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` < 2.0 ORDER BY laboratory.`t-bil` DESC LIMIT 1",
          "SELECT examination.ana FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-bil` < 2 ORDER BY laboratory.`t-bil` DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1297,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-cho` > 250 AND examination.kct = '-'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-cho` > 250 AND examination.kct = '-'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-cho` > 250 AND examination.kct = '-'",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id JOIN examination examination ON patient.id = examination.id WHERE laboratory.`t-cho` > 250 AND examination.kct = '-';"
        ]
      ]
    },
    {
      "id": 1298,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P'",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P'",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P'",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P'"
        ]
      ]
    },
    {
      "id": 1299,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.tg < 200 AND examination.symptoms IS NOT NULL",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id IN ( SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200 ) AND examination.symptoms IS NOT NULL",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.id IN (SELECT id FROM patient WHERE id IN (SELECT id FROM laboratory WHERE tg < 200)) AND examination.symptoms IS NOT NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id IN ( SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200 ) AND ( examination.symptoms IS NOT NULL OR examination.diagnosis IS NOT NULL )"
        ]
      ]
    },
    {
      "id": 1300,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200 ORDER BY laboratory.tg DESC LIMIT 1",
          "SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tg < 200 ORDER BY laboratory.tg DESC LIMIT 1",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg = ( SELECT max(tg) FROM laboratory )",
          "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg = ( SELECT max(laboratory.tg) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id )"
        ]
      ]
    },
    {
      "id": 1301,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250",
          "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cpk < 250 AND examination.thrombosis = 0",
          "SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250"
        ]
      ]
    },
    {
      "id": 1302,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+')",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+' AND laboratory.cpk < 250",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+' AND laboratory.cpk < 250",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+'"
        ]
      ]
    },
    {
      "id": 1303,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT min(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu > 180",
          "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu > 180 ORDER BY patient.birthday LIMIT 1",
          "SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE glu > 180) ORDER BY birthday LIMIT 1",
          "SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE glu > 180) ORDER BY birthday ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1304,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.glu < 180 AND examination.thrombosis = 0;"
        ]
      ]
    },
    {
      "id": 1305,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0 AND patient.admission = '+'",
          "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9 AND patient.admission = '+'"
        ]
      ]
    },
    {
      "id": 1306,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
          "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0"
        ]
      ]
    },
    {
      "id": 1307,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc BETWEEN 3.5 AND 6.0 AND patient.admission = '-'",
          "SELECT id FROM patient WHERE admission = '-' AND (rbc < 3.5 OR rbc > 6.0);",
          "SELECT id FROM patient WHERE admission = '-' AND (laboratory.rbc > 3.5 OR laboratory.rbc < 6.0);",
          "SELECT p.id FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.admission = '-' AND (l.rbc > 3.5 OR l.rbc < 6.0);"
        ]
      ]
    },
    {
      "id": 1308,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND examination.diagnosis IS NOT NULL",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND examination.diagnosis IS NOT NULL;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND (examination.diagnosis IS NOT NULL OR examination.symptoms IS NOT NULL);",
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND (examination.diagnosis IS NOT NULL OR examination.symptoms IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1309,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT laboratory.plt, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'MCTD' AND laboratory.plt BETWEEN 100 AND 399",
          "SELECT laboratory.plt, patient.diagnosis = 'MCTD' FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt BETWEEN 100 AND 399",
          "SELECT laboratory.plt, patient.diagnosis = 'MCTD' FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt BETWEEN 100 AND 399 AND patient.diagnosis = 'MCTD'",
          "SELECT laboratory.plt, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'MCTD' AND (laboratory.plt > 100 AND laboratory.plt < 400)"
        ]
      ]
    },
    {
      "id": 1310,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT avg(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.pt < 14",
          "SELECT avg(laboratory.pt) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.pt < 14",
          "SELECT avg(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.pt < 14 AND patient.sex = 'M'",
          "SELECT cast(sum(laboratory.pt) AS REAL) / count(laboratory.pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.pt < 14"
        ]
      ]
    },
    {
      "id": 1311,
      "db_id": "thrombosis_prediction",
      "infer_predictions": [
        [
          "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14",
          "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.id IN (SELECT patient FROM examination WHERE thrombosis IN (2, 1)) AND laboratory.pt < 14;",
          "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.id IN (SELECT patient FROM examination WHERE thrombosis = 2) AND laboratory.pt < 14;"
        ]
      ]
    },
    {
      "id": 1312,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'",
          "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders');",
          "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
          "SELECT major_name FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders' )"
        ]
      ]
    },
    {
      "id": 1313,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
          "SELECT count(*) FROM (SELECT member.member_id FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering' GROUP BY member.member_id);"
        ]
      ]
    },
    {
      "id": 1314,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'",
          "SELECT member.first_name, member.last_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';",
          "SELECT m.first_name, m.last_name FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE mj.department = 'Art and Design Department';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'"
        ]
      ]
    },
    {
      "id": 1315,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';",
          "SELECT count(DISTINCT member.member_id) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
        ]
      ]
    },
    {
      "id": 1316,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT member.phone FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT DISTINCT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
        ]
      ]
    },
    {
      "id": 1317,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member JOIN event event ON attendance.link_to_event = event.event_id WHERE member.t_shirt_size = 'Medium' AND event.event_name = 'Women''s Soccer';",
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.t_shirt_size = 'Medium' AND event.event_name = 'Women''s Soccer'",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id JOIN member member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';"
        ]
      ]
    },
    {
      "id": 1318,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_name ORDER BY count(attendance.link_to_event) DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY count(attendance.link_to_event) DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY count(attendance.link_to_member) DESC LIMIT 1",
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY attendance.link_to_event ORDER BY count(attendance.link_to_event) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1319,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE POSITION = 'Vice President');",
          "SELECT DISTINCT major.college FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';"
        ]
      ]
    },
    {
      "id": 1320,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
          "SELECT DISTINCT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'"
        ]
      ]
    },
    {
      "id": 1321,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.type = 'Student_Club'",
          "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN EVENT ON attendance.link_to_event = EVENT.event_id WHERE strftime('%Y', EVENT.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND EVENT.type = 'Student_Club'",
          "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.type = 'Student_Club'",
          "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN EVENT ON attendance.link_to_event = EVENT.event_id WHERE strftime('%Y', EVENT.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND EVENT.type = 'Student_Club'"
        ]
      ]
    },
    {
      "id": 1322,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(event.event_id) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 10",
          "SELECT count(*) FROM (SELECT event.event_id FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 10);",
          "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member IN (SELECT member_id FROM member WHERE POSITION = 'Student_Club') AND event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(DISTINCT attendance.link_to_member) > 10;",
          "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member IN (SELECT member_id FROM member WHERE POSITION = 'Student_Club') AND event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 10;"
        ]
      ]
    },
    {
      "id": 1323,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 20",
          "SELECT DISTINCT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 20",
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY event.event_name HAVING count(attendance.link_to_member) > 20",
          "SELECT DISTINCT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY event.event_name HAVING count(attendance.link_to_member) > 20"
        ]
      ]
    },
    {
      "id": 1324,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'",
          "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'",
          "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE substr(event.event_date, 1, 4) = '2020' AND event.type = 'Meeting'",
          "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020'"
        ]
      ]
    },
    {
      "id": 1325,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense )",
          "SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense);",
          "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
          "SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense WHERE cost IS NOT NULL);"
        ]
      ]
    },
    {
      "id": 1326,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
          "SELECT count(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';"
        ]
      ]
    },
    {
      "id": 1327,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'",
          "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Laugh Out Loud'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'",
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Laugh Out Loud'"
        ]
      ]
    },
    {
      "id": 1328,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
          "SELECT last_name FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');",
          "SELECT DISTINCT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
          "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies' GROUP BY member.last_name"
        ]
      ]
    },
    {
      "id": 1329,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
          "SELECT zip_code.county FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey';",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'"
        ]
      ]
    },
    {
      "id": 1330,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'",
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'",
          "SELECT major.college FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';",
          "SELECT DISTINCT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'"
        ]
      ]
    },
    {
      "id": 1331,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
          "SELECT sum(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
          "SELECT income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President'",
          "SELECT sum(income.amount) FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President'"
        ]
      ]
    },
    {
      "id": 1332,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_event = member.member_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food'",
          "SELECT sum(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id INNER JOIN attendance ON EVENT.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE EVENT.event_name = 'September Meeting' AND budget.category = 'Food'",
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_event = attendance.link_to_event WHERE event.event_name = 'September Meeting' AND budget.category = 'Food'",
          "SELECT sum(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id INNER JOIN attendance ON EVENT.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE EVENT.event_name = 'September Meeting' AND budget.category = 'Food' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1333,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President'",
          "SELECT zip_code.city, zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'President'",
          "SELECT zip_code.city, zip_code.state FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';",
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President of the Student_Club'"
        ]
      ]
    },
    {
      "id": 1334,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois'",
          "SELECT member.first_name, member.last_name FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Illinois'",
          "SELECT m.first_name, m.last_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state = 'Illinois';",
          "SELECT member.first_name, member.last_name FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';"
        ]
      ]
    },
    {
      "id": 1335,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_event = member.member_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'",
          "SELECT sum(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id INNER JOIN attendance ON EVENT.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE EVENT.event_name = 'September Meeting' AND budget.category = 'Advertisement'",
          "SELECT sum(budget.spent) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_event = attendance.link_to_event WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'",
          "SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'"
        ]
      ]
    },
    {
      "id": 1336,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT department FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Pierce' AND last_name = 'Guidi');",
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Pierce' AND member.last_name = 'Guidi'",
          "SELECT department FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Pierce' AND last_name = 'Pierce' OR first_name = 'Guido' AND last_name = 'Guido');",
          "SELECT department FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Pierce' AND last_name = 'Pierce' AND first_name = 'Guido' AND last_name = 'Guido');"
        ]
      ]
    },
    {
      "id": 1337,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'October Speaker'",
          "SELECT sum(budget.amount) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'October Speaker'",
          "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker'",
          "SELECT sum(budget.amount) FROM EVENT INNER JOIN budget ON EVENT.event_id = budget.link_to_event WHERE EVENT.event_name = 'October Speaker'"
        ]
      ]
    },
    {
      "id": 1338,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT approved FROM expense WHERE expense_date = '2019-10-08' AND event_id IN (SELECT event_id FROM event WHERE event_name = 'October Meeting');",
          "SELECT approved FROM expense WHERE expense_date = '2019-10-08' AND link_to_event IN (SELECT event_id FROM event WHERE event_name = 'October Meeting');",
          "SELECT e.approved FROM expense e JOIN attendance a ON e.link_to_member = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.expense_date = '2019-10-08' AND e.approved = 'true' AND e.event_name = 'October Meeting';",
          "SELECT e.approved FROM expense e JOIN attendance a ON e.link_to_member = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.expense_date = '2019-10-08' AND e.event_name = 'October Meeting';"
        ]
      ]
    },
    {
      "id": 1339,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(e.cost) / 12 FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen';",
          "SELECT sum(expense.cost) / 12 FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND strftime('%m', expense.expense_date) IN ('9', '10')",
          "SELECT sum(expense.cost) / 12 FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND substr(expense.expense_date, 6, 2) IN ('09', '10')",
          "SELECT sum(e.cost) / 12 FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND strftime('%m', e.expense_date) IN ('9', '10');"
        ]
      ]
    },
    {
      "id": 1340,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN strftime('%Y', event.event_date) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN strftime('%Y', event.event_date) = '2020' THEN budget.spent ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event",
          "SELECT sum(CASE WHEN strftime('%Y', event.event_date) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN strftime('%Y', event.event_date) = '2020' THEN budget.spent ELSE 0 END) FROM event INNER JOIN budget ON budget.link_to_event = event.event_id",
          "SELECT sum(CASE WHEN strftime('%Y', event.event_date) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN strftime('%Y', event.event_date) = '2020' THEN budget.spent ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id",
          "SELECT sum(CASE WHEN substr(event.event_date, 1, 4) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN substr(event.event_date, 1, 4) = '2020' THEN budget.spent ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event"
        ]
      ]
    },
    {
      "id": 1341,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT LOCATION FROM event WHERE event_name = 'Spring Budget Review'",
          "SELECT LOCATION FROM EVENT WHERE event_name = 'Spring Budget Review'",
          "SELECT LOCATION FROM event WHERE event_name = 'Spring Budget Review';",
          "SELECT location FROM event WHERE event_name = 'Spring Budget Review'"
        ]
      ]
    },
    {
      "id": 1342,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cost FROM expense WHERE expense_date = '2019-09-04' AND expense_description = 'Posters';",
          "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';",
          "SELECT expense.cost FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_date = '2019-09-04' AND expense.expense_description = 'Posters'",
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2019-09-04' AND expense.expense_description = 'Posters'"
        ]
      ]
    },
    {
      "id": 1343,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.remaining FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1",
          "SELECT max(budget.amount) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Food'",
          "SELECT budget.remaining FROM budget budget WHERE budget.category = 'Food' AND budget.amount = (SELECT max(budget.amount) FROM budget budget WHERE budget.category = 'Food');",
          "SELECT budget.remaining FROM budget budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1344,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising'",
          "SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising';",
          "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
          "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';"
        ]
      ]
    },
    {
      "id": 1345,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences'",
          "SELECT count(*) FROM major WHERE college = 'College of Humanities and Social Sciences'",
          "SELECT count(*) FROM major WHERE college = 'College of Humanities and Social Sciences';",
          "SELECT count(DISTINCT major_id) FROM major WHERE college = 'College of Humanities and Social Sciences';"
        ]
      ]
    },
    {
      "id": 1346,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
          "SELECT member.phone FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Carlo' AND member.last_name = 'Jacobs'",
          "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
          "SELECT phone FROM member WHERE (first_name, last_name) = ('Carlo', 'Jacobs');"
        ]
      ]
    },
    {
      "id": 1347,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'",
          "SELECT zip_code.county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'",
          "SELECT zip_code.county FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher';",
          "SELECT zip_code.county FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'"
        ]
      ]
    },
    {
      "id": 1348,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'November Meeting'",
          "SELECT sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'November Meeting'",
          "SELECT count(*) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'November Meeting' AND budget.remaining < 0",
          "SELECT count(budget.budget_id) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'November Meeting' AND budget.remaining < 0"
        ]
      ]
    },
    {
      "id": 1349,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'September Speaker'",
          "SELECT sum(budget.amount) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'September Speaker'",
          "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker'",
          "SELECT sum(budget.amount) FROM EVENT INNER JOIN budget ON EVENT.event_id = budget.link_to_event WHERE EVENT.event_name = 'September Speaker'"
        ]
      ]
    },
    {
      "id": 1350,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_date = '2019-08-20' AND expense.expense_description = 'Post Cards, Posters'",
          "SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20'",
          "SELECT event.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20'",
          "SELECT event.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_date = '2019-08-20' AND expense.expense_description = 'Post Cards, Posters'"
        ]
      ]
    },
    {
      "id": 1351,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'",
          "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason');",
          "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';",
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Brent' AND last_name = 'Thomason'"
        ]
      ]
    },
    {
      "id": 1352,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.t_shirt_size = 'Medium' AND major.major_name = 'Business'",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.t_shirt_size = 'Medium' AND major.major_name = 'Business';",
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.t_shirt_size = 'Medium' AND major.major_name = 'Business'"
        ]
      ]
    },
    {
      "id": 1353,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'",
          "SELECT zip_code.type FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'",
          "SELECT TYPE FROM zip_code WHERE zip_code IN (SELECT zip FROM member WHERE first_name = 'Christof' AND last_name = 'Nielson');",
          "SELECT TYPE FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Christof' AND last_name = 'Nielson');"
        ]
      ]
    },
    {
      "id": 1354,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
          "SELECT DISTINCT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT major_name FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE POSITION = 'Vice President');"
        ]
      ]
    },
    {
      "id": 1355,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT zip_code.state FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';",
          "SELECT DISTINCT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'"
        ]
      ]
    },
    {
      "id": 1356,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT department FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE POSITION = 'President');",
          "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President'",
          "SELECT department FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE POSITION = 'President');",
          "SELECT DISTINCT department FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE POSITION = 'President');"
        ]
      ]
    },
    {
      "id": 1357,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'Dues'",
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' AND member.first_name = 'Connor' AND member.last_name = 'Hilton'",
          "SELECT income.date_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'Dues'",
          "SELECT income.date_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.source = 'Dues' AND member.first_name = 'Connor' AND member.last_name = 'Hilton'"
        ]
      ]
    },
    {
      "id": 1358,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received LIMIT 1",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1",
          "SELECT member.first_name, member.last_name FROM income income JOIN member member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received LIMIT 1;",
          "SELECT member.first_name, member.last_name FROM income income JOIN member member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1359,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement'",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement'",
          "SELECT sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement'",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Advertisement'"
        ]
      ]
    },
    {
      "id": 1360,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'November Speaker'",
          "SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'November Speaker'",
          "SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker'",
          "SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker'"
        ]
      ]
    },
    {
      "id": 1361,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(cost) FROM expense WHERE expense_description = 'Pizza'",
          "SELECT sum(cost) FROM expense WHERE expense_description = 'Pizza';",
          "SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Pizza'",
          "SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza'"
        ]
      ]
    },
    {
      "id": 1362,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
          "SELECT count(zip_code.city) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.county = 'Orange County' AND zip_code.state = 'Virginia'",
          "SELECT count(city) FROM zip_code WHERE state = 'Virginia' AND county = 'Orange County'",
          "SELECT count(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';"
        ]
      ]
    },
    {
      "id": 1363,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';",
          "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
          "SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';",
          "SELECT department FROM major WHERE college = 'Col of Humanities and Social Sciences';"
        ]
      ]
    },
    {
      "id": 1364,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.county, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'",
          "SELECT zip_code.city, zip_code.county, zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'",
          "SELECT zip_code.city, zip_code.county, zip_code.state FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth';",
          "SELECT zip_code.city , zip_code.county , zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'"
        ]
      ]
    },
    {
      "id": 1365,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY budget.remaining ASC LIMIT 1",
          "SELECT expense.expense_description FROM budget budget JOIN expense expense ON budget.budget_id = expense.link_to_budget WHERE budget.remaining = (SELECT min(remaining) FROM budget);",
          "SELECT expense.expense_description FROM budget budget JOIN expense expense ON budget.budget_id = expense.link_to_budget WHERE budget.remaining = (SELECT min(remaining) FROM budget)",
          "SELECT expense.expense_description FROM budget budget JOIN expense expense ON budget.budget_id = expense.link_to_budget WHERE budget.remaining IS NOT NULL ORDER BY budget.remaining ASC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1366,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'October Meeting'",
          "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'October Meeting'",
          "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting'"
        ]
      ]
    },
    {
      "id": 1367,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY count(major.college) DESC LIMIT 1",
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY count(member.member_id) DESC LIMIT 1",
          "SELECT college FROM (SELECT college, count(*) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY college) WHERE member_count = (SELECT max(member_count) FROM (SELECT count(*) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY college))",
          "SELECT college FROM (SELECT college, count(*) AS member_count FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY college) ORDER BY member_count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1368,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'",
          "SELECT major_name FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE phone = '809-555-3360');",
          "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';",
          "SELECT major_name FROM major WHERE major_id IN ( SELECT link_to_major FROM member WHERE phone = '809-555-3360' )"
        ]
      ]
    },
    {
      "id": 1369,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.amount = (SELECT max(amount) FROM budget);",
          "SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE amount = (SELECT max(amount) FROM budget));"
        ]
      ]
    },
    {
      "id": 1370,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President'",
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President'",
          "SELECT DISTINCT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President'",
          "SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President'"
        ]
      ]
    },
    {
      "id": 1371,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT attendance.link_to_member) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women''s Soccer';",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';",
          "SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women''s Soccer'"
        ]
      ]
    },
    {
      "id": 1372,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'",
          "SELECT income.date_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'",
          "SELECT income.date_received FROM member INNER JOIN income ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'",
          "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Angela' AND member.last_name = 'Mason'"
        ]
      ]
    },
    {
      "id": 1373,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT zip_code.city) FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';",
          "SELECT count(DISTINCT zip_code.city) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Maryland'",
          "SELECT count(DISTINCT member.zip) FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';",
          "SELECT count(DISTINCT zip_code.city) FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member' AND zip_code.state = 'Maryland';"
        ]
      ]
    },
    {
      "id": 1374,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'",
          "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN member member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';",
          "SELECT count(attendance.link_to_event) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.phone = '954-555-6240'",
          "SELECT count(DISTINCT attendance.link_to_event) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member WHERE member.phone = '954-555-6240';"
        ]
      ]
    },
    {
      "id": 1375,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education'",
          "SELECT member.first_name, member.last_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';",
          "SELECT m.first_name, m.last_name FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE mj.department = 'School of Applied Sciences, Technology and Education';",
          "SELECT member.first_name, member.last_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.department = 'School of Applied Sciences, Technology and Education'"
        ]
      ]
    },
    {
      "id": 1376,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1377,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member_id) FROM member WHERE POSITION = 'President'",
          "SELECT count(*) FROM member WHERE POSITION = 'President'",
          "SELECT count(*) FROM member WHERE POSITION = 'President';",
          "SELECT sum(CASE WHEN POSITION = 'President' THEN 1 ELSE 0 END) FROM member"
        ]
      ]
    },
    {
      "id": 1378,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT max(spent) FROM budget;",
          "SELECT max(spent) FROM budget",
          "SELECT spent FROM budget ORDER BY spent DESC LIMIT 1",
          "SELECT max(spent) FROM budget WHERE spent IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1379,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(event_id) FROM event WHERE strftime('%Y', event_date) = '2020' AND TYPE = 'Meeting'",
          "SELECT count(*) FROM event WHERE strftime('%Y', event_date) = '2020' AND TYPE = 'Meeting';",
          "SELECT count(*) FROM EVENT WHERE strftime('%Y', event_date) = '2020' AND TYPE = 'Meeting';",
          "SELECT count(event_id) FROM event WHERE substr(event_date, 1, 4) = '2020' AND TYPE = 'Meeting'"
        ]
      ]
    },
    {
      "id": 1380,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(spent) FROM budget WHERE category = 'Food'",
          "SELECT sum(spent) FROM budget WHERE category = 'Food';",
          "SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
          "SELECT sum(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food'"
        ]
      ]
    },
    {
      "id": 1381,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING count(attendance.link_to_event) > 7",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY attendance.link_to_member HAVING count(attendance.link_to_event) > 7",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING count(attendance.link_to_event) > 7",
          "SELECT DISTINCT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING count(attendance.link_to_event) > 7"
        ]
      ]
    },
    {
      "id": 1382,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN major ON member.link_to_major = major.major_id WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design'",
          "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON event.event_id = attendance.link_to_event INNER JOIN major ON major.major_id = member.link_to_major WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design'",
          "SELECT member.first_name, member.last_name FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member JOIN event event ON attendance.link_to_event = event.event_id JOIN major major ON member.link_to_major = major.major_id WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design';"
        ]
      ]
    },
    {
      "id": 1383,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'",
          "SELECT m.first_name, m.last_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Georgetown' AND z.state = 'South Carolina';",
          "SELECT DISTINCT member.first_name, member.last_name FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'"
        ]
      ]
    },
    {
      "id": 1384,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
          "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
          "SELECT sum(income.amount) FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'",
          "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour' GROUP BY income.amount"
        ]
      ]
    },
    {
      "id": 1385,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 40",
          "SELECT member.first_name, member.last_name FROM income income JOIN member member ON income.link_to_member = member.member_id WHERE income.amount > 40;",
          "SELECT DISTINCT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 40",
          "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 50"
        ]
      ]
    },
    {
      "id": 1386,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.event_name = 'Yearly Kickoff'",
          "SELECT sum(e.cost) FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'Yearly Kickoff';",
          "SELECT sum(cost) FROM expense WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff');",
          "SELECT sum(e.cost) FROM event e JOIN expense b ON e.event_id = b.link_to_budget WHERE e.event_name = 'Yearly Kickoff';"
        ]
      ]
    },
    {
      "id": 1387,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_member = member.member_id WHERE event.event_name = 'Yearly Kickoff'",
          "SELECT member.first_name, member.last_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN member ON member.member_id = budget.link_to_event WHERE event.event_name = 'Yearly Kickoff'",
          "SELECT member.first_name, member.last_name FROM EVENT INNER JOIN budget ON EVENT.event_id = budget.link_to_event INNER JOIN member ON budget.link_to_member = member.member_id WHERE EVENT.event_name = 'Yearly Kickoff'",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff'"
        ]
      ]
    },
    {
      "id": 1388,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1",
          "SELECT member.first_name, member.last_name, income.source FROM member INNER JOIN income ON member.member_id = income.link_to_member ORDER BY income.amount DESC LIMIT 1",
          "SELECT m.first_name || ' ' || m.last_name AS full_name, i.source FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount = (SELECT max(amount) FROM income);",
          "SELECT m.first_name, m.last_name, i.source FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount = (SELECT max(amount) FROM income);"
        ]
      ]
    },
    {
      "id": 1389,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY expense.cost ASC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY expense.cost ASC LIMIT 1",
          "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY expense.cost LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY expense.cost LIMIT 1"
        ]
      ]
    },
    {
      "id": 1390,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM expense INNER JOIN event ON expense.link_to_event = event.event_id",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id",
          "SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM expense INNER JOIN EVENT ON expense.link_to_event = EVENT.event_id"
        ]
      ]
    },
    {
      "id": 1391,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) FROM member INNER JOIN major ON member.link_to_major = major.major_id",
          "SELECT cast(sum(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM member INNER JOIN major ON member.link_to_major = major.major_id",
          "SELECT cast(sum(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) FROM major INNER JOIN member ON major.major_id = member.link_to_major",
          "SELECT cast(sum(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM member member JOIN major major ON member.link_to_major = major.major_id;"
        ]
      ]
    },
    {
      "id": 1392,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT source FROM income WHERE date_received LIKE '2019-09%' GROUP BY source ORDER BY sum(amount) DESC LIMIT 1;",
          "SELECT source FROM income WHERE date_received LIKE '2019-09%' GROUP BY source ORDER BY sum(amount) DESC LIMIT 1",
          "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY sum(amount) DESC LIMIT 1;",
          "SELECT source FROM income WHERE date_received LIKE '2019-09%' ORDER BY amount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1393,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, member.email FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Student Club Secretary'",
          "SELECT member.first_name, member.last_name, member.email FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Secretary'",
          "SELECT first_name, last_name, email FROM member WHERE POSITION = 'Secretary'",
          "SELECT first_name, last_name, email FROM member WHERE POSITION = 'Student Club Secretary'"
        ]
      ]
    },
    {
      "id": 1394,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';",
          "SELECT count(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Physics Teaching');"
        ]
      ]
    },
    {
      "id": 1395,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT attendance.link_to_member) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019';",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND event.event_name = 'Community Theater'",
          "SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN EVENT ON attendance.link_to_event = EVENT.event_id WHERE strftime('%Y', EVENT.event_date) = '2019' AND EVENT.event_name = 'Community Theater'",
          "SELECT count(DISTINCT member.member_id) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event JOIN member member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019';"
        ]
      ]
    },
    {
      "id": 1396,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(attendance.link_to_event), member.link_to_major FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'",
          "SELECT count(attendance.link_to_event), member.link_to_major FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'",
          "SELECT count(attendance.link_to_event), member.link_to_major FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi' GROUP BY member.link_to_major",
          "SELECT count(attendance.link_to_event), member.link_to_major FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi' GROUP BY member.link_to_major"
        ]
      ]
    },
    {
      "id": 1397,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT avg(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed';",
          "SELECT sum(budget.spent) / count(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food' AND budget.event_status = 'Closed'",
          "SELECT avg(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food' AND budget.event_status = 'Closed'",
          "SELECT sum(budget.spent) / count(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food' AND EVENT.event_status = 'Closed'"
        ]
      ]
    },
    {
      "id": 1398,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1",
          "SELECT event.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1",
          "SELECT event.event_name FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND budget.spent = (SELECT max(spent) FROM budget WHERE category = 'Advertisement');"
        ]
      ]
    },
    {
      "id": 1399,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT CASE WHEN EXISTS (SELECT 1 FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women''s Soccer') THEN 'YES' ELSE 'NO' END AS answer;",
          "SELECT CASE WHEN EXISTS (SELECT 1 FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women''s Soccer' AND attendance.attendance = 'Yes') THEN 'YES' ELSE 'NO' END",
          "SELECT CASE WHEN EXISTS (SELECT 1 FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women''s Soccer' AND attendance.attendance = 'Yes') THEN 'YES' ELSE 'NO' END AS answer;",
          "SELECT CASE WHEN EXISTS (SELECT 1 FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders' AND event.event_name = 'Women''s Soccer' AND attendance.attendance = 'Yes') THEN 'YES' ELSE 'NO' END AS answer;"
        ]
      ]
    },
    {
      "id": 1400,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2019'",
          "SELECT cast(sum(CASE WHEN TYPE = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event_id) FROM EVENT WHERE strftime('%Y', event_date) = '2019'",
          "SELECT cast(sum(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2019'",
          "SELECT cast(sum(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_date LIKE '2019%'"
        ]
      ]
    },
    {
      "id": 1401,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters'",
          "SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'September Speaker' AND expense.expense_description = 'Posters'",
          "SELECT e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN EVENT e ON b.link_to_event = e.event_id WHERE e.expense_description = 'Posters' AND e.event_name = 'September Speaker';",
          "SELECT e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN EVENT e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker' AND e.cost IS NOT NULL AND e.expense_description = 'Posters';"
        ]
      ]
    },
    {
      "id": 1402,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY count(t_shirt_size) DESC LIMIT 1",
          "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY count(t_shirt_size) DESC LIMIT 1;",
          "SELECT t_shirt_size FROM member GROUP BY t_shirt_size HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM member GROUP BY t_shirt_size));",
          "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY count(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1403,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining < 0 AND event.status = 'Closed' ORDER BY budget.remaining ASC LIMIT 1",
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining < 0 AND event.status = 'Closed' ORDER BY budget.remaining ASC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining < 0 AND event.status = 'Closed' ORDER BY budget.remaining LIMIT 1"
        ]
      ]
    },
    {
      "id": 1404,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense.expense_description, sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_name = 'October Meeting' GROUP BY expense.expense_description",
          "SELECT expense.expense_description, sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description",
          "SELECT expense.expense_description, sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description",
          "SELECT expense.expense_description, sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description"
        ]
      ]
    },
    {
      "id": 1405,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.amount), budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'April Speaker' GROUP BY budget.category ORDER BY sum(budget.amount) ASC",
          "SELECT sum(budget.amount), budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'April Speaker' GROUP BY budget.category ORDER BY budget.amount ASC",
          "SELECT sum(budget.amount), budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY sum(budget.amount) ASC",
          "SELECT sum(budget.amount), budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY budget.amount ASC"
        ]
      ]
    },
    {
      "id": 1406,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1",
          "SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;",
          "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = (SELECT max(amount) FROM budget WHERE category = 'Food');",
          "SELECT max(amount) FROM budget WHERE category = 'Food'"
        ]
      ]
    },
    {
      "id": 1407,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.amount DESC LIMIT 3",
          "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
          "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;",
          "SELECT amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1408,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(cost) FROM expense WHERE expense_description = 'Parking'",
          "SELECT sum(cost) FROM expense WHERE expense_description = 'Parking';",
          "SELECT sum(cost) FROM expense WHERE expense_description LIKE 'Parking'",
          "SELECT sum(cost) FROM expense WHERE expense_description = 'Parking' AND cost IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1409,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(cost) FROM expense WHERE expense_date = '2019-08-20'",
          "SELECT sum(cost) FROM expense WHERE expense_date = '2019-08-20';",
          "SELECT sum(cost) FROM expense WHERE strftime('%Y-%m-%d', expense_date) = '2019-08-20'",
          "SELECT sum(cost) FROM expense WHERE substr(expense_date, 1, 10) = '2019-08-20'"
        ]
      ]
    },
    {
      "id": 1410,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, sum(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name",
          "SELECT member.first_name, member.last_name, sum(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v'",
          "SELECT member.first_name, member.last_name, sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name",
          "SELECT member.first_name, member.last_name, sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v'"
        ]
      ]
    },
    {
      "id": 1411,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT DISTINCT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'"
        ]
      ]
    },
    {
      "id": 1412,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'",
          "SELECT DISTINCT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.t_shirt_size = 'X-Large'",
          "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.t_shirt_size = 'X-Large'",
          "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'"
        ]
      ]
    },
    {
      "id": 1413,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip FROM member WHERE member_id IN (SELECT link_to_member FROM expense WHERE cost < 50);",
          "SELECT member.zip FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost < 50",
          "SELECT member.zip FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50",
          "SELECT member.zip FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE cast(expense.cost AS REAL) < 50"
        ]
      ]
    },
    {
      "id": 1414,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'",
          "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Phillip' AND last_name = 'Cullen');",
          "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';",
          "SELECT major_name FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Phillip' AND last_name = 'Cullen');"
        ]
      ]
    },
    {
      "id": 1415,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business'",
          "SELECT member.position FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';",
          "SELECT DISTINCT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business'",
          "SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' GROUP BY member.position"
        ]
      ]
    },
    {
      "id": 1416,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium'",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium'",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.t_shirt_size = 'Medium' AND major.major_name = 'Business';",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.t_shirt_size = 'Medium' AND major.major_name = 'Business'"
        ]
      ]
    },
    {
      "id": 1417,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30",
          "SELECT DISTINCT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30",
          "SELECT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30",
          "SELECT DISTINCT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30"
        ]
      ]
    },
    {
      "id": 1418,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM EVENT INNER JOIN budget ON EVENT.event_id = budget.link_to_event WHERE EVENT.location = 'MU 215'"
        ]
      ]
    },
    {
      "id": 1419,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_date = '2020-03-24T12:00:00'",
          "SELECT budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_date = '2020-03-24T12:00:00'",
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_date = '2020-03-24T12:00:00'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_date = '2020-03-24T12:00:00'"
        ]
      ]
    },
    {
      "id": 1420,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
          "SELECT major_name FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE POSITION = 'Vice President');",
          "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
          "SELECT DISTINCT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'"
        ]
      ]
    },
    {
      "id": 1421,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN member.position = 'Member' AND major.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id",
          "SELECT cast(sum(CASE WHEN major.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Member'",
          "SELECT cast(sum(CASE WHEN member.position = 'Member' AND major.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id",
          "SELECT cast(sum(CASE WHEN major.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1422,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215'",
          "SELECT DISTINCT budget.category FROM EVENT INNER JOIN budget ON EVENT.event_id = budget.link_to_event WHERE EVENT.location = 'MU 215'"
        ]
      ]
    },
    {
      "id": 1423,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM income WHERE amount = 50",
          "SELECT count(income_id) FROM income WHERE amount = 50",
          "SELECT count(*) FROM income WHERE amount = 50;",
          "SELECT sum(CASE WHEN amount = 50 THEN 1 ELSE 0 END) FROM income"
        ]
      ]
    },
    {
      "id": 1424,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(member_id) FROM member WHERE t_shirt_size = 'X-Large' AND POSITION = 'Member'",
          "SELECT count(*) FROM member WHERE t_shirt_size = 'X-Large' AND POSITION = 'Member'",
          "SELECT count(*) FROM member WHERE t_shirt_size = 'X-Large' AND POSITION = 'Member';",
          "SELECT count(*) FROM member WHERE t_shirt_size = 'X-Large' AND position = 'Member'"
        ]
      ]
    },
    {
      "id": 1425,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';",
          "SELECT count(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education';",
          "SELECT count(major.major_id) FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences'",
          "SELECT count(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'"
        ]
      ]
    },
    {
      "id": 1426,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
          "SELECT member.last_name, major.department, major.college FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
          "SELECT m.last_name, m.department, m.college FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE mj.major_name = 'Environmental Engineering';",
          "SELECT m.last_name, m.department, m.college FROM member m JOIN major m ON m.major_id = m.link_to_major WHERE m.position = 'Member' AND m.link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Environmental Engineering');"
        ]
      ]
    },
    {
      "id": 1427,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.location = 'MU 215' AND EVENT.type = 'Guest Speaker' AND budget.spent = 0",
          "SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0",
          "SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0",
          "SELECT DISTINCT budget.category FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.type = 'Guest Speaker' AND EVENT.location = 'MU 215' AND budget.spent = 0"
        ]
      ]
    },
    {
      "id": 1428,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member'",
          "SELECT DISTINCT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member'",
          "SELECT zip_code.city, zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Member' AND major.department = 'Electrical and Computer Engineering'",
          "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1429,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.' AND event.type = 'Social'",
          "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.' AND event.type = 'Social'",
          "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.' AND event.type = 'Social'",
          "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Social' AND member.position = 'Vice President' AND event.location = '900 E. Washington St.'"
        ]
      ]
    },
    {
      "id": 1430,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza'",
          "SELECT member.last_name, member.position FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza'",
          "SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_date = '2019-09-10' AND e.expense_description = 'Pizza';",
          "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10'"
        ]
      ]
    },
    {
      "id": 1431,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'",
          "SELECT member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'",
          "SELECT DISTINCT member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'",
          "SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1432,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium'",
          "SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium'",
          "SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member'",
          "SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1433,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT state FROM zip_code WHERE TYPE = 'PO Box';",
          "SELECT DISTINCT zip_code.state FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.type = 'PO Box'",
          "SELECT DISTINCT state FROM zip_code WHERE TYPE = 'PO Box'",
          "SELECT DISTINCT zip_code.state FROM zip_code zip_code WHERE zip_code.type = 'PO Box';"
        ]
      ]
    },
    {
      "id": 1434,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.zip_code FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.type = 'PO Box' AND zip_code.county = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico'",
          "SELECT zip_code FROM zip_code WHERE state = 'Puerto Rico' AND county = 'San Juan Municipio' AND TYPE = 'PO Box';",
          "SELECT zip_code.zip_code FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Puerto Rico' AND zip_code.county = 'San Juan Municipio' AND zip_code.type = 'PO Box'",
          "SELECT zip_code.zip_code FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.city = 'San Juan' AND zip_code.state = 'Puerto Rico' AND zip_code.type = 'PO Box'"
        ]
      ]
    },
    {
      "id": 1435,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event_name FROM event WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND TYPE = 'Game' AND status = 'Closed';",
          "SELECT event_name FROM EVENT WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND TYPE = 'Game' AND status = 'Closed';",
          "SELECT event_name FROM event WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed' AND TYPE = 'Game';",
          "SELECT event_name FROM EVENT WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed' AND TYPE = 'Game';"
        ]
      ]
    },
    {
      "id": 1436,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT DISTINCT budget.link_to_event FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.cost > 50",
          "SELECT budget.link_to_event FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.cost > 50",
          "SELECT DISTINCT attendance.link_to_event FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member WHERE expense.cost > 50",
          "SELECT DISTINCT expense.link_to_event FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.amount > 50"
        ]
      ]
    },
    {
      "id": 1437,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT attendance.link_to_member, attendance.link_to_event FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
          "SELECT DISTINCT attendance.link_to_member, attendance.link_to_event FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
          "SELECT attendance.link_to_member, attendance.link_to_event FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member WHERE expense.approved = 'true' AND substr(expense.expense_date, 1, 10) BETWEEN '2019-01-10' AND '2019-11-19'",
          "SELECT member.member_id, attendance.link_to_event FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'"
        ]
      ]
    },
    {
      "id": 1438,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO'",
          "SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Katy');",
          "SELECT major.college FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';",
          "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Katy');"
        ]
      ]
    },
    {
      "id": 1439,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'",
          "SELECT member.phone FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'",
          "SELECT member.phone FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business';",
          "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.department = 'Business'"
        ]
      ]
    },
    {
      "id": 1440,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT email FROM member WHERE member_id IN (SELECT link_to_member FROM expense WHERE expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND cost > 20);",
          "SELECT member.email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20",
          "SELECT email FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE date_received BETWEEN '2019-09-10' AND '2019-11-19' AND amount > 20);",
          "SELECT email FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE date_received BETWEEN '2019-09-10' AND '2019-11-19') AND member_id IN (SELECT link_to_member FROM expense WHERE expense_date BETWEEN '2019-09-10' AND '2019-11-19') GROUP BY email HAVING sum(cost) > 20;"
        ]
      ]
    },
    {
      "id": 1441,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Education & Human Services' AND major.major_name = 'Education'",
          "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Education & Human Services' AND major.major_name = 'Education';",
          "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Education & Human Services' AND major.major_name = 'Education'",
          "SELECT count(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Education & Human Services' AND major.major_name = 'Education';"
        ]
      ]
    },
    {
      "id": 1442,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event_id) FROM budget",
          "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id",
          "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(budget.remaining) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id",
          "SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event"
        ]
      ]
    },
    {
      "id": 1443,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event_id, LOCATION, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';",
          "SELECT event.event_id, event.location, event.status FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE substr(event.event_date, 1, 10) BETWEEN '2019-11-01' AND '2020-03-31'",
          "SELECT event_id, LOCATION, status FROM event WHERE event_date LIKE '2019-11%' OR event_date LIKE '2020-03%'",
          "SELECT event.event_id, event.location, event.status FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31'"
        ]
      ]
    },
    {
      "id": 1444,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT expense_description FROM expense WHERE cost > ( SELECT avg(cost) FROM expense )",
          "SELECT expense_description FROM expense WHERE cost > (SELECT avg(cost) FROM expense)",
          "SELECT expense_description FROM expense WHERE cast(cost AS REAL) > ( SELECT avg(cast(cost AS REAL)) FROM expense )",
          "SELECT expense_description FROM expense WHERE cast(replace(substr(cost, 2), ',', '') AS REAL) > ( SELECT avg(cast(replace(substr(cost, 2), ',', '') AS REAL)) FROM expense )"
        ]
      ]
    },
    {
      "id": 1445,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
          "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';",
          "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.t_shirt_size = 'X-Large'"
        ]
      ]
    },
    {
      "id": 1446,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN TYPE = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(zip_code) FROM zip_code",
          "SELECT cast(sum(CASE WHEN TYPE = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code",
          "SELECT cast(count(CASE WHEN TYPE = 'PO Box' THEN zip_code ELSE NULL END) AS REAL) * 100 / count(zip_code) FROM zip_code",
          "SELECT cast(sum(CASE WHEN TYPE = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(TYPE) FROM zip_code"
        ]
      ]
    },
    {
      "id": 1447,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event_name, LOCATION FROM EVENT WHERE event_id IN (SELECT link_to_event FROM budget WHERE remaining > 0);",
          "SELECT event_name, LOCATION FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE remaining > 0);",
          "SELECT event.event_name, event.location FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0",
          "SELECT event.event_name, event.location FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 0"
        ]
      ]
    },
    {
      "id": 1448,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name, event.event_date FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.cost > 50 AND expense.cost < 100 AND expense.expense_description = 'Pizza'",
          "SELECT event.event_name, event.event_date FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.cost > 50 AND expense.cost < 100 AND expense.expense_description = 'Pizza'",
          "SELECT event.event_name, event.event_date FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.cost BETWEEN 51 AND 99 AND expense.expense_description = 'Pizza'",
          "SELECT event.event_name, event.event_date FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.cost BETWEEN 51 AND 99 AND expense.expense_description = 'Pizza'"
        ]
      ]
    },
    {
      "id": 1449,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100",
          "SELECT member.first_name, member.last_name, major.major_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100",
          "SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100",
          "SELECT m.first_name || ' ' || m.last_name AS full_name, m.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > 100;"
        ]
      ]
    },
    {
      "id": 1450,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40",
          "SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40",
          "SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN attendance ON income.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE income.amount > 40",
          "SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code GROUP BY income.link_to_member HAVING sum(income.amount) > 40"
        ]
      ]
    },
    {
      "id": 1451,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name HAVING count(expense.expense_id) > 1 ORDER BY sum(expense.cost) DESC LIMIT 1",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name HAVING count(expense.link_to_event) > 1 ORDER BY sum(expense.cost) DESC LIMIT 1",
          "SELECT m.first_name, m.last_name FROM member m JOIN (SELECT link_to_member FROM expense GROUP BY link_to_member HAVING count(DISTINCT event_id) > 1) t1 ON m.member_id = t1.link_to_member JOIN expense e ON t1.link_to_member = e.link_to_member ORDER BY e.cost DESC LIMIT 1;",
          "SELECT m.first_name, m.last_name FROM member m JOIN (SELECT link_to_member FROM expense GROUP BY link_to_member HAVING count(DISTINCT event_id) > 1) t2 ON m.member_id = t2.link_to_member JOIN expense e ON t2.link_to_member = e.link_to_member ORDER BY e.cost DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1452,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member'",
          "SELECT avg(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position != 'Member'",
          "SELECT avg(e.cost) FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position != 'Member';",
          "SELECT sum(expense.cost) / count(expense.link_to_member) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position != 'Member'"
        ]
      ]
    },
    {
      "id": 1453,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Parking' AND expense.cost < ( SELECT avg(cost) FROM expense )",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Parking' GROUP BY event.event_name ORDER BY sum(expense.cost) / count(event.event_id) LIMIT 1",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Parking' GROUP BY event.event_name HAVING sum(expense.cost) < ( SELECT avg(cost) FROM expense )",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Parking' GROUP BY event.event_name HAVING sum(expense.cost) < ( SELECT sum(cost) / count(event_id) FROM budget WHERE category = 'Parking' )"
        ]
      ]
    },
    {
      "id": 1454,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.type = 'Meeting'",
          "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.type = 'Meeting'",
          "SELECT sum(expense.cost) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.type = 'Meeting'",
          "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Meeting'"
        ]
      ]
    },
    {
      "id": 1455,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.budget_id FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1",
          "SELECT budget.budget_id FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1",
          "SELECT budget.amount FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1",
          "SELECT expense.link_to_budget FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1456,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member ORDER BY expense.cost DESC LIMIT 5",
          "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id ORDER BY expense.cost DESC LIMIT 5",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 5",
          "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id ORDER BY sum(expense.cost) DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1457,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT avg(cost) FROM expense )",
          "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > ( SELECT avg(cost) FROM expense )",
          "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name, member.phone HAVING sum(expense.cost) > ( SELECT avg(cost) FROM expense )",
          "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name, member.phone HAVING sum(expense.cost) > ( SELECT avg(cost) FROM expense )"
        ]
      ]
    },
    {
      "id": 1458,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT cast((sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) - sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member'",
          "SELECT cast((sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) - sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Member'",
          "SELECT (count(*) filter (WHERE zip_code.state = 'New Jersey') * 100.0 / count(*)) - (count(*) filter (WHERE zip_code.state = 'Vermont') * 100.0 / count(*)) AS percentage_difference FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Member';",
          "SELECT cast((sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) - sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member'"
        ]
      ]
    },
    {
      "id": 1459,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'",
          "SELECT major.major_name, major.department FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';",
          "SELECT major_name, department FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE first_name = 'Garrett' AND last_name = 'Gerke');",
          "SELECT m.major_name, m.department FROM member m JOIN major m ON m.major_id = m.link_to_major WHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';"
        ]
      ]
    },
    {
      "id": 1460,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies'",
          "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies'",
          "SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, veggie tray, supplies'",
          "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, veggie tray, supplies'"
        ]
      ]
    },
    {
      "id": 1461,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'",
          "SELECT member.last_name, member.phone FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';",
          "SELECT m.last_name, m.phone FROM member m JOIN major m ON m.link_to_major = m.major_id WHERE m.position = 'Student' AND m.link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Elementary Education');",
          "SELECT m.last_name, m.phone FROM member m JOIN major m ON m.link_to_major = m.major_id WHERE m.position = 'Student' AND m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Elementary Education');"
        ]
      ]
    },
    {
      "id": 1462,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category, budget.amount FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'January Speaker'",
          "SELECT budget.category, budget.amount FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'January Speaker'",
          "SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker'",
          "SELECT DISTINCT budget.category, budget.amount FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'January Speaker'"
        ]
      ]
    },
    {
      "id": 1463,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
          "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food'",
          "SELECT event.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food'",
          "SELECT DISTINCT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'"
        ]
      ]
    },
    {
      "id": 1464,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09'",
          "SELECT m.first_name, m.last_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '2019-09-09';",
          "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received LIKE '2019-09-09%'",
          "SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '2019-09-09';"
        ]
      ]
    },
    {
      "id": 1465,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'",
          "SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters'",
          "SELECT category FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters');",
          "SELECT DISTINCT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'"
        ]
      ]
    },
    {
      "id": 1466,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary'",
          "SELECT member.first_name, member.last_name, major.college FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';",
          "SELECT member.first_name, member.last_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary'",
          "SELECT m.first_name || ' ' || m.last_name AS full_name, m.college FROM member m JOIN major m ON m.major_id = m.link_to_major WHERE m.position = 'Secretary';"
        ]
      ]
    },
    {
      "id": 1467,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT sum(budget.spent), event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts'",
          "SELECT sum(spent), event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts'",
          "SELECT sum(budget.spent), event.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Speaker Gifts'",
          "SELECT sum(budget.spent), EVENT.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Speaker Gifts'"
        ]
      ]
    },
    {
      "id": 1468,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'",
          "SELECT zip_code.city FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'",
          "SELECT zip_code.city FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';",
          "SELECT zip_code.city FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'"
        ]
      ]
    },
    {
      "id": 1469,
      "db_id": "student_club",
      "infer_predictions": [
        [
          "SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND member.zip = 28092",
          "SELECT member.first_name, member.last_name, member.position FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND member.zip = 28092",
          "SELECT m.first_name, m.last_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND m.zip = 28092;",
          "SELECT m.first_name || ' ' || m.last_name AS full_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND m.zip = 28092;"
        ]
      ]
    },
    {
      "id": 1470,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'",
          "SELECT count(DISTINCT gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium';",
          "SELECT count(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium';",
          "SELECT count(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'"
        ]
      ]
    },
    {
      "id": 1471,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(iif(currency = 'EUR', 1, 0)) AS REAL) / sum(iif(currency = 'CZK', 1, 0)) FROM customers",
          "SELECT cast(sum(CASE WHEN currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN currency = 'CZK' THEN 1 ELSE 0 END) FROM customers",
          "SELECT (SELECT count(*) FROM customers WHERE currency = 'EUR') * 1.0 / (SELECT count(*) FROM customers WHERE currency = 'CZK') AS ratio;",
          "SELECT cast(count(CASE WHEN currency = 'EUR' THEN customerid ELSE NULL END) AS REAL) / count(CASE WHEN currency = 'CZK' THEN customerid ELSE NULL END) FROM customers"
        ]
      ]
    },
    {
      "id": 1472,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.date) = '2012' AND customers.segment = 'LAM' ORDER BY YEARMONTH.consumption ASC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.date) = '2012' AND customers.segment = 'LAM' ORDER BY YEARMONTH.consumption LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2012' AND customers.segment = 'LAM' ORDER BY YEARMONTH.consumption ASC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2012' AND customers.segment = 'LAM' ORDER BY YEARMONTH.consumption LIMIT 1"
        ]
      ]
    },
    {
      "id": 1473,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT cast(sum(yearmonth.consumption) AS REAL) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT avg(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y', yearmonth.date) = '2013'"
        ]
      ]
    },
    {
      "id": 1474,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.date) = '2011' AND customers.currency = 'CZK' ORDER BY YEARMONTH.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE strftime('%Y', yearmonth.date) = '2011' AND customers.currency = 'CZK' ORDER BY yearmonth.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'CZK' AND substr(yearmonth.date, 1, 4) = '2011' ORDER BY yearmonth.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'CZK' AND strftime('%Y', yearmonth.date) = '2011' ORDER BY yearmonth.consumption DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1475,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT customers.customerid) FROM customers customers JOIN yearmonth yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y', yearmonth.date) = '2012' AND yearmonth.consumption < 30000;",
          "SELECT count(customers.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' AND substr(YEARMONTH.date, 1, 4) = '2012' AND YEARMONTH.consumption < 30000",
          "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' AND strftime('%Y', YEARMONTH.date) = '2012' AND YEARMONTH.consumption < 30000",
          "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' AND substr(YEARMONTH.date, 1, 4) = '2012' AND YEARMONTH.consumption < 30000"
        ]
      ]
    },
    {
      "id": 1476,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN YEARMONTH.consumption ELSE 0 END) AS difference FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2012'",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN YEARMONTH.consumption ELSE 0 END) AS difference FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN YEARMONTH.consumption ELSE 0 END) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid",
          "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) AS difference FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2012'"
        ]
      ]
    },
    {
      "id": 1477,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT strftime('%Y', date) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR') GROUP BY strftime('%Y', date) ORDER BY count(strftime('%Y', date)) DESC LIMIT 1",
          "SELECT strftime('%Y', date) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR') GROUP BY strftime('%Y', date) ORDER BY count(strftime('%Y', date)) DESC LIMIT 1;",
          "SELECT date FROM yearmonth WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR') GROUP BY date ORDER BY count(date) DESC LIMIT 1",
          "SELECT strftime('%Y', date) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR') GROUP BY strftime('%Y', date) ORDER BY count(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1478,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT segment FROM customers WHERE customerid IN (SELECT customerid FROM yearmonth GROUP BY customerid HAVING sum(consumption) = (SELECT min(sumconsumption) FROM (SELECT sum(consumption) AS sumconsumption FROM yearmonth GROUP BY customerid)))",
          "SELECT segment FROM customers WHERE customerid IN (SELECT customerid FROM yearmonth GROUP BY customerid HAVING sum(consumption) = (SELECT min(sumconsumption) FROM (SELECT sum(consumption) AS sumconsumption FROM yearmonth GROUP BY customerid)));",
          "SELECT segment FROM customers WHERE customerid IN (SELECT customerid FROM yearmonth GROUP BY customerid HAVING sum(consumption) ORDER BY sum(consumption) LIMIT 1);",
          "SELECT segment FROM customers WHERE customerid IN (SELECT customerid FROM yearmonth GROUP BY customerid HAVING sum(consumption) = (SELECT min(consumption) FROM (SELECT sum(consumption) AS consumption FROM yearmonth GROUP BY customerid)))"
        ]
      ]
    },
    {
      "id": 1479,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT substr(YEARMONTH.date, 1, 4) FROM YEARMONTH INNER JOIN transactions_1k ON substr(YEARMONTH.date, 1, 4) = strftime('%Y', transactions_1k.date) WHERE customers.currency = 'CZK' GROUP BY substr(YEARMONTH.date, 1, 4) ORDER BY sum(YEARMONTH.consumption) DESC LIMIT 1",
          "SELECT substr(YEARMONTH.date, 1, 4) FROM yearmonth INNER JOIN transactions_1k ON substr(YEARMONTH.date, 1, 4) = strftime('%Y', transactions_1k.date) WHERE customers.currency = 'CZK' GROUP BY substr(YEARMONTH.date, 1, 4) ORDER BY sum(YEARMONTH.consumption) DESC LIMIT 1",
          "SELECT substr(YEARMONTH.date, 1, 4) FROM YEARMONTH INNER JOIN transactions_1k ON substr(YEARMONTH.date, 1, 4) = strftime('%Y', transactions_1k.date) WHERE customers.currency = 'CZK' GROUP BY substr(YEARMONTH.date, 1, 4) ORDER BY count(YEARMONTH.date) DESC LIMIT 1",
          "SELECT substr(YEARMONTH.date, 1, 4) FROM YEARMONTH INNER JOIN transactions_1k ON substr(YEARMONTH.date, 1, 4) = strftime('%Y', transactions_1k.date) WHERE customers.currency = 'CZK' GROUP BY substr(YEARMONTH.date, 1, 4) ORDER BY count(YEARMONTH.customerid) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1480,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT YEARMONTH.date FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'SME' AND substr(YEARMONTH.date, 1, 4) = '2013' ORDER BY YEARMONTH.consumption DESC LIMIT 1",
          "SELECT yearmonth.date FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 4) = '2013' ORDER BY yearmonth.consumption DESC LIMIT 1",
          "SELECT yearmonth.date FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'SME' AND substr(YEARMONTH.date, 1, 4) = '2013' ORDER BY YEARMONTH.consumption DESC LIMIT 1",
          "SELECT yearmonth.date FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 4) = '2013' GROUP BY yearmonth.date ORDER BY sum(yearmonth.consumption) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1481,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' THEN YEARMONTH.consumption ELSE 0 END) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2013'",
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'LAM' THEN YEARMONTH.consumption ELSE 0 END) AS smelam , sum(CASE WHEN customers.segment = 'LAM' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'KAM' THEN YEARMONTH.consumption ELSE 0 END) AS lamkam , sum(CASE WHEN customers.segment = 'KAM' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' THEN YEARMONTH.consumption ELSE 0 END) AS kamsme FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2013'",
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END) AS smelam , sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END) AS lamkam , sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) AS kamsme FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013'",
          "SELECT sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013'"
        ]
      ]
    },
    {
      "id": 1482,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.segment, sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2013' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2012' THEN YEARMONTH.consumption ELSE 0 END) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' GROUP BY customers.segment ORDER BY sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2013' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2012' THEN YEARMONTH.consumption ELSE 0 END) DESC LIMIT 1",
          "SELECT customers.segment, sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN consumption ELSE 0 END) AS percentageincrease FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.segment ORDER BY percentageincrease DESC LIMIT 1",
          "SELECT customers.segment, sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2013' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2012' THEN YEARMONTH.consumption ELSE 0 END) AS percentageincrease FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' GROUP BY customers.segment ORDER BY percentageincrease DESC LIMIT 1",
          "SELECT customers.segment, sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2013' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2012' THEN YEARMONTH.consumption ELSE 0 END) AS INCREASE FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' GROUP BY customers.segment ORDER BY sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2013' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN substr(YEARMONTH.date, 1, 4) = '2012' THEN YEARMONTH.consumption ELSE 0 END) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1483,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013' AND substr(yearmonth.date, 5, 2) BETWEEN '8' AND '11' AND customers.customerid = 6",
          "SELECT sum(consumption) FROM yearmonth WHERE customerid = 6 AND date BETWEEN '201308' AND '201311'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2013' AND substr(YEARMONTH.date, 5, 2) BETWEEN '8' AND '11' AND customers.customerid = 6",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE strftime('%Y%m', yearmonth.date) BETWEEN '201308' AND '201311' AND customers.customerid = 6"
        ]
      ]
    },
    {
      "id": 1484,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT (SELECT count(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Discount') - (SELECT count(*) FROM gasstations WHERE country = 'SVK' AND segment = 'Discount') AS difference;",
          "SELECT ( SELECT count(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Discount' ) - ( SELECT count(*) FROM gasstations WHERE country = 'SVK' AND segment = 'Discount' ) AS difference;",
          "SELECT (SELECT count(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Discount') - (SELECT count(*) FROM gasstations WHERE country = 'SVK' AND segment = 'Discount') AS diff;",
          "SELECT ( SELECT count(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Discount' ) - ( SELECT count(*) FROM gasstations WHERE country = 'SVK' AND segment = 'Discount' ) AS diff;"
        ]
      ]
    },
    {
      "id": 1485,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN customerid = 7 THEN consumption ELSE 0 END) - sum(CASE WHEN customerid = 5 THEN consumption ELSE 0 END) FROM yearmonth WHERE date LIKE '201304%'",
          "SELECT sum(CASE WHEN customerid = 7 THEN consumption ELSE 0 END) - sum(CASE WHEN customerid = 5 THEN consumption ELSE 0 END) FROM yearmonth WHERE strftime('%Y%m', date) = '201304'",
          "SELECT sum(CASE WHEN customerid = 7 THEN consumption ELSE 0 END) - sum(CASE WHEN customerid = 5 THEN consumption ELSE 0 END) FROM yearmonth WHERE substr(date, 1, 6) = '201304'",
          "SELECT yearmonth.consumption - ( SELECT yearmonth.consumption FROM yearmonth INNER JOIN customers ON customers.customerid = yearmonth.customerid WHERE customers.customerid = 5 AND strftime('%Y%m', yearmonth.date) = '201304' ) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.customerid = 7 AND strftime('%Y%m', yearmonth.date) = '201304'"
        ]
      ]
    },
    {
      "id": 1486,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(iif(customers.currency = 'CZK', 1, 0)) - sum(iif(customers.currency = 'EUR', 1, 0)) AS diff FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'SME'",
          "SELECT sum(iif(customers.currency = 'CZK', 1, 0)) - sum(iif(customers.currency = 'EUR', 1, 0)) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'SME'",
          "SELECT (SELECT count(*) FROM customers WHERE currency = 'CZK' AND segment = 'SME') - (SELECT count(*) FROM customers WHERE currency = 'EUR' AND segment = 'SME') AS difference;",
          "SELECT sum(iif(customers.currency = 'CZK', 1, 0)) - sum(iif(customers.currency = 'EUR', 1, 0)) AS diff FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid"
        ]
      ]
    },
    {
      "id": 1487,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND substr(yearmonth.date, 1, 7) = '201310' ORDER BY yearmonth.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND substr(YEARMONTH.date, 1, 7) = '201310' ORDER BY YEARMONTH.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND strftime('%Y%m', YEARMONTH.date) = '201310' ORDER BY YEARMONTH.consumption DESC LIMIT 1",
          "SELECT customers.customerid FROM customers customers JOIN yearmonth yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND substr(yearmonth.date, 1, 7) = '201310' ORDER BY yearmonth.consumption DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1488,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid, sum(YEARMONTH.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(YEARMONTH.consumption) DESC LIMIT 1",
          "SELECT customers.customerid, sum(transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1",
          "SELECT customers.customerid, max(YEARMONTH.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM'",
          "SELECT customers.customerid, sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1489,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y-%m', yearmonth.date) = '201305'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' AND YEARMONTH.date LIKE '201305%'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND substr(yearmonth.date, 1, 6) = '201305'",
          "SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND substr(yearmonth.date, 1, 7) = '201305'"
        ]
      ]
    },
    {
      "id": 1490,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN YEARMONTH.consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM'",
          "SELECT cast(sum(iif(YEARMONTH.consumption > 46.73, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM'",
          "SELECT cast(sum(iif(YEARMONTH.consumption > 46.73, 1, 0)) AS REAL) * 100 / count(YEARMONTH.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM'",
          "SELECT cast(sum(iif(yearmonth.consumption > 46.73, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM'"
        ]
      ]
    },
    {
      "id": 1491,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT country, count(*) AS num FROM gasstations WHERE segment = 'Value for money' GROUP BY country;",
          "SELECT country, count(*) AS num FROM gasstations WHERE segment = 'Value for money' GROUP BY country",
          "SELECT country, count(*) AS num FROM gasstations WHERE segment = 'Value for money' GROUP BY country ORDER BY num DESC LIMIT 1;",
          "SELECT country, count(*) AS num FROM gasstations WHERE segment = 'Value for money' GROUP BY country ORDER BY num DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1492,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM'",
          "SELECT cast(sum(iif(customers.currency = 'EUR', 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM'",
          "SELECT cast(sum(CASE WHEN currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customerid) FROM customers WHERE segment = 'KAM'",
          "SELECT cast(sum(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM'"
        ]
      ]
    },
    {
      "id": 1493,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(customerid) FROM yearmonth WHERE date LIKE '201202%'",
          "SELECT cast(sum(CASE WHEN YEARMONTH.consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(YEARMONTH.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 5, 2) = '02' AND substr(YEARMONTH.date, 1, 4) = '2012'",
          "SELECT cast(sum(CASE WHEN YEARMONTH.consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(YEARMONTH.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y%m', YEARMONTH.date) = '201202'",
          "SELECT cast(sum(iif(YEARMONTH.consumption > 528.3, 1, 0)) AS REAL) * 100 / count(YEARMONTH.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y%m', YEARMONTH.date) = '201202'"
        ]
      ]
    },
    {
      "id": 1494,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT (count(*) * 100.0 / (SELECT count(*) FROM gasstations WHERE country = 'Slovakia')) AS percentage FROM gasstations WHERE country = 'Slovakia' AND segment = 'Premium';",
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(segment) FROM gasstations WHERE country = 'Slovakia'",
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(country) FROM gasstations WHERE country = 'Slovakia'",
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(segment) FROM gasstations WHERE country = 'SVK'"
        ]
      ]
    },
    {
      "id": 1495,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customerid FROM yearmonth WHERE date = '201309' GROUP BY customerid ORDER BY sum(consumption) DESC LIMIT 1",
          "SELECT customerid FROM yearmonth WHERE date LIKE '201309%' GROUP BY customerid ORDER BY sum(consumption) DESC LIMIT 1",
          "SELECT customerid FROM yearmonth WHERE date = '201309' GROUP BY customerid ORDER BY sum(consumption) DESC LIMIT 1;",
          "SELECT customerid FROM yearmonth WHERE date LIKE '201309%' GROUP BY customerid ORDER BY sum(consumption) DESC LIMIT 1;"
        ]
      ]
    },
    {
      "id": 1496,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.segment FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE YEARMONTH.date = '201309' ORDER BY YEARMONTH.consumption LIMIT 1",
          "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 7) = '201309' GROUP BY customers.segment ORDER BY count(customers.customerid) ASC LIMIT 1",
          "SELECT customers.segment FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 7) = '201309' GROUP BY customers.segment ORDER BY count(customers.customerid) ASC LIMIT 1",
          "SELECT customers.segment FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE substr(YEARMONTH.date, 1, 7) = '201309' GROUP BY customers.segment ORDER BY sum(YEARMONTH.consumption) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1497,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'SME' AND YEARMONTH.date = '201206' ORDER BY YEARMONTH.consumption LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 6) = '201206' ORDER BY yearmonth.consumption LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'SME' AND strftime('%Y-%m', YEARMONTH.date) = '201206' ORDER BY YEARMONTH.consumption LIMIT 1",
          "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND substr(yearmonth.date, 1, 6) = '201206' ORDER BY yearmonth.consumption ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1498,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT max(consumption) FROM yearmonth WHERE date LIKE '2012%'",
          "SELECT max(consumption) FROM yearmonth WHERE substr(date, 1, 4) = '2012';",
          "SELECT max(consumption) FROM yearmonth WHERE strftime('%Y', date) = '2012'",
          "SELECT max(consumption) FROM yearmonth WHERE substr(date, 1, 4) = '2012'"
        ]
      ]
    },
    {
      "id": 1499,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR'",
          "SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR'",
          "SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' ORDER BY sum(yearmonth.consumption) DESC LIMIT 1",
          "SELECT sum(YEARMONTH.consumption) / 12 FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' ORDER BY YEARMONTH.consumption DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1500,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT products.description FROM products INNER JOIN yearmonth ON products.productid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013' AND substr(yearmonth.date, 5, 2) = '09'",
          "SELECT DISTINCT products.description FROM products INNER JOIN yearmonth ON products.productid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013' AND substr(yearmonth.date, 6, 2) = '09'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN YEARMONTH ON strftime('%Y', YEARMONTH.date) = strftime('%Y', transactions_1k.date) AND strftime('%m', YEARMONTH.date) = strftime('%m', transactions_1k.date) WHERE YEARMONTH.date LIKE '201309%'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN YEARMONTH ON strftime('%Y', YEARMONTH.date) = strftime('%Y', transactions_1k.`date`) AND strftime('%m', YEARMONTH.date) = strftime('%m', transactions_1k.`date`) WHERE YEARMONTH.date LIKE '201309%'"
        ]
      ]
    },
    {
      "id": 1501,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE date LIKE '201306%');",
          "SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN YEARMONTH ON YEARMONTH.customerid = transactions_1k.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2013' AND substr(YEARMONTH.date, 5, 2) = '06'",
          "SELECT DISTINCT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN YEARMONTH ON YEARMONTH.customerid = transactions_1k.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2013' AND substr(YEARMONTH.date, 5, 2) = '06'",
          "SELECT DISTINCT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN YEARMONTH ON transactions_1k.date = YEARMONTH.date WHERE substr(YEARMONTH.date, 5, 2) = '06'"
        ]
      ]
    },
    {
      "id": 1502,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE customers.currency = 'EUR'",
          "SELECT DISTINCT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN customers ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR'",
          "SELECT DISTINCT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'EUR'",
          "SELECT DISTINCT gasstations.chainid FROM gasstations gasstations JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'EUR';"
        ]
      ]
    },
    {
      "id": 1503,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid WHERE customers.currency = 'EUR'",
          "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid WHERE customers.currency = 'EUR'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN customers ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR'",
          "SELECT DISTINCT products.description FROM transactions_1k INNER JOIN products ON transactions_1k.productid = products.productid WHERE customers.currency = 'EUR'"
        ]
      ]
    },
    {
      "id": 1504,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(price) FROM transactions_1k WHERE date LIKE '2012-01%'",
          "SELECT sum(price) / count(transactionid) FROM transactions_1k WHERE date LIKE '2012-01%'",
          "SELECT avg(price) FROM transactions_1k WHERE Date LIKE '2012-01%'",
          "SELECT sum(t.price) / count(t.transactionid) FROM transactions_1k t JOIN yearmonth y ON t.date LIKE y.date || '-01'"
        ]
      ]
    },
    {
      "id": 1505,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(customers.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' AND YEARMONTH.consumption > 1000",
          "SELECT count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000",
          "SELECT count(DISTINCT customers.customerid) FROM customers customers JOIN yearmonth yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000;",
          "SELECT count(DISTINCT customers.customerid) FROM customers customers JOIN YEARMONTH YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' AND YEARMONTH.consumption > 1000;"
        ]
      ]
    },
    {
      "id": 1506,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT products.description FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE gasstations.country = 'CZE'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE'",
          "SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'",
          "SELECT DISTINCT products.description FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON products.productid = transactions_1k.productid WHERE gasstations.country = 'CZE'"
        ]
      ]
    },
    {
      "id": 1507,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT transactions_1k.time FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11",
          "SELECT DISTINCT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.chainid = 11",
          "SELECT DISTINCT t.time FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE g.chainid = 11;",
          "SELECT DISTINCT transactions_1k.time FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = '11'"
        ]
      ]
    },
    {
      "id": 1508,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000",
          "SELECT count(*) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations gasstations JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000"
        ]
      ]
    },
    {
      "id": 1509,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations gasstations JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations gasstations JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND strftime('%Y', transactions_1k.date) > '2012';",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations gasstations JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date >= '2013-01-01';",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01'"
        ]
      ]
    },
    {
      "id": 1510,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(transactions_1k.price) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'",
          "SELECT avg(price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE'",
          "SELECT avg(price) FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
          "SELECT sum(transactions_1k.price) / count(DISTINCT gasstations.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'"
        ]
      ]
    },
    {
      "id": 1511,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT avg(price) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR');",
          "SELECT avg(price) FROM transactions_1k WHERE customerid IN ( SELECT customerid FROM customers WHERE currency = 'EUR' )",
          "SELECT avg(price) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR')",
          "SELECT avg(price) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR') AND price IS NOT NULL;"
        ]
      ]
    },
    {
      "id": 1512,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' GROUP BY customerid ORDER BY sum(amount) DESC LIMIT 1",
          "SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' GROUP BY customerid ORDER BY count(*) DESC LIMIT 1",
          "SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' GROUP BY customerid ORDER BY sum(amount) DESC LIMIT 1;",
          "SELECT customerid FROM transactions_1k WHERE `date` = '2012-08-25' GROUP BY customerid ORDER BY count(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1513,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' GROUP BY gasstations.country ORDER BY count(DISTINCT transactions_1k.customerid) ASC LIMIT 1",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' ORDER BY transactions_1k.customerid LIMIT 1",
          "SELECT gasstations.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' ORDER BY customers.customerid ASC LIMIT 1",
          "SELECT gasstations.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' ORDER BY customers.customerid LIMIT 1"
        ]
      ]
    },
    {
      "id": 1514,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '16:25:00'",
          "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '16:25:00'",
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24'",
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE strftime('%Y-%m-%d', transactions_1k.date) = '2012-08-24' AND transactions_1k.time = '16:25:00'"
        ]
      ]
    },
    {
      "id": 1515,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00'",
          "SELECT DISTINCT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00'",
          "SELECT segment FROM customers WHERE customerid IN (SELECT customerid FROM transactions_1k WHERE date = '2012-08-23' AND TIME = '21:20:00');",
          "SELECT customers.segment FROM customers INNER JOIN `yearmonth` ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00'"
        ]
      ]
    },
    {
      "id": 1516,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(CASE WHEN transactions_1k.time < '13:00:00' AND customers.currency = 'CZK' AND transactions_1k.date = '2012-08-26' THEN 1 ELSE 0 END) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid",
          "SELECT sum(CASE WHEN transactions_1k.time < '13:00:00' AND customers.currency = 'CZK' THEN 1 ELSE 0 END) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-26'",
          "SELECT sum(CASE WHEN transactions_1k.time < '13:00:00' THEN 1 ELSE 0 END) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'CZK' AND transactions_1k.date = '2012-08-26'",
          "SELECT sum(CASE WHEN transactions_1k.time < '13:00:00' THEN 1 ELSE 0 END) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-26' AND customers.currency = 'CZK'"
        ]
      ]
    },
    {
      "id": 1517,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT segment FROM customers WHERE customerid = (SELECT customerid FROM transactions_1k ORDER BY date ASC LIMIT 1);",
          "SELECT segment FROM customers LIMIT 1",
          "SELECT segment FROM customers WHERE customerid = (SELECT customerid FROM yearmonth ORDER BY date ASC LIMIT 1);",
          "SELECT segment FROM customers WHERE customerid IN (SELECT customerid FROM yearmonth ORDER BY date ASC LIMIT 1);"
        ]
      ]
    },
    {
      "id": 1518,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00'",
          "SELECT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE date = '2012-08-24' AND TIME = '12:42:00');",
          "SELECT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE date = '2012-08-24' AND time = '12:42:00');",
          "SELECT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE Date = '2012-08-24' AND TIME = '12:42:00');"
        ]
      ]
    },
    {
      "id": 1519,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT productid FROM transactions_1k WHERE date = '2012-08-23' AND TIME = '21:20:00'",
          "SELECT productid FROM transactions_1k WHERE date = '2012-08-23' AND time = '21:20:00'",
          "SELECT productid FROM transactions_1k WHERE Date = '2012-08-23' AND TIME = '21:20:00'",
          "SELECT DISTINCT productid FROM transactions_1k WHERE date = '2012-08-23' AND TIME = '21:20:00'"
        ]
      ]
    },
    {
      "id": 1520,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT YEARMONTH.consumption, YEARMONTH.date FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 124.05",
          "SELECT YEARMONTH.date, YEARMONTH.consumption FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 124.05",
          "SELECT YEARMONTH.date, YEARMONTH.consumption FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.price = 124.05 AND transactions_1k.date = '2012-08-24'",
          "SELECT YEARMONTH.date, YEARMONTH.consumption FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.price = 124.05 AND strftime('%Y-%m', YEARMONTH.date) = '2012-01'"
        ]
      ]
    },
    {
      "id": 1521,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations gasstations JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date = '2012-08-26' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00';",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date = '2012-08-26' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00'",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations gasstations JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date = '2012-08-26' AND transactions_1k.time >= '08:00:00' AND transactions_1k.time < '09:00:00';",
          "SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations gasstations JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00' AND transactions_1k.date = '2012-08-26';"
        ]
      ]
    },
    {
      "id": 1522,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.currency FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE YEARMONTH.date LIKE '201306%' AND YEARMONTH.consumption = 214582.17",
          "SELECT customers.currency FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE YEARMONTH.date = '201306' AND YEARMONTH.consumption = 214582.17",
          "SELECT DISTINCT customers.currency FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE YEARMONTH.date LIKE '201306%' AND YEARMONTH.consumption = 214582.17",
          "SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 7) = '201306' AND yearmonth.consumption = 214582.17"
        ]
      ]
    },
    {
      "id": 1523,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.cardid = 667467",
          "SELECT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE cardid = 667467);",
          "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 667467",
          "SELECT gasstations.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.cardid = 667467"
        ]
      ]
    },
    {
      "id": 1524,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 548.4",
          "SELECT DISTINCT customers.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 548.4",
          "SELECT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE date = '2012-08-24' AND price = 548.4);",
          "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 548.4"
        ]
      ]
    },
    {
      "id": 1525,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-25'",
          "SELECT cast(sum(iif(customers.currency = 'EUR', 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-25'",
          "SELECT cast(sum(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-25'",
          "SELECT cast(sum(iif(customers.currency = 'EUR', 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE strftime('%Y-%m-%d', transactions_1k.date) = '2012-08-25'"
        ]
      ]
    },
    {
      "id": 1526,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2013' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) ) / ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) ) AS decreaserate",
          "SELECT ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2013' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) ) / ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) ) AS decreaterate",
          "SELECT ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2013' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) ) / ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) ) AS decrease_rate;",
          "SELECT ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2013' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) ) - ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) ) / ( SELECT consumption FROM yearmonth WHERE strftime('%Y', date) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ) )"
        ]
      ]
    },
    {
      "id": 1527,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.gasstationid FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid GROUP BY gasstations.gasstationid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1",
          "SELECT gasstations.gasstationid FROM (SELECT gasstationid, sum(amount) AS totalrevenue FROM transactions_1k GROUP BY gasstationid) AS t1 JOIN gasstations ON t1.gasstationid = gasstations.gasstationid ORDER BY t1.totalrevenue DESC LIMIT 1;",
          "SELECT gasstations.gasstationid FROM (SELECT gasstationid, sum(amount) AS totalrevenue FROM transactions_1k GROUP BY gasstationid) AS t1 JOIN gasstations ON t1.gasstationid = gasstations.gasstationid WHERE t1.totalrevenue = (SELECT max(totalrevenue) FROM (SELECT sum(amount) AS totalrevenue FROM transactions_1k GROUP BY gasstationid))",
          "SELECT gasstations.gasstationid FROM (SELECT gasstationid, sum(amount) AS totalamount FROM transactions_1k GROUP BY gasstationid) AS t1 JOIN gasstations ON t1.gasstationid = gasstations.gasstationid WHERE t1.totalamount = (SELECT max(totalamount) FROM (SELECT sum(amount) AS totalamount FROM transactions_1k GROUP BY gasstationid))"
        ]
      ]
    },
    {
      "id": 1528,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(segment) FROM gasstations WHERE country = 'SVK'",
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM gasstations WHERE country = 'SVK'",
          "SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(country) FROM gasstations WHERE country = 'SVK'",
          "SELECT (sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) * 100.0 / count(*)) AS percentage FROM gasstations WHERE country = 'SVK';"
        ]
      ]
    },
    {
      "id": 1529,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT sum(t.amount), (SELECT consumption FROM yearmonth WHERE customerid = 38508 AND date = '201201') FROM transactions_1k t WHERE t.customerid = 38508;",
          "SELECT sum(transactions_1k.amount), ( SELECT sum(amount) FROM transactions_1k WHERE customerid = 38508 AND strftime('%Y-%m', date) = '201201' ) FROM transactions_1k WHERE customerid = 38508 AND strftime('%Y-%m', date) = '201201'",
          "SELECT sum(transactions_1k.amount), ( SELECT sum(amount) FROM transactions_1k WHERE strftime('%Y-%m', date) = '201201' AND customerid = 38508 ) FROM transactions_1k WHERE strftime('%Y-%m', date) = '201201' AND customerid = 38508",
          "SELECT sum(transactions_1k.amount), ( SELECT sum(amount) FROM transactions_1k WHERE strftime('%Y-%m', date) = '201201' AND customerid = 38508 ) FROM transactions_1k WHERE customerid = 38508 AND strftime('%Y-%m', date) = '201201'"
        ]
      ]
    },
    {
      "id": 1530,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT description FROM products ORDER BY amount DESC LIMIT 5",
          "SELECT description FROM products ORDER BY amount DESC LIMIT 5;",
          "SELECT description FROM products WHERE productid IN (SELECT productid FROM transactions_1k GROUP BY productid ORDER BY sum(amount) DESC LIMIT 5);",
          "SELECT description FROM products ORDER BY productid DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1531,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) / sum(transactions_1k.amount) DESC LIMIT 1",
          "SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY sum(transactions_1k.price) / sum(transactions_1k.amount) DESC LIMIT 1",
          "SELECT customers.customerid, customers.currency, avg(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) DESC LIMIT 1",
          "SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1532,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE products.productid = 2 ORDER BY transactions_1k.price DESC LIMIT 1",
          "SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE products.productid = 2 ORDER BY transactions_1k.price DESC LIMIT 1",
          "SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.chainid = transactions_1k.gasstationid WHERE products.productid = 2 ORDER BY transactions_1k.price DESC LIMIT 1",
          "SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE products.productid = 2 GROUP BY gasstations.country ORDER BY count(products.productid) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1533,
      "db_id": "debit_card_specializing",
      "infer_predictions": [
        [
          "SELECT consumption FROM yearmonth WHERE customerid IN (SELECT customerid FROM transactions_1k WHERE productid = 5 AND price / amount > 29) AND date = '201208';",
          "SELECT consumption FROM yearmonth WHERE customerid IN (SELECT customerid FROM transactions_1k WHERE productid = 5 AND price / amount > 29 AND date = '201208')",
          "SELECT consumption FROM YEARMONTH WHERE customerid IN (SELECT customerid FROM transactions_1k WHERE productid = 5 AND price / amount > 29) AND date = '201208';",
          "SELECT consumption FROM yearmonth WHERE customerid IN (SELECT customerid FROM transactions_1k WHERE productid = 5 AND price / amount > 29 AND strftime('%Y-%m', date) = '201208')"
        ]
      ]
    }
  ]