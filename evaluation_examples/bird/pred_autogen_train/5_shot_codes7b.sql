SELECT max(`free meal count (k-12)`) / max(`enrollment (k-12)`) FROM frpm WHERE `county code` = '01';
SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `school type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3;
SELECT schools.zip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno';
SELECT mailstreet FROM schools WHERE cdscode = (SELECT cdscode FROM frpm WHERE `frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm));
SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND frpm.`charter school number` > '2000/1/1';
SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 400 AND schools.virtual = 'F';
SELECT * FROM schools WHERE schools.magnet = 1 OR schools.magnet = 0;
SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 ORDER BY schools.phone DESC LIMIT 1;
SELECT numtsttakr FROM satscores WHERE cds IN (SELECT cdscode FROM frpm WHERE `frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm));
SELECT count(DISTINCT schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';
SELECT frpm.`frpm count (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrread = (SELECT max(avgscrread) FROM satscores WHERE rtype = 'D');
SELECT satscores.cds FROM satscores WHERE satscores.enroll12 > 500;
SELECT max(frpm.`percent (%) eligible free (ages 5-17)`) FROM frpm WHERE frpm.`percent (%) eligible free (ages 5-17)` > 0.3;
SELECT phone FROM schools JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3;
SELECT schools.ncesschool FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.enroll12 DESC LIMIT 5;
SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1;
SELECT count(satscores.sname) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100;
SELECT satscores.cds, satscores.avgscrwrite FROM satscores WHERE satscores.avgscrwrite > 499 ORDER BY satscores.avgscrwrite DESC;
SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;
SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE rtype = 'M' ORDER BY avgscrmath DESC LIMIT 1);
SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND schools.county = 'Amador';
SELECT count(DISTINCT schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city LIKE 'Los Angeles' AND frpm.`free meal count (k-12)` > 500 AND frpm.`frpm count (k-12)` < 700;
SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1;
SELECT sname, street FROM satscores WHERE enroll12 - frpm.`enrollment (ages 5-17)` > 30;
SELECT sname FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500;
SELECT DISTINCT schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 400;
SELECT schools.school, schools.street, schools.city, schools.state, schools.zip FROM schools, frpm WHERE schools.cdscode = frpm.cdscode AND frpm.`free meal count (ages 5-17)` > 800 AND frpm.`county code` = '01';
SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2000-01-01';
SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT avg((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm WHERE frpm.`charter funding type` = 'Locally funded');
SELECT schools.opendate FROM schools WHERE schools.edopscode = 'K-12' ORDER BY schools.enroll12 DESC LIMIT 1;
SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.enroll12 LIMIT 5;
SELECT frpm.`school name`, frpm.`percent (%) eligible free (k-12)` FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' AND satscores.enroll12 = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') ORDER BY frpm.`percent (%) eligible free (k-12)` DESC LIMIT 2;
SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = 66 ORDER BY `free meal count (k-12)` DESC LIMIT 5;
SELECT frpm.`school name`, frpm.cdscode, frpm.`free meal count (ages 5-17)` FROM frpm WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000;
SELECT frpm.`free meal count (ages 5-17)`, frpm.`enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey';
SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 1;
SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 >= 1500 GROUP BY schools.school ORDER BY COUNT(*) DESC LIMIT 3;
SELECT schools.street, schools.city, schools.zip, schools.state FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);
SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000;
SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Fresno' AND schools.year = 1980;
SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE rtype = 'D' AND avgscrread = (SELECT min(avgscrread) FROM satscores WHERE rtype = 'D'));
SELECT schools.school, schools.county FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;
SELECT satscores.rtype FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1;
SELECT satscores.avgscrmath + satscores.avgscrread + satscores.avgscrwrite FROM satscores WHERE satscores.avgscrmath + satscores.avgscrread + satscores.avgscrwrite = (SELECT min(avgscrmath + avgscrread + avgscrwrite) FROM satscores);
SELECT schools.city, avg(satscores.avgscrwrite) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;
SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich';
SELECT sname FROM satscores WHERE enroll12 = (SELECT max(enroll12) FROM satscores WHERE gsserved = 'K-12');
SELECT count(schools.school) / 12 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.doc = '52' AND schools.county = 'Alameda' AND schools.doctype = 'State Special Schools' AND satscores.dname = 'Alameda Unified' AND satscores.cname = 'Alameda' AND satscores.sname = 'FAME Public Charter';
SELECT cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county code` = '54';
SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county ORDER BY count(*) DESC LIMIT 1;
SELECT schools.school, schools.mailstreet FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY avgscrmath DESC LIMIT 7;
SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread LIMIT 1;
SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500;
SELECT count(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';
SELECT schools.mailzip FROM schools WHERE schools.admfname1 = 'Avetik' AND schools.admfname2 = 'Avetik';
SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) FROM schools WHERE schools.state = 'CA';
SELECT count(DISTINCT schools.school) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.mailstate = 'CA' AND schools.mailcity = 'San Joaquin';
SELECT schools.phone, schools.ext FROM schools JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 333;
SELECT schools.phone, schools.ext FROM schools WHERE schools.zip = '95203-3704';
SELECT schools.website FROM schools WHERE schools.admfname1 = 'MIke' AND schools.admfname2 = 'Mike' AND schools.admfname3 = 'Dante';
SELECT schools.website FROM schools WHERE schools.charter = 1 AND schools.virtual = 'P' AND schools.county = 'San Joaquin';
SELECT count(school) FROM schools WHERE city = 'Hickman' AND charter = 1 AND doc = 52;
SELECT sum(frpm.`free meal count (k-12)`) FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`percent (%) eligible free (k-12)` < 0.18;
SELECT schools.school, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2';
SELECT count(*) FROM schools WHERE mailcity = 'Hickman' AND charternum = '00D4';
SELECT (count(DISTINCT schools.cdscode) * 100.0 / (SELECT count(DISTINCT cdscode) FROM schools WHERE county = 'Santa Clara')) AS percentage FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`charter funding type` = 'Locally funded' AND schools.county = 'Santa Clara';
SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter funding type` = 'Directly funded' AND frpm.`county name` = 'Stanislaus' AND schools.fundingtype = 'Directly funded' AND schools.county = 'Stanislaus' AND schools.soctype = 'K-12 Schools (Public)';
SELECT sum(satscores.enroll12) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'San Francisco' AND satscores.rtype = 'D';
SELECT schools.county FROM schools WHERE schools.soc = '11' AND schools.cdscode IN (SELECT frpm.cdscode FROM frpm WHERE frpm.`academic year` BETWEEN '1980' AND '1989') GROUP BY schools.county ORDER BY count(*) DESC LIMIT 1;
SELECT schools.ncesdist FROM schools WHERE schools.soc = 31;
SELECT count(*) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Alpine' AND schools.closeddate IS NULL;
SELECT frpm.`district code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.magnet = 0 AND schools.city = 'Fresno';
SELECT count(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015';
SELECT frpm.`free meal count (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.mailstreet = 'PO Box 1040';
SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '0613360' ORDER BY frpm.`low grade` ASC LIMIT 1;
SELECT schools.eilname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2';
SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.eilcode = 'HS' AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND satscores.cname = 'Merced';
SELECT schools.school, frpm.`percent (%) eligible frpm (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'K-12';
SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(*) DESC LIMIT 1;
SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.virtual = 'F' AND satscores.cname BETWEEN 'San Diego' AND 'Santa Barbara';
SELECT schools.school, schools.latitude FROM schools ORDER BY schools.latitude DESC LIMIT 1;
SELECT schools.city FROM schools WHERE schools.state = 'CA' AND schools.latitude IS NOT NULL ORDER BY schools.latitude ASC LIMIT 1;
SELECT gsoffered FROM schools WHERE longitude = (SELECT max(abs(longitude)) FROM schools);
SELECT schools.city, count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Multiple Provision Types' AND frpm.`school type` = 'K-8 Schools (Public)' GROUP BY schools.city;
SELECT admfname1, district FROM schools GROUP BY admfname1, district ORDER BY count(*) DESC LIMIT 2;
SELECT frpm.`percent (%) eligible free (k-12)`, frpm.`district code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine';
SELECT schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '40';
SELECT admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`district type` = 'State Special Schools' AND frpm.`county name` = 'San Bernardino' AND frpm.`county code` = '01' AND satscores.rtype = 'D' AND satscores.enroll12 BETWEEN 398 AND 62;
SELECT schools.admemail1 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1;
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.a3 = 'east Bohemia';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague';
SELECT a12, a13 FROM district WHERE a12 > a13;
SELECT count(DISTINCT district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND district.a11 > 6000 AND district.a11 < 10000;
SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND district.a11 > 8000;
SELECT account.account_id FROM client JOIN account ON client.client_id = account.account_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT MAX(a11) FROM district) AND client.birth_date = (SELECT MIN(birth_date) FROM client);
SELECT account.account_id FROM account account JOIN client client ON account.district_id = client.district_id JOIN district district ON client.district_id = district.district_id WHERE district.a11 = (SELECT max(a11) FROM district) AND client.birth_date < (SELECT min(birth_date) FROM client);
SELECT count(*) FROM disp WHERE type = 'OWNER' AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK TYDNE');
SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU';
SELECT account_id FROM loan WHERE date = '1997-01-01' AND status = 'A' ORDER BY amount ASC LIMIT 1;
SELECT account_id FROM loan WHERE duration > 12 GROUP BY account_id ORDER BY sum(amount) DESC LIMIT 1;
SELECT count(*) FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Sokolov';
SELECT * FROM account WHERE strftime('%Y', date) = '1995' ORDER BY date ASC LIMIT 1;
SELECT DISTINCT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000);
SELECT client.client_id FROM card INNER JOIN client ON card.card_id = client.client_id WHERE card.issued LIKE '1994-03-03';
SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.account_id = 840;
SELECT district.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.date = '1994-08-25';
SELECT MAX(trans.amount) FROM trans INNER JOIN disp ON trans.trans_id = disp.disp_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued = '1996-10-21';
SELECT client.gender, district.a11 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date = (SELECT max(client.birth_date) FROM client) AND district.a11 = (SELECT max(district.a11) FROM district);
SELECT trans.amount FROM client INNER JOIN loan ON client.client_id = loan.client_id INNER JOIN trans ON loan.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1;
SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F';
SELECT card.disp_id FROM card INNER JOIN trans ON card.card_id = trans.card_id WHERE trans.amount = 5100 AND strftime('%Y-%m-%d', trans.date) = '1998-09-02';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND account.date LIKE '1996%';
SELECT district.a2 FROM client client INNER JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';
SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';
SELECT account_id FROM account WHERE district_id IN (SELECT district_id FROM district WHERE a3 = 'Prague') LIMIT 1;
SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia';
SELECT (loan.amount - trans.balance) / trans.balance * 100 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.status = 'A' AND loan.date = '1993-07-05' AND trans.date BETWEEN '1993-03-22' AND '1998-12-27';
SELECT cast(sum(CASE WHEN loan.status = 'A' THEN loan.amount END) AS REAL) * 100 / sum(loan.amount) FROM loan;
SELECT cast(sum(iif(loan.amount < 100000, 1, 0)) AS REAL) * 100 / count(account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C';
SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU';
SELECT account.account_id, account.frequency FROM account JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';
SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice';
SELECT district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990;
SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount > 300000;
SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60;
SELECT district.district_id, state.state FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.client_id = account.client_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN state ON district.a9 = state.statecode WHERE loan.status LIKE 'D';
SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date = '1993-01-01';
SELECT account.account_id FROM account WHERE account.frequency = 'POPLATEK MESICNE';
SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.a2 ORDER BY COUNT(*) DESC LIMIT 9;
SELECT district.a2 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type = 'VYDAJ' AND account.date LIKE '1996-01%' GROUP BY district.a2 ORDER BY count(disp.disp_id) DESC LIMIT 10;
SELECT count(*) FROM district district INNER JOIN account account ON district.district_id = account.district_id INNER JOIN disp disp ON account.account_id = disp.account_id INNER JOIN card card ON disp.disp_id = card.disp_id WHERE district.a3 = 'south Bohemia' AND card.card_id IS NULL;
SELECT district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY count(loan.loan_id) DESC LIMIT 1;
SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';
SELECT district.district_id, district.a2 FROM district district WHERE district.a13 = (SELECT max(a13) FROM district);
SELECT count(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE a16 = (SELECT max(a16) FROM district));
SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.operation = 'VYBER KARTOU' AND trans.balance < 0;
SELECT count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'A';
SELECT count(account.account_id) FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' AND account.district_id = 1;
SELECT count(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a15 = (SELECT max(a15) FROM district);
SELECT count(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek';
SELECT account.district_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01';
SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.k_symbol = 'SIPO' AND district.a2 = 'Pisek';
SELECT account.account_id FROM card INNER JOIN account ON card.disp_id = account.account_id WHERE card.type = 'gold';
SELECT avg(trans.amount) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.disp_id = trans.disp_id WHERE disp.account_id = 2021;
SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount < (SELECT AVG(trans.amount) FROM trans WHERE trans.account_id = account.account_id AND trans.date = '1998-01-01');
SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F' AND card.type = 'gold';
SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F';
SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Tabor';
SELECT DISTINCT disp.type, district.a11 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type != 'LOAN' AND district.a11 > 8000 AND district.a11 <= 9000;
SELECT count(*) FROM account INNER JOIN trans ON account.account_id = trans.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';
SELECT a2 FROM district WHERE district_id IN (SELECT account_id FROM trans WHERE type = 'VYDAJ');
SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01');
SELECT count(card_id) FROM card WHERE type = 'classic';
SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a2 = 'Hl.m. Praha';
SELECT (count(type = 'gold' AND issued < '1998-01-01') / count(*)) * 100 FROM card;
SELECT disp.client_id FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1;
SELECT district.a15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532;
SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333;
SELECT trans.operation FROM trans INNER JOIN disp ON trans.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER';
SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;
SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539;
SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;
SELECT district_id FROM account WHERE status = 'A' GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT order.account_id FROM order WHERE order.order_id = 32423;
SELECT * FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';
SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.client_id WHERE card.issued > '1996-01-01' AND card.type = 'junior';
SELECT (count(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / count(*)) AS percentage FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.a11 > 10000;
SELECT (sum(loan.amount) - sum(loan_1996.amount)) / sum(loan_1996.amount) * 100.0 AS growth_rate FROM loan loan JOIN loan loan_1996 ON loan.account_id = loan_1996.account_id JOIN client client ON loan.account_id = client.client_id WHERE client.gender = 'M' AND loan.date BETWEEN '1996-01-01' AND '1997-12-31';
SELECT count(*) FROM trans WHERE trans.date > '1995-01-01' AND trans.operation = 'VYBER KARTOU';
SELECT district.a16 - district.a15 AS difference FROM district WHERE district.a3 = 'north Bohemia';
SELECT count(*) FROM disp WHERE account_id BETWEEN 1 AND 10;
SELECT count(trans.trans_id) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.account_id = 3539;
SELECT birth_date FROM client WHERE client_id = 130;
SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU';
SELECT loan.amount, loan.payments FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.account_id = client.client_id WHERE client.client_id = 992;
SELECT SUM(trans.amount) FROM trans INNER JOIN client ON trans.account_id = client.client_id INNER JOIN account ON trans.account_id = account.account_id WHERE client.client_id = 4 AND trans.trans_id = 851;
SELECT card.type FROM card INNER JOIN client ON card.disp_id = client.client_id WHERE client.client_id = '9';
SELECT sum(t.amount) FROM trans t WHERE t.account_id = 617 AND t.trans_id = 1998;
SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';
SELECT client_id FROM client WHERE gender = 'F' ORDER BY amount DESC LIMIT 3;
SELECT count(DISTINCT client.client_id) FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN order ON account.account_id = order.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND order.k_symbol = 'SIPO' AND order.amount > 4000;
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01';
SELECT count(DISTINCT card.card_id) FROM card card JOIN client client ON card.disp_id = client.client_id WHERE client.gender = 'F' AND card.type = 'junior';
SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'Prague';
SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';
SELECT count(*) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK TYDNE';
SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1;
SELECT account.account_id FROM client JOIN account ON client.client_id = account.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT min(a11) FROM district);
SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date = '1920-01-01' AND district.a3 = 'east Bohemia';
SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK TYDNE';
SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU';
SELECT client.client_id, district.district_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' OR client.gender = 'M';
SELECT client.client_id, client.birth_date FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1;
SELECT count(*) FROM molecule WHERE label = '-' AND molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'cl');
SELECT avg(atom.element = 'o') FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT SUM(bond_type = '-') / COUNT(atom_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE label = '+';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'na' AND molecule.label = '-';
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.label = '+';
SELECT SUM(atom.element = 'c') / COUNT(atom.atom_id) AS percentage FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';
SELECT count(*) FROM bond WHERE bond_type = '#';
SELECT count(*) FROM atom WHERE element != 'br';
SELECT count(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT molecule.molecule_id FROM atom atom JOIN molecule molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';
SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '=' ) );
SELECT label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'h' GROUP BY label ORDER BY count(label) DESC LIMIT 1;
SELECT bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';
SELECT DISTINCT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';
SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-';
SELECT element FROM (SELECT element, count(*) AS cnt FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) WHERE cnt = (SELECT min(cnt) FROM (SELECT count(*) AS cnt FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element));
SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';
SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element != 'sn';
SELECT count(DISTINCT atom.atom_id) FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';
SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';
SELECT connected.atom_id2 FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181';
SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'f';
SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;
SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6';
SELECT SUM(label = '+') - SUM(label = '-') FROM molecule;
SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_5';
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';
SELECT molecule_id FROM bond WHERE bond_type = ' = ' ORDER BY molecule_id ASC LIMIT 5;
SELECT SUM(bond_type = '='), COUNT(bond_id) FROM bond WHERE molecule_id = 'TR008';
SELECT ROUND(SUM(label = '+') / COUNT(molecule_id), 3) AS percentage FROM molecule;
SELECT SUM(atom.element = 'h') / COUNT(atom.atom_id) AS percent FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR206';
SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000';
SELECT atom.element, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';
SELECT MAX(COUNT(bond_type)), bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR010' GROUP BY bond.bond_type;
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' AND bond.bond_type = '-' AND molecule.label = '-' ORDER BY molecule.molecule_id LIMIT 3;
SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;
SELECT count(bond.bond_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id JOIN connected connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR009' AND connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.label = '+' AND atom.element = 'br';
SELECT bond.bond_type, connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR001_6_9';
SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';
SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#';
SELECT count(*) FROM connected WHERE connected.atom_id = 'TR000_19';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004';
SELECT count(*) FROM molecule WHERE label = '-';
SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTR(atom_id, 7, 2) BETWEEN '21' AND '25' AND label = '+';
SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';
SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label HAVING count(bond.bond_id) = (SELECT max(num) FROM (SELECT count(bond.bond_id) AS num FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label) t);
SELECT cast(count(bond_id) AS REAL) / count(atom_id) AS average FROM atom WHERE element = 'i';
SELECT bond.bond_type, bond.bond_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR000_45';
SELECT DISTINCT atom.element FROM atom WHERE NOT EXISTS (SELECT 1 FROM connected WHERE connected.atom_id = atom.atom_id);
SELECT atom.atom_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.molecule_id = 'TR041' AND bond.bond_type = '#';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19';
SELECT molecule.molecule_id FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';
SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY count(element) ASC LIMIT 1;
SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.element = 'pb';
SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';
SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)))) FROM connected connected INNER JOIN atom atom ON connected.atom_id = atom.atom_id INNER JOIN bond bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'c' AND bond.bond_type = '=' GROUP BY connected.bond_id;
SELECT DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) FROM bond WHERE bond_type = '-';
SELECT count(*) FROM atom WHERE element IN('c', 'h');
SELECT atom_id2 FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 's' );
SELECT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'sn';
SELECT count(DISTINCT element) FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT count(*) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '#' AND atom.element IN ('p', 'br');
SELECT bond_id FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT DISTINCT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-';
SELECT SUM(element = 'cl'), COUNT(atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';
SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = connected.atom_id2 AND bond.bond_type = '-';
SELECT count(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11';
SELECT count(bond.bond_id) FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i';
SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca' AND label = (SELECT max(label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca');
SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_1_8' AND atom.element = 'cl' AND atom.element = 'c';
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' AND bond.bond_type = '#' AND molecule.label = '-';
SELECT (count(DISTINCT CASE WHEN atom.element = 'cl' THEN molecule.molecule_id ELSE NULL END) * 100.0 / count(DISTINCT molecule.molecule_id)) AS percentage FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';
SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_1_2';
SELECT count(*) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';
SELECT bond.label FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_10_11';
SELECT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';
SELECT substr(connected.atom_id, 7, 1) , count(connected.atom_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY substr(connected.atom_id, 7, 1);
SELECT SUM(atom.element = 'h') / COUNT(atom.element) AS ratio, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR006' GROUP BY molecule.label;
SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca';
SELECT bond_type FROM bond WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'c');
SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';
SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond;
SELECT SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047';
SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR001_1';
SELECT label FROM molecule WHERE molecule_id = 'TR151';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151';
SELECT count(molecule.molecule_id) FROM molecule WHERE molecule.label = '+';
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c';
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT bond_id FROM bond WHERE bond_type = ' = ' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';
SELECT molecule.molecule_id FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id JOIN molecule molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR000_1_2' AND atom.atom_id = 'TR000_1';
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element LIKE 'c' AND molecule.label LIKE '-';
SELECT sum(label = '+' and element = 'h') * 100.0 / count(molecule_id) FROM molecule;
SELECT label FROM molecule WHERE molecule_id = 'TR124';
SELECT atom.atom_id FROM atom WHERE atom.molecule_id = 'TR186';
SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR007_4_19';
SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR001_2_4';
SELECT count(bond_id) FROM bond WHERE molecule_id = 'TR006' AND bond_type = ' = ';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';
SELECT molecule.molecule_id, atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#';
SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_2_3';
SELECT count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';
SELECT atom.atom_id, count(bond.bond_type) FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id;
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';
SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE element != 's' AND bond_type != ' = ';
SELECT label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4';
SELECT count(atom.atom_id) FROM atom WHERE atom.molecule_id = 'TR001';
SELECT count(bond.bond_type) FROM bond WHERE bond.bond_type = '-';
SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';
SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / count(*) AS percentage FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id;
SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_1_7';
SELECT count(DISTINCT element) FROM atom JOIN connected connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_3_4';
SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR000_1' AND connected.atom_id = 'TR000_2';
SELECT molecule_id FROM atom WHERE atom_id = 'TR000_2' UNION SELECT molecule_id FROM atom WHERE atom_id = 'TR000_4';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
SELECT SUM(bond_type = '-') AS percentage FROM bond;
SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND atom.element = 'n';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.bond_id WHERE atom.element = 's' AND bond.bond_type = ' = ';
SELECT molecule.molecule_id FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.atom_id GROUP BY molecule.molecule_id HAVING COUNT(connected.atom_id) > 5 AND molecule.label = '-';
SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=' AND atom.molecule_id = 'TR024';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY molecule.molecule_id ORDER BY count(atom.molecule_id) DESC LIMIT 1;
SELECT SUM(label = '+') / COUNT(molecule_id) * 100.0 FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN bond ON atom.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id WHERE element = 'h' AND bond_type = '#';
SELECT count(*) FROM molecule WHERE label = '+';
SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-';
SELECT count(*) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id = 'TR008';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';
SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-';
SELECT atom.element, bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR002';
SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c';
SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND atom.element = 'o';
SELECT * FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;
SELECT * FROM cards WHERE bordercolor = 'borderless' AND id NOT IN (SELECT cardkingdomfoilid FROM cards WHERE cardkingdomid IS NOT NULL);
SELECT name FROM cards WHERE convertedmanacost > (SELECT Max(faceconvertedmanacost) FROM cards);
SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015;
SELECT name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' AND status = 'Banned' AND format = 'gladiator';
SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';
SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.power = '*' OR cards.power IS NULL AND legalities.format = 'commander' AND legalities.status = 'Legal';
SELECT cards.id, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele';
SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';
SELECT cards.name, cards.artist, rulings.text, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid GROUP BY rulings.uuid ORDER BY count(rulings.uuid) DESC LIMIT 1;
SELECT set_translations.translation FROM set_translations INNER JOIN cards ON set_translations.setcode = cards.setcode WHERE cards.name = 'annul' AND cards.number = '29';
SELECT cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;
SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN cards ON set_translations.id = cards.id;
SELECT sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian';
SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd';
SELECT cards.keywords FROM cards WHERE cards.name = 'Angel of Mercy';
SELECT count(id) FROM cards WHERE power = '*';
SELECT promotypes FROM cards WHERE name = 'Duress';
SELECT cards.bordercolor FROM cards WHERE cards.name = 'Ancestor''s Chosen';
SELECT cards.originaltype FROM cards WHERE cards.name = 'Ancestor''s Chosen';
SELECT language FROM set_translations WHERE setcode = (SELECT setcode FROM cards WHERE name = 'Angel of Mercy');
SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.istextless = 0;
SELECT text FROM rulings WHERE uuid = 'Condemn';
SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isstarter = 1;
SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Cloudchaser Eagle';
SELECT cards.type FROM cards WHERE cards.name = 'Benalish Knight';
SELECT legalities.format FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Benalish Knight';
SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';
SELECT percentage FROM (SELECT Count(id) AS percentage FROM cards WHERE bordercolor = 'borderless');
SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1;
SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND language = 'Russian';
SELECT (count(cards.id) FILTER (WHERE cards.language = 'French' AND cards.isstoryspotlight = 1) * 100.0 / count(cards.id) FILTER (WHERE cards.isstoryspotlight = 1)) AS percentage FROM cards;
SELECT count(id) FROM cards WHERE toughness = '99';
SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd';
SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'mtgo';
SELECT id FROM cards WHERE convertedmanacost = 0;
SELECT cards.layout FROM cards WHERE cards.keywords = 'Flying';
SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes <> 'Angel';
SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT Null AND cards.cardkingdomid IS NOT Null AND cards.hasfoil = 1 AND cards.hasnonfoil = 1;
SELECT id FROM cards WHERE dueldeck = 'a';
SELECT cards.edhrecrank FROM cards WHERE cards.frameversion = '2015';
SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';
SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.availability = 'paper' AND foreign_data.language = 'Japanese' AND set_translations.language = 'Japanese';
SELECT count(cards.bordercolor) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white';
SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'legacy';
SELECT text FROM rulings WHERE id = (SELECT id FROM cards WHERE name = 'Beacon of Immortality');
SELECT count(id) FROM cards WHERE frameversion = 'future';
SELECT cards.name , cards.colorindicator FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW';
SELECT set_translations.translation , foreign_data.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.setcode = '10E' AND cards.convertedmanacost = 5;
SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf';
SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;
SELECT * FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B';
SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;
SELECT count(*) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL AND power = '3';
SELECT count(cards.bordercolor) FROM cards WHERE cards.bordercolor = 'white' AND cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;
SELECT count(cards.id) FROM cards WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;
SELECT count(id) FROM cards WHERE frameversion = '1993' AND availability = 'paper' AND hascontentwarning = 1;
SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND availability = 'mtgo,paper';
SELECT sum(convertedmanacost) FROM cards WHERE artist = 'Rob Alexander';
SELECT type FROM cards WHERE availability = 'arena';
SELECT set_translations.setcode FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE set_translations.language = 'Spanish';
SELECT (SELECT count(*) FROM cards WHERE isonlineonly = 1) * 1.0 / (SELECT count(*) FROM cards WHERE frameeffects = 'legendary') AS percentage;
SELECT id FROM cards WHERE isstoryspotlight = 1 AND istextless = 0;
SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE set_translations.language = 'Spanish';
SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 309;
SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brasil)' AND sets.block = 'Commander';
SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'legal';
SELECT cards.types FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL;
SELECT count(id) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%';
SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'premodern' AND cards.side IS NULL AND rulings.text = 'This is a triggered mana ability.';
SELECT id FROM cards WHERE artist = 'Erica Yang' AND format = 'pauper' AND availability = 'paper';
SELECT cards.artist FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.text = 'Das perfekte Gegenmittel zu einer dichten Formation';
SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson' AND cards.layout = 'normal' AND cards.type = 'Creature' AND foreign_data.language = 'French';
SELECT count(*) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2007-02-01';
SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica';
SELECT DIVidE(COUNT(hascontentwarning = 0),COUNT(id))*100 FROM cards WHERE format = 'commander' AND status = 'legal';
SELECT cast(sum(CASE WHEN foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*') FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid;
SELECT cast(sum(CASE WHEN foreign_data.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id WHERE sets.type = 'expansion';
SELECT availability FROM cards WHERE artist = 'Daren Bader';
SELECT count(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000;
SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;
SELECT cards.name FROM cards WHERE cards.power IS NULL OR cards.power = '*' AND cards.promotypes = 'arenaleague' ORDER BY cards.name ASC LIMIT 3;
SELECT foreign_data.language FROM foreign_data WHERE foreign_data.multiverseid = 149934;
SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;
SELECT cast(sum(CASE WHEN cards.istextless = 1 AND cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards;
SELECT number FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL;
SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name ASC LIMIT 3;
SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC';
SELECT cards.name, set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.id = 5;
SELECT foreign_data.language, sets.type FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id WHERE sets.id = 206;
SELECT cards.id, sets.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.block = 'Shadowmoor' AND sets.language = 'Italian' ORDER BY cards.id ASC LIMIT 2;
SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND sets.isforeignonly = 1 AND sets.isfoilonly = 1;
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1;
SELECT cast(count(iif(foreign_data.language = 'Chinese Simplified' AND sets.isonlineonly = 1, foreign_data.id, NULL)) AS REAL) * 100 / count(foreign_data.id) FROM foreign_data INNER JOIN sets ON foreign_data.multiverseid = sets.id;
SELECT count(*) FROM set_translations WHERE language = 'Japanese' AND mtgocode IS NULL;
SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black';
SELECT cards.id FROM cards WHERE cards.frameeffects = 'extendedart';
SELECT name FROM cards WHERE bordercolor = 'white' AND isfullart = 1;
SELECT language FROM foreign_data WHERE id = 174;
SELECT sets.name FROM sets WHERE sets.code = 'ALL';
SELECT foreign_data.language FROM foreign_data WHERE foreign_data.name = 'A Pedra Fellwar';
SELECT sets.code FROM sets WHERE sets.releasedate = '2007-07-13';
SELECT sets.basesetsize, sets.code FROM sets WHERE sets.block = 'Masques' AND sets.name = 'Mirage';
SELECT DISTINCT sets.code FROM sets WHERE sets.type = 'expansion';
SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';
SELECT foreign_data.language, foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie';
SELECT COUNT(convertedmanacost = 16), COUNT(convertedmanacost) FROM cards WHERE name = 'Abyssal Horror';
SELECT code FROM sets WHERE type = 'expansion' AND block = 'Commander';
SELECT foreign_data.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';
SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius';
SELECT count(cardkingdomfoilid) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;
SELECT count(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '3';
SELECT name FROM cards WHERE istextless = 0;
SELECT cards.manacost FROM cards WHERE cards.name = 'Ancestor`s Chosen';
SELECT count(DISTINCT cards.power) FROM cards WHERE cards.bordercolor = 'white' AND (cards.power = '*' OR cards.power IS NULL);
SELECT name FROM cards WHERE ispromo = 1 AND side IS NOT NULL;
SELECT subtypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseurls FROM cards WHERE promotypes = 'bundle';
SELECT count(DISTINCT cards.artist) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability LIKE '%arena,mtgo%';
SELECT cards.name, cards.convertedmanacost FROM cards ORDER BY cards.convertedmanacost DESC LIMIT 1;
SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3;
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE set_translations.language = 'Italian' AND cards.name = 'Ancestor''s Chosen';
SELECT count(set_translations.id) FROM set_translations set_translations JOIN cards cards ON set_translations.setcode = cards.setcode WHERE cards.name = 'Angel of Mercy';
SELECT name FROM cards WHERE setcode = 'Hauptset Zehnte Edition';
SELECT foreign_data.language = 'Korean' FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen';
SELECT count(cards.artist) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';
SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';
SELECT CASE WHEN sets.mtgocode IS NOT NULL AND cards.mtgofoilid IS NOT NULL THEN 'YES' WHEN sets.mtgocode IS NOT NULL AND cards.mtgofoilid IS NULL THEN 'NO' WHEN sets.mtgocode IS NULL AND cards.mtgofoilid IS NOT NULL THEN 'NO' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy';
SELECT releasedate FROM sets WHERE name = 'Ancestor''s Chosen';
SELECT type FROM sets WHERE name = 'Hauptset Zehnte Edition';
SELECT count(DISTINCT sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;
SELECT CASE WHEN sets.isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Adarkar Valkyrie';
SELECT count(DISTINCT sets.id) FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON sets.code = set_translations.setcode WHERE foreign_data.language = 'Italian' AND sets.basesetsize < 10;
SELECT count(id) FROM cards WHERE setcode = 'Coldsnap' AND bordercolor = 'black';
SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1;
SELECT artist FROM cards WHERE name = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');
SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.number = 4;
SELECT count(cards.id) FROM cards INNER JOIN sets ON sets.code = cards.setcode INNER JOIN set_translations ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR T1.power IS NULL);
SELECT foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen';
SELECT foreign_data.language FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavortext IS NOT NULL;
SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German';
SELECT rulings.text FROM foreign_data INNER JOIN rulings ON foreign_data.uuid = rulings.uuid WHERE foreign_data.language = 'Italian' AND foreign_data.name = 'Coldsnap';
SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' ORDER BY cards.convertedmanacost DESC LIMIT 1;
SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce';
SELECT SUM(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) * 100 / SUM(1) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.setcode = 'Coldsnap';
SELECT cast(SUM(CASE WHEN cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN name = 'Coldsnap' THEN 1 ELSE 0 END) FROM cards WHERE name = 'Coldsnap';
SELECT code FROM sets WHERE releasedate = '2017-07-14';
SELECT keyrunecode FROM sets WHERE code = 'PKHC';
SELECT sets.mcmid FROM sets WHERE sets.code = 'SS2';
SELECT mcmname FROM sets WHERE releasedate = '2017/6/9';
SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'From the Vault: Lore';
SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT hascontentwarning, text FROM cards WHERE artist = 'Jim Pavelec';
SELECT releasedate FROM sets WHERE code IN (SELECT setcode FROM cards WHERE name = 'Evacuation');
SELECT basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara';
SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huitième édition';
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French';
SELECT count(*) FROM set_translations WHERE setcode = 'Tenth Edition' AND translation IS NOT NULL;
SELECT translation FROM set_translations WHERE setcode IN (SELECT setcode FROM cards WHERE name = 'Fellwar Stone') AND language = 'Japanese';
SELECT name FROM cards WHERE setcode = 'Journey into Nyx Hero''s Path' ORDER BY convertedmanacost DESC LIMIT 1;
SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de frío';
SELECT type FROM sets WHERE code IN (SELECT setcode FROM cards WHERE name = 'Samite Pilgrim');
SELECT count(*) FROM cards WHERE convertedmanacost = 3 AND setcode = 'World Championship Decks 2004';
SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';
SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.isnonfoilonly = 1;
SELECT DIVidE(SUM(isonlineonly = 1), SUM(language = 'Portuguese (Brazil)'))*100 FROM set_translations WHERE language = 'Portuguese (Brazil)';
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1;
SELECT id FROM sets ORDER BY basesetsize DESC LIMIT 1;
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1;
SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1;
SELECT count(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasfoil = 0 AND dueldeck = 'a';
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalsetsize DESC LIMIT 1;
SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.convertedmanacost DESC LIMIT 10;
SELECT originalreleasedate, format FROM cards WHERE rarity = 'mythic' ORDER BY originalreleasedate ASC LIMIT 1;
SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Baǵa';
SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND cards.name = 'Abundance' AND legalities.status = 'Legal';
SELECT format, name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(status = 'Banned') DESC LIMIT 1;
SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Battlebond';
SELECT cards.artist , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY cards.artist ORDER BY MIN(cards.artist);
SELECT status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN rulings ON cards.uuid = rulings.uuid INNER JOIN sets ON cards.id = sets.id INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE frameversion = '1997' AND artist = 'D. Alexander Gregory' AND hascontentwarning = 1 AND format = 'legacy' AND set_translations.translation = 'Wizards of the Coast';
SELECT cards.name , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecrank = 1 AND status = 'Banned';
SELECT avg(id) FROM sets WHERE releasedate BETWEEN '2012-01-01' AND '2015-12-31';
SELECT cards.artist FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'arena';
SELECT uuid FROM legalities WHERE format = 'oldschool' OR status = 'banned' OR status = 'restricted';
SELECT count(cards.id) FROM cards WHERE cards.artist = 'Matthew D. Wilson' AND cards.availability = 'paper';
SELECT rulings.text, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;
SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';
SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND set_translations.translation NOT LIKE '%Japanese%';
SELECT cards.frameversion, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned';
SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;
SELECT users.displayname FROM users WHERE year(users.creationdate) = 2011;
SELECT count(users.id) FROM users WHERE users.lastaccessdate > '2014-09-01';
SELECT users.displayname FROM users ORDER BY users.views DESC LIMIT 1;
SELECT count(*) FROM users WHERE upvotes > 100 AND downvotes > 1;
SELECT count(id) FROM users WHERE views > 10 AND year(creationdate) > 2013;
SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';
SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT ownerdisplayname FROM posts WHERE title = 'Eliciting priors from experts';
SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;
SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';
SELECT posts.answercount FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie') ORDER BY posts.answercount DESC LIMIT 1;
SELECT posthistory.userdisplayname FROM posthistory WHERE posthistory.comment = 'Examples for teaching: Correlation does not mean causation';
SELECT count(*) FROM posts WHERE owneruserid = -1 AND parentid IS NULL;
SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL;
SELECT count(DISTINCT posts.id) FROM posts JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;
SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';
SELECT body FROM posts WHERE id = (SELECT excerptpostid FROM tags WHERE tagname = 'bayesian');
SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid GROUP BY tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;
SELECT count(*) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';
SELECT count(*) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.id) DESC LIMIT 1;
SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT avg(badge_count) FROM (SELECT count(b.id) AS badge_count FROM badges b JOIN users u ON b.userid = u.id WHERE u.views > 200 GROUP BY b.userid);
SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 5;
SELECT count(votes.id) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';
SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;
SELECT id FROM badges WHERE name = 'Revival';
SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid ORDER BY comments.score DESC LIMIT 1;
SELECT count(comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;
SELECT favoritecount FROM posts WHERE id = (SELECT postid FROM comments WHERE userid = '3025' AND creationdate = '2014/4/23 20:29:39.0');
SELECT text FROM comments WHERE postid = 107829 AND id = 1;
SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END wellfinished FROM POSTS WHERE id = 23853;
SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 65041;
SELECT count(posts.owneruserid) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';
SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = '6347';
SELECT COUNT(votes.id) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';
SELECT Divide(count(posts.id), count(votes.id)) FROM posts INNER JOIN votes ON votes.postid = posts.id WHERE posts.owneruserid = '24';
SELECT posts.viewcount FROM posts WHERE posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT text FROM comments WHERE score = 17;
SELECT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost';
SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE '%thank you user93%';
SELECT text FROM comments WHERE userid = (SELECT id FROM users WHERE displayname = 'A Lion');
SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?';
SELECT comments.text FROM comments comments INNER JOIN posts posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?';
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer';
SELECT posthistory.userid FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';
SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE users.displayname = 'Vebjorn Ljosa' AND posthistory.comment = 'Edited';
SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';
SELECT text FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'Why square the difference instead of taking the absolute value in standard deviation?');
SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';
SELECT users.displayname FROM posts posts JOIN votes votes ON posts.id = votes.postid JOIN users users ON votes.userid = users.id WHERE posts.title LIKE '%variance%' AND votes.bountyamount = 50;
SELECT avg(posts.viewcount) FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = '<humor>';
SELECT count(comments.id) FROM comments WHERE comments.userid = 13;
SELECT users.id FROM users ORDER BY users.reputation DESC LIMIT 1;
SELECT users.id FROM users ORDER BY users.views ASC LIMIT 1;
SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Supporter' AND year(badges.date) = 2011;
SELECT count(userid) FROM badges WHERE count(name) > 5;
SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' OR badges.name = 'Supporter' AND users.location = 'New York';
SELECT users.id, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;
SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY users.id HAVING COUNT(posthistory.postid) = 1 AND users.views >= 1000;
SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(*) DESC LIMIT 1;
SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.location = 'india' AND badges.name = 'Teacher';
SELECT cast(sum(CASE WHEN Year(badges.date) = 2010 THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) - cast(sum(CASE WHEN Year(badges.date) = 2011 THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) FROM badges WHERE badges.name = 'Student';
SELECT posthistory.posthistorytypeid, count(DISTINCT posthistory.userid) FROM posthistory WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;
SELECT postlinks.relatedpostid , posts.viewcount FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE postlinks.postid = 61217;
SELECT posts.score, postlinks.linktypeid FROM posts JOIN postlinks ON posts.id = postlinks.postid WHERE posts.id = 395;
SELECT posts.id, posts.owneruserid FROM posts WHERE posts.score > 60;
SELECT SUM(posts.favoritecount) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.creationdate LIKE '2011%' AND posthistory.userid = 686;
SELECT AVG(users.upvotes), AVG(users.age) FROM users WHERE users.id IN (SELECT posts.owneruserid FROM posts WHERE posts.owneruserid IN (SELECT posts.owneruserid FROM posts GROUP BY posts.owneruserid HAVING count(posts.owneruserid) > 10));
SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer';
SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0';
SELECT count(*) FROM comments WHERE score > 60;
SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14.0';
SELECT count(DISTINCT posts.id) FROM posts WHERE posts.score = 10;
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id ORDER BY users.reputation DESC LIMIT 1;
SELECT reputation FROM users WHERE id IN (SELECT userid FROM badges WHERE date = '2010-07-19 19:39:08.0');
SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'Pierre');
SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY';
SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(badges.userid) FROM badges;
SELECT cast(count(badges.userid) AS REAL) * 100 / ( SELECT count(userid) FROM users ), badges.name FROM badges WHERE badges.name = 'Organizer' GROUP BY badges.name HAVING badges.userid BETWEEN 13 AND 18;
SELECT comments.score FROM comments WHERE comments.creationdate = '2010-07-19 19:19:56.0';
SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2010-07-19 19:37:33.0';
SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';
SELECT count(*) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;
SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = (SELECT min(reputation) FROM users);
SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'Sharpie';
SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter';
SELECT users.displayname FROM users WHERE users.id = 30;
SELECT count(users.id) FROM users WHERE users.location = 'New York';
SELECT count(*) FROM votes WHERE strftime('%Y', votes.creationdate) = '2010';
SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65;
SELECT displayname FROM users ORDER BY views DESC LIMIT 1;
SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) AS REAL) FROM votes;
SELECT tags.tagname FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.ownerdisplayname = 'John Salvatier';
SELECT count(*) FROM posts WHERE ownerdisplayname = 'Daniel Vassallo';
SELECT count(*) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Harlan';
SELECT posts.id FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1;
SELECT * FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' OR ownerdisplayname = 'Noah Snyder' ORDER BY viewcount DESC LIMIT 1;
SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN votes ON posts.id = votes.postid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4;
SELECT count(*) FROM comments WHERE userid IN (SELECT id FROM users WHERE displayname = 'Neil McGuigan') AND score < 60;
SELECT tags.tagname FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0;
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer';
SELECT cast(count(DISTINCT CASE WHEN tags.tagname = 'r' THEN posts.id ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.owneruserid = -1;
SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS difference FROM users INNER JOIN posts ON users.id = posts.owneruserid;
SELECT count(*) FROM badges WHERE name = 'Commentator' AND year(date) = 2014;
SELECT count(*) FROM posts WHERE posts.creaiondate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';
SELECT users.displayname , users.age FROM users WHERE users.views = ( SELECT max(views) FROM users );
SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images';
SELECT count(*) FROM comments WHERE userid = 13 AND score < 60;
SELECT posts.title , users.displayname FROM posts INNER JOIN comments ON comments.postid = posts.id INNER JOIN users ON users.id = comments.userid WHERE comments.score > 60;
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND year(badges.date) = 2011;
SELECT users.displayname , users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150;
SELECT posthistory.id, posthistory.posthistorytypeid, posthistory.creationdate FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?';
SELECT lastaccessdate , location FROM users WHERE id IN (SELECT userid FROM badges WHERE name = 'Outliers');
SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE posts.title = 'How to tell if something happened in a data set which monitors a value over time';
SELECT posthistory.postid, badges.name FROM posthistory INNER JOIN badges ON posthistory.userid = badges.userid WHERE posthistory.userdisplayname = 'Samuel' AND YEAR(posthistory.creationdate) = 2013;
SELECT ownerdisplayname FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts );
SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing';
SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?';
SELECT users.displayname FROM posts NATURAL JOIN users WHERE posts.parentid IS NOT NULL AND posts.score = (SELECT max(score) FROM posts WHERE parentid IS NOT NULL);
SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;
SELECT posts.title FROM posts ORDER BY posts.viewcount DESC LIMIT 5;
SELECT count(*) FROM tags WHERE count BETWEEN 5000 and 7000;
SELECT posts.owneruserid FROM posts ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT age FROM users ORDER BY reputation DESC LIMIT 1;
SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2011 AND bountyamount = 50;
SELECT id FROM users WHERE age = (SELECT min(age) FROM users);
SELECT SUM(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%';
SELECT cast(sum(posts.answercount) AS REAL) / 12 FROM posts WHERE YEAR(posts.creationdate) = 2010 AND posts.answercount <= 2;
SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1;
SELECT users.displayname FROM badges badges JOIN users users ON badges.userid = users.id GROUP BY badges.userid ORDER BY count(badges.name) DESC LIMIT 1;
SELECT min(votes.creationdate) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl';
SELECT creaiondate FROM posts WHERE id = (SELECT min(id) FROM posts);
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;
SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;
SELECT AVG(postid) FROM votes WHERE userid IN (SELECT id FROM users WHERE age = (SELECT max(age) FROM users));
SELECT users.displayname FROM users WHERE users.reputation = ( SELECT max(reputation) FROM users );
SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000;
SELECT users.displayname FROM users WHERE users.age BETWEEN 19 AND 65;
SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;
SELECT id , title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1;
SELECT id , title FROM posts ORDER BY score DESC LIMIT 1;
SELECT AVG(score) FROM posts WHERE ownerdisplayname = 'Stephen Turner';
SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND YEAR(posts.creationdate) = 2011;
SELECT posts.id, posts.ownerdisplayname FROM posts WHERE year(posts.creaiondate) = 2010 ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT percentage FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE YEAR(posts.creationdate) = 2011 AND users.reputation > 1000;
SELECT count(id) FROM users WHERE age BETWEEN 13 and 18;
SELECT SUM(posts.viewcount) FROM posts WHERE posts.text = 'Computer Game Datasets';
SELECT sum(viewcount) FROM posts WHERE viewcount > (SELECT AVG(viewcount) FROM posts);
SELECT count(id) FROM comments WHERE score = (SELECT MAX(score) FROM comments);
SELECT count(posts.id) FROM posts WHERE posts.viewcount > 35000 AND posts.commentcount = 0;
SELECT users.displayname, users.location FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.id = 183;
SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' ) ORDER BY date DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000;
SELECT SUBTRACT(date from stats_badges, creationdate) FROM users WHERE displayname = 'Zolomon';
SELECT MAX(creationdate) FROM users;
SELECT comments.text, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON comments.userid = users.id WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10;
SELECT count(*) FROM badges WHERE name = 'Citizen Patrol';
SELECT count(posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'careers';
SELECT users.reputation, users.views FROM users WHERE users.displayname = 'Jarrod Dixon';
SELECT sum(posts.commentcount), sum(posts.answercount) FROM posts WHERE posts.title = 'Clustering 1D data';
SELECT users.creationdate FROM users WHERE users.displayname = 'IrishStat';
SELECT count(votes.postid) FROM votes WHERE votes.bountyamount >= 30;
SELECT COUNT(stats_posts.id) AS percentage FROM stats_posts WHERE stats_posts.score > 50 AND stats_posts.reputation = (SELECT MAX(reputation) FROM stats_posts);
SELECT count(*) FROM posts WHERE posts.score < 20;
SELECT count(*) FROM tags WHERE tags.id < 15 AND tags.count <= 20;
SELECT tags.excerptpostid , tags.wikipostid FROM tags WHERE tags.tagname = 'sample';
SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)';
SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.comment LIKE '%regression%' AND posts.title LIKE '%linear regression%';
SELECT MAX(score) FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 and 150);
SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';
SELECT count(DISTINCT posts.id) FROM comments comments JOIN posts posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;
SELECT count(DISTINCT comments.id) FROM posts posts JOIN comments comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0;
SELECT SUM(users.age) FROM comments JOIN users ON comments.userid = users.id WHERE comments.score = 0 AND users.age = 40;
SELECT comments.postid, comments.text FROM comments JOIN posts ON comments.postid = posts.id WHERE posts.title = 'Group differences on a five point Likert item';
SELECT users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'R is also lazy evaluated.';
SELECT text FROM comments WHERE userid IN (SELECT id FROM users WHERE displayname = 'Harvey Motulsky');
SELECT DISTINCT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0;
SELECT percentage FROM (SELECT COUNT(userid) AS percentage FROM users WHERE upvotes = 0 AND score BETWEEN 5 AND 10) AS t1;
SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man';
SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';
SELECT count(superhero.superhero_name) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;
SELECT full_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) > 15 );
SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';
SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';
SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;
SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';
SELECT skin_colour_id FROM superhero GROUP BY skin_colour_id ORDER BY count(*) DESC LIMIT 1;
SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength'));
SELECT count(*) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics';
SELECT publisher.publisher_name FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;
SELECT count(superhero_name) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN colour colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';
SELECT superhero_name FROM superhero WHERE id = (SELECT MIN(attribute_value) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence');
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';
SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;
SELECT superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY count(superhero_name) DESC LIMIT 1;
SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS calculation FROM superhero superhero JOIN alignment alignment ON superhero.alignment_id = alignment.id JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics') FROM publisher;
SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';
SELECT AVG(attribute_value) FROM hero_attribute;
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.id = 75;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Deathlok';
SELECT avg(weight_kg) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female');
SELECT superpower.power_name FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male';
SELECT superhero_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien');
SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'No colour' AND superhero.height_cm BETWEEN 170 AND 190;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56;
SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God';
SELECT count(*) FROM superhero WHERE alignment_id = 'Bad';
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;
SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.hair_colour_id = colour.id WHERE superhero.height_cm = 185 AND superhero.race_id = 1;
SELECT colour.colour FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT cast(sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.height_cm BETWEEN 150 AND 180;
SELECT superhero.superhero_name FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT avg(weight_kg) * 0.79 FROM superhero) AND superhero.weight_kg IS NOT NULL;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1;
SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination';
SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1;
SELECT count(*) FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'stealth');
SELECT full_name FROM superhero WHERE id = (SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') ORDER BY attribute_value DESC LIMIT 1);
SELECT AVG(COUNT(superhero.id)) FROM superhero WHERE skin_colour_id = 1;
SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.superhero_name FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;
SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Abraham Sapien';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';
SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero_name , publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id;
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';
SELECT SUM(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) / COUNT(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) * 100 FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN gender ON superhero.gender_id = gender.id;
SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';
SELECT gender.gender FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id WHERE superhero.superhero_name = 'Agent 13';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';
SELECT count(hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo';
SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon';
SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';
SELECT superhero_name FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Black') AND hair_colour_id IN (SELECT id FROM colour WHERE colour = 'Black');
SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Gold';
SELECT full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';
SELECT count(hero_id) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'));
SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';
SELECT SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics') FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT sum(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - sum(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS difference FROM superhero;
SELECT avg(superhero.height_cm) AS average FROM superhero;
SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';
SELECT count(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT superhero_name FROM superhero WHERE id = (SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY attribute_value DESC LIMIT 1);
SELECT count(id) FROM superhero WHERE alignment_id = 3;
SELECT superhero.superhero_name , attribute.attribute_name , hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';
SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Hawkman' OR superhero_name = 'Karate Kid' OR superhero_name = 'Speedy');
SELECT count(*) FROM superhero WHERE publisher_id = 1;
SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN superhero.superhero_name ELSE 0 END) AS REAL) * 100 / count(superhero.superhero_name) AS percentage FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE colour.id = 7;
SELECT cast(sum(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;
SELECT superpower.id FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'cryokinesis';
SELECT superhero.superhero_name FROM superhero WHERE superhero.id = 294;
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';
SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE full_name = 'Helen Parr'));
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;
SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;
SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence';
SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';
SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT avg(attribute_value) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.alignment_id = 3;
SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.skin_colour_id WHERE superhero.id = 100;
SELECT count(superhero.id) FROM superhero WHERE superhero.alignment_id = 1 AND superhero.gender_id = 2;
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT race.race FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'blue' AND gender.gender = 'male';
SELECT SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2) FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id INNER JOIN alignment ON superhero.alignment_id = alignment.id;
SELECT SUM(colour.id = 7) - SUM(colour.id = 1) FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;
SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';
SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';
SELECT count(*) FROM superhero superhero JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green' AND superhero.alignment = 'Bad';
SELECT count(id) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND gender_id IN (SELECT id FROM gender WHERE gender = 'Female');
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name;
SELECT gender.gender FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';
SELECT superhero.superhero_name FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT avg(superhero.height_cm) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT COUNT(superhero.id) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;
SELECT SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics') FROM publisher;
SELECT attribute.attribute_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;
SELECT superhero.superhero_name FROM superhero WHERE superhero.full_name = 'Charles Chandler';
SELECT (count(CASE WHEN gender.gender = 'Female' THEN 1 END) * 100.0 / count(*)) AS percentage FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas';
SELECT (SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics') * 100.0 / COUNT(publisher_name = 'Marvel Comics')) AS percentage FROM superhero superhero INNER JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT count(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT hero_attribute.hero_id FROM hero_attribute ORDER BY hero_attribute.attribute_value ASC LIMIT 1;
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Brown');
SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy';
SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;
SELECT avg(superhero.height_cm) FROM superhero WHERE superhero.alignment_id = 1 AND superhero.gender_id = 1;
SELECT superhero.id FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.height_cm > 0.8 * (SELECT avg(height_cm) FROM superhero);
SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.number = 1 AND races.raceid = 20;
SELECT drivers.surname FROM laptimes laptimes JOIN drivers drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.raceid = 19 AND laptimes.lap = 2 AND laptimes.milliseconds = (SELECT MIN(milliseconds) FROM laptimes WHERE laptimes.raceid = 19 AND laptimes.lap = 2);
SELECT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.location = 'Shanghai';
SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT DISTINCT circuits.name FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany';
SELECT constructorstandings.position FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid WHERE constructors.name = 'Renault';
SELECT count(DISTINCT races.raceid) FROM races, seasons WHERE races.year = seasons.year AND seasons.year = 2010 AND races.circuitid NOT IN (SELECT circuits.circuitid FROM circuits WHERE circuits.country IN ('Asia', 'Europe'));
SELECT DISTINCT circuits.name FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain';
SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix';
SELECT * FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';
SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';
SELECT lat, lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Abu Dhabi Grand Prix';
SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;
SELECT q1 FROM qualifying WHERE qualifyid = 354;
SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40';
SELECT driverid FROM qualifying WHERE raceid = 903 AND q3 LIKE 'M:SS%';
SELECT count(DISTINCT drivers.driverid) FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;
SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;
SELECT count(drivers.driverid) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.date = '2015/11/29';
SELECT drivers.forename FROM drivers WHERE drivers.driverid IN (SELECT results.driverid FROM results WHERE results.raceid = 592) ORDER BY drivers.dob DESC LIMIT 1;
SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN driverstandings ON laptimes.raceid = driverstandings.raceid WHERE laptimes.time LIKE '0:01:27' AND driverstandings.raceid = 161;
SELECT nationality FROM drivers WHERE driverid = (SELECT driverid FROM results WHERE raceid = 933 ORDER BY fastestlapspeed DESC LIMIT 1);
SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';
SELECT constructors.url FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructorresults.raceid = 9 ORDER BY constructorresults.points DESC LIMIT 1;
SELECT q1 FROM qualifying WHERE driverid = 345 AND raceid = 345;
SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.q2 = '0:01:15' AND races.raceid = '347';
SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 45 AND qualifying.q3 LIKE '0:01:33%';
SELECT time FROM results WHERE driverid = 743 AND raceid = 743;
SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE results.position = 2 AND races.year = 2006;
SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;
SELECT count(laptimes.driverid) FROM laptimes laptimes JOIN drivers drivers ON laptimes.driverid = drivers.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE races.year = 2015 AND races.date = '2015-11-29';
SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid JOIN races races ON laptimes.raceid = races.raceid JOIN results results ON races.raceid = results.raceid JOIN pitstops pitstops ON races.raceid = pitstops.raceid WHERE races.raceid = 872 GROUP BY drivers.driverid ORDER BY MAX(drivers.dob);
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.raceid = 348 ORDER BY laptimes.time ASC LIMIT 1;
SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results);
SELECT DIVIDE(SUBTRACT(fastestlapspeed(raceid = 853), (fastestlapspeed (raceid = 854)) * 100 , (fastestlapspeed(raceid = 853))), 100) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.driverref = 'resta' AND results.raceid = 853;
SELECT drivers.driverid, DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16' GROUP BY drivers.driverid;
SELECT MIN(races.year) FROM races WHERE races.name = 'Singapore Grand Prix';
SELECT count(raceid) FROM races WHERE year = 2005;
SELECT name FROM races WHERE year = (SELECT min(year) FROM races) AND month = (SELECT min(month) FROM races);
SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;
SELECT year FROM races GROUP BY year ORDER BY count(raceid) DESC LIMIT 1;
SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year <> 2000;
SELECT circuits.country, circuits.location FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1;
SELECT max(seasons.year) FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';
SELECT count(DISTINCT races.year) FROM races, circuits, seasons WHERE races.circuitid = circuits.circuitid AND races.year = seasons.year AND circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kindom';
SELECT drivers.surname FROM drivers JOIN driverstandings ON drivers.driverid = driverstandings.driverid JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2010 ORDER BY driverstandings.position;
SELECT drivers.forename || ' ' || drivers.surname AS fullname FROM driverstandings driverstandings JOIN drivers drivers ON driverstandings.driverid = drivers.driverid WHERE driverstandings.points = (SELECT max(points) FROM driverstandings);
SELECT drivers.driverref, driverstandings.points FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2017 AND races.name = 'Chinese Grand Prix' ORDER BY driverstandings.points DESC LIMIT 3;
SELECT drivers.forename, drivers.surname, races.name FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(milliseconds) FROM laptimes);
SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;
SELECT cast(count(raceid) AS REAL) * 100 / (SELECT count(raceid) FROM driverstandings WHERE driverid = (SELECT driverid FROM drivers WHERE surname = 'Hamilton') AND raceid IN (SELECT raceid FROM races WHERE year >= 2010)) FROM races WHERE circuitid = (SELECT circuitid FROM circuits WHERE name = 'f1');
SELECT drivers.forename, drivers.surname, drivers.nationality, MAX(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid GROUP BY drivers.forename, drivers.surname, drivers.nationality ORDER BY MAX(results.points) DESC LIMIT 1;
SELECT year(CURRENT_TIMESTAMP) - year(drivers.dob) AS age, drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob ASC LIMIT 1;
SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 AND races.name = 'f1' GROUP BY circuits.name HAVING COUNT(*) = 4;
SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006;
SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2005 AND MONTH(races.date) = 9;
SELECT races.name FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND driverstandings.position < 20;
SELECT count(*) FROM driverstandings, drivers, races, circuits WHERE driverstandings.driverid = drivers.driverid AND driverstandings.raceid = races.raceid AND races.circuitid = circuits.circuitid AND drivers.forename = 'Michael' AND drivers.code = 'WIN' AND circuits.circuitref = 'sepang';
SELECT races.name, races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.milliseconds = (SELECT min(milliseconds) FROM laptimes WHERE laptimes.driverid = 452);
SELECT avg(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2000 AND drivers.forename = 'Eddie' AND drivers.surname = 'Irvine';
SELECT races.name , results.points FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year ASC LIMIT 1;
SELECT * FROM races WHERE year = 2017 ORDER BY date;
SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid GROUP BY races.raceid ORDER BY count(laptimes.lap) DESC LIMIT 1;
SELECT COUNT(races.name) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany' AND races.name = 'European Grand Prix';
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';
SELECT CASE WHEN max(lat) THEN circuitref END FROM circuits;
SELECT circuits.circuitref FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';
SELECT country FROM circuits WHERE alt = (SELECT max(alt) FROM circuits);
SELECT count(*) FROM drivers WHERE code IS NULL;
SELECT drivers.nationality FROM drivers WHERE drivers.dob = (SELECT max(dob) FROM drivers);
SELECT drivers.surname FROM drivers INNER JOIN constructors ON drivers.nationality = constructors.nationality WHERE constructors.nationality = 'italian';
SELECT drivers.url FROM drivers WHERE drivers.driverref = 'davidson';
SELECT drivers.driverref FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'silverstone';
SELECT * FROM races WHERE circuitid IN (SELECT circuitid FROM circuits WHERE circuitref = 'silverstone');
SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.location = 'Abu Dhabi';
SELECT count(*) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT races.date FROM races WHERE races.circuitid = 23 AND races.name = 'Formula_1';
SELECT races.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.name = 'Spanish Grand Prix';
SELECT min(laptimes.time) FROM laptimes laptimes JOIN drivers drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.milliseconds = (SELECT max(milliseconds) FROM laptimes);
SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2007 AND results.rank = 1;
SELECT races.name FROM drivers INNER JOIN races ON drivers.driverid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT races.name FROM drivers drivers INNER JOIN results results ON drivers.driverid = results.driverid INNER JOIN races races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;
SELECT max(fastestlapspeed) FROM results WHERE raceid = (SELECT raceid FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009);
SELECT races.year FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton';
SELECT positionorder FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceid = (SELECT raceid FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008);
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE results.grid = 4 AND races.year = 1989 AND races.name = 'Australian Grand Prix';
SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;
SELECT time FROM laptimes WHERE driverid = (SELECT driverid FROM drivers WHERE driverref = 'hamilton' AND forename = 'Lewis') AND raceid = (SELECT raceid FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') ORDER BY milliseconds LIMIT 1;
SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.rank = 2 AND races.name = 'Chinese Grand Prix' AND races.year = 2008;
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = '2008' AND results.position = '1';
SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid JOIN seasons seasons ON races.year = seasons.year WHERE seasons.year = 2008 AND drivers.nationality = 'British';
SELECT COUNT(results.driverid) FROM results JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix';
SELECT sum(results.points) FROM results JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.driverref = 'hamilton';
SELECT avg(laptimes.milliseconds / 1000) FROM laptimes laptimes JOIN drivers drivers ON laptimes.driverid = drivers.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT cast(count(CASE WHEN laptimes.time IS NOT NULL THEN laptimes.raceid END) AS REAL) / count(laptimes.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';
SELECT (incremental_time - champion_time) * 100 / (incremental_time + champion_time) * 100 AS percentage FROM (SELECT results.time AS incremental_time, races.time AS champion_time FROM results JOIN races ON results.raceid = races.raceid WHERE results.resultid = 2008 AND races.year = 2008);
SELECT count(DISTINCT circuits.circuitid) FROM circuits WHERE circuits.country = 'Australia' AND circuits.location = 'Adelaide';
SELECT lat, lng FROM circuits WHERE country = 'USA';
SELECT count(*) FROM drivers WHERE nationality = 'British' AND year(dob) > 1980;
SELECT max(constructors.nationality) FROM constructors WHERE nationality = 'British';
SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid ORDER BY constructorstandings.points DESC LIMIT 1;
SELECT constructors.name FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE races.raceid = 291 AND constructorresults.points = 0;
SELECT COUNT(*) FROM constructors constructors JOIN constructorresults constructorresults ON constructors.constructorid = constructorresults.constructorid JOIN constructorstandings constructorstandings ON constructors.constructorid = constructorstandings.constructorid JOIN results results ON constructorresults.raceid = results.raceid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructors.nationality = 'Japanese' AND COUNT(races.raceid) = 2;
SELECT constructorid FROM constructorstandings WHERE position = 1;
SELECT count(DISTINCT constructors.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.raceid = results.raceid WHERE constructors.nationality = 'French' AND results.laps > 50;
SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year BETWEEN 2007 AND 2009 AND results.time IS NOT NULL;
SELECT year, AVG(milliseconds / 1000) AS avg_time FROM results WHERE milliseconds IS NOT NULL AND year < 1975 GROUP BY year;
SELECT forename, surname FROM drivers WHERE year(dob) > 1975 AND driverid IN (SELECT driverid FROM driverstandings WHERE position = 2);
SELECT count(drivers.driverid) FROM drivers WHERE drivers.nationality = 'Italian' AND drivers.number IS NULL;
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.milliseconds = (SELECT min(laptimes.milliseconds) FROM laptimes);
SELECT fastestlap FROM results WHERE raceid IN (SELECT raceid FROM races WHERE year = 2009) ORDER BY fastestlap LIMIT 1;
SELECT avg(results.fastestlapspeed) FROM results results JOIN races races ON results.raceid = races.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT r.name, r.year FROM races r JOIN results r2 ON r.raceid = r2.raceid WHERE r2.milliseconds = (SELECT min(milliseconds) FROM results WHERE milliseconds IS NOT NULL);
SELECT COUNT(driverid) FROM drivers WHERE year(dob) <1985 AND laps >50;
SELECT count(drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 7200;
SELECT code FROM drivers WHERE nationality = 'American';
SELECT raceid FROM races WHERE year = 2009;
SELECT count(results.driverid) FROM results WHERE results.raceid LIKE 18;
SELECT count(driverid) FROM drivers WHERE nationality = 'Dutch';
SELECT drivers.driverref FROM drivers WHERE drivers.forename = 'Robert' AND drivers.surname = 'Kubica';
SELECT count(*) FROM drivers WHERE nationality = 'British' AND year(dob) = 1980;
SELECT drivers.driverref FROM drivers WHERE drivers.nationality = 'German' AND year(drivers.dob) BETWEEN 1980 AND 1990 ORDER BY laptimes.milliseconds ASC LIMIT 3;
SELECT driverref FROM drivers WHERE nationality = 'German' AND year(dob) = (SELECT min(year(dob)) FROM drivers);
SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 1971 AND results.fastestlaptime IS NOT NULL;
SELECT * FROM drivers WHERE nationality = 'Spanish' AND year(dob) < 1982 ORDER BY Max(time) DESC LIMIT 10;
SELECT year FROM races WHERE raceid = (SELECT raceid FROM results WHERE fastestlaptime = (SELECT max(fastestlaptime) FROM results));
SELECT races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid GROUP BY races.year ORDER BY Max(laptimes.time) ASC LIMIT 1;
SELECT driverid FROM results WHERE laps = 1 ORDER BY time ASC LIMIT 5;
SELECT count(resultid) FROM results WHERE statusid = 2 AND time IS NOT NULL AND raceid > 50 AND raceid < 100;
SELECT count(circuitid) FROM circuits WHERE country = 'Austria';
SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY count(raceid) DESC LIMIT 1;
SELECT driverref, nationality, dob FROM drivers WHERE driverid IN (SELECT driverid FROM qualifying WHERE q2 IS NOT NULL AND raceid = 23);
SELECT drivers.surname, races.date, races.time FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid JOIN races races ON qualifying.raceid = races.raceid WHERE races.date = (SELECT min(races.date) FROM races races JOIN qualifying qualifying ON races.raceid = qualifying.raceid WHERE qualifying.driverid = drivers.driverid);
SELECT count(status.status = 'Puncture') FROM drivers drivers, status status WHERE drivers.nationality = 'American' AND status.status = 'Puncture';
SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorstandings.points DESC LIMIT 1;
SELECT t.url FROM ( SELECT constructors.url, sum(constructorstandings.wins) FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY sum(constructorstandings.wins) DESC LIMIT 1 ) AS t;
SELECT MAX(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.circuitid = 1 AND laptimes.lap = 3;
SELECT MIN(laptimes.milliseconds) FROM laptimes WHERE laptimes.lap = 1;
SELECT avg(laptimes.milliseconds) FROM laptimes laptimes INNER JOIN drivers drivers ON laptimes.driverid = drivers.driverid INNER JOIN races races ON laptimes.raceid = races.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND laptimes.position < 11;
SELECT drivers.forename, drivers.surname FROM drivers WHERE year(dob) BETWEEN 1980 AND 1985 AND drivers.nationality = 'German' GROUP BY drivers.forename, drivers.surname ORDER BY avg(duration) ASC LIMIT 3;
SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Canadian Grand Prix';
SELECT constructors.constructorref, constructors.url FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND results.resultid = 2009;
SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND year(drivers.dob) BETWEEN '1981' AND '1991';
SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;
SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';
SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorresults.points DESC LIMIT 1;
SELECT avg(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Turkish Grand Prix' AND drivers.forename = 'Lewis';
SELECT cast(count(races.raceid) AS REAL) / count(DISTINCT strftime('%Y', races.date)) FROM races WHERE strftime('%Y', races.date) BETWEEN '2000' AND '2010';
SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1;
SELECT sum(CASE WHEN driverstandings.position = 91 AND driverstandings.wins = 1 THEN 1 ELSE 0 END) FROM driverstandings;
SELECT name FROM races WHERE raceid = (SELECT raceid FROM results WHERE fastestlaptime = (SELECT MIN(fastestlaptime) FROM results));
SELECT location, country FROM circuits WHERE circuitid IN (SELECT circuitid FROM races WHERE date = (SELECT max(date) FROM races));
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE qualifying.qualifyid = 1 AND races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit' AND qualifying.position = 1;
SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN races ON drivers.driverid = races.raceid ORDER BY drivers.dob LIMIT 1;
SELECT count(statusid) FROM results WHERE raceid = ( SELECT raceid FROM races WHERE name = 'Canadian Grand Prix' ) AND statusid = 3;
SELECT drivers.forename, drivers.surname, driverstandings.wins FROM drivers JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.dob = (SELECT MIN(dob) FROM drivers);
SELECT max(duration) FROM pitstops;
SELECT MIN(laptimes.time) FROM laptimes WHERE laptimes.raceid IN (SELECT races.raceid FROM races WHERE races.circuitid IN (SELECT circuits.circuitid FROM circuits WHERE circuits.circuitref = 'sepang'));
SELECT max(pitstops.duration) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton';
SELECT pitstops.lap FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.driverref = 'hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT duration FROM pitstops JOIN drivers ON pitstops.driverid = drivers.driverid JOIN races ON pitstops.raceid = races.raceid WHERE races.year = 2011;
SELECT laptimes.time FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND races.name = 'Formula_1';
SELECT drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN laptimes ON driverstandings.driverid = laptimes.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes WHERE laptimes.raceid = races.raceid) AND races.round = 1 ORDER BY driverstandings.points DESC LIMIT 20;
SELECT position FROM laptimes WHERE driverid = (SELECT driverid FROM drivers WHERE driverref = 'hamilton') AND lap = (SELECT MIN(lap) FROM laptimes WHERE driverid = (SELECT driverid FROM drivers WHERE driverref = 'hamilton'));
SELECT MAX(laptimes.milliseconds) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix';
SELECT * FROM laptimes WHERE raceid IN (SELECT raceid FROM races WHERE circuitid IN (SELECT circuitid FROM circuits WHERE country = 'Italy'));
SELECT races.name FROM races INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT MAX(laptimes.milliseconds) FROM laptimes WHERE laptimes.raceid = races.raceid);
SELECT pitstops.duration FROM laptimes INNER JOIN pitstops ON laptimes.raceid = pitstops.raceid AND laptimes.driverid = pitstops.driverid AND laptimes.lap = pitstops.lap WHERE laptimes.raceid = 841 AND laptimes.driverid = 1;
SELECT circuits.lat , circuits.lng FROM circuits INNER JOIN laptimes ON laptimes.raceid = circuits.circuitid WHERE laptimes.time = '1:29.488';
SELECT avg(pitstops.milliseconds) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.driverref = 'hamilton';
SELECT cast(avg(laptimes.milliseconds) AS REAL) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT player.player_api_id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT player_name FROM player WHERE height = (SELECT max(height) FROM player);
SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT min(potential) FROM player_attributes);
SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65 AND player_attributes.attacking_work_rate = 'low';
SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.crossing DESC LIMIT 5;
SELECT l.name FROM league l WHERE l.id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));
SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;
SELECT team.team_long_name FROM match JOIN team ON match.away_team_api_id = team.team_api_id JOIN league ON match.league_id = league.id JOIN country ON league.country_id = country.id WHERE league.name = 'Scotland Premier League' AND country.name = 'Scotland' AND match.season = '2009/2010' GROUP BY team.team_long_name ORDER BY (away_team_goal - home_team_goal) DESC LIMIT 1;
SELECT buildupplayspeed FROM team_attributes ORDER BY buildupplayspeed DESC LIMIT 4;
SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY SUM(match.home_team_goal = match.away_team_goal) DESC LIMIT 1;
SELECT player.id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.sprint_speed >= 97 AND YEAR(player_attributes.date) >= '2013' AND YEAR(player_attributes.date) <= '2015';
SELECT league.name, count(match.id) FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.id ORDER BY count(match.id) DESC LIMIT 1;
SELECT avg(height) FROM player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT player_attributes.player_api_id FROM player_attributes WHERE substr(player_attributes.date,1,4) = '2010' ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT team.team_fifa_api_id FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed > 50 AND team_attributes.buildupplayspeed < 60;
SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassingclass = 'Long';
SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE cast(player.birthday AS DATE) BETWEEN '1987' AND '1992';
SELECT league.name FROM league JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY SUM(match.home_team_goal + match.away_team_goal) ASC LIMIT 5;
SELECT avg(long_shots) FROM player_attributes WHERE player_fifa_api_id = 218353;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY AVG(heading_accuracy) DESC LIMIT 10;
SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE buildupplaydribblingclass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' GROUP BY team.team_long_name HAVING SUM(chancecreationpassing) < (SELECT AVG(chancecreationpassing) FROM team_attributes) ORDER BY chancecreationpassing DESC;
SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2009/2010' GROUP BY league.name HAVING AVG(home_team_goal) > AVG(away_team_goal);
SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers';
SELECT * FROM player WHERE substr(birthday,1,7) = '1970-10';
SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Franco Zennaro';
SELECT team_attributes.buildupplaypositioningclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag';
SELECT heading_accuracy FROM player_attributes WHERE player_api_id = 505942 AND date = '2014-09-18 00:00:00';
SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', date) = '2011';
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND country.name = 'Scotland';
SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE birthday = (SELECT max(birthday) FROM player));
SELECT * FROM player_attributes ORDER BY potential DESC;
SELECT count(DISTINCT player.player_api_id) FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player.weight < 130;
SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky';
SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'David Wilson';
SELECT player.birthday FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands';
SELECT avg(match.home_team_goal) AS average_home_team_goal FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_api_id, player.player_name ORDER BY avg(finishing) DESC LIMIT 1;
SELECT player.player_name FROM player WHERE player.height > 180;
SELECT count(*) FROM player WHERE strftime('%Y', birthday) = '1990';
SELECT count(player.id) FROM player INNER JOIN team_attributes ON player.id = team_attributes.id WHERE player.player_name LIKE 'Adam%' AND team_attributes.buildupplayspeedclass = 'Fast' AND player.weight > 170;
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010';
SELECT potential FROM player_attributes WHERE player_api_id = 2625;
SELECT * FROM player_attributes WHERE preferred_foot = 'left';
SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';
SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'CLB';
SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplaypassing > 70;
SELECT avg(overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 170;
SELECT player_name FROM player ORDER BY height ASC LIMIT 1;
SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A';
SELECT team.team_short_name FROM team_attributes team_attributes JOIN team team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran';
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';
SELECT team.team_short_name FROM team INNER JOIN match ON team.team_api_id = match.home_team_api_id WHERE match.home_team_goal = 10;
SELECT * FROM player_attributes WHERE balance = (SELECT max(balance) FROM player_attributes WHERE balance IS NOT NULL) AND potential = 61;
SELECT SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')) FROM player_attributes;
SELECT team.team_long_name FROM team WHERE team.team_short_name = 'GEN';
SELECT player_name FROM player ORDER BY birthday LIMIT 1;
SELECT player_name FROM player WHERE height = (SELECT MAX(height) FROM player);
SELECT count(DISTINCT player_attributes.player_api_id) FROM player_attributes player_attributes WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low';
SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League';
SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany';
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT count(DISTINCT player_attributes.id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player.birthday) < '1986' AND player_attributes.defensive_work_rate = 'high';
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 1;
SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';
SELECT count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;
SELECT count(match.id) FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Belgium' AND match.season = '2008/2009';
SELECT long_passing FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE birthday = (SELECT min(birthday) FROM player));
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND SUBSTR(`date`, 1, 7) = '2009-04';
SELECT league.name FROM league WHERE league.id IN (SELECT league_id FROM match WHERE season = '2008/2009' GROUP BY league_id HAVING count(*) = (SELECT max(match_count) FROM (SELECT count(*) AS match_count FROM match WHERE season = '2008/2009' GROUP BY league_id)));
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player.birthday) < '1986';
SELECT (overall_rating - (SELECT overall_rating FROM player_attributes WHERE player_name = 'Paulin Puel')) / (SELECT overall_rating FROM player_attributes WHERE player_name = 'Paulin Puel') * 100 FROM player_attributes WHERE player_name = 'Ariel Borysiuk';
SELECT avg(buildupplayspeed) FROM team_attributes WHERE team_long_name = 'Heart of Midlothian';
SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino';
SELECT SUM(crossing) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennox');
SELECT team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1;
SELECT preferred_foot FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Abdou Diallo');
SELECT MAX(overall_rating) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Dorlan Pabon');
SELECT avg(match.away_team_goal) FROM match JOIN team ON match.away_team_api_id = team.team_api_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY player.birthday ASC LIMIT 1;
SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Mooy') AND date LIKE '2016-02-04%';
SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00';
SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date LIKE '2015-05-01%';
SELECT defensive_work_rate FROM player_attributes WHERE `date` = '2013-02-22 00:00:00' AND player_name = 'Kevin Berigaud';
SELECT player_attributes.date FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1;
SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2012-02-22';
SELECT player_attributes.dribbling FROM player_attributes INNER JOIN team_attributes ON player_attributes.id = team_attributes.id INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10 00:00:00';
SELECT defenceteamwidthclass FROM team_attributes WHERE team_long_name = 'FC Lorient' AND date LIKE '2010-02-22%';
SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20 00:00:00';
SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00';
SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%';
SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.date BETWEEN '2007-02-22' AND '2016-04-21';
SELECT SUBTRACT(player_name = 'Landon Donovan' overall_rating, player_name = 'Jordan Bowery' overall_rating) / player_name = 'Landon Donovan' overall_rating * 100 FROM player_attributes WHERE date = '2013/7/12';
SELECT player_name FROM player ORDER BY height DESC LIMIT 1;
SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10;
SELECT player_name FROM player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34;
SELECT count(match.home_team_goal) FROM player INNER JOIN match ON player.player_api_id = match.home_player_1 WHERE player.player_name = '<NAME>';
SELECT SUM(away_team_goal) FROM match WHERE away_player_11 = 46552 AND away_player_10 = 38383;
SELECT sum(match.home_team_goal) FROM player INNER JOIN match ON player.player_api_id = match.home_player_1 WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(player.birthday)) < 31;
SELECT player_name FROM player WHERE id = (SELECT id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes));
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.potential = (SELECT max(potential) FROM player_attributes);
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';
SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE finishing = 1) ORDER BY birthday DESC LIMIT 1;
SELECT player.player_name FROM player INNER JOIN country ON player.id = country.id WHERE country.name = 'Belgium';
SELECT country_id FROM player_attributes WHERE vision > 89;
SELECT country.name FROM country INNER JOIN player ON country.id = player.country_id GROUP BY country.name ORDER BY AVG(player.weight) DESC LIMIT 1;
SELECT team_long_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE buildupplayspeedclass = 'Slow');
SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe';
SELECT avg(player.height) FROM player INNER JOIN country ON player.id = country.id WHERE country.name = 'Italy';
SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;
SELECT count(*) FROM player WHERE birthday > '1990' AND player_name LIKE 'Aaron%';
SELECT jumping FROM player_attributes WHERE id = 6 OR id = 23;
SELECT player_api_id FROM player_attributes WHERE potential = (SELECT MIN(potential) FROM player_attributes) AND preferred_foot = 'right' LIMIT 5;
SELECT MAX(crossing) FROM player_attributes WHERE preferred_foot = 'left';
SELECT cast(count(CASE WHEN stamina > 80 AND strength > 80 THEN id ELSE NULL END) AS REAL) * 100 / count(id) FROM player_attributes;
SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa';
SELECT home_team_goal, away_team_goal FROM match WHERE league_id = (SELECT id FROM league WHERE name = 'Belgium Jupiler League') AND date LIKE '2008-09-24%';
SELECT player_attributes.sprint_speed , player_attributes.agility , player_attributes.acceleration FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Alexis Blin';
SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';
SELECT count(*) FROM match WHERE season = '2015/2016' AND league_id = 1729;
SELECT max(home_team_goal) FROM match WHERE league_id IN (SELECT id FROM league WHERE name = 'Netherlands Eredivisie');
SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);
SELECT name FROM league WHERE id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id ORDER BY COUNT(id) DESC LIMIT 4);
SELECT team_long_name FROM team WHERE team_api_id IN (SELECT away_team_api_id FROM match WHERE away_team_goal = (SELECT max(away_team_goal) FROM match));
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT (count(DISTINCT CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN player.player_api_id END) * 100.0 / count(DISTINCT player.player_api_id)) AS percentage FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;
SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 'in-patient' WHEN sex = 'M' AND admission = '-' THEN 'outpatient' END AS type , COUNT(id) AS count FROM patient WHERE sex = 'M' GROUP BY type;
SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE sex = 'F')) AS female_percentage FROM patient WHERE year(birthday) > '1930' AND sex = 'F';
SELECT count(DISTINCT patient.id) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31' AND admission = '+';
SELECT (SELECT count(id) FROM patient WHERE diagnosis = 'SLE' AND admission = '+') / (SELECT count(id) FROM patient WHERE diagnosis = 'SLE' AND admission = '-') FROM patient WHERE diagnosis = 'SLE';
SELECT diagnosis FROM patient WHERE id = 30609;
SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE examination.id = 163109;
SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > '500';
SELECT id, age FROM patient WHERE rvvt = '+';
SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2;
SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';
SELECT patient.id, patient.sex, patient.diagnosis FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5;
SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient WHERE sex = 'F')) AS percentage FROM laboratory WHERE tp < '6.0' OR tp > '8.5';
SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND SUBTRACT(year(current_timestamp), year(patient.birthday)) >= '50';
SELECT count(id) FROM patient WHERE sex = 'F' AND year(description) = '1997' AND admission = '-';
SELECT SUBTRACT(YEAR(`first date`),YEAR(birthday)) FROM patient WHERE `first date` = (SELECT min(`first date`) FROM patient);
SELECT count(DISTINCT patient.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = '1' AND patient.sex = 'F' AND strftime('%Y', examination.`examination date`) = '1997';
SELECT MAX(year(birthday)) - MIN(year(birthday)) FROM patient WHERE patient.tg >= 200;
SELECT symptoms, diagnosis FROM examination WHERE id IN (SELECT id FROM patient WHERE birthday = (SELECT min(birthday) FROM patient)) AND symptoms IS NOT NULL;
SELECT EXTRACT(YEAR FROM examination.`examination date`) FROM examination JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1998-01-01' AND '1998-12-31';
SELECT year(`first date`), year(birthday) FROM patient WHERE diagnosis = 'SJS';
SELECT (count(DISTINCT CASE WHEN patient.sex = 'M' THEN laboratory.id END) * 1.0 / count(DISTINCT CASE WHEN patient.sex = 'F' THEN laboratory.id END)) AS ratio FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.ua <= '8.0' OR laboratory.ua <= '6.5';
SELECT count(*) FROM patient WHERE SUBTraCT(year(`examination date`), year(`first date`)) >= 1;
SELECT count(*) FROM patient WHERE year(birthday) < 18 AND year(`examination date`) BETWEEN '1990' AND '1993';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= '2.0' AND patient.sex = 'M';
SELECT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;
SELECT avg(1999 - strftime('%Y', patient.birthday)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1991-10-01' AND '1991-10-30';
SELECT SUBTraCT(year(`examination date`), year(birthday)), MAX(hgb) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id;
SELECT examination.ana FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 3605340 AND examination.`examination date` = '1996-12-02';
SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND strftime('%Y-%m-%d', laboratory.date) = '1995-09-04';
SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' LIMIT 1;
SELECT * FROM laboratory WHERE id = (SELECT id FROM patient WHERE diagnosis = 'SLE' AND description = '1994-02-19') AND date = '1993/11/12';
SELECT CASE WHEN patient.sex = 'M' THEN 'man' WHEN patient.sex = 'F' THEN 'women' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9 AND laboratory.got = 9;
SELECT SUBTRACT(strftime('%Y', examination.`examination date`), strftime('%Y', patient.birthday)) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21';
SELECT COUNT(id) FROM patient WHERE `first date` = '1991-06-13' AND diagnosis = 'SJS';
SELECT diagnosis FROM examination WHERE `examination date` = '1997-01-27';
SELECT examination.symptoms FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.birthday = '1959/3/1' AND examination.`examination date` = '1993/9/27';
SELECT SUBTraCT(SUM(birthday = '1959-02-18' and date like '1981-11-%' THEN `t-cho`), SUM(birthday = '1959-02-18' and date like '1981-12-%' THEN `t-cho`)) FROM laboratory WHERE birthday = '1959-02-18';
SELECT * FROM patient WHERE diagnosis = 'Behcet' AND description BETWEEN '1997-1-1' AND '1998-1-1';
SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`examination date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;
SELECT patient.id FROM patient WHERE patient.sex = 'F' AND strftime('%Y', patient.birthday) = '1964' AND patient.admission = '+';
SELECT AVG(`acl igm`) FROM examination WHERE thrombosis = 2 AND ana = 'S';
SELECT 100 * SUM(CASE WHEN `u-pro` > 0 AND `u-pro` < 30 AND ua <= 6.5 THEN 1 ELSE 0 END) / COUNT(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id;
SELECT (SUM(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN patient.sex = 'M' THEN patient.id END)) AS calculation FROM patient JOIN examination ON patient.id = examination.id;
SELECT * FROM patient WHERE admission = '-' AND date LIKE '1991-10%' AND `t-bil` < 2.0;
SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`ana pattern` != 'P' AND patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31';
SELECT patient.sex FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123;
SELECT avg(alb) FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE plt > 400 AND sex = 'F' AND diagnosis = 'SLE';
SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1;
SELECT description, diagnosis FROM patient WHERE id = 48473;
SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'APS';
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE YEAR(laboratory.date) = '1997' AND laboratory.tp > '6' AND laboratory.tp < '8.5';
SELECT (SUM(diagnosis LIKE '%Itp%') * 100.0 / (SELECT SUM(diagnosis LIKE '%SLE%') FROM patient)) AS calculation FROM patient WHERE diagnosis LIKE '%SLE%';
SELECT cast(count(CASE WHEN patient.diagnosis = 'RA' AND patient.sex = 'F' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995' AND '1997' AND patient.diagnosis = 'BEHCET' AND patient.admission = '-';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;
SELECT dateDIFF(`examination date`, `first date`) FROM patient WHERE id = 821298;
SELECT CASE WHEN (laboratory.ua > 8.0 AND patient.sex = 'M') OR (laboratory.ua > 6.5 AND patient.sex = 'F') THEN 'Normal' ELSE 'Abnormal' END FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE patient.id = 57266;
SELECT laboratory.date, examination.`examination date` FROM laboratory JOIN examination ON laboratory.id = examination.id WHERE laboratory.got >= 60;
SELECT patient.sex , patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND year(laboratory.date) = 1994;
SELECT laboratory.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60;
SELECT * FROM patient WHERE gpt > 60 ORDER BY birthday ASC;
SELECT avg(laboratory.ldh) FROM laboratory WHERE laboratory.ldh < 500;
SELECT patient.id, year(current_timestamp) - year(patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh BETWEEN 600 AND 800;
SELECT admission FROM patient WHERE id IN (SELECT id FROM laboratory WHERE alp < 300);
SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory WHERE id = (SELECT id FROM patient WHERE birthday = '1982-04-01');
SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0;
SELECT SUBTRACT(laboratory.tp, 8.5) FROM patient, laboratory WHERE patient.id = laboratory.id AND patient.sex = 'F' AND laboratory.tp > 8.5;
SELECT * FROM patient WHERE sex = 'M' AND (alb <= 3.5 OR alb >= 5.5) ORDER BY birthday DESC;
SELECT CASE WHEN laboratory.alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE year(patient.birthday) = '1982';
SELECT sum(iif(patient.sex = 'F' AND (laboratory.ua > 8.0 OR laboratory.ua > 6.5), 1, 0)) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id;
SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = (SELECT MAX(laboratory.date) FROM laboratory) AND laboratory.ua < 8.0 AND patient.sex = 'M' OR laboratory.ua < 6.5 AND patient.sex = 'F';
SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un = 29;
SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.diagnosis = 'RA' AND patient.un < 30;
SELECT count(*) FROM patient WHERE sex = 'M' AND cre >= 1.5;
SELECT (SUM(sex = 'M') > SUM(sex = 'F')) FROM patient WHERE cre >= 1.5;
SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.id = (SELECT laboratory.id FROM laboratory ORDER BY laboratory.`t-bil` DESC LIMIT 1);
SELECT patient.sex, GROUP_CONCAT(DISTINCT patient.id) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 GROUP BY patient.sex;
SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC LIMIT 1;
SELECT sum(CASE WHEN patients.deathdate IS NULL THEN round((strftime('%J', date('now')) - strftime('%J', patients.birthdate)) / 365) ELSE round((strftime('%J', patients.deathdate) - strftime('%J', patients.birthdate)) / 365) END) / count(patients.patient) FROM conditions INNER JOIN patients ON conditions.patient = patients.patient WHERE conditions.description = 'Hypertension' AND patients.gender = 'M';
SELECT * FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300;
SELECT DISTINCT count(id) FROM patient WHERE tg >= 200 AND SUBTraCT(year(current_timestamp), year(birthday)) > 50;
SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cpk < 250 AND patient.admission = '-';
SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.cpk >= 250 AND strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956';
SELECT patient.id, patient.sex, strftime('%Y', current_timestamp) - strftime('%Y', patient.birthday) AS age FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250;
SELECT patient.id , laboratory.glu FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE laboratory.glu < 180 AND year(patient.`first date`) = 1991;
SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0 GROUP BY patient.sex, patient.birthday ORDER BY patient.birthday ASC;
SELECT patient.diagnosis , SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient WHERE patient.rbc < 3.5;
SELECT * FROM patient WHERE sex = 'F' AND SUBTRACT(year(current_timestamp), year(birthday)) >= 50 AND (rbc <= 3.5 OR rbc >= 6.0) AND admission = '+';
SELECT id, sex FROM patient WHERE admission = '-' AND hgb < 10;
SELECT patient.id, patient.sex FROM patient WHERE patient.diagnosis = 'SLE' AND (10 < patient.hgb < 17);
SELECT patient.id , strftime('%Y', current_timestamp) - strftime('%Y', patient.birthday) AS age FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id GROUP BY patient.id HAVING COUNT(patient.id) > 2 AND laboratory.hct >= 52;
SELECT avg(laboratory.hct) FROM laboratory WHERE laboratory.date LIKE '1991%' AND laboratory.hct < 29;
SELECT SUM(plt < 100), SUM(plt > 400) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE plt < 100 OR plt > 400);
SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.plt BETWEEN 100 AND 400 AND YEAR(date) = '1984' AND SUBTraCT(year(current_timestamp), year(birthday)) < 50;
SELECT (SUM(CASE WHEN sex = 'F' AND pt >= 14 THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN sex = 'F' THEN 1 ELSE 0 END)) AS percentage FROM patient WHERE SUBTRACT(year(current_timestamp), year(birthday)) > 55;
SELECT * FROM patient WHERE year(`first date`) > 1992 AND pt < 14;
SELECT count(*) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45;
SELECT count(DISTINCT examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.aptt > 45;
SELECT count(laboratory.fg) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc > 3.5 AND laboratory.wbc < 9.0 AND laboratory.fg <= 150 OR laboratory.fg >= 450;
SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id JOIN examination examination ON patient.id = examination.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg BETWEEN 150 AND 450;
SELECT diagnosis FROM patient WHERE `u-pro` >= 30;
SELECT patient.id FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE `u-pro` BETWEEN 0 AND 30 AND examination.diagnosis = 'SLE';
SELECT DISTINCT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl igg` >= 2000;
SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl igg` > 900 AND examination.`acl igg` < 2000 AND examination.symptoms IS NOT NULL;
SELECT diagnosis FROM examination WHERE id IN (SELECT id FROM patient WHERE id IN (SELECT id FROM laboratory WHERE iga BETWEEN 80 AND 500));
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.iga > 80 AND laboratory.iga < 500 AND strftime('%Y', patient.`first date`) >= 1990;
SELECT patient.diagnosis FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.igm <= 40 OR examination.igm >= 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;
SELECT count(patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.crp = '+' AND patient.description IS NULL;
SELECT count(*) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.cre >= 1.5 AND SUBTraCT((YEAR(CURdate()), YEAR(birthday))) < 70;
SELECT count(DISTINCT patient.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.kct = '+' AND patient.diagnosis = 'RA';
SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday >= '1985-1-1' AND laboratory.ra IN('-', '+-');
SELECT id FROM patient WHERE rf < 20 AND (YEAR(CURdate()) - YEAR(birthday)) > 60;
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.rf < 20 AND examination.thrombosis = '0';
SELECT count(DISTINCT examination.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` = 3 AND examination.`ana pattern` = 'P';
SELECT patient.id FROM examination examination JOIN laboratory laboratory ON examination.id = laboratory.id JOIN patient patient ON examination.id = patient.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY examination."ACL IGA" DESC LIMIT 1;
SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'APS' AND laboratory.c4 > 10;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rnp = '-' AND patient.admission = '+';
SELECT birthday FROM patient WHERE rnp NOT IN('-', '+-') AND birthday = (SELECT max(birthday) FROM patient);
SELECT count(examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.sm IN('-', '+-');
SELECT patient.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.sm NOT IN ('negative', '0') ORDER BY patient.birthday DESC LIMIT 3;
SELECT laboratory.id FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`examination date` >  1997-01-01 AND laboratory.sc170 IN('negative','0');
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sc170 IN('negative', '0') AND patient.sex = 'F' AND examination.symptoms IS NULL;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN('-','+-') AND YEAR(patient.`first date`) < 2000;
SELECT id FROM patient WHERE `first date` = (SELECT min(`first date`) FROM patient WHERE ssa NOT IN('negative', '0'));
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.ssb IN('-', '+-') AND examination.diagnosis = 'SLE';
SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.ssb IN ('negative', '0') AND examination.symptoms IS NOT NULL;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.centromea IN('-', '+-') AND laboratory.ssb IN('-', '+-') AND patient.sex = 'M';
SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna >= 8;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL;
SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE 900 < examination.`acl igg` < 2000 AND patient.admission = '+';
SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient WHERE got >= 60 AND diagnosis = 'SLE')) AS percentage FROM patient WHERE got >= 60 AND diagnosis = 'SLE';
SELECT count(patient.id) FROM patient WHERE patient.sex = 'M' AND patient.got < 60;
SELECT MIN(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60;
SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3;
SELECT count(DISTINCT patient.id) FROM patient patient, laboratory laboratory WHERE patient.id = laboratory.id AND laboratory.got < 60 AND patient.sex = 'M';
SELECT patient.`first date` FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500 ORDER BY laboratory.ldh DESC LIMIT 1;
SELECT * FROM patient WHERE id = (SELECT max(id) FROM patient) AND ldh >= 500;
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alp >= 300 AND patient.admission = '+';
SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.alp < 300;
SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0;
SELECT count(DISTINCT patient.id) FROM patient WHERE patient.diagnosis = 'SJS' AND patient.tp > 6.0 AND patient.tp < 8.5;
SELECT `examination date` FROM examination WHERE `acl igg` = (SELECT MAX(alb) FROM laboratory WHERE alb > 3.5 AND alb < 5.5);
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5;
SELECT MAX(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'F' AND examination.`acl igg` > 6.50;
SELECT MAX(examination.ana) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.cre < 1.5;
SELECT id FROM examination WHERE cre < 1.5 AND MAX(`acl iga`);
SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`t-bil` >= 2.0 AND examination.`ana pattern` LIKE '%P%';
SELECT examination.`acl igm` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`t-bil` < 2.0;
SELECT count(laboratory.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.kct = '-' AND laboratory.`t-cho` >= 250;
SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND `t-cho` < 250;
SELECT count(*) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE tg < 200 AND symptoms IS NOT NULL;
SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.tg < 200 AND examination.diagnosis = 'Normal';
SELECT laboratory.id, examination.id FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.cpk < 250 AND examination.thrombosis = 0;
SELECT count(patient.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+');
SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE glu > 180) ORDER BY birthday LIMIT 1;
SELECT count(DISTINCT patient.id) FROM patient patient INNER JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND patient.diagnosis != 'thrombosis';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0 AND patient.admission = '+';
SELECT count(examination.diagnosis) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SLE' AND examination.`acl igm` BETWEEN 3.5 AND 9.0;
SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0 AND patient.admission = '-';
SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND patient.diagnosis IS NOT NULL;
SELECT * FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND examination.diagnosis = 'MCTD';
SELECT AVG(laboratory.pt) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.pt < 14;
SELECT count(*) FROM examination WHERE thrombosis = 2 AND pt < 14;
SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.last_name = 'Sanders' AND member.first_name = 'Angela';
SELECT count(member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';
SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';
SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';
SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;
SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';
SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';
SELECT count(DISTINCT event.event_id) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event JOIN member member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;
SELECT COUNT(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Many' AND event.type = 'Meeting';
SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(attendance.link_to_event) > 20 AND event.type != 'Fundraiser';
SELECT avg(attendance) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense );
SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';
SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';
SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';
SELECT income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President';
SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting';
SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';
SELECT first_name, last_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'Illinois');
SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND event.event_name = 'September Meeting';
SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Pierce' AND member.first_name = 'Guidi';
SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';
SELECT CASE WHEN expense.approved = 'true' THEN 'Yes' ELSE 'No' END FROM expense WHERE expense.expense_date = '2019-10-08';
SELECT sum(expense.cost) / count(expense.expense_id) AS average_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.last_name = 'Allen' AND member.first_name = 'Elijah' AND (month(expense.expense_date) = 9 OR month(expense.expense_date) = 10);
SELECT SUBTRACT(sum(budget.spent), sum(budget.spent where YEAR(event.event_date) = 2019)) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Student_Club';
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT expense.cost FROM expense WHERE expense.expense_description = 'Posters' AND expense.expense_date = '2019-09-04';
SELECT remaining FROM budget WHERE category = 'Food' ORDER BY budget.amount DESC LIMIT 1;
SELECT income.notes FROM income WHERE income.date_received = '2019-09-14' AND income.source = 'Fundraising';
SELECT count(*) FROM major WHERE major.college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE last_name = 'Jacobs' AND first_name = 'Carlo';
SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'O''Gallagher';
SELECT count(*) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;
SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';
SELECT event.status FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN expense ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Thomason' AND member.first_name = 'Brent';
SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha';
SELECT major.department FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.position = 'President';
SELECT member.first_name, member.last_name, income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues';
SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;
SELECT (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND event.event_name = 'Yearly Kickoff') / (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND event.event_name = 'October Meeting') AS ratio FROM budget LIMIT 1;
SELECT (sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) / sum(budget.amount) * 100.0) AS percentage FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';
SELECT SUM(expense.cost) FROM expense WHERE expense.expense_description = 'Pizza';
SELECT count(DISTINCT zip_code.city) FROM zip_code WHERE zip_code.county = 'Orange County' AND zip_code.state = 'Virginia';
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Firth' AND member.first_name = 'Amy';
SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY budget.remaining ASC LIMIT 1;
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';
SELECT major.college FROM member member INNER JOIN major major ON member.link_to_major = major.major_id GROUP BY major.college HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM member GROUP BY link_to_major));
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.amount DESC LIMIT 1;
SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President';
SELECT count(link_to_member) FROM attendance WHERE link_to_event LIKE 'rec2N69DMcrqN9PJC';
SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.last_name = 'Mason' AND member.first_name = 'Casey';
SELECT count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';
SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';
SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1;
SELECT count(member_id) FROM member WHERE position = 'President';
SELECT MAX(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Budget';
SELECT count(event_id) FROM `event` WHERE event_date LIKE '2020%' AND type = 'Meeting';
SELECT SUM(budget.spent) FROM budget WHERE budget.category = 'Food';
SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7);
SELECT member.first_name , member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';
SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';
SELECT count(*) FROM income income JOIN member member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';
SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;
SELECT SUM(expense.cost) FROM expense INNER JOIN event ON expense.expense_id = event.event_id WHERE event.event_name = 'Yearly Kickoff';
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';
SELECT member.first_name, member.last_name, income.source, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member ORDER BY income.amount DESC LIMIT 1;
SELECT event.event_name FROM event INNER JOIN expense ON event.event_id = expense.link_to_event ORDER BY expense.cost ASC LIMIT 1;
SELECT DIVIDE(SUM(expense.cost), SUM(expense.cost)) * 100 FROM expense WHERE expense.event_name = 'Yearly Kickoff';
SELECT SUM(major_name = 'Finance') AS finance, SUM(major_name = 'Physics') AS physics FROM major;
SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.source ORDER BY sum(income.amount) DESC LIMIT 1;
SELECT member.first_name, member.last_name, member.email FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Student Club' AND member.position = 'Secretary';
SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';
SELECT count(*) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Community Theater' AND YEAR(event_date) = 2019);
SELECT count(*) FROM attendance attendance JOIN member member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';
SELECT AVG(t.spent) FROM budget t WHERE t.event_status = 'Closed' AND t.category = 'Food';
SELECT event.event_name FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;
SELECT member.first_name, member.last_name, event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';
SELECT SUM(type = 'Community Service'), COUNT(event_id) FROM event WHERE event_date BETWEEN' 2019-01-01' and '2019-12-31';
SELECT expense.cost FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters';
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;
SELECT event_name FROM event WHERE status = 'Closed' AND event_id IN (SELECT link_to_event FROM budget WHERE remaining < 0);
SELECT type, SUM(cost) FROM expense JOIN event ON expense.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' GROUP BY type;
SELECT budget.category , sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY sum(budget.amount) ASC;
SELECT budget.budget_id FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;
SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;
SELECT sum(expense.cost) FROM expense INNER JOIN zip_code ON expense.link_to_budget = zip_code.zip_code WHERE expense.expense_description = 'Parking';
SELECT SUM(expense.cost) FROM expense WHERE expense.expense_date = '2019-08-20';
SELECT member.first_name, member.last_name, sum(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;
SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';
SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';
SELECT zip_code.zip_code FROM member INNER JOIN income ON member.member_id = income.link_to_member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount < 50;
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Cullen' AND member.first_name = 'Phillip';
SELECT position FROM member WHERE link_to_major = 'rec06DF6vZ1CyPKpc';
SELECT count(member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30;
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00';
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT (SUM(CASE WHEN member.position = 'Member' AND major.major_name = 'Business' THEN 1 ELSE 0 END) * 100.0 / COUNT(member.member_id)) AS percentage FROM member INNER JOIN major ON member.link_to_major = major.major_id;
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';
SELECT count(amount) FROM income WHERE amount = 50;
SELECT count(member.member_id) FROM member WHERE member.t_shirt_size = 'X-Large' AND member.position = 'Member';
SELECT count(major.major_id) FROM major WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences';
SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;
SELECT zip_code.city, zip_code.state FROM major INNER JOIN member ON major.major_id = member.link_to_major INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member';
SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.';
SELECT member.last_name, member.position FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';
SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';
SELECT SUM(amount = 50) / COUNT(member_id) * 100 FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium';
SELECT state FROM zip_code WHERE type = 'PO Box';
SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.state = 'Puerto Rico' AND zip_code.county = 'San Juan Municipio';
SELECT event.event_name FROM event WHERE event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT attendance.link_to_event FROM attendance INNER JOIN income ON attendance.link_to_member = income.link_to_member WHERE income.amount > 50;
SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' and '2019-11-19';
SELECT college FROM major WHERE major.major_id = 'rec1N0upiVLy5esTO';
SELECT phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'college of Agriculture and Applied Sciences';
SELECT email FROM income WHERE amount > 20 AND date_received BETWEEN '2019-09-10' AND '2019-11-19';
SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND major.college = 'College of Education & Human Services';
SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;
SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' and '2020-03-31';
SELECT expense.expense_description FROM expense WHERE expense.cost > 50;
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT cast(sum(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code;
SELECT event.event_name, event.location FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;
SELECT event.event_name , event.event_date FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;
SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;
SELECT DISTINCT zip_code.city, zip_code.state FROM income INNER JOIN zip_code ON income.link_to_member = zip_code.zip_code WHERE income.amount > 40;
SELECT member.first_name, member.last_name, MAX(expense.cost) FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY expense.link_to_member HAVING COUNT(event_id) > 1;
SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';
SELECT event_name FROM event WHERE EXISTS (SELECT 1 FROM expense WHERE expense.link_to_event = event.event_id AND expense.category = 'Parking' AND expense.cost < (SELECT DIVIDE(SUM(expense.cost), COUNT(expense.link_to_event)) FROM expense WHERE expense.category = 'Parking'));
SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 FROM event INNER JOIN expense ON event.event_id = expense.expense_id WHERE event.type = 'Meeting';
SELECT expense_description FROM expense WHERE expense_description = 'Water, chips, cookies' ORDER BY cost DESC LIMIT 1;
SELECT member.first_name, member.last_name FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id ORDER BY expense.cost DESC LIMIT 5;
SELECT first_name, last_name, phone FROM member WHERE member_id IN (SELECT link_to_member FROM expense WHERE cost > (SELECT AVG(cost) FROM expense));
SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code;
SELECT major.major_name, major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';
SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';
SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';
SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';
SELECT event.event_name FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';
SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09';
SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';
SELECT member.first_name, member.last_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';
SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts';
SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';
SELECT m.first_name || ' ' || m.last_name AS full_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.zip_code = 28092;
SELECT count(gasstationid) FROM gasstations WHERE gasstations.country = 'CZE' AND gasstations.segment = 'Premium';
SELECT count(currency = 'EUR') / count(currency = 'CZK') FROM customers;
SELECT yearmonth.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND customers.segment = 'LAM' ORDER BY yearmonth.consumption LIMIT 4;
SELECT avg(yearmonth.consumption) / 12 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.segment = 'SME';
SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'CZK' AND yearmonth.date BETWEEN '201101' AND '201112' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;
SELECT count(DISTINCT customers.customerid) FROM customers JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND yearmonth.date BETWEEN '201201' AND '201212' AND yearmonth.consumption < 30000;
SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212';
SELECT strftime('%Y', date) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR' GROUP BY strftime('%Y', date) ORDER BY count(*) DESC LIMIT 1;
SELECT gasstations.segment FROM gasstations gasstations JOIN yearmonth yearmonth ON gasstations.gasstationid = yearmonth.customerid GROUP BY gasstations.gasstationid ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;
SELECT strftime('%Y', date) FROM yearmonth GROUP BY strftime('%Y', date) ORDER BY sum(consumption) DESC LIMIT 1;
SELECT yearmonth.date FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND yearmonth.date BETWEEN '201301' AND '201312' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT SUM(yearmonth.consumption) / COUNT(yearmonth.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.customerid = gasstations.gasstationid INNER JOIN products ON transactions_1k.customerid = products.productid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.currency = 'CZK' AND customers.segment IN ('SME', 'LAM', 'KAM');
SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN products ON transactions_1k.gasstationid = products.productid WHERE yearmonth.date BETWEEN '201201' AND '201312' AND transactions_1k.date BETWEEN '2012-01-01' AND '2013-12-31' AND customers.currency = 'EUR' GROUP BY customers.segment ORDER BY SUM(transactions_1k.amount) DESC LIMIT 1;
SELECT sum(t.amount) FROM transactions_1k t WHERE t.customerid = '6' AND t.date BETWEEN '201308' AND '201311';
SELECT SUM(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations;
SELECT sum(t.consumption) FROM yearmonth t WHERE t.customerid = '7' AND t.date = '201304';
SELECT sum(CASE WHEN customers.segment = 'SME' AND customers.currency = 'CZK' THEN transactions_1k.amount ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' AND customers.currency = 'EUR' THEN transactions_1k.amount ELSE 0 END) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid;
SELECT customers.customerid, yearmonth.consumption FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM' AND yearmonth.date = '201310' AND customers.currency = 'EUR' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT sum(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' AND yearmonth.date = '201305';
SELECT (count(*) / (SELECT count(*) FROM customers WHERE segment = 'LAM')) * 100 FROM yearmonth WHERE consumption > 46.73;
SELECT gasstations.country, count(*) AS COUNT FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country ORDER BY COUNT DESC LIMIT 1;
SELECT cast(count(CASE WHEN customers.segment = 'KAM' THEN customers.customerid END) AS REAL) * 100 / count(customers.segment) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR';
SELECT SUM(iif(yearmonth.date LIKE '201202%', 1, 0)) * 100.0 / COUNT(*) FROM yearmonth WHERE yearmonth.consumption > 528.3;
SELECT gasstations.segment FROM gasstations WHERE gasstations.country = 'Slovakia';
SELECT yearmonth.customerid FROM yearmonth WHERE yearmonth.date = '201309' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;
SELECT customers.segment FROM customers JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201309' ORDER BY yearmonth.consumption ASC LIMIT 1;
SELECT customers.customerid FROM customers JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201206' AND customers.segment = 'SME' ORDER BY yearmonth.consumption ASC LIMIT 1;
SELECT max(consumption) FROM yearmonth WHERE substr(date, 1, 4) = '2012';
SELECT customers.customerid, SUM(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) DESC LIMIT 1;
SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date LIKE '201309%';
SELECT country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date LIKE '201306%';
SELECT chainid FROM gasstations JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.currency = 'EUR';
SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid WHERE transactions_1k.currency = 'EUR';
SELECT avg(price) FROM transactions_1k WHERE date LIKE '2012-01%';
SELECT count(yearmonth.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000;
SELECT products.description FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE gasstations.country = 'CZE';
SELECT DISTINCT time FROM transactions_1k WHERE gasstationid IN (SELECT gasstationid FROM gasstations WHERE chainid = 11);
SELECT count(DISTINCT transactions_1k.transactionid) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;
SELECT count(*) FROM gasstations gasstations INNER JOIN transactions_1k transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';
SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';
SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR';
SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' ORDER BY amount DESC LIMIT 1;
SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' GROUP BY gasstations.country LIMIT 1;
SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24';
SELECT segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '21:20:00' AND transactions_1k.date = '2012-08-23';
SELECT count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'CZK' AND transactions_1k.time < '13:00:00' AND transactions_1k.date = '2012-08-26';
SELECT customers.segment FROM customers ORDER BY customers.customerid ASC LIMIT 1;
SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00';
SELECT transactions_1k.productid FROM transactions_1k WHERE date = '2012-08-23' AND time = '21:20:00';
SELECT transactions_1k.date, transactions_1k.amount FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date = '2012-08-24' AND yearmonth.consumption = 124.05;
SELECT count(*) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00' AND transactions_1k.date = '2012-08-26';
SELECT customers.currency FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201306';
SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 667467;
SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24';
SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'EUR' AND yearmonth.date = '2012-08-25';
SELECT (consumption_2012 - consumption_2013) / consumption_2012 FROM yearmonth WHERE customerid = 63 AND date = '2012/8/25';
SELECT gasstationid FROM transactions_1k GROUP BY gasstationid ORDER BY sum(amount) DESC LIMIT 1;
SELECT sum(yearmonth.consumption) / sum(yearmonth.consumption) FROM yearmonth INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid WHERE gasstations.country = 'SVK' AND gasstations.segment = 'Premium';
SELECT sum(transactions_1k.amount) FROM yearmonth yearmonth JOIN transactions_1k transactions_1k ON yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = transactions_1k.date WHERE yearmonth.customerid = 38508 AND yearmonth.date = '201201';
SELECT products.description FROM products ORDER BY products.productid DESC LIMIT 5;
SELECT customers.customerid, customers.currency, AVG(transactions_1k.price) FROM customers JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY AVG(transactions_1k.price) DESC LIMIT 1;
SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE transactions_1k.amount = 1 ORDER BY transactions_1k.price DESC LIMIT 1;
SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.date = transactions_1k.date WHERE transactions_1k.productid = 5 AND transactions_1k.amount * transactions_1k.price > 29.00;
