[
  {
    "id": 7,
    "db_id": "concert_singer",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "gpt_answers1": [
      "SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer) ",
      "SELECT s.name, s.song_release_year FROM singer s INNER JOIN (SELECT MIN(age) AS min_age FROM singer) m ON s.age = m.min_age ",
      "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer) ",
      "SELECT singer.name, singer.song_release_year FROM singer ORDER BY singer.age ASC LIMIT 1 ",
      "SELECT s.name, s.song_release_year FROM singer s WHERE s.age = (SELECT MIN(age) FROM singer) ",
      "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer) LIMIT 1 ",
      "SELECT singer.name, singer.song_release_year FROM singer INNER JOIN (SELECT MIN(age) AS min_age FROM singer) m WHERE singer.age = m.min_age ",
      "SELECT s.name, s.song_release_year FROM singer s INNER JOIN (SELECT MIN(age) AS min_age FROM singer) m WHERE s.age = m.min_age ",
      "SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer) LIMIT 1 ",
      "SELECT name, song_release_year FROM singer ORDER BY age ASC LIMIT 1"
    ],
    "gpt_answers2": [
      "SELECT singer.name, singer.song_release_year  FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer); ",
      "SELECT singer.name, singer.song_release_year  FROM singer WHERE singer.age IN (SELECT MIN(age) FROM singer); ",
      "SELECT singer.name, singer.song_release_year  FROM singer ORDER BY singer.age ASC LIMIT 1; ",
      "SELECT singer.name, singer.song_release_year  FROM singer, (SELECT MIN(age) as min_age FROM singer) AS min WHERE singer.age = min.min_age; ",
      "SELECT singer.name, singer.song_release_year  FROM singer INNER JOIN (SELECT MIN(age) as min_age FROM singer) AS min ON singer.age = min.min_age; ",
      "SELECT singer.name, singer.song_release_year  FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer LIMIT 1); ",
      "SELECT singer.name, singer.song_release_year  FROM singer WHERE singer.age = (SELECT age FROM singer ORDER BY age ASC LIMIT 1); ",
      "SELECT singer.name, singer.song_release_year  FROM singer WHERE singer.age IN (SELECT age FROM singer ORDER BY age ASC LIMIT 1); ",
      "SELECT singer.name, singer.song_release_year  FROM singer WHERE singer.age IN (SELECT MIN(age) FROM singer); ",
      "SELECT singer.name, singer.song_release_year  FROM singer INNER JOIN (SELECT MIN(age) FROM singer) AS min_age ON singer.age = min_age.min(age);"
    ],
    "gpt_answers3": [
      "SELECT s.name, s.song_release_year FROM singer s WHERE s.age = (SELECT MIN(age) FROM singer) ",
      "SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer) ",
      "SELECT s.name, s.song_release_year FROM singer s JOIN (SELECT MIN(age) as min_age FROM singer) AS min_age_table WHERE s.age = min_age_table.min_age ",
      "SELECT s.name, s.song_release_year FROM singer s WHERE s.age = (SELECT MIN(age) FROM singer) LIMIT 1 ",
      "SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer) LIMIT 1 ",
      "SELECT s.name, s.song_release_year FROM singer s JOIN (SELECT MIN(age) as min_age FROM singer) AS min_age_table WHERE s.age = min_age_table.min_age LIMIT 1 ",
      "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM (SELECT name, song_release_year, age FROM singer)) ",
      "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM (SELECT * FROM singer)) ",
      "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer) ORDER BY name ASC LIMIT 1 ",
      "SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer) ORDER BY name ASC FETCH FIRST ROW ONLY;"
    ]
  },
  {
    "id": 8,
    "db_id": "concert_singer",
    "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "gpt_answers1": [
      "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer); ",
      "SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT MIN(age) FROM singer LIMIT 1); ",
      "SELECT song_name, song_release_year  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE age = (SELECT MIN(age) FROM singer); ",
      "SELECT song_name, song_release_year  FROM singer  INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE age = (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer, singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id AND age = (SELECT MIN(age) FROM singer); ",
      "SELECT song_name, song_release_year  FROM singer, singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id AND age = (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert) AND age = (SELECT MIN(age) FROM singer); ",
      "SELECT song_name, song_release_year  FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE singer_id IN (SELECT singer_id FROM singer_in_concert) AND age = (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE singer_id IN (SELECT singer_id FROM singer_in_concert) AND age IN (SELECT MIN(age) FROM singer); ",
      "SELECT song_name, song_release_year  FROM singer WHERE age = (SELECT MIN(age) FROM singer) LIMIT 10;"
    ],
    "gpt_answers2": [
      "SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT MIN(age) FROM singer); ",
      "SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT age FROM singer ORDER BY age ASC LIMIT 1); ",
      "SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT MIN(age) FROM singer) GROUP BY song_name, song_release_year LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer  WHERE age IN (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT age FROM singer ORDER BY age ASC LIMIT 1) LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer  WHERE age = (SELECT age FROM singer ORDER BY age ASC) LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer  WHERE name = (SELECT name FROM singer ORDER BY age ASC LIMIT 1) LIMIT 10; ",
      "SELECT song_name, song_release_year  FROM singer  WHERE name = (SELECT name FROM singer ORDER BY age ASC) LIMIT 10; ",
      "SELECT s.song_name, s.song_release_year FROM singer s INNER JOIN ( SELECT MIN(age) AS min_age FROM singer ) m ON s.age = m.min_age LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer); ",
      "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer) FETCH FIRST 10 ROWS ONLY; ",
      "SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer) ORDER BY singer_id LIMIT 10; ",
      "SELECT S.song_name, S.song_release_year FROM singer S JOIN singer_in_concert SC ON S.singer_id = SC.singer_id JOIN concert C ON SC.concert_id = C.concert_id WHERE S.age = (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT S.song_name, S.song_release_year FROM singer S INNER JOIN singer_in_concert SC ON S.singer_id = SC.singer_id INNER JOIN concert C ON SC.concert_id = C.concert_id WHERE S.age = (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT S.song_name, S.song_release_year FROM singer S INNER JOIN singer_in_concert SC ON S.singer_id = SC.singer_id INNER JOIN concert C ON SC.concert_id = C.concert_id WHERE S.age = (SELECT MIN(age) FROM singer) GROUP BY S.song_name, S.song_release_year LIMIT 10; ",
      "SELECT DISTINCT S.song_name, S.song_release_year FROM singer S, singer_in_concert SC, concert C WHERE S.singer_id = SC.singer_id AND SC.concert_id = C.concert_id AND S.age = (SELECT MIN(age) FROM singer) LIMIT 10; ",
      "SELECT DISTINCT S.song_name, S.song_release_year FROM singer S, singer_in_concert SC, concert C WHERE S.singer_id = SC.singer_id AND SC.concert_id = C.concert_id AND S.age = (SELECT MIN(age) FROM singer) FETCH FIRST 10 ROWS ONLY; ",
      "SELECT S.song_name, S.song_release_year FROM singer S, singer_in_concert SC, concert C WHERE S.singer_id = SC.singer_id AND SC.concert_id = C.concert_id AND S.age = (SELECT MIN(age) FROM singer) FETCH FIRST 10 ROWS ONLY;"
    ]
  },
  {
    "id": 17,
    "db_id": "concert_singer",
    "gold": "select max(capacity), average from stadium",
    "gpt_answers1": [
      "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium;",
      "SELECT MAX(capacity) FROM stadium UNION SELECT AVG(capacity) FROM stadium;",
      "SELECT capacity AS max_capacity, AVG(capacity) FROM stadium;",
      "SELECT MAX(capacity), AVG(capacity) AS average_capacity FROM stadium;",
      "SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity FROM stadium, AVG(capacity) FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) FROM stadium GROUP BY capacity;",
      "SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium GROUP BY capacity;"
    ],
    "gpt_answers2": [
      "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium;",
      "SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS average_capacity FROM stadium;",
      "SELECT MAX(capacity) max_capacity, AVG(capacity) average_capacity FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium;",
      "SELECT MAX(capacity) as max_capacity, AVG(capacity) as average_capacity FROM stadium;",
      "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium;",
      "SELECT MAX(capacity) max_capacity, AVG(capacity) average_capacity FROM stadium;"
    ],
    "gpt_answers3": [
      "SELECT MAX(capacity), AVG(capacity) FROM stadium;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium;",
      "SELECT MAX(capacity) max_capacity, AVG(capacity) avg_capacity FROM stadium;",
      "SELECT MAX(capacity) max_capacity, AVG(capacity) average_capacity FROM stadium;",
      "SELECT MAX(capacity), AVG(capacity) FROM stadium AS s;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium AS s;",
      "SELECT MAX(capacity) max_capacity, AVG(capacity) avg_capacity FROM stadium AS s;",
      "SELECT MAX(capacity) max_capacity, AVG(capacity) average_capacity FROM stadium AS s;",
      "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM stadium;",
      "SELECT MAX(capacity) max_capacity, AVG(capacity) average_capacity FROM stadium;"
    ]
  },
  {
    "id": 23,
    "db_id": "concert_singer",
    "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "gpt_answers1": [
      "SELECT stadium.name, COUNT(concert.concert_id) FROM stadium  INNER JOIN concert ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.name; ",
      "SELECT s.name, COUNT(c.concert_id) FROM stadium s, concert c WHERE c.stadium_id = s.stadium_id GROUP BY s.name; ",
      "SELECT stadium.name, (SELECT COUNT(*) FROM concert WHERE concert.stadium_id = stadium.stadium_id) FROM stadium; ",
      "SELECT stadium.name, COUNT(*)  FROM stadium, concert WHERE concert.stadium_id = stadium.stadium_id GROUP BY stadium.name; ",
      "SELECT stadium.name, COUNT(singer_in_concert.concert_id) AS concert_count FROM stadium  INNER JOIN concert ON concert.stadium_id = stadium.stadium_id INNER JOIN singer_in_concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY stadium.name; ",
      "SELECT name, (SELECT COUNT(*) FROM concert WHERE concert.stadium_id = stadium.stadium_id) FROM stadium; ",
      "SELECT s.name, COUNT(c.concert_id) FROM stadium s LEFT JOIN concert c ON c.stadium_id = s.stadium_id GROUP BY s.name; ",
      "SELECT stadium.name, COUNT(c.concert_id) AS concert_count FROM stadium LEFT JOIN concert c ON c.stadium_id = stadium.stadium_id GROUP BY stadium.name; ",
      "SELECT stadium.name, COUNT(DISTINCT concert.concert_id) FROM stadium, concert WHERE concert.stadium_id = stadium.stadium_id GROUP BY stadium.name; ",
      "SELECT stadium.name, (SELECT COUNT(*) FROM concert WHERE concert.stadium_id = stadium.stadium_id) FROM stadium;"
    ],
    "gpt_answers2": [
      "SELECT stadium.name, COUNT(concert.concert_id)  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.name ",
      "SELECT s.name, COUNT(c.concert_id)  FROM concert AS c  INNER JOIN stadium AS s ON c.stadium_id = s.stadium_id  GROUP BY s.name ",
      "SELECT stadium.name, (SELECT COUNT(concert_id) FROM concert WHERE concert.stadium_id = stadium.stadium_id)  FROM stadium ",
      "SELECT s.name, COUNT(*)  FROM concert AS c, stadium AS s  WHERE c.stadium_id = s.stadium_id  GROUP BY s.name ",
      "SELECT stadium.name, COUNT(*)  FROM stadium  LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id  GROUP BY stadium.name ",
      "SELECT stadium.name, (SELECT COUNT(concert_id) FROM concert WHERE concert.stadium_id = stadium.stadium_id)  FROM stadium  GROUP BY stadium.name ",
      "SELECT s.name, COUNT(c.concert_id)  FROM stadium AS s  LEFT JOIN concert AS c ON s.stadium_id = c.stadium_id  GROUP BY s.name ",
      "SELECT s.name, COUNT(c.concert_id)  FROM stadium AS s  INNER JOIN concert AS c ON s.stadium_id = c.stadium_id  GROUP BY s.name ",
      "SELECT stadium.name, COUNT(concert.concert_id)  FROM concert  INNER JOIN stadium ON concert.stadium_id = stadium.stadium_id  GROUP BY stadium.name ",
      "SELECT s.name, (SELECT COUNT(c.concert_id) FROM concert AS c WHERE s.stadium_id = c.stadium_id)  FROM stadium AS s"
    ],
    "gpt_answers3": [
      "SELECT stadium.name, COUNT(concert.concert_id) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
      "SELECT stadium.name, COUNT(*) FROM stadium, concert WHERE stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
      "SELECT stadium.name, COUNT(*) FROM stadium INNER JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;",
      "SELECT stadium.name, COUNT(c.concert_id) FROM stadium s, concert c WHERE s.stadium_id = c.stadium_id GROUP BY s.name;",
      "SELECT s.name, COUNT(cc.concert_id) FROM stadium s, concert cc, singer_in_concert sc WHERE s.stadium_id = cc.stadium_id AND cc.concert_id = sc.concert_id GROUP BY s.name;",
      "SELECT s.name, COUNT(*) FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;",
      "SELECT s.name, COUNT(*) FROM stadium s RIGHT JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;",
      "SELECT s.name, COUNT(*) FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;",
      "SELECT s.name, COUNT(*) FROM stadium s, concert c WHERE s.stadium_id = c.stadium_id GROUP BY s.name;",
      "SELECT stadium.name, (SELECT COUNT(*) FROM concert WHERE concert.stadium_id = stadium.stadium_id) FROM stadium;"
    ]
  },
  {
    "id": 25,
    "db_id": "concert_singer",
    "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT stadium.name, stadium.capacity  FROM stadium  JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE concert.year >= 2014  GROUP BY stadium.name  ORDER BY COUNT(*) DESC  LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.stadium_id IN  (SELECT concert.stadium_id  FROM concert  WHERE concert.year >= 2014  GROUP BY concert.stadium_id  HAVING COUNT(*) =  (SELECT MAX(count)  FROM  (SELECT COUNT(*) as count  FROM concert  WHERE year >= 2014  GROUP BY stadium_id)  )); ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN  (SELECT concert.stadium_id  FROM concert  WHERE year >= 2014  GROUP BY concert.stadium_id  HAVING COUNT(*) =  (SELECT COUNT(*)  FROM concert  WHERE year >= 2014  GROUP BY stadium_id  ORDER BY COUNT(*) DESC  LIMIT 1))  AS subquery  ON stadium.stadium_id = subquery.stadium_id; ",
      "SELECT name, capacity  FROM stadium  WHERE stadium.stadium_id = (SELECT stadium_id  FROM concert  WHERE year >= 2014  GROUP BY stadium_id  ORDER BY COUNT(*) DESC  LIMIT 1); ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  JOIN concert ON concert.stadium_id = stadium.stadium_id  WHERE concert.year >= 2014  GROUP BY stadium.name, stadium.capacity  HAVING COUNT(*) = (SELECT COUNT(*)  FROM concert  WHERE year >= 2014  GROUP BY stadium_id  ORDER BY COUNT(*) DESC  LIMIT 1); ",
      "SELECT s.name, s.capacity  FROM (SELECT stadium_id, COUNT(*) as count  FROM concert  WHERE year >= 2014  GROUP BY stadium_id  ORDER BY COUNT(*) DESC  LIMIT 1) AS c  JOIN stadium s ON c.stadium_id = s.stadium_id; ",
      "SELECT s.name, s.capacity  FROM stadium s  WHERE s.stadium_id = (SELECT c.stadium_id  FROM (SELECT stadium_id, COUNT(*) as count  FROM concert  WHERE year >= 2014  GROUP BY stadium_id  ORDER BY count DESC  LIMIT 1) AS c); ",
      "SELECT name, capacity  FROM stadium  WHERE stadium_id IN  (SELECT stadium_id  FROM concert  WHERE year >= 2014  GROUP BY stadium_id  HAVING COUNT(*) = (SELECT COUNT(*)  FROM concert  WHERE year >= 2014  GROUP BY stadium_id  ORDER BY COUNT(*) DESC  LIMIT 1)); ",
      "SELECT s.name, s.capacity FROM stadium s, concert c WHERE s.stadium_id = c.stadium_id AND c.year >= 2014 GROUP BY s.name HAVING COUNT(c.concert_id) >= ALL  (SELECT COUNT(c2.concert_id) FROM stadium s2, concert c2 WHERE s2.stadium_id = c2.stadium_id AND c2.year >= 2014 GROUP BY s2.name); ",
      "SELECT stadium.name, stadium.capacity FROM stadium INNER JOIN (SELECT concert.stadium_id, COUNT(*) AS count FROM concert WHERE year >= 2014 GROUP BY concert.stadium_id ORDER BY count DESC LIMIT 1) AS subquery ON stadium.stadium_id = subquery.stadium_id;"
    ],
    "gpt_answers2": [
      "SELECT s.name, s.capacity FROM stadium s, concert c WHERE s.stadium_id = c.stadium_id AND c.year >= 2014 GROUP BY s.stadium_id ORDER BY COUNT(c.concert_id) DESC LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= 2014 GROUP BY s.stadium_id ORDER BY COUNT(c.concert_id) DESC LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= 2014 GROUP BY s.stadium_id ORDER BY COUNT(c.concert_id) DESC LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= 2014 GROUP BY s.name, s.capacity HAVING COUNT(c.concert_id) >= ALL(SELECT COUNT(c2.concert_id) FROM concert c2 WHERE c2.year >= 2014 GROUP BY c2.stadium_id) LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s WHERE s.stadium_id IN (SELECT c.stadium_id FROM concert c WHERE c.year >= 2014) GROUP BY s.stadium_id ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s WHERE s.stadium_id = (SELECT c.stadium_id FROM concert c WHERE c.year >= 2014 GROUP BY c.stadium_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= 2014 GROUP BY s.name, s.capacity ORDER BY COUNT(c.concert_id) DESC LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s WHERE EXISTS(SELECT 1 FROM concert c WHERE c.year >= 2014 AND c.stadium_id = s.stadium_id) GROUP BY s.stadium_id HAVING COUNT(*) >= ALL(SELECT COUNT(*) FROM concert c WHERE c.year >= 2014 GROUP BY c.stadium_id) LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s WHERE s.stadium_id = (SELECT c.stadium_id FROM concert c WHERE c.year >= 2014 GROUP BY c.stadium_id HAVING COUNT(*) >= ALL(SELECT COUNT(*) FROM concert WHERE year >= 2014 GROUP BY stadium_id) LIMIT 1); ",
      "SELECT s.name, s.capacity FROM stadium s WHERE s.stadium_id = (SELECT MAX(stadium_id) FROM (SELECT c.stadium_id, COUNT(*) AS num_concerts FROM concert c WHERE c.year >= 2014 GROUP BY c.stadium_id) AS subquery);"
    ],
    "gpt_answers3": [
      "SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.stadium_id IN ( SELECT concert.stadium_id FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id HAVING COUNT(concert.concert_id) = ( SELECT MAX(concert_count) FROM ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id ) ) );",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity HAVING COUNT(concert.concert_id) = ( SELECT MAX(concert_count) FROM ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id ) );",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity HAVING COUNT(concert.concert_id) = ( SELECT MAX(concert_count) FROM ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id ) ) ORDER BY stadium.capacity DESC LIMIT 1;",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC LIMIT 1;",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id JOIN ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id HAVING COUNT(concert.concert_id) = ( SELECT MAX(concert_count) FROM ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id ) ) ) AS max_concerts ON stadium.stadium_id = max_concerts.stadium_id;",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id HAVING COUNT(concert.concert_id) = ( SELECT MAX(concert_count) FROM ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id ) ) ) AS most_concerts ON stadium.stadium_id = most_concerts.stadium_id;",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity HAVING COUNT(concert.concert_id) = ( SELECT MAX(concert_count) FROM ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id ) ) ORDER BY stadium.capacity DESC FETCH FIRST ROW ONLY;",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC FETCH FIRST ROW ONLY;",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name HAVING COUNT(concert.concert_id) = ( SELECT MAX(concert_count) FROM ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id ) );",
      "SELECT stadium.name, stadium.capacity FROM stadium JOIN ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id HAVING COUNT(concert.concert_id) = ( SELECT MAX(concert_count) FROM ( SELECT concert.stadium_id, COUNT(concert.concert_id) as concert_count FROM concert WHERE concert.year >= 2014 GROUP BY concert.stadium_id ) ) ) AS max_concerts ON stadium.stadium_id = max_concerts.stadium_id;"
    ]
  },
  {
    "id": 26,
    "db_id": "concert_singer",
    "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
    "gpt_answers1": [
      "SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.stadium_id IN ( SELECT concert.stadium_id  FROM concert  WHERE concert.year > 2013 GROUP BY concert.stadium_id HAVING COUNT(concert.concert_id) > 1 ) ORDER BY stadium.capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.stadium_id = ( SELECT concert.stadium_id  FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  WHERE concert.year > 2013 GROUP BY concert.stadium_id HAVING COUNT(DISTINCT concert.concert_id) > 1 ) ORDER BY stadium.capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN ( SELECT concert.stadium_id  FROM concert  WHERE concert.year > 2013 GROUP BY concert.stadium_id HAVING COUNT(concert.concert_id) > 1 ) AS subquery ON stadium.stadium_id = subquery.stadium_id ORDER BY stadium.capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE concert.year > 2013 GROUP BY stadium.name, stadium.capacity HAVING COUNT(concert.concert_id) > 1 ORDER BY stadium.capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.stadium_id = ( SELECT stadium_id  FROM concert  WHERE concert.year > 2013 GROUP BY stadium_id HAVING COUNT(concert_id) > 1 ) ORDER BY capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.stadium_id = ( SELECT stadium_id  FROM concert  WHERE year > 2013 GROUP BY stadium_id  HAVING COUNT(*) > 1 ) ORDER BY capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE year > 2013 GROUP BY stadium.stadium_id HAVING COUNT(*) > 1 ORDER BY stadium.capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.stadium_id = ( SELECT stadium_id  FROM concert  WHERE year > 2013  GROUP BY stadium_id  HAVING COUNT(DISTINCT concert_id) > 1 ) ORDER BY capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE year > 2013 GROUP BY stadium.name, stadium.capacity HAVING COUNT(DISTINCT concert.concert_id) > 1 ORDER BY stadium.capacity DESC LIMIT 1; ",
      "SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.stadium_id = ( SELECT stadium_id  FROM concert  WHERE year > 2013  GROUP BY stadium_id  HAVING COUNT(*) > 1 ) ORDER BY capacity DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id HAVING COUNT(*) > 1) ORDER BY capacity DESC LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.name, s.capacity HAVING COUNT(*) > 1 ORDER BY s.capacity DESC LIMIT 1; ",
      "SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id HAVING COUNT(DISTINCT concert_id) > 1) ORDER BY capacity DESC LIMIT 1; ",
      "SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.name, s.capacity HAVING COUNT(DISTINCT c.concert_id) > 1 ORDER BY s.capacity DESC LIMIT 1; ",
      "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.name, s.capacity ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.name, s.capacity HAVING COUNT(*) > 1 LIMIT 1; ",
      "SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id HAVING COUNT(DISTINCT concert_id) > 1 ORDER BY COUNT(DISTINCT concert_id) DESC LIMIT 1); ",
      "SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.name, s.capacity HAVING COUNT(DISTINCT c.concert_id) > 1 LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT s.name, s.capacity  FROM stadium s  WHERE s.stadium_id = ( SELECT c.stadium_id  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id HAVING COUNT(c.concert_id) = ( SELECT MAX(concerts)  FROM ( SELECT COUNT(c.concert_id) AS concerts  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id ) ) ); ",
      "SELECT s.name, s.capacity  FROM stadium s  JOIN ( SELECT c.stadium_id, COUNT(c.concert_id) AS concerts  FROM concert c  WHERE c.year > 2013 GROUP BY c.stadium_id HAVING COUNT(c.concert_id) = ( SELECT MAX(concerts)  FROM ( SELECT COUNT(c.concert_id) AS concerts  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id ) ) ) AS sub ON s.stadium_id = sub.stadium_id; ",
      "SELECT s.name, s.capacity  FROM stadium s INNER JOIN ( SELECT DISTINCT c.stadium_id  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id ORDER BY COUNT(c.concert_id) DESC LIMIT 1 ) AS sub ON s.stadium_id = sub.stadium_id; ",
      "SELECT s.name, s.capacity  FROM stadium s  WHERE s.stadium_id IN ( SELECT c.stadium_id  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id HAVING COUNT(c.concert_id) = ( SELECT COUNT(c2.concert_id) FROM concert c2  WHERE c2.year > 2013  GROUP BY c2.stadium_id  ORDER BY COUNT(c2.concert_id) DESC LIMIT 1 ) ); ",
      "SELECT s.name, s.capacity  FROM stadium s  WHERE s.stadium_id = ( SELECT c.stadium_id  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id ORDER BY COUNT(c.concert_id) DESC LIMIT 1 ); ",
      "SELECT s.name, s.capacity  FROM stadium s  WHERE s.stadium_id = ( SELECT c.stadium_id  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id  HAVING COUNT(c.concert_id) >= ALL ( SELECT COUNT(c2.concert_id) FROM concert c2  WHERE c2.year > 2013  GROUP BY c2.stadium_id ) ); ",
      "SELECT s.name, s.capacity  FROM stadium s  JOIN ( SELECT c.stadium_id, COUNT(c.concert_id) AS concerts  FROM concert c  WHERE c.year > 2013 GROUP BY c.stadium_id ORDER BY concerts DESC LIMIT 1 ) AS sub ON s.stadium_id = sub.stadium_id; ",
      "SELECT s.name, s.capacity FROM stadium s, concert c WHERE c.year > 2013 AND c.stadium_id = s.stadium_id GROUP BY c.stadium_id HAVING COUNT(c.concert_id) = ( SELECT MAX(concerts)  FROM ( SELECT COUNT(c2.concert_id) AS concerts  FROM concert c2  WHERE c2.year > 2013  GROUP BY c2.stadium_id ) ); ",
      "SELECT s.name, s.capacity  FROM stadium s JOIN ( SELECT c.stadium_id  FROM concert c JOIN ( SELECT concert_id  FROM singer_in_concert ) AS sub ON c.concert_id = sub.concert_id WHERE c.year > 2013 GROUP BY c.stadium_id ORDER BY COUNT(c.concert_id) DESC LIMIT 1 ) AS sub2 ON s.stadium_id = sub2.stadium_id; ",
      "SELECT s.name, s.capacity  FROM stadium s  WHERE s.stadium_id = ANY ( SELECT c.stadium_id  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id HAVING COUNT(c.concert_id) = ( SELECT MAX(concerts)  FROM ( SELECT COUNT(c.concert_id) AS concerts  FROM concert c  WHERE c.year > 2013  GROUP BY c.stadium_id ) ) );"
    ]
  },
  {
    "id": 32,
    "db_id": "concert_singer",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "gpt_answers1": [
      "SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year != 2014;",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);",
      "SELECT s.name FROM stadium s WHERE NOT EXISTS (SELECT * FROM concert c WHERE c.stadium_id = s.stadium_id AND c.year = 2014);",
      "SELECT s.name FROM stadium s WHERE s.stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) GROUP BY name;",
      "SELECT DISTINCT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year != 2014;",
      "SELECT name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id AND concert.year != 2014;",
      "SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year <> 2014;",
      "SELECT s.name FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year NOT IN (2014);",
      "SELECT name FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year != 2014) ORDER BY name;"
    ],
    "gpt_answers2": [
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);",
      "SELECT name FROM stadium WHERE NOT EXISTS (SELECT stadium_id FROM concert WHERE year = 2014 AND stadium.stadium_id = concert.stadium_id);",
      "SELECT name FROM stadium EXCEPT SELECT stadium.name FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE year = 2014;",
      "SELECT name FROM stadium WHERE NOT EXISTS (SELECT stadium_id FROM concert WHERE year = 2014 AND concert.stadium_id = stadium.stadium_id);",
      "SELECT name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE year != 2014 OR year IS NULL;",
      "SELECT name FROM stadium WHERE stadium_id = ANY (SELECT stadium_id FROM concert WHERE year != 2014);",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) GROUP BY name;",
      "SELECT name FROM stadium JOIN (SELECT stadium_id FROM concert WHERE year != 2014 GROUP BY stadium_id) AS subq ON stadium.stadium_id = subq.stadium_id;",
      "SELECT name FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year != 2014) GROUP BY stadium_id;",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) GROUP BY stadium_id, name;"
    ],
    "gpt_answers3": [
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014); ",
      "SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year != 2014 OR c.year IS NULL; ",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) GROUP BY name; ",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) GROUP BY name HAVING COUNT(*) > 0; ",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014 AND stadium_id IS NOT NULL); ",
      "SELECT name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE stadium.stadium_id = concert.stadium_id AND year = 2014); ",
      "SELECT DISTINCT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014); ",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) AND capacity > 0; ",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) AND highest > 0; ",
      "SELECT DISTINCT name FROM stadium, concert WHERE stadium.stadium_id = concert.stadium_id AND (year != 2014 OR year IS NULL) ORDER BY name;"
    ]
  },
  {
    "id": 33,
    "db_id": "concert_singer",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "gpt_answers1": [
      "SELECT name  FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014); ",
      "SELECT name  FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) LIMIT 10; ",
      "SELECT name  FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014'); ",
      "SELECT name  FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014') LIMIT 10; ",
      "SELECT s.name  FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year <> 2014 OR c.year IS NULL; ",
      "SELECT s.name  FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year <> 2014 OR c.year IS NULL LIMIT 10; ",
      "SELECT s.name  FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id AND c.year = 2014 WHERE c.concert_id IS NULL; ",
      "SELECT s.name  FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id AND c.year = 2014 WHERE c.concert_id IS NULL LIMIT 10; ",
      "SELECT name  FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014' GROUP BY stadium_id); ",
      "SELECT name  FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014' GROUP BY stadium_id) LIMIT 10;"
    ],
    "gpt_answers2": [
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);",
      "SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year <> 2014 OR c.year IS NULL;",
      "SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IS NULL OR c.year <> 2014;",
      "SELECT s.name FROM stadium s WHERE NOT EXISTS (SELECT 1 FROM concert c WHERE c.stadium_id = s.stadium_id AND c.year = 2014);",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year <> 2014);",
      "SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id AND c.year = 2014 WHERE c.concert_id IS NULL;",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) UNION SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);",
      "SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year <> 2014 OR c.year IS NULL GROUP BY s.stadium_id HAVING COUNT(c.concert_id) = 0;",
      "SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year <> 2014 OR c.year IS NULL GROUP BY s.stadium_id HAVING COUNT(c.concert_id) = 0;",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) OR stadium_id NOT IN (SELECT stadium_id FROM concert);"
    ],
    "gpt_answers3": [
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)",
      "SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year != 2014 OR c.year IS NULL",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) AND capacity > 0",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) AND capacity > 10000",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) AND capacity >= 5000",
      "SELECT name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE year = 2014 AND stadium.stadium_id = concert.stadium_id)",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) ORDER BY capacity DESC",
      "SELECT name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year != 2014 OR concert.year IS NULL",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) ORDER BY name ASC",
      "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014) LIMIT 10"
    ]
  },
  {
    "id": 34,
    "db_id": "concert_singer",
    "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "gpt_answers1": [
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS singer_count  FROM concert  JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name, concert.theme; ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS singer_count  FROM concert  JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name, concert.theme; ",
      "SELECT concert_name, theme, COUNT(singer_id) AS singer_count  FROM concert  JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name, theme; ",
      "SELECT concert_name, theme, COUNT(*) AS singer_count  FROM concert, singer_in_concert  WHERE concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name, theme; ",
      "SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) AS singer_count  FROM concert, singer_in_concert  WHERE concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name, theme; ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS singer_count  FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name, concert.theme; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS singer_count  FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name, concert.theme; ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS singer_count  FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name, concert.theme; ",
      "SELECT concert_name, theme, COUNT(singer_id) AS singer_count  FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name, theme; ",
      "SELECT concert_name, theme, COUNT(*) AS singer_count  FROM concert, singer_in_concert  WHERE concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name, theme;"
    ],
    "gpt_answers2": [
      "SELECT concert_name, theme, COUNT(singer_id) as num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer.singer_id) as num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT c.concert_name, c.theme, COUNT(s.singer_id) as num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_id = sic.concert_id JOIN singer s ON sic.singer_id = s.singer_id GROUP BY c.concert_name, c.theme ",
      "SELECT concert_name, theme, COUNT(*) as num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(DISTINCT singer.singer_id) as num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT concert_name, theme, COUNT(DISTINCT singer_id) as num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) as num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) as num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) as num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(DISTINCT singer_in_concert.singer_id) as num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme"
    ],
    "gpt_answers3": [
      "SELECT concert_name, theme, COUNT(*) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS num_singers FROM concert, singer_in_concert WHERE concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS num_singers FROM concert LEFT OUTER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme ",
      "SELECT concert_name, theme, COUNT(*) AS num_singers FROM concert JOIN singer_in_concert USING (concert_id) GROUP BY concert_name, theme ",
      "SELECT concert_name, theme, COUNT(*) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme ",
      "SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert, singer_in_concert WHERE concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme"
    ]
  },
  {
    "id": 35,
    "db_id": "concert_singer",
    "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
    "gpt_answers1": [
      "SELECT concert_name, theme, COUNT(singer_id) AS num_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer.singer_id) AS num_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY concert.concert_name, concert.theme; ",
      "SELECT c.concert_name, c.theme, COUNT(sic.singer_id) AS num_of_singers FROM concert c INNER JOIN singer_in_concert sic ON c.concert_id = sic.concert_id GROUP BY c.concert_name, c.theme; ",
      "SELECT concert_name, theme, COUNT(singer.singer_id) AS num_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY concert_name, theme; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_of_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme; ",
      "SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) AS num_of_singers FROM concert LEFT JOIN singer_in_concert USING (concert_id) GROUP BY concert_name, theme; ",
      "SELECT concert_name, theme, COUNT(*) AS num_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme; ",
      "SELECT concert_name, theme, COUNT(singer.singer_id) AS num_of_singers FROM concert, singer_in_concert, singer WHERE concert.concert_id = singer_in_concert.concert_id AND singer_in_concert.singer_id = singer.singer_id GROUP BY concert_name, theme; ",
      "SELECT concert.concert_name, concert.theme, COUNT(DISTINCT singer.singer_id) AS num_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY concert.concert_name, concert.theme; ",
      "SELECT concert_name, theme, COUNT(DISTINCT singer_in_concert.singer_id) AS num_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme;"
    ],
    "gpt_answers2": [
      "SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) AS number_of_singers  FROM concert  JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers  FROM concert  INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name; ",
      "SELECT c.concert_name, c.theme, COUNT(sic.singer_id) AS number_of_singers  FROM concert c  JOIN singer_in_concert sic ON c.concert_id = sic.concert_id  GROUP BY c.concert_name; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers  FROM concert, singer_in_concert  WHERE concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name; ",
      "SELECT concert_name, theme, COUNT(*) AS number_of_singers  FROM concert c  JOIN singer_in_concert sic ON (c.concert_id = sic.concert_id)  GROUP BY c.concert_name; ",
      "SELECT concert_name, theme, COUNT(*) AS number_of_singers  FROM concert  LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers  FROM concert  LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name; ",
      "SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) AS number_of_singers  FROM concert  LEFT OUTER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert_name; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers  FROM concert  LEFT OUTER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name; ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS number_of_singers  FROM concert  LEFT OUTER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id  GROUP BY concert.concert_name;"
    ],
    "gpt_answers3": [
      "SELECT concert_name, theme, COUNT(singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY concert.concert_name; ",
      "SELECT concert_name, theme, (SELECT COUNT(singer_id) FROM singer_in_concert WHERE concert_id = concert.concert_id) AS number_of_singers FROM concert; ",
      "SELECT concert.concert_name, concert.theme, COUNT(*) AS number_of_singers FROM concert INNER JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name; ",
      "SELECT concert.concert_name, concert.theme, (SELECT COUNT(*) FROM singer_in_concert WHERE concert_id = concert.concert_id) AS number_of_singers FROM concert; ",
      "SELECT concert_name, theme, COUNT(*) AS number_of_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name; ",
      "SELECT concert_name, theme, COUNT(*) AS number_of_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id WHERE singer_in_concert.singer_id IS NOT NULL GROUP BY concert.concert_name; ",
      "SELECT concert_name, theme, COUNT(*) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name; ",
      "SELECT concert_name, theme, COUNT(singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme; ",
      "SELECT concert.concert_name, concert.theme, COUNT(singer.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY concert.concert_name, concert.theme;"
    ]
  },
  {
    "id": 36,
    "db_id": "concert_singer",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "gpt_answers1": [
      "SELECT name, COUNT(concert_id) AS num_concerts FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.singer_id; ",
      "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT s.name, COUNT(c.concert_id) AS num_concerts FROM singer s, concert c, singer_in_concert sic WHERE s.singer_id = sic.singer_id AND c.concert_id = sic.concert_id GROUP BY s.name; ",
      "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer, singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT s.name, COUNT(*) AS num_concerts FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name; ",
      "SELECT name, COUNT(*) AS num_concerts FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY name; ",
      "SELECT name, COUNT(concert_id) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY name; ",
      "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT s.name, COUNT(c.concert_id) AS num_concerts FROM singer s, concert c, singer_in_concert sic WHERE s.singer_id = sic.singer_id AND c.concert_id = sic.concert_id GROUP BY s.name; ",
      "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer, singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;"
    ],
    "gpt_answers2": [
      "SELECT singer.name, COUNT(singer_in_concert.singer_id) AS num_of_concerts  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  GROUP BY singer.name; ",
      "SELECT singer.name,  (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.singer_id = singer.singer_id) AS num_of_concerts  FROM singer; ",
      "SELECT singer.name, COUNT(concert.concert_id) AS num_of_concerts  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name; ",
      "SELECT singer.name,  (SELECT COUNT(*) FROM singer_in_concert  JOIN concert ON singer_in_concert.concert_id = concert.concert_id  WHERE singer_in_concert.singer_id = singer.singer_id) AS num_of_concerts  FROM singer; ",
      "SELECT singer.name, COUNT(DISTINCT concert.concert_id) AS num_of_concerts  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name; ",
      "SELECT singer.name,  (SELECT COUNT(*) FROM (SELECT DISTINCT concert_id FROM singer_in_concert WHERE singer_in_concert.singer_id = singer.singer_id)) AS num_of_concerts  FROM singer; ",
      "SELECT singer.name,  (SELECT COUNT(*) FROM (SELECT DISTINCT concert_id FROM singer_in_concert WHERE singer_id = singer.singer_id)) AS num_of_concerts  FROM singer; ",
      "SELECT singer.name,  (SELECT COUNT(DISTINCT concert_id) FROM singer_in_concert WHERE singer_id = singer.singer_id) AS num_of_concerts  FROM singer; ",
      "SELECT singer.name, COUNT(singer_in_concert.singer_id) AS num_of_concerts  FROM singer  LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(*) AS num_of_concerts  FROM singer  JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id  GROUP BY singer.name;"
    ],
    "gpt_answers3": [
      "SELECT singer.name, COUNT(concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name; ",
      "SELECT singer.name, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.singer_id = singer.singer_id) AS num_concerts FROM singer; ",
      "SELECT singer.name, COUNT(DISTINCT concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(*) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(DISTINCT concert_id) AS num_concerts FROM singer_in_concert JOIN singer ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, (SELECT COUNT(*) FROM concert WHERE concert.concert_id = singer_in_concert.concert_id) AS num_concerts FROM singer_in_concert JOIN singer ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.singer_id; ",
      "SELECT singer.name, COUNT(*) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(*) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.singer_id; ",
      "SELECT singer.name, COUNT(concert.concert_id) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id LEFT JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name;"
    ]
  },
  {
    "id": 37,
    "db_id": "concert_singer",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "gpt_answers1": [
      "SELECT singer.name, COUNT(singer_in_concert.singer_id) AS number_of_concerts FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(*) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(*) AS number_of_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(singer_in_concert.singer_id) AS number_of_concerts FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(*) AS number_of_concerts FROM singer RIGHT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(singer_in_concert.singer_id) AS number_of_concerts FROM singer RIGHT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.singer_id = singer.singer_id) AS number_of_concerts FROM singer; ",
      "SELECT singer.name, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.singer_id = singer.singer_id) AS number_of_concerts FROM singer GROUP BY singer.name; ",
      "SELECT singer.name, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.singer_id = singer.singer_id) FROM singer; ",
      "SELECT singer.name, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.singer_id = singer.singer_id) FROM singer GROUP BY singer.name;"
    ],
    "gpt_answers2": [
      "SELECT singer.name, COUNT(singer_in_concert.concert_id)  FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name,  (SELECT COUNT(*) FROM singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id) AS concert_count FROM singer; ",
      "SELECT singer.name, COUNT(DISTINCT concert.concert_id)  FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name; ",
      "SELECT singer.name,  (SELECT COUNT(*) FROM singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id) AS concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.singer_id; ",
      "SELECT singer.name, COUNT(singer_in_concert.singer_id) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.singer_id; ",
      "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(*) AS concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(DISTINCT concert.concert_id) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id LEFT JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(DISTINCT singer_in_concert.concert_id) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(*) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;"
    ],
    "gpt_answers3": [
      "SELECT singer.name, COUNT(*) AS concert_count FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT s.name, COUNT(c.concert_id) AS concert_count FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id INNER JOIN concert c ON sic.concert_id = c.concert_id GROUP BY s.name; ",
      "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT s.name, COUNT(sic.concert_id) AS concert_count FROM singer s, singer_in_concert sic WHERE s.singer_id = sic.singer_id GROUP BY s.name; ",
      "SELECT name, COUNT(*) AS concert_count FROM singer WHERE singer.singer_id IN (SELECT singer_in_concert.singer_id FROM singer_in_concert) GROUP BY name; ",
      "SELECT name, COUNT(concert_id) AS concert_count FROM singer WHERE singer.singer_id IN (SELECT singer_id FROM singer_in_concert) GROUP BY name; ",
      "SELECT singer.name, COUNT(*) AS concert_count FROM singer, singer_in_concert WHERE singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT s.name, COUNT(sic.concert_id) AS concert_count FROM singer s, singer_in_concert sic WHERE s.singer_id = sic.singer_id GROUP BY s.name; ",
      "SELECT singer.name, COUNT(*) AS concert_count FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name; ",
      "SELECT singer.name, COUNT(singer_in_concert.concert_id) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;"
    ]
  },
  {
    "id": 48,
    "db_id": "pets_1",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "gpt_answers1": [
      "SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\";",
      "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") AND pettype = \"dog\";",
      "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = (SELECT pettype FROM pets WHERE pettype = \"dog\"));",
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\");",
      "SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\" HAVING weight = (SELECT MIN(weight) FROM pets WHERE pettype = \"dog\");",
      "SELECT weight FROM pets WHERE pettype = \"dog\" ORDER BY pet_age ASC LIMIT 1;",
      "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") AND pettype = \"dog\" LIMIT 1;",
      "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") AND pettype = \"dog\" FETCH FIRST ROW ONLY;",
      "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") AND pettype = \"dog\" FETCH NEXT ROW ONLY;",
      "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") AND pettype = \"dog\" FETCH FIRST 1 ROWS ONLY;"
    ],
    "gpt_answers2": [
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\"",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\")",
      "SELECT weight FROM pets WHERE pettype = \"dog\" ORDER BY pet_age ASC LIMIT 1",
      "SELECT weight FROM pets WHERE pettype = \"dog\" ORDER BY pet_age LIMIT 1",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\" LIMIT 1)",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") LIMIT 1",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") ORDER BY weight LIMIT 1",
      "SELECT weight FROM pets WHERE pettype = \"dog\" ORDER BY pet_age LIMIT 1",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") ORDER BY weight ASC LIMIT 1",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\" ORDER BY weight) LIMIT 1"
    ],
    "gpt_answers3": [
      "SELECT weight FROM pets WHERE pettype = \"dog\" ORDER BY pet_age LIMIT 1; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\"); ",
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\"; ",
      "SELECT weight FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age = (SELECT MIN(age) FROM student WHERE fname = \"dog\"); ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets); ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(age) FROM student); ",
      "SELECT weight FROM pets JOIN has_pet ON pets.petid = has_pet.petid WHERE pettype = \"dog\" AND EXISTS (SELECT 1 FROM student WHERE student.stuid = has_pet.stuid AND student.age = (SELECT MIN(age) FROM student)); ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age IN (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\"); ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(age) FROM student WHERE pettype = \"dog\"); ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets) LIMIT 1;"
    ]
  },
  {
    "id": 49,
    "db_id": "pets_1",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "gpt_answers1": [
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\";",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\");",
      "SELECT weight FROM pets WHERE pettype = \"dog\" ORDER BY pet_age ASC LIMIT 1;",
      "SELECT weight FROM pets JOIN has_pet ON has_pet.petid = pets.petid JOIN student ON student.stuid = has_pet.stuid WHERE pettype = \"dog\" ORDER BY age DESC LIMIT 1;",
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets);",
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(age) FROM student JOIN has_pet ON has_pet.stuid = student.stuid WHERE pettype = \"dog\");",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\" GROUP BY pettype);",
      "SELECT weight FROM pets JOIN has_pet ON has_pet.petid = pets.petid JOIN student ON student.stuid = has_pet.stuid WHERE pettype = \"dog\" ORDER BY pet_age ASC LIMIT 1;",
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(age) FROM student WHERE pettype = \"dog\");",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(age) FROM student JOIN has_pet ON has_pet.stuid = student.stuid WHERE pettype = \"dog\") LIMIT 1"
    ],
    "gpt_answers2": [
      "SELECT MIN(weight)  FROM pets  WHERE pettype = 'dog'; ",
      "SELECT MIN(weight)  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1; ",
      "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1; ",
      "SELECT weight  FROM pets  WHERE pettype = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog'); ",
      "SELECT weight  FROM pets  WHERE pettype = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype LIKE '%dog%'); ",
      "SELECT weight  FROM pets  WHERE pettype = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM pets); ",
      "SELECT weight  FROM pets  WHERE pettype = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype IN ('dog')); ",
      "SELECT pettype, MIN(weight)  FROM pets  WHERE pettype = 'dog'; ",
      "SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age  LIMIT 1; ",
      "SELECT weight  FROM pets  WHERE pettype = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog')  LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\"); ",
      "SELECT MIN(weight) FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") LIMIT 1; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") ORDER BY weight ASC LIMIT 1; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" ORDER BY pet_age ASC, weight ASC LIMIT 1; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") ORDER BY weight ASC LIMIT 1; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") LIMIT 1; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" ORDER BY pet_age, weight LIMIT 1; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") ORDER BY weight ASC; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") ORDER BY weight ASC LIMIT 1 OFFSET 0; ",
      "SELECT weight FROM pets WHERE pettype = \"dog\" AND pet_age IN (SELECT MIN(pet_age) FROM pets WHERE pettype = \"dog\") ORDER BY weight ASC LIMIT 1;"
    ]
  },
  {
    "id": 55,
    "db_id": "pets_1",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM student  JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female'  AND pets.pettype = 'dog' ",
      "SELECT COUNT(pets.petid) FROM student  LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female'  AND pets.pettype = 'dog' ",
      "SELECT COUNT(*) FROM student, has_pet, pets WHERE student.sex = 'female'  AND student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype = 'dog' ",
      "SELECT COUNT(*) FROM student WHERE sex = 'female'  AND stuid IN (SELECT stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'dog') ",
      "SELECT COUNT(*) FROM student WHERE EXISTS (SELECT * FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE student.stuid = has_pet.stuid  AND pettype = 'dog') AND sex = 'female' ",
      "SELECT COUNT(*) FROM student WHERE sex = 'female'  AND stuid IN (SELECT stuid FROM has_pet  WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) ",
      "SELECT COUNT(*)  FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female'  AND pets.pettype = 'dog' ",
      "SELECT COUNT(*) FROM student WHERE sex = 'female'  AND EXISTS (SELECT * FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE student.stuid = has_pet.stuid  AND pettype = 'dog') ",
      "SELECT COUNT(*) FROM student WHERE sex = 'female'  AND stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) ",
      "SELECT COUNT(*) FROM student WHERE sex = 'female'  AND stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog' AND petid IN (SELECT petid FROM has_pet WHERE stuid = student.stuid)))"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*)  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student, has_pet, pets  WHERE student.stuid = has_pet.stuid  AND has_pet.petid = pets.petid  AND student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student  NATURAL JOIN has_pet  NATURAL JOIN pets  WHERE student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student, has_pet, pets  WHERE student.stuid = has_pet.stuid  AND has_pet.petid = pets.petid  AND student.sex = 'female'  AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON pets.petid = has_pet.petid  WHERE student.sex = 'female'  AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student, has_pet, pets  WHERE student.stuid = has_pet.stuid  AND has_pet.petid = pets.petid  AND student.sex = 'female'  AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student, has_pet, pets  WHERE student.stuid = has_pet.stuid  AND has_pet.petid = pets.petid  AND student.sex = 'female'  AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*)  FROM student  NATURAL JOIN has_pet  NATURAL JOIN pets  WHERE student.sex = 'female' AND pets.pettype = 'dog';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid INNER JOIN pets p ON hp.petid = p.petid WHERE s.sex = 'female' AND p.pettype = 'dog'; ",
      "SELECT COUNT(*) FROM student INNER JOIN has_pet USING (stuid) INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*) FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*) FROM student LEFT JOIN (has_pet JOIN pets ON has_pet.petid = pets.petid) ON student.stuid = has_pet.stuid WHERE student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*) FROM student NATURAL JOIN has_pet NATURAL JOIN pets WHERE student.sex = 'female' AND pets.pettype = 'dog'; ",
      "SELECT COUNT(*) FROM (SELECT * FROM student NATURAL JOIN has_pet) NATURAL JOIN pets WHERE sex = 'female' AND pettype = 'dog'; ",
      "SELECT COUNT(*) FROM (SELECT * FROM student NATURAL JOIN has_pet) JOIN pets USING (petid) WHERE sex = 'female' AND pettype = 'dog'; ",
      "SELECT COUNT(*) FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND s.sex = 'female' AND p.pettype = 'dog'; ",
      "SELECT COUNT(*) FROM student s, has_pet hp JOIN pets p ON hp.petid = p.petid WHERE s.stuid = hp.stuid AND s.sex = 'female' AND p.pettype = 'dog';"
    ]
  },
  {
    "id": 58,
    "db_id": "pets_1",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "gpt_answers1": [
      "SELECT s.fname  FROM student s  JOIN has_pet hp ON s.stuid = hp.stuid  JOIN pets p ON hp.petid = p.petid  WHERE p.pettype IN ('cat', 'dog'); ",
      "SELECT fname  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' OR pettype = 'dog')); ",
      "SELECT fname  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')  UNION  SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT s.fname  FROM student s  INNER JOIN has_pet hp ON s.stuid = hp.stuid  INNER JOIN pets p ON hp.petid = p.petid  WHERE p.pettype = 'cat' OR p.pettype = 'dog'; ",
      "SELECT s.fname  FROM student s, has_pet hp, pets p  WHERE s.stuid = hp.stuid  AND hp.petid = p.petid  AND p.pettype IN ('cat', 'dog'); ",
      "SELECT fname  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet  WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')  OR petid IN (SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT fname  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))  OR stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT fname  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog'))); ",
      "SELECT fname  FROM student  WHERE EXISTS (SELECT 1 FROM has_pet hp, pets p WHERE student.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype IN ('cat', 'dog')); ",
      "SELECT s.fname  FROM student s  WHERE EXISTS (SELECT 1 FROM has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid  AND p.pettype = 'cat' OR p.pettype = 'dog');"
    ],
    "gpt_answers2": [
      "SELECT student.fname  FROM student  WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet, pets WHERE has_pet.petid = pets.petid AND pettype IN ('cat', 'dog')); ",
      "SELECT fname  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog'))); ",
      "SELECT fname  FROM student  WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' OR pettype = 'dog')); ",
      "SELECT student.fname  FROM student, has_pet, pets  WHERE student.stuid = has_pet.stuid  AND has_pet.petid = pets.petid  AND pets.pettype IN ('cat', 'dog'); ",
      "SELECT student.fname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog'); ",
      "SELECT student.fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'; ",
      "SELECT fname  FROM student  WHERE EXISTS (SELECT * FROM has_pet, pets WHERE has_pet.stuid = student.stuid AND has_pet.petid = pets.petid AND pets.pettype IN ('cat', 'dog')); ",
      "SELECT student.fname  FROM student  WHERE EXISTS (SELECT * FROM has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype IN ('cat', 'dog')); ",
      "SELECT DISTINCT student.fname  FROM student, has_pet, pets  WHERE has_pet.stuid = student.stuid  AND has_pet.petid = pets.petid  AND pets.pettype IN ('cat', 'dog'); ",
      "SELECT student.fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' OR pets.pettype = 'dog';"
    ],
    "gpt_answers3": [
      "SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog'); ",
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet WHERE petid IN ( SELECT petid FROM pets WHERE pettype IN ('cat', 'dog') ) ); ",
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog') ); ",
      "SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'; ",
      "SELECT student.fname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype = 'cat' OR pets.pettype = 'dog'; ",
      "SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid IN ( SELECT petid FROM pets WHERE pettype IN ('cat', 'dog') ); ",
      "SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'; ",
      "SELECT student.fname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype IN ('cat', 'dog'); ",
      "SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'; ",
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog') );"
    ]
  },
  {
    "id": 59,
    "db_id": "pets_1",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "gpt_answers1": [
      "SELECT DISTINCT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype IN ('cat', 'dog'); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype IN ('cat', 'dog')); ",
      "SELECT student.fname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype IN ('cat', 'dog'); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog'))); ",
      "SELECT s.fname FROM student AS s, has_pet AS hp, pets AS p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = 'cat' OR p.pettype = 'dog'; ",
      "SELECT DISTINCT(student.fname) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype = 'cat' OR pets.pettype = 'dog'; ",
      "SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog'); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' OR pettype = 'dog')); ",
      "SELECT DISTINCT fname FROM has_pet JOIN student USING (stuid) JOIN pets USING (petid) WHERE pettype IN ('cat', 'dog'); ",
      "SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog';"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' OR pettype = 'dog'; ",
      "SELECT DISTINCT student.fname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype IN ('cat', 'dog'); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' OR pettype = 'dog')); ",
      "SELECT fname FROM student WHERE EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE student.stuid = has_pet.stuid AND pets.pettype IN ('cat', 'dog')); ",
      "SELECT DISTINCT student.fname FROM student NATURAL JOIN has_pet NATURAL JOIN pets WHERE pettype IN ('cat', 'dog'); ",
      "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog')); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') UNION SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') INTERSECT SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid GROUP BY student.fname HAVING ANY(pets.pettype IN ('cat', 'dog')); ",
      "SELECT fname FROM student WHERE EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE student.stuid = has_pet.stuid AND (pets.pettype = 'cat' OR pets.pettype = 'dog'));"
    ],
    "gpt_answers3": [
      "SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = \"cat\" OR pettype = \"dog\";",
      "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype IN (\"cat\", \"dog\");",
      "SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pettype = \"cat\" OR pettype = \"dog\");",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = \"cat\" OR pettype = \"dog\");",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\" OR pettype = \"dog\"));",
      "SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid = has_pet.stuid AND petid IN (SELECT petid FROM pets WHERE pettype = \"cat\" OR pettype = \"dog\"));",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\") OR petid IN (SELECT petid FROM pets WHERE pettype = \"dog\"));",
      "SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid = has_pet.stuid AND (SELECT pettype FROM pets WHERE petid = has_pet.petid) IN (\"cat\", \"dog\"));",
      "SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid = has_pet.stuid AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = \"cat\" OR pettype = \"dog\"));",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE EXISTS (SELECT * FROM pets WHERE pets.petid = has_pet.petid AND pettype IN (\"cat\", \"dog\")));"
    ]
  },
  {
    "id": 60,
    "db_id": "pets_1",
    "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
    "gpt_answers1": [
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) AND stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT s.fname FROM student AS s INNER JOIN has_pet AS hp1 ON s.stuid = hp1.stuid INNER JOIN has_pet AS hp2 ON s.stuid = hp2.stuid INNER JOIN pets AS p1 ON hp1.petid = p1.petid INNER JOIN pets AS p2 ON hp2.petid = p2.petid WHERE p1.pettype = 'cat' AND p2.pettype = 'dog'; ",
      "SELECT DISTINCT s.fname FROM student AS s LEFT JOIN has_pet AS hp1 ON s.stuid = hp1.stuid LEFT JOIN pets AS p1 ON hp1.petid = p1.petid AND p1.pettype = 'cat' LEFT JOIN has_pet AS hp2 ON s.stuid = hp2.stuid LEFT JOIN pets AS p2 ON hp2.petid = p2.petid AND p2.pettype = 'dog' WHERE p1.petid IS NOT NULL AND p2.petid IS NOT NULL; ",
      "SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat') AND stuid IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog'); ",
      "SELECT s.fname FROM student AS s WHERE EXISTS (SELECT 1 FROM has_pet AS hp1, has_pet AS hp2, pets AS p1, pets AS p2 WHERE s.stuid = hp1.stuid AND hp1.petid = p1.petid AND p1.pettype = 'cat' AND s.stuid = hp2.stuid AND hp2.petid = p2.petid AND p2.pettype = 'dog'); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog')); ",
      "SELECT s.fname FROM student AS s WHERE (SELECT COUNT(pettype) FROM has_pet AS hp, pets AS p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND (pettype = 'cat' OR pettype = 'dog')) = 2; ",
      "SELECT DISTINCT s.fname FROM student AS s WHERE (SELECT COUNT(pettype) FROM has_pet AS hp, pets AS p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND (pettype = 'cat' OR pettype = 'dog')) = 2; ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) INTERSECT SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT fname FROM (SELECT s.fname, COUNT(DISTINCT p.pettype) AS num_pet_types FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid INNER JOIN pets AS p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog') GROUP BY s.fname) AS sub WHERE num_pet_types = 2;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT fname  FROM student  WHERE stuid IN (SELECT stuid  FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'cat')  AND stuid IN (SELECT stuid  FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'dog')  LIMIT 10; ",
      "SELECT DISTINCT student.fname  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets AS cat_pet ON has_pet.petid = cat_pet.petid AND cat_pet.pettype = 'cat'  INNER JOIN pets AS dog_pet ON has_pet.petid = dog_pet.petid AND dog_pet.pettype = 'dog'  LIMIT 10; ",
      "SELECT DISTINCT fname  FROM student  WHERE EXISTS (SELECT 1  FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE student.stuid = has_pet.stuid AND pets.pettype = 'cat')  AND EXISTS (SELECT 1  FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE student.stuid = has_pet.stuid AND pets.pettype = 'dog')  LIMIT 10; ",
      "SELECT DISTINCT s.fname  FROM student s, has_pet hp1, pets p1, has_pet hp2, pets p2  WHERE s.stuid = hp1.stuid AND hp1.petid = p1.petid AND p1.pettype = 'cat'  AND s.stuid = hp2.stuid AND hp2.petid = p2.petid AND p2.pettype = 'dog'  LIMIT 10; ",
      "SELECT DISTINCT s.fname  FROM student AS s  JOIN has_pet AS hp1 ON s.stuid = hp1.stuid  JOIN pets AS p1 ON hp1.petid = p1.petid AND p1.pettype = 'cat'  JOIN has_pet AS hp2 ON s.stuid = hp2.stuid  JOIN pets AS p2 ON hp2.petid = p2.petid AND p2.pettype = 'dog'  LIMIT 10; ",
      "SELECT DISTINCT fname  FROM (SELECT DISTINCT s.fname  FROM student s  INNER JOIN has_pet hp ON s.stuid = hp.stuid  INNER JOIN pets p ON hp.petid = p.petid  WHERE p.pettype = 'cat') AS cat_owners  INNER JOIN (SELECT DISTINCT s.fname  FROM student s  INNER JOIN has_pet hp ON s.stuid = hp.stuid  INNER JOIN pets p ON hp.petid = p.petid  WHERE p.pettype = 'dog') AS dog_owners ON cat_owners.fname = dog_owners.fname  LIMIT 10; ",
      "SELECT DISTINCT fname  FROM student  WHERE stuid IN (SELECT DISTINCT stuid  FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'cat')  AND stuid IN (SELECT DISTINCT stuid  FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'dog')  LIMIT 10; ",
      "SELECT DISTINCT fname  FROM student  WHERE EXISTS (SELECT * FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE student.stuid = has_pet.stuid AND pets.pettype = 'cat')  AND EXISTS (SELECT * FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE student.stuid = has_pet.stuid AND pets.pettype = 'dog')  LIMIT 10; ",
      "SELECT DISTINCT fname  FROM student  WHERE stuid IN (SELECT DISTINCT stuid  FROM has_pet  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'cat' OR pettype = 'dog'  GROUP BY stuid  HAVING COUNT(DISTINCT pettype) = 2)  LIMIT 10; ",
      "SELECT DISTINCT student.fname  FROM student  INNER JOIN has_pet AS hp1 ON student.stuid = hp1.stuid  INNER JOIN pets AS p1 ON hp1.petid = p1.petid AND p1.pettype = 'cat'  INNER JOIN has_pet AS hp2 ON student.stuid = hp2.stuid  INNER JOIN pets AS p2 ON hp2.petid = p2.petid AND p2.pettype = 'dog'  LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT fname  FROM student s  WHERE EXISTS (SELECT * FROM has_pet hp1 INNER JOIN pets p1 ON hp1.petid = p1.petid WHERE hp1.stuid = s.stuid AND p1.pettype = 'cat') AND EXISTS (SELECT * FROM has_pet hp2 INNER JOIN pets p2 ON hp2.petid = p2.petid WHERE hp2.stuid = s.stuid AND p2.pettype = 'dog')  ",
      "SELECT s.fname  FROM student s  JOIN has_pet hp1 ON s.stuid = hp1.stuid  JOIN pets p1 ON hp1.petid = p1.petid  JOIN has_pet hp2 ON s.stuid = hp2.stuid  JOIN pets p2 ON hp2.petid = p2.petid  WHERE p1.pettype = 'cat' AND p2.pettype = 'dog'  ",
      "SELECT fname  FROM student  WHERE stuid IN  (SELECT s.stuid  FROM student s  JOIN has_pet hp1 ON s.stuid = hp1.stuid  JOIN pets p1 ON hp1.petid = p1.petid  WHERE p1.pettype = 'cat'  AND s.stuid IN (SELECT s.stuid  FROM student s  JOIN has_pet hp2 ON s.stuid = hp2.stuid  JOIN pets p2 ON hp2.petid = p2.petid  WHERE p2.pettype = 'dog'))  ",
      "SELECT s.fname FROM student s, has_pet hp1, has_pet hp2, pets p1, pets p2 WHERE s.stuid = hp1.stuid AND s.stuid = hp2.stuid AND hp1.petid = p1.petid AND hp2.petid = p2.petid  AND p1.pettype = 'cat' AND p2.pettype = 'dog'  ",
      "SELECT s.fname FROM (student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid)  JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p2 ON hp2.petid = p2.petid WHERE p1.pettype = 'cat'  AND p2.pettype = 'dog'  ",
      "SELECT fname  FROM student  WHERE stuid IN  (SELECT stuid  FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'cat')  AND stuid IN  (SELECT stuid  FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'dog')  ",
      "SELECT fname  FROM student  WHERE stuid IN  (SELECT h1.stuid  FROM has_pet h1, pets p1, has_pet h2, pets p2  WHERE h1.petid = p1.petid AND h2.petid = p2.petid  AND h1.stuid = h2.stuid AND p1.pettype = 'cat' AND p2.pettype = 'dog')  ",
      "SELECT fname  FROM student  WHERE stuid IN  (SELECT stuid  FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'cat') INTERSECT SELECT fname  FROM student  WHERE stuid IN  (SELECT stuid  FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'dog')  ",
      "SELECT fname  FROM student s  WHERE EXISTS  (SELECT * FROM has_pet hp WHERE hp.stuid = s.stuid  AND EXISTS (SELECT * FROM pets p WHERE p.petid = hp.petid AND p.pettype = 'cat')) AND EXISTS  (SELECT * FROM has_pet hp WHERE hp.stuid = s.stuid  AND EXISTS (SELECT * FROM pets p WHERE p.petid = hp.petid AND p.pettype = 'dog'))  ",
      "SELECT fname  FROM student  WHERE stuid IN  (SELECT stuid  FROM has_pet  WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))  AND stuid IN  (SELECT stuid  FROM has_pet  WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))"
    ]
  },
  {
    "id": 61,
    "db_id": "pets_1",
    "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "gpt_answers1": [
      "SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid INNER JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' OR p.pettype = 'dog' GROUP BY s.fname HAVING COUNT(DISTINCT p.pettype) = 2 ",
      "SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid INNER JOIN pets p1 ON hp1.petid = p1.petid INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid INNER JOIN pets p2 ON hp2.petid = p2.petid WHERE p1.pettype = 'cat' AND p2.pettype = 'dog' ",
      "SELECT DISTINCT s.fname FROM student s WHERE s.stuid IN ( SELECT stuid FROM has_pet hp INNER JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' ) AND s.stuid IN ( SELECT stuid FROM has_pet hp INNER JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog' ) ",
      "SELECT DISTINCT s.fname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND (p.pettype = 'cat' OR p.pettype = 'dog') GROUP BY s.fname HAVING COUNT(DISTINCT p.pettype) = 2 ",
      "SELECT DISTINCT s.fname FROM student s WHERE EXISTS ( SELECT 1 FROM has_pet hp INNER JOIN pets p ON hp.petid = p.petid WHERE hp.stuid = s.stuid AND p.pettype = 'cat' ) AND EXISTS ( SELECT 1 FROM has_pet hp INNER JOIN pets p ON hp.petid = p.petid WHERE hp.stuid = s.stuid AND p.pettype = 'dog' ) ",
      "SELECT DISTINCT s.fname FROM student s WHERE EXISTS ( SELECT 1 FROM has_pet hp1 INNER JOIN pets p1 ON hp1.petid = p1.petid WHERE hp1.stuid = s.stuid AND p1.pettype = 'cat' ) AND EXISTS ( SELECT 1 FROM has_pet hp2 INNER JOIN pets p2 ON hp2.petid = p2.petid WHERE hp2.stuid = s.stuid AND p2.pettype = 'dog' ) ",
      "SELECT DISTINCT s.fname FROM student s, has_pet hp1, pets p1, has_pet hp2, pets p2 WHERE s.stuid = hp1.stuid AND hp1.petid = p1.petid AND s.stuid = hp2.stuid AND hp2.petid = p2.petid AND p1.pettype = 'cat' AND p2.pettype = 'dog' ",
      "SELECT DISTINCT s.fname FROM student s WHERE (SELECT COUNT(DISTINCT p.pettype) FROM has_pet hp INNER JOIN pets p ON hp.petid = p.petid WHERE hp.stuid = s.stuid AND p.pettype IN ('cat', 'dog') GROUP BY hp.stuid) = 2 ",
      "SELECT DISTINCT s.fname FROM student s, has_pet hp1, pets p1, has_pet hp2, pets p2 WHERE s.stuid = hp1.stuid AND hp1.petid = p1.petid AND s.stuid = hp2.stuid AND hp2.petid = p2.petid AND (p1.pettype = 'cat' OR p2.pettype = 'dog') GROUP BY s.fname HAVING COUNT(DISTINCT CASE WHEN p1.pettype = 'cat' THEN 1 WHEN p2.pettype = 'dog' THEN 2 END) = 2 ",
      "SELECT DISTINCT s.fname FROM student s WHERE EXISTS ( SELECT 1 FROM has_pet hp1 INNER JOIN pets p1 ON hp1.petid = p1.petid WHERE hp1.stuid = s.stuid AND p1.pettype = 'cat' ) INTERSECT SELECT DISTINCT s.fname FROM student s WHERE EXISTS ( SELECT 1 FROM has_pet hp2 INNER JOIN pets p2 ON hp2.petid = p2.petid WHERE hp2.stuid = s.stuid AND p2.pettype = 'dog' )"
    ],
    "gpt_answers2": [
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet WHERE petid IN ( SELECT petid FROM pets WHERE pettype = 'cat' ) ) AND stuid IN ( SELECT stuid FROM has_pet WHERE petid IN ( SELECT petid FROM pets WHERE pettype = 'dog' ) ) ",
      "SELECT fname FROM student WHERE EXISTS ( SELECT 1 FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.stuid = has_pet.stuid AND pettype = 'cat' ) AND EXISTS ( SELECT 1 FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.stuid = has_pet.stuid AND pettype = 'dog' ) ",
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet WHERE petid IN ( SELECT petid FROM pets WHERE pettype = 'cat' ) AND petid IN ( SELECT petid FROM pets WHERE pettype = 'dog' ) ) ",
      "SELECT fname FROM student WHERE EXISTS ( SELECT 1 FROM has_pet INNER JOIN pets AS cat_pets ON has_pet.petid = cat_pets.petid WHERE student.stuid = has_pet.stuid AND cat_pets.pettype = 'cat' ) AND EXISTS ( SELECT 1 FROM has_pet INNER JOIN pets AS dog_pets ON has_pet.petid = dog_pets.petid WHERE student.stuid = has_pet.stuid AND dog_pets.pettype = 'dog' ) ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) AND stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) ",
      "SELECT fname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid  AND pettype = 'cat' AND EXISTS ( SELECT 1 FROM has_pet as hp2, pets as p2  WHERE student.stuid = hp2.stuid AND hp2.petid = p2.petid AND p2.pettype = 'dog' ) ",
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' ) AND stuid IN ( SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog' ) ",
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'cat'  INTERSECT SELECT stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog' ) ",
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pettype = 'cat'  GROUP BY stuid HAVING COUNT(petid) >= 2 ) AND stuid IN ( SELECT stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog' GROUP BY stuid HAVING COUNT(petid) >= 2 ) ",
      "SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet WHERE petid IN ( SELECT petid FROM pets WHERE pettype = 'cat' ) GROUP BY stuid HAVING COUNT(petid) >= 1 ) AND stuid IN ( SELECT stuid FROM has_pet WHERE petid IN ( SELECT petid FROM pets WHERE pettype = 'dog' ) GROUP BY stuid HAVING COUNT(petid) >= 1 )"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT fname FROM student WHERE stuid IN(SELECT stuid FROM has_pet WHERE petid IN(SELECT petid FROM pets WHERE pettype = 'cat')) AND stuid IN(SELECT stuid FROM has_pet WHERE petid IN(SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT DISTINCT fname FROM student WHERE stuid IN(SELECT stuid FROM has_pet WHERE petid IN(SELECT petid FROM pets WHERE pettype = 'cat' OR pettype = 'dog')) GROUP BY fname HAVING COUNT(DISTINCT pettype) = 2; ",
      "SELECT DISTINCT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND s.stuid IN(SELECT s.stuid FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog'); ",
      "SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp1 ON s.stuid = hp1.stuid INNER JOIN pets p1 ON hp1.petid = p1.petid INNER JOIN has_pet hp2 ON s.stuid = hp2.stuid INNER JOIN pets p2 ON hp2.petid = p2.petid WHERE p1.pettype = 'cat' AND p2.pettype = 'dog'; ",
      "SELECT DISTINCT fname FROM student WHERE EXISTS(SELECT 1 FROM has_pet WHERE stuid = student.stuid AND petid IN(SELECT petid FROM pets WHERE pettype = 'cat')) AND EXISTS(SELECT 1 FROM has_pet WHERE stuid = student.stuid AND petid IN(SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT DISTINCT fname FROM student WHERE EXISTS(SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'cat') AND EXISTS(SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'dog'); ",
      "SELECT DISTINCT s.fname FROM student s JOIN has_pet hp1 ON s.stuid = hp1.stuid JOIN pets p1 ON hp1.petid = p1.petid JOIN has_pet hp2 ON s.stuid = hp2.stuid JOIN pets p2 ON hp2.petid = p2.petid WHERE p1.pettype = 'cat' AND p2.pettype = 'dog'; ",
      "SELECT DISTINCT fname FROM student WHERE stuid IN(SELECT stuid FROM has_pet WHERE petid IN(SELECT petid FROM pets WHERE pettype = 'cat')) INTERSECT SELECT DISTINCT fname FROM student WHERE stuid IN(SELECT stuid FROM has_pet WHERE petid IN(SELECT petid FROM pets WHERE pettype = 'dog')); ",
      "SELECT DISTINCT fname FROM student WHERE stuid IN(SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat') AND stuid IN(SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog'); ",
      "SELECT DISTINCT fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND EXISTS(SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'dog');"
    ]
  },
  {
    "id": 67,
    "db_id": "pets_1",
    "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "gpt_answers1": [
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"dog\")) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\")); ",
      "SELECT fname FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\")) AND stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"dog\")); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"dog\")) AND stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = \"cat\"); ",
      "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = \"dog\" AND student.stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = \"cat\"); ",
      "SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = \"dog\" AND student.stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\")); ",
      "SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = \"dog\" AND student.stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\")); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"dog\")) EXCEPT SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\")); ",
      "SELECT fname FROM student WHERE EXISTS (SELECT petid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = \"dog\") AND NOT EXISTS (SELECT petid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = \"cat\"); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = \"dog\" AND student.stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = \"cat\")); ",
      "SELECT fname FROM student WHERE EXISTS (SELECT 1 FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = \"dog\") AND NOT EXISTS (SELECT 1 FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = \"cat\");"
    ],
    "gpt_answers2": [
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) EXCEPT SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'); ",
      "SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat'); ",
      "SELECT fname FROM student WHERE EXISTS (SELECT * FROM (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' INTERSECT SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat') AS tmp WHERE tmp.stuid = student.stuid) = 0; ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat'); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat'); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog') EXCEPT SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat'); ",
      "SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat')); ",
      "SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'));"
    ],
    "gpt_answers3": [
      "SELECT student.fname FROM student  WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog') AND student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'); ",
      "SELECT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog' AND student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'); ",
      "SELECT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE EXISTS (SELECT * FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND has_pet.stuid = student.stuid)  AND NOT EXISTS (SELECT * FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'  AND has_pet.stuid = student.stuid); ",
      "SELECT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  GROUP BY student.fname  HAVING COUNT(DISTINCT pets.pettype) = 1; ",
      "SELECT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND (SELECT COUNT(*) FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE has_pet.stuid = student.stuid  AND pets.pettype = 'cat') = 0; ",
      "SELECT DISTINCT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'); ",
      "SELECT student.fname FROM student  WHERE EXISTS (SELECT * FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE has_pet.stuid = student.stuid  AND pets.pettype = 'dog')  AND NOT EXISTS (SELECT * FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE has_pet.stuid = student.stuid  AND pets.pettype = 'cat'); ",
      "SELECT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat')  GROUP BY student.fname; ",
      "SELECT student.fname FROM student  WHERE EXISTS (SELECT * FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE has_pet.stuid = student.stuid  AND pets.pettype = 'dog')  AND NOT EXISTS (SELECT * FROM has_pet  JOIN pets ON has_pet.petid = pets.petid  WHERE has_pet.stuid = student.stuid  AND pets.pettype = 'cat')  ORDER BY student.fname ASC; ",
      "SELECT student.fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  GROUP BY student.fname  HAVING SUM(CASE WHEN pets.pettype = 'cat' THEN 1 ELSE 0 END) = 0;"
    ]
  },
  {
    "id": 68,
    "db_id": "pets_1",
    "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "gpt_answers1": [
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets GROUP BY pettype);",
      "SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1;",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets ORDER BY pet_age ASC LIMIT 1);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pet_age IS NOT NULL);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pet_age != '');",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pet_age > 0);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pet_age < 100);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pet_age > 0 AND pet_age < 100);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pet_age != '' AND pet_age != 'NA');"
    ],
    "gpt_answers2": [
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) LIMIT 1; ",
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) ORDER BY pet_age LIMIT 1; ",
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) ORDER BY pet_age ASC LIMIT 1; ",
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) ORDER BY weight LIMIT 1; ",
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) ORDER BY weight DESC LIMIT 1; ",
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND ROWNUM = 1; ",
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND LIMIT 1; ",
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND petid in (SELECT petid FROM has_pet) LIMIT 1; ",
      "SELECT pettype, weight  FROM pets  WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND petid IN (SELECT petid FROM has_pet) LIMIT 1; ",
      "SELECT pettype, weight  FROM pets p INNER JOIN has_pet hp ON p.petid = hp.petid WHERE pet_age = (SELECT MIN(pet_age) FROM pets) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) LIMIT 1;",
      "SELECT pettype, weight FROM pets WHERE petid IN (SELECT petid FROM pets ORDER BY pet_age ASC LIMIT 1);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND rownum = 1;",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND ROWNUM <= 1;",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets LIMIT 1);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND ROWNUM = 1;",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets ORDER BY pet_age ASC LIMIT 1);",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND rownum <= 1;",
      "SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) AND rownum <= 1;"
    ]
  },
  {
    "id": 76,
    "db_id": "pets_1",
    "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "gpt_answers1": [
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet) ",
      "SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid ",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT DISTINCT stuid FROM has_pet) ",
      "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid ",
      "SELECT s.fname, s.age FROM student s, has_pet h WHERE s.stuid = h.stuid ",
      "SELECT s.fname, s.age FROM student s INNER JOIN has_pet h ON s.stuid = h.stuid ",
      "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.fname, student.age ",
      "SELECT student.fname, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid IS NOT NULL ",
      "SELECT fname, age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid) ",
      "SELECT student.fname, student.age FROM student LEFT OUTER JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.stuid IS NOT NULL"
    ],
    "gpt_answers2": [
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
      "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid",
      "SELECT s.fname, s.age FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid)",
      "SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid",
      "SELECT s.fname, s.age FROM student AS s JOIN has_pet AS hp ON s.stuid = hp.stuid",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid)",
      "SELECT fname, age FROM student WHERE stuid = ANY (SELECT stuid FROM has_pet)",
      "SELECT fname, age FROM student WHERE EXISTS (SELECT stuid FROM has_pet WHERE has_pet.stuid = student.stuid)",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE stuid IS NOT NULL)"
    ],
    "gpt_answers3": [
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
      "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid",
      "SELECT s.fname, s.age FROM student s, has_pet hp WHERE s.stuid = hp.stuid",
      "SELECT fname, age FROM student WHERE stuid EXISTS (SELECT stuid FROM has_pet)",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid)",
      "SELECT fname, age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid)",
      "SELECT s.fname, s.age FROM student s WHERE s.stuid IN (SELECT hp.stuid FROM has_pet hp)",
      "SELECT student.fname, student.age FROM student, has_pet WHERE student.stuid = has_pet.stuid",
      "SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid",
      "SELECT fname, age FROM student WHERE EXISTS (SELECT * FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid)"
    ]
  },
  {
    "id": 77,
    "db_id": "pets_1",
    "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "gpt_answers1": [
      "SELECT DISTINCT fname, age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid ",
      "SELECT fname, age  FROM student  WHERE stuid IN ( SELECT stuid  FROM has_pet ) ",
      "SELECT DISTINCT student.fname, student.age  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid ",
      "SELECT DISTINCT fname, age  FROM student, has_pet  WHERE student.stuid = has_pet.stuid ",
      "SELECT fname, age  FROM student  INNER JOIN has_pet USING (stuid) ",
      "SELECT DISTINCT student.fname, student.age  FROM student  JOIN has_pet USING (stuid) ",
      "SELECT DISTINCT fname, age  FROM student  WHERE EXISTS ( SELECT 1  FROM has_pet  WHERE student.stuid = has_pet.stuid ) ",
      "SELECT DISTINCT student.fname, student.age  FROM student, has_pet  WHERE student.stuid = has_pet.stuid ",
      "SELECT student.fname, student.age  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  GROUP BY student.fname ",
      "SELECT student.fname, student.age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  GROUP BY student.fname"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);",
      "SELECT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid;",
      "SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;",
      "SELECT fname, age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid = has_pet.stuid);",
      "SELECT DISTINCT fname, age FROM student NATURAL JOIN has_pet;",
      "SELECT student.fname, student.age FROM student, has_pet WHERE student.stuid = has_pet.stuid;",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid);",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet HAVING COUNT(*) > 0);",
      "SELECT DISTINCT student.fname, student.age FROM student, has_pet WHERE student.stuid = has_pet.stuid;",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet) GROUP BY fname, age;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)",
      "SELECT fname, age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets))",
      "SELECT s.fname, s.age FROM student s, has_pet h WHERE s.stuid = h.stuid",
      "SELECT student.fname, student.age FROM student, has_pet WHERE student.stuid = has_pet.stuid",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE petid IN (SELECT petid FROM has_pet))))",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE EXISTS (SELECT stuid FROM has_pet WHERE student.stuid = has_pet.stuid))))",
      "SELECT fname, age FROM student WHERE EXISTS (SELECT stuid FROM has_pet WHERE student.stuid = has_pet.stuid)",
      "SELECT fname, age FROM student WHERE stuid IN (SELECT DISTINCT stuid FROM has_pet)",
      "SELECT DISTINCT fname, age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.stuid IS NOT NULL"
    ]
  },
  {
    "id": 85,
    "db_id": "pets_1",
    "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "gpt_answers1": [
      "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\" AND pet_age = 3)); ",
      "SELECT s.lname FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid INNER JOIN pets p ON hp.petid = p.petid WHERE p.pettype = \"cat\" AND p.pet_age = 3; ",
      "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = \"cat\" AND pet_age = 3); ",
      "SELECT lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = \"cat\" AND p.pet_age = 3; ",
      "SELECT s.lname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = \"cat\" AND p.pet_age = 3; ",
      "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\")) AND stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_age = 3)); ",
      "SELECT lname FROM student WHERE stuid = ANY (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = \"cat\" AND pet_age = 3); ",
      "SELECT lname FROM student WHERE stuid = (SELECT stuid FROM has_pet WHERE petid = (SELECT petid FROM pets WHERE pettype = \"cat\" AND pet_age = 3)); ",
      "SELECT s.lname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = \"cat\" AND p.pet_age = 3 LIMIT 1; ",
      "SELECT s.lname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = \"cat\" AND p.pet_age = 3 ORDER BY s.lname DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = \"cat\" AND pet_age = 3)); ",
      "SELECT lname FROM student WHERE stuid = (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = \"cat\" AND pet_age = 3); ",
      "SELECT lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = \"cat\" AND pet_age = 3 ORDER BY lname DESC LIMIT 1; ",
      "SELECT lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = \"cat\" AND p.pet_age = 3 ORDER BY lname DESC LIMIT 1; ",
      "SELECT lname FROM student WHERE stuid = (SELECT student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = \"cat\" AND pets.pet_age = 3); ",
      "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = \"cat\" AND p.pet_age = 3 ORDER BY s.lname DESC LIMIT 1; ",
      "SELECT s.lname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = \"cat\" AND p.pet_age = 3 ORDER BY s.lname DESC LIMIT 1; ",
      "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = \"cat\" AND p.pet_age = 3 ORDER BY s.lname DESC LIMIT 1; ",
      "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = \"cat\" AND p.pet_age = 3 ORDER BY s.lname ASC LIMIT 1; ",
      "SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = \"cat\" AND p.pet_age = 3 ORDER BY s.lname FETCH FIRST 1 ROWS ONLY;"
    ],
    "gpt_answers3": [
      "SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3); ",
      "SELECT s.lname FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid INNER JOIN pets AS p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3; ",
      "SELECT lname FROM student WHERE stuid = (SELECT stuid FROM has_pet WHERE petid = (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3)); ",
      "SELECT s.lname FROM student s, has_pet hp, pets p WHERE s.stuid = hp.stuid AND hp.petid = p.petid AND p.pettype = 'cat' AND p.pet_age = 3; ",
      "SELECT lname FROM student WHERE stuid = ANY (SELECT stuid FROM has_pet WHERE petid = ANY (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3)); ",
      "SELECT lname FROM student WHERE EXISTS (SELECT * FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.stuid = has_pet.stuid AND pettype = 'cat' AND pet_age = 3); ",
      "SELECT lname FROM student WHERE stuid = (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3)); ",
      "SELECT lname FROM student WHERE stuid = (SELECT stuid FROM has_pet WHERE EXISTS (SELECT * FROM pets WHERE has_pet.petid = pets.petid AND pettype = 'cat' AND pet_age = 3)); ",
      "SELECT lname FROM student WHERE stuid = (SELECT stuid FROM has_pet WHERE petid = (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3) LIMIT 1); ",
      "SELECT lname FROM student WHERE stuid = (SELECT stuid FROM has_pet WHERE stuid = student.stuid AND petid = (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3));"
    ]
  },
  {
    "id": 91,
    "db_id": "car_1",
    "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "gpt_answers1": [
      "SELECT continents.contid, continents.continent, COUNT(countries.countryid)  FROM continents JOIN countries ON continents.contid = countries.continent  GROUP BY continents.contid; ",
      "SELECT contid, continent, COUNT(countryid)  FROM continents INNER JOIN countries ON continents.contid = countries.continent  GROUP BY continent; ",
      "SELECT continents.contid, continents.continent, (SELECT COUNT(*) FROM countries  WHERE countries.continent = continents.contid) AS numOfCountries  FROM continents; ",
      "SELECT continents.contid, continents.continent, COUNT(countries.countryid)  FROM continents  LEFT JOIN countries ON continents.contid = countries.continent  GROUP BY continents.contid; ",
      "SELECT continents.contid, continents.continent, COUNT(DISTINCT countries.countryid)  FROM continents  LEFT JOIN countries ON continents.contid = countries.continent  GROUP BY continents.contid; ",
      "SELECT contid, continent, (SELECT COUNT(*)  FROM countries  WHERE countries.continent = continents.contid) AS numOfCountries  FROM continents; ",
      "SELECT continents.contid, continents.continent, COUNT(*)  FROM continents, countries  WHERE continents.contid = countries.continent  GROUP BY continents.contid; ",
      "SELECT contid, continent, COUNT(countries.countryid)  FROM continents, countries  WHERE continents.contid = countries.continent  GROUP BY continent; ",
      "SELECT continents.contid, continents.continent, COUNT(countryid)  FROM continents, countries  WHERE continents.contid = countries.continent  GROUP BY continents.contid; ",
      "SELECT contid, continent, COUNT(distinct countryid)  FROM continents, countries  WHERE continents.contid = countries.continent  GROUP BY continents.contid;"
    ],
    "gpt_answers2": [
      "SELECT contid, continent, COUNT(countryname) as country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid ",
      "SELECT contid, continent, (SELECT COUNT(*) FROM countries WHERE countries.continent = continents.contid) as country_count FROM continents ",
      "SELECT continents.contid, continents.continent, COUNT(countries.countryname) as country_count FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid ",
      "SELECT continents.contid, continents.continent, COUNT(*) as country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid ",
      "SELECT continents.contid, continents.continent, (SELECT COUNT(countries.countryname) FROM countries WHERE countries.continent = continents.contid) as country_count FROM continents ",
      "SELECT continents.contid, continents.continent, COUNT(countries.countryname) as country_count FROM continents INNER JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid ",
      "SELECT continents.contid, continents.continent, (SELECT COUNT(*) FROM countries WHERE countries.continent = continents.contid) as country_count FROM continents JOIN countries ON continents.contid = countries.continent ",
      "SELECT c.contid, c.continent, COUNT(cn.countryname) as country_count FROM continents c JOIN countries cn ON c.contid = cn.continent GROUP BY c.contid ",
      "SELECT continents.contid, continents.continent, COUNT(countries.countryname) as country_count FROM continents, countries WHERE continents.contid = countries.continent GROUP BY continents.contid ",
      "SELECT continents.contid, continents.continent, COUNT(countries.countryname) as country_count FROM continents INNER JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid"
    ],
    "gpt_answers3": [
      "SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS country_count FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent; ",
      "SELECT continents.contid, continents.continent,  (SELECT COUNT(*) FROM countries WHERE countries.continent = continents.contid) AS country_count FROM continents; ",
      "SELECT continents.contid, continents.continent,  (SELECT COUNT(countries.countryid) FROM countries WHERE countries.continent = continents.contid) AS country_count FROM continents; ",
      "SELECT continents.contid, continents.continent,  COUNT(countries.countryid) AS country_count FROM continents INNER JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent; ",
      "SELECT continents.contid, continents.continent,  (SELECT COUNT(*) FROM countries WHERE countries.continent = continents.contid) AS country_count FROM continents INNER JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent; ",
      "SELECT continents.contid, continents.continent,  COUNT(countries.countryid) AS country_count FROM continents, countries WHERE continents.contid = countries.continent GROUP BY continents.contid, continents.continent; ",
      "SELECT continents.contid, continents.continent,  (SELECT COUNT(*) FROM countries WHERE countries.continent = continents.contid) AS country_count FROM continents, countries WHERE continents.contid = countries.continent GROUP BY continents.contid, continents.continent; ",
      "SELECT continents.contid, continents.continent, COUNT(*) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid; ",
      "SELECT continents.contid, continents.continent,  COUNT(countries.countryid) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid; ",
      "SELECT continents.contid, continents.continent,  (SELECT COUNT(*) FROM countries WHERE countries.continent = continents.contid) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid;"
    ]
  },
  {
    "id": 98,
    "db_id": "car_1",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "gpt_answers1": [
      "SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1; ",
      "SELECT model FROM (SELECT model_list.model, AVG(weight) AS average_weight FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid GROUP BY model_list.model) AS subquery WHERE weight < average_weight LIMIT 1; ",
      "SELECT model FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)) LIMIT 1; ",
      "SELECT model_list.model FROM model_list INNER JOIN cars_data ON cars_data.id = model_list.modelid WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1; ",
      "SELECT model FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)) ORDER BY modelid ASC LIMIT 1; ",
      "SELECT model FROM model_list WHERE modelid = (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1); ",
      "SELECT model FROM model_list WHERE modelid = (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)) FETCH FIRST ROW ONLY; ",
      "SELECT model FROM (SELECT model_list.model, cars_data.weight, AVG(cars_data.weight) OVER() AS average_weight FROM model_list JOIN cars_data ON cars_data.id = model_list.modelid) AS subquery WHERE weight < average_weight LIMIT 1; ",
      "SELECT model_list.model FROM model_list LEFT JOIN cars_data ON cars_data.id = model_list.modelid GROUP BY model_list.model HAVING AVG(cars_data.weight) < (SELECT AVG(weight) FROM cars_data) LIMIT 1; ",
      "SELECT model FROM (SELECT model_list.model, cars_data.weight, AVG(cars_data.weight) OVER() AS average_weight FROM model_list LEFT JOIN cars_data ON cars_data.id = model_list.modelid) AS subquery WHERE weight < average_weight LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data) ) ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM cars_data GROUP BY modelid HAVING weight < (SELECT AVG(weight) FROM cars_data) ) ",
      "SELECT model FROM model_list WHERE modelid = ( SELECT modelid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1 ) ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data GROUP BY modelid ) ) ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ) ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data WHERE modelid = cars_data.modelid ) ) ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data WHERE modelid = model_list.modelid ) ) ",
      "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.modelid WHERE weight < (SELECT AVG(weight) FROM cars_data) ",
      "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.modelid GROUP BY model HAVING weight < (SELECT AVG(weight) FROM cars_data) ",
      "SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.modelid WHERE weight < (SELECT AVG(weight) FROM cars_data) GROUP BY model"
    ],
    "gpt_answers3": [
      "SELECT model_list.model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) ",
      "SELECT model FROM car_names WHERE makeid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)) ",
      "SELECT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) ",
      "SELECT model_list.model FROM model_list, cars_data WHERE model_list.modelid = cars_data.id AND cars_data.weight < (SELECT AVG(weight) FROM cars_data) ",
      "SELECT model FROM car_names WHERE model IN (SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)) ",
      "SELECT DISTINCT model FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) ",
      "SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id AND cars_data.weight < (SELECT AVG(weight) FROM cars_data) GROUP BY model_list.model ",
      "SELECT DISTINCT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) ",
      "SELECT m.model FROM model_list AS m JOIN cars_data AS c ON m.modelid = c.id WHERE c.weight < (SELECT AVG(weight) FROM cars_data) ",
      "SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id GROUP BY model_list.model HAVING AVG(cars_data.weight) < (SELECT AVG(weight) FROM cars_data)"
    ]
  },
  {
    "id": 99,
    "db_id": "car_1",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "gpt_answers1": [
      "SELECT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1; ",
      "SELECT model_list.model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1; ",
      "SELECT model_list.model FROM model_list, car_names, cars_data WHERE model_list.modelid = car_names.model AND car_names.makeid = cars_data.id AND cars_data.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1; ",
      "SELECT model_list.model FROM cars_data, car_names, model_list WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND cars_data.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1; ",
      "SELECT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 1; ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT model FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data) ) ) LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.modelid WHERE car_names.makeid IN ( SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data) ) LIMIT 1; ",
      "SELECT model_list.model FROM model_list WHERE EXISTS ( SELECT * FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) AND car_names.model = model_list.model ) LIMIT 1; ",
      "SELECT model_list.model FROM model_list, car_names, cars_data WHERE model_list.modelid = car_names.model AND car_names.makeid = cars_data.id AND cars_data.weight < (SELECT AVG(weight) FROM cars_data) GROUP BY model_list.model LIMIT 1; ",
      "SELECT model_list.model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data) GROUP BY model_list.model LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT model FROM model_list WHERE modelid IN ( SELECT makeid FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ); ",
      "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model WHERE car_names.makeid IN ( SELECT id FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ); ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data) ) AND maker IN ( SELECT id FROM car_makers ); ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT makeid FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ) ); ",
      "SELECT model FROM model_list JOIN car_names ON model_list.model = car_names.model WHERE car_names.model IN ( SELECT model FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ) ); ",
      "SELECT model FROM model_list WHERE maker = ( SELECT id FROM car_makers WHERE id IN ( SELECT maker FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.id = ( SELECT maker FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ) ) ) ); ",
      "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.id IN ( SELECT maker FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ) ); ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT makeid FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ) AND maker = ( SELECT id FROM car_makers ); ",
      "SELECT model FROM model_list JOIN car_names ON model_list.model = car_names.model WHERE car_names.makeid IN ( SELECT id FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ); ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT makeid FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE weight < ( SELECT AVG(weight) FROM cars_data ) ) );"
    ],
    "gpt_answers3": [
      "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)); ",
      "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM car_names WHERE makeid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))); ",
      "SELECT ML.model FROM model_list AS ML INNER JOIN car_names AS CN ON ML.modelid = CN.model INNER JOIN cars_data AS CD ON CN.makeid = CD.id WHERE CD.weight < (SELECT AVG(weight) FROM cars_data); ",
      "SELECT DISTINCT ML.model FROM model_list AS ML, car_names AS CN, cars_data AS CD WHERE ML.modelid = CN.model AND CN.makeid = CD.id AND CD.weight < (SELECT AVG(weight) FROM cars_data); ",
      "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)) LIMIT 10; ",
      "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM car_names WHERE makeid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))) LIMIT 10; ",
      "SELECT ML.model FROM model_list AS ML INNER JOIN car_names AS CN ON ML.modelid = CN.model INNER JOIN cars_data AS CD ON CN.makeid = CD.id WHERE CD.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 10; ",
      "SELECT DISTINCT ML.model FROM model_list AS ML, car_names AS CN, cars_data AS CD WHERE ML.modelid = CN.model AND CN.makeid = CD.id AND CD.weight < (SELECT AVG(weight) FROM cars_data) LIMIT 10; ",
      "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)) ORDER BY model LIMIT 10; ",
      "SELECT model FROM model_list WHERE modelid IN (SELECT makeid FROM car_names WHERE makeid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data))) ORDER BY model LIMIT 10;"
    ]
  },
  {
    "id": 100,
    "db_id": "car_1",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "gpt_answers1": [
      "SELECT DISTINCT car_makers.fullname FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers, cars_data WHERE car_makers.id = cars_data.id AND cars_data.year = 1970; ",
      "SELECT car_makers.fullname FROM car_makers, cars_data WHERE car_makers.id = cars_data.id AND cars_data.year = 1970 GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970 GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname FROM car_makers WHERE car_makers.id IN ( SELECT cars_data.id FROM cars_data WHERE cars_data.year = 1970 ); ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers WHERE car_makers.id IN ( SELECT cars_data.id FROM cars_data WHERE cars_data.year = 1970 ); ",
      "SELECT car_makers.fullname FROM car_makers WHERE EXISTS ( SELECT 1 FROM cars_data WHERE cars_data.id = car_makers.id AND cars_data.year = 1970 ); ",
      "SELECT car_makers.fullname FROM car_makers WHERE EXISTS ( SELECT cars_data.id FROM cars_data WHERE cars_data.id = car_makers.id AND cars_data.year = 1970 ); ",
      "SELECT maker FROM model_list WHERE model_list.maker IN ( SELECT cars_data.id FROM cars_data WHERE cars_data.year = 1970 ); ",
      "SELECT maker FROM model_list WHERE EXISTS ( SELECT cars_data.id FROM cars_data WHERE cars_data.id = model_list.maker AND cars_data.year = 1970 );"
    ],
    "gpt_answers2": [
      "SELECT car_makers.fullname FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT car_makers.fullname FROM car_makers WHERE car_makers.id IN (SELECT id FROM cars_data WHERE year = 1970); ",
      "SELECT car_makers.fullname FROM car_makers, cars_data WHERE car_makers.id = cars_data.id AND cars_data.year = 1970; ",
      "SELECT car_makers.fullname FROM car_makers WHERE car_makers.id IN (SELECT maker FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE year = 1970)); ",
      "SELECT car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT car_makers.fullname FROM car_makers, cars_data, model_list WHERE car_makers.id = model_list.maker AND model_list.modelid = cars_data.id AND cars_data.year = 1970; ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.year = '1970'; ",
      "SELECT car_makers.fullname FROM car_makers WHERE car_makers.id IN (SELECT maker FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE year = '1970')); ",
      "SELECT car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.year = '1970';"
    ],
    "gpt_answers3": [
      "SELECT maker FROM car_makers WHERE maker IN (SELECT maker FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE year = 1970)); ",
      "SELECT DISTINCT maker FROM car_makers cm, model_list ml, cars_data cd WHERE cm.id = ml.maker AND ml.modelid = cd.id AND cd.year = 1970; ",
      "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT DISTINCT maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN cars_data ON model_list.modelid = cars_data.id GROUP BY maker HAVING cars_data.year = 1970; ",
      "SELECT DISTINCT maker FROM car_makers, model_list, cars_data WHERE car_makers.id = model_list.maker AND model_list.modelid = cars_data.id AND cars_data.year = 1970; ",
      "SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT maker FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE year = 1970)); ",
      "SELECT DISTINCT maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE year = 1970; ",
      "SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT maker FROM model_list WHERE modelid IN (SELECT id FROM cars_data) AND year = 1970); ",
      "SELECT DISTINCT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON model_list.modelid = cars_data.id WHERE year = 1970; ",
      "SELECT DISTINCT car_makers.maker FROM car_makers, model_list, cars_data WHERE car_makers.id = model_list.maker AND model_list.modelid = cars_data.id AND cars_data.year = 1970;"
    ]
  },
  {
    "id": 101,
    "db_id": "car_1",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "gpt_answers1": [
      "SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT maker FROM model_list WHERE modelid IN (SELECT makeid FROM car_names WHERE model IN (SELECT id FROM cars_data WHERE year = 1970))); ",
      "SELECT DISTINCT maker FROM car_makers WHERE id IN (SELECT maker FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970); ",
      "SELECT DISTINCT car_makers.maker FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.year = 1970; ",
      "SELECT DISTINCT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT DISTINCT car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT DISTINCT maker FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND year = 1970; ",
      "SELECT DISTINCT c1.maker FROM car_makers c1, model_list m, car_names c2, cars_data d WHERE c1.id = m.maker AND m.model = c2.model AND c2.makeid = d.id AND d.year = 1970; ",
      "SELECT DISTINCT cm.maker FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.year = 1970; ",
      "SELECT DISTINCT car_makers.maker FROM car_makers, model_list, cars_data, car_names WHERE model_list.maker = car_makers.id AND cars_data.id = car_names.makeid AND car_names.model = model_list.model AND cars_data.year = 1970; ",
      "SELECT DISTINCT cm.maker FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model INNER JOIN cars_data cd ON cd.id = cn.makeid WHERE cd.year = 1970;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT DISTINCT fullname FROM car_makers WHERE id IN ( SELECT maker FROM model_list WHERE modelid IN ( SELECT makeid FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE year = 1970 ) ) ); ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT DISTINCT fullname FROM car_makers INNER JOIN ( SELECT maker FROM model_list INNER JOIN ( SELECT makeid FROM car_names INNER JOIN ( SELECT id FROM cars_data WHERE year = 1970 ) AS filtered_data ON car_names.makeid = filtered_data.id ) AS filtered_names ON model_list.modelid = filtered_names.makeid ) AS filtered_models ON car_makers.id = filtered_models.maker; ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.modelid = car_names.makeid AND car_names.makeid = cars_data.id AND cars_data.year = 1970; ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers WHERE car_makers.id IN ( SELECT maker FROM model_list WHERE modelid IN ( SELECT makeid FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE year = 1970 ) ) ); ",
      "SELECT DISTINCT fullname FROM car_makers WHERE id IN ( SELECT maker FROM model_list WHERE modelid IN ( SELECT makeid FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE year = 1970 ) ) ); ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.modelid = car_names.makeid AND car_names.makeid = cars_data.id AND cars_data.year = 1970; ",
      "SELECT DISTINCT maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970; ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers WHERE car_makers.id IN ( SELECT maker FROM car_names WHERE makeid IN ( SELECT id FROM cars_data WHERE year = 1970 ) );"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.makeid = model_list.modelid JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970;  ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.makeid = model_list.modelid INNER JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970;  ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.year = 1970;  ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;  ",
      "SELECT car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.makeid = model_list.modelid INNER JOIN cars_data ON car_data.id = car_names.makeid WHERE car_data.year = 1970 GROUP BY car_makers.fullname;  ",
      "SELECT car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.makeid = model_list.modelid INNER JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970 GROUP BY car_makers.fullname;  ",
      "SELECT DISTINCT maker.fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.makeid = model_list.modelid JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970;  ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;  ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.makeid = model_list.modelid JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970;  ",
      "SELECT DISTINCT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;"
    ]
  },
  {
    "id": 102,
    "db_id": "car_1",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "gpt_answers1": [
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers, model_list, car_names, cars_data WHERE model_list.maker = car_makers.id AND car_names.model = model_list.model AND cars_data.id = car_names.makeid ORDER BY cars_data.year LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model INNER JOIN cars_data ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers, model_list, car_names, cars_data WHERE model_list.maker = car_makers.id AND car_names.model = model_list.model AND cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers LEFT JOIN model_list ON model_list.maker = car_makers.id LEFT JOIN car_names ON car_names.model = model_list.model LEFT JOIN cars_data ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers LEFT JOIN model_list ON model_list.maker = car_makers.id LEFT JOIN car_names ON car_names.model = model_list.model LEFT JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year IN (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers, model_list, car_names, cars_data WHERE model_list.maker = car_makers.id AND car_names.model = model_list.model AND cars_data.id = car_names.makeid AND cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT cm.maker, cd.year FROM car_makers AS cm JOIN model_list AS ml ON ml.maker = cm.id JOIN car_names AS cn ON cn.model = ml.model JOIN cars_data AS cd ON cd.id = cn.makeid WHERE cd.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) ORDER BY year LIMIT 10;"
    ],
    "gpt_answers2": [
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model INNER JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list USING (maker) JOIN car_names USING (model) JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) GROUP BY cars_data.year LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM car_makers, model_list, car_names, cars_data WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM car_makers, model_list, car_names, cars_data WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) AND car_names.makeid = cars_data.id AND car_names.model = model_list.model AND car_makers.id = model_list.maker LIMIT 10;",
      "SELECT car_makers.maker, cars_data.year FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker LEFT JOIN car_names ON model_list.model = car_names.model LEFT JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY car_makers.maker, cars_data.year HAVING cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker LEFT JOIN car_names ON model_list.model = car_names.model LEFT JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers LEFT OUTER JOIN model_list ON car_makers.id = model_list.maker LEFT OUTER JOIN car_names ON model_list.model = car_names.model LEFT OUTER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT C.maker, D.year FROM car_makers AS C JOIN model_list AS M ON C.id = M.maker JOIN car_names AS N ON M.model = N.model JOIN cars_data AS D ON N.makeid = D.id WHERE D.year IN (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers NATURAL JOIN model_list NATURAL JOIN car_names NATURAL JOIN cars_data WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list USING (id) JOIN car_names USING (model) JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 10; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.year = (SELECT MIN(year) FROM cars_data) GROUP BY car_makers.maker, cars_data.year LIMIT 10;"
    ]
  },
  {
    "id": 103,
    "db_id": "car_1",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "gpt_answers1": [
      "SELECT car_makers.maker, cars_data.year FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id ORDER BY cars_data.year ASC LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid  AND car_names.model = model_list.model AND model_list.maker = car_makers.id ORDER BY cars_data.year ASC LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid LEFT JOIN model_list ON car_names.model = model_list.model LEFT JOIN car_makers ON model_list.maker = car_makers.id ORDER BY cars_data.year ASC LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year = (SELECT year FROM cars_data ORDER BY year ASC LIMIT 1) LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id HAVING cars_data.year = MIN(cars_data.year) LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.maker, cars_data.year ORDER BY cars_data.year ASC LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year IN (SELECT MIN(year) FROM cars_data) LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data) LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year = (SELECT year FROM cars_data ORDER BY year LIMIT 1) LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT maker, MIN(year) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(year) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(year) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(year) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(year) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id; ",
      "SELECT car_makers.maker, MIN(year) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id;"
    ],
    "gpt_answers3": [
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1; ",
      "SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid; ",
      "SELECT car_makers.maker, MIN(year) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id; ",
      "SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data); ",
      "SELECT maker, year FROM ( SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1); ",
      "SELECT maker, year FROM ( SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid); ",
      "SELECT cm.maker, cd.year FROM car_makers cm JOIN model_list ml ON ml.maker = cm.id JOIN car_names cn ON cn.model = ml.model JOIN cars_data cd ON cd.id = cn.makeid WHERE cd.year = (SELECT MIN(year) FROM cars_data); ",
      "SELECT car_makers.maker, cars_data.year  FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id ORDER BY cars_data.year LIMIT 1; ",
      "SELECT car_makers.maker, cars_data.year  FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.model INNER JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year = (SELECT MIN(year) FROM cars_data); ",
      "SELECT car_makers.maker, cars_data.year  FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.year = ( SELECT MIN(year) FROM cars_data );"
    ]
  },
  {
    "id": 105,
    "db_id": "car_1",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "gpt_answers1": [
      "SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.model = car_names.model WHERE car_names.makeid IN (SELECT id FROM cars_data WHERE year > 1980); ",
      "SELECT DISTINCT model FROM model_list WHERE modelid IN (SELECT model FROM car_names WHERE makeid IN (SELECT id FROM cars_data WHERE year > 1980)); ",
      "SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980; ",
      "SELECT DISTINCT model FROM model_list WHERE modelid IN (SELECT model FROM car_names WHERE makeid IN (SELECT id FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year > 1980)); ",
      "SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980 GROUP BY model; ",
      "SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.model = car_names.model WHERE car_names.makeid IN (SELECT id FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year > 1980); ",
      "SELECT DISTINCT model FROM model_list WHERE modelid IN (SELECT model FROM car_names WHERE makeid IN (SELECT id FROM cars_data WHERE year > 1980)) GROUP BY model; ",
      "SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980 GROUP BY model HAVING COUNT(*) > 0; ",
      "SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.model = car_names.model WHERE car_names.makeid IN (SELECT id FROM cars_data WHERE year > 1980) GROUP BY model HAVING COUNT(*) > 0; ",
      "SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980 GROUP BY model ORDER BY model ASC;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980; ",
      "SELECT model_list.model FROM cars_data, model_list, car_names WHERE cars_data.year > 1980 AND cars_data.id = car_names.makeid AND car_names.model = model_list.model; ",
      "SELECT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980; ",
      "SELECT model_list.model FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid LEFT JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980 GROUP BY model_list.model; ",
      "SELECT DISTINCT model_list.model FROM cars_data, model_list, car_names WHERE cars_data.year > 1980 AND cars_data.id IN (SELECT makeid FROM car_names) AND car_names.model = model_list.model; ",
      "SELECT DISTINCT model_list.model FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid LEFT JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980 AND model_list.model IS NOT NULL; ",
      "SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980 GROUP BY model_list.model HAVING COUNT(DISTINCT cars_data.id) > 0; ",
      "SELECT DISTINCT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980 AND cars_data.id IS NOT NULL; ",
      "SELECT DISTINCT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980; ",
      "SELECT DISTINCT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980 AND cars_data.id NOT NULL;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT model  FROM model_list  WHERE modelid IN ( SELECT model  FROM car_names  WHERE makeid IN ( SELECT id  FROM cars_data  WHERE year > 1980 ) ); ",
      "SELECT DISTINCT model  FROM model_list  INNER JOIN car_names ON model_list.model = car_names.model  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.year > 1980; ",
      "SELECT DISTINCT model  FROM model_list  INNER JOIN car_names ON model_list.model = car_names.model  WHERE makeid IN ( SELECT id  FROM cars_data  WHERE year > 1980 ); ",
      "SELECT DISTINCT model  FROM model_list  JOIN car_names ON model_list.model = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.year > 1980; ",
      "SELECT DISTINCT model  FROM model_list, car_names, cars_data  WHERE model_list.model = car_names.model  AND car_names.makeid = cars_data.id  AND cars_data.year > 1980; ",
      "SELECT DISTINCT model  FROM model_list  INNER JOIN car_names ON model_list.model = car_names.model  WHERE car_names.makeid IN ( SELECT id  FROM cars_data  WHERE year > 1980 ); ",
      "SELECT DISTINCT model  FROM model_list  INNER JOIN car_names ON model_list.model = car_names.model  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year > 1980; ",
      "SELECT DISTINCT model  FROM model_list  WHERE modelid IN ( SELECT model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE year > 1980 ); ",
      "SELECT DISTINCT model  FROM model_list  WHERE modelid IN ( SELECT model  FROM car_names  WHERE makeid IN ( SELECT id  FROM cars_data  WHERE year > 1980 ) ); ",
      "SELECT DISTINCT model  FROM model_list  INNER JOIN car_names ON model_list.model = car_names.model  WHERE car_names.makeid IN ( SELECT id  FROM cars_data  WHERE year > 1980 );"
    ]
  },
  {
    "id": 108,
    "db_id": "car_1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "gpt_answers1": [
      "SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.maker) DESC LIMIT 1; ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(DISTINCT maker) DESC LIMIT 1); ",
      "SELECT countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT maker) AS cnt FROM car_makers GROUP BY country))); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(maker) DESC LIMIT 1); ",
      "SELECT c.countryname FROM countries c JOIN (SELECT country, COUNT(DISTINCT maker) AS num_makers FROM car_makers GROUP BY country) cm ON c.countryid = cm.country WHERE cm.num_makers = (SELECT MAX(num_makers) FROM (SELECT COUNT(DISTINCT maker) AS num_makers FROM car_makers GROUP BY country) t); ",
      "SELECT c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) = (SELECT MAX(num_makers) FROM (SELECT COUNT(DISTINCT maker) AS num_makers FROM car_makers GROUP BY country) t); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM (SELECT car_makers.country, COUNT(DISTINCT car_makers.maker) AS num_makers FROM car_makers GROUP BY car_makers.country) t WHERE num_makers = (SELECT MAX(num_makers) FROM (SELECT car_makers.country, COUNT(DISTINCT car_makers.maker) AS num_makers FROM car_makers GROUP BY car_makers.country) t2)); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) = (SELECT COUNT(maker) FROM car_makers GROUP BY country ORDER BY COUNT(maker) DESC LIMIT 1)); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT car_makers.country FROM car_makers GROUP BY car_makers.country ORDER BY COUNT(DISTINCT car_makers.maker) DESC LIMIT 1); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM (SELECT country, COUNT(DISTINCT maker) AS num_makers FROM car_makers GROUP BY country ORDER BY num_makers DESC LIMIT 1) t);"
    ],
    "gpt_answers2": [
      "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.maker) DESC LIMIT 1; ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(maker) DESC LIMIT 1); ",
      "SELECT c.countryname FROM countries AS c INNER JOIN (SELECT country, COUNT(maker) AS num_makers FROM car_makers GROUP BY country) AS cm ON c.countryid = cm.country ORDER BY cm.num_makers DESC LIMIT 1; ",
      "SELECT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(cm.maker) = (SELECT MAX(num_makers) FROM (SELECT COUNT(maker) AS num_makers FROM car_makers GROUP BY country) AS subquery); ",
      "SELECT c.countryname FROM countries c, car_makers cm WHERE c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) =  (SELECT MAX(num_makers) FROM (SELECT COUNT(DISTINCT maker) AS num_makers FROM car_makers GROUP BY country) AS subquery); ",
      "SELECT countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(maker) = (SELECT MAX(num_makers) FROM (SELECT country, COUNT(maker) AS num_makers FROM car_makers GROUP BY country) AS subquery)); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(maker) DESC LIMIT 1); ",
      "SELECT DISTINCT countryname FROM countries INNER JOIN (SELECT car_makers.country FROM car_makers GROUP BY car_makers.country ORDER BY COUNT(car_makers.maker) DESC LIMIT 1) AS subquery ON countries.countryid = subquery.country; ",
      "SELECT countries.countryname FROM countries WHERE EXISTS (SELECT 1 FROM car_makers WHERE car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(car_makers.maker) = (SELECT MAX(num_makers) FROM (SELECT COUNT(maker) AS num_makers FROM car_makers GROUP BY country) AS subquery)); ",
      "SELECT countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(maker) = (SELECT COUNT(maker) FROM car_makers GROUP BY country ORDER BY COUNT(maker) DESC LIMIT 1));"
    ],
    "gpt_answers3": [
      "SELECT countryname  FROM countries  WHERE countryid IN ( SELECT country  FROM car_makers  GROUP BY country  HAVING COUNT(*) = ( SELECT MAX(cnt) FROM ( SELECT COUNT(*) AS cnt FROM car_makers GROUP BY country ) ) ) ",
      "SELECT countryname  FROM countries  WHERE countryid = ( SELECT country  FROM car_makers  GROUP BY country  ORDER BY COUNT(*) DESC  LIMIT 1 ) ",
      "SELECT countryname FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(car_makers.maker) = ( SELECT MAX(cnt) FROM ( SELECT COUNT(*) AS cnt FROM car_makers GROUP BY country ) ) ",
      "SELECT countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY count(maker) DESC LIMIT 1 ",
      "SELECT c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname ORDER BY COUNT(DISTINCT cm.maker) DESC LIMIT 1 ",
      "SELECT c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) = ( SELECT MAX(maker_count) FROM ( SELECT COUNT(DISTINCT maker) AS maker_count FROM car_makers GROUP BY country ) ) ",
      "SELECT DISTINCT c.countryname FROM car_makers cm JOIN countries c ON cm.country = c.countryid GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) = ( SELECT MAX(maker_count) FROM ( SELECT COUNT(DISTINCT maker) AS maker_count FROM car_makers GROUP BY country ) ) ",
      "SELECT c.countryname FROM countries c WHERE EXISTS ( SELECT 1 FROM car_makers cm WHERE cm.country = c.countryid GROUP BY cm.country HAVING COUNT(DISTINCT cm.maker) = ( SELECT MAX(maker_count) FROM ( SELECT COUNT(DISTINCT maker) AS maker_count FROM car_makers GROUP BY country ) ) ) ",
      "SELECT c.countryname FROM countries c WHERE c.countryid IN ( SELECT cm.country FROM car_makers cm GROUP BY cm.country HAVING COUNT(DISTINCT cm.maker) = ( SELECT MAX(maker_count) FROM ( SELECT COUNT(DISTINCT maker) AS maker_count FROM car_makers GROUP BY country ) ) ) ",
      "SELECT c.countryname FROM countries c INNER JOIN ( SELECT country, COUNT(DISTINCT maker) AS maker_count FROM car_makers GROUP BY country ) AS temp ON c.countryid = temp.country WHERE temp.maker_count = ( SELECT MAX(maker_count) FROM ( SELECT country, COUNT(DISTINCT maker) AS maker_count FROM car_makers GROUP BY country ) )"
    ]
  },
  {
    "id": 109,
    "db_id": "car_1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "gpt_answers1": [
      "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(car_makers.id) DESC  LIMIT 1; ",
      "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  HAVING COUNT(car_makers.id) = ( SELECT MAX(count)  FROM ( SELECT COUNT(car_makers.id) AS count  FROM car_makers  GROUP BY car_makers.country ) ); ",
      "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  HAVING COUNT(car_makers.id) = ( SELECT COUNT(car_makers.id) FROM car_makers  GROUP BY car_makers.country ORDER BY COUNT(car_makers.id) DESC  LIMIT 1 ); ",
      "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  HAVING COUNT(car_makers.id) = ( SELECT MAX(count)  FROM ( SELECT car_makers.country, COUNT(car_makers.id) AS count  FROM car_makers  GROUP BY car_makers.country ) AS temp ); ",
      "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(DISTINCT car_makers.id) DESC  LIMIT 1; ",
      "SELECT c.countryname  FROM countries AS c  JOIN car_makers AS cm ON c.countryid = cm.country  GROUP BY c.countryname  HAVING COUNT(cm.id) = ( SELECT COUNT(id)  FROM car_makers  WHERE country = cm.country  GROUP BY country  ORDER BY COUNT(id) DESC  LIMIT 1 ); ",
      "SELECT c.countryname  FROM countries AS c  JOIN car_makers AS cm ON c.countryid = cm.country  GROUP BY c.countryname  HAVING COUNT(cm.id) = ( SELECT COUNT(*)  FROM ( SELECT cm.country  FROM car_makers AS cm  GROUP BY cm.country  ORDER BY COUNT(cm.id) DESC  LIMIT 1 ) AS temp ); ",
      "SELECT countryname  FROM ( SELECT c.countryname, COUNT(cm.id) AS count FROM countries AS c  JOIN car_makers AS cm ON c.countryid = cm.country  GROUP BY c.countryname ) AS results WHERE count = ( SELECT MAX(count)  FROM ( SELECT c.countryname, COUNT(cm.id) AS count FROM countries AS c  JOIN car_makers AS cm ON c.countryid = cm.country  GROUP BY c.countryname ) AS temp ); ",
      "SELECT countryname FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(id) = ( SELECT MAX(count) FROM ( SELECT country, COUNT(id) AS count FROM car_makers GROUP BY country ) AS temp ) ); ",
      "SELECT countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryname  ORDER BY COUNT(DISTINCT car_makers.maker) DESC  LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1; ",
      "SELECT countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(id) DESC LIMIT 1); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(id) DESC LIMIT 1); ",
      "SELECT MAX(countries.countryname) FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1; ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT car_makers.country FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country ORDER BY COUNT(car_makers.id) DESC LIMIT 1); ",
      "SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(car_makers.maker) = (SELECT MAX(cnt) FROM (SELECT COUNT(cm.maker) as cnt FROM car_makers cm JOIN countries c ON cm.country = c.countryid GROUP BY c.countryname) ); ",
      "SELECT countryname FROM countries WHERE countryid = ANY (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(id) DESC LIMIT 1); ",
      "SELECT countryname FROM countries WHERE countryid = ALL (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(id) DESC LIMIT 1); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country HAVING COUNT(id) = (SELECT MAX(cnt) FROM (SELECT COUNT(cm.id) as cnt FROM car_makers cm GROUP BY cm.countryid) ) LIMIT 1); ",
      "SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY COUNT(car_makers.maker) DESC LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT c.countryname FROM car_makers cm JOIN countries c ON cm.country = c.countryid GROUP BY cm.country ORDER BY COUNT(cm.maker) DESC LIMIT 1; ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(maker) DESC LIMIT 1); ",
      "SELECT c.countryname FROM car_makers cm, countries c WHERE cm.country = c.countryid GROUP BY cm.country HAVING COUNT(cm.maker) = (SELECT MAX(count_maker) FROM (SELECT COUNT(*) AS count_maker FROM car_makers GROUP BY country)); ",
      "SELECT c.countryname FROM car_makers cm JOIN countries c ON cm.country = c.countryid GROUP BY cm.country, c.countryname HAVING COUNT(cm.maker) = (SELECT MAX(count_maker) FROM (SELECT COUNT(*) AS count_maker FROM car_makers GROUP BY country)); ",
      "SELECT c.countryname FROM countries c WHERE c.countryid IN (SELECT cm.country FROM car_makers cm GROUP BY cm.country HAVING COUNT(cm.maker) = (SELECT MAX(count_maker) FROM (SELECT COUNT(*) AS count_maker FROM car_makers GROUP BY country))); ",
      "SELECT c.countryname FROM countries c WHERE c.countryid IN (SELECT cm.country FROM car_makers cm JOIN (SELECT country, COUNT(maker) AS count_maker FROM car_makers GROUP BY country ORDER BY count_maker DESC LIMIT 1) subquery ON cm.country = subquery.country WHERE cm.maker IS NOT NULL); ",
      "SELECT c.countryname FROM car_makers cm JOIN countries c ON cm.country = c.countryid WHERE cm.country IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(maker) = (SELECT MAX(count_maker) FROM (SELECT COUNT(*) AS count_maker FROM car_makers GROUP BY country))); ",
      "SELECT c.countryname FROM car_makers cm JOIN countries c ON cm.country = c.countryid WHERE cm.country = (SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(maker) DESC LIMIT 1); ",
      "SELECT countryname FROM countries WHERE countryid = (SELECT country FROM car_makers GROUP BY country HAVING COUNT(maker) = (SELECT MAX(count_maker) FROM (SELECT COUNT(*) AS count_maker FROM car_makers GROUP BY country))); ",
      "SELECT c.countryname FROM countries c JOIN car_makers cm ON cm.country = c.countryid JOIN (SELECT maker, COUNT(model) AS count_model FROM model_list GROUP BY maker ORDER BY count_model DESC LIMIT 1) subquery ON cm.id = subquery.maker;"
    ]
  },
  {
    "id": 110,
    "db_id": "car_1",
    "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
    "gpt_answers1": [
      "SELECT COUNT(*) AS count, car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT COUNT(model_list.modelid) AS count, car_makers.fullname FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT COUNT(*) AS count, car_makers.fullname FROM car_makers, model_list WHERE car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT COUNT(model_list.modelid) AS count, car_makers.fullname FROM car_makers, model_list WHERE car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT COUNT(*) AS count, car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname ORDER BY count DESC; ",
      "SELECT COUNT(model_list.modelid) AS count, car_makers.fullname FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname ORDER BY count DESC; ",
      "SELECT COUNT(*) AS count, car_makers.fullname FROM car_makers, model_list WHERE car_makers.id = model_list.maker GROUP BY car_makers.fullname ORDER BY count DESC; ",
      "SELECT COUNT(model_list.modelid) AS count, car_makers.fullname FROM car_makers, model_list WHERE car_makers.id = model_list.maker GROUP BY car_makers.fullname ORDER BY count DESC; ",
      "SELECT COUNT(*) AS count, car_makers.fullname FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname HAVING count > 0; ",
      "SELECT COUNT(model_list.modelid) AS count, car_makers.fullname FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname HAVING count > 0;"
    ],
    "gpt_answers2": [
      "SELECT maker, COUNT(DISTINCT model) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY maker; ",
      "SELECT car_makers.fullname, COUNT(model_list.modelid) AS model_count FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS model_count FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname, COUNT(*) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname, COUNT(DISTINCT model_list.model) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname, COUNT(DISTINCT model_list.modelid) AS model_count FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname, COUNT(car_names.make) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname, COUNT(*) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname, COUNT(DISTINCT car_names.model) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.fullname; ",
      "SELECT car_makers.fullname, COUNT(DISTINCT car_names.make) AS model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.fullname;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT modelid), car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname ",
      "SELECT COUNT(DISTINCT model), car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname ",
      "SELECT COUNT(model), car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname ",
      "SELECT COUNT(*), car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname ",
      "SELECT COUNT(DISTINCT modelid), fullname FROM car_makers LEFT JOIN model_list ON model_list.maker = car_makers.id GROUP BY fullname ",
      "SELECT COUNT(DISTINCT model), fullname FROM car_makers LEFT JOIN model_list ON model_list.maker = car_makers.id GROUP BY fullname ",
      "SELECT COUNT(model), fullname FROM car_makers LEFT JOIN model_list ON model_list.maker = car_makers.id GROUP BY fullname ",
      "SELECT COUNT(*), fullname FROM car_makers LEFT JOIN model_list ON model_list.maker = car_makers.id GROUP BY fullname ",
      "SELECT COUNT(DISTINCT modelid) AS count, car_makers.fullname FROM car_makers LEFT JOIN model_list  ON model_list.maker = car_makers.id GROUP BY car_makers.fullname ",
      "SELECT COUNT(DISTINCT model) AS count, car_makers.fullname FROM car_makers LEFT JOIN model_list  ON model_list.maker = car_makers.id GROUP BY car_makers.fullname"
    ]
  },
  {
    "id": 112,
    "db_id": "car_1",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "gpt_answers1": [
      "SELECT cars_data.accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = \"amc\" AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data  WHERE id = (SELECT makeid FROM car_names WHERE model = \"amc hornet sportabout (sw)\"); ",
      "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT cars_data.accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.make LIKE \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = (SELECT id FROM car_makers WHERE maker = \"amc\")  AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cars_data.id IN (SELECT makeid FROM car_names WHERE model = \"amc hornet sportabout (sw)\"); ",
      "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = \"amc\" AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT cars_data.accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = \"amc\" AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT cars_data.accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = \"amc\" AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = (SELECT id FROM car_makers WHERE maker = \"amc\")  AND car_names.model = \"amc hornet sportabout (sw)\";"
    ],
    "gpt_answers2": [
      "SELECT cars_data.accelerate FROM cars_data WHERE cars_data.id = (SELECT makeid FROM car_names WHERE model = 'amc hornet sportabout (sw)');",
      "SELECT accelerate FROM cars_data WHERE id = (SELECT makeid FROM car_names WHERE model = 'amc hornet sportabout (sw)');",
      "SELECT accelerate FROM cars_data WHERE cars_data.id IN (SELECT makeid FROM car_names WHERE model = 'amc hornet sportabout (sw)');",
      "SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'amc hornet sportabout (sw)';",
      "SELECT cars_data.accelerate FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'amc hornet sportabout (sw)';",
      "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'amc';",
      "SELECT cars_data.accelerate FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'amc';",
      "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc hornet sportabout (sw)';",
      "SELECT cars_data.accelerate FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc hornet sportabout (sw)';",
      "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_makers.maker = car_names.make WHERE car_makers.fullname = 'amc hornet sportabout (sw)';"
    ],
    "gpt_answers3": [
      "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = \"amc\" AND model_list.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model = \"amc hornet sportabout (sw)\"); ",
      "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model LIKE \"amc hornet sportabout%\"); ",
      "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = \"amc\" AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE make = \"amc hornet sportabout (sw)\"); ",
      "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE make LIKE \"amc hornet sportabout%\"); ",
      "SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE make = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model = \"amc hornet sportabout (sw)\"); "
    ]
  },
  {
    "id": 113,
    "db_id": "car_1",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "gpt_answers1": [
      "SELECT cars_data.accelerate FROM car_names  JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data  WHERE id = (SELECT makeid FROM car_names  WHERE model = \"amc hornet sportabout (sw)\"); ",
      "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT cars_data.accelerate FROM cars_data  JOIN (SELECT makeid FROM car_names WHERE model = \"amc hornet sportabout (sw)\") AS subquery  ON cars_data.id = subquery.makeid; ",
      "SELECT cars_data.accelerate FROM cars_data  WHERE cars_data.id IN (SELECT makeid FROM car_names WHERE model = \"amc hornet sportabout (sw)\"); ",
      "SELECT cars_data.accelerate FROM cars_data, car_names, model_list, car_makers  WHERE car_names.model = \"amc hornet sportabout (sw)\"  AND car_names.makeid = cars_data.id  AND car_names.model = model_list.model  AND model_list.maker = car_makers.id; ",
      "SELECT cars_data.accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate FROM cars_data  WHERE id = (SELECT makeid FROM car_names  WHERE model LIKE \"%amc hornet sportabout (sw)%\"); ",
      "SELECT accelerate FROM cars_data, car_names  WHERE car_names.model = \"amc hornet sportabout (sw)\"  AND car_names.makeid = cars_data.id; ",
      "SELECT accelerate FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model LIKE \"%amc hornet sportabout (sw)%\"; "
    ],
    "gpt_answers2": [
      "SELECT accelerate  FROM cars_data  WHERE id = (SELECT makeid  FROM car_names  WHERE model = 'amc hornet sportabout (sw)'); ",
      "SELECT accelerate  FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = 'amc hornet sportabout (sw)'; ",
      "SELECT accelerate  FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_names.model = 'amc hornet sportabout (sw)'; ",
      "SELECT accelerate  FROM cars_data  WHERE id = (SELECT makeid  FROM car_names  WHERE model IN ('amc hornet sportabout (sw)')); ",
      "SELECT accelerate  FROM cars_data, car_names  WHERE cars_data.id = car_names.makeid  AND car_names.model = 'amc hornet sportabout (sw)'; ",
      "SELECT accelerate  FROM cars_data  WHERE id = (SELECT makeid  FROM car_names  WHERE model LIKE '%amc hornet sportabout (sw)%'); ",
      "SELECT accelerate  FROM cars_data  WHERE id = (SELECT makeid  FROM car_names  WHERE model LIKE 'amc hornet sportabout (sw)' || '%'); ",
      "SELECT c.accelerate  FROM cars_data AS c, car_names AS cn  WHERE c.id = cn.makeid  AND cn.model = 'amc hornet sportabout (sw)'; ",
      "SELECT accelerate  FROM cars_data  WHERE id = (SELECT makeid  FROM car_names  WHERE model = \"amc hornet sportabout (sw)\"); ",
      "SELECT accelerate  FROM cars_data  WHERE id = (SELECT makeid  FROM car_names  WHERE model LIKE 'amc hornet sportabout (sw)');"
    ],
    "gpt_answers3": [
      "SELECT cars_data.accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = \"amc\"  AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate  FROM cars_data, car_names, model_list, car_makers  WHERE cars_data.id = car_names.makeid  AND car_names.model = model_list.model  AND model_list.maker = car_makers.id  AND car_makers.maker = \"amc\"  AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT cd.accelerate  FROM cars_data AS cd  JOIN car_names AS cn ON cd.id = cn.makeid  JOIN model_list AS ml ON cn.model = ml.model  JOIN car_makers AS cm ON ml.maker = cm.id  WHERE cm.maker = \"amc\"  AND cn.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.id = (SELECT id FROM car_makers WHERE maker = \"amc\")  AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate  FROM cars_data, car_names  WHERE cars_data.id = car_names.makeid  AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = (SELECT id FROM car_makers WHERE maker = \"amc\")  AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname LIKE \"%amc%\"  AND car_names.model = \"amc hornet sportabout (sw)\"; ",
      "SELECT accelerate  FROM cars_data, car_names  WHERE cars_data.id = car_names.makeid  AND car_names.model LIKE \"%amc hornet sportabout (sw)%\"; ",
      "SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model LIKE \"%amc hornet sportabout (sw)%\";"
    ]
  },
  {
    "id": 115,
    "db_id": "car_1",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France');",
      "SELECT COUNT(DISTINCT cm.maker) FROM car_makers cm INNER JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'France';",
      "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France') AND maker IN (SELECT DISTINCT maker FROM car_makers);",
      "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France') GROUP BY maker;",
      "SELECT COUNT(DISTINCT cm.maker) FROM car_makers cm INNER JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'France' GROUP BY cm.maker;",
      "SELECT COUNT(DISTINCT cs.maker) FROM ( SELECT DISTINCT cm.maker FROM car_makers cm INNER JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'France' ) cs;",
      "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE countryid = (SELECT countryid FROM countries WHERE countryname = 'France');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT maker FROM car_makers WHERE countryid = (SELECT countryid FROM countries WHERE countryname = 'France'));",
      "SELECT COUNT(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France') GROUP BY maker;",
      "SELECT COUNT(*) FROM ( SELECT DISTINCT cm.maker FROM car_makers cm INNER JOIN countries c ON cm.country = c.countryid WHERE c.countryname = 'France' ) AS count_makers;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france' ",
      "SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'france') ",
      "SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers, countries WHERE car_makers.country = countries.countryid AND countries.countryname = 'france' ",
      "SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers WHERE car_makers.country IN (SELECT countryid FROM countries WHERE countryname = 'france') ",
      "SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers, countries WHERE car_makers.country = countries.countryid AND countries.countryname LIKE 'France' ",
      "SELECT COUNT(DISTINCT maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname IN ('france', 'France') ",
      "SELECT COUNT(car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france' ",
      "SELECT COUNT(maker)  FROM car_makers WHERE country IN (SELECT countryid FROM countries WHERE countryname LIKE '%france%') ",
      "SELECT COUNT(*)  FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname LIKE '%fr%') ",
      "SELECT COUNT(*)  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname LIKE '%france%'"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'france'; ",
      "SELECT COUNT(DISTINCT maker)  FROM car_makers  WHERE country = (SELECT countryid FROM countries WHERE countryname = 'france'); ",
      "SELECT COUNT(DISTINCT maker)  FROM car_makers  WHERE country IN (SELECT countryid FROM countries WHERE countryname = 'france'); ",
      "SELECT COUNT(DISTINCT maker)  FROM car_makers  WHERE country = (SELECT countryid FROM countries WHERE countryname LIKE '%france%'); ",
      "SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers  WHERE car_makers.country IN (SELECT countryid FROM countries WHERE countryname = 'france'); ",
      "SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers, countries  WHERE car_makers.country = countries.countryid AND countries.countryname = 'france'; ",
      "SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'france'; ",
      "SELECT COUNT(DISTINCT maker)  FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'france'; ",
      "SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers  WHERE car_makers.country = (SELECT countryid FROM countries WHERE countryname = 'france'); ",
      "SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers  WHERE car_makers.country IN (SELECT countryid FROM countries WHERE countryname = 'france');"
    ]
  },
  {
    "id": 117,
    "db_id": "car_1",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "gpt_answers1": [
      "SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = \"United States\"; ",
      "SELECT COUNT(*)  FROM car_names  JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = \"United States\"; ",
      "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = \"United States\"; ",
      "SELECT COUNT(*)  FROM car_names  WHERE make = \"United States\"; ",
      "SELECT COUNT(*)  FROM car_names  WHERE makeid IN ( SELECT id  FROM car_makers  WHERE country IN ( SELECT countryid  FROM countries  WHERE countryname = \"United States\" ) ); ",
      "SELECT COUNT(*)  FROM model_list  WHERE maker IN ( SELECT id  FROM car_makers  WHERE country IN ( SELECT countryid  FROM countries  WHERE countryname = \"United States\" ) ); ",
      "SELECT COUNT(*)  FROM model_list  WHERE maker IN ( SELECT id  FROM car_makers  WHERE countryid IN ( SELECT countryid  FROM countries  WHERE countryname = \"United States\" ) ); ",
      "SELECT COUNT(*)  FROM model_list  WHERE maker = ( SELECT id  FROM car_makers  WHERE country IN ( SELECT countryid  FROM countries  WHERE countryname = \"United States\" ) ); ",
      "SELECT COUNT(*)  FROM model_list  WHERE maker = ( SELECT id  FROM car_makers  WHERE countryid IN ( SELECT countryid  FROM countries  WHERE countryname = \"United States\" ) ); ",
      "SELECT COUNT(*)  FROM model_list  WHERE maker = ( SELECT id  FROM car_makers  WHERE country = ( SELECT countryid  FROM countries  WHERE countryname = \"United States\" ) );"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'United States'; ",
      "SELECT COUNT(*) FROM car_names  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'United States'; ",
      "SELECT COUNT(*) FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'United States'; ",
      "SELECT COUNT(*) FROM model_list  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'United States'  GROUP BY countries.countryname; ",
      "SELECT COUNT(*) FROM model_list, car_makers, countries  WHERE model_list.maker = car_makers.id  AND car_makers.country = countries.countryid  AND countries.countryname = 'United States'; ",
      "SELECT COUNT(model) FROM model_list  WHERE maker IN (SELECT id FROM car_makers WHERE country IN (SELECT countryid FROM countries WHERE countryname = 'United States')); ",
      "SELECT COUNT(*) FROM  (SELECT DISTINCT model FROM model_list  WHERE maker IN (SELECT id FROM car_makers WHERE country IN (SELECT countryid FROM countries WHERE countryname = 'United States'))) AS T; ",
      "SELECT COUNT(*) FROM model_list  INNER JOIN car_makers ON model_list.maker = car_makers.id  INNER JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'United States'; ",
      "SELECT COUNT(*) FROM model_list  WHERE maker IN (SELECT id FROM car_makers  WHERE country IN (SELECT countryid FROM countries  WHERE countryname = 'United States')); ",
      "SELECT COUNT(*) FROM model_list  WHERE maker IN (SELECT id FROM car_makers  WHERE country = (SELECT countryid FROM countries  WHERE countryname = 'United States'));"
    ],
    "gpt_answers3": [
      "SELECT COUNT(model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model WHERE car_makers.country = (SELECT countryid FROM countries WHERE countryname = 'United States'); ",
      "SELECT COUNT(*) FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'United States')); ",
      "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = (SELECT countryid FROM countries WHERE countryname = 'United States'); ",
      "SELECT COUNT(*) FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE continent = 'United States')); ",
      "SELECT COUNT(*) FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname LIKE 'United States')); ",
      "SELECT COUNT(*) FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE continent LIKE 'United States')); ",
      "SELECT COUNT(*) FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE maker LIKE (SELECT country FROM countries WHERE countryname = 'United States')); ",
      "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = (SELECT countryid FROM countries WHERE countryname LIKE 'United States'); ",
      "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = (SELECT countryid FROM countries WHERE continent LIKE 'United States'); ",
      "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = (SELECT countryid FROM countries WHERE countryname LIKE 'United States' OR continent LIKE 'United States');"
    ]
  },
  {
    "id": 122,
    "db_id": "car_1",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "gpt_answers1": [
      "SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers, model_list WHERE car_makers.id = model_list.maker; ",
      "SELECT cm.maker, ml.model FROM car_makers AS cm, model_list AS ml WHERE cm.id = ml.maker; ",
      "SELECT maker, model FROM car_makers, model_list WHERE car_makers.id = model_list.maker; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT maker, model FROM car_makers, model_list WHERE car_makers.id = model_list.maker; ",
      "SELECT cm.maker, ml.model FROM car_makers AS cm JOIN model_list AS ml ON cm.id = ml.maker; ",
      "SELECT maker, model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;"
    ],
    "gpt_answers2": [
      "SELECT maker, model FROM car_makers, model_list WHERE car_makers.id = model_list.maker",
      "SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker",
      "SELECT maker, model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker",
      "SELECT cm.maker, ml.model FROM car_makers cm, model_list ml WHERE cm.id = ml.maker",
      "SELECT maker, model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker",
      "SELECT cm.maker, ml.model FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker",
      "SELECT maker, model FROM car_makers JOIN model_list USING (id)",
      "SELECT cm.maker, ml.model FROM car_makers AS cm, model_list AS ml WHERE cm.id = ml.maker",
      "SELECT maker, model FROM car_makers INNER JOIN model_list USING (id)",
      "SELECT cm.maker, ml.model FROM car_makers AS cm INNER JOIN model_list AS ml ON cm.id = ml.maker"
    ],
    "gpt_answers3": [
      "SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;",
      "SELECT maker, model FROM car_makers, model_list WHERE car_makers.id = model_list.maker;",
      "SELECT c1.maker, c2.model FROM car_makers c1, model_list c2 WHERE c1.id = c2.maker;",
      "SELECT maker, model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker;",
      "SELECT maker, model FROM car_makers JOIN model_list USING (id);",
      "SELECT maker, model FROM car_makers CROSS JOIN model_list ON car_makers.id = model_list.maker;",
      "SELECT maker, model FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker;",
      "SELECT maker, model FROM car_makers RIGHT JOIN model_list ON car_makers.id = model_list.maker;",
      "SELECT car_makers.maker, model_list.model FROM car_makers, model_list WHERE car_makers.id = model_list.maker;",
      "SELECT maker, model FROM car_makers NATURAL JOIN model_list;"
    ]
  },
  {
    "id": 123,
    "db_id": "car_1",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "gpt_answers1": [
      "SELECT maker, model FROM model_list",
      "SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker",
      "SELECT DISTINCT car_makers.maker, model_list.model FROM car_makers, model_list",
      "SELECT car_makers.maker, model_list.model FROM car_makers NATURAL JOIN model_list",
      "SELECT DISTINCT maker, model FROM model_list, car_makers",
      "SELECT maker, model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id",
      "SELECT car_makers.maker, model_list.model FROM car_makers, model_list WHERE car_makers.id = model_list.maker",
      "SELECT maker, model FROM model_list LEFT JOIN car_makers ON model_list.maker = car_makers.id",
      "SELECT DISTINCT maker, model FROM car_makers, model_list WHERE car_makers.id = model_list.maker",
      "SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker"
    ],
    "gpt_answers2": [
      "SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT car_names.make, model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model; ",
      "SELECT DISTINCT car_makers.maker, model_list.model FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT DISTINCT car_makers.maker, model_list.model FROM car_makers LEFT JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers RIGHT JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers LEFT OUTER JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker, model_list.model; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker ORDER BY car_makers.maker, model_list.model; ",
      "SELECT car_makers.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT car_makers.maker, model_list.model  FROM car_makers JOIN model_list ON model_list.maker = car_makers.id; ",
      "SELECT DISTINCT car_makers.maker, model_list.model  FROM car_makers JOIN model_list ON model_list.maker = car_makers.id; ",
      "SELECT maker, model  FROM car_makers, model_list  WHERE car_makers.id = model_list.maker; ",
      "SELECT car_makers.maker, model_list.model  FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker; ",
      "SELECT maker, model  FROM car_makers INNER JOIN model_list  ON car_makers.id = model_list.maker; ",
      "SELECT c.maker, m.model  FROM car_makers c INNER JOIN model_list m ON c.id = m.maker; ",
      "SELECT car_makers.maker, model_list.model  FROM car_makers, model_list  WHERE car_makers.id = model_list.maker  GROUP BY car_makers.maker, model_list.model; ",
      "SELECT DISTINCT car_makers.maker, model_list.model  FROM car_makers, model_list  WHERE car_makers.id = model_list.maker  GROUP BY car_makers.maker, model_list.model; ",
      "SELECT maker, model  FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id LIMIT 10; ",
      "SELECT c.maker, m.model  FROM car_makers c INNER JOIN model_list m ON c.id = m.maker LIMIT 10;"
    ]
  },
  {
    "id": 125,
    "db_id": "car_1",
    "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "gpt_answers1": [
      "SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country; ",
      "SELECT countries.countryid, countries.countryname  FROM countries  WHERE countryid IN (SELECT country FROM car_makers); ",
      "SELECT countries.countryid, countries.countryname  FROM countries, car_makers  WHERE countries.countryid = car_makers.country; ",
      "SELECT countryid, countryname  FROM countries  WHERE EXISTS (SELECT * FROM car_makers WHERE countries.countryid = car_makers.country); ",
      "SELECT DISTINCT countries.countryid, countries.countryname  FROM countries, car_makers  WHERE countries.countryid = car_makers.country; ",
      "SELECT countries.countryid, countries.countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country; ",
      "SELECT countryid, countryname  FROM countries  WHERE countryid IN (SELECT DISTINCT country FROM car_makers); ",
      "SELECT *  FROM countries  WHERE countryid IN (SELECT country FROM car_makers); ",
      "SELECT countries.countryid, countries.countryname  FROM countries  INNER JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countries.countryid, countries.countryname; ",
      "SELECT countries.countryid, countries.countryname  FROM countries  WHERE countryid IN (SELECT country FROM car_makers) GROUP BY countries.countryid, countries.countryname;"
    ],
    "gpt_answers2": [
      "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers);",
      "SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid;",
      "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid;",
      "SELECT countryid, countryname FROM countries WHERE EXISTS (SELECT * FROM car_makers WHERE car_makers.country = countries.countryid);",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (SELECT country FROM car_makers);",
      "SELECT DISTINCT countryid, countryname FROM countries, car_makers WHERE countries.countryid = car_makers.country;",
      "SELECT DISTINCT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country;",
      "SELECT DISTINCT countries.countryid, countries.countryname FROM countries, car_makers WHERE car_makers.country = countries.countryid;",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE EXISTS (SELECT * FROM car_makers WHERE car_makers.country = countries.countryid);",
      "SELECT c.countryid, c.countryname FROM countries AS c INNER JOIN car_makers AS cm ON c.countryid = cm.country;"
    ],
    "gpt_answers3": [
      "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers); ",
      "SELECT countryid, countryname FROM countries WHERE EXISTS (SELECT country FROM car_makers WHERE car_makers.country = countries.countryid); ",
      "SELECT countryid, countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country; ",
      "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country); ",
      "SELECT DISTINCT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country; ",
      "SELECT DISTINCT countries.countryid, countries.countryname FROM countries, car_makers WHERE countries.countryid = car_makers.country; ",
      "SELECT DISTINCT countryid, countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country; ",
      "SELECT DISTINCT countries.countryid, countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NOT NULL; ",
      "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers WHERE car_makers.country IS NOT NULL); ",
      "SELECT DISTINCT countries.countryid, countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country HAVING car_makers.country IS NOT NULL;"
    ]
  },
  {
    "id": 129,
    "db_id": "car_1",
    "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "gpt_answers1": [
      "SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year;",
      "SELECT year, AVG(weight) AS average_weight, AVG(year) AS average_year FROM cars_data GROUP BY year;",
      "SELECT AVG(weight), year FROM cars_data GROUP BY year;",
      "SELECT year, AVG(weight) FROM cars_data GROUP BY year;",
      "SELECT AVG(weight) AS average_weight, year AS average_year FROM cars_data GROUP BY year;",
      "SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year;",
      "SELECT AVG(weight), year AS average_year FROM cars_data GROUP BY year;",
      "SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year ORDER BY year;",
      "SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year ORDER BY year;",
      "SELECT AVG(weight) AS average_weight, year AS average_year FROM cars_data GROUP BY year ORDER BY year;"
    ],
    "gpt_answers2": [
      "SELECT year, AVG(weight), AVG(year) FROM cars_data GROUP BY year; ",
      "SELECT year, AVG(weight), AVG(year) FROM cars_data GROUP BY year ORDER BY year; ",
      "SELECT year, AVG(weight) AS average_weight, AVG(year) AS average_year FROM cars_data GROUP BY year; ",
      "SELECT cars_data.year, AVG(cars_data.weight), AVG(cars_data.year) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid GROUP BY cars_data.year; ",
      "SELECT cars_data.year, AVG(cars_data.weight), AVG(cars_data.year) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid GROUP BY cars_data.year; ",
      "SELECT year, AVG(weight), AVG(year) FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid GROUP BY year; ",
      "SELECT year, AVG(weight), AVG(year) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid AND cars_data.year = car_names.model JOIN model_list ON car_names.model = model_list.model GROUP BY year; ",
      "SELECT cars_data.year, AVG(cars_data.weight), AVG(cars_data.year) FROM cars_data JOIN car_names JOIN model_list ON cars_data.id = car_names.makeid AND car_names.model = model_list.model GROUP BY cars_data.year; ",
      "SELECT DISTINCT cars_data.year, AVG(cars_data.weight), AVG(cars_data.year) FROM cars_data JOIN car_names JOIN model_list ON cars_data.id = car_names.makeid AND car_names.model = model_list.model GROUP BY cars_data.year; ",
      "SELECT year, AVG(weight), AVG(year) FROM cars_data, car_names, model_list WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model GROUP BY year;"
    ],
    "gpt_answers3": [
      "SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year;",
      "SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year;",
      "SELECT year, AVG(weight) AS average_weight, AVG(year) AS average_year FROM cars_data GROUP BY year;",
      "SELECT AVG(weight), year FROM cars_data GROUP BY year;",
      "SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year ORDER BY year;",
      "SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year HAVING year IS NOT NULL;",
      "SELECT AVG(weight) AS average_weight, year FROM cars_data WHERE year IS NOT NULL GROUP BY year;",
      "SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year LIMIT 10;",
      "SELECT AVG(weight) AS average_weight, year FROM cars_data WHERE year IS NOT NULL GROUP BY year LIMIT 10;",
      "SELECT AVG(weight) AS average_weight, year FROM cars_data GROUP BY year OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;"
    ]
  },
  {
    "id": 131,
    "db_id": "car_1",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "gpt_answers1": [
      "SELECT countries.countryname FROM countries INNER JOIN continents ON countries.continent = continents.contid INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(car_makers.id) >= 3 AND continents.continent = \"europe\" ",
      "SELECT c.countryname FROM countries c JOIN continents co ON c.continent = co.contid JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 AND co.continent = 'europe' ",
      "SELECT c.countryname FROM countries c, continents co, car_makers cm WHERE c.continent = co.contid AND c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 AND co.continent = 'europe' ",
      "SELECT DISTINCT countries.countryname FROM countries, continents, car_makers WHERE countries.continent = continents.contid AND countries.countryid = car_makers.country AND continents.continent = 'europe' GROUP BY countries.countryname HAVING COUNT(car_makers.maker) >= 3 ",
      "SELECT c.countryname FROM countries AS c INNER JOIN continents AS co ON c.continent = co.contid INNER JOIN car_makers AS cm ON c.countryid = cm.country WHERE co.continent = 'europe' GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 ",
      "SELECT c.countryname FROM countries c, continents co, car_makers cm WHERE c.continent = co.contid AND c.countryid = cm.country AND co.continent = 'europe' GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 ",
      "SELECT c.countryname FROM countries c JOIN continents co ON c.continent = co.contid JOIN car_makers cm ON c.countryid = cm.country WHERE co.continent = 'europe' GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 ",
      "SELECT DISTINCT countries.countryname FROM countries, continents, car_makers WHERE countries.continent = continents.contid AND continents.continent = 'europe' AND countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 ",
      "SELECT DISTINCT countries.countryname FROM countries, continents, car_makers WHERE countries.continent = continents.contid AND continents.continent = 'europe' AND countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 ",
      "SELECT c.countryname FROM countries c INNER JOIN continents co ON c.continent = co.contid INNER JOIN car_makers cm ON c.countryid = cm.country WHERE co.continent = 'europe' GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3"
    ],
    "gpt_answers2": [
      "SELECT countries.countryname FROM countries INNER JOIN continents ON countries.continent = continents.contid INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = \"europe\" ",
      "SELECT countries.countryname FROM countries INNER JOIN continents ON countries.continent = continents.contid INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker WHERE continents.continent = \"europe\" GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 ",
      "SELECT c.countryname FROM countries c, continents cn, car_makers cm WHERE c.continent = cn.contid AND c.countryid = cm.country AND cn.continent = \"europe\" GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 ",
      "SELECT countryname FROM countries WHERE continent = ( SELECT contid FROM continents WHERE continent = \"europe\" ) AND countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3 ) ",
      "SELECT c.countryname FROM countries AS c JOIN continents AS cn ON c.continent = cn.contid JOIN car_makers AS cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 AND cn.continent = \"europe\" ",
      "SELECT DISTINCT c.countryname FROM countries AS c, continents AS cn, car_makers AS cm WHERE c.continent = cn.contid AND c.countryid = cm.country AND cn.continent = \"europe\" AND cm.maker IN ( SELECT maker FROM car_makers GROUP BY maker HAVING COUNT(DISTINCT country) >= 3 ) ",
      "SELECT DISTINCT c.countryname FROM countries c JOIN continents cn ON c.continent = cn.contid JOIN car_makers cm ON c.countryid = cm.country WHERE cn.continent = \"europe\" GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 ",
      "SELECT countryname FROM countries WHERE continent = ( SELECT contid FROM continents WHERE continent = \"europe\" ) AND countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3 ) LIMIT 10 ",
      "SELECT DISTINCT countries.countryname FROM countries, continents, car_makers WHERE countries.continent = continents.contid AND countries.countryid = car_makers.country AND continents.continent = \"europe\" GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 ",
      "SELECT c.countryname FROM countries c INNER JOIN continents cn ON c.continent = cn.contid INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3 AND cn.continent = \"europe\""
    ],
    "gpt_answers3": [
      "SELECT countryname FROM countries WHERE continent IN (SELECT continent FROM continents WHERE continent = 'europe') AND (SELECT COUNT(maker) FROM car_makers WHERE countries.countryid = car_makers.country) >= 3; ",
      "SELECT DISTINCT countryname FROM countries INNER JOIN continents ON countries.continent = continents.contid INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = 'europe'; ",
      "SELECT countryname FROM countries INNER JOIN continents ON countries.continent = continents.contid INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = 'europe'; ",
      "SELECT countryname FROM countries WHERE continent = (SELECT contid FROM continents WHERE continent = 'europe') AND (SELECT COUNT(maker) FROM car_makers WHERE countries.countryid = car_makers.country) >= 3; ",
      "SELECT countryname FROM countries WHERE continent = (SELECT continents.contid FROM continents WHERE continent = 'europe' LIMIT 1) AND (SELECT COUNT(maker) FROM car_makers WHERE countries.countryid = car_makers.country) >= 3; ",
      "SELECT countryname FROM countries INNER JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'europe' AND (SELECT COUNT(maker) FROM car_makers WHERE countries.countryid = car_makers.country) >= 3; ",
      "SELECT countries.countryname FROM countries INNER JOIN continents ON countries.continent = continents.contid INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = (SELECT contid FROM continents WHERE continent = 'europe'); ",
      "SELECT countries.countryname FROM countries WHERE continent IN (SELECT continents.contid FROM continents WHERE continent = 'europe') AND (SELECT COUNT(maker) FROM car_makers WHERE countries.countryid = car_makers.country) >= 3; ",
      "SELECT DISTINCT countries.countryname FROM countries INNER JOIN continents ON countries.continent = continents.contid INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE continents.continent = 'europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3; ",
      "SELECT countryname FROM countries WHERE continent = (SELECT continents.contid FROM continents WHERE continent = 'europe') AND countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(maker) >= 3);"
    ]
  },
  {
    "id": 132,
    "db_id": "car_1",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "gpt_answers1": [
      "SELECT MAX(horsepower), car_makers.fullname  FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3;",
      "SELECT MAX(horsepower), car_makers.fullname  FROM cars_data, model_list, car_makers  WHERE cars_data.id = model_list.modelid  AND model_list.maker = car_makers.id  AND cars_data.cylinders = 3;",
      "SELECT MAX(horsepower), fullname  FROM cars_data  JOIN model_list USING (id)  JOIN car_makers USING (maker)  WHERE cylinders = 3;",
      "SELECT MAX(cars_data.horsepower), car_makers.fullname  FROM cars_data, model_list, car_makers  WHERE cars_data.id = car_names.makeid  AND model_list.model = car_names.model  AND model_list.maker = car_makers.id  AND cars_data.cylinders = 3;",
      "SELECT MAX(horsepower), fullname  FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3  GROUP BY car_makers.fullname;",
      "SELECT MAX(horsepower), car_makers.fullname  FROM cars_data  NATURAL JOIN model_list  NATURAL JOIN car_makers  WHERE cylinders = 3  GROUP BY car_makers.fullname;",
      "SELECT MAX(horsepower) AS max_horsepower, car_makers.fullname  FROM cars_data  INNER JOIN model_list ON cars_data.id = model_list.modelid  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3  GROUP BY fullname  ORDER BY max_horsepower DESC  LIMIT 1;",
      "SELECT cars_data.horsepower, car_makers.fullname  FROM cars_data  JOIN (SELECT maker, model  FROM model_list, car_makers  WHERE model_list.maker = car_makers.id) AS maker_model  ON cars_data.id = maker_model.model  WHERE cars_data.cylinders = 3  ORDER BY cars_data.horsepower DESC  LIMIT 1;",
      "SELECT horsepower, car_makers.fullname  FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3  AND horsepower = (SELECT MAX(horsepower)  FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  WHERE cars_data.cylinders = 3);",
      "SELECT MAX(cars_data.horsepower), car_makers.fullname  FROM cars_data  JOIN model_list ON cars_data.id = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3  GROUP BY car_makers.fullname  HAVING cars_data.horsepower = MAX(cars_data.horsepower);"
    ],
    "gpt_answers2": [
      "SELECT MAX(cars_data.horsepower) AS max_horsepower, car_makers.maker AS make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3; ",
      "SELECT max(horsepower), car_makers.maker FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower), maker as make FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid LEFT JOIN model_list ON car_names.model = model_list.model LEFT JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY make; ",
      "SELECT max(horsepower) AS max_horsepower, car_makers.maker AS make FROM cars_data LEFT OUTER JOIN car_names ON cars_data.id = car_names.makeid LEFT OUTER JOIN model_list ON car_names.model = model_list.model LEFT OUTER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3 GROUP BY maker; ",
      "SELECT max(cars_data.horsepower) AS max_horsepower, car_makers.maker AS make FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cars_data.cylinders = 3 GROUP BY car_makers.maker; ",
      "SELECT max(horsepower), maker FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cars_data.cylinders = 3 GROUP BY maker; ",
      "SELECT MAX(horsepower) AS max_horsepower, maker AS make FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cylinders = 3 GROUP BY make; ",
      "SELECT MAX(cars_data.horsepower) AS max_horsepower, car_makers.maker AS make FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.make_id LEFT JOIN model_list ON car_names.model = model_list.model LEFT JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower) AS max_horsepower, maker AS make FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid LEFT JOIN model_list ON car_names.model = model_list.model LEFT JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 GROUP BY maker; ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cars_data.cylinders = 3 GROUP BY car_makers.maker;"
    ],
    "gpt_answers3": [
      "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data INNER JOIN model_list ON cars_data.cylinders = 3 AND model_list.modelid = cars_data.id INNER JOIN car_makers ON model_list.maker = car_makers.id ",
      "SELECT MAX(horsepower), maker FROM cars_data WHERE cylinders = 3 GROUP BY id HAVING id IN (SELECT modelid FROM model_list WHERE maker = car_makers.id) ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data INNER JOIN model_list ON cars_data.cylinders = 3 AND model_list.modelid = cars_data.id INNER JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.maker ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data INNER JOIN model_list ON cars_data.cylinders = 3 AND model_list.modelid = cars_data.id INNER JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.maker ORDER BY MAX(horsepower) DESC LIMIT 1 ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data, model_list, car_makers WHERE cars_data.cylinders = 3 AND model_list.modelid = cars_data.id AND model_list.maker = car_makers.id GROUP BY car_makers.maker ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN model_list ON cars_data.cylinders = 3 AND model_list.modelid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.id IN (SELECT DISTINCT maker FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE cylinders = 3)) ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data, model_list, car_makers WHERE cars_data.cylinders = 3 AND model_list.modelid = cars_data.id AND model_list.maker = car_makers.id GROUP BY car_makers.maker HAVING MAX(cars_data.horsepower) = (SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 3) ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data, model_list, car_makers WHERE cars_data.cylinders = 3 AND model_list.modelid = cars_data.id AND model_list.maker = car_makers.id GROUP BY car_makers.maker ORDER BY MAX(horsepower) DESC LIMIT 1 ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN model_list ON cars_data.cylinders = 3 AND model_list.modelid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.id IN (SELECT makeid FROM car_names) GROUP BY car_makers.maker ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN model_list ON cars_data.cylinders = 3 AND model_list.modelid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.id = (SELECT makeid FROM car_names WHERE model = model_list.model) GROUP BY car_makers.maker "
    ]
  },
  {
    "id": 133,
    "db_id": "car_1",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "gpt_answers1": [
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid LEFT JOIN model_list ON car_names.model = model_list.model LEFT JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cars_data.cylinders = 3; ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = '3'; ",
      "SELECT MAX(horsepower), maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3; ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = (SELECT cylinders FROM cars_data WHERE cylinders = 3); ",
      "SELECT MAX(horsepower), car_makers.maker FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = (SELECT cylinders FROM cars_data WHERE cylinders = 3);"
    ],
    "gpt_answers2": [
      "SELECT MAX(horsepower), car_makers.maker  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower), car_makers.maker  FROM cars_data, car_names, model_list, car_makers  WHERE cars_data.id = car_names.makeid  AND car_names.model = model_list.model  AND model_list.maker = car_makers.id  AND cars_data.cylinders = 3; ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker  FROM cars_data, car_names, model_list, car_makers  WHERE cars_data.id = car_names.makeid  AND car_names.model = model_list.model  AND model_list.maker = car_makers.id  AND cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower), car_makers.maker  FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(cars_data.horsepower), car_makers.maker  FROM cars_data  LEFT JOIN car_names ON cars_data.id = car_names.makeid  LEFT JOIN model_list ON car_names.model = model_list.model  LEFT JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower), car_makers.maker  FROM cars_data, car_names, model_list, car_makers  WHERE cars_data.id = car_names.makeid  AND car_names.model = model_list.model  AND model_list.maker = car_makers.id  AND cars_data.cylinders = 3 GROUP BY car_makers.maker; ",
      "SELECT MAX(horsepower), car_makers.maker  FROM cars_data  NATURAL JOIN car_names  NATURAL JOIN model_list  NATURAL JOIN car_makers  WHERE cylinders = 3  GROUP BY car_makers.maker; ",
      "SELECT MAX(horsepower), car_makers.maker  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  GROUP BY car_makers.maker  HAVING cylinders = 3; ",
      "SELECT MAX(horsepower), car_makers.maker  FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.cylinders = 3  GROUP BY car_makers.maker;"
    ],
    "gpt_answers3": [
      "SELECT MAX(horsepower) AS largest_horsepower, car_makers.maker AS make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3; ",
      "SELECT MAX(horsepower) AS largest_horsepower, maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 GROUP BY maker ORDER BY largest_horsepower DESC LIMIT 1; ",
      "SELECT MAX(horsepower) AS largest_horsepower, maker FROM cars_data JOIN car_names USING (makeid) JOIN model_list USING (model) JOIN car_makers ON maker = car_makers.id WHERE cylinders = 3 GROUP BY maker ORDER BY largest_horsepower DESC LIMIT 1; ",
      "SELECT horsepower AS largest_horsepower, car_makers.maker AS make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 ORDER BY largest_horsepower DESC LIMIT 1; ",
      "SELECT horsepower AS largest_horsepower, car_makers.maker AS make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT MAX(horsepower) AS largest_horsepower, car_makers.maker AS make FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cylinders = 3; ",
      "SELECT MAX(horsepower) AS largest_horsepower, car_makers.maker AS make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 GROUP BY make; ",
      "SELECT MAX(horsepower) AS largest_horsepower, car_makers.maker AS make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 GROUP BY car_makers.maker ORDER BY largest_horsepower DESC LIMIT 1; ",
      "SELECT MAX(horsepower) AS largest_horsepower, maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 GROUP BY maker HAVING MAX(horsepower) = (SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 3) LIMIT 1; ",
      "SELECT MAX(horsepower) AS largest_horsepower, car_makers.maker AS make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3 AND horsepower = (SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 3);"
    ]
  },
  {
    "id": 139,
    "db_id": "car_1",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "gpt_answers1": [
      "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'volvo'; ",
      "SELECT AVG(cars_data.edispl) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND car_makers.fullname = 'volvo'; ",
      "SELECT AVG(edispl) FROM cars_data WHERE id IN ( SELECT makeid FROM car_names WHERE model IN ( SELECT model FROM model_list WHERE maker = ( SELECT id FROM car_makers WHERE fullname = 'volvo' ) ) ); ",
      "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model IN ( SELECT model FROM model_list WHERE maker = ( SELECT id FROM car_makers WHERE fullname = 'volvo' ) ); ",
      "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN ( SELECT model FROM model_list WHERE maker = ( SELECT id FROM car_makers WHERE fullname = 'volvo' ) ) AS volvo_models ON car_names.model = volvo_models.model; ",
      "SELECT AVG(edispl) FROM cars_data WHERE id IN ( SELECT makeid FROM car_names WHERE model IN ( SELECT model FROM model_list WHERE maker IN ( SELECT id FROM car_makers WHERE fullname = 'volvo' ) ) ); ",
      "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model IN ( SELECT model FROM model_list WHERE maker IN ( SELECT id FROM car_makers WHERE fullname = 'volvo' ) ); ",
      "SELECT AVG(cars_data.edispl) FROM cars_data WHERE cars_data.id = ( SELECT makeid FROM car_names WHERE car_names.model = ( SELECT model FROM model_list WHERE model_list.maker = ( SELECT id FROM car_makers WHERE car_makers.fullname = 'volvo' ) ) ); ",
      "SELECT AVG(cars_data.edispl) FROM cars_data WHERE cars_data.id = ( SELECT makeid FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'volvo' ); ",
      "SELECT AVG(edispl) FROM cars_data WHERE id = ( SELECT makeid FROM car_names WHERE model = ( SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'volvo' ) );"
    ],
    "gpt_answers2": [
      "SELECT AVG(cars_data.edispl) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo' ",
      "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname LIKE '%volvo%' ",
      "SELECT AVG(edispl) FROM cars_data, car_names, model_list WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = 'volvo' ",
      "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker IN (SELECT id FROM car_makers WHERE maker = 'volvo') ",
      "SELECT AVG(edispl) FROM cars_data INNER JOIN (SELECT model_id FROM model_list WHERE model_list.maker = 'volvo') AS M ON cars_data.id = M.model_id INNER JOIN car_names ON cars_data.id = car_names.makeid ",
      "SELECT AVG(edispl) FROM cars_data, car_names WHERE cars_data.id = car_names.makeid AND car_names.model IN (SELECT model FROM model_list WHERE maker = 'volvo') ",
      "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker IN (SELECT id FROM car_makers WHERE fullname LIKE '%volvo%') ",
      "SELECT AVG(edispl) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND car_makers.fullname LIKE '%volvo%' ",
      "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname LIKE '%volvo%' ",
      "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = (SELECT id FROM car_makers WHERE fullname LIKE '%volvo%')"
    ],
    "gpt_answers3": [
      "SELECT AVG(edispl) FROM cars_data WHERE id IN (SELECT modelid FROM model_list WHERE maker = 'volvo');",
      "SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE maker = 'volvo';",
      "SELECT AVG(edispl) FROM cars_data,car_names,model_list WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND maker = 'volvo';",
      "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON model_list.model = car_names.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'volvo';",
      "SELECT AVG(edispl) FROM cars_data AS cd JOIN car_names AS cn ON cd.id = cn.makeid JOIN model_list AS ml ON cn.model = ml.model JOIN car_makers AS cm ON ml.maker = cm.id WHERE cm.fullname = 'volvo';",
      "SELECT AVG(cars_data.edispl) FROM cars_data, car_names, model_list, car_makers WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND car_makers.fullname = 'volvo';",
      "SELECT AVG(cars_data.edispl) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'volvo';",
      "SELECT AVG(c.edispl) FROM cars_data AS c JOIN car_names AS cn ON c.id = cn.makeid JOIN model_list AS ml ON cn.model = ml.model JOIN car_makers AS cm ON ml.maker = cm.id WHERE cm.fullname = 'volvo';",
      "SELECT AVG(c.edispl) FROM cars_data c, car_names cn, model_list ml, car_makers cm WHERE c.id = cn.makeid AND cn.model = ml.model AND ml.maker = cm.id AND cm.fullname = 'volvo';",
      "SELECT AVG(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname LIKE '%volvo%';"
    ]
  },
  {
    "id": 141,
    "db_id": "car_1",
    "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "gpt_answers1": [
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;",
      "SELECT cylinders, acceleration FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data) GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders ORDER BY MAX(accelerate) DESC;",
      "SELECT cylinders, MAX(accelerate) AS max_accelerate FROM cars_data GROUP BY cylinders;",
      "SELECT cylinders, accelerate FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders) GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders HAVING MAX(accelerate);",
      "SELECT cylinders, MAX(accelerate) AS max_accelerate FROM cars_data GROUP BY cylinders HAVING MAX(accelerate);",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders HAVING MAX(accelerate) = accelerate;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders HAVING accelerate = MAX(accelerate);",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders HAVING MAX(accelerate) >= ALL (SELECT accelerate FROM cars_data);"
    ],
    "gpt_answers2": [
      "SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders ORDER BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders IS NOT NULL GROUP BY cylinders;",
      "SELECT DISTINCT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders ORDER BY cylinders ASC;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders <> '' GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders NOT LIKE '' GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders HAVING cylinders > 0;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders IS NOT NULL GROUP BY cylinders HAVING cylinders > 0;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders <> '' GROUP BY cylinders HAVING cylinders > 0;"
    ],
    "gpt_answers3": [
      "SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders ORDER BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders IS NOT NULL GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders <> 0 GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders > 0 GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders != 0 GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders BETWEEN 1 AND 12 GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders > 0 AND cylinders < 13 GROUP BY cylinders;",
      "SELECT cylinders, MAX(accelerate) FROM cars_data WHERE cylinders IN (4, 6, 8, 10, 12) GROUP BY cylinders;"
    ]
  },
  {
    "id": 142,
    "db_id": "car_1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "gpt_answers1": [
      "SELECT model, COUNT(*) as num_versions FROM model_list GROUP BY model ORDER BY num_versions DESC LIMIT 1; ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM model_list GROUP BY modelid HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT modelid, COUNT(*) as count FROM model_list GROUP BY modelid ) ) ); ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM ( SELECT modelid, COUNT(*) as count FROM model_list GROUP BY modelid ORDER BY count DESC LIMIT 1 ) ); ",
      "SELECT model FROM model_list WHERE modelid = ( SELECT modelid FROM model_list GROUP BY modelid ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT model FROM model_list GROUP BY model HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT model, COUNT(*) as count FROM model_list GROUP BY model ) ); ",
      "SELECT model FROM model_list WHERE modelid = ( SELECT modelid FROM model_list GROUP BY modelid ORDER BY COUNT(*) DESC LIMIT 1 ) LIMIT 1; ",
      "SELECT model FROM ( SELECT model, COUNT(*) as count FROM model_list GROUP BY model ) WHERE count = ( SELECT MAX(count) FROM ( SELECT model, COUNT(*) as count FROM model_list GROUP BY model ) ) LIMIT 1; ",
      "SELECT model FROM model_list GROUP BY model HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT model, COUNT(*) as count FROM model_list GROUP BY model ) ) LIMIT 1; ",
      "SELECT m.model FROM model_list m JOIN ( SELECT modelid, COUNT(*) as counts FROM model_list GROUP BY modelid ORDER BY counts DESC LIMIT 1 ) subquery ON m.modelid = subquery.modelid; ",
      "SELECT model FROM model_list WHERE modelid IN ( SELECT modelid FROM model_list GROUP BY modelid HAVING COUNT(*) = ( SELECT MAX(counts) FROM ( SELECT modelid, COUNT(*) as counts FROM model_list GROUP BY modelid ) ) ) LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT model, COUNT(DISTINCT makeid)  FROM car_names  GROUP BY model  ORDER BY COUNT(DISTINCT makeid) DESC  LIMIT 1; ",
      "SELECT model  FROM car_names  GROUP BY model  HAVING COUNT(DISTINCT makeid) = (SELECT MAX(num_cars) FROM (SELECT model, COUNT(DISTINCT makeid) AS num_cars FROM car_names GROUP BY model) AS subquery); ",
      "SELECT model  FROM car_names  WHERE modelid IN (SELECT modelid FROM model_list GROUP BY modelid HAVING COUNT(DISTINCT maker) = (SELECT MAX(num_makers) FROM (SELECT modelid, COUNT(DISTINCT maker) AS num_makers FROM model_list GROUP BY modelid) AS subquery)); ",
      "SELECT model  FROM model_list  WHERE modelid IN (SELECT modelid FROM model_list GROUP BY modelid HAVING COUNT(DISTINCT maker) = (SELECT MAX(num_makers) FROM (SELECT modelid, COUNT(DISTINCT maker) AS num_makers FROM model_list GROUP BY modelid) AS subquery)); ",
      "SELECT model  FROM model_list  GROUP BY model  HAVING COUNT(DISTINCT maker) = (SELECT MAX(num_makers) FROM (SELECT model, COUNT(DISTINCT maker) AS num_makers FROM model_list GROUP BY model) AS subquery); ",
      "SELECT model  FROM model_list  WHERE modelid IN (SELECT makeid FROM cars_data GROUP BY makeid HAVING COUNT(DISTINCT id) = (SELECT MAX(num_versions) FROM (SELECT makeid, COUNT(DISTINCT id) AS num_versions FROM cars_data GROUP BY makeid) AS subquery)); ",
      "SELECT model  FROM model_list  WHERE modelid IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT id) = (SELECT MAX(num_versions) FROM (SELECT makeid, COUNT(DISTINCT id) AS num_versions FROM car_names GROUP BY makeid) AS subquery)); ",
      "SELECT model  FROM model_list  WHERE modelid IN (SELECT modelid FROM car_names GROUP BY modelid HAVING COUNT(DISTINCT make) = (SELECT MAX(num_versions) FROM (SELECT modelid, COUNT(DISTINCT make) AS num_versions FROM car_names GROUP BY modelid) AS subquery)); ",
      "SELECT model  FROM model_list  WHERE modelid IN (SELECT modelid FROM car_names GROUP BY modelid HAVING COUNT(DISTINCT make) = (SELECT MAX(num_versions) FROM (SELECT modelid, COUNT(DISTINCT make) AS num_versions FROM car_names GROUP BY modelid) AS subquery)) GROUP BY model; ",
      "SELECT model  FROM car_names  GROUP BY model  HAVING COUNT(DISTINCT make) = (SELECT MAX(num_versions) FROM (SELECT model, COUNT(DISTINCT make) AS num_versions FROM car_names GROUP BY model) AS subquery);"
    ],
    "gpt_answers3": [
      "SELECT model, COUNT(make) as num_cars  FROM car_names  GROUP BY model  ORDER BY num_cars DESC  LIMIT 1;",
      "SELECT model, COUNT(make) as num_cars  FROM car_names  GROUP BY model  HAVING num_cars = (SELECT MAX(count(make)) FROM car_names GROUP BY model);",
      "SELECT model  FROM car_names  GROUP BY model  HAVING COUNT(DISTINCT make) = (SELECT MAX(count(DISTINCT make)) FROM car_names GROUP BY model);",
      "SELECT model  FROM car_names  WHERE modelid IN (SELECT modelid FROM model_list GROUP BY modelid HAVING COUNT(make) = (SELECT MAX(count(make)) FROM model_list GROUP BY modelid));",
      "SELECT model  FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  GROUP BY model  ORDER BY COUNT(DISTINCT make) DESC  LIMIT 1;",
      "SELECT model  FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  GROUP BY model  HAVING COUNT(DISTINCT make) = (SELECT MAX(count(DISTINCT make)) FROM car_names INNER JOIN model_list ON car_names.model = model_list.modelid GROUP BY model);",
      "SELECT model  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  GROUP BY model  ORDER BY COUNT(make) DESC  LIMIT 1;",
      "SELECT model  FROM car_names  INNER JOIN cars_data ON car_names.makeid = cars_data.id  GROUP BY model  HAVING COUNT(make) = (SELECT MAX(count(make)) FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY model);",
      "SELECT model  FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  GROUP BY model  ORDER BY COUNT(DISTINCT make) DESC  LIMIT 1;",
      "SELECT model  FROM car_names  INNER JOIN model_list ON car_names.model = model_list.modelid  INNER JOIN cars_data ON car_names.makeid = cars_data.id  GROUP BY model  HAVING COUNT(DISTINCT make) = (SELECT MAX(count(DISTINCT make)) FROM car_names INNER JOIN model_list ON car_names.model = model_list.modelid INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY model);"
    ]
  },
  {
    "id": 143,
    "db_id": "car_1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "gpt_answers1": [
      "SELECT modelid, COUNT(DISTINCT model) AS num_versions  FROM model_list  GROUP BY modelid  ORDER BY num_versions DESC  LIMIT 1; ",
      "SELECT model, COUNT(DISTINCT modelid) AS num_versions  FROM model_list  GROUP BY model  ORDER BY num_versions DESC  LIMIT 1; ",
      "SELECT model, COUNT(*) AS num_versions  FROM model_list  GROUP BY model  ORDER BY num_versions DESC  LIMIT 1; ",
      "SELECT model, COUNT(*) AS num_versions  FROM model_list  GROUP BY model  HAVING num_versions = ( SELECT MAX(num_versions)  FROM ( SELECT model, COUNT(*) AS num_versions  FROM model_list  GROUP BY model ) ); ",
      "SELECT model, COUNT(*) AS num_versions  FROM model_list  GROUP BY model  HAVING COUNT(*) = ( SELECT MAX(num_versions)  FROM ( SELECT model, COUNT(*) AS num_versions  FROM model_list  GROUP BY model ) ); ",
      "SELECT model, COUNT(*) AS num_versions  FROM model_list  GROUP BY model  HAVING COUNT(*) = ( SELECT MAX(num_versions)  FROM ( SELECT model, COUNT(DISTINCT modelid) AS num_versions  FROM model_list  GROUP BY model ) ); ",
      "SELECT model, COUNT(DISTINCT modelid) AS num_versions  FROM model_list  GROUP BY model  HAVING COUNT(DISTINCT modelid) = ( SELECT MAX(num_versions)  FROM ( SELECT model, COUNT(DISTINCT modelid) AS num_versions  FROM model_list  GROUP BY model ) ); ",
      "SELECT model, COUNT(DISTINCT modelid) AS num_versions  FROM model_list  GROUP BY model  ORDER BY num_versions DESC  LIMIT 1; ",
      "SELECT model, COUNT(DISTINCT modelid) AS num_versions  FROM model_list  GROUP BY model  ORDER BY num_versions DESC, model ASC  LIMIT 1; ",
      "SELECT model, COUNT(DISTINCT modelid) AS num_versions  FROM model_list  GROUP BY model  HAVING num_versions = ( SELECT MAX(num_versions)  FROM ( SELECT model, COUNT(DISTINCT modelid) AS num_versions  FROM model_list  GROUP BY model ) );"
    ],
    "gpt_answers2": [
      "SELECT model, COUNT(DISTINCT version) AS num_versions FROM car_names GROUP BY model ORDER BY num_versions DESC LIMIT 1;",
      "SELECT model, COUNT(DISTINCT version) AS num_versions FROM car_names GROUP BY model HAVING num_versions = (SELECT MAX(num_versions) FROM (SELECT model, COUNT(DISTINCT version) AS num_versions FROM car_names GROUP BY model));",
      "SELECT model FROM car_names WHERE version = (SELECT MAX(version) FROM car_names);",
      "SELECT model FROM car_names GROUP BY model HAVING COUNT(DISTINCT version) = (SELECT MAX(version_count) FROM (SELECT model, COUNT(DISTINCT version) AS version_count FROM car_names GROUP BY model));",
      "SELECT model FROM car_names WHERE modelid IN (SELECT modelid FROM model_list GROUP BY modelid HAVING COUNT(DISTINCT version) = (SELECT MAX(version_count) FROM (SELECT modelid, COUNT(DISTINCT version) AS version_count FROM model_list GROUP BY modelid)));",
      "SELECT model FROM car_names WHERE makeid IN (SELECT makeid FROM cars_data GROUP BY makeid HAVING COUNT(DISTINCT version) = (SELECT MAX(version_count) FROM (SELECT makeid, COUNT(DISTINCT version) AS version_count FROM cars_data GROUP BY makeid)));",
      "SELECT model FROM car_names WHERE modelid IN (SELECT modelid FROM model_list GROUP BY modelid HAVING COUNT(DISTINCT version) = (SELECT MAX(version_count) FROM (SELECT modelid, COUNT(DISTINCT version) AS version_count FROM model_list GROUP BY modelid)));",
      "SELECT model FROM car_names WHERE makeid IN (SELECT makeid FROM cars_data GROUP BY makeid HAVING COUNT(DISTINCT version) = (SELECT MAX(version_count) FROM (SELECT makeid, COUNT(DISTINCT version) AS version_count FROM cars_data GROUP BY makeid)));",
      "SELECT model FROM car_names WHERE makeid IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(DISTINCT version) = (SELECT MAX(version_count) FROM (SELECT id, COUNT(DISTINCT version) AS version_count FROM car_makers GROUP BY id)));",
      "SELECT model FROM car_names WHERE makeid IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT version) = (SELECT MAX(version_count) FROM (SELECT maker, COUNT(DISTINCT version) AS version_count FROM model_list GROUP BY maker)));"
    ],
    "gpt_answers3": [
      "SELECT model, COUNT(DISTINCT model) AS version_count FROM model_list GROUP BY model ORDER BY version_count DESC LIMIT 1; ",
      "SELECT model, COUNT(model) AS version_count FROM car_names GROUP BY model ORDER BY version_count DESC LIMIT 1; ",
      "SELECT model, COUNT(DISTINCT model) AS version_count FROM car_names GROUP BY model ORDER BY version_count DESC LIMIT 1; ",
      "SELECT model, COUNT(DISTINCT make) AS version_count FROM car_names GROUP BY model ORDER BY version_count DESC LIMIT 1; ",
      "SELECT model, COUNT(model) AS version_count FROM car_names WHERE makeid IS NOT NULL GROUP BY model ORDER BY version_count DESC LIMIT 1; ",
      "SELECT model, COUNT(model) AS version_count FROM car_names WHERE model IS NOT NULL GROUP BY model ORDER BY version_count DESC LIMIT 1; ",
      "SELECT model, COUNT(DISTINCT make) AS version_count FROM car_names GROUP BY model HAVING COUNT(DISTINCT make) = (SELECT MAX(version_count) FROM (SELECT model, COUNT(DISTINCT make) AS version_count FROM car_names GROUP BY model)); ",
      "SELECT model, COUNT(model) AS version_count FROM car_names WHERE model IS NOT NULL GROUP BY model HAVING COUNT(model) = (SELECT MAX(version_count) FROM (SELECT model, COUNT(model) AS version_count FROM car_names GROUP BY model)); ",
      "SELECT model, COUNT(model) AS version_count FROM car_names GROUP BY model HAVING COUNT(model) = (SELECT MAX(version_count) FROM (SELECT model, COUNT(model) AS version_count FROM car_names GROUP BY model)); ",
      "SELECT model, COUNT(DISTINCT make) AS version_count FROM car_names WHERE make IS NOT NULL GROUP BY model HAVING COUNT(DISTINCT make) = (SELECT MAX(version_count) FROM (SELECT model, COUNT(DISTINCT make) AS version_count FROM car_names GROUP BY model));"
    ]
  },
  {
    "id": 151,
    "db_id": "car_1",
    "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "gpt_answers1": [
      "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) > 3);",
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.modelid) > 3;",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.modelid) > 3;",
      "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3);",
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(*) > 3;",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(*) > 3;",
      "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) > 3);",
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) > 3;",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) > 3;",
      "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT *) > 3);"
    ],
    "gpt_answers2": [
      "SELECT car_makers.id, car_makers.maker FROM car_makers  WHERE car_makers.id IN (SELECT model_list.maker FROM model_list  GROUP BY model_list.maker  HAVING COUNT(DISTINCT model_list.modelid) > 3); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.modelid) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN (SELECT maker, COUNT(DISTINCT modelid) AS model_count  FROM model_list GROUP BY maker) AS subquery  ON subquery.maker = car_makers.id  WHERE subquery.model_count > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN (SELECT maker, COUNT(DISTINCT model) AS model_count  FROM model_list GROUP BY maker) AS subquery  ON subquery.maker = car_makers.id  WHERE subquery.model_count > 3; ",
      "SELECT id, maker FROM car_makers  WHERE id IN (SELECT maker FROM model_list  GROUP BY maker HAVING COUNT(DISTINCT modelid) > 3); ",
      "SELECT id, maker FROM car_makers  WHERE id IN (SELECT maker FROM model_list  GROUP BY maker  HAVING COUNT(DISTINCT modelid) > (SELECT COUNT(DISTINCT modelid)  FROM model_list  GROUP BY maker  ORDER BY COUNT(DISTINCT modelid) DESC  LIMIT 1 OFFSET 2)); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.id HAVING COUNT(DISTINCT model_list.model) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN (SELECT maker, COUNT(DISTINCT model) AS model_count  FROM model_list GROUP BY maker HAVING COUNT(DISTINCT model) > 3) AS subquery  ON subquery.maker = car_makers.id; ",
      "SELECT id, maker FROM car_makers  INNER JOIN (SELECT maker, COUNT(DISTINCT modelid) AS model_count  FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) > 3) AS subquery  ON subquery.maker = car_makers.id; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(model_list.modelid) > 3;"
    ],
    "gpt_answers3": [
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.modelid) > 3; ",
      "SELECT id, maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) > 3 ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3 ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE id IN ( SELECT model_list.maker FROM model_list GROUP BY model_list.maker HAVING COUNT(*) > 3 ); ",
      "SELECT id, maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3 ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.modelid) > 3; ",
      "SELECT id, maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3 ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE id IN ( SELECT model_list.maker FROM model_list GROUP BY model_list.maker HAVING COUNT(*) > 3 ); ",
      "SELECT id, maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) > 3 ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE id IN ( SELECT model_list.maker FROM model_list GROUP BY model_list.maker HAVING COUNT(*) > 3 ); "
    ]
  },
  {
    "id": 154,
    "db_id": "car_1",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
    "gpt_answers1": [
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;",
      "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year;",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year HAVING count(year) > 0;",
      "SELECT year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE weight >= 3000 AND weight <= 4000;",
      "SELECT cars_data.year FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.weight >= 3000 AND cars_data.weight <= 4000;",
      "SELECT DISTINCT cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.weight >= 3000 AND cars_data.weight <= 4000;",
      "SELECT year FROM cars_data WHERE 3000 <= weight <= 4000;",
      "SELECT cars_data.year FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.weight >= 3000 AND cars_data.weight <= 4000;",
      "SELECT year FROM cars_data, car_names WHERE cars_data.id = car_names.makeid AND weight >= 3000 AND weight <= 4000;"
    ],
    "gpt_answers2": [
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000; ",
      "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000; ",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year; ",
      "SELECT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000 GROUP BY year; ",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year HAVING COUNT(year) > 0; ",
      "SELECT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000 GROUP BY year HAVING COUNT(year) > 0; ",
      "SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000; ",
      "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000; ",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 AND year IS NOT NULL; ",
      "SELECT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000 AND year IS NOT NULL;"
    ],
    "gpt_answers3": [
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;",
      "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 GROUP BY year;",
      "SELECT year FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE weight >= 3000 AND weight <= 4000;",
      "SELECT cars_data.year FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.weight >= 3000 AND cars_data.weight <= 4000;",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 AND EXISTS (SELECT 1 FROM car_names WHERE car_names.makeid = cars_data.id);",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 AND EXISTS (SELECT 1 FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id);",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 AND id IN (SELECT makeid FROM car_names);",
      "SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000 AND cars_data.id IN (SELECT makeid FROM car_names);",
      "SELECT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000 AND cars_data.id IN (SELECT makeid FROM car_names);"
    ]
  },
  {
    "id": 155,
    "db_id": "car_1",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
    "gpt_answers1": [
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000  INTERSECT  SELECT DISTINCT year  FROM cars_data  WHERE weight > 3000; ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000  AND year IN (SELECT DISTINCT year FROM cars_data WHERE weight > 3000); ",
      "SELECT DISTINCT year  FROM cars_data  WHERE (weight < 4000 OR weight > 3000); ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000  OR weight > 3000; ",
      "SELECT year  FROM cars_data  GROUP BY year  HAVING SUM(CASE WHEN weight < 4000 THEN 1 ELSE 0 END) > 0  AND SUM(CASE WHEN weight > 3000 THEN 1 ELSE 0 END) > 0; ",
      "SELECT year  FROM cars_data  WHERE weight < 4000  OR weight > 3000  GROUP BY year; ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000  AND EXISTS (SELECT 1 FROM cars_data WHERE weight > 3000); ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000  INTERSECT  SELECT DISTINCT year  FROM cars_data  WHERE EXISTS (SELECT 1 FROM cars_data WHERE weight > 3000); ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000  AND year IN (SELECT DISTINCT year FROM cars_data WHERE EXISTS (SELECT 1 FROM cars_data WHERE weight > 3000)); ",
      "SELECT DISTINCT year  FROM cars_data  WHERE (weight < 4000 AND year IN (SELECT DISTINCT year FROM cars_data WHERE weight > 3000)); "
    ],
    "gpt_answers2": [
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 INTERSECT SELECT DISTINCT year FROM cars_data WHERE weight > 3000; ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 AND year IN ( SELECT DISTINCT year FROM cars_data WHERE weight > 3000 ); ",
      "SELECT DISTINCT c1.year  FROM cars_data c1, cars_data c2 WHERE c1.weight < 4000 AND c2.weight > 3000 AND c1.year = c2.year; ",
      "SELECT DISTINCT c1.year  FROM cars_data c1 INNER JOIN cars_data c2 ON c1.year = c2.year WHERE c1.weight < 4000 AND c2.weight > 3000; ",
      "SELECT DISTINCT c1.year  FROM cars_data c1 INNER JOIN cars_data c2 ON c1.year = c2.year WHERE c1.weight < 4000 AND c2.weight > 3000; ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 AND year IN ( SELECT year FROM cars_data WHERE weight > 3000 GROUP BY year ); ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 AND year IN ( SELECT year FROM cars_data WHERE weight > 3000 GROUP BY year HAVING COUNT(year) > 0 ); ",
      "SELECT year  FROM cars_data  WHERE weight < 4000 GROUP BY year HAVING MAX(weight) > 3000; ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 AND EXISTS ( SELECT 1 FROM cars_data WHERE weight > 3000 AND cars_data.year = year ); ",
      "SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 AND year IN ( SELECT DISTINCT year FROM cars_data WHERE weight > 3000 GROUP BY year );"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 UNION SELECT DISTINCT year FROM cars_data WHERE weight > 3000;",
      "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000;",
      "SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;",
      "SELECT DISTINCT year FROM cars_data WHERE weight IN (SELECT DISTINCT weight FROM cars_data WHERE weight < 4000 OR weight > 3000);",
      "SELECT DISTINCT year FROM cars_data WHERE weight NOT BETWEEN 4000 AND 3000;",
      "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND year IN (SELECT DISTINCT year FROM cars_data WHERE weight > 3000);",
      "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000;",
      "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 INTERSECT SELECT DISTINCT year FROM cars_data WHERE weight > 3000;",
      "SELECT DISTINCT year FROM cars_data WHERE weight < 4000 XOR weight > 3000;",
      "SELECT year FROM cars_data GROUP BY year HAVING MAX(weight) > 3000 AND MIN(weight) < 4000;"
    ]
  },
  {
    "id": 158,
    "db_id": "car_1",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "gpt_answers1": [
      "SELECT MIN(cylinders) FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model='volvo')",
      "SELECT cylinders FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model='volvo') ORDER BY accelerate LIMIT 1",
      "SELECT cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model='volvo' ORDER BY accelerate LIMIT 1",
      "SELECT MIN(cylinders) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model='volvo'",
      "SELECT MIN(cylinders) FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model IN (SELECT modelid FROM model_list WHERE maker='volvo'))",
      "SELECT MIN(cylinders) FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model=(SELECT modelid FROM model_list WHERE maker='volvo'))",
      "SELECT cylinders FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model IN (SELECT modelid FROM model_list WHERE maker='volvo')) ORDER BY accelerate LIMIT 1",
      "SELECT cylinders FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model=(SELECT modelid FROM model_list WHERE maker='volvo')) ORDER BY accelerate LIMIT 1",
      "SELECT MIN(cylinders) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker='volvo'",
      "SELECT cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker='volvo' ORDER BY accelerate LIMIT 1"
    ],
    "gpt_answers2": [
      "SELECT MIN(cylinders)  FROM cars_data  WHERE id IN ( SELECT makeid FROM car_names WHERE model = 'volvo' ) ",
      "SELECT MIN(cylinders)  FROM cars_data  WHERE id = ( SELECT makeid FROM car_names WHERE model = 'volvo' ) ",
      "SELECT MIN(cylinders)  FROM cars_data  WHERE id = ( SELECT makeid FROM car_names WHERE make = 'volvo' ) ",
      "SELECT MIN(cylinders)  FROM cars_data  WHERE id IN ( SELECT makeid FROM car_names WHERE make = 'volvo' ) ",
      "SELECT MIN(distinct cylinders)  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvo' ",
      "SELECT MIN(cylinders)  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvo'  ",
      "SELECT MIN(cylinders)  FROM cars_data, car_names WHERE cars_data.id = car_names.makeid AND car_names.model = 'volvo' ",
      "SELECT MIN(cylinders)  FROM cars_data d JOIN car_names n ON d.id = n.makeid WHERE n.model = 'volvo' ",
      "SELECT MIN(cylinders)  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid AND car_names.model = 'volvo' ",
      "SELECT MIN(cylinders)  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvo'"
    ],
    "gpt_answers3": [
      "SELECT cylinders  FROM cars_data  WHERE id = (SELECT makeid  FROM car_names  WHERE model = 'volvo'  ORDER BY accelerate ASC  LIMIT 1); ",
      "SELECT cylinders  FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = 'volvo'  ORDER BY accelerate ASC  LIMIT 1; ",
      "SELECT cylinders  FROM cars_data  WHERE id IN (SELECT makeid  FROM car_names  WHERE model = 'volvo')  ORDER BY accelerate ASC  LIMIT 1; ",
      "SELECT MIN(cylinders)  FROM cars_data  WHERE id IN (SELECT makeid  FROM car_names  WHERE model = 'volvo'); ",
      "SELECT cylinders  FROM cars_data  WHERE id IN (SELECT makeid  FROM car_names  WHERE model = 'volvo')  AND accelerate = (SELECT MIN(accelerate)  FROM cars_data  WHERE id IN (SELECT makeid  FROM car_names  WHERE model = 'volvo')); ",
      "SELECT cylinders  FROM cars_data  WHERE id = (SELECT makeid  FROM car_names  WHERE model = 'volvo'  AND accelerate = (SELECT MIN(accelerate)  FROM cars_data  WHERE id IN (SELECT makeid  FROM car_names  WHERE model = 'volvo'))); ",
      "SELECT MIN(cylinders)  FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  WHERE car_names.model = 'volvo'  ORDER BY accelerate ASC  LIMIT 1; ",
      "SELECT MIN(cylinders)  FROM cars_data  INNER JOIN car_names ON cars_data.id = car_names.makeid  INNER JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = (SELECT id  FROM car_makers  WHERE maker = 'volvo')  ORDER BY accelerate ASC  LIMIT 1; ",
      "SELECT MIN(cylinders)  FROM cars_data  INNER JOIN (SELECT makeid  FROM car_names  WHERE model = 'volvo') AS subquery ON cars_data.id = subquery.makeid  ORDER BY accelerate ASC  LIMIT 1; ",
      "SELECT MIN(cylinders)  FROM cars_data  INNER JOIN (SELECT makeid  FROM car_names  INNER JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = (SELECT id  FROM car_makers  WHERE maker = 'volvo')) AS subquery  ON cars_data.id = subquery.makeid  ORDER BY accelerate ASC  LIMIT 1;"
    ]
  },
  {
    "id": 160,
    "db_id": "car_1",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
      "SELECT COUNT(*) FROM cars_data cd1, (SELECT MAX(horsepower) max_hp FROM cars_data) cd2 WHERE cd1.accelerate > cd2.max_hp;",
      "SELECT COUNT(*) FROM cars_data cd1 INNER JOIN (SELECT MAX(horsepower) max_hp FROM cars_data) cd2 ON cd1.accelerate > cd2.max_hp;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > ANY (SELECT MAX(horsepower) FROM cars_data);",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > ALL (SELECT horsepower FROM cars_data);",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) LIMIT 1;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) ORDER BY accelerate DESC LIMIT 1;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1);",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) HAVING MAX(horsepower);",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) GROUP BY horsepower;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data); ",
      "SELECT COUNT(*) FROM cars_data  INNER JOIN (SELECT MAX(horsepower) AS max_hp FROM cars_data) AS t ON cars_data.accelerate > t.max_hp; ",
      "SELECT COUNT(*) FROM cars_data  WHERE accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1); ",
      "SELECT COUNT(*) FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data ORDER BY horsepower DESC); ",
      "SELECT COUNT(*) FROM cars_data  WHERE accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1 OFFSET 0); ",
      "SELECT COUNT(*) FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data ORDER BY horsepower DESC LIMIT 1 OFFSET 0); ",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) LIMIT 10; ",
      "SELECT COUNT(*) FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)  GROUP BY horsepower  ORDER BY horsepower DESC  LIMIT 1; ",
      "SELECT COUNT(*) FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data HAVING MAX(horsepower)); ",
      "SELECT COUNT(*) FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)  GROUP BY horsepower  HAVING MAX(horsepower);"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data WHERE horsepower IS NOT NULL)",
      "SELECT COUNT(*) FROM cars_data cd1 JOIN cars_data cd2 ON cd1.accelerate > cd2.horsepower",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT TOP 1 horsepower FROM cars_data ORDER BY horsepower DESC)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data GROUP BY horsepower)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data HAVING max(horsepower) IS NOT NULL)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT horsepower FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data))",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > ANY (SELECT horsepower FROM cars_data)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data WHERE horsepower <> NULL)"
    ]
  },
  {
    "id": 161,
    "db_id": "car_1",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
      "SELECT COUNT(*) FROM cars_data cd1 WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data cd2 WHERE cd1.id <> cd2.id)",
      "SELECT COUNT(*) FROM cars_data WHERE horsepower < (SELECT MAX(accelerate) FROM cars_data)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > ALL(SELECT horsepower FROM cars_data)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > ANY(SELECT horsepower FROM cars_data)",
      "SELECT COUNT(*) FROM cars_data cd1 INNER JOIN (SELECT max(horsepower) as max_hp FROM cars_data) cd2 WHERE cd1.accelerate > cd2.max_hp",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MIN(horsepower) FROM cars_data WHERE horsepower != (SELECT MAX(horsepower) FROM cars_data))",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT horsepower FROM cars_data WHERE horsepower != (SELECT MAX(horsepower) FROM cars_data) ORDER BY horsepower DESC LIMIT 1)",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM (SELECT horsepower FROM cars_data WHERE horsepower < (SELECT MAX(horsepower) FROM cars_data)))"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data); ",
      "SELECT COUNT(*)  FROM cars_data  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)  LIMIT 1; ",
      "SELECT COUNT(*) AS car_count  FROM cars_data  LEFT JOIN car_names ON cars_data.id = car_names.makeid  LEFT JOIN model_list ON car_names.model = model_list.model  LEFT JOIN car_makers ON model_list.maker = car_makers.id  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data); ",
      "SELECT COUNT(*) AS car_count  FROM cars_data  LEFT JOIN car_names ON cars_data.id = car_names.makeid  LEFT JOIN model_list ON car_names.model = model_list.model  LEFT JOIN car_makers ON model_list.maker = car_makers.id  WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)  LIMIT 1; ",
      "SELECT COUNT(*)  FROM cars_data,  (SELECT MAX(horsepower) AS max_hp FROM cars_data) AS max_table  WHERE accelerate > max_table.max_hp; ",
      "SELECT COUNT(*)  FROM (SELECT MAX(horsepower) AS max_hp FROM cars_data) AS max_table, cars_data  WHERE accelerate > max_table.max_hp; ",
      "SELECT COUNT(*)  FROM cars_data  JOIN (SELECT MAX(horsepower) AS max_hp FROM cars_data) AS max_table  WHERE accelerate > max_table.max_hp; ",
      "SELECT COUNT(*)  FROM cars_data  JOIN (SELECT MAX(horsepower) AS max_hp FROM cars_data) AS max_table  ON accelerate > max_table.max_hp; ",
      "SELECT COUNT(*)  FROM cars_data  LEFT JOIN (SELECT MAX(horsepower) AS max_hp FROM cars_data) AS max_table  ON accelerate > max_table.max_hp; ",
      "SELECT COUNT(*)  FROM cars_data,  (SELECT MAX(horsepower) AS max_hp FROM cars_data) AS max_table  WHERE accelerate > max_table.max_hp;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) LIMIT 10;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) ORDER BY id LIMIT 10;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) GROUP BY id LIMIT 10;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) HAVING id = (SELECT MAX(id) FROM cars_data);",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) AND id = (SELECT MAX(id) FROM cars_data) LIMIT 10;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) AND id = (SELECT MAX(id) FROM cars_data) GROUP BY id LIMIT 10;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) UNION ALL SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) LIMIT 10;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) UNION SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) LIMIT 10;",
      "SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) UNION SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data) GROUP BY id LIMIT 10;"
    ]
  },
  {
    "id": 162,
    "db_id": "car_1",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT countries.countryid)  FROM countries  INNER JOIN car_makers ON car_makers.country = countries.countryid  GROUP BY countries.countryid  HAVING COUNT(car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countryid)  FROM car_makers WHERE countryid IN (SELECT country  FROM car_makers  GROUP BY country  HAVING COUNT(id) > 2); ",
      "SELECT COUNT(DISTINCT countryid)  FROM car_makers WHERE countryid IN (SELECT country  FROM car_makers  GROUP BY country  HAVING COUNT(*) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid)  FROM countries, car_makers WHERE car_makers.country = countries.countryid  GROUP BY countries.countryid  HAVING COUNT(car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countryid)  FROM car_makers WHERE countryid IN (SELECT country  FROM car_makers  GROUP BY country  HAVING COUNT(DISTINCT id) > 2); ",
      "SELECT COUNT(DISTINCT countryid)  FROM car_makers WHERE countryid IN (SELECT country  FROM car_makers  GROUP BY country  HAVING COUNT(DISTINCT car_makers.id) > 2); ",
      "SELECT COUNT(DISTINCT countryid)  FROM car_makers WHERE countryid IN (SELECT country  FROM car_makers  GROUP BY country HAVING COUNT(id) > 2); ",
      "SELECT COUNT(DISTINCT countryid)  FROM car_makers WHERE countryid IN (SELECT country  FROM car_makers  GROUP BY country HAVING COUNT(*) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid)  FROM countries  JOIN car_makers ON car_makers.country = countries.countryid  GROUP BY car_makers.country  HAVING COUNT(car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryid)  FROM countries  INNER JOIN car_makers ON car_makers.country = countries.countryid  WHERE car_makers.id IN (SELECT maker FROM model_list)  GROUP BY countries.countryid  HAVING COUNT(DISTINCT car_makers.id) > 2;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT(countries.countryid)) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT(car_makers.id)) > 2; ",
      "SELECT COUNT(DISTINCT(countryid)) FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT(id)) > 2 ); ",
      "SELECT COUNT(DISTINCT(countries.countryid)) FROM countries WHERE EXISTS ( SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country GROUP BY car_makers.country HAVING COUNT(DISTINCT(id)) > 2 ); ",
      "SELECT COUNT(DISTINCT countryid) FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 2 ); ",
      "SELECT COUNT(DISTINCT(countries.countryid)) FROM countries JOIN ( SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(DISTINCT(car_makers.id)) > 2 ) AS cm ON countries.countryid = cm.country; ",
      "SELECT COUNT(DISTINCT(countryid)) FROM countries WHERE EXISTS ( SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country GROUP BY car_makers.country HAVING COUNT(*) > 2 ); ",
      "SELECT COUNT(DISTINCT(countries.countryid)) FROM countries WHERE countryid IN ( SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 2 ); ",
      "SELECT COUNT(DISTINCT(countries.countryid)) FROM countries JOIN ( SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 2 ) AS cm ON countries.countryid = cm.country; ",
      "SELECT COUNT(DISTINCT(countries.countryid)) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.country HAVING COUNT(DISTINCT(car_makers.id)) > 2; ",
      "SELECT COUNT(DISTINCT(countries.countryid)) FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 2 );"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT country) FROM car_makers WHERE country IN (SELECT countryid FROM countries) GROUP BY country HAVING COUNT(DISTINCT id) > 2; ",
      "SELECT COUNT(DISTINCT car_makers.country) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT country) FROM car_makers WHERE id IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(DISTINCT maker) > 2); ",
      "SELECT COUNT(DISTINCT car_makers.country) FROM car_makers INNER JOIN (SELECT countryid, COUNT(DISTINCT id) AS makers_count FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country) AS cm ON car_makers.country = cm.countryid WHERE cm.makers_count > 2; ",
      "SELECT COUNT(DISTINCT country) FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 2; ",
      "SELECT COUNT(DISTINCT cm.country) FROM countries AS c INNER JOIN (SELECT country, COUNT(DISTINCT id) AS makers_count FROM car_makers GROUP BY country) AS cm ON c.countryid = cm.country WHERE makers_count > 2; ",
      "SELECT COUNT(DISTINCT cm.country) FROM car_makers AS cm INNER JOIN (SELECT country, COUNT(DISTINCT id) AS makers_count FROM car_makers GROUP BY country) AS car_count ON cm.country = car_count.country WHERE car_count.makers_count > 2; ",
      "SELECT COUNT(DISTINCT countryid) FROM car_makers AS cm INNER JOIN (SELECT countryid, COUNT(DISTINCT id) AS makers_count FROM car_makers GROUP BY countryid) AS car_count ON cm.country = car_count.countryid WHERE car_count.makers_count > 2; ",
      "SELECT COUNT(DISTINCT countries.countryname) FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countryname) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 2);"
    ]
  },
  {
    "id": 163,
    "db_id": "car_1",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE (SELECT COUNT(*) FROM car_makers WHERE car_makers.country = countries.countryid) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries  WHERE EXISTS (SELECT 1 FROM car_makers WHERE car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(*) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries WHERE countryid IN (SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.country HAVING COUNT(*) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries, car_makers WHERE countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(car_makers.maker) > 2; ",
      "SELECT COUNT(*) FROM (SELECT countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY car_makers.country HAVING COUNT(*) > 2); ",
      "SELECT COUNT(*) FROM (SELECT countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(car_makers.maker) > 2); ",
      "SELECT COUNT(*) FROM (SELECT countries.countryid FROM countries JOIN car_makers ON countries.countryid = car_makers.country HAVING COUNT(*) > 2 GROUP BY countries.countryid); ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.maker IN (SELECT car_makers.maker FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 2);"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT countries.countryname) FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countryname) FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countryname HAVING COUNT(DISTINCT maker) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryname) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) > 2; ",
      "SELECT COUNT(DISTINCT countryname) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countryname HAVING COUNT(DISTINCT car_makers.id) > 2; ",
      "SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2); ",
      "SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 2); ",
      "SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 2); ",
      "SELECT COUNT(DISTINCT countryname) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryname) FROM countries JOIN car_makers ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM model_list); ",
      "SELECT COUNT(DISTINCT countryname) FROM countries WHERE countryid IN (SELECT country FROM car_makers WHERE id IN (SELECT maker FROM model_list));"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries, car_makers WHERE countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(DISTINCT car_makers.id) > 2; ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries, car_makers WHERE countries.countryid = car_makers.country AND car_makers.id IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(DISTINCT maker) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(DISTINCT maker) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(DISTINCT maker) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(DISTINCT maker) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(DISTINCT fullname) > 2); ",
      "SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IN (SELECT id FROM car_makers GROUP BY id HAVING COUNT(DISTINCT fullname) > 2);"
    ]
  },
  {
    "id": 167,
    "db_id": "car_1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "gpt_answers1": [
      "SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 GROUP BY model ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 AND cars_data.horsepower = (SELECT MAX(horsepower) FROM cars_data WHERE cylinders = 4); ",
      "SELECT model FROM car_names, model_list, cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.model AND car_names.makeid = cars_data.id JOIN cars_data ON cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list JOIN cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list JOIN cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list JOIN cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id AND cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data INNER JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON model_list.model = car_names.model WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data INNER JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON model_list.model = car_names.model WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1; ",
      "SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1; ",
      "SELECT model_list.model FROM model_list, car_makers, car_names, cars_data WHERE model_list.maker = car_makers.id AND car_names.model = model_list.model AND cars_data.id = car_names.makeid AND cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1; ",
      "SELECT model_list.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1; ",
      "SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 GROUP BY model_list.model ORDER BY MAX(cars_data.horsepower) DESC LIMIT 1; ",
      "SELECT model_list.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 GROUP BY model_list.model ORDER BY MAX(cars_data.horsepower) DESC LIMIT 1; ",
      "SELECT model_list.model FROM model_list, car_makers, car_names, cars_data WHERE model_list.maker = car_makers.id AND car_names.model = model_list.model AND cars_data.id = car_names.makeid AND cars_data.cylinders = 4 GROUP BY model_list.model ORDER BY MAX(cars_data.horsepower) DESC LIMIT 1; ",
      "SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 GROUP BY model_list.model HAVING MAX(cars_data.horsepower) LIMIT 1; ",
      "SELECT model_list.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 GROUP BY model_list.model HAVING MAX(cars_data.horsepower) LIMIT 1; ",
      "SELECT model_list.model FROM model_list, car_makers, car_names, cars_data WHERE model_list.maker = car_makers.id AND car_names.model = model_list.model AND cars_data.id = car_names.makeid AND cars_data.cylinders = 4 GROUP BY model_list.model HAVING MAX(cars_data.horsepower) LIMIT 1; ",
      "SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders = 4 GROUP BY model_list.model ORDER BY cars_data.horsepower DESC LIMIT 1;"
    ]
  },
  {
    "id": 169,
    "db_id": "car_1",
    "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
    "gpt_answers1": [
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND horsepower < (SELECT MIN(horsepower) FROM cars_data); ",
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND horsepower < (SELECT horsepower FROM cars_data ORDER BY horsepower LIMIT 1); ",
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND horsepower < (SELECT MIN(horsepower) FROM (SELECT horsepower FROM cars_data) AS temp); ",
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 GROUP BY makeid, make HAVING horsepower < MIN(horsepower); ",
      "SELECT DISTINCT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND (makeid, make) IN (SELECT makeid, make FROM cars_data WHERE horsepower < (SELECT MIN(horsepower) FROM cars_data)); ",
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND (makeid, make) IN (SELECT makeid, make FROM cars_data WHERE horsepower < (SELECT MIN(horsepower) FROM (SELECT horsepower FROM cars_data))); ",
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND (makeid, make) IN (SELECT makeid, make FROM cars_data WHERE horsepower < (SELECT horsepower FROM cars_data ORDER BY horsepower LIMIT 1)); ",
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND (makeid, make) IN (SELECT makeid, make FROM (SELECT makeid, make FROM cars_data) WHERE horsepower < (SELECT MIN(horsepower) FROM cars_data)); ",
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND (makeid, make) IN (SELECT makeid, make FROM (SELECT makeid, make FROM cars_data) WHERE horsepower < (SELECT MIN(horsepower) FROM (SELECT horsepower FROM cars_data))); ",
      "SELECT makeid, make FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cylinders < 4 AND (makeid, make) IN (SELECT makeid, make FROM (SELECT makeid, make FROM cars_data WHERE horsepower < (SELECT MIN(horsepower) FROM cars_data)));"
    ],
    "gpt_answers2": [
      "SELECT car_names.makeid, car_names.make  FROM car_names  JOIN model_list ON car_names.model = model_list.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.cylinders < 4 AND cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data) ",
      "SELECT car_names.makeid, car_names.make  FROM car_names  JOIN model_list ON car_names.model = model_list.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.cylinders < 4  AND cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data) AND cars_data.horsepower IS NOT NULL ",
      "SELECT cn.makeid, cn.make  FROM car_names cn  JOIN model_list ml ON cn.model = ml.model  JOIN cars_data cd ON cn.makeid = cd.id  WHERE cd.cylinders < 4  AND cd.horsepower < (SELECT MIN(horsepower) FROM cars_data) ",
      "SELECT makeid, make  FROM car_names  WHERE makeid IN (SELECT id  FROM cars_data  WHERE cylinders < 4  AND horsepower < (SELECT MIN(horsepower) FROM cars_data)) ",
      "SELECT makeid, make  FROM car_names  WHERE makeid IN (SELECT id  FROM cars_data  WHERE cylinders < 4  AND horsepower < (SELECT MIN(horsepower) FROM cars_data) AND cylinders IS NOT NULL) ",
      "SELECT car_names.makeid, car_names.make  FROM car_names, model_list, cars_data  WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND cars_data.cylinders < 4 AND cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data) ",
      "SELECT cn.makeid, cn.make  FROM car_names cn, model_list ml, cars_data cd  WHERE cn.model = ml.model AND cn.makeid = cd.id AND cd.cylinders < 4 AND cd.horsepower < (SELECT MIN(horsepower) FROM cars_data) ",
      "SELECT makeid, make  FROM car_names  WHERE makeid IN (SELECT id  FROM cars_data  WHERE cylinders < 4  AND horsepower <= (SELECT MIN(horsepower) FROM cars_data)) ",
      "SELECT car_names.makeid, car_names.make  FROM car_names  INNER JOIN model_list ON car_names.model = model_list.model  INNER JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.cylinders < 4  AND cars_data.horsepower < (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders IS NOT NULL AND cars_data.horsepower IS NOT NULL ",
      "SELECT makeid, make  FROM car_names  WHERE makeid IN (SELECT id  FROM cars_data  WHERE cylinders < 4  AND horsepower < (SELECT MIN(horsepower) FROM cars_data) AND cylinders IS NOT NULL AND horsepower IS NOT NULL)"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower < ( SELECT MIN(horsepower) FROM cars_data ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers, model_list, car_names, cars_data WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.cylinders < 4 AND cars_data.horsepower < ( SELECT MIN(horsepower) FROM cars_data ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower < ( SELECT MIN(horsepower) FROM cars_data ); ",
      "SELECT id, maker FROM car_makers WHERE id IN ( SELECT DISTINCT model_list.maker FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower < ( SELECT MIN(horsepower) FROM cars_data ) ); ",
      "SELECT id, maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower < ( SELECT MIN(horsepower) FROM cars_data ) ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN ( SELECT DISTINCT maker FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower < ( SELECT MIN(horsepower) FROM cars_data ) ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN ( SELECT maker FROM model_list WHERE model_list.model IN ( SELECT car_names.model FROM car_names WHERE car_names.makeid IN ( SELECT id FROM cars_data WHERE cylinders < 4 AND horsepower < ( SELECT MIN(horsepower) FROM cars_data ) ) ) ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN ( SELECT model_list.maker FROM model_list WHERE model_list.model IN ( SELECT car_names.model FROM car_names WHERE car_names.makeid IN ( SELECT cars_data.id FROM cars_data WHERE cylinders < 4 AND horsepower < ( SELECT MIN(horsepower) FROM cars_data ) ) ) ); ",
      "SELECT id, maker FROM car_makers WHERE id IN ( SELECT DISTINCT maker FROM model_list WHERE model_list.model IN ( SELECT model FROM car_names WHERE car_names.makeid IN ( SELECT id FROM cars_data WHERE cylinders < 4 AND horsepower < ( SELECT MIN(horsepower) FROM cars_data ) ) ) ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN ( SELECT model_list.maker FROM model_list WHERE model_list.model IN ( SELECT model FROM car_names WHERE car_names.makeid IN ( SELECT cars_data.id FROM cars_data WHERE cars_data.cylinders < 4 AND cars_data.horsepower < ( SELECT MIN(horsepower) FROM cars_data ) ) ) );"
    ]
  },
  {
    "id": 170,
    "db_id": "car_1",
    "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "gpt_answers1": [
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980; ",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year <= 1980; ",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 LIMIT 1; ",
      "SELECT mpg FROM cars_data WHERE cylinders = 8 AND year < 1980 ORDER BY mpg DESC LIMIT 1; ",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 ORDER BY mpg DESC LIMIT 1; ",
      "SELECT mpg FROM cars_data WHERE cylinders = 8 AND year < 1980 ORDER BY mpg DESC LIMIT 1; ",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 GROUP BY cylinders, year; ",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 GROUP BY cylinders, year LIMIT 1; ",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 GROUP BY cylinders, year HAVING year = MAX(year); ",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 GROUP BY cylinders, year HAVING COUNT(*) > 1;"
    ],
    "gpt_answers2": [
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year <= 1979;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year BETWEEN 0 AND 1979;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 GROUP BY cylinders;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 LIMIT 10;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 ORDER BY mpg DESC LIMIT 1;",
      "SELECT MAX(mpg) FROM cars_data INNER JOIN car_makers ON cars_data.id = car_makers.id WHERE cylinders = 8 AND year < 1980;",
      "SELECT MAX(mpg) FROM cars_data INNER JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 8 AND year < 1980;",
      "SELECT MAX(mpg) FROM cars_data INNER JOIN car_makers ON cars_data.id = car_makers.id WHERE cylinders = 8 AND year < 1980 GROUP BY cylinders;",
      "SELECT MAX(mpg) FROM cars_data INNER JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 8 AND year < 1980 GROUP BY cylinders;"
    ],
    "gpt_answers3": [
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year <= 1979;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 LIMIT 1;",
      "SELECT mpg FROM cars_data WHERE cylinders = 8 AND year < 1980 ORDER BY mpg DESC LIMIT 1;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 GROUP BY mpg ORDER BY mpg DESC LIMIT 1;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 HAVING mpg = (SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980);",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 HAVING MAX(mpg);",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 HAVING COUNT(*) > 0;",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 HAVING EXISTS (SELECT * FROM cars_data WHERE cylinders = 8 AND year < 1980);",
      "SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980 AND rowid = (SELECT MAX(rowid) FROM cars_data WHERE cylinders = 8 AND year < 1980);"
    ]
  },
  {
    "id": 172,
    "db_id": "car_1",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "gpt_answers1": [
      "SELECT model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND fullname != 'Ford Motor Company' ",
      "SELECT model FROM model_list, car_makers, car_names, cars_data WHERE model_list.maker = car_makers.id AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND weight < 3500 AND fullname != 'Ford Motor Company' ",
      "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND fullname != 'Ford Motor Company' ",
      "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND car_makers.fullname != 'Ford Motor Company' ",
      "SELECT model FROM model_list, car_makers, car_names, cars_data WHERE model_list.maker = car_makers.id AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND weight < 3500 AND car_makers.fullname != 'Ford Motor Company' ",
      "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND fullname NOT LIKE 'Ford Motor Company' ",
      "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND fullname <> 'Ford Motor Company' ",
      "SELECT model FROM model_list, car_makers, car_names, cars_data WHERE model_list.maker = car_makers.id AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND weight < 3500 AND fullname NOT LIKE 'Ford Motor Company' ",
      "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND car_makers.fullname <> 'Ford Motor Company' ",
      "SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND car_makers.fullname NOT LIKE 'Ford Motor Company'"
    ],
    "gpt_answers2": [
      "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'; ",
      "SELECT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'; ",
      "SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'; ",
      "SELECT DISTINCT model_list.model FROM cars_data LEFT JOIN car_names ON cars_data.id = car_names.makeid LEFT JOIN model_list ON car_names.model = model_list.model LEFT JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'; ",
      "SELECT model_list.model FROM model_list, car_makers, car_names, cars_data WHERE model_list.maker = car_makers.id AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'; ",
      "SELECT cars_data.id FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'; ",
      "SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'; ",
      "SELECT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'; ",
      "SELECT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'; ",
      "SELECT model_list.model FROM model_list, car_makers, car_names, cars_data WHERE model_list.maker = car_makers.id AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company';"
    ],
    "gpt_answers3": [
      "SELECT model FROM model_list  WHERE modelid NOT IN (SELECT makeid FROM car_names WHERE makeid = cars_data.id)  AND id IN (SELECT id FROM cars_data WHERE weight < 3500) AND maker <> (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company') ",
      "SELECT model FROM model_list  WHERE modelid NOT IN (SELECT makeid FROM car_names WHERE makeid = cars_data.id)  AND EXISTS (SELECT id FROM cars_data WHERE weight < 3500 AND id = cars_data.id) AND maker <> (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company') ",
      "SELECT model FROM model_list  WHERE modelid NOT IN (SELECT makeid FROM car_names WHERE makeid = cars_data.id)  AND (SELECT weight < 3500 AND id = cars_data.id FROM cars_data) AND maker <> (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company') ",
      "SELECT model FROM model_list  WHERE modelid NOT IN (SELECT makeid FROM car_names WHERE makeid = cars_data.id)  AND weight < 3500 AND maker <> (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company') ",
      "SELECT model FROM model_list  WHERE modelid NOT IN (SELECT makeid FROM car_names WHERE makeid = cars_data.id)  AND weight < 3500 AND maker NOT IN (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company') ",
      "SELECT model FROM model_list  WHERE modelid NOT IN (SELECT makeid FROM car_names WHERE makeid = cars_data.id)  AND (SELECT weight < 3500 AND id = cars_data.id FROM cars_data)  AND maker NOT IN (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company') ",
      "SELECT model FROM model_list  LEFT JOIN car_names ON car_names.makeid = cars_data.id  WHERE weight < 3500 AND model <> 'ford' AND fullname <> 'Ford Motor Company' ",
      "SELECT model FROM model_list  LEFT JOIN car_names ON car_names.makeid = model_list.modelid  LEFT JOIN cars_data ON cars_data.id = car_names.makeid  LEFT JOIN car_makers ON car_makers.id = model_list.maker  WHERE weight < 3500 AND fullname <> 'Ford Motor Company' ",
      "SELECT model FROM model_list  INNER JOIN car_names ON car_names.makeid = cars_data.id  INNER JOIN car_makers ON model_list.maker = car_makers.id  WHERE weight < 3500 AND fullname <> 'Ford Motor Company' ",
      "SELECT model FROM model_list  LEFT JOIN car_names ON car_names.makeid = cars_data.id  LEFT JOIN car_makers ON car_makers.id = model_list.maker  WHERE weight < 3500 AND fullname <> 'Ford Motor Company'"
    ]
  },
  {
    "id": 173,
    "db_id": "car_1",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "gpt_answers1": [
      "SELECT DISTINCT model FROM car_names WHERE model IN ( SELECT model FROM cars_data WHERE weight < 3500 )  AND makeid NOT IN ( SELECT makeid FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = \"Ford Motor Company\" ) ",
      "SELECT DISTINCT model FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != \"Ford Motor Company\" ",
      "SELECT DISTINCT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_names.model NOT IN ( SELECT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = \"Ford Motor Company\" ) ",
      "SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_names.makeid NOT IN ( SELECT makeid FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = \"Ford Motor Company\" ) ",
      "SELECT DISTINCT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < 3500 AND model_list.maker NOT IN ( SELECT id FROM car_makers WHERE fullname = \"Ford Motor Company\" ) ",
      "SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_names.model NOT IN ( SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = \"Ford Motor Company\" ) ",
      "SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_names.model NOT IN ( SELECT model FROM model_list WHERE maker IN ( SELECT id FROM car_makers WHERE fullname = \"Ford Motor Company\" ) ) ",
      "SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != \"Ford Motor Company\" ",
      "SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < 3500 AND model_list.maker NOT IN ( SELECT id FROM car_makers WHERE fullname = \"Ford Motor Company\" ) ",
      "SELECT DISTINCT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND car_names.model NOT IN ( SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname LIKE \"%Ford Motor Company%\" )"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT model FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'; ",
      "SELECT DISTINCT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname NOT LIKE 'Ford Motor Company'; ",
      "SELECT DISTINCT model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < 3500 AND model_list.maker NOT IN (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company'); ",
      "SELECT DISTINCT model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND model_list.maker != (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company'); ",
      "SELECT DISTINCT model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'; ",
      "SELECT DISTINCT model FROM car_names, model_list, cars_data, car_makers WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND model_list.maker = car_makers.id AND cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company'; ",
      "SELECT DISTINCT model_list.model FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id LEFT JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname IS NULL; ",
      "SELECT DISTINCT model_list.model FROM car_names, model_list, cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND cars_data.weight < 3500 AND model_list.maker NOT IN (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company'); ",
      "SELECT DISTINCT model_list.model FROM car_names, model_list, cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND cars_data.weight < 3500 AND model_list.maker != (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company'); ",
      "SELECT DISTINCT model_list.model FROM car_names INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN cars_data ON car_names.makeid = cars_data.id INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != (SELECT fullname FROM car_makers WHERE maker = 'ford');"
    ],
    "gpt_answers3": [
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND maker != (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company'); ",
      "SELECT DISTINCT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND maker NOT IN (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company'); ",
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND maker <> (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company'); ",
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'; ",
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND maker NOT LIKE (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company'); ",
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND maker NOT IN (SELECT id FROM car_makers WHERE country = 'United States'); ",
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND maker IN (SELECT id FROM car_makers WHERE country != 'United States'); ",
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND maker IN (SELECT id FROM car_makers WHERE country NOT LIKE 'United States'); ",
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND car_names.makeid NOT IN (SELECT makeid FROM car_names WHERE make = 'ford'); ",
      "SELECT model FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.makeid INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE weight < 3500 AND car_names.makeid NOT IN (SELECT makeid FROM car_names WHERE make LIKE 'Ford%');"
    ]
  },
  {
    "id": 174,
    "db_id": "car_1",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "gpt_answers1": [
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers); ",
      "SELECT DISTINCT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE maker IS NULL; ",
      "SELECT countryname FROM countries WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE country = countryid); ",
      "SELECT countryname FROM countries EXCEPT SELECT country FROM car_makers; ",
      "SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(maker) = 0; ",
      "SELECT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname HAVING COUNT(maker) = 0; ",
      "SELECT countryname FROM countries WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country); ",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers WHERE car_makers.country IS NOT NULL); ",
      "SELECT DISTINCT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.maker IS NULL; ",
      "SELECT countryname FROM countries WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country) ;"
    ],
    "gpt_answers2": [
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)",
      "SELECT DISTINCT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NULL",
      "SELECT DISTINCT countryname FROM countries WHERE NOT EXISTS (SELECT * FROM car_makers WHERE countries.countryid = car_makers.country)",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers GROUP BY country)",
      "SELECT DISTINCT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers WHERE country IS NOT NULL)",
      "SELECT countryname FROM countries WHERE NOT EXISTS (SELECT * FROM car_makers WHERE countries.countryid = car_makers.country)",
      "SELECT DISTINCT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.countryid WHERE car_makers.countryid IS NULL",
      "SELECT countryname FROM countries WHERE NOT EXISTS (SELECT * FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid)",
      "SELECT DISTINCT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NULL OR car_makers.countryid IS NULL",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)"
    ],
    "gpt_answers3": [
      "SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT country FROM car_makers); ",
      "SELECT countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE maker IS NULL; ",
      "SELECT countryname  FROM countries  WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country); ",
      "SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers); ",
      "SELECT countryname  FROM countries  WHERE NOT EXISTS (SELECT country FROM car_makers WHERE car_makers.country = countries.countryid); ",
      "SELECT countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countryname  HAVING COUNT(car_makers.country) = 0; ",
      "SELECT countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countryname  HAVING COUNT(car_makers.country) = 0  OR car_makers.country IS NULL; ",
      "SELECT countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countryname  HAVING COUNT(DISTINCT car_makers.id) = 0; ",
      "SELECT countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.country IS NULL  GROUP BY countryname; ",
      "SELECT countryname  FROM countries  WHERE NOT EXISTS (SELECT country FROM car_makers  WHERE countries.countryid = car_makers.country  AND car_makers.country IS NOT NULL);"
    ]
  },
  {
    "id": 175,
    "db_id": "car_1",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "gpt_answers1": [
      "SELECT countryname FROM countries WHERE countryname NOT IN (SELECT country FROM car_makers) ",
      "SELECT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE maker IS NULL ",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers) ",
      "SELECT countryname FROM countries WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE car_makers.country = countries.countryid) ",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers WHERE country IS NOT NULL) ",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers) ",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers WHERE country IS NOT NULL) ",
      "SELECT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname HAVING COUNT(car_makers.maker) = 0 ",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers WHERE maker IS NOT NULL) ",
      "SELECT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname HAVING COUNT(car_makers.maker) = 0 OR COUNT(car_makers.maker) IS NULL"
    ],
    "gpt_answers2": [
      "SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT country FROM car_makers); ",
      "SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers); ",
      "SELECT countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  WHERE car_makers.maker IS NULL; ",
      "SELECT countryname  FROM countries  LEFT JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY countryname  HAVING COUNT(car_makers.maker) = 0; ",
      "SELECT countryname  FROM countries  WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country); ",
      "SELECT countryname  FROM countries  WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country)  GROUP BY countryname; ",
      "SELECT c.countryname  FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country  GROUP BY c.countryname  HAVING COUNT(cm.maker) = 0; ",
      "SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT car_makers.country FROM car_makers); ",
      "SELECT c.countryname  FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country  GROUP BY c.countryid, c.countryname  HAVING COUNT(cm.maker) = 0; ",
      "SELECT countryname  FROM countries  WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE countries.countryid = car_makers.country)  ORDER BY countryname;"
    ],
    "gpt_answers3": [
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers); ",
      "SELECT countryname FROM countries WHERE NOT EXISTS (SELECT * FROM car_makers WHERE countries.countryid = car_makers.country); ",
      "SELECT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NULL; ",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers WHERE country IS NOT NULL); ",
      "SELECT countryname FROM countries EXCEPT SELECT DISTINCT countries.countryname FROM countries, car_makers WHERE countries.countryid = car_makers.country; ",
      "SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers WHERE country IS NOT NULL); ",
      "SELECT countryname FROM countries WHERE NOT EXISTS (SELECT * FROM car_makers WHERE countries.countryid = car_makers.country AND car_makers.country IS NOT NULL); ",
      "SELECT countryname FROM countries EXCEPT SELECT DISTINCT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country; ",
      "SELECT DISTINCT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NULL; ",
      "SELECT DISTINCT countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname HAVING COUNT(car_makers.maker) = 0;"
    ]
  },
  {
    "id": 176,
    "db_id": "car_1",
    "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
    "gpt_answers1": [
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.modelid) >= 2  AND COUNT(DISTINCT car_makers.id) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON model_list.maker = car_makers.id  GROUP BY car_makers.id  HAVING COUNT(model_list.modelid) >= 2  AND COUNT(DISTINCT car_makers.id) > 3; ",
      "SELECT cm.id, cm.maker FROM car_makers AS cm  JOIN (SELECT maker, COUNT(modelid) AS model_count  FROM model_list GROUP BY maker HAVING COUNT(modelid) >= 2) AS ml  ON cm.id = ml.maker  WHERE (SELECT COUNT(id) FROM car_makers GROUP BY id HAVING COUNT(id) > 3) > 0; ",
      "SELECT id, maker FROM car_makers  WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) >= 2)  AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT make) > 3); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN (SELECT maker, COUNT(modelid) AS model_count FROM model_list GROUP BY maker) AS ml  ON car_makers.id = ml.maker  WHERE ml.model_count >= 2  AND car_makers.id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT make) > 3); ",
      "SELECT id, maker FROM car_makers  WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) >= 2)  AND id IN (SELECT car_names.makeid FROM car_names GROUP BY car_names.makeid HAVING COUNT(DISTINCT car_names.make) > 3); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN (SELECT maker, COUNT(modelid) AS model_count FROM model_list GROUP BY maker HAVING COUNT(modelid) >= 2) AS ml  ON car_makers.id = ml.maker  INNER JOIN (SELECT makeid, COUNT(DISTINCT make) AS make_count FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT make) > 3) AS cn  ON car_makers.id = cn.makeid; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN (SELECT makeid, COUNT(DISTINCT make) AS make_count FROM car_names GROUP BY makeid) AS cn  ON car_makers.id = cn.makeid  WHERE model_list.modelid >= 2  AND make_count > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.model = car_names.model  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(DISTINCT model_list.modelid) >= 2  AND COUNT(DISTINCT car_names.make) > 3; ",
      "SELECT id, maker FROM car_makers  WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2)  AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(DISTINCT make) > 3);"
    ],
    "gpt_answers2": [
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT car_makers.id) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_makers.id) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id WHERE (SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = car_makers.id) >= 2 AND (SELECT COUNT(DISTINCT id) FROM car_makers) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id WHERE (SELECT COUNT(modelid) FROM model_list WHERE maker = car_makers.id) >= 2 AND (SELECT COUNT(DISTINCT id) FROM car_makers) > 3; ",
      "SELECT cm.id, cm.maker FROM car_makers AS cm JOIN model_list AS ml ON ml.maker = cm.id GROUP BY cm.id HAVING COUNT(*) >= 2 AND COUNT(DISTINCT cm.id) > 3; ",
      "SELECT cm.id, cm.maker FROM car_makers AS cm WHERE (SELECT COUNT(*) FROM model_list WHERE maker = cm.id) >= 2 AND (SELECT COUNT(DISTINCT id) FROM car_makers) > 3; ",
      "SELECT cm.id, cm.maker FROM car_makers AS cm JOIN model_list AS ml ON ml.maker = cm.id WHERE (SELECT COUNT(*) FROM model_list WHERE maker = cm.id) >= 2 GROUP BY cm.id HAVING COUNT(DISTINCT cm.id) > 3; ",
      "SELECT cm.id, cm.maker FROM car_makers AS cm JOIN (SELECT maker, COUNT(*) AS model_count FROM model_list GROUP BY maker) AS ml ON ml.maker = cm.id WHERE ml.model_count >= 2 AND (SELECT COUNT(DISTINCT id) FROM car_makers) > 3;"
    ],
    "gpt_answers3": [
      "SELECT car_makers.id, car_makers.maker  FROM car_makers  WHERE car_makers.id IN (SELECT model_list.maker  FROM model_list  GROUP BY model_list.maker  HAVING COUNT(DISTINCT model_list.modelid) >= 2)  AND (SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers) > 3; ",
      "SELECT cm.id, cm.maker  FROM car_makers cm  JOIN (SELECT ml.maker, COUNT(DISTINCT ml.modelid) AS model_count  FROM model_list ml  GROUP BY ml.maker  HAVING COUNT(DISTINCT ml.modelid) >= 2) AS mc  ON cm.id = mc.maker  WHERE (SELECT COUNT(DISTINCT cm.maker)  FROM car_makers cm) > 3; ",
      "SELECT id, maker  FROM car_makers  WHERE id IN (SELECT maker  FROM model_list  GROUP BY maker  HAVING COUNT(DISTINCT modelid) >= 2)  AND (SELECT COUNT(DISTINCT maker)  FROM car_makers) > 3; ",
      "SELECT id, maker  FROM car_makers  WHERE id IN (SELECT maker  FROM model_list  GROUP BY maker  HAVING COUNT(*) >= 2)  AND (SELECT COUNT(DISTINCT maker)  FROM car_makers) > 3; ",
      "SELECT cm.id, cm.maker  FROM car_makers cm  JOIN (SELECT maker, COUNT(*) AS model_count  FROM model_list  GROUP BY maker  HAVING COUNT(*) >= 2) AS mc  ON cm.id = mc.maker  WHERE (SELECT COUNT(*)  FROM car_makers) > 3; ",
      "SELECT cm.id, cm.maker  FROM car_makers cm  JOIN (SELECT maker, COUNT(*) AS model_count  FROM model_list  GROUP BY maker  HAVING COUNT(*) >= 2) AS mc  ON cm.id = mc.maker  GROUP BY cm.id, cm.maker  HAVING COUNT(*) > 3; ",
      "SELECT car_makers.id, car_makers.maker  FROM car_makers  JOIN (SELECT maker, COUNT(*) AS model_count  FROM model_list  GROUP BY maker  HAVING COUNT(*) >= 2) AS mc  ON car_makers.id = mc.maker  WHERE (SELECT COUNT(DISTINCT car_makers.maker)  FROM car_makers) > 3; ",
      "SELECT id, maker  FROM car_makers  WHERE (SELECT COUNT(*)  FROM model_list  WHERE model_list.maker = car_makers.id  GROUP BY maker) >= 2  AND (SELECT COUNT(DISTINCT maker)  FROM car_makers) > 3; ",
      "SELECT car_makers.id, car_makers.maker  FROM car_makers  JOIN (SELECT maker, COUNT(*) AS model_count  FROM model_list  GROUP BY maker  HAVING COUNT(*) >= 2) AS mc  ON car_makers.id = mc.maker  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(mc.maker) > 3; ",
      "SELECT id, maker  FROM car_makers  WHERE id IN (SELECT maker  FROM model_list  GROUP BY maker  HAVING COUNT(*) >= 2)  AND (SELECT COUNT(DISTINCT maker)  FROM car_makers) > 3;"
    ]
  },
  {
    "id": 177,
    "db_id": "car_1",
    "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "gpt_answers1": [
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.make = model_list.maker GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN ( SELECT model_list.maker FROM model_list INNER JOIN car_names ON car_names.model = model_list.model GROUP BY model_list.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 ) AND car_makers.id IN ( SELECT car_names.make FROM car_names INNER JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY car_names.make HAVING COUNT(DISTINCT car_names.makeid) > 3 ); ",
      "SELECT cm.id, cm.maker FROM (SELECT cm.id, cm.maker, COUNT(DISTINCT ml.modelid) AS model_count FROM car_makers AS cm INNER JOIN model_list AS ml ON ml.maker = cm.id GROUP BY cm.id, cm.maker HAVING model_count >= 2) AS first_query INNER JOIN (SELECT cn.make, COUNT(DISTINCT cn.makeid) AS car_count FROM car_names AS cn INNER JOIN cars_data AS cd ON cd.id = cn.makeid GROUP BY cn.make HAVING car_count > 3) AS second_query ON first_query.id = second_query.make; ",
      "SELECT cm.id, cm.maker FROM car_makers AS cm INNER JOIN ( SELECT maker, COUNT(DISTINCT modelid) AS model_count FROM model_list GROUP BY maker HAVING model_count >= 2 ) AS ml ON ml.maker = cm.id INNER JOIN ( SELECT make, COUNT(DISTINCT makeid) AS car_count FROM car_names GROUP BY make HAVING car_count > 3 ) AS cn ON cn.make = cm.id; ",
      "SELECT cm.id, cm.maker FROM car_makers AS cm JOIN ( SELECT maker, COUNT(DISTINCT model_list.modelid) AS model_count FROM model_list JOIN car_names ON car_names.model = model_list.model GROUP BY maker HAVING model_count >= 2 ) AS ml ON ml.maker = cm.id JOIN ( SELECT make, COUNT(DISTINCT car_names.makeid) AS car_count FROM car_names JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY make HAVING car_count > 3 ) AS cn ON cn.make = cm.id; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers, model_list, car_names, cars_data WHERE model_list.maker = car_makers.id AND car_names.model = model_list.model AND cars_data.id = car_names.makeid GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.make = model_list.maker JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT car_names.makeid) > 3; ",
      "SELECT id, maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2 ) AND id IN ( SELECT make FROM car_names GROUP BY make HAVING COUNT(DISTINCT makeid) > 3 ); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN ( SELECT maker, COUNT(DISTINCT model_list.modelid) AS model_count FROM model_list INNER JOIN car_names ON car_names.model = model_list.model GROUP BY maker HAVING model_count >= 2 ) AS ml ON ml.maker = car_makers.id INNER JOIN ( SELECT make, COUNT(DISTINCT car_names.makeid) AS car_count FROM car_names INNER JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY make HAVING car_count > 3 ) AS cn ON cn.make = car_makers.id; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE EXISTS ( SELECT 1 FROM model_list INNER JOIN car_names ON car_names.model = model_list.model WHERE model_list.maker = car_makers.id GROUP BY model_list.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 ) AND EXISTS ( SELECT 1 FROM car_names INNER JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_names.make = car_makers.id GROUP BY car_names.make HAVING COUNT(DISTINCT car_names.makeid) > 3 );"
    ],
    "gpt_answers2": [
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) >= 2) AND car_makers.id IN (SELECT model FROM car_names GROUP BY model HAVING COUNT(*) > 3); ",
      "SELECT c.id, c.maker FROM car_makers c INNER JOIN (SELECT m.maker, COUNT(DISTINCT m.modelid) AS num_models FROM model_list m INNER JOIN car_names n ON m.modelid = n.model GROUP BY m.maker HAVING num_models >= 2) sub1 ON c.id = sub1.maker INNER JOIN (SELECT n.makeid, COUNT(*) AS num_cars FROM car_names n INNER JOIN cars_data d ON n.makeid = d.id GROUP BY n.makeid HAVING num_cars > 3) sub2 ON sub1.maker = sub2.makeid; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE EXISTS (SELECT maker FROM model_list WHERE model_list.maker = car_makers.id GROUP BY maker HAVING COUNT(*) >= 2) AND EXISTS (SELECT make FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_names.make = car_makers.id GROUP BY make HAVING COUNT(*) > 3); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) AND car_makers.id IN (SELECT make FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY make HAVING COUNT(*) > 3); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) >= 2) AS sub1 ON car_makers.id = sub1.maker INNER JOIN (SELECT make FROM car_names GROUP BY make HAVING COUNT(*) > 3) AS sub2 ON car_makers.id = sub2.make; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) >= 2) AND car_makers.id IN (SELECT make FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY make HAVING COUNT(DISTINCT makeid) > 3); ",
      "SELECT c.id, c.maker FROM car_makers c, model_list m, car_names n, cars_data d WHERE c.id = m.maker AND m.modelid = n.model AND n.makeid = d.id GROUP BY c.id, c.maker HAVING COUNT(DISTINCT m.modelid) >= 2 AND COUNT(*) > 3; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers JOIN (SELECT model_list.maker FROM model_list INNER JOIN car_names ON model_list.modelid = car_names.model GROUP BY model_list.maker HAVING COUNT(*) >= 2) sub1 ON car_makers.id = sub1.maker JOIN (SELECT car_names.make FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_names.make HAVING COUNT(*) > 3) sub2 ON car_makers.id = sub2.make; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) AND car_makers.id IN (SELECT make FROM car_names INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY make HAVING COUNT(*) > 3) ORDER BY car_makers.id; ",
      "SELECT cm.id, cm.maker FROM car_makers cm WHERE (SELECT COUNT(*) FROM model_list ml WHERE ml.maker = cm.id) >= 2 AND (SELECT COUNT(*) FROM car_names cn INNER JOIN cars_data cd ON cn.makeid = cd.id WHERE cn.make = cm.id) > 3;"
    ],
    "gpt_answers3": [
      "SELECT car_makers.id, car_makers.maker FROM car_makers WHERE car_makers.id IN (SELECT model_list.maker FROM model_list GROUP BY model_list.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2) AND car_makers.id IN (SELECT car_names.make FROM car_names GROUP BY car_names.make HAVING COUNT(DISTINCT car_names.makeid) > 3); ",
      "SELECT cm.id, cm.maker FROM car_makers cm INNER JOIN (SELECT ml.maker, COUNT(DISTINCT ml.modelid) AS num_models FROM model_list ml GROUP BY ml.maker HAVING num_models >= 2) AS sub1 ON cm.id = sub1.maker INNER JOIN (SELECT cn.make, COUNT(DISTINCT cn.makeid) AS num_cars FROM car_names cn GROUP BY cn.make HAVING num_cars > 3) AS sub2 ON cm.id = sub2.make; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN (SELECT model_list.maker FROM model_list GROUP BY model_list.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2) AS sub1 ON car_makers.id = sub1.maker INNER JOIN (SELECT car_names.make FROM car_names GROUP BY car_names.make HAVING COUNT(DISTINCT car_names.makeid) > 3) AS sub2 ON car_makers.id = sub2.make; ",
      "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT make FROM car_names GROUP BY make HAVING COUNT(DISTINCT makeid) > 3); ",
      "SELECT cm.id, cm.maker FROM car_makers cm INNER JOIN (SELECT ml.maker, COUNT(DISTINCT ml.modelid) AS num_models FROM model_list ml GROUP BY ml.maker HAVING num_models >= 2) AS sub1 ON cm.id = sub1.maker INNER JOIN (SELECT cn.make, COUNT(DISTINCT cn.makeid) AS num_cars FROM car_names cn GROUP BY cn.make HAVING num_cars > 3) AS sub2 ON cm.id = sub2.make; ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN (SELECT model_list.maker FROM model_list GROUP BY model_list.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2) sub1 ON car_makers.id = sub1.maker INNER JOIN (SELECT car_names.make FROM car_names GROUP BY car_names.make HAVING COUNT(DISTINCT car_names.makeid) > 3) sub2 ON car_makers.id = sub2.make; ",
      "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT make FROM car_names GROUP BY make HAVING COUNT(DISTINCT makeid) > 3); ",
      "SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN (SELECT model_list.maker FROM model_list GROUP BY model_list.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2) AS sub1 ON car_makers.id = sub1.maker INNER JOIN (SELECT car_names.make FROM car_names GROUP BY car_names.make HAVING COUNT(DISTINCT car_names.makeid) > 3) AS sub2 ON car_makers.id = sub2.make; ",
      "SELECT cm.id, cm.maker FROM car_makers cm INNER JOIN (SELECT ml.maker, COUNT(DISTINCT ml.modelid) AS num_models FROM model_list ml GROUP BY ml.maker HAVING num_models >= 2) AS sub1 ON cm.id = sub1.maker INNER JOIN (SELECT cn.make, COUNT(DISTINCT cn.makeid) AS num_cars FROM car_names cn GROUP BY cn.make HAVING num_cars > 3) AS sub2 ON cm.id = sub2.make; ",
      "SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) AND id IN (SELECT make FROM car_names GROUP BY make HAVING COUNT(DISTINCT makeid) > 3);"
    ]
  },
  {
    "id": 178,
    "db_id": "car_1",
    "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
    "gpt_answers1": [
      "SELECT countryid, countryname  FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 ) OR countryid IN ( SELECT car_makers.country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' ); ",
      "SELECT countryid, countryname  FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 ) OR countryid IN ( SELECT car_makers.country FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' ); ",
      "SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 3  OR countries.countryid IN ( SELECT car_makers.country FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' ); ",
      "SELECT countryid, countryname  FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 UNION SELECT car_makers.country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' ); ",
      "SELECT countryid, countryname  FROM countries WHERE countryid IN ( SELECT car_makers.country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' ) OR ( SELECT COUNT(*) FROM car_makers WHERE car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(*) > 3 ); ",
      "SELECT countryid, countryname FROM countries WHERE EXISTS ( SELECT 1 FROM car_makers WHERE car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(*) > 3 ) OR EXISTS ( SELECT 1 FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_makers.country = countries.countryid AND car_names.make = 'fiat' ); ",
      "SELECT countries.countryid, countries.countryname FROM countries LEFT JOIN ( SELECT car_makers.country, COUNT(*) AS num_makers FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 3 ) AS maker_counts ON countries.countryid = maker_counts.country WHERE maker_counts.num_makers > 0 OR countries.countryid IN ( SELECT car_makers.country FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' ); ",
      "SELECT DISTINCT countries.countryid, countries.countryname  FROM countries JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON car_makers.id = model_list.maker OR car_makers.id = model_list.model JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 3; ",
      "SELECT DISTINCT countryid, countryname  FROM countries JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE countries.countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 ) OR car_names.make = 'fiat'; ",
      "SELECT DISTINCT countryid, countryname FROM countries JOIN ( SELECT country, COUNT(*) AS num_makers FROM car_makers GROUP BY country HAVING COUNT(*) > 3 ) AS maker_counts ON countries.countryid = maker_counts.country JOIN model_list ON maker_counts.country = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat';"
    ],
    "gpt_answers2": [
      "SELECT car_makers.id, car_makers.fullname FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN ( SELECT car_makers.id FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id HAVING COUNT(car_makers.id) > 3 OR car_names.make = 'fiat' ); ",
      "SELECT DISTINCT car_makers.id, car_makers.fullname FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(DISTINCT car_makers.id) > 3 OR car_names.make = 'fiat'; ",
      "SELECT countries.countryid, countries.countryname FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN ( SELECT car_makers.id FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id HAVING COUNT(DISTINCT car_makers.id) > 3 OR car_names.make = 'fiat' ); ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT car_makers.country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3 OR car_names.make = 'fiat' ); ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT car_makers.country FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3 OR car_names.make = 'fiat' ); ",
      "SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model GROUP BY countries.countryid, countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 3 OR car_names.make = 'fiat'; ",
      "SELECT car_makers.id, car_makers.fullname FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN ( SELECT maker FROM model_list WHERE model_list.model = 'fiat' GROUP BY maker HAVING COUNT(DISTINCT model_list.maker) > 3 ); ",
      "SELECT car_makers.id, car_makers.fullname FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN ( SELECT model_list.maker FROM model_list INNER JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' GROUP BY model_list.maker HAVING COUNT(DISTINCT model_list.maker) > 3 ); ",
      "SELECT car_makers.id, car_makers.fullname FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN ( SELECT car_makers.id FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid WHERE car_names.model = 'fiat' GROUP BY car_makers.id HAVING COUNT(car_makers.id) > 3 ); ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT car_makers.country FROM car_makers WHERE car_makers.id IN ( SELECT car_names.makeid FROM car_names WHERE car_names.model = 'fiat' ) GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3 );"
    ],
    "gpt_answers3": [
      "SELECT car_makers.id, countries.countryname  FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM model_list WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) ",
      "SELECT DISTINCT car_makers.id, countries.countryname  FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM model_list WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) ",
      "SELECT car_makers.id, countries.countryname  FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid INNER JOIN model_list ON model_list.maker = car_makers.id WHERE model_list.model = 'fiat' OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) ",
      "SELECT car_makers.id, countries.countryname  FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM car_names WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) ",
      "SELECT car_makers.id, countries.countryname  FROM car_makers, countries WHERE car_makers.country = countries.countryid AND car_makers.id IN (SELECT maker FROM model_list WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) ",
      "SELECT car_makers.id, countries.countryname  FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM model_list WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) ",
      "SELECT car_makers.id, countries.countryname  FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM car_names WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) ",
      "SELECT car_makers.id, countries.countryname  FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM model_list WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT car_makers.id) > 3) ",
      "SELECT car_makers.id, countries.countryname  FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM model_list WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT car_makers.id) > 3) ",
      "SELECT DISTINCT car_makers.id, countries.countryname  FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE car_makers.id IN (SELECT maker FROM model_list WHERE model = 'fiat') OR countries.countryname IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT car_makers.id) > 3)"
    ]
  },
  {
    "id": 179,
    "db_id": "car_1",
    "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
    "gpt_answers1": [
      "SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\" OR (SELECT COUNT(*) FROM car_makers) > 3;  ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers HAVING COUNT(*) > 3) UNION SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\";  ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 3) UNION SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\";  ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 3) OR countries.countryid IN (SELECT car_makers.country FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id  JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\");  ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id  JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\" GROUP BY car_makers.country HAVING COUNT(*) > 3);  ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country  FROM car_makers  GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3) UNION SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\";  ",
      "SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\" OR countries.countryid IN (SELECT car_makers.country  FROM car_makers  GROUP BY car_makers.country HAVING COUNT(*) > 3) GROUP BY countries.countryid, countries.countryname;  ",
      "SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\" OR countries.countryid IN (SELECT car_makers.country  FROM car_makers  GROUP BY car_makers.country HAVING COUNT(DISTINCT car_makers.id) > 3) GROUP BY countries.countryid, countries.countryname;  ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers WHERE car_makers.maker = \"fiat\" GROUP BY car_makers.country HAVING COUNT(*) > 3) UNION SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid INNER JOIN model_list ON model_list.maker = car_makers.id INNER JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\";  ",
      "SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers  JOIN model_list ON model_list.maker = car_makers.id  JOIN car_names ON car_names.model = model_list.modelid WHERE car_makers.maker = \"fiat\" GROUP BY car_makers.country HAVING COUNT(*) > 3);"
    ],
    "gpt_answers2": [
      "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 3) OR countryid IN (SELECT country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat'); ",
      "SELECT c.countryid, c.countryname FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.country = c.countryid GROUP BY cm.country HAVING COUNT(DISTINCT cm.id) > 3) OR EXISTS (SELECT 1 FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model WHERE cn.make = 'fiat'); ",
      "SELECT DISTINCT c.countryid, c.countryname FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country LEFT JOIN model_list ml ON cm.id = ml.maker LEFT JOIN car_names cn ON ml.model = cn.model WHERE (SELECT COUNT(DISTINCT cm1.id) FROM car_makers cm1 WHERE cm1.country = c.countryid) > 3 OR cn.make = 'fiat'; ",
      "SELECT c.countryid, c.countryname FROM countries c JOIN (SELECT country, COUNT(DISTINCT id) AS maker_count FROM car_makers GROUP BY country HAVING maker_count > 3) cm ON c.countryid = cm.country UNION SELECT c.countryid, c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model WHERE cn.make = 'fiat'; ",
      "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 3) UNION SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT cm.country FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model WHERE cn.make = 'fiat'); ",
      "SELECT c.countryid, c.countryname FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.country = c.countryid GROUP BY cm.country HAVING COUNT(DISTINCT cm.id) > 3) UNION SELECT c.countryid, c.countryname FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model WHERE cn.make = 'fiat'); ",
      "SELECT c.countryid, c.countryname FROM countries c INNER JOIN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 3) cm ON c.countryid = cm.country UNION SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model WHERE cn.make = 'fiat'; ",
      "SELECT c.countryid, c.countryname FROM countries c INNER JOIN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 3) cm ON c.countryid = cm.country UNION ALL SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model WHERE cn.make = 'fiat'; ",
      "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 3) OR countryid IN (SELECT cm.country FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model WHERE cn.make = 'fiat'); ",
      "SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 3) OR countryid IN (SELECT makerid FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.make = 'fiat');"
    ],
    "gpt_answers3": [
      "SELECT countryid, countryname  FROM countries  WHERE countryid IN (SELECT country  FROM car_makers  GROUP BY country  HAVING COUNT(*) > 3)  OR countryid IN (SELECT car_makers.country  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.model = car_names.model  WHERE car_names.make = \"fiat\"); ",
      "SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country LEFT JOIN model_list ml ON cm.id = ml.maker LEFT JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\" OR (SELECT COUNT(*) FROM car_makers WHERE country = c.countryid) > 3 GROUP BY c.countryid, c.countryname; ",
      "SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\" OR (SELECT COUNT(*) FROM car_makers WHERE country = c.countryid) > 3 GROUP BY c.countryid, c.countryname; ",
      "SELECT c.countryid, c.countryname FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country LEFT JOIN model_list ml ON cm.id = ml.maker LEFT JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\" OR (SELECT COUNT(*) FROM car_makers WHERE country = c.countryid) > 3 GROUP BY c.countryid, c.countryname; ",
      "SELECT c.countryid, c.countryname FROM countries c WHERE (SELECT COUNT(*) FROM car_makers WHERE country = c.countryid) > 3 UNION SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\"; ",
      "SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\" GROUP BY c.countryid, c.countryname HAVING COUNT(DISTINCT cm.id) > 3; ",
      "SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country LEFT JOIN model_list ml ON cm.id = ml.maker LEFT JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\" OR (SELECT COUNT(*) FROM car_makers WHERE country = c.countryid) > 3 GROUP BY c.countryid, c.countryname; ",
      "SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country LEFT JOIN model_list ml ON cm.id = ml.maker LEFT JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\" GROUP BY c.countryid, c.countryname HAVING COUNT(DISTINCT cm.id) > 3; ",
      "SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\" OR EXISTS (SELECT 1 FROM car_makers WHERE country = c.countryid GROUP BY country HAVING COUNT(*) > 3) GROUP BY c.countryid, c.countryname; ",
      "SELECT c.countryid, c.countryname FROM countries c WHERE (SELECT COUNT(*) FROM car_makers WHERE country = c.countryid) > 3 UNION ALL SELECT c.countryid, c.countryname FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model WHERE cn.make = \"fiat\";"
    ]
  },
  {
    "id": 209,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = \"Aberdeen\"); ",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.airportname = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\"); ",
      "SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = \"Aberdeen\"); ",
      "SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE country = \"Aberdeen\"); ",
      "SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city LIKE '%Aberdeen%'; ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode AND airports.city IN ('Aberdeen'); ",
      "SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city LIKE '%Aberdeen%'); ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city LIKE '_berdeen'; ",
      "SELECT COUNT(*) FROM flights NATURAL JOIN airports WHERE airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = \"Aberdeen\";",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = \"Aberdeen\" GROUP BY airports.city;",
      "SELECT COUNT(flightno) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = \"Aberdeen\";",
      "SELECT COUNT(*) FROM flights WHERE flights.sourceairport IN (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\") GROUP BY sourceairport;",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = \"Aberdeen\";",
      "SELECT COUNT(flightno) FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = \"Aberdeen\";",
      "SELECT COUNT(flights.flightno) FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = \"Aberdeen\";",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = \"Aberdeen\" GROUP BY flights.sourceairport;"
    ]
  },
  {
    "id": 214,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = 'JetBlue';",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE abbreviation = 'JetBlue');",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = 'JetBlue Airways');",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT airline FROM airlines WHERE abbreviation = 'JetBlue');",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'JetBlue Airways';",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airline = 'JetBlue Airways');",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = 'JetBlue';",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways');",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = 'JetBlue Airways';"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';",
      "SELECT COUNT(flightno) FROM flights WHERE airline = 'JetBlue Airways';",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'JetBlue Airways';",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = 'JetBlue';",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airlines.airline = 'JetBlue Airways');",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT abbreviation FROM airlines WHERE airlines.abbreviation = 'JetBlue');",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airlines.airline = 'JetBlue Airways');",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT abbreviation FROM airlines WHERE airlines.abbreviation = 'JetBlue');",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = 'JetBlue Airways';",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.abbreviation = 'JetBlue';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*)  FROM flights  WHERE airline = 'JetBlue Airways'; ",
      "SELECT COUNT(flightno)  FROM flights  WHERE airline = 'JetBlue Airways'; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.airline = 'JetBlue Airways'; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.abbreviation = 'JetBlue'; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.uid = 'JetBlue Airways'; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.country = 'JetBlue Airways'; ",
      "SELECT COUNT(*)  FROM flights, airlines  WHERE flights.airline = airlines.airline  AND airlines.airline = 'JetBlue Airways'; ",
      "SELECT COUNT(*)  FROM flights, airlines  WHERE flights.airline = airlines.airline  AND airlines.abbreviation = 'JetBlue'; ",
      "SELECT COUNT(*)  FROM flights, airlines  WHERE flights.airline = airlines.airline  AND airlines.uid = 'JetBlue Airways'; ",
      "SELECT COUNT(*)  FROM flights, airlines  WHERE flights.airline = airlines.airline  AND airlines.country = 'JetBlue Airways';"
    ]
  },
  {
    "id": 215,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM flights WHERE airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights WHERE airline = \"JetBlue\";",
      "SELECT COUNT(*) FROM airlines WHERE airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM airlines WHERE abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline AND airlines.airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.abbreviation AND airlines.abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.abbreviation = \"JetBlue\";"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM flights WHERE airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE airline = \"JetBlue Airways\") OR destairport IN (SELECT airportcode FROM airports WHERE airline = \"JetBlue Airways\");",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE abbreviation = \"JetBlue\");",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights JOIN airlines USING (airline) WHERE airlines.abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline AND airlines.abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights LEFT JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = \"JetBlue\";",
      "SELECT COUNT(*) FROM flights RIGHT JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = \"JetBlue\";"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM flights WHERE airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\");",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.abbreviation AND airlines.airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.airline = \"JetBlue Airways\";",
      "SELECT COUNT(*) FROM flights JOIN (SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\") a ON flights.airline = a.abbreviation;",
      "SELECT COUNT(*) FROM flights JOIN (SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\") a ON flights.airline = a.abbreviation;",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\");",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\");",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT abbreviation FROM airlines WHERE airline = \"JetBlue Airways\") LIMIT 1;"
    ]
  },
  {
    "id": 216,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM flights WHERE airline = \"United Airlines\" AND destairport = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airline = \"United Airlines\" AND airportname = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airline = \"United Airlines\" AND airports.airportcode = \"ASY\";",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.destairport = airports.airportcode AND airline = \"United Airlines\" AND airportname = \"ASY\";",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.destairport = airports.airportcode AND airline = \"United Airlines\" AND airports.airportcode = \"ASY\";",
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airline = \"United Airlines\" AND airportname = \"ASY\";",
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airline = \"United Airlines\" AND airports.airportcode = \"ASY\";",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.destairport = airports.airportcode AND airline = \"United Airlines\" AND city = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airline = \"United Airlines\" AND city = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airline = \"United Airlines\" AND airportcode = \"ASY\";"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY'; ",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY'; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY'; ",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = 'United Airlines' AND flights.destairport = 'ASY'; ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'ASY'; ",
      "SELECT COUNT(*) FROM flights f, airlines a, airports ap WHERE f.airline = a.airline AND f.destairport = ap.airportcode AND a.airline = 'United Airlines' AND ap.airportcode = 'ASY'; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'ASY'; ",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airline = 'United Airlines') AND destairport = (SELECT airportcode FROM airports WHERE airportcode = 'ASY'); ",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = 'United Airlines') AND destairport IN (SELECT airportcode FROM airports WHERE airportcode = 'ASY'); ",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airline LIKE '%United%') AND destairport = (SELECT airportcode FROM airports WHERE airportcode LIKE '%ASY%');"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.airline = 'United Airlines' AND f.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(flights) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(flightno) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline LIKE 'United Airlines' AND flights.destairport LIKE 'ASY';",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline LIKE 'United Airlines' AND flights.destairport LIKE 'ASY';",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline LIKE '%United Airlines%' AND flights.destairport LIKE '%ASY%';"
    ]
  },
  {
    "id": 217,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM flights WHERE airline = \"United Airlines\" AND destairport = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"United Airlines\" AND flights.destairport = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = \"United Airlines\" AND flights.destairport = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline = \"United Airlines\" AND airports.airportcode = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline IN (SELECT airline FROM airlines WHERE airline = \"United Airlines\") AND airports.airportcode = \"ASY\";",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT uid FROM airlines WHERE airline = \"United Airlines\") AND destairport = \"ASY\";",
      "SELECT COUNT(*) FROM (SELECT * FROM flights WHERE airline = \"United Airlines\") JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = \"ASY\";",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = \"United Airlines\") AND destairport = \"ASY\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"United Airlines\" AND flights.destairport = (SELECT airportcode FROM airports WHERE airportcode = \"ASY\");",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = \"United Airlines\" AND flights.destairport = (SELECT airportcode FROM airports WHERE airportcode = \"ASY\");"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';",
      "SELECT COUNT(flightno) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights JOIN airlines ON airlines.uid = flights.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights JOIN airlines ON airlines.uid = flights.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = (SELECT airportcode FROM airports WHERE airportname = 'ASY');",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.uid = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = 'United Airlines') AND destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE abbreviation = 'UA') AND destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE abbreviation = 'UA') AND destairport IN (SELECT airportcode FROM airports WHERE airportname = 'ASY');",
      "SELECT COUNT(*) FROM flights WHERE destairport = 'ASY' AND airline IN (SELECT airline FROM airlines WHERE abbreviation = 'UA');",
      "SELECT COUNT(*) FROM flights WHERE destairport = 'ASY' AND airline IN (SELECT airline FROM airlines WHERE airline = 'United Airlines');"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';",
      "SELECT COUNT(flightno) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airline = 'United Airlines' AND airports.airportcode = 'ASY';",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = 'United Airlines') AND destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights WHERE airline LIKE 'United Airlines' AND destairport LIKE 'ASY';",
      "SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.airline = airlines.airline AND flights.destairport = airports.airportcode AND airlines.airline = 'United Airlines' AND airports.airportcode = 'ASY';",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights WHERE flights.airline = (SELECT airline FROM airlines WHERE airline = 'United Airlines') AND flights.destairport = 'ASY';",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT abbreviation FROM airlines WHERE airline = 'United Airlines') AND destairport = 'ASY';"
    ]
  },
  {
    "id": 218,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "gpt_answers1": [
      "SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines' AND sourceairport = 'AHD' ",
      "SELECT COUNT(flightno)  FROM flights  WHERE airline = (SELECT airline FROM airlines WHERE abbreviation = 'United Airlines') AND sourceairport = (SELECT airportcode FROM airports WHERE airportcode = 'AHD') ",
      "SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'AHD' ",
      "SELECT COUNT(*)  FROM flights  INNER JOIN airlines ON flights.airline = airlines.airline INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'AHD' ",
      "SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.airline = airlines.airline  AND flights.sourceairport = airports.airportcode  AND airlines.airline = 'United Airlines'  AND airports.airportcode = 'AHD' ",
      "SELECT COUNT(*)  FROM flights  WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines')  AND sourceairport = (SELECT airportname FROM airports WHERE airportcode = 'AHD') ",
      "SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines'  AND sourceairport IN (SELECT airportcode FROM airports WHERE airportcode = 'AHD') ",
      "SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines'  AND sourceairport = 'AHD' ",
      "SELECT COUNT(*)  FROM flights  WHERE airline = (SELECT airline FROM airlines WHERE abbreviation = 'United Airlines')  AND sourceairport = 'AHD' ",
      "SELECT COUNT(*)  FROM flights  WHERE airline = 'United Airlines'  AND sourceairport = (SELECT airportcode FROM airports WHERE airportname = 'AHD')"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';",
      "SELECT COUNT(flightno) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND sourceairport = 'AHD';",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'AHD';",
      "SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.airline = airlines.airline AND flights.sourceairport = airports.airportcode AND airlines.airline = 'United Airlines' AND airports.airportcode = 'AHD';",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.sourceairport = 'AHD';",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = 'United Airlines') AND sourceairport = 'AHD';",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airline = 'United Airlines') AND sourceairport = 'AHD';",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT abbreviation FROM airlines WHERE airline = 'United Airlines') AND sourceairport = 'AHD';",
      "SELECT COUNT(*) FROM flights WHERE airline LIKE 'United Airlines' AND sourceairport LIKE 'AHD';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD'; ",
      "SELECT COUNT(flightno) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD'; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND flights.sourceairport = 'AHD'; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode INNER JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'AHD' AND airlines.airline = 'United Airlines'; ",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD' AND airlines.airline = 'United Airlines'; ",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD' AND airlines.uid = 1; ",
      "SELECT COUNT(*) FROM flights JOIN airlines USING (airline) JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'AHD'; ",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airline = 'United Airlines') AND sourceairport = (SELECT airportcode FROM airports WHERE airportcode = 'AHD'); ",
      "SELECT COUNT(*) FROM flights WHERE airline LIKE '%United Airlines%' AND sourceairport LIKE '%AHD%'; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines USING (airline) INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'UA' AND airports.airportcode = 'AHD';"
    ]
  },
  {
    "id": 219,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM flights WHERE airline = \"United Airlines\" AND sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airline = \"United Airlines\" AND airports.city = \"AHD\";",
      "SELECT COUNT(*) FROM flights WHERE airline = \"United Airlines\" AND sourceairport = (SELECT airportcode FROM airports WHERE city = \"AHD\");",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airline = \"United Airlines\") AND sourceairport = (SELECT airportcode FROM airports WHERE city = \"AHD\");",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT abbreviation FROM airlines WHERE airline = \"United Airlines\") AND sourceairport = (SELECT airportcode FROM airports WHERE city = \"AHD\");",
      "SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = \"United Airlines\") AND sourceairport = (SELECT airportcode FROM airports WHERE city = \"AHD\");",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = \"United Airlines\" AND airports.city = \"AHD\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = \"United Airlines\" AND airports.city = \"AHD\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.abbreviation JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = \"United Airlines\" AND airports.city = \"AHD\";"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*)  FROM flights  WHERE airline = \"United Airlines\" AND sourceairport = \"AHD\"; ",
      "SELECT COUNT(flightno)  FROM flights  WHERE airline = \"United Airlines\" AND sourceairport = \"AHD\"; ",
      "SELECT COUNT(*)  FROM flights  INNER JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\"; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\"; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines USING(airline)  WHERE airline = \"United Airlines\" AND sourceairport = \"AHD\"; ",
      "SELECT COUNT(*)  FROM flights, airlines  WHERE flights.airline = airlines.airline AND airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\"; ",
      "SELECT COUNT(*)  FROM flights AS f  JOIN airlines AS a ON f.airline = a.airline  WHERE a.airline = \"United Airlines\" AND f.sourceairport = \"AHD\"; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airlines.airline = \"United Airlines\" AND airports.airportcode = \"AHD\"; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airlines.airline = \"United Airlines\" AND airports.city = \"AHD\"; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airlines.airline = \"United Airlines\" AND airports.airportname = \"AHD\";"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM flights WHERE airline = \"United Airlines\" AND sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = \"United Airlines\") AND sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE abbreviation = \"UAL\") AND sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights f INNER JOIN airlines a ON f.airline = a.airline AND a.airline = \"United Airlines\" AND f.sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights f INNER JOIN airlines a ON f.airline = a.airline WHERE a.airline = \"United Airlines\" AND f.sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\";",
      "SELECT COUNT(*) FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\" GROUP BY flights.airline;",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"United Airlines\" AND flights.sourceairport = \"AHD\" GROUP BY flights.airline;"
    ]
  },
  {
    "id": 220,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE flights.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND (destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen') OR sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen')); ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND EXISTS (SELECT 1 FROM airports WHERE flights.destairport = airports.airportcode AND airports.city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND EXISTS (SELECT 1 FROM airports WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND (destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') OR sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')); ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND (destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') OR sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')) GROUP BY airline; ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND (destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen') OR sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen')) GROUP BY airline;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM flights  WHERE airline = 'United Airlines' AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights  JOIN airports ON flights.destairport = airports.airportcode WHERE airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights  JOIN airports ON flights.destairport = airports.airportcode WHERE airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights  INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights  INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airports  WHERE flights.destairport = airports.airportcode  AND airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airports  WHERE flights.destairport = airports.airportcode  AND airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airports  WHERE flights.destairport = airports.airportcode  AND airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airports  WHERE flights.destairport = airports.airportcode  AND airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airports  WHERE flights.destairport = airports.airportcode  AND airline = 'United Airlines' AND airports.city = 'Aberdeen';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.airline = 'United Airlines' AND flights.destairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode AND flights.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airports WHERE flights.airline = 'United Airlines' AND flights.destairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights WHERE flights.airline = 'United Airlines' AND flights.destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline = 'United Airlines' AND airports.city = (SELECT city FROM airports WHERE airportname = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline = 'United Airlines' AND airports.airportname = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE flights.airline = 'United Airlines' AND airports.airportname = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');"
    ]
  },
  {
    "id": 221,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.airline = 'United Airlines' AND flights.destairport = 'Aberdeen' AND flights.destairport = airports.airportcode AND flights.sourceairport = airports.airportcode AND airlines.airline = 'United Airlines'; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline INNER JOIN airports ON flights.destairport = airports.airportcode AND flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode AND flights.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode AND flights.sourceairport = airports.airportcode WHERE airlines.uid = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode JOIN airports.sourceairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.airline = airlines.airline AND airlines.uid = 'United Airlines' AND flights.destairport = 'Aberdeen' AND flights.destairport = airports.airportcode AND flights.sourceairport = airports.airportcode; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline INNER JOIN airports ON flights.destairport = airports.airportcode AND flights.sourceairport = airports.airportcode WHERE airlines.uid = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.airline = airlines.airline AND airlines.abbreviation = 'UA' AND flights.destairport = 'Aberdeen' AND flights.destairport = airports.airportcode AND flights.sourceairport = airports.airportcode; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline INNER JOIN airports ON flights.destairport = airports.airportcode AND flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'UA' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode JOIN airports.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'UA' AND airports.city = 'Aberdeen';"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights  WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines') AND destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights  WHERE airline = (SELECT abbreviation FROM airlines WHERE airline = 'United Airlines') AND destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights  WHERE airline IN (SELECT uid FROM airlines WHERE airline = 'United Airlines') AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights  WHERE airline IN (SELECT abbreviation FROM airlines WHERE airline = 'United Airlines') AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights  WHERE airline = 'United Airlines' AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.abbreviation JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.uid = (SELECT uid FROM airlines WHERE airline = 'United Airlines')  AND airports.city = 'Aberdeen'; ",
      "SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = (SELECT abbreviation FROM airlines WHERE airline = 'United Airlines')  AND airports.city = 'Aberdeen';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM flights WHERE airline = \"United Airlines\" AND destairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\"); ",
      "SELECT COUNT(*) FROM flights f INNER JOIN airlines a ON f.airline = a.airline INNER JOIN airports ar ON f.destairport = ar.airportcode WHERE a.abbreviation = \"UA\" AND ar.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = \"United Airlines\" AND airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights, airlines, airports  WHERE flights.airline = airlines.airline AND flights.destairport = airports.airportcode AND airlines.airline = \"United Airlines\" AND airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.airline  JOIN airports ON flights.destairport = airports.airportcode  WHERE airlines.airline = \"United Airlines\" AND airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights INNER JOIN airlines ON flights.airline = airlines.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = \"United Airlines\" AND airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights WHERE airline = \"United Airlines\" AND destairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\"); ",
      "SELECT COUNT(*) FROM flights, airlines, airports  WHERE flights.airline = airlines.airline AND flights.destairport = airports.airportcode AND airlines.abbreviation = \"UA\" AND airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights, airlines, airports  WHERE flights.airline = airlines.airline AND flights.destairport = airports.airportcode AND airlines.airline = \"United Airlines\" AND airports.city = \"Aberdeen\"; ",
      "SELECT COUNT(*) FROM flights WHERE airline = \"United Airlines\" AND destairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");"
    ]
  },
  {
    "id": 224,
    "db_id": "flight_2",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT airports.city FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airports.city FROM airports  WHERE airports.airportcode IN ( SELECT flights.sourceairport FROM flights  GROUP BY flights.sourceairport ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT airports.city FROM airports  WHERE airports.airportcode = ( SELECT flights.sourceairport FROM flights  GROUP BY flights.sourceairport ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT airports.city FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) as count FROM flights  GROUP BY flights.sourceairport ) ); ",
      "SELECT airports.city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.city HAVING COUNT(*) >= ALL ( SELECT COUNT(*)  FROM flights  GROUP BY flights.sourceairport ); ",
      "SELECT a.city FROM (SELECT airports.city, COUNT(*) AS departure_count FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city) AS a WHERE a.departure_count = ( SELECT MAX(b.departure_count) FROM (SELECT airports.city, COUNT(*) AS departure_count FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city) AS b );  ",
      "SELECT a.city FROM (SELECT airports.city, COUNT(*) AS departure_count FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY departure_count DESC) AS a LIMIT 1; ",
      "SELECT TOP 1 airports.city FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC; ",
      "SELECT airports.city FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT city FROM airports WHERE airportcode = ( SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1 );"
    ],
    "gpt_answers2": [
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(flights.flightno) DESC LIMIT 1; ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(flights.flightno) = ( SELECT MAX(count) FROM ( SELECT COUNT(flights.flightno) AS count FROM flights GROUP BY flights.sourceairport ) ); ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) AS count FROM flights GROUP BY flights.sourceairport ) ); ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(flights.flightno) = ( SELECT COUNT(DISTINCT flights.flightno) FROM flights ); ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(*) = ( SELECT COUNT(DISTINCT flights.flightno) FROM flights ); ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(flights.flightno) = ( SELECT MAX(count) FROM ( SELECT COUNT(DISTINCT flights.flightno) AS count FROM flights GROUP BY flights.sourceairport ) ); ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(DISTINCT flights.flightno) AS count FROM flights GROUP BY flights.sourceairport ) ); ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(flights.flightno) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) AS count FROM ( SELECT DISTINCT flights.flightno FROM flights ) GROUP BY flights.sourceairport ) ); ",
      "SELECT airports.city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY airports.city HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) AS count FROM ( SELECT DISTINCT flights.flightno FROM flights ) GROUP BY flights.sourceairport ) );"
    ],
    "gpt_answers3": [
      "SELECT city, COUNT(*) as num_departing_flights FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY city ORDER BY num_departing_flights DESC LIMIT 1;",
      "SELECT a.city FROM airports a WHERE a.airportcode = (SELECT f.sourceairport FROM flights f GROUP BY f.sourceairport ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT a.city FROM airports a JOIN flights f ON a.airportcode = f.sourceairport GROUP BY a.city ORDER BY COUNT(*) DESC LIMIT 1;",
      "SELECT city FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT a.city FROM airports a JOIN flights f ON a.airportcode = f.sourceairport GROUP BY a.city HAVING COUNT(*) = (SELECT COUNT(*) as num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1);",
      "SELECT city FROM (SELECT a.city, COUNT(*) as num_departing_flights FROM airports a JOIN flights f ON a.airportcode = f.sourceairport GROUP BY a.city) WHERE num_departing_flights = (SELECT COUNT(*) as num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC LIMIT 1);",
      "SELECT a.city FROM airports a JOIN flights f ON a.airportcode = f.sourceairport GROUP BY a.city HAVING COUNT(*) = (SELECT COUNT(*) as num_departing_flights FROM flights GROUP BY sourceairport ORDER BY num_departing_flights DESC FETCH FIRST ROW ONLY);",
      "SELECT city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY city HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM flights GROUP BY sourceairport));",
      "SELECT city FROM (SELECT a.city, COUNT(*) as num_departing_flights FROM airports a JOIN flights f ON a.airportcode = f.sourceairport GROUP BY a.city ORDER BY num_departing_flights DESC) LIMIT 1;",
      "SELECT a.city FROM airports a JOIN flights f ON a.airportcode = f.sourceairport GROUP BY a.city ORDER BY COUNT(*) DESC  FETCH FIRST ROW ONLY;"
    ]
  },
  {
    "id": 226,
    "db_id": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT sourceairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1; ",
      "SELECT destairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY destairport ORDER BY num_flights DESC LIMIT 1; ",
      "SELECT airportcode, COUNT(*) AS num_flights FROM (SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport AS airportcode FROM flights) GROUP BY airportcode ORDER BY num_flights DESC LIMIT 1; ",
      "SELECT airportcode FROM (SELECT sourceairport AS airportcode, COUNT(*) AS num_flights FROM flights UNION ALL SELECT destairport AS airportcode, COUNT(*) AS num_flights FROM flights) GROUP BY airportcode ORDER BY num_flights DESC LIMIT 1; ",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) AND airportcode IN (SELECT destairport FROM flights) GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) OR airportcode IN (SELECT destairport FROM flights) GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airportcode FROM (SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport AS airportcode FROM flights) GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airportcode FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports) AND destairport IN (SELECT airportcode FROM airports) GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airportcode FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports) OR destairport IN (SELECT airportcode FROM airports) GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airportcode FROM flights JOIN airports ON flights.sourceairport = airports.airportcode OR flights.destairport = airports.airportcode GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT destairport AS airportcode, COUNT(*) AS flight_count FROM flights GROUP BY destairport ORDER BY flight_count DESC LIMIT 1;",
      "SELECT destairport AS airportcode, COUNT(*) AS flight_count FROM flights GROUP BY destairport HAVING flight_count = (SELECT MAX(count) FROM (SELECT destairport, COUNT(*) AS count FROM flights GROUP BY destairport));",
      "SELECT destairport AS airportcode, COUNT(*) AS flight_count FROM flights GROUP BY destairport HAVING flight_count = (SELECT COUNT(*) FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT destairport AS airportcode, COUNT(*) AS flight_count FROM flights GROUP BY destairport HAVING flight_count IN (SELECT MAX(COUNT(*)) FROM flights GROUP BY destairport);",
      "SELECT destairport AS airportcode, COUNT(*) AS flight_count FROM flights GROUP BY destairport HAVING flight_count = (SELECT COUNT(*) FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY);",
      "SELECT airportcode FROM (SELECT destairport AS airportcode, COUNT(*) AS flight_count FROM flights GROUP BY destairport) WHERE flight_count = (SELECT MAX(flight_count) FROM (SELECT destairport, COUNT(*) AS flight_count FROM flights GROUP BY destairport));",
      "SELECT destairport AS airportcode FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT destairport, COUNT(*) AS count FROM flights GROUP BY destairport));",
      "SELECT destairport AS airportcode FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1;",
      "SELECT destairport AS airportcode FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY;",
      "SELECT destairport AS airportcode FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY);"
    ],
    "gpt_answers3": [
      "SELECT sourceairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1;",
      "SELECT destairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY destairport ORDER BY num_flights DESC LIMIT 1;",
      "SELECT airportcode FROM (SELECT sourceairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1) AS t1 UNION ALL SELECT airportcode FROM (SELECT destairport AS airportcode, COUNT(*) AS num_flights FROM flights GROUP BY destairport ORDER BY num_flights DESC LIMIT 1) AS t2;",
      "SELECT airportcode FROM airports WHERE airportcode = (SELECT sourceairport  FROM flights  GROUP BY sourceairport  ORDER BY COUNT(*) DESC  LIMIT 1) OR airportcode = (SELECT destairport  FROM flights  GROUP BY destairport  ORDER BY COUNT(*) DESC  LIMIT 1);",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT sourceairport  FROM flights  GROUP BY sourceairport  ORDER BY COUNT(*) DESC  LIMIT 1) OR airportcode IN (SELECT destairport  FROM flights  GROUP BY destairport  ORDER BY COUNT(*) DESC  LIMIT 1);",
      "SELECT airportcode FROM (SELECT airportcode, COUNT(*) AS num_flights FROM (SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport AS airportcode FROM flights) GROUP BY airportcode ORDER BY num_flights DESC LIMIT 1);",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT airportcode FROM flights JOIN airports  ON flights.sourceairport = airports.airportcode  GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1) OR airportcode IN (SELECT airportcode FROM flights JOIN airports  ON flights.destairport = airports.airportcode  GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT airportcode FROM airports WHERE airportcode = (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1) OR airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT airportcode FROM airports WHERE (SELECT COUNT(*) FROM flights WHERE sourceairport = airports.airportcode) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY sourceairport));",
      "SELECT airportcode FROM airports WHERE (SELECT COUNT(*) FROM flights WHERE destairport = airports.airportcode) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY destairport));"
    ]
  },
  {
    "id": 227,
    "db_id": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1;",
      "SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY destairport)) LIMIT 1;",
      "SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY;",
      "SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY destairport)) FETCH FIRST 1 ROW ONLY;",
      "SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY destairport) t) LIMIT 1;",
      "SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 10 OFFSET 0;",
      "SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY destairport) t) LIMIT 10 OFFSET 0;",
      "SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 9;",
      "SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY destairport) t) LIMIT 1 OFFSET 9;",
      "SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC FETCH FIRST 10 ROWS ONLY;"
    ],
    "gpt_answers2": [
      "SELECT destairport  FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT destairport, COUNT(*) AS cnt FROM flights GROUP BY destairport));",
      "SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1;",
      "SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY;",
      "SELECT destairport FROM flights WHERE destairport = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM flights GROUP BY destairport);",
      "SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;",
      "SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT TOP 1 COUNT(*) FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC);",
      "SELECT destairport FROM flights WHERE (SELECT COUNT(*) FROM flights GROUP BY destairport HAVING destairport = flights.destairport) = (SELECT MAX(cnt) FROM (SELECT destairport, COUNT(*) AS cnt FROM flights GROUP BY destairport) AS T);",
      "SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT destairport FROM flights WHERE destairport NOT IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) < (SELECT COUNT(*) FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1));"
    ],
    "gpt_answers3": [
      "SELECT destairport AS airport_code FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT sourceairport AS airport_code FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT destairport AS airport_code FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY destairport)); ",
      "SELECT sourceairport AS airport_code FROM flights GROUP BY sourceairport HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY sourceairport)); ",
      "SELECT airportcode AS airport_code FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*)=(SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY destairport))); ",
      "SELECT airportcode AS airport_code FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport HAVING COUNT(*)=(SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY sourceairport))); ",
      "SELECT airportcode AS airport_code FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT airportcode AS airport_code FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT airportcode AS airport_code FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM flights GROUP BY destairport)); ",
      "SELECT airportcode AS airport_code FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM flights GROUP BY sourceairport));"
    ]
  },
  {
    "id": 228,
    "db_id": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "gpt_answers1": [
      "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights) ORDER BY RANDOM() LIMIT 1; ",
      "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) ORDER BY RANDOM() LIMIT 1; ",
      "SELECT airportcode FROM airports WHERE airportcode NOT IN  (SELECT destairport FROM flights UNION SELECT sourceairport FROM flights) ORDER BY RANDOM() LIMIT 1; ",
      "SELECT airportcode FROM airports LEFT JOIN flights ON airports.airportcode = flights.destairport WHERE flights.destairport IS NULL ORDER BY RANDOM() LIMIT 1; ",
      "SELECT airportcode FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport WHERE flights.sourceairport IS NULL ORDER BY RANDOM() LIMIT 1; ",
      "SELECT airportcode FROM airports LEFT JOIN flights ON airports.airportcode = flights.destairport LEFT JOIN flights AS f2 ON airports.airportcode = f2.sourceairport WHERE flights.destairport IS NULL AND f2.sourceairport IS NULL ORDER BY RANDOM() LIMIT 1; ",
      "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights) ORDER BY RANDOM() LIMIT 1; ",
      "SELECT airportcode FROM airports LEFT JOIN flights ON airports.airportcode = flights.destairport GROUP BY airportcode ORDER BY COUNT(flights.destairport) ASC LIMIT 1; ",
      "SELECT airportcode FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport OR airports.airportcode = flights.destairport GROUP BY airportcode ORDER BY COUNT(DISTINCT flights.flightno) ASC LIMIT 1; ",
      "SELECT airportcode FROM airports WHERE NOT EXISTS (SELECT destairport FROM flights WHERE flights.destairport = airports.airportcode) ORDER BY RANDOM() LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT airportcode FROM airports ORDER BY (SELECT COUNT(*) FROM flights WHERE flights.destairport = airports.airportcode) ASC LIMIT 1;",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT destairport, COUNT(*) AS count FROM flights GROUP BY destairport))));",
      "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) > 0) LIMIT 1;",
      "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY destairport HAVING COUNT(*) > 0) LIMIT 1);",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT MIN(destairport) FROM flights GROUP BY destairport);",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT destairport, COUNT(*) AS count FROM flights GROUP BY destairport))));",
      "SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights GROUP BY sourceairport) LIMIT 1;",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT MIN(destairport) FROM flights);",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT destairport, COUNT(*) AS count FROM flights GROUP BY destairport)))) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT sourceairport, COUNT(*) as num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights ASC LIMIT 1; ",
      "SELECT airportcode FROM airports WHERE airportcode IN ( SELECT sourceairport FROM flights GROUP BY sourceairport HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT sourceairport, COUNT(*) as flight_count FROM flights GROUP BY sourceairport ) ) ); ",
      "SELECT airportcode FROM ( SELECT sourceairport, COUNT(*) as num_flights FROM flights GROUP BY sourceairport ) WHERE num_flights = ( SELECT MIN(num_flights) FROM ( SELECT COUNT(*) as num_flights FROM flights GROUP BY sourceairport ) ); ",
      "SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY COUNT(*) ASC LIMIT 1; ",
      "SELECT airportcode, COUNT(*) as num_flights FROM flights GROUP BY airportcode HAVING num_flights = ( SELECT MIN(num_flights) FROM ( SELECT COUNT(*) as num_flights FROM flights GROUP BY airportcode ) ); ",
      "SELECT airportcode FROM airports WHERE airportcode = ( SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1 ); ",
      "SELECT airportcode FROM airports WHERE airportcode = ( SELECT sourceairport FROM flights GROUP BY sourceairport HAVING COUNT(*) = ( SELECT MIN(num_flights) FROM ( SELECT COUNT(*) as num_flights FROM flights GROUP BY sourceairport ) ) ); ",
      "SELECT airportcode FROM airports WHERE city || ', ' || country = ( SELECT city || ', ' || country FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY COUNT(*) ASC LIMIT 1 ); ",
      "SELECT airportcode FROM ( SELECT airportcode, COUNT(*) as num_flights FROM flights GROUP BY airportcode ) WHERE num_flights = ( SELECT MIN(num_flights) FROM ( SELECT COUNT(*) as num_flights FROM flights GROUP BY airportcode ) ) LIMIT 1; ",
      "SELECT airportcode FROM airports WHERE airportcode = ( SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1 );"
    ]
  },
  {
    "id": 229,
    "db_id": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "gpt_answers1": [
      "SELECT airportcode FROM airports  WHERE airportcode = (SELECT sourceairport FROM flights  GROUP BY sourceairport  ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT airports.airportcode  FROM airports  JOIN flights ON airports.airportcode = flights.sourceairport  GROUP BY airports.airportcode  ORDER BY COUNT(*) ASC LIMIT 1; ",
      "SELECT airportcode  FROM airports  WHERE airportcode IN (SELECT sourceairport  FROM flights  GROUP BY sourceairport  ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT airportcode  FROM airports  JOIN flights ON flights.sourceairport = airports.airportcode  GROUP BY airportcode  ORDER BY COUNT(*) ASC LIMIT 1; ",
      "SELECT airportcode  FROM airports  WHERE airportcode = ANY (SELECT sourceairport  FROM flights  GROUP BY sourceairport  HAVING COUNT(*) = (SELECT MIN(count)  FROM (SELECT COUNT(*) AS count  FROM flights  GROUP BY sourceairport) AS subquery)); ",
      "SELECT airports.airportcode  FROM airports, flights  WHERE airports.airportcode = flights.sourceairport  GROUP BY airports.airportcode  HAVING COUNT(*) = (SELECT MIN(count)  FROM (SELECT COUNT(*) AS count  FROM flights  GROUP BY sourceairport) AS subquery); ",
      "SELECT airportcode  FROM airports  WHERE airportcode IN (SELECT sourceairport  FROM flights  GROUP BY sourceairport  HAVING COUNT(*) = (SELECT COUNT(*)  FROM flights  GROUP BY sourceairport  ORDER BY COUNT(*) ASC LIMIT 1)); ",
      "SELECT a.airportcode  FROM airports AS a  LEFT JOIN flights AS f ON a.airportcode = f.sourceairport  GROUP BY a.airportcode  HAVING COUNT(*) = (SELECT MIN(count)  FROM (SELECT COUNT(*) AS count  FROM flights  GROUP BY sourceairport) AS subquery); ",
      "SELECT airportcode  FROM airports  WHERE airportcode = (SELECT sourceairport  FROM flights  GROUP BY sourceairport  ORDER BY COUNT(*) ASC  LIMIT 1 OFFSET 0); ",
      "SELECT MIN(a.airportcode)  FROM airports a  JOIN flights f ON a.airportcode = f.sourceairport  GROUP BY a.airportcode  HAVING COUNT(*) = (SELECT COUNT(*)  FROM flights  GROUP BY sourceairport  ORDER BY COUNT(*) ASC LIMIT 1);"
    ],
    "gpt_answers2": [
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM flights GROUP BY destairport)));",
      "SELECT airportcode FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) ASC LIMIT 1);",
      "SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY airports.airportcode HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY airports.airportcode));",
      "SELECT airportcode FROM (SELECT destairport, COUNT(*) as count FROM flights GROUP BY destairport ORDER BY count ASC LIMIT 1) as res JOIN airports ON res.destairport = airports.airportcode;",
      "SELECT airportcode FROM airports JOIN (SELECT destairport, COUNT(*) as count FROM flights GROUP BY destairport ORDER BY count ASC LIMIT 1) as res ON airports.airportcode = res.destairport;",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY destairport ORDER BY COUNT(*) ASC LIMIT 1));",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) ASC LIMIT 1);",
      "SELECT airportcode FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) ASC LIMIT 1);",
      "SELECT airportcode FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM flights GROUP BY destairport)));",
      "SELECT airportcode FROM airports WHERE airportcode = (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY destairport ORDER BY COUNT(*) ASC LIMIT 1));"
    ],
    "gpt_answers3": [
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY destairport))))",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY sourceairport))))",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY destairport)))",
      "SELECT airportcode FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY sourceairport)))",
      "SELECT airportcode FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY destairport) JOIN airports ON flights.sourceairport = airports.airportcode;",
      "SELECT airportcode FROM flights GROUP BY sourceairport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY sourceairport) JOIN airports ON flights.destairport = airports.airportcode;",
      "SELECT airportcode FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY destairport) LEFT JOIN airports ON flights.sourceairport = airports.airportcode;",
      "SELECT airportcode FROM flights GROUP BY sourceairport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY sourceairport) LEFT JOIN airports ON flights.destairport = airports.airportcode;",
      "SELECT airportcode FROM flights GROUP BY destairport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY destairport) INNER JOIN airports ON flights.sourceairport = airports.airportcode;",
      "SELECT airportcode FROM flights GROUP BY sourceairport HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY sourceairport) INNER JOIN airports ON flights.destairport = airports.airportcode;"
    ]
  },
  {
    "id": 230,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1; ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline)); ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM flights GROUP BY airline); ",
      "SELECT airline FROM (SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline) AS t WHERE num_flights = (SELECT MAX(num_flights) FROM (SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline) AS t2); ",
      "SELECT airline FROM (SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline) AS t WHERE num_flights = (SELECT COUNT(*) FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airline FROM (SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline) AS t WHERE num_flights = (SELECT COUNT(*) FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline)); ",
      "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY; ",
      "SELECT DISTINCT airline FROM flights ORDER BY COUNT(*) DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline));",
      "SELECT f.airline FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline) as f ORDER BY f.cnt DESC LIMIT 1;",
      "SELECT f.airline FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline) as f WHERE f.cnt = (SELECT MAX(cnt) FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline));",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline));",
      "SELECT f.airline FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline) as f WHERE f.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline));",
      "SELECT airline FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline ORDER BY cnt DESC LIMIT 1) as f;",
      "SELECT f.airline FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline) as f WHERE f.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline));",
      "SELECT airline FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline) as f WHERE f.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY airline));",
      "SELECT f.airline FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline) as f WHERE f.cnt = (SELECT MAX(cnt) FROM (SELECT airline, COUNT(*) as cnt FROM flights GROUP BY airline));"
    ],
    "gpt_answers3": [
      "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline)); ",
      "SELECT a.airline FROM ( SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ) a WHERE a.num_flights = (SELECT MAX(num_flights) FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline)); ",
      "SELECT airline FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline) sub WHERE num_flights = (SELECT MAX(num_flights) FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline) sub); ",
      "SELECT a.airline FROM ( SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC ) a LIMIT 1; ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT DISTINCT airline FROM flights ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT TOP 1 COUNT(*) FROM flights GROUP BY airline ORDER BY COUNT(*) DESC); ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = ( SELECT MAX(flight_count) FROM ( SELECT COUNT(*) AS flight_count FROM flights GROUP BY airline ) ); ",
      "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY;"
    ]
  },
  {
    "id": 231,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT airline, COUNT(*) as total_flights FROM flights GROUP BY airline ORDER BY total_flights DESC LIMIT 1; ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) as flight_count FROM flights GROUP BY airline)); ",
      "SELECT a.airline FROM (SELECT airline, COUNT(*) as total_flights FROM flights GROUP BY airline) a JOIN (SELECT MAX(total_flights) as max_flights FROM (SELECT airline, COUNT(*) as total_flights FROM flights GROUP BY airline)) b ON a.total_flights = b.max_flights; ",
      "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airline FROM (SELECT airline, COUNT(*) as total_flights FROM flights GROUP BY airline) WHERE total_flights = (SELECT MAX(total_flights) FROM (SELECT airline, COUNT(*) as total_flights FROM flights GROUP BY airline)); ",
      "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT airlines.airline, COUNT(*) as flight_count FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline)); ",
      "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT airline, COUNT(*) as total_flights FROM flights GROUP BY airline HAVING total_flights = (SELECT MAX(flight_count) FROM (SELECT airline, COUNT(*) as flight_count FROM flights GROUP BY airline)); ",
      "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline HAVING COUNT(*) = (SELECT MAX(total_flights) FROM (SELECT airlines.airline, COUNT(*) as total_flights FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline));"
    ],
    "gpt_answers2": [
      "SELECT airline, COUNT(*) AS num_flights  FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1; ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) AS counts FROM flights GROUP BY airline)); ",
      "SELECT f.airline  FROM flights f INNER JOIN  (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline) AS t ON f.airline = t.airline ORDER BY t.num_flights DESC LIMIT 1; ",
      "SELECT DISTINCT airline  FROM flights  WHERE (SELECT COUNT(*)  FROM flights f  WHERE f.airline = flights.airline) = (SELECT MAX(counts)  FROM (SELECT COUNT(*) AS counts  FROM flights  GROUP BY airline)); ",
      "SELECT airline  FROM  (SELECT airline,  COUNT(*) AS num_flights,  RANK() OVER (ORDER BY COUNT(*) DESC) AS rank  FROM flights  GROUP BY airline) AS t  WHERE rank = 1; ",
      "SELECT airline  FROM (SELECT airline, COUNT(*) AS num_flights   FROM flights  GROUP BY airline  ORDER BY num_flights DESC)  WHERE rownum = 1; ",
      "SELECT airline  FROM flights  WHERE airline IN  (SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) =  (SELECT MAX(counts)  FROM (SELECT airline, COUNT(*) AS counts  FROM flights  GROUP BY airline))); ",
      "SELECT airline  FROM flights  WHERE airline IN  (SELECT airline  FROM flights  GROUP BY airline  ORDER BY COUNT(*) DESC  LIMIT 1); ",
      "SELECT t.airline  FROM (SELECT airline, COUNT(*) AS num_flights  FROM flights  GROUP BY airline) AS t  INNER JOIN  (SELECT MAX(num_flights) AS max_flights  FROM (SELECT COUNT(*) AS num_flights  FROM flights  GROUP BY airline)) AS t2  ON t.num_flights = t2.max_flights; ",
      "SELECT t.airline  FROM (SELECT airline, COUNT(*) AS num_flights  FROM flights  GROUP BY airline  ORDER BY num_flights DESC  LIMIT 1) AS t;"
    ],
    "gpt_answers3": [
      "SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline));",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT airline FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline) AS subquery WHERE num_flights = (SELECT MAX(num_flights) FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline) AS subquery);",
      "SELECT airlines.airline FROM flights INNER JOIN airlines ON flights.airline = airlines.airline GROUP BY flights.airline HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights INNER JOIN airlines ON flights.airline = airlines.airline GROUP BY flights.airline) AS subquery);",
      "SELECT DISTINCT airline FROM flights WHERE airline = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT DISTINCT airline FROM flights WHERE airline = (SELECT airline FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1) AS subquery);",
      "SELECT DISTINCT airline FROM flights WHERE airline = (SELECT airline FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline) AS subquery WHERE num_flights = (SELECT MAX(num_flights) FROM (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline) AS subquery));",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline)));",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) IN (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline)));"
    ]
  },
  {
    "id": 232,
    "db_id": "flight_2",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "gpt_answers1": [
      "SELECT abbreviation, country FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = ( SELECT MIN(airline_count) FROM ( SELECT COUNT(*) AS airline_count FROM flights GROUP BY airline  ) AS counts ) ); ",
      "SELECT abbreviation, country FROM airlines WHERE airline = ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = ( SELECT MIN(airline_count) FROM ( SELECT COUNT(*) AS airline_count FROM flights GROUP BY airline  ) AS counts ) ); ",
      "SELECT abbreviation, country FROM airlines WHERE airline IN ( SELECT airline FROM ( SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count LIMIT 1 ) AS min_flight ); ",
      "SELECT abbreviation, country FROM airlines WHERE uid = ( SELECT uid FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = ( SELECT MIN(airline_count) FROM ( SELECT COUNT(*) AS airline_count FROM flights GROUP BY airline  ) AS counts ) ) ); ",
      "SELECT abbreviation, country FROM airlines WHERE uid = ( SELECT uid FROM ( SELECT uid, COUNT(*) AS flight_count FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY uid ORDER BY flight_count LIMIT 1 ) AS min_flight ); ",
      "SELECT abbreviation, country FROM airlines WHERE uid = ( SELECT uid FROM ( SELECT uid, COUNT(*) AS flight_count FROM ( SELECT uid, airline FROM airlines JOIN flights ON airlines.airline = flights.airline ) AS combined_table GROUP BY uid ORDER BY flight_count LIMIT 1 ) AS min_flight ); ",
      "SELECT abbreviation, country FROM airlines WHERE uid IN ( SELECT uid FROM ( SELECT uid, COUNT(*) AS flight_count FROM ( SELECT airlines.uid, airlines.abbreviation, airlines.country, flights.airline FROM airlines JOIN flights ON airlines.airline = flights.airline ) AS combined_table GROUP BY uid ORDER BY flight_count LIMIT 1 ) AS min_flight ); ",
      "SELECT abbreviation, country FROM ( SELECT airlines.uid, airlines.abbreviation, airlines.country, COUNT(*) AS flight_count FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.uid ORDER BY flight_count LIMIT 1 ) AS min_flight; ",
      "SELECT abbreviation, country FROM airlines WHERE uid IN ( SELECT uid FROM ( SELECT airlines.uid, airlines.abbreviation, airlines.country, COUNT(*) AS flight_count FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.uid ORDER BY flight_count LIMIT 1 ) AS min_flight ); ",
      "SELECT abbreviation, country FROM airlines WHERE uid IN ( SELECT uid FROM ( SELECT COUNT(*) AS flight_count, airlines.uid FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.uid HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT COUNT(*) AS flight_count FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.uid ) AS counts ) ) AS min_flight );"
    ],
    "gpt_answers2": [
      "SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(count_flights) FROM (SELECT COUNT(*) as count_flights FROM flights GROUP BY airline) AS counts)) ",
      "SELECT abbreviation, country FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(count_flights) FROM (SELECT COUNT(*) as count_flights FROM flights GROUP BY airline) AS counts)) ",
      "SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM (SELECT airline, COUNT(*) as count_flights FROM flights GROUP BY airline ORDER BY count_flights ASC LIMIT 1) AS min_flights) ",
      "SELECT abbreviation, country FROM airlines WHERE airline IN (SELECT airline FROM (SELECT airline, COUNT(*) as count_flights FROM flights GROUP BY airline ORDER BY count_flights ASC LIMIT 1) AS min_flights) ",
      "SELECT A.abbreviation, A.country FROM airlines A JOIN (SELECT airline, COUNT(*) as count_flights FROM flights GROUP BY airline ORDER BY count_flights ASC LIMIT 1) AS min_flights ON A.airline = min_flights.airline ",
      "SELECT A.abbreviation, A.country FROM airlines A JOIN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(count_flights) FROM (SELECT COUNT(*) as count_flights FROM flights GROUP BY airline) AS counts)) AS min_flights ON A.airline = min_flights.airline ",
      "SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1) ",
      "SELECT abbreviation, country FROM airlines A JOIN flights F ON A.airline = F.airline GROUP BY A.airline, A.abbreviation, A.country HAVING COUNT(*) = (SELECT MIN(count_flights) FROM (SELECT COUNT(*) as count_flights FROM flights GROUP BY airline) AS counts) ",
      "SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY) ",
      "SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1)"
    ],
    "gpt_answers3": [
      "SELECT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.airline = f.airline GROUP BY a.airline ORDER BY COUNT(*) ASC LIMIT 1; ",
      "SELECT a.abbreviation, a.country FROM airlines a WHERE a.airline IN ( SELECT f.airline FROM flights f GROUP BY f.airline HAVING COUNT(*) = ( SELECT MIN(cnt) FROM ( SELECT COUNT(*) AS cnt FROM flights GROUP BY airline ) ) ); ",
      "SELECT abbreviation, country FROM ( SELECT a.abbreviation, a.country, COUNT(*) AS flight_count FROM airlines a JOIN flights f ON a.airline = f.airline GROUP BY a.airline ) AS sub WHERE flight_count = ( SELECT MIN(flight_count) FROM ( SELECT COUNT(*) AS flight_count FROM flights GROUP BY airline ) ); ",
      "SELECT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.airline = f.airline GROUP BY a.airline HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ) ); ",
      "SELECT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.airline = f.airline WHERE a.airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ) ) ) GROUP BY a.airline; ",
      "SELECT a.abbreviation, a.country FROM airlines a WHERE a.airline = ( SELECT f.airline FROM flights f GROUP BY f.airline HAVING COUNT(*) = ( SELECT MIN(count_flights) FROM ( SELECT airline, COUNT(*) AS count_flights FROM flights GROUP BY airline ) ) ); ",
      "SELECT abbreviation, country FROM airlines WHERE airline = ( SELECT airline FROM ( SELECT airline, COUNT(*) AS count_flights FROM flights GROUP BY airline ORDER BY count_flights ASC LIMIT 1 ) ); ",
      "SELECT DISTINCT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.airline = f.airline GROUP BY a.airline HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ) ); ",
      "SELECT a.abbreviation, a.country FROM airlines a WHERE a.airline = ( SELECT f.airline FROM flights f GROUP BY f.airline HAVING COUNT(*) = ( SELECT MIN(count_flights) FROM ( SELECT airline, COUNT(*) AS count_flights FROM flights GROUP BY airline ) ) ); ",
      "SELECT abbreviation, country FROM airlines WHERE airline = ( SELECT airline FROM ( SELECT airline, COUNT(*) AS count_flights FROM flights GROUP BY airline ORDER BY count_flights ASC LIMIT 1 ) );"
    ]
  },
  {
    "id": 233,
    "db_id": "flight_2",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "gpt_answers1": [
      "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT MIN(uid) FROM airlines) ",
      "SELECT abbreviation, country FROM airlines WHERE abbreviation IN (SELECT abbreviation FROM flights GROUP BY abbreviation HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM flights GROUP BY abbreviation))) ",
      "SELECT abbreviation, country FROM airlines WHERE abbreviation IN (SELECT abbreviation FROM flights GROUP BY abbreviation HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY abbreviation ORDER BY COUNT(*) ASC LIMIT 1)) ",
      "SELECT abbreviation, country FROM airlines WHERE abbreviation IN (SELECT abbreviation FROM (SELECT abbreviation, COUNT(*) as num_flights FROM flights GROUP BY abbreviation) AS subquery WHERE num_flights = (SELECT MIN(num_flights) FROM (SELECT COUNT(*) as num_flights FROM flights GROUP BY abbreviation) AS subquery2))) ",
      "SELECT abbreviation, country FROM airlines JOIN flights ON airlines.abbreviation = flights.airline GROUP BY abbreviation HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM flights GROUP BY abbreviation)) ",
      "SELECT abbreviation, country FROM airlines JOIN flights ON airlines.abbreviation = flights.airline GROUP BY abbreviation HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY abbreviation ORDER BY COUNT(*) ASC LIMIT 1) ",
      "SELECT a.abbreviation, a.country FROM airlines a, flights f WHERE a.abbreviation = f.airline GROUP BY a.abbreviation HAVING COUNT(*) = (SELECT COUNT(*) FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1) ",
      "SELECT a.abbreviation, a.country FROM airlines a, flights f WHERE a.abbreviation = f.airline GROUP BY a.abbreviation HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM flights GROUP BY airline) AS subquery) ",
      "SELECT abbreviation, country FROM airlines WHERE abbreviation = (SELECT abbreviation FROM (SELECT abbreviation, COUNT(*) as num_flights FROM flights GROUP BY abbreviation) AS subquery WHERE num_flights = (SELECT MIN(num_flights) FROM (SELECT COUNT(*) as num_flights FROM flights GROUP BY abbreviation) AS subquery2))) ",
      "SELECT abbreviation, country FROM airlines JOIN flights ON airlines.abbreviation = flights.airline GROUP BY abbreviation HAVING COUNT(*) = (SELECT COUNT(*) FROM (SELECT airline, COUNT(*) as count FROM flights GROUP BY airline) AS subquery WHERE count = (SELECT MIN(count) FROM (SELECT airline, COUNT(*) as count FROM flights GROUP BY airline) AS subquery2))"
    ],
    "gpt_answers2": [
      "SELECT abbreviation, country FROM airlines WHERE abbreviation = ( SELECT abbreviation FROM flights GROUP BY abbreviation ORDER BY COUNT(*) ASC LIMIT 1 ); ",
      "SELECT abbreviation, country FROM airlines WHERE abbreviation = ( SELECT abbreviation FROM flights GROUP BY abbreviation HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT COUNT(*) AS flight_count FROM flights GROUP BY abbreviation ) ) ); ",
      "SELECT a.abbreviation, a.country FROM airlines a JOIN ( SELECT abbreviation FROM flights GROUP BY abbreviation HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT COUNT(*) AS flight_count FROM flights GROUP BY abbreviation ) ) ) b ON a.abbreviation = b.abbreviation; ",
      "SELECT a.abbreviation, a.country FROM airlines a JOIN ( SELECT abbreviation FROM flights GROUP BY abbreviation HAVING COUNT(*) = ( SELECT COUNT(*) FROM flights GROUP BY abbreviation ORDER BY COUNT(*) ASC LIMIT 1 ) ) b ON a.abbreviation = b.abbreviation; ",
      "SELECT airlines.abbreviation, airlines.country FROM airlines JOIN ( SELECT abbreviation, COUNT(*) AS flight_count FROM flights GROUP BY abbreviation HAVING flight_count = ( SELECT MIN(flight_count) FROM ( SELECT COUNT(*) AS flight_count FROM flights GROUP BY abbreviation ) ) ) AS flights_count ON airlines.abbreviation = flights_count.abbreviation; ",
      "SELECT airlines.abbreviation, airlines.country FROM airlines WHERE abbreviation IN ( SELECT abbreviation FROM flights GROUP BY abbreviation HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT COUNT(*) AS flight_count FROM flights GROUP BY abbreviation ) ) ); ",
      "SELECT airlines.abbreviation, airlines.country FROM airlines WHERE LOWER(abbreviation) = LOWER( SELECT abbreviation FROM flights GROUP BY abbreviation HAVING COUNT(*) = ( SELECT MIN(flight_count) FROM ( SELECT COUNT(*) AS flight_count FROM flights GROUP BY abbreviation ) ) ); ",
      "SELECT airlines.abbreviation, airlines.country FROM airlines WHERE (SELECT COUNT(*) FROM flights WHERE airlines.abbreviation = flights.abbreviation) = (SELECT MIN(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY abbreviation) ); ",
      "SELECT abbreviation, country FROM airlines WHERE abbreviation = ( SELECT abbreviation FROM ( SELECT abbreviation, COUNT(*) as flight_count FROM flights GROUP BY abbreviation ORDER BY flight_count ASC LIMIT 1 ) ); ",
      "SELECT abbreviation, country FROM airlines WHERE abbreviation = ( SELECT abbreviation FROM ( SELECT abbreviation, COUNT(*) as flight_count FROM flights GROUP BY abbreviation ) ORDER BY flight_count ASC LIMIT 1 );"
    ],
    "gpt_answers3": [
      "SELECT airlines.abbreviation, airlines.country FROM airlines WHERE airlines.uid = (SELECT flights.airline FROM flights GROUP BY flights.airline ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT airlines.abbreviation, airlines.country FROM airlines INNER JOIN flights ON airlines.uid = flights.airline GROUP BY flights.airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline)); ",
      "SELECT abbreviation, country FROM airlines INNER JOIN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline))) AS min_flights ON airlines.uid = min_flights.airline; ",
      "SELECT abbreviation, country FROM airlines WHERE uid = ANY (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline))); ",
      "SELECT airlines.abbreviation, airlines.country FROM airlines WHERE airlines.uid IN (SELECT flights.airline FROM flights GROUP BY flights.airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline))); ",
      "SELECT abbreviation, country FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline))); ",
      "SELECT abbreviation, country FROM airlines WHERE uid = (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1) LIMIT 1; ",
      "SELECT airlines.abbreviation, airlines.country FROM airlines WHERE EXISTS (SELECT NULL FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline)) AND airlines.uid = flights.airline); ",
      "SELECT abbreviation, country FROM airlines WHERE EXISTS (SELECT NULL FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline)) AND airlines.uid = flights.airline);"
    ]
  },
  {
    "id": 234,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "gpt_answers1": [
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD';",
      "SELECT airline FROM flights WHERE sourceairport = 'AHD' GROUP BY airline;",
      "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD';",
      "SELECT DISTINCT flights.airline FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD';",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE airportcode = 'AHD');",
      "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport IN (SELECT airportcode FROM airports WHERE airportcode = 'AHD');",
      "SELECT DISTINCT airline FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.airportcode = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM airlines, flights WHERE airlines.airline = flights.airline AND flights.sourceairport = 'AHD';",
      "SELECT DISTINCT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT airlines.airline FROM airlines, flights WHERE flights.sourceairport = 'AHD' AND airlines.airline = flights.airline; ",
      "SELECT airlines.airline FROM airlines WHERE EXISTS ( SELECT 1 FROM flights WHERE flights.sourceairport = 'AHD' AND airlines.airline = flights.airline ); ",
      "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD'; ",
      "SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD' GROUP BY airlines.airline; ",
      "SELECT airlines.airline FROM airlines WHERE airlines.airline IN ( SELECT flights.airline FROM flights WHERE flights.sourceairport = 'AHD' ); ",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD'; ",
      "SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights WHERE sourceairport = 'AHD' ); ",
      "SELECT airlines.airline FROM airlines WHERE EXISTS ( SELECT 1 FROM flights WHERE flights.sourceairport = 'AHD' AND airlines.airline = flights.airline ); ",
      "SELECT DISTINCT airlines.airline FROM airlines WHERE airlines.airline IN ( SELECT airline FROM flights WHERE sourceairport = 'AHD' ); ",
      "SELECT airlines.airline FROM airlines, flights WHERE airlines.airline = flights.airline AND flights.sourceairport = 'AHD';"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD';",
      "SELECT airlines.airline FROM airlines, flights WHERE airlines.airline = flights.airline AND flights.sourceairport = 'AHD' GROUP BY airlines.airline;",
      "SELECT airline FROM flights WHERE sourceairport = 'AHD' GROUP BY airline;",
      "SELECT DISTINCT airlines.airline FROM airlines, flights, airports WHERE flights.sourceairport = 'AHD' AND flights.sourceairport = airports.airportcode AND airlines.airline = flights.airline;",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON airports.airportcode = flights.sourceairport WHERE airports.airportcode = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD';",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD' GROUP BY airlines.airline;",
      "SELECT DISTINCT airline FROM flights, airlines WHERE flights.sourceairport = 'AHD' AND flights.airline = airlines.airline;",
      "SELECT DISTINCT airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.sourceairport = 'AHD';"
    ]
  },
  {
    "id": 236,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "gpt_answers1": [
      "SELECT DISTINCT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE destairport = 'AHD'); ",
      "SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.airline = f.airline WHERE f.destairport = 'AHD'; ",
      "SELECT DISTINCT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE destairport = 'AHD'); ",
      "SELECT DISTINCT airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE destairport = 'AHD'; ",
      "SELECT DISTINCT airlines.airline FROM flights LEFT JOIN airlines ON flights.airline = airlines.airline WHERE destairport = 'AHD'; ",
      "SELECT DISTINCT airline FROM flights, airlines WHERE flights.airline = airlines.airline AND destairport = 'AHD'; ",
      "SELECT DISTINCT airline FROM airlines, flights WHERE airlines.airline = flights.airline AND destairport = 'AHD'; ",
      "SELECT DISTINCT airline FROM flights NATURAL JOIN airlines WHERE destairport = 'AHD'; ",
      "SELECT DISTINCT airline FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE destairport = 'AHD'; ",
      "SELECT DISTINCT airline FROM airlines JOIN flights USING (airline) WHERE destairport = 'AHD';"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM flights INNER JOIN airlines ON airlines.airline = flights.airline WHERE flights.destairport = 'AHD';",
      "SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.destairport = 'AHD' GROUP BY airlines.airline;",
      "SELECT DISTINCT airline FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportcode = 'AHD');",
      "SELECT DISTINCT airlines.airline FROM flights, airlines WHERE flights.airline = airlines.airline AND flights.destairport = 'AHD';",
      "SELECT airline FROM flights WHERE destairport = 'AHD' GROUP BY airline;",
      "SELECT airlines.airline FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'AHD';",
      "SELECT airlines.airline FROM flights, airlines WHERE flights.airline = airlines.airline AND flights.destairport = (SELECT airportcode FROM airports WHERE airportcode = 'AHD');",
      "SELECT airlines.airline FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode IN (SELECT airportcode FROM airports WHERE airportcode = 'AHD');",
      "SELECT airlines.airline FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'AHD';"
    ],
    "gpt_answers3": [
      "SELECT airline FROM flights WHERE destairport = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE flights.destairport = 'AHD';",
      "SELECT airlines.airline FROM flights, airlines WHERE flights.airline = airlines.airline AND flights.destairport = 'AHD';",
      "SELECT airline FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportcode = 'AHD');",
      "SELECT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';",
      "SELECT airline FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname = 'AHD');",
      "SELECT a.airline FROM airlines a, flights f WHERE a.airline = f.airline AND f.destairport = 'AHD';",
      "SELECT a.airline FROM flights f, airlines a WHERE f.airline = a.airline AND f.destairport = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM airlines, flights WHERE airlines.airline = flights.airline AND flights.destairport = 'AHD';",
      "SELECT DISTINCT airline FROM flights, airlines WHERE airlines.airline = flights.airline AND flights.destairport = 'AHD';"
    ]
  },
  {
    "id": 237,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "gpt_answers1": [
      "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.airline = flights.airline  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.airportcode = 'AHD' ",
      "SELECT DISTINCT airline  FROM flights  WHERE destairport = 'AHD' ",
      "SELECT DISTINCT airlines.airline  FROM airlines, flights, airports  WHERE airlines.airline = flights.airline  AND flights.destairport = airports.airportcode  AND airports.airportcode = 'AHD' ",
      "SELECT DISTINCT airline  FROM flights, airports  WHERE flights.destairport = airports.airportcode  AND airports.airportcode = 'AHD'  GROUP BY airline ",
      "SELECT DISTINCT airlines.airline  FROM airlines  INNER JOIN flights ON airlines.airline = flights.airline  INNER JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.airportcode = 'AHD' ",
      "SELECT airlines.airline  FROM airlines, flights, airports  WHERE airlines.airline = flights.airline  AND flights.destairport = airports.airportcode  AND airports.airportcode = 'AHD'  GROUP BY airlines.airline ",
      "SELECT DISTINCT airline  FROM flights  WHERE destairport = (SELECT airportcode FROM airports WHERE airportcode = 'AHD') ",
      "SELECT DISTINCT airlines.airline  FROM airlines, flights  WHERE airlines.airline = flights.airline  AND flights.destairport = 'AHD' ",
      "SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.airline = flights.airline  WHERE flights.destairport = 'AHD' ",
      "SELECT airlines.airline  FROM airlines  INNER JOIN flights ON airlines.airline = flights.airline  WHERE flights.destairport = 'AHD'"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE flights.destairport = 'AHD';",
      "SELECT airline FROM flights WHERE destairport = 'AHD' GROUP BY airline;",
      "SELECT DISTINCT airlines.airline FROM flights, airlines WHERE flights.airline = airlines.airline AND flights.destairport = 'AHD';",
      "SELECT airline FROM flights, airlines WHERE flights.airline = airlines.airline AND flights.destairport = 'AHD' GROUP BY airline;",
      "SELECT DISTINCT airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.destairport = 'AHD';",
      "SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.destairport = 'AHD' GROUP BY airline;",
      "SELECT DISTINCT airline FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportcode = 'AHD');",
      "SELECT DISTINCT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';",
      "SELECT DISTINCT airlines.airline FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode INNER JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'AHD';"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';",
      "SELECT airline FROM flights WHERE destairport = 'AHD' GROUP BY airline;",
      "SELECT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'AHD';",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.destairport = 'AHD';",
      "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.destairport = 'AHD';",
      "SELECT airlines.airline FROM airlines WHERE airlines.uid IN (SELECT airline FROM flights WHERE destairport = 'AHD');",
      "SELECT DISTINCT airlines.airline FROM airlines JOIN flights USING (airline) WHERE flights.destairport = 'AHD';",
      "SELECT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';",
      "SELECT DISTINCT airline FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname = 'AHD');",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.destairport IN (SELECT airportcode FROM airports WHERE airportname = 'AHD');"
    ]
  },
  {
    "id": 238,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "gpt_answers1": [
      "SELECT DISTINCT airline  FROM airlines  WHERE airline IN (SELECT airline FROM flights WHERE destairport = 'APG') AND airline IN (SELECT airline FROM flights WHERE destairport = 'CVO'); ",
      "SELECT DISTINCT a.airline  FROM airlines AS a INNER JOIN flights AS f1 ON a.airline = f1.airline INNER JOIN flights AS f2 ON a.airline = f2.airline WHERE f1.destairport = 'APG'  AND f2.destairport = 'CVO'; ",
      "SELECT DISTINCT airline  FROM airlines  WHERE airline IN (SELECT airline FROM flights WHERE destairport = 'APG' OR destairport = 'CVO') GROUP BY airline  HAVING COUNT(DISTINCT destairport) = 2; ",
      "SELECT DISTINCT airline  FROM airlines  INNER JOIN flights ON airlines.airline = flights.airline  WHERE flights.destairport IN ('APG','CVO')  GROUP BY airline  HAVING COUNT(DISTINCT flights.destairport) = 2; ",
      "SELECT airline  FROM airlines  WHERE EXISTS (SELECT 1 FROM flights WHERE flights.airline = airlines.airline AND flights.destairport = 'APG') AND EXISTS (SELECT 1 FROM flights WHERE flights.airline = airlines.airline AND flights.destairport = 'CVO'); ",
      "SELECT airline  FROM airlines  WHERE airline IN (SELECT airline FROM flights WHERE destairport = 'APG') INTERSECT SELECT airline  FROM airlines  WHERE airline IN (SELECT airline FROM flights WHERE destairport = 'CVO'); ",
      "SELECT DISTINCT a.airline  FROM airlines AS a INNER JOIN (SELECT DISTINCT airline FROM flights WHERE destairport = 'APG') AS f1 ON a.airline = f1.airline INNER JOIN (SELECT DISTINCT airline FROM flights WHERE destairport = 'CVO') AS f2 ON a.airline = f2.airline; ",
      "SELECT DISTINCT airline  FROM airlines  WHERE airline IN ( SELECT airline  FROM flights  WHERE destairport = 'APG')  AND airline IN ( SELECT airline  FROM flights  WHERE destairport = 'CVO' ); ",
      "SELECT DISTINCT airline  FROM airlines  WHERE airline IN ( SELECT airline  FROM flights  WHERE destairport IN ('APG', 'CVO') ) GROUP BY airline  HAVING COUNT(DISTINCT destairport) = 2; ",
      "SELECT DISTINCT a1.airline  FROM airlines AS a1, airlines AS a2 WHERE a1.airline = a2.airline  AND EXISTS (SELECT 1 FROM flights WHERE airline = a1.airline AND destairport = 'APG')  AND EXISTS (SELECT 1 FROM flights WHERE airline = a2.airline AND destairport = 'CVO');"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG' AND airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG' INTERSECT SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' ",
      "SELECT DISTINCT a.airline FROM flights a JOIN flights b ON a.airline = b.airline WHERE a.sourceairport = 'APG' AND b.sourceairport = 'CVO' ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG' AND EXISTS (SELECT * FROM flights WHERE airline = flights.airline AND sourceairport = 'CVO') ",
      "SELECT airline FROM flights WHERE sourceairport = 'APG' AND airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG' AND airline = ANY (SELECT airline FROM flights WHERE sourceairport = 'CVO') ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG' AND EXISTS (SELECT * FROM flights WHERE sourceairport = 'CVO' AND airline = flights.airline) ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG' INTERSECT SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT sourceairport) > 1 ",
      "SELECT DISTINCT a.airline FROM flights a JOIN flights b ON a.airline = b.airline WHERE a.sourceairport = 'APG' AND b.sourceairport = 'CVO'"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT a.airline FROM airlines a INNER JOIN flights f1 ON a.airline = f1.airline INNER JOIN flights f2 ON a.airline = f2.airline INNER JOIN airports ap1 ON f1.sourceairport = ap1.airportcode INNER JOIN airports ap2 ON f2.sourceairport = ap2.airportcode WHERE ap1.airportcode = 'APG' AND ap2.airportcode = 'CVO'; ",
      "SELECT a.airline FROM airlines a WHERE EXISTS(SELECT 1 FROM flights f1 WHERE f1.airline = a.airline AND f1.sourceairport = 'APG') AND EXISTS(SELECT 1 FROM flights f2 WHERE f2.airline = a.airline AND f2.sourceairport = 'CVO'); ",
      "SELECT DISTINCT a.airline FROM airlines a INNER JOIN flights f ON a.airline = f.airline INNER JOIN airports ap ON f.sourceairport = ap.airportcode WHERE ap.airportcode IN ('APG', 'CVO') GROUP BY a.airline HAVING COUNT(DISTINCT ap.airportcode) = 2; ",
      "SELECT a.airline FROM airlines a WHERE EXISTS(SELECT 1 FROM flights f1 INNER JOIN airports ap1 ON f1.sourceairport = ap1.airportcode WHERE f1.airline = a.airline AND ap1.airportcode = 'APG') AND EXISTS(SELECT 1 FROM flights f2 INNER JOIN airports ap2 ON f2.sourceairport = ap2.airportcode WHERE f2.airline = a.airline AND ap2.airportcode = 'CVO'); ",
      "SELECT DISTINCT a.airline FROM airlines a WHERE (SELECT COUNT(DISTINCT f.sourceairport) FROM flights f INNER JOIN airports ap ON f.sourceairport = ap.airportcode WHERE f.airline = a.airline AND ap.airportcode IN ('APG', 'CVO')) = 2; ",
      "SELECT a.airline FROM airlines a INNER JOIN flights f1 ON a.airline = f1.airline AND f1.sourceairport = 'APG' INNER JOIN flights f2 ON a.airline = f2.airline AND f2.sourceairport = 'CVO'; ",
      "SELECT DISTINCT a.airline FROM airlines a WHERE (SELECT COUNT(*) FROM flights f INNER JOIN airports ap ON f.sourceairport = ap.airportcode WHERE f.airline = a.airline AND ap.airportcode = 'APG') >= 1 AND (SELECT COUNT(*) FROM flights f INNER JOIN airports ap ON f.sourceairport = ap.airportcode WHERE f.airline = a.airline AND ap.airportcode = 'CVO') >= 1; ",
      "SELECT a.airline FROM airlines a INNER JOIN flights f1 ON a.airline = f1.airline INNER JOIN airports ap1 ON f1.sourceairport = ap1.airportcode INNER JOIN flights f2 ON a.airline = f2.airline INNER JOIN airports ap2 ON f2.sourceairport = ap2.airportcode WHERE ap1.airportcode = 'APG' AND ap2.airportcode = 'CVO' GROUP BY a.airline HAVING COUNT(DISTINCT ap1.airportcode) = 1 AND COUNT(DISTINCT ap2.airportcode) = 1; ",
      "SELECT DISTINCT a.airline FROM airlines a INNER JOIN flights f1 ON a.airline = f1.airline INNER JOIN flights f2 ON a.airline = f2.airline INNER JOIN airports ap1 ON f1.sourceairport = ap1.airportcode INNER JOIN airports ap2 ON f2.sourceairport = ap2.airportcode WHERE ap1.airportcode = 'APG' AND ap2.airportcode = 'CVO'; ",
      "SELECT a.airline FROM airlines a INNER JOIN flights f ON a.airline = f.airline INNER JOIN airports ap1 ON f.sourceairport = ap1.airportcode AND ap1.airportcode = 'APG' INNER JOIN airports ap2 ON f.sourceairport = ap2.airportcode AND ap2.airportcode = 'CVO'  GROUP BY a.airline HAVING COUNT(DISTINCT ap1.airportcode) = 1 AND COUNT(DISTINCT ap2.airportcode) = 1;"
    ]
  },
  {
    "id": 239,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "gpt_answers1": [
      "SELECT DISTINCT airline FROM flights WHERE sourceairport IN (\"APG\", \"CVO\") AND destairport IN (\"APG\", \"CVO\"); ",
      "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = \"APG\" AND flights.destairport = \"CVO\" INTERSECT SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = \"CVO\" AND flights.destairport = \"APG\"; ",
      "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights AS f1 ON airlines.airline = f1.airline INNER JOIN flights AS f2 ON airlines.airline = f2.airline WHERE f1.sourceairport = \"APG\" AND f1.destairport = \"CVO\" AND f2.sourceairport = \"CVO\" AND f2.destairport = \"APG\"; ",
      "SELECT DISTINCT airline FROM (SELECT airline FROM flights WHERE sourceairport = \"APG\") AS t1 INNER JOIN (SELECT airline FROM flights WHERE sourceairport = \"CVO\") AS t2 ON t1.airline = t2.airline; ",
      "SELECT airline FROM flights WHERE sourceairport = \"APG\" INTERSECT SELECT airline FROM flights WHERE sourceairport = \"CVO\"; ",
      "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights AS f1 ON airlines.airline = f1.airline INNER JOIN flights AS f2 ON airlines.airline = f2.airline WHERE f1.sourceairport = \"APG\" AND f2.sourceairport = \"CVO\"; ",
      "SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE (flights.sourceairport = \"APG\" OR flights.sourceairport = \"CVO\") GROUP BY airlines.airline HAVING COUNT(DISTINCT flights.sourceairport) = 2; ",
      "SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = \"APG\" OR flights.sourceairport = \"CVO\" GROUP BY airlines.airline HAVING COUNT(DISTINCT flights.sourceairport) = 2; ",
      "SELECT airline FROM (SELECT DISTINCT airline, sourceairport FROM flights WHERE sourceairport = \"APG\" OR sourceairport = \"CVO\") AS t1 INNER JOIN (SELECT DISTINCT airline, sourceairport FROM flights WHERE sourceairport = \"APG\" OR sourceairport = \"CVO\") AS t2 ON t1.airline = t2.airline WHERE t1.sourceairport <> t2.sourceairport; ",
      "SELECT DISTINCT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = \"APG\" AND EXISTS (SELECT * FROM flights WHERE airline = airlines.airline AND sourceairport = \"CVO\");"
    ],
    "gpt_answers2": [
      "SELECT a.airline  FROM airlines a, flights f, airports apg, airports cvo  WHERE f.sourceairport = apg.airportcode  AND f.destairport = cvo.airportcode  AND a.airline = f.airline  AND apg.airportcode = 'APG'  AND cvo.airportcode = 'CVO'; ",
      "SELECT a.airline  FROM airlines a  JOIN flights f1 ON f1.airline = a.airline  JOIN flights f2 ON f2.airline = a.airline  JOIN airports apg ON f1.sourceairport = apg.airportcode  JOIN airports cvo ON f2.sourceairport = cvo.airportcode  WHERE apg.airportcode = 'APG'  AND cvo.airportcode = 'CVO'; ",
      "SELECT airline  FROM airlines  WHERE airline IN (SELECT f.airline  FROM flights f  JOIN airports apg ON f.sourceairport = apg.airportcode  WHERE apg.airportcode = 'APG')  AND airline IN (SELECT f.airline  FROM flights f  JOIN airports cvo ON f.sourceairport = cvo.airportcode  WHERE cvo.airportcode = 'CVO'); ",
      "SELECT a.airline  FROM airlines a  INNER JOIN flights f1 ON a.airline = f1.airline  INNER JOIN airports apg ON f1.sourceairport = apg.airportcode  INNER JOIN flights f2 ON a.airline = f2.airline  INNER JOIN airports cvo ON f2.sourceairport = cvo.airportcode  WHERE apg.airportcode = 'APG'  AND cvo.airportcode = 'CVO'; ",
      "SELECT a.airline  FROM airlines a  INNER JOIN flights f ON a.airline = f.airline  INNER JOIN airports apg ON f.sourceairport = apg.airportcode  INNER JOIN airports cvo ON f.sourceairport = cvo.airportcode  WHERE apg.airportcode = 'APG'  AND cvo.airportcode = 'CVO'  GROUP BY a.airline  HAVING COUNT(DISTINCT apg.airportcode) > 1; ",
      "SELECT a.airline  FROM airlines a  JOIN flights f ON a.airline = f.airline  JOIN airports apg ON f.sourceairport = apg.airportcode  JOIN airports cvo ON f.sourceairport = cvo.airportcode  WHERE apg.airportcode = 'APG'  AND cvo.airportcode = 'CVO'  GROUP BY a.airline  HAVING COUNT(DISTINCT f.flightno) > 1; ",
      "SELECT DISTINCT a.airline  FROM airlines a, flights f1, flights f2, airports apg, airports cvo  WHERE a.airline = f1.airline  AND a.airline = f2.airline  AND f1.sourceairport = apg.airportcode  AND f2.sourceairport = cvo.airportcode  AND apg.airportcode = 'APG'  AND cvo.airportcode = 'CVO'; ",
      "SELECT a.airline  FROM airlines a  JOIN flights f ON a.airline = f.airline  JOIN airports apg ON f.sourceairport = apg.airportcode  WHERE apg.airportcode = 'APG'  AND f.airline IN (SELECT airline  FROM airlines  JOIN flights f1 ON airlines.airline = f1.airline  JOIN airports cvo ON f1.sourceairport = cvo.airportcode  WHERE cvo.airportcode = 'CVO'); ",
      "SELECT DISTINCT a.airline  FROM airlines a, flights f  WHERE a.airline = f.airline  AND (f.sourceairport = 'APG' OR f.sourceairport = 'CVO')  GROUP BY a.airline  HAVING COUNT(DISTINCT f.airportcode) = 2; ",
      "SELECT DISTINCT a.airline  FROM airlines a  JOIN flights f ON a.airline = f.airline  JOIN airports apg ON f.sourceairport = apg.airportcode  WHERE apg.airportcode IN ('APG', 'CVO')  GROUP BY a.airline  HAVING COUNT(DISTINCT apg.airportcode) = 2;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.airline = f.airline WHERE f.sourceairport = \"APG\" AND f.destairport = \"CVO\";",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = \"APG\") AND airline IN (SELECT airline FROM flights WHERE sourceairport = \"CVO\");",
      "SELECT DISTINCT f.airline FROM flights f INNER JOIN airports a1 ON f.sourceairport = a1.airportcode INNER JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.airportcode = \"APG\" AND a2.airportcode = \"CVO\";",
      "SELECT DISTINCT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = \"APG\" OR sourceairport = \"CVO\") GROUP BY airline HAVING COUNT(DISTINCT sourceairport) >= 2;",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = \"APG\") INTERSECT SELECT airline FROM flights WHERE sourceairport = \"CVO\";",
      "SELECT DISTINCT a.airline FROM airlines a, flights f1, flights f2 WHERE a.airline = f1.airline AND a.airline = f2.airline AND f1.sourceairport = \"APG\" AND f2.sourceairport = \"CVO\";",
      "SELECT DISTINCT f1.airline FROM flights f1, flights f2 WHERE f1.airline = f2.airline AND f1.sourceairport = \"APG\" AND f2.sourceairport = \"CVO\";",
      "SELECT a.airline FROM airlines a INNER JOIN flights f ON a.airline = f.airline WHERE f.sourceairport IN (\"APG\", \"CVO\") GROUP BY a.airline HAVING COUNT(DISTINCT f.sourceairport) = 2;",
      "SELECT DISTINCT a.airline FROM airlines a INNER JOIN flights f ON a.airline = f.airline WHERE f.sourceairport = \"APG\" INTERSECT SELECT a.airline FROM airlines a INNER JOIN flights f ON a.airline = f.airline WHERE f.sourceairport = \"CVO\";",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = \"APG\") AND airline IN (SELECT airline FROM flights WHERE sourceairport = \"CVO\") GROUP BY airline;"
    ]
  },
  {
    "id": 240,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "gpt_answers1": [
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG'); ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG'); ",
      "SELECT airline FROM airlines WHERE EXISTS (SELECT 1 FROM flights WHERE sourceairport = 'CVO' AND airlines.airline = flights.airline) AND NOT EXISTS (SELECT 1 FROM flights WHERE sourceairport = 'APG' AND airlines.airline = flights.airline); ",
      "SELECT carrier.airline FROM (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO') AS carrier LEFT JOIN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG') AS no_flights ON carrier.airline = no_flights.airline WHERE no_flights.airline IS NULL; ",
      "SELECT airline FROM airlines WHERE EXISTS (SELECT 1  FROM flights WHERE airlines.airline = flights.airline AND flights.sourceairport = 'CVO') AND NOT EXISTS (SELECT 1  FROM flights WHERE airlines.airline = flights.airline AND flights.sourceairport = 'APG'); ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' EXCEPT SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG'; ",
      "SELECT airline FROM airlines WHERE abbreviation IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO') AND abbreviation NOT IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG'); ",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'CVO' GROUP BY airlines.airline HAVING COUNT(DISTINCT flights.destairport) > 1 AND airlines.airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG'); ",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG') GROUP BY airline; ",
      "SELECT DISTINCT airline FROM airlines WHERE uid IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO') AND uid NOT IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG');"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG'); ",
      "SELECT DISTINCT a.airline FROM airlines a INNER JOIN flights f ON a.airline = f.airline WHERE f.sourceairport = 'CVO' AND a.airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG'); ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG' GROUP BY airline); ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG'); ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG' AND destairport != 'CVO'); ",
      "SELECT DISTINCT f.airline FROM flights f INNER JOIN airports a ON f.destairport = a.airportcode WHERE f.sourceairport = 'CVO' AND a.airportcode != 'APG'; ",
      "SELECT DISTINCT f.airline FROM flights f, airports a WHERE f.sourceairport = 'CVO' AND a.airportcode != 'APG' AND f.destairport = a.airportcode; ",
      "SELECT DISTINCT f.airline FROM flights f INNER JOIN airports a ON f.sourceairport = a.airportcode WHERE f.sourceairport = 'CVO' AND NOT EXISTS (SELECT * FROM flights WHERE airline = f.airline AND sourceairport = 'APG'); ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND NOT EXISTS (SELECT * FROM flights WHERE airline = flights.airline AND sourceairport = 'APG'); ",
      "SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG' INTERSECT SELECT airline FROM flights WHERE sourceairport = 'CVO');"
    ],
    "gpt_answers3": [
      "SELECT airline  FROM flights  WHERE destairport = 'CVO'  AND sourceairport != 'APG'; ",
      "SELECT DISTINCT airline  FROM flights  WHERE destairport = 'CVO'  AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG'); ",
      "SELECT DISTINCT airlines.airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.airline  WHERE flights.destairport = 'CVO'  AND flights.sourceairport != 'APG'; ",
      "SELECT DISTINCT airline  FROM flights  WHERE destairport = 'CVO'  AND airline IN (SELECT airlines.airline FROM airlines  LEFT JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = 'APG'  AND flights.airline IS NULL); ",
      "SELECT DISTINCT airline  FROM flights  LEFT JOIN airports ON flights.sourceairport = airports.airportcode  WHERE flights.destairport = 'CVO'  AND airports.airportcode != 'APG'; ",
      "SELECT DISTINCT airlines.airline  FROM airlines  LEFT JOIN flights ON airlines.uid = flights.airline  WHERE flights.destairport = 'CVO'  AND (flights.sourceairport IS NULL  OR flights.sourceairport != 'APG'); ",
      "SELECT airline  FROM flights  WHERE destairport = 'CVO'  AND airline NOT IN (SELECT airline  FROM flights  WHERE sourceairport = 'APG'  GROUP BY airline); ",
      "SELECT DISTINCT airline  FROM flights  WHERE destairport = 'CVO'  EXCEPT  SELECT DISTINCT airline  FROM flights  WHERE sourceairport = 'APG'; ",
      "SELECT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  WHERE flights.destairport = 'CVO'  AND flights.sourceairport != 'APG'  GROUP BY airlines.airline; ",
      "SELECT a.airline  FROM airlines a  JOIN flights f ON a.uid = f.airline  WHERE f.destairport = 'CVO'  AND (a.airline, 'APG') NOT IN (SELECT airline, sourceairport  FROM flights  WHERE destairport = 'CVO');"
    ]
  },
  {
    "id": 241,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "gpt_answers1": [
      "SELECT DISTINCT airline FROM flights WHERE destairport = 'CVO' AND airline NOT IN ( SELECT airline FROM flights WHERE sourceairport = 'APG' ) ",
      "SELECT DISTINCT A.airline FROM airlines A LEFT JOIN flights F1 ON A.airline = F1.airline LEFT JOIN flights F2 ON A.airline = F2.airline LEFT JOIN airports A1 ON F1.destairport = A1.airportcode LEFT JOIN airports A2 ON F2.sourceairport = A2.airportcode WHERE A1.city = 'CVO' AND A2.city != 'APG' AND A.airline IS NOT NULL ",
      "SELECT DISTINCT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights WHERE destairport = 'CVO' ) AND airline NOT IN ( SELECT airline FROM flights WHERE sourceairport = 'APG' ) ",
      "SELECT DISTINCT airline FROM flights WHERE destairport = 'CVO' AND airline NOT IN ( SELECT airline FROM flights WHERE sourceairport = 'APG' ) ",
      "SELECT DISTINCT A.airline FROM airlines A LEFT JOIN flights F1 ON A.airline = F1.airline LEFT JOIN flights F2 ON A.airline = F2.airline LEFT JOIN airports A1 ON F1.destairport = A1.airportcode LEFT JOIN airports A2 ON F2.sourceairport = A2.airportcode WHERE A1.city = 'CVO' AND A2.city != 'APG' AND A.airline IS NOT NULL ",
      "SELECT DISTINCT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights WHERE destairport = 'CVO' ) AND airline NOT IN ( SELECT airline FROM flights WHERE sourceairport = 'APG' ) ",
      "SELECT DISTINCT airline FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'CVO' AND airline NOT IN ( SELECT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'APG' ) ",
      "SELECT DISTINCT A.airline FROM airlines A JOIN flights F1 ON A.airline = F1.airline JOIN airports A1 ON F1.destairport = A1.airportcode LEFT JOIN flights F2 ON A.airline = F2.airline JOIN airports A2 ON F2.sourceairport = A2.airportcode WHERE A1.city = 'CVO' AND A2.city != 'APG' ",
      "SELECT DISTINCT airline FROM flights, airports WHERE flights.destairport = airports.airportcode AND airports.city = 'CVO' AND airline NOT IN ( SELECT DISTINCT airline FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = 'APG' ) ",
      "SELECT DISTINCT A.airline FROM airlines A JOIN flights F1 ON A.airline = F1.airline JOIN airports A1 ON F1.destairport = A1.airportcode LEFT JOIN flights F2 ON A.airline = F2.airline JOIN airports A2 ON F2.sourceairport = A2.airportcode WHERE A1.city = 'CVO' AND A2.city != 'APG'"
    ],
    "gpt_answers2": [
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline  FROM flights  WHERE sourceairport = 'CVO')  AND airline NOT IN (SELECT airline  FROM flights  WHERE sourceairport = 'APG');",
      "SELECT a.airline FROM airlines a WHERE EXISTS (SELECT 1  FROM flights f  JOIN airports ap ON f.destairport = ap.airportcode  WHERE f.sourceairport = 'CVO'  AND a.airline = f.airline)  AND NOT EXISTS (SELECT 1  FROM flights f  JOIN airports ap ON f.destairport = ap.airportcode  WHERE f.sourceairport = 'APG'  AND a.airline = f.airline); ",
      "SELECT airline FROM airlines WHERE EXISTS (SELECT 1  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE flights.sourceairport = 'CVO'  AND airlines.airline = flights.airline)  AND airline  NOT IN (SELECT airline  FROM flights  WHERE flights.sourceairport = 'APG'); ",
      "SELECT airline FROM airlines WHERE uid IN (SELECT f.uid  FROM flights f  JOIN airports a ON f.destairport = a.airportcode  WHERE f.sourceairport = 'CVO')  AND uid NOT IN (SELECT f.uid  FROM flights f  JOIN airports a ON f.sourceairport = a.airportcode  WHERE f.sourceairport = 'APG'); ",
      "SELECT DISTINCT(airline) FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'CVO'  AND flights.airline NOT IN (SELECT airline  FROM flights  WHERE sourceairport = 'APG'); ",
      "SELECT DISTINCT(airline) FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'CVO'  AND flights.airline NOT IN (SELECT airline  FROM flights  WHERE destairport = 'APG'); ",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline  FROM flights  WHERE sourceairport = 'CVO')  EXCEPT  SELECT airline  FROM flights  WHERE sourceairport = 'APG'; ",
      "SELECT a.airline FROM airlines a JOIN flights f ON a.airline = f.airline JOIN airports ap ON f.destairport = ap.airportcode WHERE f.sourceairport = 'CVO'  AND a.airline NOT IN (SELECT airline  FROM flights  WHERE sourceairport = 'APG'); ",
      "SELECT DISTINCT(a.airline) FROM airlines a JOIN flights f ON a.airline = f.airline JOIN airports ap ON f.destairport = ap.airportcode WHERE f.sourceairport = 'CVO'  AND NOT EXISTS (SELECT 1  FROM flights f2  JOIN airports ap2 ON f2.destairport = ap2.airportcode  WHERE f2.sourceairport = 'APG'  AND a.airline = f2.airline); ",
      "SELECT DISTINCT(airline) FROM airlines JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'CVO'  AND flights.airline NOT IN (SELECT airline  FROM flights  WHERE destairport = 'APG');"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT airline FROM flights WHERE destairport = \"CVO\" AND sourceairport != \"APG\";",
      "SELECT DISTINCT airlines.airline FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE destairport = \"CVO\" AND sourceairport != \"APG\";",
      "SELECT DISTINCT airline FROM flights WHERE destairport = \"CVO\" AND sourceairport NOT IN (SELECT airportcode FROM airports WHERE airportcode = \"APG\");",
      "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE destairport = \"CVO\" AND sourceairport NOT IN (SELECT airportcode FROM airports WHERE airportcode = \"APG\");",
      "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode != \"APG\" AND flights.destairport = \"CVO\";",
      "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE flights.sourceairport != \"APG\" AND flights.destairport = \"CVO\";",
      "SELECT DISTINCT airline FROM flights WHERE destairport = \"CVO\" AND sourceairport NOT IN (SELECT airportcode FROM airports WHERE airportcode = \"APG\" AND city = \"APG\");",
      "SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE destairport = \"CVO\" AND sourceairport NOT IN (SELECT airportcode FROM airports WHERE airportcode = \"APG\" AND city = \"APG\");",
      "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode != \"APG\" AND airports.city != \"APG\" AND flights.destairport = \"CVO\";",
      "SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE flights.sourceairport != \"APG\" AND airports.city != \"APG\" AND flights.destairport = \"CVO\";"
    ]
  },
  {
    "id": 242,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "gpt_answers1": [
      "SELECT DISTINCT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10);",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10);",
      "SELECT DISTINCT airline FROM flights WHERE flightno IN (SELECT flightno FROM flights GROUP BY airline HAVING COUNT(*) >= 10);",
      "SELECT DISTINCT airline FROM flights WHERE flightno IN (SELECT flightno FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10);",
      "SELECT DISTINCT airline FROM flights WHERE flightno IN (SELECT flightno FROM flights GROUP BY airline HAVING COUNT(*) >= 10) GROUP BY airline;",
      "SELECT airline FROM flights WHERE flightno IN (SELECT flightno FROM flights GROUP BY airline HAVING COUNT(*) >= 10) GROUP BY airline;",
      "SELECT DISTINCT airline FROM flights WHERE flightno IN (SELECT flightno FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10) GROUP BY airline;",
      "SELECT airline FROM flights WHERE flightno IN (SELECT flightno FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10) GROUP BY airline;"
    ],
    "gpt_answers2": [
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10; ",
      "SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) >= 10; ",
      "SELECT a.airline  FROM airlines a WHERE EXISTS ( SELECT 1 FROM flights f WHERE f.airline = a.uid GROUP BY f.airline HAVING COUNT(f.flightno) >= 10 ); ",
      "SELECT a.airline  FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline HAVING COUNT(f.flightno) >= 10; ",
      "SELECT airline FROM flights WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10 ); ",
      "SELECT a.airline  FROM airlines a WHERE EXISTS ( SELECT 1 FROM flights f JOIN airports ap ON f.destairport = ap.airportcode OR f.sourceairport = ap.airportcode WHERE f.airline = a.uid GROUP BY f.airline HAVING COUNT(f.flightno) >= 10 ); ",
      "SELECT a.airline  FROM airlines a JOIN ( SELECT f.airline, COUNT(f.flightno) AS num_flights FROM flights f GROUP BY f.airline HAVING COUNT(f.flightno) >= 10 ) AS totals ON a.uid = totals.airline; ",
      "SELECT a.airline  FROM airlines a JOIN ( SELECT airline, COUNT(flightno) AS num_flights FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10 ) AS totals ON a.uid = totals.airline; ",
      "SELECT airline FROM ( SELECT airline, COUNT(flightno) AS num_flights FROM flights GROUP BY airline ) AS totals WHERE num_flights >= 10; ",
      "SELECT a.airline  FROM airlines a JOIN ( SELECT airline, COUNT(flightno) AS num_flights FROM flights GROUP BY airline ) AS totals ON a.uid = totals.airline WHERE totals.num_flights >= 10;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10; ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10; ",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10); ",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10) ORDER BY airline; ",
      "SELECT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10) GROUP BY airline; ",
      "SELECT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10) GROUP BY airline ORDER BY airline; ",
      "SELECT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10) GROUP BY airline HAVING COUNT(*) >= 10; ",
      "SELECT DISTINCT flights.airline FROM flights JOIN (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline) AS subquery ON flights.airline = subquery.airline WHERE subquery.num_flights >= 10; ",
      "SELECT DISTINCT airline FROM flights JOIN (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline HAVING COUNT(*) >= 10) AS subquery ON flights.airline = subquery.airline; ",
      "SELECT DISTINCT airline FROM flights JOIN (SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline HAVING COUNT(*) >= 10) AS subquery ON flights.airline = subquery.airline ORDER BY flights.airline;"
    ]
  },
  {
    "id": 243,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "gpt_answers1": [
      "SELECT airline FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.airline HAVING COUNT(flights.flightno) >= 10; ",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10); ",
      "SELECT DISTINCT airline FROM airlines WHERE uid IN (SELECT airlines.uid FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.uid HAVING COUNT(flights.flightno) >= 10); ",
      "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.airline HAVING COUNT(DISTINCT flights.flightno) >= 10; ",
      "SELECT airline FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.airline, airline HAVING COUNT(DISTINCT flights.flightno) >= 10; ",
      "SELECT airline FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.airline HAVING COUNT(DISTINCT flights.flightno || flights.sourceairport || flights.destairport) >= 10; ",
      "SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.uid GROUP BY airlines.airline HAVING COUNT(flights.flightno) >= 10; ",
      "SELECT airline FROM airlines WHERE EXISTS (SELECT 1 FROM flights WHERE airlines.airline = flights.airline GROUP BY airline HAVING COUNT(flightno) >= 10); ",
      "SELECT DISTINCT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.uid GROUP BY airlines.airline HAVING COUNT(DISTINCT flights.flightno) >= 10; ",
      "SELECT airlines.airline FROM airlines WHERE EXISTS (SELECT 1 FROM flights WHERE airlines.airline = flights.airline GROUP BY airline HAVING COUNT(flights.flightno) >= 10);"
    ],
    "gpt_answers2": [
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10; ",
      "SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10 ); ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10; ",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(DISTINCT flightno) >= 10; ",
      "SELECT A.airline FROM ( SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ) A WHERE A.flight_count >= 10; ",
      "SELECT airline FROM ( SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ) AS A WHERE A.flight_count >= 10; ",
      "SELECT DISTINCT airline FROM flights WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10 ); ",
      "SELECT DISTINCT airline FROM flights WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(DISTINCT flightno) >= 10 ); ",
      "SELECT DISTINCT airline FROM flights WHERE airline IN ( SELECT A.airline FROM ( SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ) A WHERE A.flight_count >= 10 ); ",
      "SELECT DISTINCT airline FROM ( SELECT airline, COUNT(*) OVER (PARTITION BY airline) AS flight_count FROM flights ) A WHERE A.flight_count >= 10;"
    ],
    "gpt_answers3": [
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10;",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;",
      "SELECT airline FROM flights GROUP BY airline, flightno HAVING COUNT(*) >= 10;",
      "SELECT DISTINCT airline FROM flights WHERE (SELECT COUNT(*) FROM flights f WHERE f.airline = flights.airline) >= 10;",
      "SELECT DISTINCT airline FROM flights WHERE EXISTS (SELECT * FROM flights f GROUP BY f.airline HAVING COUNT(*) >= 10);",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10);",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10);",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights HAVING COUNT(*) >= 10);",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights WHERE (SELECT COUNT(*) FROM flights WHERE airline = flights.airline) >= 10);",
      "SELECT DISTINCT flights.airline FROM flights INNER JOIN (SELECT airline, COUNT(*) AS cnt FROM flights GROUP BY airline) AS sub ON flights.airline = sub.airline WHERE sub.cnt >= 10;"
    ]
  },
  {
    "id": 244,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "gpt_answers1": [
      "SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline HAVING num_flights < 200;",
      "SELECT DISTINCT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;",
      "SELECT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT airline FROM flights WHERE airline NOT IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 200);",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT DISTINCT airline FROM flights WHERE airline NOT IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 200);",
      "SELECT DISTINCT airline FROM flights INNER JOIN (SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline) AS subquery ON flights.airline = subquery.airline WHERE subquery.num_flights < 200;",
      "SELECT airline FROM flights INNER JOIN (SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline HAVING COUNT(*) < 200) AS subquery ON flights.airline = subquery.airline;",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT DISTINCT airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.airline HAVING COUNT(*) < 200;"
    ],
    "gpt_answers2": [
      "SELECT airline  FROM airlines  WHERE airline IN (SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200); ",
      "SELECT a.airline  FROM airlines a  WHERE NOT EXISTS (SELECT f.airline  FROM flights f  WHERE f.airline = a.airline  GROUP BY f.airline  HAVING COUNT(*) >= 200); ",
      "SELECT DISTINCT a.airline  FROM airlines a  JOIN flights f ON a.airline = f.airline  GROUP BY a.airline  HAVING COUNT(*) < 200; ",
      "SELECT airline  FROM airlines  WHERE airline NOT IN (SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) >= 200); ",
      "SELECT a.airline  FROM airlines a  INNER JOIN flights f ON a.airline = f.airline  GROUP BY a.airline  HAVING COUNT(*) < 200; ",
      "SELECT a.airline  FROM airlines a  LEFT JOIN flights f ON a.airline = f.airline  GROUP BY a.airline  HAVING COUNT(*) < 200  UNION  SELECT airline  FROM airlines  WHERE airline NOT IN (SELECT airline  FROM flights); ",
      "SELECT a.airline  FROM airlines a  WHERE (SELECT COUNT(*)  FROM flights f  WHERE f.airline = a.airline) < 200; ",
      "SELECT a.airline  FROM airlines a  LEFT JOIN flights f ON a.airline = f.airline  GROUP BY a.airline  HAVING COUNT(f.flightno) < 200; ",
      "SELECT a.airline  FROM airlines a  INNER JOIN flights f ON a.airline = f.airline  GROUP BY a.airline  HAVING COUNT(DISTINCT f.flightno) < 200; ",
      "SELECT airline  FROM airlines  WHERE uid IN (SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200);"
    ],
    "gpt_answers3": [
      "SELECT airline FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airline HAVING COUNT(*) < 200; ",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200); ",
      "SELECT DISTINCT airline FROM airlines WHERE airline IN (SELECT DISTINCT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200); ",
      "SELECT DISTINCT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) < 200); ",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.airline HAVING COUNT(flights.flightno) < 200; ",
      "SELECT * FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) < 200); ",
      "SELECT airline FROM airlines WHERE EXISTS (SELECT airline FROM flights WHERE airlines.airline = flights.airline GROUP BY airline HAVING COUNT(*) < 200); ",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(DISTINCT flightno) < 200); ",
      "SELECT DISTINCT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(DISTINCT flightno) < 200); ",
      "SELECT airline FROM airlines WHERE abbreviation IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);"
    ]
  },
  {
    "id": 245,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "gpt_answers1": [
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT DISTINCT airline FROM flights WHERE airline NOT IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 200);",
      "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200 ORDER BY airline;",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.airline HAVING COUNT(*) < 200;",
      "SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline GROUP BY airlines.airline HAVING COUNT(*) < (SELECT COUNT(*) FROM flights WHERE airline = airlines.airline);",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY airline) AS subquery));",
      "SELECT airlines.airline FROM airlines WHERE airlines.airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM (SELECT airline, COUNT(*) FROM flights GROUP BY airline) WHERE COUNT(*) < 200);",
      "SELECT airlines.airline FROM airlines WHERE airlines.airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < (SELECT COUNT(*) FROM flights GROUP BY airline ORDER BY COUNT(*) LIMIT 1));"
    ],
    "gpt_answers2": [
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT DISTINCT airline FROM flights WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT airline FROM airlines WHERE uid IN (SELECT uid FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200));",
      "SELECT airline FROM airlines WHERE EXISTS (SELECT airline FROM flights WHERE airline = airlines.airline GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT airline FROM airlines WHERE abbreviation IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT a.airline FROM airlines a JOIN flights f ON a.airline = f.airline GROUP BY a.airline HAVING COUNT(*) < 200;",
      "SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200) GROUP BY airline;",
      "SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.airline = f.airline WHERE a.airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);",
      "SELECT airline FROM airlines WHERE EXISTS (SELECT airline FROM flights WHERE airline = airlines.airline GROUP BY airline HAVING COUNT(*) < 200) GROUP BY airline;",
      "SELECT airline FROM airlines WHERE uid IN (SELECT uid FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200)) GROUP BY airline;"
    ],
    "gpt_answers3": [
      "SELECT airline  FROM airlines  WHERE airline IN ( SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200 ); ",
      "SELECT airlines.airline  FROM airlines  INNER JOIN flights ON airlines.airline = flights.airline  GROUP BY airlines.airline  HAVING COUNT(*) < 200; ",
      "SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200; ",
      "SELECT airline  FROM airlines  WHERE abbreviation IN ( SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200 ); ",
      "SELECT DISTINCT airline  FROM airlines  WHERE airline IN ( SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200 ); ",
      "SELECT airline  FROM flights  WHERE airline IN ( SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200 ) GROUP BY airline; ",
      "SELECT DISTINCT airline  FROM airlines  WHERE airline IN ( SELECT airline  FROM flights  WHERE airline IS NOT NULL GROUP BY airline  HAVING COUNT(*) < 200 ); ",
      "SELECT airlines.airline  FROM airlines  INNER JOIN flights ON airlines.airline = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) < 200; ",
      "SELECT DISTINCT airline  FROM flights  WHERE airline IN ( SELECT airline  FROM flights  WHERE airline IS NOT NULL GROUP BY airline  HAVING COUNT(*) < 200 ); ",
      "SELECT DISTINCT airline  FROM airlines  WHERE airline IN ( SELECT airline  FROM flights  GROUP BY airline  HAVING COUNT(*) < 200 );"
    ]
  },
  {
    "id": 246,
    "db_id": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "gpt_answers1": [
      "SELECT flightno  FROM flights  WHERE airline = \"United Airlines\"; ",
      "SELECT flightno  FROM flights  INNER JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.airline = \"United Airlines\"; ",
      "SELECT flightno  FROM flights  WHERE airline IN (SELECT airline  FROM airlines  WHERE airline = \"United Airlines\"); ",
      "SELECT flightno  FROM flights, airlines  WHERE flights.airline = airlines.airline  AND airlines.airline = \"United Airlines\"; ",
      "SELECT flightno  FROM flights  WHERE airline = (SELECT airline  FROM airlines  WHERE airline = \"United Airlines\"); ",
      "SELECT flightno  FROM flights  WHERE airline LIKE \"%United Airlines%\"; ",
      "SELECT flightno  FROM flights  WHERE airline = \"United Airlines\"; ",
      "SELECT flightno  FROM flights  WHERE airline = \"United Airlines\" COLLATE NOCASE; ",
      "SELECT flightno  FROM flights  WHERE UPPER(airline) = \"UNITED AIRLINES\"; ",
      "SELECT flightno  FROM flights  WHERE LOWER(airline) = \"united airlines\";"
    ],
    "gpt_answers2": [
      "SELECT flightno  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.airline = \"United Airlines\" ",
      "SELECT flightno  FROM flights  WHERE airline = ( SELECT abbreviation  FROM airlines  WHERE airline = \"United Airlines\" ) ",
      "SELECT flightno  FROM flights  WHERE airline IN ( SELECT airline  FROM airlines  WHERE airline = \"United Airlines\" ) ",
      "SELECT flightno  FROM flights  WHERE EXISTS ( SELECT *  FROM airlines  WHERE airline = \"United Airlines\" AND flights.airline = airlines.abbreviation ) ",
      "SELECT flightno  FROM flights  WHERE airline = ( SELECT abbreviation  FROM airlines  WHERE airline = \"United Airlines\" ) AND airline = ( SELECT airline  FROM airlines  WHERE airline = \"United Airlines\" ) ",
      "SELECT flightno  FROM flights  JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.airline = \"United Airlines\" ",
      "SELECT flightno  FROM flights  JOIN airlines ON flights.airline = airlines.airline  WHERE airlines.abbreviation = \"UA\" ",
      "SELECT flightno  FROM flights, airlines  WHERE flights.airline = airlines.abbreviation AND airlines.airline = \"United Airlines\" ",
      "SELECT flightno  FROM flights  WHERE airline = ( SELECT abbreviation  FROM airlines  WHERE airline = \"United Airlines\" ) AND ( SELECT airline  FROM airlines  WHERE airline = \"United Airlines\" ) = \"United Airlines\" ",
      "SELECT flightno  FROM flights  WHERE airline = ( SELECT abbreviation  FROM airlines  WHERE airline = \"United Airlines\" ) OR ( SELECT airline  FROM airlines  WHERE airline = \"United Airlines\" ) = \"United Airlines\""
    ],
    "gpt_answers3": [
      "SELECT flightno FROM flights WHERE airline = \"United Airlines\";",
      "SELECT flightno FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = \"United Airlines\";",
      "SELECT flightno FROM flights f, airlines a WHERE f.airline = a.airline AND a.airline = \"United Airlines\";",
      "SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.airline AND airlines.airline = \"United Airlines\";",
      "SELECT f.flightno FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.airline = \"United Airlines\";",
      "SELECT f.flightno FROM flights f, airlines a WHERE f.airline = a.airline AND a.airline = 'United Airlines';",
      "SELECT f.flightno FROM flights f INNER JOIN airlines a ON f.airline = a.airline WHERE a.airline = \"United Airlines\";",
      "SELECT f.flightno FROM flights f, airlines a WHERE f.airline = a.airline AND a.airline = \"United Airlines\";",
      "SELECT flightno FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = \"United Airlines\");",
      "SELECT f.flightno FROM flights AS f INNER JOIN airlines AS a ON f.airline = a.airline WHERE a.airline = \"United Airlines\";"
    ]
  },
  {
    "id": 247,
    "db_id": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "gpt_answers1": [
      "SELECT flightno FROM flights WHERE airline = 'United Airlines';",
      "SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines';",
      "SELECT flightno FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = 'United Airlines');",
      "SELECT flights.flightno FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = 'United Airlines';",
      "SELECT flightno FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airline = 'United Airlines');",
      "SELECT flightno FROM flights WHERE airline LIKE 'United Airlines';",
      "SELECT flights.flightno FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines';",
      "SELECT flightno FROM flights WHERE airline = (SELECT abbreviation FROM airlines WHERE airline = 'United Airlines');",
      "SELECT flightno FROM flights NATURAL JOIN airlines WHERE airlines.airline = 'United Airlines';",
      "SELECT flightno FROM flights JOIN airlines USING (airline) WHERE airlines.airline = 'United Airlines';"
    ],
    "gpt_answers2": [
      "SELECT flightno FROM flights WHERE airline = 'United Airlines';",
      "SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = 'UA';",
      "SELECT flightno FROM flights WHERE airline IN (SELECT airline FROM airlines WHERE airline = 'United Airlines');",
      "SELECT f.flightno FROM flights AS f INNER JOIN airlines AS a ON f.airline = a.airline WHERE a.airline = 'United Airlines';",
      "SELECT flightno FROM flights WHERE airline = (SELECT airline FROM airlines WHERE airline = 'United Airlines');",
      "SELECT flightno FROM flights WHERE airline = 'United Airlines' AND flights.airline = airlines.airline;",
      "SELECT f.flightno FROM flights AS f JOIN airlines AS a ON f.airline = a.airline WHERE a.airline = 'United Airlines';",
      "SELECT flightno FROM flights WHERE airline = ANY (SELECT airline FROM airlines WHERE airline = 'United Airlines');",
      "SELECT flightno FROM flights WHERE airline = 'United Airlines' AND EXISTS (SELECT * FROM airlines WHERE airline = 'United Airlines');",
      "SELECT flightno FROM flights WHERE EXISTS (SELECT * FROM airlines WHERE airline = 'United Airlines' AND flights.airline = airlines.airline);"
    ],
    "gpt_answers3": [
      "SELECT flightno FROM flights WHERE airline = 'United Airlines'",
      "SELECT flightno FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines'",
      "SELECT flights.flightno FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = 'United Airlines'",
      "SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines'",
      "SELECT flightno FROM flights, airlines WHERE flights.airline = 'United Airlines' AND flights.airline = airlines.airline",
      "SELECT flightno FROM flights INNER JOIN airlines ON flights.airline = airlines.airline AND airlines.airline = 'United Airlines'",
      "SELECT flightno FROM flights INNER JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines'",
      "SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.airline AND airlines.airline = 'United Airlines'",
      "SELECT flightno FROM flights, airlines WHERE flights.airline = 'United Airlines' AND flights.airline = airlines.airline",
      "SELECT flightno FROM flights, airlines WHERE flights.airline = airlines.airline AND airlines.airline = 'United Airlines'"
    ]
  },
  {
    "id": 253,
    "db_id": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT f.flightno FROM flights AS f INNER JOIN airports AS a ON f.sourceairport = a.airportcode WHERE a.city = \"Aberdeen\";",
      "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = \"Aberdeen\";",
      "SELECT f.flightno FROM flights f, airports a WHERE f.sourceairport = a.airportcode AND a.city = \"Aberdeen\";",
      "SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT flightno FROM flights WHERE sourceairport = ANY (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT flightno FROM flights WHERE EXISTS (SELECT * FROM airports WHERE airports.airportcode = flights.sourceairport AND airports.city = \"Aberdeen\");",
      "SELECT f.flightno FROM flights f, airports a WHERE f.sourceairport = a.airportcode AND a.city = \"Aberdeen\";",
      "SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\") LIMIT 10;",
      "SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = \"Aberdeen\") LIMIT 10;"
    ],
    "gpt_answers2": [
      "SELECT flightno FROM flights LEFT JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = \"Aberdeen\";",
      "SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = \"Aberdeen\";",
      "SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = \"Aberdeen\");",
      "SELECT flightno FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = \"Aberdeen\";",
      "SELECT flightno FROM flights WHERE sourceairport = ANY (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT flightno FROM flights WHERE sourceairport = SOME (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') UNION SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');",
      "SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') INTERSECT SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');"
    ],
    "gpt_answers3": [
      "SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT flightno FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'; ",
      "SELECT f.flightno FROM flights f, airports a WHERE f.sourceairport = a.airportcode AND a.city = 'Aberdeen'; ",
      "SELECT flightno FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT flightno FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen' GROUP BY flightno; ",
      "SELECT DISTINCT flightno FROM flights, airports WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'; ",
      "SELECT flightno FROM flights JOIN airports USING (sourceairport) WHERE city = 'Aberdeen'; ",
      "SELECT flightno FROM flights WHERE sourceairport = ANY (SELECT airportcode FROM airports WHERE city = 'Aberdeen');"
    ]
  },
  {
    "id": 255,
    "db_id": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'; ",
      "SELECT flightno FROM flights, airports WHERE flights.destairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT flights.flightno FROM flights, airports WHERE flights.destairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT flights.flightno FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'; ",
      "SELECT flights.flightno FROM flights LEFT JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'; ",
      "SELECT flights.flightno FROM flights RIGHT JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'; ",
      "SELECT flights.flightno FROM flights CROSS JOIN airports WHERE flights.destairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT flights.flightno FROM flights NATURAL JOIN airports WHERE airports.city = 'Aberdeen'; ",
      "SELECT flights.flightno FROM flights WHERE EXISTS (SELECT 1 FROM airports WHERE airports.city = 'Aberdeen' AND flights.destairport = airports.airportcode);"
    ],
    "gpt_answers2": [
      "SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\"); ",
      "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = \"Aberdeen\"; ",
      "SELECT flightno FROM flights, airports WHERE flights.destairport = airports.airportcode AND airports.city = \"Aberdeen\"; ",
      "SELECT flightno FROM flights WHERE flights.destairport IN (SELECT airportcode FROM airports WHERE city = \"Aberdeen\"); ",
      "SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = \"Aberdeen\"; ",
      "SELECT f.flightno FROM flights f, airports a WHERE f.destairport = a.airportcode AND a.city = \"Aberdeen\"; ",
      "SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen'); ",
      "SELECT flightno FROM flights, airports WHERE flights.destairport = airports.airportcode AND airports.city = 'Aberdeen'; ",
      "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'; ",
      "SELECT flightno FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen';"
    ],
    "gpt_answers3": [
      "SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = \"Aberdeen\";",
      "SELECT flightno FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = \"Aberdeen\");",
      "SELECT flights.flightno FROM flights, airports WHERE flights.destairport = airports.airportcode AND airports.city = \"Aberdeen\";",
      "SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');",
      "SELECT flightno FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';",
      "SELECT flightno FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');",
      "SELECT flights.flightno FROM flights, airports WHERE flights.destairport = airports.airportcode AND airports.city = 'Aberdeen';",
      "SELECT flightno FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');",
      "SELECT f.flightno FROM flights AS f, airports AS a WHERE f.destairport = a.airportcode AND a.city = 'Aberdeen';"
    ]
  },
  {
    "id": 259,
    "db_id": "flight_2",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "gpt_answers1": [
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights)  AND airportcode NOT IN (SELECT destairport FROM flights); ",
      "SELECT airportname FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport WHERE flights.sourceairport IS NULL AND flights.destairport IS NULL; ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights); ",
      "SELECT airportname FROM airports WHERE NOT EXISTS (SELECT 1 FROM flights WHERE flights.sourceairport = airports.airportcode OR flights.destairport = airports.airportcode); ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights)  OR airportcode NOT IN (SELECT destairport FROM flights); ",
      "SELECT airportname FROM airports WHERE NOT EXISTS (SELECT 1 FROM flights WHERE flights.sourceairport = airports.airportcode)  AND NOT EXISTS (SELECT 1 FROM flights WHERE flights.destairport = airports.airportcode); ",
      "SELECT airportname FROM airports WHERE NOT EXISTS (SELECT 1 FROM flights WHERE flights.sourceairport = airports.airportcode AND flights.destairport = airports.airportcode); ",
      "SELECT airportname FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport OR airports.airportcode = flights.destairport WHERE flights.sourceairport IS NULL  AND flights.destairport IS NULL; ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights JOIN airports ON flights.sourceairport = airports.airportcode)  AND airportcode NOT IN (SELECT destairport FROM flights JOIN airports ON flights.destairport = airports.airportcode); ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT flights.sourceairport FROM flights JOIN airports ON flights.sourceairport = airports.airportcode UNION SELECT flights.destairport FROM flights JOIN airports ON flights.destairport = airports.airportcode);"
    ],
    "gpt_answers2": [
      "SELECT airportname FROM airports WHERE airportname NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights); ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights); ",
      "SELECT airportname FROM airports WHERE NOT EXISTS (SELECT sourceairport FROM flights WHERE sourceairport = airports.airportcode) AND NOT EXISTS (SELECT destairport FROM flights WHERE destairport = airports.airportcode); ",
      "SELECT airportname FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport WHERE flights.sourceairport IS NULL; ",
      "SELECT airportname FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport WHERE flights.sourceairport IS NULL UNION SELECT airportname FROM airports LEFT JOIN flights ON airports.airportcode = flights.destairport WHERE flights.destairport IS NULL; ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights WHERE sourceairport IS NOT NULL) OR airportcode NOT IN (SELECT destairport FROM flights WHERE destairport IS NOT NULL); ",
      "SELECT airportname FROM airports WHERE NOT EXISTS (SELECT * FROM flights WHERE sourceairport = airports.airportcode OR destairport = airports.airportcode); ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights); ",
      "SELECT airportname FROM airports EXCEPT (SELECT airportname FROM airports INNER JOIN flights ON airports.airportcode = flights.sourceairport UNION SELECT airportname FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport); ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) INTERSECT SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights);"
    ],
    "gpt_answers3": [
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights); ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT DISTINCT sourceairport FROM flights) AND airportcode NOT IN (SELECT DISTINCT destairport FROM flights); ",
      "SELECT airportname  FROM airports  LEFT JOIN flights ON airports.airportcode = flights.sourceairport OR airports.airportcode = flights.destairport WHERE flights.sourceairport IS NULL AND flights.destairport IS NULL; ",
      "SELECT airportname  FROM airports  LEFT JOIN flights ON airports.airportcode = flights.sourceairport  WHERE flights.sourceairport IS NULL  UNION  SELECT airportname  FROM airports  LEFT JOIN flights ON airports.airportcode = flights.destairport  WHERE flights.destairport IS NULL; ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights WHERE sourceairport IS NOT NULL) AND airportcode NOT IN (SELECT destairport FROM flights WHERE destairport IS NOT NULL); ",
      "SELECT airportname FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport WHERE flights.sourceairport IS NULL AND flights.destairport IS NULL; ",
      "SELECT airportname FROM airports LEFT JOIN flights ON airports.airportcode = flights.destairport WHERE flights.destairport IS NULL AND flights.sourceairport IS NULL; ",
      "SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights); ",
      "SELECT airportname  FROM airports  WHERE NOT EXISTS (SELECT * FROM flights WHERE sourceairport = airports.airportcode) AND NOT EXISTS (SELECT * FROM flights WHERE destairport = airports.airportcode); ",
      "SELECT airportname  FROM airports  WHERE NOT EXISTS (SELECT * FROM flights WHERE sourceairport = airports.airportcode OR destairport = airports.airportcode);"
    ]
  },
  {
    "id": 278,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT name FROM employee WHERE employee_id = ( SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT name FROM ( SELECT employee_id, COUNT(*) as num_awards FROM evaluation GROUP BY employee_id ORDER BY num_awards DESC LIMIT 1 ) as max_awards JOIN employee ON max_awards.employee_id = employee.employee_id; ",
      "SELECT name FROM employee WHERE employee_id IN ( SELECT employee_id FROM evaluation GROUP BY employee_id HAVING COUNT(*) = ( SELECT COUNT(*) FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1 ) ); ",
      "SELECT name FROM employee WHERE employee_id = ( SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1 ) ORDER BY employee_id; ",
      "SELECT name FROM employee WHERE employee_id = ( SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY ); ",
      "SELECT name FROM employee WHERE employee_id IN ( SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC ) LIMIT 1; ",
      "SELECT name FROM employee WHERE employee_id = ( SELECT employee_id FROM evaluation GROUP BY employee_id HAVING COUNT(*) = ( SELECT MAX(cnt) FROM ( SELECT COUNT(*) as cnt FROM evaluation GROUP BY employee_id ) ) ); ",
      "SELECT name FROM employee ORDER BY ( SELECT COUNT(*) FROM evaluation WHERE employee.employee_id = evaluation.employee_id GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1 ) LIMIT 1; ",
      "SELECT name FROM employee WHERE employee_id = ( SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC, employee_id DESC LIMIT 1 ); ",
      "SELECT name FROM ( SELECT *, ROW_NUMBER() OVER (ORDER BY num_awards DESC) as rn FROM ( SELECT employee.employee_id, name, COUNT(*) as num_awards FROM employee INNER JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id, name ORDER BY num_awards DESC ) ) WHERE rn = 1;"
    ],
    "gpt_answers2": [
      "SELECT employee.name FROM employee JOIN evaluation ON evaluation.employee_id = employee.employee_id GROUP BY employee.name ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1; ",
      "SELECT e.name FROM ( SELECT e.name, COUNT(*) AS awards_count FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ) AS emp ORDER BY emp.awards_count DESC LIMIT 1; ",
      "SELECT name FROM ( SELECT name, ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn FROM employee JOIN evaluation ON evaluation.employee_id = employee.employee_id GROUP BY name ) AS emp WHERE rn = 1; ",
      "SELECT e.name FROM employee e WHERE e.employee_id = ( SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT e.name FROM employee e JOIN ( SELECT employee_id, COUNT(*) AS awards_count FROM evaluation GROUP BY employee_id ) AS ev ON ev.employee_id = e.employee_id ORDER BY ev.awards_count DESC LIMIT 1; ",
      "SELECT name FROM employee WHERE employee_id = ( SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT e.name FROM employee e JOIN ( SELECT employee_id, COUNT(*) AS awards_count FROM evaluation GROUP BY employee_id HAVING COUNT(*) = ( SELECT COUNT(*) AS max_count FROM evaluation GROUP BY employee_id ORDER BY max_count DESC LIMIT 1 ) ) AS ev ON ev.employee_id = e.employee_id; ",
      "SELECT e.name FROM employee e JOIN evaluation ev ON ev.employee_id = e.employee_id GROUP BY e.name HAVING COUNT(*) = ( SELECT COUNT(*) AS max_count FROM evaluation GROUP BY employee_id ORDER BY max_count DESC LIMIT 1 ); ",
      "SELECT name FROM employee WHERE employee_id IN ( SELECT employee_id FROM evaluation GROUP BY employee_id HAVING COUNT(*) = ( SELECT COUNT(*) AS max_count FROM evaluation GROUP BY employee_id ORDER BY max_count DESC LIMIT 1 ) ); ",
      "SELECT e.name FROM ( SELECT e.name, COUNT(*) AS awards_count FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY awards_count DESC LIMIT 1 ) AS emp;"
    ],
    "gpt_answers3": [
      "SELECT e.name  FROM employee e  JOIN evaluation ev ON e.employee_id = ev.employee_id  GROUP BY e.employee_id  ORDER BY COUNT(ev.year_awarded) DESC  LIMIT 1; ",
      "SELECT e.name  FROM employee e  LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id  GROUP BY e.employee_id  ORDER BY COUNT(ev.year_awarded) DESC  LIMIT 1; ",
      "SELECT name  FROM employee  WHERE employee_id = ( SELECT employee_id  FROM evaluation  GROUP BY employee_id  ORDER BY COUNT(year_awarded) DESC  LIMIT 1 ); ",
      "SELECT e.name  FROM employee e  JOIN ( SELECT employee_id, COUNT(year_awarded) AS awards  FROM evaluation  GROUP BY employee_id  ORDER BY awards DESC  LIMIT 1 ) AS ev ON e.employee_id = ev.employee_id; ",
      "SELECT name  FROM employee  WHERE employee_id = ( SELECT employee_id  FROM ( SELECT employee_id, COUNT(year_awarded) AS awards  FROM evaluation  GROUP BY employee_id  ORDER BY awards DESC  LIMIT 1 ) ); ",
      "SELECT employee.name  FROM employee JOIN ( SELECT employee_id, COUNT(*) AS count FROM evaluation GROUP BY employee_id HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT employee_id, COUNT(*) AS count FROM evaluation GROUP BY employee_id ) ) ) ON employee.employee_id = evaluation.employee_id ",
      "SELECT e.name  FROM employee e  INNER JOIN ( SELECT employee_id, COUNT(*) AS award_count  FROM evaluation  GROUP BY employee_id  HAVING COUNT(*) = ( SELECT MAX(award_count)  FROM ( SELECT employee_id, COUNT(*) AS award_count  FROM evaluation  GROUP BY employee_id  ) )  ) AS ev ON e.employee_id = ev.employee_id; ",
      "SELECT name  FROM employee  WHERE employee_id IN ( SELECT employee_id  FROM evaluation  GROUP BY employee_id  ORDER BY COUNT(year_awarded) DESC  LIMIT 1 ); ",
      "SELECT e.name  FROM employee e  INNER JOIN ( SELECT employee_id, COUNT(year_awarded) AS awards_count  FROM evaluation  GROUP BY employee_id  ORDER BY awards_count DESC  LIMIT 1 ) AS ev ON e.employee_id = ev.employee_id; ",
      "SELECT e.name  FROM employee e  JOIN ( SELECT employee_id  FROM evaluation  GROUP BY employee_id  ORDER BY COUNT(*) DESC  LIMIT 1 ) AS ev ON e.employee_id = ev.employee_id;"
    ]
  },
  {
    "id": 279,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT name FROM employee WHERE employee_id = (SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(year_awarded) DESC LIMIT 1); ",
      "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1; ",
      "SELECT e.name FROM (SELECT employee_id, COUNT(year_awarded) AS award_count FROM evaluation GROUP BY employee_id ORDER BY award_count DESC LIMIT 1) AS max_awards JOIN employee AS e ON max_awards.employee_id = e.employee_id; ",
      "SELECT e.name FROM employee AS e JOIN (SELECT employee_id, COUNT(year_awarded) AS award_count FROM evaluation GROUP BY employee_id ORDER BY award_count DESC LIMIT 1) AS max_awards ON e.employee_id = max_awards.employee_id; ",
      "SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(year_awarded) DESC LIMIT 1); ",
      "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id HAVING COUNT(evaluation.year_awarded) = (SELECT MAX(award_count) FROM (SELECT COUNT(year_awarded) AS award_count FROM evaluation GROUP BY employee_id) AS max_awards); ",
      "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id HAVING COUNT(evaluation.year_awarded) = (SELECT COUNT(year_awarded) AS award_count FROM evaluation GROUP BY employee_id ORDER BY award_count DESC LIMIT 1); ",
      "SELECT name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id HAVING COUNT(year_awarded) = (SELECT MAX(count) FROM (SELECT employee_id, COUNT(year_awarded) AS count FROM evaluation GROUP BY employee_id) AS counts); ",
      "SELECT name FROM (SELECT e.name, COUNT(evaluation.year_awarded) AS award_count FROM employee AS e JOIN evaluation ON e.employee_id = evaluation.employee_id GROUP BY e.employee_id) AS employee_awards ORDER BY award_count DESC LIMIT 1; ",
      "SELECT name FROM (SELECT employee.name, COUNT(evaluation.year_awarded) AS award_count FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY award_count DESC LIMIT 1) AS max_awards;"
    ],
    "gpt_answers2": [
      "SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  GROUP BY employee.employee_id  ORDER BY COUNT(evaluation.year_awarded) DESC  LIMIT 1 ",
      "SELECT employee.name  FROM employee  WHERE employee.employee_id = ( SELECT employee_id  FROM evaluation  GROUP BY employee_id  ORDER BY COUNT(year_awarded) DESC  LIMIT 1 ) ",
      "SELECT name  FROM employee  WHERE employee_id = ( SELECT employee_id  FROM evaluation  GROUP BY employee_id  HAVING COUNT(year_awarded) = ( SELECT MAX(total_awards)  FROM ( SELECT employee_id, COUNT(year_awarded) AS total_awards  FROM evaluation  GROUP BY employee_id ) ) ) ",
      "SELECT name  FROM employee  WHERE employee_id = ( SELECT employee_id  FROM evaluation  GROUP BY employee_id  ORDER BY COUNT(year_awarded) DESC  LIMIT 1 OFFSET 0 ) ",
      "SELECT employee.name  FROM evaluation  JOIN employee ON evaluation.employee_id = employee.employee_id  GROUP BY employee.employee_id  HAVING COUNT(evaluation.year_awarded) = ( SELECT COUNT(year_awarded)  FROM evaluation  GROUP BY employee_id  ORDER BY COUNT(year_awarded) DESC  LIMIT 1 ) ",
      "SELECT name  FROM employee  WHERE employee_id = ( SELECT employee_id  FROM evaluation  GROUP BY employee_id  ORDER BY COUNT(*) DESC  LIMIT 1 ) ",
      "SELECT name  FROM evaluation AS e  JOIN employee AS emp ON e.employee_id = emp.employee_id  GROUP BY e.employee_id, emp.name  HAVING COUNT(e.year_awarded) = ( SELECT MAX(count_awards)  FROM ( SELECT employee_id, COUNT(year_awarded) AS count_awards  FROM evaluation  GROUP BY employee_id ) ) ",
      "SELECT name  FROM employee  WHERE employee_id = ( SELECT employee_id  FROM ( SELECT employee_id, COUNT(year_awarded)  FROM evaluation  GROUP BY employee_id  ORDER BY COUNT(year_awarded) DESC  LIMIT 1 ) ) ",
      "SELECT employee.name  FROM employee  WHERE employee.employee_id = (  SELECT evaluation.employee_id  FROM evaluation  GROUP BY evaluation.employee_id  HAVING COUNT(evaluation.year_awarded) = ( SELECT MAX(count_awards)  FROM ( SELECT employee_id, COUNT(year_awarded) AS count_awards  FROM evaluation  GROUP BY employee_id ) ) ) ",
      "SELECT name  FROM employee  WHERE employee_id = ( SELECT employee_id  FROM ( SELECT employee_id, COUNT(year_awarded)  FROM evaluation  GROUP BY employee_id  HAVING COUNT(year_awarded) = ( SELECT MAX(count_awards)  FROM ( SELECT employee_id, COUNT(year_awarded) AS count_awards  FROM evaluation  GROUP BY employee_id ) ) ) ) "
    ],
    "gpt_answers3": [
      "SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1; ",
      "SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id HAVING COUNT(ev.year_awarded) = (SELECT MAX(num_awards) FROM (SELECT COUNT(year_awarded) AS num_awards FROM evaluation GROUP BY employee_id) AS subquery); ",
      "SELECT e.name FROM employee e, evaluation ev WHERE e.employee_id = ev.employee_id GROUP BY e.employee_id HAVING COUNT(ev.year_awarded) = (SELECT MAX(num_awards) FROM (SELECT COUNT(year_awarded) AS num_awards FROM evaluation GROUP BY employee_id) AS subquery); ",
      "SELECT e.name FROM employee e JOIN (SELECT employee_id, COUNT(year_awarded) AS num_awards FROM evaluation GROUP BY employee_id) AS ev ON e.employee_id = ev.employee_id WHERE ev.num_awards = (SELECT MAX(num_awards) FROM (SELECT COUNT(year_awarded) AS num_awards FROM evaluation GROUP BY employee_id) AS subquery); ",
      "SELECT e.name FROM employee e WHERE e.employee_id = (SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(year_awarded) DESC LIMIT 1); ",
      "SELECT e.name FROM employee e WHERE e.employee_id IN (SELECT employee_id FROM evaluation GROUP BY employee_id HAVING COUNT(year_awarded) = (SELECT MAX(num_awards) FROM (SELECT COUNT(year_awarded) AS num_awards FROM evaluation GROUP BY employee_id) AS subquery)); ",
      "SELECT e.name FROM employee e WHERE EXISTS (SELECT 1 FROM evaluation ev WHERE e.employee_id = ev.employee_id GROUP BY employee_id HAVING COUNT(year_awarded) = (SELECT MAX(num_awards) FROM (SELECT COUNT(year_awarded) AS num_awards FROM evaluation GROUP BY employee_id) AS subquery)); ",
      "SELECT e.name FROM employee e WHERE e.employee_id = (SELECT employee_id FROM evaluation GROUP BY employee_id HAVING COUNT(year_awarded) = MAX(COUNT(year_awarded)) LIMIT 1); ",
      "SELECT e.name FROM employee e, evaluation ev WHERE e.employee_id = ev.employee_id GROUP BY e.employee_id ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1; ",
      "SELECT e.name FROM (SELECT e.name, COUNT(ev.year_awarded) AS num_awards FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id) AS subquery WHERE subquery.num_awards = (SELECT MAX(num_awards) FROM (SELECT COUNT(year_awarded) AS num_awards FROM evaluation GROUP BY employee_id) AS subquery);"
    ]
  },
  {
    "id": 284,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT shop.name  FROM shop  JOIN hiring ON shop.shop_id = hiring.shop_id  GROUP BY shop.shop_id  ORDER BY COUNT(hiring.employee_id) DESC  LIMIT 1; ",
      "SELECT s.name  FROM shop s  INNER JOIN hiring h ON s.shop_id = h.shop_id  GROUP BY s.name  HAVING COUNT(h.employee_id) = (SELECT COUNT(employee_id)  FROM hiring  GROUP BY shop_id  ORDER BY COUNT(employee_id) DESC  LIMIT 1); ",
      "SELECT s.name  FROM shop s  WHERE s.shop_id IN (SELECT h.shop_id  FROM hiring h  GROUP BY h.shop_id  HAVING COUNT(h.employee_id) = (SELECT MAX(c)  FROM (SELECT COUNT(h1.employee_id) AS c  FROM hiring h1  GROUP BY h1.shop_id))); ",
      "SELECT name  FROM shop  WHERE shop_id IN (SELECT shop_id  FROM hiring  GROUP BY shop_id  HAVING COUNT(employee_id) = (SELECT COUNT(employee_id)  FROM hiring  GROUP BY shop_id  ORDER BY COUNT(employee_id) DESC  LIMIT 1)); ",
      "SELECT shop.name  FROM shop  JOIN hiring ON shop.shop_id = hiring.shop_id  GROUP BY shop.name  HAVING COUNT(hiring.employee_id) = (SELECT MAX(cnt)  FROM (SELECT COUNT(hiring.employee_id) AS cnt  FROM hiring  GROUP BY hiring.shop_id)); ",
      "SELECT s.name  FROM shop s  WHERE s.number_products = (SELECT MAX(number_products)  FROM shop); ",
      "SELECT s.name  FROM shop s  JOIN hiring h ON s.shop_id = h.shop_id  GROUP BY s.name  ORDER BY COUNT(h.employee_id) DESC  LIMIT 1; ",
      "SELECT s.name  FROM shop s  JOIN hiring h ON s.shop_id = h.shop_id  GROUP BY s.name  HAVING COUNT(h.employee_id) = (SELECT MAX(c)  FROM (SELECT COUNT(h1.employee_id) AS c  FROM hiring h1  GROUP BY h1.shop_id)); ",
      "SELECT s.name  FROM shop s  WHERE s.shop_id IN (SELECT shop_id  FROM hiring  GROUP BY shop_id  HAVING COUNT(employee_id) = (SELECT COUNT(employee_id)  FROM hiring  GROUP BY shop_id  ORDER BY COUNT(employee_id) DESC  LIMIT 1)); ",
      "SELECT shop.name  FROM shop  WHERE shop_id IN (SELECT shop_id  FROM hiring  GROUP BY shop_id  HAVING COUNT(employee_id) = (SELECT COUNT(employee_id)  FROM hiring  GROUP BY shop_id  ORDER BY COUNT(employee_id) DESC  LIMIT 1));"
    ],
    "gpt_answers2": [
      "SELECT name FROM shop WHERE shop_id IN ( SELECT shop_id FROM hiring GROUP BY shop_id HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) as count FROM hiring GROUP BY shop_id ) ) ); ",
      "SELECT shop.name FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT name FROM shop WHERE shop_id = ( SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT name FROM shop WHERE shop_id = ( SELECT shop_id FROM hiring GROUP BY shop_id HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) as count FROM hiring GROUP BY shop_id ) ) ); ",
      "SELECT s.name FROM ( SELECT shop_id, COUNT(*) as count FROM hiring GROUP BY shop_id ORDER BY count DESC LIMIT 1 ) AS h JOIN shop AS s ON h.shop_id = s.shop_id; ",
      "SELECT s.name FROM ( SELECT COUNT(*) as count, hiring.shop_id FROM hiring GROUP BY hiring.shop_id ORDER BY count DESC LIMIT 1 ) AS h JOIN shop AS s ON h.shop_id = s.shop_id; ",
      "SELECT MAX(count) FROM ( SELECT COUNT(*) as count FROM hiring GROUP BY shop_id ); ",
      "SELECT s.name FROM shop AS s INNER JOIN ( SELECT shop_id, COUNT(*) as count FROM hiring GROUP BY shop_id ORDER BY count DESC LIMIT 1 ) AS h ON s.shop_id = h.shop_id; ",
      "SELECT shop.name FROM shop INNER JOIN ( SELECT shop_id, COUNT(*) as count FROM hiring GROUP BY shop_id ORDER BY count DESC LIMIT 1 ) AS h ON shop.shop_id = h.shop_id; ",
      "SELECT shop.name FROM shop INNER JOIN ( SELECT shop_id, COUNT(*) as count FROM hiring GROUP BY shop_id ORDER BY count DESC LIMIT 1 ) ON shop.shop_id = hiring.shop_id;"
    ],
    "gpt_answers3": [
      "SELECT shop.name FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1; ",
      "SELECT name FROM shop WHERE shop_id = ( SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1 ); ",
      "SELECT name FROM shop WHERE shop_id = ( SELECT shop_id FROM hiring GROUP BY shop_id HAVING COUNT(employee_id) = ( SELECT MAX(employee_count) FROM ( SELECT COUNT(employee_id) as employee_count FROM hiring GROUP BY shop_id ) ) ); ",
      "SELECT shop.name FROM shop WHERE shop.shop_id = ( SELECT hiring.shop_id FROM hiring GROUP BY hiring.shop_id HAVING COUNT(hiring.employee_id) = ( SELECT MAX(employees) FROM ( SELECT COUNT(hiring.employee_id) as employees FROM hiring GROUP BY hiring.shop_id ) ) ); ",
      "SELECT shop.name FROM shop WHERE shop.shop_id IN ( SELECT hiring.shop_id FROM hiring GROUP BY hiring.shop_id HAVING COUNT(hiring.employee_id) = MAX( SELECT COUNT(hiring.employee_id) FROM hiring GROUP BY hiring.shop_id ) ); ",
      "SELECT name FROM ( SELECT shop.name, COUNT(hiring.employee_id) as num_employees FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ) subquery WHERE subquery.num_employees = ( SELECT MAX(num_employees) FROM ( SELECT COUNT(hiring.employee_id) as num_employees FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ) ); ",
      "SELECT name FROM shop WHERE shop_id = ALL ( SELECT shop_id FROM hiring GROUP BY shop_id HAVING COUNT(employee_id) = ( SELECT MAX(employee_count) FROM ( SELECT COUNT(employee_id) as employee_count FROM hiring GROUP BY shop_id ) ) ); ",
      "SELECT shop.name FROM shop INNER JOIN ( SELECT shop_id, COUNT(employee_id) as num_employees FROM hiring GROUP BY shop_id ) subquery ON shop.shop_id = subquery.shop_id WHERE subquery.num_employees = ( SELECT MAX(num_employees) FROM ( SELECT shop_id, COUNT(employee_id) as num_employees FROM hiring GROUP BY shop_id ) ); ",
      "SELECT shop.name FROM shop WHERE shop_id IN ( SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1 ); ",
      "SELECT shop.name FROM shop WHERE shop.shop_id = ( SELECT hiring.shop_id FROM hiring GROUP BY hiring.shop_id HAVING COUNT(hiring.employee_id) = ( SELECT MAX(employees) FROM ( SELECT COUNT(hiring.employee_id) as employees FROM hiring GROUP BY hiring.shop_id ) ) );"
    ]
  },
  {
    "id": 289,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "gpt_answers1": [
      "SELECT shop.name, COUNT(*) AS num_employees FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT s.name, COUNT(*) AS num_employees FROM shop AS s, hiring AS h WHERE s.shop_id = h.shop_id GROUP BY s.name; ",
      "SELECT shop.name, COUNT(hiring.employee_id) AS num_employees FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT name, COUNT(*) AS num_employees FROM shop, hiring WHERE shop.shop_id = hiring.shop_id GROUP BY name; ",
      "SELECT shop.name, COUNT(*) AS num_employees FROM shop LEFT OUTER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop, hiring, employee WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id GROUP BY shop.name; ",
      "SELECT s.name, COUNT(*) AS num_employees FROM shop AS s JOIN hiring AS h ON s.shop_id = h.shop_id GROUP BY s.name; ",
      "SELECT shop.name, COUNT(*) AS num_employees FROM shop, hiring WHERE shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY num_employees DESC; ",
      "SELECT shop.name, COUNT(employee.employee_id) AS num_employees FROM shop, hiring, employee WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id GROUP BY shop.name HAVING COUNT(employee.employee_id) > 0; ",
      "SELECT s.name, COUNT(*) AS num_employees FROM shop AS s LEFT JOIN hiring AS h ON s.shop_id = h.shop_id GROUP BY s.name;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(employee.employee_id) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name; ",
      "SELECT COUNT(*) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT COUNT(DISTINCT employee.name) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name; ",
      "SELECT COUNT(DISTINCT hiring.employee_id) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT COUNT(*) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name, employee.name; ",
      "SELECT COUNT(*) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IN (SELECT employee_id FROM employee) GROUP BY shop.name; ",
      "SELECT COUNT(*) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id WHERE EXISTS (SELECT * FROM employee WHERE employee.employee_id = hiring.employee_id) GROUP BY shop.name; ",
      "SELECT COUNT(employee.employee_id) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.employee_id IN (SELECT employee_id FROM employee) GROUP BY shop.name; ",
      "SELECT COUNT(employee.employee_id) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE EXISTS (SELECT * FROM employee WHERE employee.employee_id = hiring.employee_id) GROUP BY shop.name; ",
      "SELECT COUNT(hiring.employee_id) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id WHERE EXISTS (SELECT * FROM employee WHERE employee.employee_id = hiring.employee_id) GROUP BY shop.name;"
    ],
    "gpt_answers3": [
      "SELECT shop.name, COUNT(hiring.employee_id) AS num_employees FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT shop.name, count(*) AS num_employees FROM shop, hiring WHERE shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT s.name AS shop_name, COUNT(h.employee_id) AS num_employees FROM shop AS s LEFT JOIN hiring AS h ON s.shop_id = h.shop_id GROUP BY s.name; ",
      "SELECT shop.name, COUNT(*) AS num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT shop.name, COUNT(hiring.shop_id) AS num_employees FROM shop, hiring WHERE shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT shop.name, COUNT(*) AS num_employees FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT s.name, COUNT(h.employee_id) AS num_employees FROM shop s, hiring h WHERE s.shop_id = h.shop_id GROUP BY s.name; ",
      "SELECT shop.name, COUNT(*) AS num_employees FROM shop LEFT OUTER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name; ",
      "SELECT shop.name, COUNT(*) AS num_employees FROM shop, hiring, employee WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id GROUP BY shop.name; ",
      "SELECT s.name AS shop_name, COUNT(h.employee_id) AS num_employees FROM shop AS s INNER JOIN hiring AS h ON s.shop_id = h.shop_id GROUP BY s.name;"
    ]
  },
  {
    "id": 294,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "gpt_answers1": [
      "SELECT DISTINCT district FROM shop WHERE number_products < 3000 OR number_products > 10000 ",
      "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000 ",
      "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000) ",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000) ",
      "SELECT DISTINCT s1.district FROM shop s1, shop s2 WHERE s1.number_products < 3000 AND s2.number_products > 10000 AND s1.district = s2.district ",
      "SELECT DISTINCT district FROM shop WHERE number_products < 3000 OR district IN (SELECT district FROM shop WHERE number_products > 10000) ",
      "SELECT DISTINCT district FROM shop WHERE (number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)) OR (number_products > 10000 AND district IN (SELECT district FROM shop WHERE number_products < 3000)) ",
      "SELECT district FROM shop WHERE (number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)) OR (number_products > 10000 AND district IN (SELECT district FROM shop WHERE number_products < 3000)) ",
      "SELECT DISTINCT district FROM shop AS s1 WHERE EXISTS ( SELECT district FROM shop AS s2 WHERE s1.number_products < 3000 AND s2.number_products > 10000 AND s1.district = s2.district ) ",
      "SELECT DISTINCT district FROM shop AS s1 WHERE EXISTS ( SELECT district FROM shop AS s2 WHERE s1.number_products < 3000 AND s2.number_products > 10000 AND s1.district = s2.district )"
    ],
    "gpt_answers2": [
      "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000);",
      "SELECT district FROM shop WHERE number_products < 3000 AND district EXISTS (SELECT district FROM shop WHERE number_products > 10000);",
      "SELECT district FROM shop WHERE number_products < 3000 AND EXISTS (SELECT district FROM shop WHERE number_products > 10000);",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000 GROUP BY district);",
      "SELECT district FROM shop WHERE number_products < 3000 AND district EXISTS (SELECT district FROM shop WHERE number_products > 10000 GROUP BY district);",
      "SELECT district FROM shop WHERE number_products < 3000 AND EXISTS (SELECT district FROM shop WHERE number_products > 10000 GROUP BY district);",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000 HAVING COUNT(*) > 0);",
      "SELECT district FROM shop WHERE number_products < 3000 AND district EXISTS (SELECT district FROM shop WHERE number_products > 10000 HAVING COUNT(*) > 0);",
      "SELECT district FROM shop WHERE number_products < 3000 AND EXISTS (SELECT district FROM shop WHERE number_products > 10000 HAVING COUNT(*) > 0);"
    ],
    "gpt_answers3": [
      "SELECT district FROM shop WHERE number_products < 3000 AND shop_id IN ( SELECT shop_id FROM shop WHERE number_products > 10000 ) ",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN ( SELECT district FROM shop WHERE number_products > 10000 ) ",
      "SELECT DISTINCT s1.district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000 ",
      "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000 ",
      "SELECT s1.district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000 GROUP BY s1.district ",
      "SELECT district FROM shop WHERE number_products < 3000 AND shop_id IN ( SELECT shop_id FROM shop WHERE number_products > 10000 AND district = shop.district ) ",
      "SELECT district FROM shop WHERE number_products < 3000 AND EXISTS ( SELECT 1 FROM shop s2 WHERE s2.number_products > 10000 AND s2.district = shop.district ) ",
      "SELECT district FROM shop WHERE number_products BETWEEN 3000 AND 10000 GROUP BY district HAVING COUNT(DISTINCT shop_id) > 1 AND COUNT(DISTINCT CASE WHEN number_products < 3000 THEN shop_id END) > 0 AND COUNT(DISTINCT CASE WHEN number_products > 10000 THEN shop_id END) > 0 ",
      "SELECT district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000 GROUP BY district HAVING COUNT(DISTINCT s1.shop_id) > 0 AND COUNT(DISTINCT s2.shop_id) > 0 ",
      "SELECT district FROM shop WHERE ( SELECT COUNT(*) FROM shop WHERE number_products < 3000 AND district = shop.district ) > 0 AND ( SELECT COUNT(*) FROM shop WHERE number_products > 10000 AND district = shop.district ) > 0"
    ]
  },
  {
    "id": 295,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "gpt_answers1": [
      "SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT DISTINCT district FROM shop WHERE number_products > 10000); ",
      "SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  INTERSECT  SELECT DISTINCT district  FROM shop  WHERE number_products > 10000; ",
      "SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  AND EXISTS (SELECT * FROM shop WHERE number_products > 10000 AND district = shop.district); ",
      "SELECT DISTINCT s1.district  FROM shop s1  JOIN shop s2  ON s1.district = s2.district  WHERE s1.number_products < 3000  AND s2.number_products > 10000; ",
      "SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT district FROM shop WHERE number_products > 10000 GROUP BY district); ",
      "SELECT DISTINCT district  FROM shop  WHERE EXISTS (SELECT * FROM shop WHERE number_products < 3000 AND district = shop.district) AND EXISTS (SELECT * FROM shop WHERE number_products > 10000 AND district = shop.district); ",
      "SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT district FROM shop GROUP BY district HAVING SUM(number_products) > 10000); ",
      "SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT district FROM shop WHERE number_products > 10000 GROUP BY district HAVING COUNT(*) > 0); ",
      "SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT district FROM shop WHERE number_products > 10000 GROUP BY district HAVING COUNT(*) > 1); ",
      "SELECT s1.district  FROM shop s1, shop s2  WHERE s1.number_products < 3000  AND s1.district = s2.district  AND s2.number_products > 10000  GROUP BY s1.district;"
    ],
    "gpt_answers2": [
      "SELECT district  FROM shop  WHERE number_products < 3000  AND district IN  (SELECT district  FROM shop  WHERE number_products > 10000) ",
      "SELECT DISTINCT(s1.district) FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000 ",
      "SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000 ",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN  (SELECT district FROM shop WHERE number_products > 10000) ",
      "SELECT s1.district FROM shop s1, shop s2 WHERE s1.number_products < 3000  AND s2.number_products > 10000  AND s1.district = s2.district ",
      "SELECT district FROM shop GROUP BY district HAVING MIN(number_products) < 3000 AND MAX(number_products) > 10000 ",
      "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT DISTINCT district FROM shop WHERE number_products > 10000) ",
      "SELECT district FROM shop AS s1 WHERE EXISTS (SELECT 1 FROM shop AS s2 WHERE s1.district = s2.district AND s2.number_products > 10000) AND number_products < 3000 ",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000) ",
      "WITH low_product_shops AS ( SELECT district FROM shop WHERE number_products < 3000 ), high_product_shops AS ( SELECT district FROM shop WHERE number_products > 10000 ) SELECT DISTINCT low_product_shops.district FROM low_product_shops JOIN high_product_shops ON low_product_shops.district = high_product_shops.district"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT s1.district FROM shop s1, shop s2 WHERE s1.number_products < 3000 AND s2.number_products > 10000 AND s1.district = s2.district; ",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN ( SELECT district FROM shop WHERE number_products > 10000 ); ",
      "SELECT DISTINCT district FROM shop WHERE number_products < 3000 INTERSECT SELECT DISTINCT district FROM shop WHERE number_products > 10000; ",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN ( SELECT DISTINCT district FROM shop WHERE number_products > 10000 ); ",
      "SELECT s1.district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000; ",
      "SELECT district FROM shop WHERE number_products < 3000 AND district IN ( SELECT district FROM shop WHERE number_products > 10000 GROUP BY district ); ",
      "SELECT DISTINCT district FROM shop s1 JOIN shop s2 ON s1.district = s2.district WHERE s1.number_products < 3000 AND s2.number_products > 10000; ",
      "WITH s1 AS ( SELECT district FROM shop WHERE number_products < 3000 ) SELECT DISTINCT s1.district FROM s1 JOIN shop s2 ON s1.district = s2.district WHERE s2.number_products > 10000; ",
      "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN ( SELECT DISTINCT district FROM shop WHERE number_products > 10000 ); ",
      "SELECT s1.district FROM shop s1 JOIN ( SELECT DISTINCT district FROM shop WHERE number_products > 10000 ) s2 ON s1.district = s2.district WHERE s1.number_products < 3000;"
    ]
  },
  {
    "id": 309,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT'); ",
      "SELECT COUNT(DISTINCT document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'; ",
      "SELECT COUNT(*) FROM documents d INNER JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT'; ",
      "SELECT COUNT(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'; ",
      "SELECT COUNT(*) FROM documents INNER JOIN templates ON documents.template_id = templates.template_id AND templates.template_type_code = 'PPT'; ",
      "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT'); ",
      "SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT'); ",
      "SELECT COUNT(*) FROM documents d, templates t WHERE d.template_id = t.template_id AND t.template_type_code = 'PPT'; ",
      "SELECT COUNT(DISTINCT document_id) FROM documents, templates WHERE documents.template_id = templates.template_id AND templates.template_type_code = 'PPT'; ",
      "SELECT COUNT(*) FROM documents d, templates t WHERE d.template_id = t.template_id AND t.template_type_code = 'PPT';"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM documents  INNER JOIN templates ON documents.template_id = templates.template_id  INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'PPT'; ",
      "SELECT COUNT(*) FROM documents  WHERE template_id IN (SELECT template_id FROM templates  INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'PPT'); ",
      "SELECT COUNT(*) FROM documents  WHERE template_id IN (SELECT template_id FROM templates  WHERE template_type_code = 'PPT'); ",
      "SELECT COUNT(*) FROM documents  WHERE template_id IN (SELECT template_id FROM templates  WHERE template_type_code = (SELECT template_type_code FROM ref_template_types  WHERE template_type_description = 'PPT')); ",
      "SELECT COUNT(*) FROM documents  WHERE template_id IN (SELECT template_id FROM templates  WHERE template_type_code = (SELECT template_type_code FROM ref_template_types  WHERE template_type_description LIKE '%PPT%')); ",
      "SELECT COUNT(*) FROM documents  LEFT JOIN templates ON documents.template_id = templates.template_id  LEFT JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'PPT'; ",
      "SELECT COUNT(*) FROM documents  WHERE template_id IN (SELECT template_id FROM templates  WHERE template_type_code IN (SELECT template_type_code FROM ref_template_types  WHERE template_type_description = 'PPT')); ",
      "SELECT COUNT(*) FROM documents  WHERE template_id IN (SELECT template_id FROM (SELECT template_id, template_type_code  FROM templates  WHERE template_id IN (SELECT template_id FROM ref_template_types  WHERE template_type_description = 'PPT')) AS temp); ",
      "SELECT COUNT(*) FROM documents  WHERE template_id IN (SELECT template_id FROM templates  WHERE template_id IN (SELECT template_id FROM ref_template_types  WHERE template_type_description = 'PPT')); ",
      "SELECT COUNT(*) FROM documents  WHERE template_id IN (SELECT template_id FROM templates  WHERE template_type_code = (SELECT template_type_code FROM ref_template_types  WHERE template_type_description LIKE '%PPT%'));"
    ],
    "gpt_answers3": [
      "SELECT Count(distinct document_id)  FROM documents  WHERE template_id IN (SELECT template_id  FROM templates  WHERE template_type_code = \"PPT\"); ",
      "SELECT COUNT(DISTINCT D.document_id) FROM documents D INNER JOIN templates T ON D.template_id = T.template_id WHERE T.template_type_code = \"PPT\"; ",
      "SELECT COUNT(DISTINCT document_id) FROM documents D JOIN templates T ON D.template_id = T.template_id JOIN ref_template_types RTT ON T.template_type_code = RTT.template_type_code WHERE RTT.template_type_description = \"PPT\"; ",
      "SELECT COUNT(DISTINCT D.document_id)  FROM documents D, templates T, ref_template_types RTT WHERE D.template_id = T.template_id AND T.template_type_code = RTT.template_type_code AND RTT.template_type_description = \"PPT\"; ",
      "SELECT COUNT(DISTINCT document_id) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = \"PPT\"); ",
      "SELECT COUNT(DISTINCT document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = \"PPT\"; ",
      "SELECT COUNT(DISTINCT documents.document_id) FROM documents INNER JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = \"PPT\"; ",
      "SELECT COUNT(DISTINCT document_id) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT'); ",
      "SELECT COUNT(DISTINCT D.document_id) FROM documents D, templates T WHERE D.template_id = T.template_id AND T.template_type_code = 'PPT'; ",
      "SELECT COUNT(DISTINCT document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = \"PPT\";"
    ]
  },
  {
    "id": 310,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "gpt_answers1": [
      "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, (SELECT COUNT(*) FROM documents WHERE documents.template_id = templates.template_id) AS num_documents FROM templates; ",
      "SELECT templates.template_id, COUNT(*) AS num_documents FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, COUNT(*) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT t.template_id, COUNT(d.document_id) AS num_documents FROM templates AS t LEFT JOIN documents AS d ON t.template_id = d.template_id GROUP BY t.template_id; ",
      "SELECT t.template_id, COUNT(d.document_id) AS num_documents FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id; ",
      "SELECT templates.template_id, COUNT(*) AS num_documents FROM templates, documents WHERE templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates, documents WHERE templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates WHERE EXISTS (SELECT 1 FROM documents WHERE documents.template_id = templates.template_id) GROUP BY templates.template_id;"
    ],
    "gpt_answers2": [
      "SELECT templates.template_id, COUNT(documents.document_id) FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, (SELECT COUNT(document_id) FROM documents WHERE templates.template_id = documents.template_id) FROM templates; ",
      "SELECT templates.template_id, COUNT(*) FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT t.template_id, COUNT(d.document_id) FROM templates t INNER JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id; ",
      "SELECT templates.template_id, COUNT(documents.document_id) FROM templates, documents WHERE templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT t.template_id, COUNT(d.document_id) FROM templates AS t, documents AS d WHERE t.template_id = d.template_id GROUP BY t.template_id; ",
      "SELECT templates.template_id, COUNT(*) FROM templates, documents WHERE templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, COUNT(d.document_id) FROM templates JOIN documents d ON templates.template_id = d.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, COUNT(documents.document_id) FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT templates.template_id, COUNT(*) FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;"
    ],
    "gpt_answers3": [
      "SELECT templates.template_id, COUNT(documents.document_id) FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT template_id, COUNT(document_id) FROM documents GROUP BY template_id; ",
      "SELECT templates.template_id, COUNT(*) FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id; ",
      "SELECT t.template_id, COUNT(d.document_id) FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id; ",
      "SELECT templates.template_id, COUNT(documents.document_id) FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY templates.template_id; ",
      "SELECT template_id, COUNT(*) FROM documents GROUP BY template_id ORDER BY template_id; ",
      "SELECT templates.template_id, COUNT(*) FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY templates.template_id; ",
      "SELECT t.template_id, COUNT(d.document_id) FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id; ",
      "SELECT templates.template_id, COUNT(documents.document_id) FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY templates.template_id; ",
      "SELECT template_id, COUNT(document_id) FROM documents WHERE template_id IS NOT NULL GROUP BY template_id;"
    ]
  },
  {
    "id": 312,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1; ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) >= ALL (SELECT COUNT(documents.document_id) FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (SELECT documents.template_id FROM documents GROUP BY documents.template_id ORDER BY COUNT(documents.document_id) DESC LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (SELECT documents.template_id FROM documents GROUP BY documents.template_id HAVING COUNT(documents.document_id) = (SELECT MAX(doc_count) FROM (SELECT COUNT(documents.document_id) AS doc_count FROM documents GROUP BY documents.template_id))); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id IN (SELECT documents.template_id FROM documents GROUP BY documents.template_id HAVING COUNT(documents.document_id) = (SELECT MAX(doc_count) FROM (SELECT COUNT(documents.document_id) AS doc_count FROM documents GROUP BY documents.template_id))); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (SELECT documents.template_id FROM documents GROUP BY documents.template_id ORDER BY COUNT(documents.document_id) FETCH FIRST ROW ONLY); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (SELECT documents.template_id FROM documents GROUP BY documents.template_id ORDER BY COUNT(documents.document_id) DESC FETCH FIRST ROW ONLY); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (SELECT documents.template_id FROM documents GROUP BY documents.template_id ORDER BY COUNT(documents.document_id) DESC LIMIT 1 OFFSET 0); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (SELECT documents.template_id FROM documents GROUP BY documents.template_id ORDER BY COUNT(documents.document_id) LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (SELECT documents.template_id FROM documents GROUP BY documents.template_id ORDER BY COUNT(documents.document_id) OFFSET 0 FETCH FIRST ROW ONLY);"
    ],
    "gpt_answers2": [
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1; ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (SELECT MAX(count)  FROM (SELECT COUNT(document_id) as count  FROM documents  GROUP BY template_id)); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (SELECT COUNT(document_id)  FROM documents  GROUP BY template_id  ORDER BY COUNT(document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) >= ALL (SELECT COUNT(document_id)  FROM documents  GROUP BY template_id); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_id = (SELECT template_id  FROM documents  GROUP BY template_id  ORDER BY COUNT(document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (SELECT MAX(count)  FROM (SELECT COUNT(document_id) as count  FROM documents  WHERE template_id = templates.template_id  GROUP BY template_id)); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (SELECT COUNT(document_id)  FROM documents  WHERE template_id = templates.template_id  GROUP BY template_id  ORDER BY COUNT(document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_id = (SELECT template_id  FROM documents  WHERE template_id = templates.template_id  GROUP BY template_id  ORDER BY COUNT(document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_id = (SELECT template_id  FROM (SELECT template_id, COUNT(document_id) as count  FROM documents  GROUP BY template_id  ORDER BY COUNT(document_id) DESC) AS sub  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_id = (SELECT template_id FROM (SELECT template_id, COUNT(*) as count FROM documents GROUP BY template_id ORDER BY count DESC) AS sub LIMIT 1);"
    ],
    "gpt_answers3": [
      "SELECT templates.template_id, templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id  ORDER BY COUNT(documents.document_id) DESC  LIMIT 1; ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  WHERE templates.template_id = (SELECT documents.template_id  FROM documents  GROUP BY documents.template_id  ORDER BY COUNT(documents.document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  WHERE templates.template_id IN (SELECT documents.template_id  FROM documents  GROUP BY documents.template_id  ORDER BY COUNT(documents.document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id  ORDER BY COUNT(*) DESC  LIMIT 1; ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id  HAVING COUNT(documents.document_id) = (SELECT MAX(doc_count)  FROM (SELECT COUNT(*) as doc_count  FROM documents  GROUP BY document_id)  AS t1); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (SELECT MAX(cnt)  FROM (SELECT COUNT(document_id) AS cnt  FROM documents GROUP BY template_id)  AS t2); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  WHERE templates.template_id IN (SELECT documents.template_id  FROM documents  GROUP BY documents.template_id  HAVING COUNT(documents.document_id) = (SELECT MAX(cnt)  FROM (SELECT COUNT(*) AS cnt  FROM documents  GROUP BY template_id)  AS t3) ); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  WHERE templates.template_id = (SELECT documents.template_id  FROM documents  GROUP BY documents.template_id  HAVING COUNT(documents.document_id) = (SELECT MAX(cnt)  FROM (SELECT COUNT(*) AS cnt  FROM documents  GROUP BY template_id)  AS t4) ); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  WHERE templates.template_id = (SELECT documents.template_id  FROM documents  GROUP BY documents.template_id  ORD\u200c\u200bER BY COUNT(documents.document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates  WHERE templates.template_id = (SELECT documents.template_id  FROM documents  INNER JOIN templates ON templates.template_id = documents.template_id GROUP BY documents.template_id  ORD\u200c\u200bER BY COUNT(documents.document_id) DESC  LIMIT 1);"
    ]
  },
  {
    "id": 313,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT templates.template_id, templates.template_type_code  FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id  ORDER BY COUNT(documents.document_id) DESC LIMIT 1; ",
      "SELECT t.template_id, t.template_type_code  FROM templates t  WHERE t.template_id = (SELECT template_id  FROM documents  GROUP BY template_id  ORDER BY COUNT(document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (SELECT MAX(c)  FROM (SELECT COUNT(*) c  FROM documents  GROUP BY template_id)); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (SELECT template_id  FROM documents  GROUP BY template_id  ORDER BY COUNT(document_id) DESC  LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1; ",
      "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (SELECT MAX(counted_docs)  FROM (SELECT COUNT(*) as counted_docs  FROM documents  GROUP BY template_id)); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code HAVING COUNT(documents.document_id) = (SELECT COUNT(*) FROM documents GROUP BY template_id ORDER BY COUNT(document_id) DESC LIMIT 1); ",
      "SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1; ",
      "WITH counted_docs AS ( SELECT template_id, COUNT(*) AS doc_count FROM documents GROUP BY template_id ) SELECT templates.template_id, templates.template_type_code FROM templates JOIN counted_docs ON templates.template_id = counted_docs.template_id WHERE doc_count = (SELECT MAX(doc_count) FROM counted_docs) LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT templates.template_id, templates.template_type_code  FROM templates INNER JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates WHERE templates.template_id = ( SELECT template_id  FROM documents  GROUP BY template_id  ORDER BY COUNT(*) DESC  LIMIT 1 ); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates WHERE templates.template_id = ( SELECT template_id  FROM documents  GROUP BY template_id  HAVING COUNT(*) = ( SELECT MAX(document_count)  FROM ( SELECT template_id, COUNT(*) as document_count  FROM documents  GROUP BY template_id ) ) ); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates INNER JOIN ( SELECT template_id, COUNT(*) as document_count  FROM documents  GROUP BY template_id  ORDER BY document_count DESC  LIMIT 1 ) AS max_documents ON templates.template_id = max_documents.template_id; ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates WHERE templates.template_id = ANY ( SELECT template_id  FROM documents  GROUP BY template_id  HAVING COUNT(*) = ( SELECT MAX(document_count)  FROM ( SELECT template_id, COUNT(*) as document_count  FROM documents  GROUP BY template_id ) ) ); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates WHERE templates.template_id IN ( SELECT template_id  FROM documents  GROUP BY template_id  ORDER BY COUNT(*) DESC  LIMIT 1 ); ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id  GROUP BY templates.template_id, templates.template_type_code  ORDER BY COUNT(*) DESC  LIMIT 1; ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates WHERE templates.template_id = ( SELECT template_id  FROM documents  GROUP BY template_id  ORDER BY COUNT(*) DESC  LIMIT 1 ) GROUP BY templates.template_id, templates.template_type_code; ",
      "SELECT templates.template_id, templates.template_type_code  FROM templates WHERE templates.template_id = ( SELECT template_id  FROM documents  GROUP BY template_id  ORDER BY COUNT(*) DESC  LIMIT 1 ) GROUP BY templates.template_id; ",
      "SELECT template_id, template_type_code  FROM ( SELECT templates.template_id, templates.template_type_code, COUNT(*) as document_count FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ) WHERE document_count = ( SELECT MAX(document_count) FROM ( SELECT templates.template_id, templates.template_type_code, COUNT(*) as document_count FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ) ) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id ORDER BY COUNT(d.document_id) DESC LIMIT 1; ",
      "SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id HAVING COUNT(d.document_id) = ( SELECT MAX(doc_count) FROM ( SELECT COUNT(d.document_id) AS doc_count FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id ) ); ",
      "SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code HAVING COUNT(d.document_id) = ( SELECT COUNT(d.document_id) FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id ORDER BY COUNT(d.document_id) DESC LIMIT 1 ); ",
      "SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code HAVING COUNT(d.document_id) = ( SELECT COUNT(*) FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code HAVING COUNT(d.document_id) = ( SELECT COUNT(*) FROM documents WHERE template_id = t.template_id GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT template_id, template_type_code FROM templates WHERE template_id = ( SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(document_id) = ( SELECT MAX(doc_count) FROM ( SELECT COUNT(document_id) AS doc_count FROM documents GROUP BY template_id ) ) ); ",
      "SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code HAVING COUNT(d.document_id) = ( SELECT COUNT(*) FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY ); ",
      "SELECT template_id, template_type_code FROM ( SELECT t.template_id, t.template_type_code, COUNT(d.document_id) AS doc_count FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ) ORDER BY doc_count DESC LIMIT 1; ",
      "WITH temp AS ( SELECT t.template_id, t.template_type_code, COUNT(d.document_id) AS doc_count FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ) SELECT template_id, template_type_code FROM temp WHERE doc_count = ( SELECT MAX(doc_count) FROM temp ); ",
      "SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code HAVING COUNT(d.document_id) IN ( SELECT MAX(doc_count) FROM ( SELECT COUNT(d.document_id) AS doc_count FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id ) );"
    ]
  },
  {
    "id": 323,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT DISTINCT template_type_code FROM Templates",
    "gpt_answers1": [
      "SELECT template_type_code FROM ref_template_types;",
      "SELECT DISTINCT template_type_code FROM templates;",
      "SELECT template_type_code FROM templates GROUP BY template_type_code;",
      "SELECT template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code;",
      "SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents);",
      "SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs));",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates);",
      "SELECT DISTINCT template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id;",
      "SELECT template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code;",
      "SELECT template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY template_type_code;"
    ],
    "gpt_answers2": [
      "SELECT template_type_code FROM ref_template_types ",
      "SELECT DISTINCT template_type_code FROM templates ",
      "SELECT template_type_code FROM templates GROUP BY template_type_code ",
      "SELECT template_type_code FROM ref_template_types GROUP BY template_type_code ",
      "SELECT template_type_code FROM ref_template_types UNION SELECT template_type_code FROM templates ",
      "SELECT template_type_code FROM ref_template_types INTERSECT SELECT template_type_code FROM templates ",
      "SELECT template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code ",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates) ",
      "SELECT DISTINCT template_type_code FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code ",
      "SELECT template_type_code FROM templates LEFT JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code"
    ],
    "gpt_answers3": [
      "SELECT template_type_code FROM ref_template_types;",
      "SELECT DISTINCT template_type_code FROM templates;",
      "SELECT template_type_code FROM templates GROUP BY template_type_code;",
      "SELECT template_type_code FROM ref_template_types INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code;",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates);",
      "SELECT template_type_code FROM templates WHERE template_type_code IS NOT NULL;",
      "SELECT template_type_code FROM templates WHERE template_type_code <> '';",
      "SELECT template_type_code FROM templates WHERE template_type_code IS NOT NULL AND template_type_code <> '';",
      "SELECT template_type_code FROM templates WHERE template_type_code NOT IN (SELECT template_type_code FROM ref_template_types);",
      "SELECT DISTINCT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code;"
    ]
  },
  {
    "id": 330,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "gpt_answers1": [
      "SELECT template_type_code, COUNT(*) AS number_of_templates FROM templates GROUP BY template_type_code ",
      "SELECT t.template_type_code, COUNT(*) AS number_of_templates FROM templates t INNER JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code GROUP BY t.template_type_code ",
      "SELECT rtt.template_type_code, COUNT(*) AS number_of_templates FROM ref_template_types rtt LEFT JOIN templates t ON rtt.template_type_code = t.template_type_code GROUP BY rtt.template_type_code ",
      "SELECT DISTINCT t.template_type_code, (SELECT COUNT(*) FROM templates WHERE template_type_code = t.template_type_code) AS number_of_templates FROM templates t ",
      "SELECT template_type_code, COUNT(*) AS number_of_templates FROM templates GROUP BY template_type_code ORDER BY template_type_code ",
      "SELECT t1.template_type_code, COUNT(t1.template_id) AS number_of_templates FROM templates t1 LEFT JOIN templates t2 ON t1.template_type_code = t2.template_type_code AND t1.template_id <> t2.template_id WHERE t2.template_id IS NULL GROUP BY t1.template_type_code ",
      "SELECT template_type_code, COUNT(*) AS number_of_templates FROM templates WHERE template_type_code IS NOT NULL GROUP BY template_type_code ",
      "SELECT template_type_code, COUNT(*) AS number_of_templates FROM templates WHERE template_type_code <> '' GROUP BY template_type_code ",
      "SELECT t.template_type_code, COUNT(*) AS number_of_templates FROM templates t, ref_template_types rtt WHERE t.template_type_code = rtt.template_type_code GROUP BY t.template_type_code ",
      "SELECT t.template_type_code, COUNT(*) AS number_of_templates FROM templates t INNER JOIN ref_template_types rtt ON t.template_type_code = rtt.template_type_code GROUP BY t.template_type_code"
    ],
    "gpt_answers2": [
      "SELECT template_type_code, COUNT(template_id) FROM templates GROUP BY template_type_code; ",
      "SELECT t.template_type_code, COUNT(t.template_id) FROM templates t GROUP BY t.template_type_code; ",
      "SELECT template_type_code, COUNT(template_id) FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code; ",
      "SELECT t.template_type_code, COUNT(t.template_id) FROM templates t INNER JOIN ref_template_types rt ON t.template_type_code = rt.template_type_code GROUP BY t.template_type_code; ",
      "SELECT template_type_code, COUNT(template_id) FROM templates LEFT JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code; ",
      "SELECT t.template_type_code, COUNT(t.template_id) FROM templates t LEFT JOIN ref_template_types rt ON t.template_type_code = rt.template_type_code GROUP BY t.template_type_code; ",
      "SELECT template_type_code, COUNT(template_id) FROM templates t INNER JOIN ref_template_types rt ON t.template_type_code = rt.template_type_code GROUP BY template_type_code; ",
      "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code; ",
      "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code; ",
      "SELECT ref_template_types.template_type_code, COUNT(templates.template_id) FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code;"
    ],
    "gpt_answers3": [
      "SELECT template_type_code, COUNT(template_id) FROM templates GROUP BY template_type_code;",
      "SELECT ref_template_types.template_type_code, COUNT(templates.template_id)  FROM ref_template_types  INNER JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code;",
      "SELECT template_type_code,  (SELECT COUNT(template_id) FROM templates WHERE templates.template_type_code = ref_template_types.template_type_code) FROM ref_template_types;",
      "SELECT template_type_code,  (SELECT COUNT(*) FROM templates WHERE templates.template_type_code = ref_template_types.template_type_code) FROM ref_template_types;",
      "SELECT t.template_type_code, COUNT(*)  FROM templates t  GROUP BY t.template_type_code;",
      "SELECT t.template_type_code, COUNT(DISTINCT t.template_id)  FROM templates t  GROUP BY t.template_type_code;",
      "SELECT t.template_type_code, COUNT(DISTINCT t.template_id)  FROM templates t  INNER JOIN ref_template_types r  ON t.template_type_code = r.template_type_code  GROUP BY t.template_type_code;",
      "SELECT t.template_type_code, COUNT(*)  FROM ref_template_types r, templates t  WHERE r.template_type_code = t.template_type_code  GROUP BY r.template_type_code;",
      "SELECT r.template_type_code, COUNT(*)  FROM templates t, ref_template_types r  WHERE t.template_type_code = r.template_type_code  GROUP BY r.template_type_code;",
      "SELECT r.template_type_code, COUNT(DISTINCT t.template_id)  FROM ref_template_types r  LEFT JOIN templates t  ON r.template_type_code = t.template_type_code  GROUP BY r.template_type_code;"
    ]
  },
  {
    "id": 334,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "gpt_answers1": [
      "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3; ",
      "SELECT t.template_type_code FROM templates t LEFT JOIN ( SELECT template_type_code, COUNT(template_id) AS template_count FROM templates GROUP BY template_type_code ) t2 ON t.template_type_code = t2.template_type_code WHERE t2.template_count < 3; ",
      "SELECT template_type_code FROM templates WHERE template_id NOT IN ( SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(template_id) >= 3 ); ",
      "SELECT t.template_type_code FROM templates t WHERE (SELECT COUNT(template_id) FROM templates WHERE template_type_code = t.template_type_code) < 3; ",
      "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) < 3; ",
      "SELECT template_type_code FROM templates WHERE template_id IN ( SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(template_id) < 3 ); ",
      "SELECT template_type_code FROM templates t1 WHERE (SELECT COUNT(template_id) FROM templates t2 WHERE t2.template_type_code = t1.template_type_code) < 3; ",
      "SELECT T.template_type_code FROM ( SELECT template_type_code, COUNT(template_id) AS template_count FROM templates GROUP BY template_type_code ) T WHERE T.template_count < 3; ",
      "SELECT template_type_code FROM ( SELECT template_type_code, COUNT(template_id) AS template_count FROM templates GROUP BY template_type_code ) AS temp WHERE template_count < 3; ",
      "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) < 3;"
    ],
    "gpt_answers2": [
      "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3; ",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3); ",
      "SELECT DISTINCT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(template_id) >= 3); ",
      "SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(template_id) < 3) GROUP BY template_type_code; ",
      "SELECT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) >= 3)) GROUP BY template_type_code; ",
      "SELECT template_type_code FROM templates t1 WHERE (SELECT COUNT(template_id) FROM templates t2 WHERE t2.template_type_code = t1.template_type_code) < 3 GROUP BY template_type_code; ",
      "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) < 3; ",
      "SELECT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) >= 3)) GROUP BY template_type_code; ",
      "SELECT template_type_code FROM templates LEFT JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY template_type_code HAVING COUNT(templates.template_id) < 3; ",
      "SELECT DISTINCT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) >= 3));"
    ],
    "gpt_answers3": [
      "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3; ",
      "SELECT DISTINCT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(template_id) >= 3); ",
      "SELECT template_type_code FROM templates t1 WHERE (SELECT COUNT(template_id) FROM templates t2 WHERE t1.template_type_code = t2.template_type_code) < 3; ",
      "SELECT t.template_type_code FROM templates t LEFT JOIN (SELECT template_type_code, COUNT(template_id) AS count FROM templates GROUP BY template_type_code) t2 ON t.template_type_code = t2.template_type_code WHERE t2.count < 3; ",
      "SELECT template_type_code FROM templates WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3); ",
      "SELECT template_type_code FROM templates WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) < 3); ",
      "SELECT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(template_type_code) >= 3); ",
      "SELECT DISTINCT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(DISTINCT template_type_code) >= 3); ",
      "SELECT DISTINCT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(template_type_code) < 3); ",
      "SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) < 3;"
    ]
  },
  {
    "id": 337,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "gpt_answers1": [
      "SELECT MIN(version_number), template_type_code FROM templates",
      "SELECT version_number, template_type_code FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates)",
      "SELECT version_number, template_type_code FROM templates ORDER BY version_number LIMIT 1",
      "SELECT version_number, template_type_code FROM templates WHERE version_number = (SELECT MIN(version_number) FROM templates GROUP BY template_type_code)",
      "SELECT MIN(version_number), templates.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code",
      "SELECT MIN(version_number), templates.template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code",
      "SELECT MIN(version_number), templates.template_type_code FROM templates INNER JOIN ref_template_types USING(template_type_code)",
      "SELECT MIN(version_number), templates.template_type_code FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code",
      "SELECT MIN(version_number), templates.template_type_code FROM templates NATURAL JOIN ref_template_types",
      "SELECT MIN(version_number), templates.template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY templates.template_type_code"
    ],
    "gpt_answers2": [
      "SELECT templates.version_number, templates.template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE templates.version_number = (SELECT MIN(version_number) FROM templates); ",
      "SELECT MIN(version_number) AS lowest_version, template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code; ",
      "SELECT t.version_number, t.template_type_code FROM templates AS t JOIN (SELECT MIN(version_number) AS min_ver FROM templates) AS min_t ON t.version_number = min_t.min_ver; ",
      "SELECT t.version_number, t.template_type_code FROM templates t, ref_template_types r WHERE t.template_type_code = r.template_type_code AND t.version_number = (SELECT MIN(version_number) FROM templates); ",
      "SELECT MIN(t.version_number) AS lowest_version, t.template_type_code FROM templates AS t, ref_template_types AS r WHERE t.template_type_code = r.template_type_code; ",
      "SELECT version_number, template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE version_number = (SELECT MIN(version_number) FROM templates); ",
      "SELECT version_number, template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE version_number = (SELECT MIN(version_number) FROM templates); ",
      "SELECT templates.version_number, templates.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE templates.version_number = (SELECT MIN(version_number) FROM templates); ",
      "SELECT version_number, template_type_code FROM templates INNER JOIN ref_template_types USING (template_type_code) WHERE version_number = (SELECT MIN(version_number) FROM templates); ",
      "SELECT t.version_number, t.template_type_code FROM templates AS t INNER JOIN ref_template_types AS r ON t.template_type_code = r.template_type_code WHERE t.version_number = (SELECT MIN(version_number) FROM templates);"
    ],
    "gpt_answers3": [
      "SELECT MIN(version_number), template_type_code  FROM templates  GROUP BY template_type_code  ORDER BY MIN(version_number)  LIMIT 1;",
      "SELECT t1.version_number, t1.template_type_code  FROM templates t1  LEFT JOIN templates t2 ON t1.template_type_code = t2.template_type_code AND t1.version_number > t2.version_number  WHERE t2.version_number IS NULL;",
      "SELECT t.version_number, t.template_type_code  FROM templates t  WHERE t.version_number = (SELECT MIN(version_number) FROM templates t2 WHERE t2.template_type_code = t.template_type_code);",
      "SELECT t.version_number, t.template_type_code  FROM templates t  WHERE t.version_number = (SELECT MIN(version_number) FROM templates WHERE template_type_code = t.template_type_code) LIMIT 1;",
      "SELECT MIN(version_number) AS lowest_version_number, template_type_code  FROM templates  GROUP BY template_type_code  HAVING version_number = MIN(version_number);",
      "SELECT MIN(version_number) AS lowest_version_number, template_type_code  FROM templates  GROUP BY template_type_code  ORDER BY lowest_version_number  LIMIT 1;",
      "SELECT t1.version_number, t1.template_type_code  FROM templates t1  LEFT JOIN templates t2 ON t1.template_type_code = t2.template_type_code AND t1.version_number > t2.version_number  WHERE t2.version_number IS NULL  LIMIT 1;",
      "SELECT t.version_number, t.template_type_code  FROM templates t  JOIN (SELECT template_type_code, MIN(version_number) AS min_version FROM templates GROUP BY template_type_code) t2  ON t.template_type_code = t2.template_type_code AND t.version_number = t2.min_version;",
      "SELECT t.version_number AS lowest_version_number, t.template_type_code  FROM templates t  WHERE version_number = (SELECT MIN(version_number) FROM templates WHERE template_type_code = t.template_type_code) GROUP BY template_type_code;",
      "SELECT t1.version_number, t1.template_type_code  FROM templates t1  JOIN (SELECT template_type_code, MIN(version_number) AS min_version FROM templates GROUP BY template_type_code) t2  ON t1.template_type_code = t2.template_type_code AND t1.version_number = t2.min_version;"
    ]
  },
  {
    "id": 346,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "gpt_answers1": [
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_id FROM documents);",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT EXISTS (SELECT template_id FROM documents);",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_id FROM documents)  AND template_type_code IN (SELECT template_type_code FROM templates);",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_id FROM documents)  AND template_type_code IN (SELECT template_type_code FROM templates)  AND template_type_code != (SELECT template_type_code FROM templates);",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT documents.template_id FROM documents);",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT EXISTS (SELECT documents.template_id FROM documents);",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT documents.template_id FROM documents)  AND template_type_code IN (SELECT templates.template_type_code FROM templates);",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT documents.template_id FROM documents)  AND template_type_code IN (SELECT templates.template_type_code FROM templates)  AND template_type_code != (SELECT templates.template_type_code FROM templates);",
      "SELECT template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_id IS NULL;",
      "SELECT template_type_code  FROM ref_template_types  WHERE NOT EXISTS (SELECT template_id FROM documents WHERE documents.template_id = ref_template_types.template_type_code);"
    ],
    "gpt_answers2": [
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id) ",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents)) ",
      "SELECT template_type_code  FROM ref_template_types  WHERE NOT EXISTS (SELECT 1 FROM templates INNER JOIN documents ON templates.template_id = documents.template_id WHERE ref_template_types.template_type_code = templates.template_type_code) ",
      "SELECT template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE templates.template_type_code IS NULL ",
      "SELECT template_type_code  FROM ref_template_types  WHERE NOT EXISTS (SELECT 1 FROM templates INNER JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_type_code = ref_template_types.template_type_code) ",
      "SELECT DISTINCT ref_template_types.template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  WHERE templates.template_type_code IS NULL ",
      "SELECT DISTINCT template_type_code  FROM ref_template_types  EXCEPT  SELECT template_type_code  FROM templates INNER JOIN documents ON templates.template_id = documents.template_id ",
      "SELECT DISTINCT t.template_type_code  FROM ref_template_types t  WHERE NOT EXISTS (SELECT 1 FROM templates INNER JOIN documents ON templates.template_id = documents.template_id WHERE t.template_type_code = templates.template_type_code) ",
      "SELECT DISTINCT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id) ",
      "SELECT DISTINCT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT DISTINCT templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id)"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT template_type_code FROM templates WHERE template_type_code NOT IN (SELECT DISTINCT template_id FROM documents); ",
      "SELECT DISTINCT template_type_code FROM templates WHERE template_id NOT IN (SELECT DISTINCT template_id FROM documents); ",
      "SELECT template_type_code FROM templates EXCEPT SELECT template_id FROM documents; ",
      "SELECT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents); ",
      "SELECT DISTINCT template_type_code FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE document_id IS NULL; ",
      "SELECT DISTINCT template_type_code FROM templates WHERE NOT EXISTS (SELECT 1 FROM documents WHERE templates.template_id = documents.template_id); ",
      "SELECT DISTINCT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents) GROUP BY template_type_code; ",
      "SELECT template_type_code FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code HAVING COUNT(document_id) = 0; ",
      "SELECT DISTINCT template_type_code FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL; ",
      "SELECT DISTINCT template_type_code FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents) ORDER BY template_type_code;"
    ]
  },
  {
    "id": 347,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "gpt_answers1": [
      "SELECT distinct template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT DISTINCT template_type_code FROM templates)",
      "SELECT rt.template_type_code FROM ref_template_types rt WHERE NOT EXISTS (SELECT 1 FROM templates t WHERE t.template_type_code = rt.template_type_code)",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id)",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents))",
      "SELECT template_type_code FROM ref_template_types WHERE NOT EXISTS (SELECT template_type_code FROM templates WHERE ref_template_types.template_type_code = templates.template_type_code)",
      "SELECT distinct template_type_code FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id WHERE d.template_id is null",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates WHERE templates.template_id IN (SELECT template_id FROM documents))",
      "SELECT distinct template_type_code FROM ref_template_types t LEFT OUTER JOIN templates s ON t.template_type_code = s.template_type_code WHERE s.template_id IS NULL",
      "SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates WHERE EXISTS(SELECT template_id FROM documents WHERE templates.template_id = documents.template_id))"
    ],
    "gpt_answers2": [
      "SELECT tt.template_type_code FROM ref_template_types tt LEFT JOIN templates t ON tt.template_type_code = t.template_type_code WHERE t.template_id IS NULL; ",
      "SELECT tt.template_type_code FROM ref_template_types tt WHERE tt.template_type_code NOT IN (SELECT template_type_code FROM templates); ",
      "SELECT tt.template_type_code FROM ref_template_types tt WHERE NOT EXISTS (SELECT 1 FROM templates t WHERE tt.template_type_code = t.template_type_code); ",
      "SELECT tt.template_type_code FROM ref_template_types tt WHERE tt.template_type_code NOT IN (SELECT template_type_code FROM documents d JOIN templates t ON d.template_id = t.template_id); ",
      "SELECT tt.template_type_code FROM ref_template_types tt EXCEPT SELECT tt.template_type_code FROM ref_template_types tt JOIN templates t ON tt.template_type_code = t.template_type_code JOIN documents d ON t.template_id = d.template_id; ",
      "SELECT DISTINCT tt.template_type_code FROM ref_template_types tt LEFT JOIN templates t ON tt.template_type_code = t.template_type_code LEFT JOIN documents d ON t.template_id = d.template_id WHERE d.document_id IS NULL; ",
      "SELECT tt.template_type_code FROM ref_template_types tt WHERE NOT EXISTS (SELECT 1 FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE tt.template_type_code = t.template_type_code); ",
      "SELECT DISTINCT tt.template_type_code FROM ref_template_types tt WHERE tt.template_type_code NOT IN (SELECT t.template_type_code FROM templates t  JOIN documents d ON t.template_id = d.template_id); ",
      "SELECT tt.template_type_code FROM ref_template_types tt LEFT JOIN templates t ON tt.template_type_code = t.template_type_code LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY tt.template_type_code HAVING COUNT(d.document_id) = 0; ",
      "SELECT tt.template_type_code FROM ref_template_types tt WHERE NOT EXISTS (SELECT 1 FROM templates t WHERE tt.template_type_code = t.template_type_code) OR tt.template_type_code NOT IN (SELECT template_type_code FROM documents);"
    ],
    "gpt_answers3": [
      "SELECT template_type_code  FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates); ",
      "SELECT template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  WHERE templates.template_type_code IS NULL; ",
      "SELECT DISTINCT ref_template_types.template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  WHERE templates.template_type_code IS NULL; ",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id); ",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id); ",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates  INNER JOIN documents ON templates.template_id = documents.template_id LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_id IS NOT NULL); ",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code  FROM templates GROUP BY template_type_code HAVING COUNT(DISTINCT template_id) > 0); ",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code  FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code HAVING COUNT(DISTINCT document_id) > 0); ",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code  FROM templates INNER JOIN documents ON templates.template_id = documents.template_id INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY template_type_code HAVING COUNT(DISTINCT paragraph_id) > 0); ",
      "SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT EXISTS (SELECT template_type_code FROM templates);"
    ]
  },
  {
    "id": 351,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "gpt_answers1": [
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code = \"AD\";",
      "SELECT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code WHERE templates.template_id = ( SELECT template_id FROM documents WHERE document_id = ( SELECT document_id FROM paragraphs WHERE paragraph_id = ( SELECT paragraph_id FROM paragraphs WHERE paragraph_text = \"AD\" ) ) );",
      "SELECT template_type_description FROM ref_template_types WHERE EXISTS( SELECT * FROM templates WHERE templates.template_type_code = ref_template_types.template_type_code AND EXISTS( SELECT * FROM documents WHERE documents.template_id = templates.template_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.paragraph_text = \"AD\" ) ) ) );",
      "SELECT template_type_description FROM ref_template_types WHERE EXISTS( SELECT * FROM templates INNER JOIN documents ON templates.template_id = documents.template_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.paragraph_text = \"AD\" ) ) ) AND ref_template_types.template_type_code = \"AD\";",
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code IN ( SELECT templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id AND document_id IN ( SELECT document_id FROM paragraphs WHERE paragraph_text = \"AD\" ) );",
      "SELECT ref_template_types.template_type_description FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code AND EXISTS( SELECT * FROM documents WHERE documents.template_id = templates.template_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.paragraph_text = \"AD\" ) ) );",
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code = ( SELECT template_type_code FROM templates WHERE template_id = ( SELECT template_id FROM documents WHERE document_id = ( SELECT document_id FROM paragraphs WHERE paragraph_id = ( SELECT paragraph_id FROM paragraphs WHERE paragraph_text = \"AD\" ) ) ) );",
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code = ( SELECT template_type_code FROM templates WHERE EXISTS( SELECT * FROM documents WHERE documents.template_id = templates.template_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.paragraph_text = \"AD\" ) ) ) );",
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code IN ( SELECT templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND EXISTS( SELECT * FROM paragraphs WHERE paragraphs.paragraph_text = \"AD\" ) ) );",
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code = ( SELECT template_type_code FROM templates WHERE template_id IN ( SELECT template_id FROM documents WHERE document_id IN ( SELECT document_id FROM paragraphs WHERE paragraph_id IN ( SELECT paragraph_id FROM paragraphs WHERE paragraph_text = \"AD\" ) ) ) );"
    ],
    "gpt_answers2": [
      "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = \"AD\"; ",
      "SELECT ref_template_types.template_type_description  FROM templates  INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE templates.template_id = \"AD\"; ",
      "SELECT ref_template_types.template_type_description  FROM templates, ref_template_types  WHERE templates.template_type_code = ref_template_types.template_type_code  AND templates.template_type_code = \"AD\"; ",
      "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code LIKE \"AD\"; ",
      "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD'; ",
      "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD' LIMIT 1; ",
      "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD' OFFSET 0  FETCH FIRST ROW ONLY; ",
      "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD'; ",
      "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = \"AD\"  LIMIT 1; ",
      "SELECT template_type_description  FROM ref_template_types  WHERE template_type_code IN (\"AD\");"
    ],
    "gpt_answers3": [
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'",
      "SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = 'AD'",
      "SELECT t.template_type_description FROM ref_template_types AS t JOIN templates AS ts ON t.template_type_code = ts.template_type_code WHERE ts.template_type_code = 'AD'",
      "SELECT template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code = 'AD'",
      "SELECT template_type_description FROM ref_template_types INNER JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code = 'AD'",
      "SELECT template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code IN (SELECT template_type_code FROM templates WHERE template_type_code = 'AD')",
      "SELECT ref_template_types.template_type_description FROM ref_template_types, templates WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_type_code = 'AD'",
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates WHERE template_type_code = 'AD')",
      "SELECT template_type_description FROM ref_template_types WHERE EXISTS (SELECT * FROM templates WHERE templates.template_type_code = 'AD')",
      "SELECT template_type_description FROM ref_template_types WHERE template_type_code LIKE 'AD' LIMIT 1"
    ]
  },
  {
    "id": 361,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show');",
      "SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show';",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');",
      "SELECT COUNT(*) FROM paragraphs p, documents d WHERE p.document_id = d.document_id AND d.document_name = 'Summer Show';",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name LIKE '%Summer Show%');",
      "SELECT COUNT(*) FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show';",
      "SELECT COUNT(*) FROM paragraphs INNER JOIN documents ON documents.document_name = 'Summer Show' AND paragraphs.document_id = documents.document_id;",
      "SELECT COUNT(*) FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show';",
      "SELECT COUNT(*) FROM documents INNER JOIN paragraphs ON documents.document_name = 'Summer Show' AND paragraphs.document_id = documents.document_id;",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show') GROUP BY document_id;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show'); ",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show') GROUP BY document_id; ",
      "SELECT COUNT(paragraph_id) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show'); ",
      "SELECT COUNT(paragraph_id) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE document_name = 'Summer Show'; ",
      "SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show'; ",
      "SELECT COUNT(*) FROM paragraphs p, documents d WHERE p.document_id = d.document_id AND d.document_name = 'Summer Show'; ",
      "SELECT COUNT(*) FROM paragraphs p INNER JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show'; ",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show'); ",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show') GROUP BY document_id; ",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show') LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show'); ",
      "SELECT COUNT(*) FROM paragraphs p, documents d WHERE d.document_name = 'Summer Show' AND p.document_id = d.document_id; ",
      "SELECT COUNT(*) FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show'; ",
      "SELECT COUNT(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show'; ",
      "SELECT COUNT(*) FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id AND documents.document_name = 'Summer Show'; ",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show' LIMIT 1); ",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show'); ",
      "SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show') LIMIT 1; ",
      "SELECT COUNT(*) FROM paragraphs, documents WHERE documents.document_name = 'Summer Show' AND paragraphs.document_id = documents.document_id; ",
      "SELECT COUNT(*) FROM paragraphs, documents WHERE documents.document_name = 'Summer Show' AND paragraphs.document_id = documents.document_id LIMIT 1;"
    ]
  },
  {
    "id": 362,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
    "gpt_answers1": [
      "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT paragraph_text FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT paragraph_text, paragraph_id FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE 'Korea'; ",
      "SELECT paragraph_text, paragraph_id, document_id FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea' LIMIT 1; ",
      "SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea' LIMIT 10; ",
      "SELECT paragraph_text FROM paragraphs WHERE paragraph_text = 'Korea' LIMIT 10; ",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%';"
    ],
    "gpt_answers2": [
      "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE 'Korea'; ",
      "SELECT paragraph_text FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT paragraph_text FROM paragraphs WHERE paragraph_text LIKE 'Korea'; ",
      "SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text LIKE 'Korea'; ",
      "SELECT p.paragraph_text FROM paragraphs p WHERE p.paragraph_text = 'Korea'; ",
      "SELECT p.paragraph_text FROM paragraphs p WHERE p.paragraph_text LIKE 'Korea'; ",
      "SELECT paragraph_text FROM paragraphs WHERE paragraph_text = 'Korea' LIMIT 1; ",
      "SELECT paragraph_text FROM paragraphs WHERE paragraph_text LIKE 'Korea' LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea';",
      "SELECT paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea';",
      "SELECT paragraphs.* FROM paragraphs WHERE paragraph_text = 'Korea';",
      "SELECT document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea';",
      "SELECT p.* FROM paragraphs AS p WHERE p.paragraph_text = 'Korea';",
      "SELECT p.paragraph_id, p.document_id, p.other_details FROM paragraphs AS p WHERE p.paragraph_text = 'Korea';",
      "SELECT paragraphs.paragraph_id, paragraphs.document_id, paragraphs.other_details FROM paragraphs WHERE paragraphs.paragraph_text = 'Korea';",
      "SELECT p.paragraph_id, p.document_id, p.other_details FROM paragraphs p WHERE p.paragraph_text = 'Korea';",
      "SELECT paragraphs.paragraph_id, paragraphs.document_id, paragraphs.other_details FROM paragraphs WHERE paragraphs.paragraph_text = 'Korea';",
      "SELECT p.paragraph_id, p.document_id, p.other_details FROM paragraphs AS p WHERE p.paragraph_text = 'Korea';"
    ]
  },
  {
    "id": 363,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
    "gpt_answers1": [
      "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'; ",
      "SELECT paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea'; ",
      "SELECT paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text LIKE '%Korea%'; ",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE 'Korea%'; ",
      "SELECT paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea '; ",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea '; ",
      "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea' COLLATE NOCASE; ",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%' COLLATE NOCASE; ",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE 'Korea%' COLLATE NOCASE;"
    ],
    "gpt_answers2": [
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%';",
      "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea';",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE 'Korea%';",
      "SELECT * FROM paragraphs WHERE paragraph_text = 'Korea ';",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea';",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea% ' ;",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea %';",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE 'Korea %';",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '% Korea%';",
      "SELECT * FROM paragraphs WHERE paragraph_text LIKE '% Korea %';"
    ],
    "gpt_answers3": [
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE '%Korea%' ",
      "SELECT * FROM paragraphs  WHERE paragraph_text = 'Korea' ",
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE instr(paragraph_text, 'Korea') > 0 ",
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE '%Korea %' ",
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE '%Korea_' ",
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE '_Korea%' ",
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE '_Korea_' ",
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE 'Korea %' ",
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE 'Korea_' ",
      "SELECT paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE '%Korea%' OR paragraph_text LIKE '%Korea %' OR paragraph_text LIKE 'Korea%' OR paragraph_text LIKE 'Korea _'"
    ]
  },
  {
    "id": 364,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "gpt_answers1": [
      "SELECT paragraph_id, paragraph_text  FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY' ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs, documents WHERE paragraphs.document_id = documents.document_id AND documents.document_name = 'Welcome to NY' ",
      "SELECT p.paragraph_id, p.paragraph_text  FROM paragraphs p INNER JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY' ",
      "SELECT p.paragraph_id, p.paragraph_text  FROM paragraphs p, documents d WHERE p.document_id = d.document_id AND d.document_name = 'Welcome to NY' ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM paragraphs, documents WHERE paragraphs.document_id = documents.document_id AND documents.document_name = 'Welcome to NY' ",
      "SELECT paragraph_id, paragraph_text  FROM paragraphs WHERE document_id IN ( SELECT document_id  FROM documents  WHERE document_name = 'Welcome to NY' ) ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY' ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = 'Welcome to NY' ",
      "SELECT p.paragraph_id, p.paragraph_text  FROM documents d JOIN paragraphs p ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY' ",
      "SELECT p.paragraph_id, p.paragraph_text  FROM documents d JOIN paragraphs p ON d.document_id = p.document_id WHERE d.document_name = 'Welcome to NY'"
    ],
    "gpt_answers2": [
      "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = \"Welcome to NY\");",
      "SELECT p.paragraph_id, p.paragraph_text FROM paragraphs AS p INNER JOIN documents AS d ON p.document_id = d.document_id WHERE d.document_name = \"Welcome to NY\";",
      "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = \"Welcome to NY\");",
      "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name LIKE \"Welcome to NY\");",
      "SELECT p.paragraph_id, p.paragraph_text FROM paragraphs AS p, documents AS d WHERE p.document_id = d.document_id AND d.document_name = \"Welcome to NY\";",
      "SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');",
      "SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE document_name = 'Welcome to NY';",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY';",
      "SELECT paragraph_id, paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE document_name = 'Welcome to NY';",
      "SELECT p.paragraph_id, p.paragraph_text FROM paragraphs p INNER JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY';"
    ],
    "gpt_answers3": [
      "SELECT paragraph_id, paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY'); ",
      "SELECT paragraph_id, paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY'; ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs  INNER JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY'; ",
      "SELECT p.paragraph_id, p.paragraph_text  FROM paragraphs AS p  JOIN documents AS d ON p.document_id = d.document_id  WHERE d.document_name = 'Welcome to NY'; ",
      "SELECT p.paragraph_id, p.paragraph_text  FROM paragraphs AS p, documents AS d  WHERE p.document_id = d.document_id  AND d.document_name = 'Welcome to NY'; ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs  JOIN documents USING (document_id)  WHERE documents.document_name = 'Welcome to NY'; ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs, documents  WHERE paragraphs.document_id = documents.document_id  AND documents.document_name = 'Welcome to NY'; ",
      "SELECT paragraph_id, paragraph_text  FROM paragraphs  WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY'); ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs  WHERE paragraphs.document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY'); ",
      "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');"
    ]
  },
  {
    "id": 366,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "gpt_answers1": [
      "SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE document_name = 'Customer reviews';",
      "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE document_name = 'Customer reviews';",
      "SELECT p.paragraph_text FROM paragraphs p, documents d WHERE p.document_id = d.document_id AND d.document_name = 'Customer reviews';",
      "SELECT paragraph_text FROM paragraphs, documents WHERE paragraphs.document_id = documents.document_id AND document_name = 'Customer reviews';",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews' LIMIT 1);",
      "SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Customer reviews' LIMIT 1);",
      "SELECT paragraph_text FROM paragraphs WHERE paragraph_id IN (SELECT paragraph_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT paragraphs.paragraph_text FROM paragraphs, documents WHERE paragraphs.document_id = documents.document_id AND documents.document_name = 'Customer reviews';"
    ],
    "gpt_answers2": [
      "SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = \"Customer reviews\" ); ",
      "SELECT paragraph_text FROM paragraphs WHERE document_id IN ( SELECT document_id FROM documents WHERE document_name = \"Customer reviews\" ); ",
      "SELECT paragraphs.paragraph_text FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_name = \"Customer reviews\"; ",
      "SELECT paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = \"Customer reviews\"; ",
      "SELECT paragraphs.paragraph_text FROM paragraphs, documents WHERE paragraphs.document_id = documents.document_id AND documents.document_name = \"Customer reviews\"; ",
      "SELECT paragraph_text FROM paragraphs WHERE document_id IN ( SELECT document_id FROM documents WHERE document_name = \"Customer reviews\" ); ",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = \"Customer reviews\" ); ",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name LIKE '%Customer reviews%' ); ",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name LIKE 'Customer reviews%' ); ",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name LIKE 'Customer rev%' );"
    ],
    "gpt_answers3": [
      "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = \"Customer reviews\") ",
      "SELECT paragraph_text  FROM paragraphs  JOIN documents ON documents.document_id = paragraphs.document_id  WHERE documents.document_name = \"Customer reviews\" ",
      "SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = \"Customer reviews\") ",
      "SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = \"Customer reviews\" ",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = \"Customer reviews\") ",
      "SELECT paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = \"Customer reviews\" ",
      "SELECT paragraphs.paragraph_text  FROM paragraphs  INNER JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = \"Customer reviews\" ",
      "SELECT paragraphs.paragraph_text  FROM paragraphs, documents  WHERE paragraphs.document_id = documents.document_id  AND documents.document_name = \"Customer reviews\" ",
      "SELECT paragraphs.paragraph_text  FROM paragraphs  INNER JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name LIKE \"Customer reviews\" ",
      "SELECT paragraphs.paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name LIKE \"Customer reviews\""
    ]
  },
  {
    "id": 367,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "gpt_answers1": [
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT paragraph_text  FROM paragraphs, documents  WHERE paragraphs.document_id = documents.document_id  AND documents.document_name = 'Customer reviews';",
      "SELECT paragraphs.paragraph_text  FROM paragraphs  INNER JOIN documents  ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Customer reviews';",
      "SELECT paragraphs.paragraph_text  FROM paragraphs, documents  WHERE paragraphs.document_id = documents.document_id  AND documents.document_name = 'Customer reviews';",
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT paragraph_text  FROM paragraphs  JOIN documents  ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Customer reviews';",
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT paragraph_text  FROM paragraphs  JOIN documents  ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Customer reviews';",
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');"
    ],
    "gpt_answers2": [
      "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT p.paragraph_text FROM paragraphs p INNER JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Customer reviews';",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name LIKE 'Customer reviews');",
      "SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');",
      "SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name LIKE 'Customer reviews');",
      "SELECT p.paragraph_text FROM paragraphs p, documents d WHERE p.document_id = d.document_id AND d.document_name = 'Customer reviews';",
      "SELECT p.paragraph_text FROM paragraphs p, documents d WHERE p.document_id = d.document_id AND d.document_name LIKE 'Customer reviews';",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews') LIMIT 10;",
      "SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name LIKE 'Customer reviews') LIMIT 10;",
      "SELECT paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews';"
    ],
    "gpt_answers3": [
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews'); ",
      "SELECT p.paragraph_text  FROM paragraphs p  INNER JOIN documents d ON p.document_id = d.document_id  WHERE d.document_name = 'Customer reviews'; ",
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name LIKE '%Customer reviews%'); ",
      "SELECT paragraph_text  FROM paragraphs p, documents d  WHERE p.document_id = d.document_id  AND d.document_name = 'Customer reviews'; ",
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Customer reviews'); ",
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id IN (SELECT document_id FROM documents WHERE document_name LIKE 'Customer reviews'); ",
      "SELECT p.paragraph_text  FROM paragraphs p  JOIN documents d ON p.document_id = d.document_id  WHERE d.document_name = 'Customer reviews'; ",
      "SELECT p.paragraph_text  FROM documents d, paragraphs p  WHERE p.document_id = d.document_id  AND d.document_name = 'Customer reviews'; ",
      "SELECT paragraph_text  FROM paragraphs p  JOIN documents d USING (document_id)  WHERE d.document_name = 'Customer reviews'; ",
      "SELECT paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews') LIMIT 10;"
    ]
  },
  {
    "id": 374,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 ); ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN ( SELECT paragraphs.document_id, COUNT(paragraphs.paragraph_id) as paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) AS subquery ON documents.document_id = subquery.document_id ORDER BY subquery.paragraph_count DESC LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 ); ",
      "SELECT TOP 1 documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC; ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT COUNT(paragraphs.paragraph_id) as paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) AS subquery ); ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT COUNT(paragraphs.paragraph_id) as paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) AS subquery ) ); ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC FETCH FIRST ROW ONLY; ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN ( SELECT paragraphs.document_id, COUNT(paragraphs.paragraph_id) as paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) AS subquery ON documents.document_id = subquery.document_id ORDER BY subquery.paragraph_count DESC FETCH FIRST ROW ONLY;"
    ],
    "gpt_answers2": [
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(cnt)  FROM ( SELECT COUNT(paragraph_id) as cnt  FROM paragraphs  GROUP BY document_id ) ); ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN ( SELECT document_id, COUNT(paragraph_id) as num_paragraphs  FROM paragraphs  GROUP BY document_id ) AS p ON documents.document_id = p.document_id  ORDER BY num_paragraphs DESC  LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN ( SELECT document_id, COUNT(paragraph_id) as num_paragraphs  FROM paragraphs  GROUP BY document_id ) AS p ON documents.document_id = p.document_id  WHERE num_paragraphs = ( SELECT MAX(num_paragraphs)  FROM ( SELECT COUNT(paragraph_id) as num_paragraphs  FROM paragraphs  GROUP BY document_id ) ); ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN ( SELECT document_id, COUNT(paragraph_id) as num_paragraphs  FROM paragraphs  GROUP BY document_id ) AS p ON documents.document_id = p.document_id  ORDER BY num_paragraphs DESC  LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN ( SELECT document_id, COUNT(paragraph_id) as num_paragraphs  FROM paragraphs  GROUP BY document_id ) AS p ON documents.document_id = p.document_id  WHERE num_paragraphs = ( SELECT MAX(num_paragraphs)  FROM ( SELECT COUNT(paragraph_id) as num_paragraphs  FROM paragraphs  GROUP BY document_id ) ); ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN ( SELECT document_id, COUNT(paragraph_id) as num_paragraphs  FROM paragraphs  GROUP BY document_id ) AS p ON documents.document_id = p.document_id  ORDER BY num_paragraphs DESC  LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(cnt)  FROM ( SELECT COUNT(paragraph_id) as cnt  FROM paragraphs  GROUP BY document_id ) );"
    ],
    "gpt_answers3": [
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 ); ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 ); ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) ) LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) ) ); ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC FETCH FIRST ROW ONLY; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id IN ( SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) ) ); ",
      "SELECT d.document_id, d.document_name FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name HAVING COUNT(p.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) ) LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 ); ",
      "SELECT documents.document_id, documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name HAVING COUNT(paragraphs.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) ) LIMIT 1;"
    ]
  },
  {
    "id": 375,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT documents.document_id, documents.document_name  FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name  FROM documents WHERE documents.document_id = ( SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 ); ",
      "SELECT d.document_id, d.document_name  FROM documents AS d INNER JOIN ( SELECT p.document_id, COUNT(p.paragraph_id) AS paragraph_count FROM paragraphs AS p GROUP BY p.document_id ORDER BY paragraph_count DESC LIMIT 1 ) AS p_count ON d.document_id = p_count.document_id; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT document_id FROM ( SELECT paragraphs.document_id, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ORDER BY paragraph_count DESC LIMIT 1 ) ); ",
      "SELECT d.document_id, d.document_name  FROM documents AS d LEFT JOIN paragraphs AS p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name HAVING COUNT(p.paragraph_id) = ( SELECT MAX(paragraph_count) FROM ( SELECT paragraphs.document_id, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ) ); ",
      "SELECT documents.document_id, documents.document_name  FROM documents INNER JOIN ( SELECT document_id, COUNT(paragraph_id) AS paragraph_count FROM paragraphs GROUP BY document_id ORDER BY paragraph_count DESC LIMIT 1 ) AS max_paragraphs ON documents.document_id = max_paragraphs.document_id; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = ( SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) DESC LIMIT 1 ); ",
      "SELECT documents.document_id, documents.document_name  FROM documents INNER JOIN ( SELECT document_id, COUNT(paragraph_id) AS paragraph_count FROM paragraphs GROUP BY document_id ) AS p_count ON documents.document_id = p_count.document_id WHERE p_count.paragraph_count = ( SELECT MAX(paragraph_count) FROM ( SELECT COUNT(paragraph_id) AS paragraph_count FROM paragraphs GROUP BY document_id ) ); ",
      "SELECT doc.document_id, doc.document_name  FROM documents AS doc INNER JOIN ( SELECT paragraphs.document_id, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 ) AS max_paragraph ON doc.document_id = max_paragraph.document_id; ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN (SELECT document_id, COUNT(paragraph_id) AS paragraph_count FROM paragraphs GROUP BY document_id ORDER BY paragraph_count DESC LIMIT 1) AS max_paragraphs ON documents.document_id = max_paragraphs.document_id;"
    ],
    "gpt_answers2": [
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = (SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1); ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name HAVING COUNT(paragraphs.paragraph_id) = (SELECT MAX(paragraph_count) FROM (SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id) AS subquery); ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name HAVING COUNT(paragraphs.paragraph_id) = (SELECT MAX(paragraph_count) FROM (SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ORDER BY paragraph_count DESC LIMIT 1) AS subquery); ",
      "SELECT documents.document_id, documents.document_name FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.document_id = (SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1) GROUP BY documents.document_id, documents.document_name; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = (SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.document_id = (SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1) GROUP BY paragraphs.document_id) GROUP BY documents.document_id, documents.document_name; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id IN (SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT(paragraphs.paragraph_id) = (SELECT MAX(paragraph_count) FROM (SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id) AS subquery)) ORDER BY documents.document_id LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id IN (SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT(paragraphs.paragraph_id) = (SELECT MAX(paragraph_count) FROM (SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id ORDER BY paragraph_count DESC LIMIT 1) AS subquery)) ORDER BY documents.document_id LIMIT 1; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = (SELECT documents.document_id FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1) GROUP BY documents.document_id, documents.document_name; ",
      "SELECT documents.document_id, documents.document_name FROM documents WHERE documents.document_id = (SELECT documents.document_id FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) = (SELECT MAX(paragraph_count) FROM (SELECT COUNT(paragraphs.paragraph_id) AS paragraph_count FROM paragraphs GROUP BY paragraphs.document_id) AS subquery)) GROUP BY documents.document_id, documents.document_name;"
    ],
    "gpt_answers3": [
      "SELECT document_id, document_name  FROM documents  WHERE document_id = (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM paragraphs GROUP BY document_id))) ",
      "SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1) ",
      "SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id FROM (SELECT document_id, COUNT(*) as cnt FROM paragraphs GROUP BY document_id ORDER BY cnt DESC) LIMIT 1) ",
      "SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id FROM (SELECT document_id, COUNT(*) as cnt FROM paragraphs GROUP BY document_id) as counts WHERE cnt = (SELECT MAX(cnt) FROM (SELECT document_id, COUNT(*) as cnt FROM paragraphs GROUP BY document_id)))) ",
      "SELECT d.document_id, d.document_name FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM paragraphs GROUP BY document_id)) ",
      "SELECT document_id, document_name FROM documents WHERE document_id = (SELECT MAX(document_id) FROM (SELECT document_id, COUNT(*) as cnt FROM paragraphs GROUP BY document_id)) ",
      "SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id FROM (SELECT document_id, COUNT(*) as cnt FROM paragraphs GROUP BY document_id) ORDER BY cnt DESC LIMIT 1) ",
      "SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) = (SELECT COUNT(*) FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1)) ",
      "SELECT d.document_id, d.document_name FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name HAVING COUNT(*) = (SELECT COUNT(*) FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1) ",
      "SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id FROM paragraphs GROUP BY document_id LIMIT 1 OFFSET (SELECT COUNT(*)-1 FROM paragraphs GROUP BY document_id))"
    ]
  },
  {
    "id": 380,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "gpt_answers1": [
      "SELECT documents.document_id  FROM documents  INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT document_id  FROM paragraphs  WHERE paragraph_text = 'Brazil' OR paragraph_text = 'Ireland' ",
      "SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT document_id  FROM documents  WHERE document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil')  AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland') ",
      "SELECT documents.document_id  FROM documents, paragraphs  WHERE documents.document_id = paragraphs.document_id  AND paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id  FROM documents  JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text = 'Brazil'  UNION  SELECT documents.document_id  FROM documents  JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text = 'Ireland' ",
      "SELECT document_id  FROM paragraphs  WHERE paragraph_text = 'Brazil'  INTERSECT  SELECT document_id  FROM paragraphs  WHERE paragraph_text = 'Ireland' ",
      "SELECT documents.document_id  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text = 'Brazil' INTERSECT  SELECT documents.document_id  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id  FROM documents  WHERE EXISTS (SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text = 'Brazil')  AND EXISTS (SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text = 'Ireland')"
    ],
    "gpt_answers2": [
      "SELECT documents.document_id FROM documents INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' OR paragraph_text = 'Ireland' ",
      "SELECT documents.document_id FROM documents WHERE documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' OR paragraph_text = 'Ireland') ",
      "SELECT documents.document_id FROM documents INNER JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' OR paragraph_text = 'Ireland') ",
      "SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id FROM documents, templates, paragraphs WHERE documents.template_id = templates.template_id AND paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT DISTINCT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT documents.document_id FROM documents INNER JOIN templates USING (template_id) INNER JOIN paragraphs USING (document_id) WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT documents.document_id FROM documents JOIN templates ON (documents.template_id = templates.template_id) JOIN paragraphs ON (paragraphs.document_id = documents.document_id) WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland')"
    ],
    "gpt_answers3": [
      "SELECT documents.document_id  FROM documents  JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT documents.document_id  FROM documents, paragraphs  WHERE paragraphs.document_id = documents.document_id  AND paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT documents.document_id  FROM documents  WHERE documents.document_id IN ( SELECT documents.document_id  FROM paragraphs  WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') ) ",
      "SELECT documents.document_id  FROM documents  WHERE documents.document_id = ( SELECT paragraphs.document_id  FROM paragraphs  WHERE paragraphs.paragraph_text = 'Brazil' ) AND documents.document_id = ( SELECT paragraphs.document_id  FROM paragraphs  WHERE paragraphs.paragraph_text = 'Ireland' ) ",
      "SELECT documents.document_id  FROM documents  WHERE documents.document_id = ( SELECT documents.document_id  FROM documents  JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text = 'Brazil' ) AND documents.document_id = ( SELECT documents.document_id  FROM documents  JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text = 'Ireland' ) ",
      "SELECT documents.document_id  FROM documents  JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text = 'Brazil'  INTERSECT  SELECT documents.document_id  FROM documents  JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id  FROM documents  LEFT JOIN paragraphs ON paragraphs.document_id = documents.document_id  WHERE documents.document_id IS NOT NULL  AND paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT d.document_id  FROM documents d, paragraphs p  WHERE d.document_id = p.document_id  AND p.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT DISTINCT documents.document_id  FROM documents  INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text = 'Brazil'  OR paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id  FROM documents  WHERE documents.document_id IN ( SELECT paragraphs.document_id  FROM paragraphs  WHERE paragraphs.paragraph_text = 'Brazil'  UNION ALL  SELECT paragraphs.document_id  FROM paragraphs  WHERE paragraphs.paragraph_text = 'Ireland' )"
    ]
  },
  {
    "id": 381,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "gpt_answers1": [
      "SELECT documents.document_id  FROM documents INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' AND documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'); ",
      "SELECT documents.document_id  FROM documents, templates, paragraphs WHERE documents.template_id = templates.template_id AND paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text = 'Brazil' AND documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'); ",
      "SELECT documents.document_id  FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' AND documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'); ",
      "SELECT documents.document_id  FROM documents JOIN templates USING (template_id) JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' AND documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'); ",
      "SELECT document_id  FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'); ",
      "SELECT documents.document_id  FROM documents INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland' GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_text) = 2; ",
      "SELECT documents.document_id  FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil') AND documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland'); ",
      "SELECT DISTINCT documents.document_id  FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' AND EXISTS (SELECT * FROM paragraphs WHERE paragraph_text = 'Ireland' AND document_id = documents.document_id); ",
      "SELECT documents.document_id  FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE (paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland') GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_text) = 2; ",
      "SELECT documents.document_id  FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')) GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_text) = 2;"
    ],
    "gpt_answers2": [
      "SELECT documents.document_id  FROM documents INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND paragraphs.paragraph_text LIKE '%Ireland%'; ",
      "SELECT documents.document_id  FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil'  OR paragraphs.paragraph_text = 'Ireland'; ",
      "SELECT documents.document_id  FROM documents, templates, paragraphs WHERE documents.template_id = templates.template_id AND paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text LIKE '%Brazil%'  AND paragraphs.paragraph_text LIKE '%Ireland%'; ",
      "SELECT documents.document_id  FROM documents JOIN templates USING (template_id) JOIN paragraphs USING (document_id) WHERE paragraphs.paragraph_text LIKE '%Brazil%'  AND paragraphs.paragraph_text LIKE '%Ireland%'; ",
      "SELECT documents.document_id  FROM documents LEFT JOIN templates ON documents.template_id = templates.template_id LEFT JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil%'  AND paragraphs.paragraph_text LIKE '%Ireland%'; ",
      "SELECT documents.document_id  FROM documents JOIN templates ON templates.template_id = documents.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_text) = 2; ",
      "SELECT documents.document_id  FROM documents INNER JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_id IN ( SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.paragraph_text = 'Brazil' INTERSECT SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.paragraph_text = 'Ireland' ); ",
      "SELECT documents.document_id  FROM documents INNER JOIN templates ON documents.template_id = templates.template_id WHERE EXISTS ( SELECT 1 FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text = 'Brazil' )  AND EXISTS ( SELECT 1 FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text = 'Ireland' ); ",
      "SELECT documents.document_id  FROM documents INNER JOIN templates ON templates.template_id = documents.template_id WHERE documents.document_id IN ( SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.paragraph_text LIKE '%Brazil%' UNION SELECT paragraphs.document_id FROM paragraphs WHERE paragraphs.paragraph_text LIKE '%Ireland%' ); ",
      "SELECT documents.document_id  FROM documents INNER JOIN templates ON templates.template_id = documents.template_id INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil_%'  OR paragraphs.paragraph_text LIKE '%Ireland_%' GROUP BY documents.document_id;"
    ],
    "gpt_answers3": [
      "SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id FROM documents INNER JOIN templates ON documents.template_id = templates.template_id INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland') ",
      "SELECT documents.document_id FROM documents JOIN templates USING (template_id) JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil%' AND paragraphs.paragraph_text LIKE '%Ireland%' ",
      "SELECT documents.document_id FROM documents, templates, paragraphs WHERE documents.template_id = templates.template_id AND paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text = 'Brazil' AND paragraphs.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil%' INTERSECT SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Ireland%' ",
      "SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE EXISTS ( SELECT * FROM paragraphs p1 WHERE p1.document_id = paragraphs.document_id AND p1.paragraph_text = 'Brazil' ) AND EXISTS ( SELECT * FROM paragraphs p2 WHERE p2.document_id = paragraphs.document_id AND p2.paragraph_text = 'Ireland' ) ",
      "SELECT d.document_id FROM documents d JOIN templates t ON d.template_id = t.template_id JOIN paragraphs p1 ON d.document_id = p1.document_id JOIN paragraphs p2 ON d.document_id = p2.document_id WHERE p1.paragraph_text = 'Brazil' AND p2.paragraph_text = 'Ireland' ",
      "SELECT documents.document_id FROM documents INNER JOIN templates ON documents.template_id = templates.template_id WHERE EXISTS ( SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text = 'Brazil' ) AND EXISTS ( SELECT * FROM paragraphs WHERE paragraphs.document_id = documents.document_id AND paragraphs.paragraph_text = 'Ireland' ) ",
      "SELECT documents.document_id FROM documents LEFT JOIN templates ON documents.template_id = templates.template_id LEFT JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text LIKE '%Brazil%' OR paragraphs.paragraph_text LIKE '%Ireland%' GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_text) = 2 ",
      "SELECT documents.document_id FROM documents LEFT JOIN templates ON documents.template_id = templates.template_id LEFT JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE (paragraphs.paragraph_text = 'Brazil' OR paragraphs.paragraph_text = 'Ireland') GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_text) = 2"
    ]
  },
  {
    "id": 388,
    "db_id": "course_teach",
    "gold": "select name from teacher where hometown != \"little lever urban district\"",
    "gpt_answers1": [
      "SELECT name FROM teacher WHERE hometown <> \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE NOT hometown = \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE hometown != \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE hometown NOT LIKE \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE hometown NOT IN (\"Little Lever Urban District\");",
      "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';",
      "SELECT name FROM teacher WHERE hometown IS NOT 'Little Lever Urban District';",
      "SELECT name FROM teacher WHERE NOT (hometown = 'Little Lever Urban District');",
      "SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';",
      "SELECT name FROM teacher WHERE hometown NOT LIKE 'Little Lever Urban District';"
    ],
    "gpt_answers2": [
      "SELECT name FROM teacher WHERE hometown <> \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE NOT hometown = \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE hometown != \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE hometown NOT LIKE \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE hometown NOT IN (\"Little Lever Urban District\");",
      "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';",
      "SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';",
      "SELECT name FROM teacher WHERE hometown NOT LIKE 'Little Lever Urban District';",
      "SELECT name FROM teacher WHERE hometown NOT IN ('Little Lever Urban District');",
      "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District' COLLATE NOCASE;"
    ],
    "gpt_answers3": [
      "SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District'; ",
      "SELECT name  FROM teacher  WHERE NOT hometown = 'Little Lever Urban District'; ",
      "SELECT name  FROM teacher  WHERE hometown <> 'Little Lever Urban District'; ",
      "SELECT name  FROM teacher  WHERE hometown NOT LIKE 'Little Lever Urban District'; ",
      "SELECT name  FROM teacher  WHERE hometown NOT IN ('Little Lever Urban District'); ",
      "SELECT name  FROM teacher  WHERE hometown NOT BETWEEN 'Little Lever Urban District' AND 'Little Lever Urban District'; ",
      "SELECT name  FROM teacher  WHERE hometown NOT EXISTS (SELECT hometown FROM teacher WHERE hometown = 'Little Lever Urban District'); ",
      "SELECT name  FROM teacher  WHERE hometown NOT REGEXP 'Little Lever Urban District'; ",
      "SELECT name  FROM teacher  WHERE hometown NOT GLOB 'Little Lever Urban District'; ",
      "SELECT name  FROM teacher  WHERE hometown NOT MATCH 'Little Lever Urban District';"
    ]
  },
  {
    "id": 389,
    "db_id": "course_teach",
    "gold": "select name from teacher where hometown != \"little lever urban district\"",
    "gpt_answers1": [
      "SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'; ",
      "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'; ",
      "SELECT name FROM teacher WHERE NOT (hometown = 'Little Lever Urban District'); ",
      "SELECT name FROM teacher WHERE hometown NOT LIKE 'Little Lever Urban District'; ",
      "SELECT name FROM teacher WHERE hometown NOT IN ('Little Lever Urban District'); ",
      "SELECT name FROM teacher WHERE hometown NOT BETWEEN 'Little Lever Urban District' AND 'Little Lever Urban District'; ",
      "SELECT name FROM teacher WHERE hometown NOT EXISTS(SELECT hometown FROM teacher WHERE hometown = 'Little Lever Urban District'); ",
      "SELECT name FROM teacher WHERE hometown != (SELECT hometown FROM teacher WHERE hometown = 'Little Lever Urban District'); ",
      "SELECT name FROM teacher WHERE hometown NOT IN (SELECT hometown FROM teacher WHERE hometown = 'Little Lever Urban District'); ",
      "SELECT name FROM teacher EXCEPT SELECT name FROM teacher WHERE hometown = 'Little Lever Urban District';"
    ],
    "gpt_answers2": [
      "SELECT name FROM teacher WHERE hometown <> \"Little Lever Urban District\"",
      "SELECT name FROM teacher WHERE NOT hometown = \"Little Lever Urban District\"",
      "SELECT name FROM teacher WHERE hometown != \"Little Lever Urban District\"",
      "SELECT name FROM teacher WHERE hometown NOT LIKE \"Little Lever Urban District\"",
      "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'",
      "SELECT name FROM teacher WHERE NOT hometown = 'Little Lever Urban District'",
      "SELECT name FROM teacher WHERE hometown NOT IN ('Little Lever Urban District')",
      "SELECT name FROM teacher WHERE NOT (hometown = 'Little Lever Urban District')",
      "SELECT name FROM teacher WHERE hometown <> \"Little Lever Urban District\";",
      "SELECT name FROM teacher WHERE NOT (hometown = \"Little Lever Urban District\");"
    ],
    "gpt_answers3": [
      "SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'; ",
      "SELECT name FROM teacher WHERE NOT hometown = 'Little Lever Urban District'; ",
      "SELECT teacher.name FROM teacher WHERE teacher.hometown != 'Little Lever Urban District'; ",
      "SELECT teacher.name FROM teacher WHERE teacher.hometown NOT LIKE 'Little Lever Urban District'; ",
      "SELECT teacher.name FROM teacher WHERE teacher.hometown NOT IN ('Little Lever Urban District'); ",
      "SELECT name FROM teacher WHERE hometown NOT LIKE '%Little Lever Urban District%'; ",
      "SELECT name FROM teacher WHERE hometown NOT GLOB 'Little Lever Urban District'; ",
      "SELECT name FROM teacher WHERE hometown NOT REGEXP 'Little Lever Urban District'; ",
      "SELECT name FROM teacher WHERE hometown NOT MATCH 'Little Lever Urban District'; ",
      "SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL;"
    ]
  },
  {
    "id": 408,
    "db_id": "course_teach",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "gpt_answers1": [
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2); ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2); ",
      "SELECT name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY name HAVING COUNT(course_arrange.course_id) >= 2; ",
      "SELECT t.name FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name HAVING COUNT(DISTINCT ca.course_id) >= 2; ",
      "SELECT t.name FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id, t.name HAVING COUNT(ca.course_id) >= 2; ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange WHERE course_id IN (SELECT course_id FROM course_arrange GROUP BY course_id HAVING COUNT(teacher_id) >= 2) GROUP BY teacher_id); ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM (SELECT teacher_id, COUNT(course_id) as course_count FROM course_arrange GROUP BY teacher_id) WHERE course_count >= 2); ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM (SELECT teacher_id, COUNT(DISTINCT course_id) as distinct_course_count FROM course_arrange GROUP BY teacher_id) WHERE distinct_course_count >= 2); ",
      "SELECT t.name FROM teacher t INNER JOIN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2) c ON t.teacher_id = c.teacher_id; ",
      "SELECT t.name FROM teacher t WHERE EXISTS (SELECT 1 FROM course_arrange ca WHERE ca.teacher_id = t.teacher_id GROUP BY ca.teacher_id HAVING COUNT(DISTINCT ca.course_id) >= 2);"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2; ",
      "SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2); ",
      "SELECT t.name FROM teacher t INNER JOIN (SELECT teacher_id, COUNT(course_id) AS courses FROM course_arrange GROUP BY teacher_id HAVING courses >= 2) ca ON t.teacher_id = ca.teacher_id; ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2); ",
      "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(course_arrange.course_id) >= 2; ",
      "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2; ",
      "SELECT t.name FROM teacher AS t WHERE EXISTS (SELECT 1 FROM course_arrange AS ca WHERE ca.teacher_id = t.teacher_id GROUP BY ca.teacher_id HAVING COUNT(DISTINCT ca.course_id) >= 2); ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2); ",
      "SELECT DISTINCT t.name FROM teacher t INNER JOIN (SELECT teacher_id, COUNT(DISTINCT course_id) as courses FROM course_arrange GROUP BY teacher_id) ca ON t.teacher_id = ca.teacher_id WHERE ca.courses >= 2; ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2);"
    ],
    "gpt_answers3": [
      "SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id HAVING COUNT(ca.course_id) >= 2; ",
      "SELECT t.name FROM teacher t WHERE EXISTS (SELECT 1 FROM course_arrange ca WHERE t.teacher_id = ca.teacher_id GROUP BY ca.teacher_id HAVING COUNT(DISTINCT ca.course_id) >= 2); ",
      "SELECT DISTINCT t.name FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name HAVING COUNT(ca.course_id) >= 2; ",
      "SELECT DISTINCT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id HAVING COUNT(DISTINCT ca.course_id) >= 2; ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2); ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2); ",
      "SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name HAVING COUNT(DISTINCT ca.course_id) >= 2; ",
      "SELECT DISTINCT t.name FROM teacher t JOIN course_arrange ca1 ON t.teacher_id = ca1.teacher_id JOIN course_arrange ca2 ON t.teacher_id = ca2.teacher_id WHERE ca1.course_id <> ca2.course_id; ",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(*) >= 2); ",
      "SELECT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;"
    ]
  },
  {
    "id": 409,
    "db_id": "course_teach",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "gpt_answers1": [
      "SELECT teacher.name  FROM teacher  INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.teacher_id  HAVING COUNT(DISTINCT course_arrange.course_id) >= 2; ",
      "SELECT teacher.name  FROM teacher  WHERE teacher.teacher_id IN ( SELECT teacher_id  FROM course_arrange  GROUP BY teacher_id  HAVING COUNT(DISTINCT course_id) >= 2 ); ",
      "SELECT DISTINCT teacher.name  FROM teacher  INNER JOIN ( SELECT teacher_id  FROM course_arrange  GROUP BY teacher_id  HAVING COUNT(DISTINCT course_id) >= 2 ) teacher_courses ON teacher.teacher_id = teacher_courses.teacher_id; ",
      "SELECT teacher.name  FROM teacher, course_arrange  WHERE teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.teacher_id  HAVING COUNT(DISTINCT course_arrange.course_id) >= 2; ",
      "SELECT teacher.name  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.teacher_id  HAVING COUNT(DISTINCT course_arrange.course_id) >= 2; ",
      "SELECT teacher.name  FROM teacher  WHERE EXISTS ( SELECT 1  FROM course_arrange  WHERE teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher_id  HAVING COUNT(DISTINCT course_id) >= 2 ); ",
      "SELECT teacher.name  FROM teacher  INNER JOIN ( SELECT teacher_id  FROM course_arrange  GROUP BY teacher_id  HAVING COUNT(course_id) >= 2 ) teacher_courses ON teacher.teacher_id = teacher_courses.teacher_id; ",
      "SELECT teacher.name  FROM teacher  WHERE teacher.teacher_id IN ( SELECT teacher_id  FROM course_arrange  GROUP BY teacher_id  HAVING COUNT(course_id) >= 2 ); ",
      "SELECT name  FROM teacher  WHERE teacher_id IN ( SELECT teacher_id  FROM course_arrange  GROUP BY teacher_id  HAVING COUNT(course_id) >= 2 ); ",
      "SELECT name  FROM teacher  WHERE EXISTS ( SELECT 1  FROM course_arrange  WHERE teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher_id  HAVING COUNT(DISTINCT course_id) >= 2 );"
    ],
    "gpt_answers2": [
      "SELECT teacher.name  FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(course_arrange.course_id) >= 2; ",
      "SELECT teacher.name FROM teacher WHERE EXISTS ( SELECT * FROM course_arrange WHERE course_arrange.teacher_id = teacher.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(course_arrange.course_id) >= 2 ); ",
      "SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2 ); ",
      "SELECT DISTINCT teacher.name FROM teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(course_arrange.course_id) >= 2; ",
      "SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2; ",
      "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2 ORDER BY teacher.name; ",
      "SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2 ); ",
      "SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_arrange.course_id) >= 2; ",
      "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(*) >= 2; ",
      "SELECT teacher.name FROM teacher JOIN ( SELECT teacher_id, COUNT(course_id) AS course_count FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2 ) AS subquery ON teacher.teacher_id = subquery.teacher_id;"
    ],
    "gpt_answers3": [
      "SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(course_arrange.course_id) >= 2;",
      "SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2);",
      "SELECT t.name FROM teacher t, course_arrange ca WHERE t.teacher_id = ca.teacher_id GROUP BY t.name HAVING COUNT(ca.course_id) >= 2;",
      "SELECT t.name FROM teacher AS t INNER JOIN course_arrange AS ca ON t.teacher_id = ca.teacher_id GROUP BY t.name HAVING COUNT(ca.course_id) >= 2;",
      "SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(*) >= 2;",
      "SELECT teacher.name FROM teacher WHERE EXISTS(SELECT * FROM course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher_id HAVING COUNT(*) >= 2);",
      "SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(*) >= 2);",
      "SELECT teacher.name FROM teacher JOIN (SELECT teacher_id, COUNT(*) AS num_courses FROM course_arrange GROUP BY teacher_id HAVING num_courses >= 2) AS temp ON teacher.teacher_id = temp.teacher_id;",
      "SELECT DISTINCT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IN (SELECT course_id FROM course_arrange WHERE teacher_id = teacher.teacher_id HAVING COUNT(course_id) >= 2);",
      "SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(DISTINCT course_arrange.course_id) >= 2;"
    ]
  },
  {
    "id": 421,
    "db_id": "museum_visit",
    "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT v.visitor_id, v.name, v.level_of_membership FROM visit AS v JOIN ( SELECT visitor_id, SUM(total_spent) AS total FROM visit GROUP BY visitor_id ORDER BY total DESC LIMIT 1 ) AS t ON v.visitor_id = t.visitor_id ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN ( SELECT visitor_id, SUM(total_spent) AS total FROM visit GROUP BY visitor_id ORDER BY total DESC LIMIT 1 ) AS v ON visitor.id = v.visitor_id ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id = ( SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY SUM(total_spent) DESC LIMIT 1 ) ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id = ( SELECT visitor_id FROM visit WHERE total_spent = ( SELECT MAX(total_spent) FROM visit ) ) ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id = ( SELECT visitor_id FROM ( SELECT visitor_id, SUM(total_spent) AS total FROM visit GROUP BY visitor_id ) WHERE total = ( SELECT MAX(total) FROM ( SELECT visitor_id, SUM(total_spent) AS total FROM visit GROUP BY visitor_id ) ) ) ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id = ( SELECT visitor_id FROM visit GROUP BY visitor_id HAVING SUM(total_spent) = ( SELECT MAX(total_spent) FROM ( SELECT visitor_id, SUM(total_spent) AS total_spent FROM visit GROUP BY visitor_id ) ) ) ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id HAVING SUM(total_spent) = ( SELECT MAX(total_spent) FROM ( SELECT visitor_id, SUM(total_spent) AS total_spent FROM visit GROUP BY visitor_id )  ) ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership HAVING SUM(total_spent) = ( SELECT MAX(total_spent) FROM ( SELECT visitor_id, SUM(total_spent) AS total_spent FROM visit GROUP BY visitor_id ) ) ",
      "SELECT DISTINCT v.visitor_id, v.name, v.level_of_membership FROM visit AS v JOIN ( SELECT visitor_id, SUM(total_spent) AS total FROM visit GROUP BY visitor_id ORDER BY total DESC LIMIT 1 ) AS t ON v.visitor_id = t.visitor_id ",
      "SELECT v.visitor_id, v.name, v.level_of_membership FROM visit AS v JOIN ( SELECT visitor_id, MAX(total_spent) AS total FROM visit GROUP BY visitor_id ORDER BY total DESC LIMIT 1 ) AS t ON v.visitor_id = t.visitor_id"
    ],
    "gpt_answers2": [
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id IN ( SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY SUM(total_spent) DESC LIMIT 10 ); ",
      "SELECT DISTINCT visitor.id, visitor.name, visitor.level_of_membership FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id WHERE visit.total_spent = ( SELECT MAX(total_spent) FROM visit ) LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id IN ( SELECT visitor_id FROM visit WHERE total_spent = ( SELECT MAX(total_spent) FROM visit ) ); ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE (SELECT SUM(total_spent) FROM visit WHERE visit.visitor_id = visitor.id) = ( SELECT MAX(total_spent) FROM (SELECT visitor_id, SUM(total_spent) AS total_spent FROM visit GROUP BY visitor_id) ) LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id = ( SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY SUM(total_spent) DESC LIMIT 1 ); ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id = ( SELECT visitor_id FROM visit ORDER BY total_spent DESC LIMIT 1 ); ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor INNER JOIN visit ON visitor.id = visit.visitor_id WHERE visit.total_spent = ( SELECT MAX(total_spent) FROM visit ) GROUP BY visitor.id, visitor.name, visitor.level_of_membership LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN ( SELECT visitor_id, SUM(total_spent) AS total_spent FROM visit GROUP BY visitor_id ) AS total_spent_per_visitor ON visitor.id = total_spent_per_visitor.visitor_id WHERE total_spent_per_visitor.total_spent = ( SELECT MAX(total_spent) FROM ( SELECT visitor_id, SUM(total_spent) AS total_spent FROM visit GROUP BY visitor_id ) ) LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.id IN ( SELECT visitor_id FROM visit GROUP BY visitor_id HAVING SUM(total_spent) = ( SELECT MAX(total_spent) FROM visit ) ) LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id IN ( SELECT visit.visitor_id FROM visit GROUP BY visit.visitor_id ORDER BY SUM(visit.total_spent) DESC LIMIT 10 ); ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership HAVING SUM(visit.total_spent) = ( SELECT MAX(total_spent_sum) FROM ( SELECT SUM(total_spent) AS total_spent_sum FROM visit GROUP BY visitor_id ) ) LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id IN ( SELECT visitor_id FROM visit GROUP BY visitor_id HAVING SUM(total_spent) = ( SELECT MAX(total_spent_sum) FROM ( SELECT SUM(total_spent) AS total_spent_sum FROM visit GROUP BY visitor_id ) ) ) LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM ( SELECT visitor_id, SUM(total_spent) AS total_spent_sum FROM visit GROUP BY visitor_id ORDER BY total_spent_sum DESC LIMIT 10 ) AS top_visitors JOIN visitor ON top_visitors.visitor_id = visitor.id; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN ( SELECT visitor_id, SUM(total_spent) AS total_spent_sum FROM visit GROUP BY visitor_id ORDER BY total_spent_sum DESC LIMIT 10 ) AS top_visitors ON visitor.id = top_visitors.visitor_id; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY MAX(total_spent) DESC LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id IN ( SELECT visit.visitor_id FROM visit GROUP BY visit.visitor_id ORDER BY MAX(total_spent) DESC LIMIT 10 ); ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id IN ( SELECT visitor_id FROM visit GROUP BY visitor_id HAVING MAX(total_spent) = ( SELECT MAX(total_spent_sum) FROM ( SELECT MAX(total_spent) AS total_spent_sum FROM visit GROUP BY visitor_id ) ) ) LIMIT 10; ",
      "SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.id IN ( SELECT visit.visitor_id FROM visit GROUP BY visit.visitor_id HAVING SUM(visit.total_spent) = ( SELECT MAX(total_spent_sum) FROM ( SELECT SUM(total_spent) AS total_spent_sum FROM visit GROUP BY visitor_id ) ) ) LIMIT 10;"
    ]
  },
  {
    "id": 428,
    "db_id": "museum_visit",
    "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year > 2010 ) ) ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit, museum WHERE visit.museum_id = museum.museum_id AND museum.open_year > 2010 ) ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON museum.open_year > 2010 AND visit.museum_id = museum.museum_id ) ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id AND museum.open_year > 2010 ) ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT DISTINCT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year > 2010 ) ) ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit JOIN museum USING(museum_id) WHERE open_year > 2010 ) ",
      "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id NOT IN ( SELECT museum_id FROM museum WHERE open_year > 2010 ) ",
      "SELECT COUNT(*) FROM visitor LEFT JOIN visit ON visitor.id = visit.visitor_id LEFT JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year <= 2010 OR museum.open_year IS NULL;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year <= 2010); ",
      "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id NOT IN (SELECT museum_id FROM museum WHERE open_year > 2010); ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT DISTINCT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2010)); ",
      "SELECT COUNT(visitor_id) FROM visit WHERE museum_id NOT IN (SELECT museum_id FROM museum WHERE open_year > 2010) GROUP BY visitor_id; ",
      "SELECT COUNT(*) FROM visit v LEFT JOIN museum m ON v.museum_id = m.museum_id WHERE m.open_year <= 2010 AND m.museum_id IS NULL; ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT DISTINCT v.visitor_id FROM visit v JOIN museum m ON v.museum_id = m.museum_id WHERE m.open_year > 2010); ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT DISTINCT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2010)) GROUP BY visitor_id; ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE open_year > 2010); ",
      "SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit, museum WHERE visit.museum_id = museum.museum_id AND museum.open_year > 2010); ",
      "SELECT COUNT(*) FROM visitor LEFT JOIN (SELECT DISTINCT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE open_year > 2010) AS sub_query ON visitor.id = sub_query.visitor_id WHERE sub_query.visitor_id IS NULL;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT visitor_id) FROM visitor WHERE visitor_id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE visitor_id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(DISTINCT visitor_id) FROM visitor WHERE visitor.id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(DISTINCT visitor_id) FROM visitor WHERE visitor.id NOT IN ( SELECT DISTINCT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(DISTINCT visitor_id) FROM visitor WHERE visitor.id NOT IN ( SELECT DISTINCT visitor_id FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year > 2010 ) ) ",
      "SELECT COUNT(DISTINCT visitor.id) FROM visitor LEFT JOIN visit ON visitor.id = visit.visitor_id LEFT JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year <= 2010 OR museum.open_year IS NULL ",
      "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE visit.visitor_id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE visitor_id NOT IN ( SELECT DISTINCT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(visitor_id) FROM visitor WHERE visitor.id NOT IN ( SELECT DISTINCT visitor_id FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 ) ",
      "SELECT COUNT(visitor_id) FROM visitor WHERE visitor.id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 )"
    ]
  },
  {
    "id": 435,
    "db_id": "wta_1",
    "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "gpt_answers1": [
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\" OR loser_ioc = \"USA\") ",
      "SELECT p.first_name, p.birth_date  FROM players p JOIN matches m ON p.player_id = m.winner_id OR p.player_id = m.loser_id WHERE m.winner_ioc = \"USA\" ",
      "SELECT first_name, birth_date  FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\") UNION SELECT first_name, birth_date  FROM players WHERE player_id IN (SELECT loser_id FROM matches WHERE loser_ioc = \"USA\") ",
      "SELECT p.first_name, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_ioc = \"USA\" UNION SELECT p.first_name, p.birth_date FROM players p JOIN matches m ON p.player_id = m.loser_id WHERE m.loser_ioc = \"USA\" ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT player_id FROM matches WHERE winner_ioc = \"USA\" OR loser_ioc = \"USA\") ",
      "SELECT p.first_name, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id OR p.player_id = m.loser_id WHERE m.winner_ioc = \"USA\" OR m.loser_ioc = \"USA\" ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\") OR player_id IN (SELECT loser_id FROM matches WHERE loser_ioc = \"USA\") ",
      "SELECT p.first_name, p.birth_date FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.loser_id WHERE m1.winner_ioc = \"USA\" OR m2.loser_ioc = \"USA\" ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\") OR player_id IN (SELECT loser_id FROM matches WHERE loser_ioc = \"USA\") ",
      "SELECT p.first_name, p.birth_date FROM players p JOIN (SELECT winner_id, loser_id, winner_ioc, loser_ioc FROM matches WHERE winner_ioc = \"USA\" OR loser_ioc = \"USA\") m ON p.player_id = m.winner_id OR p.player_id = m.loser_id"
    ],
    "gpt_answers2": [
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\");  ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN ((SELECT winner_id FROM matches WHERE winner_ioc = \"USA\") UNION (SELECT loser_id FROM matches WHERE winner_ioc = \"USA\"));  ",
      "SELECT players.first_name, players.birth_date FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_ioc = \"USA\";  ",
      "SELECT P.first_name, P.birth_date FROM players AS P INNER JOIN matches AS M ON P.player_id = M.winner_id WHERE M.winner_ioc = \"USA\";  ",
      "SELECT players.first_name, players.birth_date FROM players, matches WHERE players.player_id = matches.winner_id AND matches.winner_ioc = \"USA\";  ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = 'USA' GROUP BY winner_id);  ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = 'USA' AND EXISTS (SELECT 1 FROM rankings WHERE rankings.player_id = winner_id));  ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = 'USA') AND player_id IN (SELECT player_id FROM rankings);  ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = 'USA') AND player_id IN (SELECT player_id FROM rankings WHERE ranking_date = (SELECT MAX(ranking_date) FROM rankings));  ",
      "SELECT p.first_name, p.birth_date FROM players AS p INNER JOIN matches AS m ON p.player_id = m.winner_id WHERE m.winner_ioc = 'USA';"
    ],
    "gpt_answers3": [
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\" UNION SELECT loser_id FROM matches WHERE winner_ioc = \"USA\"); ",
      "SELECT players.first_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id WHERE matches.winner_ioc = \"USA\"; ",
      "SELECT players.first_name, players.birth_date FROM players, matches WHERE (players.player_id = matches.winner_id OR players.player_id = matches.loser_id) AND matches.winner_ioc = \"USA\"; ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\") OR player_id IN (SELECT loser_id FROM matches WHERE winner_ioc = \"USA\"); ",
      "SELECT players.first_name, players.birth_date FROM players INNER JOIN matches ON (players.player_id = matches.winner_id OR players.player_id = matches.loser_id) AND matches.winner_ioc = \"USA\"; ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\") UNION SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT loser_id FROM matches WHERE winner_ioc = \"USA\"); ",
      "SELECT players.first_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_ioc = \"USA\" UNION SELECT players.first_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.loser_id WHERE matches.winner_ioc = \"USA\"; ",
      "SELECT first_name, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = \"USA\") AND player_id IN (SELECT loser_id FROM matches WHERE winner_ioc = \"USA\"); ",
      "SELECT players.first_name, players.birth_date FROM players, matches WHERE players.player_id = matches.winner_id AND matches.winner_ioc = \"USA\" UNION SELECT players.first_name, players.birth_date FROM players, matches WHERE players.player_id = matches.loser_id AND matches.winner_ioc = \"USA\"; ",
      "SELECT first_name, birth_date FROM players JOIN matches ON players.player_id = matches.winner_id AND matches.winner_ioc = \"USA\" UNION SELECT first_name, birth_date FROM players JOIN matches ON players.player_id = matches.loser_id AND matches.winner_ioc = \"USA\";"
    ]
  },
  {
    "id": 438,
    "db_id": "wta_1",
    "gold": "SELECT avg(winner_rank) FROM matches",
    "gpt_answers1": [
      "SELECT AVG(rankings.ranking)  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  INNER JOIN rankings ON players.player_id = rankings.player_id ",
      "SELECT AVG(ranking)  FROM rankings  WHERE rankings.player_id IN (SELECT winner_id FROM matches) ",
      "SELECT AVG(ranking)  FROM rankings, matches  WHERE rankings.player_id = matches.winner_id ",
      "SELECT AVG(ranking)  FROM rankings  JOIN players ON rankings.player_id = players.player_id  WHERE players.player_id IN (SELECT winner_id FROM matches) ",
      "SELECT AVG(rankings.ranking)  FROM matches, players, rankings  WHERE matches.winner_id = players.player_id  AND players.player_id = rankings.player_id ",
      "SELECT AVG(rankings.ranking)  FROM matches, players  JOIN rankings ON players.player_id = rankings.player_id  WHERE matches.winner_id = players.player_id ",
      "SELECT AVG(rankings.ranking)  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON players.player_id = rankings.player_id ",
      "SELECT AVG(rankings.ranking)  FROM players  JOIN matches ON players.player_id = matches.winner_id  JOIN rankings ON players.player_id = rankings.player_id ",
      "SELECT AVG(rankings.ranking) FROM rankings  JOIN players ON vectors.player_id = matches.winner_id  JOIN rankings ON players.player_id = rankings.player_id  WHERE rankings.ranking IS NOT NULL ",
      "SELECT AVG(ranking)  FROM rankings  WHERE player_id = (SELECT winner_id FROM matches)"
    ],
    "gpt_answers2": [
      "SELECT AVG(ranking) FROM matches INNER JOIN rankings ON matches.winner_id = rankings.player_id ",
      "SELECT AVG(rank) FROM matches, rankings WHERE matches.winner_id = rankings.player_id ",
      "SELECT AVG(rank) FROM matches, rankings, players WHERE matches.winner_id = rankings.player_id AND matches.winner_id = players.player_id ",
      "SELECT AVG(ranking) FROM matches LEFT JOIN rankings ON matches.winner_id = rankings.player_id ",
      "SELECT AVG(ranking) FROM matches, rankings WHERE matches.winner_id = rankings.player_id GROUP BY matches.winner_id ",
      "SELECT AVG(rank) FROM matches INNER JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY matches.winner_id ",
      "SELECT AVG(ranking) FROM matches LEFT JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY ranks.ranking ",
      "SELECT AVG(rank) FROM matches INNER JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY players.player_id ",
      "SELECT AVG(rank) FROM matches, rankings WHERE matches.winner_id = rankings.player_id GROUP BY matches.match_num ",
      "SELECT AVG(ranking) FROM matches LEFT JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY matches.tourney_date"
    ],
    "gpt_answers3": [
      "SELECT AVG(rankings.ranking) FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id ",
      "SELECT AVG(rankings.ranking) FROM matches, players, rankings WHERE matches.winner_id = players.player_id AND players.player_id = rankings.player_id ",
      "SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches) ",
      "SELECT AVG(rank) FROM ( SELECT rankings.ranking AS rank FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id) ",
      "SELECT AVG(ranking) FROM rankings WHERE player_id = (SELECT winner_id FROM matches LIMIT 1) ",
      "SELECT AVG(r) FROM ( SELECT rankings.ranking AS r FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id) ",
      "SELECT AVG(rankings.ranking) as average_rank FROM matches LEFT JOIN players ON players.player_id = matches.winner_id LEFT JOIN rankings ON rankings.player_id = players.player_id ",
      "SELECT AVG(rank) FROM ( SELECT rankings.ranking AS rank, matches.winner_id FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id) ",
      "SELECT AVG(ranking) FROM rankings JOIN players ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id ",
      "SELECT AVG(rankings.ranking) FROM matches LEFT JOIN players ON players.player_id = matches.winner_id LEFT JOIN rankings ON rankings.player_id = players.player_id"
    ]
  },
  {
    "id": 440,
    "db_id": "wta_1",
    "gold": "SELECT min(loser_rank) FROM matches",
    "gpt_answers1": [
      "SELECT MAX(loser_rank) FROM matches ",
      "SELECT loser_rank FROM matches ORDER BY loser_rank DESC LIMIT 1 ",
      "SELECT MAX(loser_rank) AS highest_rank FROM matches ",
      "SELECT MAX(loser_rank) AS highest_rank FROM matches GROUP BY loser_rank ",
      "SELECT loser_rank FROM matches WHERE loser_rank = (SELECT MAX(loser_rank) FROM matches) ",
      "SELECT loser_rank FROM matches WHERE loser_rank = (SELECT MAX(loser_rank) FROM matches) LIMIT 1 ",
      "SELECT loser_rank FROM matches WHERE loser_rank = (SELECT TOP 1 loser_rank FROM matches ORDER BY loser_rank DESC) ",
      "SELECT MAX(loser_rank) AS highest_rank FROM matches GROUP BY loser_rank ORDER BY highest_rank DESC LIMIT 1 ",
      "SELECT MAX(loser_rank) from (SELECT loser_rank FROM matches ORDER BY loser_rank DESC LIMIT 1) ",
      "SELECT MAX(loser_rank) FROM (SELECT loser_rank FROM matches) AS subquery"
    ],
    "gpt_answers2": [
      "SELECT MAX(ranking) FROM rankings INNER JOIN players ON rankings.player_id = players.player_id INNER JOIN matches ON matches.loser_id = players.player_id",
      "SELECT MAX(rank) FROM (SELECT * FROM matches INNER JOIN players ON matches.loser_id = players.player_id) AS loser_stats INNER JOIN rankings ON loser_stats.player_id = rankings.player_id",
      "SELECT MAX(rank) FROM (SELECT * FROM matches INNER JOIN players ON matches.loser_id = players.player_id) AS loser_stats LEFT JOIN rankings ON loser_stats.player_id = rankings.player_id",
      "SELECT MAX(rank) FROM (SELECT * FROM matches INNER JOIN players ON matches.loser_id = players.player_id LEFT JOIN rankings ON players.player_id = rankings.player_id) AS loser_stats",
      "SELECT MAX(ranking) FROM (SELECT * FROM matches LEFT JOIN players ON matches.loser_id = players.player_id) AS loser_stats INNER JOIN rankings ON loser_stats.player_id = rankings.player_id",
      "SELECT MAX(rank) FROM (SELECT * FROM matches LEFT JOIN players ON matches.loser_id = players.player_id) AS loser_stats LEFT JOIN rankings ON loser_stats.player_id = rankings.player_id",
      "SELECT MAX(rank) FROM (SELECT * FROM matches LEFT JOIN players ON matches.loser_id = players.player_id LEFT JOIN rankings ON players.player_id = rankings.player_id) AS loser_stats",
      "SELECT MAX(rank) FROM matches INNER JOIN players ON matches.loser_id = players.player_id INNER JOIN rankings ON rankings.player_id = players.player_id",
      "SELECT MAX(rank) FROM matches INNER JOIN players ON matches.loser_id = players.player_id LEFT JOIN rankings ON rankings.player_id = players.player_id",
      "SELECT MAX(rank) FROM matches LEFT JOIN players ON matches.loser_id = players.player_id INNER JOIN rankings ON rankings.player_id = players.player_id"
    ],
    "gpt_answers3": [
      "SELECT MAX(loser_rank) FROM matches;",
      "SELECT MAX(loser_rank) FROM matches GROUP BY loser_rank;",
      "SELECT loser_rank FROM matches ORDER BY loser_rank DESC LIMIT 1;",
      "SELECT loser_rank FROM matches ORDER BY loser_rank ASC LIMIT 1;",
      "SELECT MAX(loser_rank) FROM matches JOIN players ON matches.loser_id = players.player_id;",
      "SELECT loser_rank FROM matches JOIN players ON matches.loser_id = players.player_id ORDER BY loser_rank DESC LIMIT 1;",
      "SELECT MAX(loser_rank) FROM matches JOIN players ON matches.loser_id = players.player_id GROUP BY loser_rank;",
      "SELECT MAX(loser_rank) FROM matches JOIN players ON matches.loser_id = players.player_id GROUP BY loser_rank ORDER BY loser_rank DESC LIMIT 1;",
      "SELECT loser_rank FROM matches JOIN players ON matches.loser_id = players.player_id WHERE loser_rank = (SELECT MAX(loser_rank) FROM matches);",
      "SELECT MAX(loser_rank) FROM matches WHERE loser_rank IN (SELECT loser_rank FROM matches)"
    ]
  },
  {
    "id": 441,
    "db_id": "wta_1",
    "gold": "SELECT min(loser_rank) FROM matches",
    "gpt_answers1": [
      "SELECT MAX(loser_rank) FROM matches;",
      "SELECT MAX(loser_rank) AS best_rank FROM matches;",
      "SELECT TOP 1 loser_rank FROM matches ORDER BY loser_rank DESC;",
      "SELECT loser_rank FROM matches WHERE loser_rank = (SELECT MAX(loser_rank) FROM matches);",
      "SELECT MAX(loser_rank) FROM matches GROUP BY loser_rank;",
      "SELECT MAX(loser_rank) FROM matches HAVING MAX(loser_rank);",
      "SELECT MAX(loser_rank) FROM matches LIMIT 1;",
      "SELECT loser_rank FROM matches ORDER BY loser_rank DESC LIMIT 1;",
      "SELECT max(loser_rank) FROM matches;",
      "SELECT max(loser_rank) FROM matches;"
    ],
    "gpt_answers2": [
      "SELECT MAX(loser_rank) FROM matches;",
      "SELECT MAX(loser_rank) FROM matches GROUP BY loser_id;",
      "SELECT MAX(loser_rank) AS best_rank FROM matches;",
      "SELECT MAX(loser_rank) AS best_rank FROM matches GROUP BY loser_id;",
      "SELECT loser_rank FROM matches WHERE loser_rank = (SELECT MAX(loser_rank) FROM matches);",
      "SELECT loser_rank FROM matches ORDER BY loser_rank DESC LIMIT 1;",
      "SELECT loser_rank FROM matches ORDER BY loser_rank DESC LIMIT 10;",
      "SELECT MAX(loser_rank) AS best_rank FROM matches LIMIT 1;",
      "SELECT MAX(loser_rank) FROM matches LIMIT 1;",
      "SELECT MAX(loser_rank) FROM matches WHERE loser_rank = (SELECT MAX(loser_rank) FROM matches);"
    ],
    "gpt_answers3": [
      "SELECT MAX(loser_rank) FROM matches;",
      "SELECT MAX(loser_rank) AS best_rank FROM matches;",
      "SELECT ranking FROM rankings ORDER BY ranking DESC LIMIT 1;",
      "SELECT MAX(loser_rank_points) FROM matches;",
      "SELECT MAX(loser_rank_points) AS best_rank_points FROM matches;",
      "SELECT ranking_points FROM rankings WHERE player_id IN (SELECT loser_id FROM matches) ORDER BY ranking_points DESC LIMIT 1;",
      "SELECT MAX(ranking) FROM rankings WHERE player_id IN (SELECT loser_id FROM matches);",
      "SELECT MAX(ranking) AS best_rank FROM rankings WHERE player_id IN (SELECT loser_id FROM matches);",
      "SELECT MAX(ranking_points) FROM rankings WHERE player_id IN (SELECT loser_id FROM matches);",
      "SELECT MAX(ranking_points) AS best_rank_points FROM rankings WHERE player_id IN (SELECT loser_id FROM matches);"
    ]
  },
  {
    "id": 448,
    "db_id": "wta_1",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "gpt_answers1": [
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2016 ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016 ",
      "SELECT DISTINCT m1.winner_name FROM matches m1, matches m2 WHERE m1.winner_id = m2.winner_id AND m1.year = 2013 AND m2.year = 2016 ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 INNER JOIN matches m2 ON m1.winner_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016 ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT DISTINCT winner_name FROM matches WHERE year = 2016 ",
      "SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2 ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN ( SELECT DISTINCT winner_name FROM matches WHERE year = 2016 ) ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 WHERE year = 2013 AND EXISTS ( SELECT * FROM matches m2 WHERE m2.winner_name = m1.winner_name AND m2.year = 2016 ) ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 WHERE year = 2016 AND EXISTS ( SELECT * FROM matches m2 WHERE m2.winner_name = m1.winner_name AND m2.year = 2013 )"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT DISTINCT winner_name FROM matches WHERE year = 2016); ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016; ",
      "SELECT DISTINCT p1.first_name || ' ' || p1.last_name AS winner_name FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id JOIN players p1 ON m1.winner_id = p1.player_id WHERE m1.year = 2013 AND m2.year = 2016; ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_id IN (SELECT DISTINCT winner_id FROM matches WHERE year = 2016); ",
      "SELECT DISTINCT p1.first_name || ' ' || p1.last_name AS winner_name FROM matches m1, matches m2 JOIN players p1 ON m1.winner_id = p1.player_id WHERE m1.year = 2013 AND m2.year = 2016 AND m1.winner_id = m2.winner_id; ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT DISTINCT winner_name FROM matches WHERE year = 2016) AND winner_name IN (SELECT DISTINCT winner_name FROM matches WHERE year = 2013); ",
      "SELECT DISTINCT p1.first_name || ' ' || p1.last_name AS winner_name FROM matches m1 JOIN players p1 ON m1.winner_id = p1.player_id WHERE m1.year = 2013 AND p1.player_id IN (SELECT DISTINCT winner_id FROM matches WHERE year = 2016); ",
      "SELECT DISTINCT p1.first_name || ' ' || p1.last_name AS winner_name FROM matches m1 JOIN players p1 ON m1.winner_id = p1.player_id JOIN matches m2 ON m1.winner_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016; ",
      "SELECT DISTINCT m1.winner_name FROM matches m1, matches m2 WHERE m1.year = 2013 AND m2.year = 2016 AND m1.winner_id = m2.winner_id; ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT DISTINCT winner_name FROM matches WHERE year = 2016) INTERSECT SELECT DISTINCT winner_name FROM matches WHERE year = 2016;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN ( SELECT winner_name FROM matches WHERE year = 2016 ) ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 JOIN matches m2 ON m1.winner_name = m2.winner_name WHERE m1.year = 2013 AND m2.year = 2016 ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN ( SELECT winner_name FROM matches WHERE year = 2016 GROUP BY winner_name ) ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 JOIN matches m2 ON m1.winner_name = m2.winner_name AND m2.year = 2016 WHERE m1.year = 2013 ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_id IN ( SELECT winner_id FROM matches WHERE year = 2016 ) ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016 ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_id IN ( SELECT winner_id FROM matches WHERE year = 2016 GROUP BY winner_id ) ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id AND m2.year = 2016 WHERE m1.year = 2013 ",
      "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_id IN ( SELECT winner_id FROM matches WHERE year = 2016 GROUP BY winner_name ) ",
      "SELECT DISTINCT m1.winner_name FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id AND m2.year = 2016 WHERE m1.year = 2013 GROUP BY m1.winner_name"
    ]
  },
  {
    "id": 449,
    "db_id": "wta_1",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "gpt_answers1": [
      "SELECT winner_name  FROM matches WHERE year = 2013 AND winner_id IN ( SELECT winner_id FROM matches WHERE year = 2016 ) GROUP BY winner_id HAVING COUNT(DISTINCT year) = 2 ",
      "SELECT DISTINCT m1.winner_name  FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016 ",
      "SELECT winner_name  FROM matches  WHERE year IN (2013, 2016) GROUP BY winner_id HAVING COUNT(DISTINCT year) = 2 ",
      "SELECT DISTINCT m1.winner_name  FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id WHERE (m1.year = 2013 OR m1.year = 2016) AND m2.year <> m1.year ",
      "SELECT DISTINCT m1.winner_name  FROM matches m1 WHERE year = 2013 AND m1.winner_id IN ( SELECT winner_id FROM matches WHERE year = 2016 AND winner_id = m1.winner_id ) ",
      "SELECT DISTINCT winner_name  FROM matches WHERE year = 2013 INTERSECT SELECT DISTINCT winner_name  FROM matches WHERE year = 2016 ",
      "SELECT DISTINCT winner_name  FROM matches WHERE year = 2013 AND winner_id IN ( SELECT winner_id FROM matches WHERE year = 2016 ) ",
      "SELECT *  FROM ( SELECT winner_name, year FROM matches WHERE year = 2013 INTERSECT SELECT winner_name, year FROM matches WHERE year = 2016 ) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2 ",
      "SELECT DISTINCT winner_name  FROM matches WHERE year = 2013 AND winner_name IN ( SELECT DISTINCT winner_name  FROM matches WHERE year = 2016 ) ",
      "SELECT DISTINCT winner_name  FROM matches WHERE year = 2013 AND EXISTS ( SELECT *  FROM matches WHERE year = 2016 AND winner_id = matches.winner_id )"
    ],
    "gpt_answers2": [
      "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year = 2013 INTERSECT SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year = 2016; ",
      "SELECT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016; ",
      "SELECT p.first_name, p.last_name FROM players p INNER JOIN matches m1 ON p.player_id = m1.winner_id INNER JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016; ",
      "SELECT p.first_name, p.last_name FROM players p, matches m1, matches m2 WHERE p.player_id = m1.winner_id AND p.player_id = m2.winner_id AND m1.year = 2013 AND m2.year = 2016; ",
      "SELECT first_name, last_name FROM players WHERE player_id IN ( SELECT m1.winner_id FROM matches m1 WHERE m1.year = 2013 ) AND player_id IN ( SELECT m2.winner_id FROM matches m2 WHERE m2.year = 2016 ); ",
      "SELECT p.first_name, p.last_name FROM players p WHERE EXISTS ( SELECT 1 FROM matches m1 WHERE p.player_id = m1.winner_id AND m1.year = 2013 ) AND EXISTS ( SELECT 1 FROM matches m2 WHERE p.player_id = m2.winner_id AND m2.year = 2016 ); ",
      "SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN ( SELECT winner_id FROM matches WHERE year = 2013 ) AND p.player_id IN ( SELECT m.winner_id FROM matches m WHERE year = 2016 ); ",
      "SELECT p.first_name, p.last_name FROM players p WHERE p.player_id = ANY ( SELECT m1.winner_id FROM matches m1 WHERE m1.year = 2013 ) AND p.player_id = ANY ( SELECT m2.winner_id FROM matches m2 WHERE m2.year = 2016 ); ",
      "SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN ( SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016 ); ",
      "SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN ( SELECT m1.winner_id FROM matches m1 WHERE m1.year = 2013 AND EXISTS ( SELECT 1 FROM matches m2 WHERE m2.year = 2016 AND m1.winner_id = m2.winner_id ) );"
    ],
    "gpt_answers3": [
      "SELECT p.first_name, p.last_name  FROM players p  WHERE EXISTS (SELECT 1  FROM matches m  WHERE m.winner_id = p.player_id  AND m.year = 2013)  AND EXISTS (SELECT 1  FROM matches m  WHERE m.winner_id = p.player_id  AND m.year = 2016); ",
      "SELECT DISTINCT p.first_name, p.last_name  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id  INNER JOIN matches m2 ON p.player_id = m2.winner_id  WHERE m1.year = 2013  AND m2.year = 2016; ",
      "SELECT p.first_name, p.last_name  FROM players p  INNER JOIN matches m1 ON p.player_id = m1.winner_id AND m1.year = 2013 INNER JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016; ",
      "SELECT p.first_name, p.last_name  FROM players p  WHERE p.player_id IN (SELECT m.winner_id  FROM matches m  WHERE m.year = 2013)  AND p.player_id IN (SELECT m.winner_id  FROM matches m  WHERE m.year = 2016); ",
      "SELECT p.first_name, p.last_name  FROM players p  WHERE p.player_id IN (SELECT m.winner_id  FROM matches m  WHERE m.year = 2013  AND m.winner_id IN (SELECT m2.winner_id  FROM matches m2  WHERE m2.year = 2016)); ",
      "SELECT p.first_name, p.last_name  FROM players p, matches m1, matches m2  WHERE p.player_id = m1.winner_id  AND p.player_id = m2.winner_id  AND m1.year = 2013  AND m2.year = 2016; ",
      "SELECT p.first_name, p.last_name  FROM players p  WHERE p.player_id IN (SELECT m1.winner_id  FROM matches m1, matches m2  WHERE p.player_id = m1.winner_id  AND p.player_id = m2.winner_id  AND m1.year = 2013  AND m2.year = 2016); ",
      "SELECT DISTINCT p.first_name, p.last_name  FROM players p, matches m1, matches m2  WHERE p.player_id = m1.winner_id  AND p.player_id = m2.winner_id  AND m1.year = 2013  AND EXISTS (SELECT 1  FROM matches m3  WHERE m3.winner_id = p.player_id  AND m3.year = 2016); ",
      "SELECT DISTINCT p.first_name, p.last_name  FROM players p  JOIN (SELECT winner_id  FROM matches  WHERE year = 2013) t1 ON p.player_id = t1.winner_id  JOIN (SELECT winner_id  FROM matches  WHERE year = 2016) t2 ON p.player_id = t2.winner_id; ",
      "SELECT DISTINCT p.first_name, p.last_name  FROM players p  INNER JOIN (SELECT DISTINCT m1.winner_id  FROM matches m1, matches m2  WHERE m1.winner_id = m2.winner_id  AND m1.year = 2013  AND m2.year = 2016) t ON p.player_id = t.winner_id;"
    ]
  },
  {
    "id": 453,
    "db_id": "wta_1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "gpt_answers1": [
      "SELECT p.first_name, p.country_code  FROM players AS p INNER JOIN matches AS m ON p.player_id = m.winner_id WHERE m.tourney_name = \"WTA Championships\" AND EXISTS ( SELECT 1  FROM matches AS m2 WHERE m2.tourney_name = \"Australian Open\" AND m2.winner_id = m.winner_id ); ",
      "SELECT p.first_name, p.country_code FROM players AS p INNER JOIN matches AS m1 ON p.player_id = m1.winner_id INNER JOIN matches AS m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = \"WTA Championships\" AND m2.tourney_name = \"Australian Open\"; ",
      "SELECT p.first_name, p.country_code FROM players AS p WHERE p.player_id IN ( SELECT m1.winner_id FROM matches AS m1 WHERE m1.tourney_name = \"WTA Championships\" AND m1.winner_id IN ( SELECT m2.winner_id FROM matches AS m2 WHERE m2.tourney_name = \"Australian Open\" ) ); ",
      "SELECT p.first_name, p.country_code FROM players AS p JOIN ( SELECT m1.winner_id FROM matches AS m1 WHERE m1.tourney_name = \"WTA Championships\" AND m1.winner_id IN ( SELECT m2.winner_id FROM matches AS m2 WHERE m2.tourney_name = \"Australian Open\" ) ) AS subquery ON p.player_id = subquery.winner_id; ",
      "SELECT DISTINCT p.first_name, p.country_code FROM players AS p JOIN matches AS m1 ON p.player_id = m1.winner_id JOIN matches AS m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = \"WTA Championships\" AND m2.tourney_name = \"Australian Open\"; ",
      "SELECT p.first_name, p.country_code FROM players AS p WHERE EXISTS ( SELECT 1 FROM matches AS m1 WHERE m1.tourney_name = \"WTA Championships\" AND m1.winner_id = p.player_id ) AND EXISTS ( SELECT 1 FROM matches AS m2 WHERE m2.tourney_name = \"Australian Open\" AND m2.winner_id = p.player_id ); ",
      "SELECT p.first_name, p.country_code FROM players AS p WHERE p.player_id IN ( SELECT m1.winner_id FROM matches AS m1 WHERE m1.tourney_name = \"WTA Championships\" INTERSECT SELECT m2.winner_id FROM matches AS m2 WHERE m2.tourney_name = \"Australian Open\" ); ",
      "SELECT p.first_name, p.country_code FROM players AS p WHERE p.player_id = ALL ( SELECT m1.winner_id FROM matches AS m1 WHERE m1.tourney_name = \"WTA Championships\" INTERSECT SELECT m2.winner_id FROM matches AS m2 WHERE m2.tourney_name = \"Australian Open\" ); ",
      "SELECT p.first_name, p.country_code FROM players AS p INNER JOIN ( SELECT DISTINCT m1.winner_id FROM matches AS m1 WHERE m1.tourney_name = \"WTA Championships\" INNER JOIN matches AS m2 ON m1.winner_id = m2.winner_id WHERE m2.tourney_name = \"Australian Open\" ) AS subquery ON p.player_id = subquery.winner_id; ",
      "SELECT p.first_name, p.country_code FROM players AS p WHERE p.player_id IN ( SELECT m.winner_id FROM matches AS m WHERE m.tourney_name = \"WTA Championships\" INTERSECT SELECT m.winner_id FROM matches AS m WHERE m.tourney_name = \"Australian Open\" );"
    ],
    "gpt_answers2": [
      "SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN ( SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'WTA Championships' INTERSECT SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'Australian Open' ); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' AND p.player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN matches m2 ON p.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open'; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' JOIN ( SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ) m2 ON p.player_id = m2.winner_id; ",
      "SELECT p.first_name, p.country_code FROM players p WHERE EXISTS ( SELECT 1 FROM matches m1 JOIN matches m2 ON m1.winner_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' AND p.player_id = m1.winner_id ); ",
      "SELECT p.first_name, p.country_code FROM players p WHERE EXISTS ( SELECT 1 FROM matches m1 WHERE m1.tourney_name = 'WTA Championships' AND p.player_id = m1.winner_id ) AND EXISTS ( SELECT 1 FROM matches m2 WHERE m2.tourney_name = 'Australian Open' AND p.player_id = m2.winner_id ); ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN ( SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'WTA Championships' ) AND p.player_id IN ( SELECT m.winner_id FROM matches m WHERE m.tourney_name = 'Australian Open' ); ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' ) AND p.player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ); ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' ) INTERSECT SELECT p.player_id FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open';"
    ],
    "gpt_answers3": [
      "SELECT p.first_name, p.country_code FROM players p INNER JOIN matches m1 ON m1.winner_id = p.player_id INNER JOIN matches m2 ON m2.winner_id = p.player_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN ( SELECT m1.winner_id FROM matches m1 INNER JOIN matches m2 ON m2.winner_id = m1.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ) ",
      "SELECT p.first_name, p.country_code FROM players p WHERE EXISTS ( SELECT 1 FROM matches m1 INNER JOIN matches m2 ON m2.winner_id = m1.winner_id WHERE m1.winner_id = p.player_id AND m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ) ",
      "SELECT p.first_name, p.country_code FROM players p INNER JOIN matches m1 ON m1.winner_id = p.player_id AND m1.tourney_name = 'WTA Championships' INNER JOIN matches m2 ON m2.winner_id = p.player_id AND m2.tourney_name = 'Australian Open' ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN ( SELECT m1.winner_id FROM matches m1, matches m2 WHERE m1.winner_id = m2.winner_id AND m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ) ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN ( SELECT m1.winner_id FROM matches m1 JOIN matches m2 ON m2.winner_id = m1.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ) ",
      "SELECT p.first_name, p.country_code FROM players p, matches m1, matches m2 WHERE p.player_id = m1.winner_id AND p.player_id = m2.winner_id AND m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ",
      "SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON m1.winner_id = p.player_id JOIN matches m2 ON m2.winner_id = p.player_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ",
      "SELECT p.first_name, p.country_code FROM players p WHERE EXISTS ( SELECT 1 FROM matches m1, matches m2 WHERE p.player_id = m1.winner_id AND p.player_id = m2.winner_id AND m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' ) ",
      "SELECT p.first_name, p.country_code FROM players p, matches m1, matches m2 WHERE p.player_id = m1.winner_id AND p.player_id = m2.winner_id AND m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'"
    ]
  },
  {
    "id": 454,
    "db_id": "wta_1",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "gpt_answers1": [
      "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players) LIMIT 1 ",
      "SELECT first_name, country_code FROM players WHERE birth_date IN (SELECT MIN(birth_date) FROM players) ",
      "SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT MIN(birth_date) AS oldest_date FROM players ) sub ON p.birth_date = sub.oldest_date ",
      "SELECT p.first_name, p.country_code FROM players p INNER JOIN ( SELECT MIN(birth_date) AS oldest_date FROM players ) sub ON p.birth_date = sub.oldest_date ",
      "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1 ",
      "SELECT first_name, country_code FROM players WHERE birth_date = ( SELECT MIN(birth_date) FROM players ) ",
      "SELECT first_name, country_code FROM players WHERE birth_date = ( SELECT MIN(birth_date) FROM players LIMIT 1 ) ",
      "SELECT first_name, country_code FROM players WHERE birth_date IN ( SELECT MIN(birth_date) FROM players ) ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = ( SELECT MIN(birth_date) FROM players ) ",
      "SELECT first_name, country_code FROM players WHERE birth_date IN ( SELECT MIN(birth_date) FROM players LIMIT 1 )"
    ],
    "gpt_answers2": [
      "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players); ",
      "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1; ",
      "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT birth_date FROM players ORDER BY birth_date ASC LIMIT 1); ",
      "SELECT first_name, country_code FROM players p INNER JOIN (SELECT MIN(birth_date) AS min_birth_date FROM players) sub ON p.birth_date = sub.min_birth_date; ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(birth_date) FROM players); ",
      "SELECT p.first_name, p.country_code FROM players p WHERE birth_date = (SELECT MIN(birth_date) FROM players); ",
      "SELECT p.first_name, p.country_code FROM players p INNER JOIN (SELECT MIN(birth_date) AS min_birth_date FROM players) t ON p.birth_date = t.min_birth_date; ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(birth_date) FROM players) LIMIT 1; ",
      "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) AS oldest_birthdate FROM players); ",
      "SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(p2.birth_date) FROM players p2);"
    ],
    "gpt_answers3": [
      "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;",
      "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);",
      "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) LIMIT 1);",
      "SELECT p.first_name, p.country_code FROM players p JOIN (SELECT MIN(birth_date) AS min_birth FROM players) t ON p.birth_date = t.min_birth;",
      "SELECT p.first_name, p.country_code FROM players p, (SELECT MIN(birth_date) AS min_birth FROM players) t WHERE p.birth_date = t.min_birth;",
      "SELECT p.first_name, p.country_code FROM players p WHERE birth_date = (SELECT MIN(birth_date) FROM players);",
      "SELECT p.first_name, p.country_code FROM players p WHERE birth_date = (SELECT MIN(birth_date) FROM players  LIMIT 1);",
      "SELECT p.first_name, p.country_code FROM players p WHERE birth_date = (SELECT MIN(birth_date) AS min_birth FROM players);",
      "SELECT p.first_name, p.country_code FROM players p, (SELECT MIN(birth_date) AS min_birth FROM players) t WHERE p.birth_date = t.min_birth LIMIT 1;",
      "SELECT p.first_name, p.country_code FROM players p JOIN (SELECT MIN(birth_date) AS min_birth FROM players) t ON p.birth_date = t.min_birth;"
    ]
  },
  {
    "id": 457,
    "db_id": "wta_1",
    "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "gpt_answers1": [
      "SELECT first_name || ' ' || last_name FROM players ORDER BY birth_date ASC;",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date;",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY strftime('%Y-%m-%d', birth_date) ASC;",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY CAST(strftime('%Y-%m-%d', birth_date) AS Date) ASC;",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY CAST(strftime('%Y-%m-%d', birth_date) AS Date) ASC;",
      "SELECT first_name || ' ' || last_name FROM players ORDER BY DATE(birth_date) ASC;",
      "SELECT first_name || ' ' || last_name FROM players ORDER BY STRFTIME('%Y-%m-%d', birth_date) ASC;",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY DATE(birth_date) ASC;",
      "SELECT first_name || ' ' || last_name FROM players ORDER BY JulianDay(birth_date) ASC;"
    ],
    "gpt_answers2": [
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY date(birth_date);",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY strftime('%Y-%m-%d', birth_date);",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date;",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY date(birth_date);",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY strftime('%Y-%m-%d', birth_date);",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY CAST(strftime('%Y%m%d', birth_date) AS INTEGER);",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY DATE(birth_date, 'unixepoch');",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY julianday(birth_date);",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY CAST(strftime('%s', birth_date) AS INTEGER);"
    ],
    "gpt_answers3": [
      "SELECT CONCAT(first_name, \" \", last_name) AS full_name FROM players ORDER BY birth_date; ",
      "SELECT first_name || \" \" || last_name AS full_name FROM players ORDER BY birth_date; ",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date; ",
      "SELECT first_name || \" \" || last_name full_name FROM players ORDER BY birth_date; ",
      "SELECT first_name || ' ' || last_name full_name FROM players ORDER BY birth_date; ",
      "SELECT first_name || ' ' || last_name AS full_name FROM players GROUP BY full_name ORDER BY birth_date; ",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY DATE(birth_date) ASC; ",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY strftime('%Y-%m-%d', birth_date) ASC; ",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY CAST(birth_date AS DATE) ASC; ",
      "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY julianday(birth_date) ASC;"
    ]
  },
  {
    "id": 459,
    "db_id": "wta_1",
    "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "gpt_answers1": [
      "SELECT first_name || ' ' || last_name AS full_name  FROM players  WHERE hand = 'left'  ORDER BY birth_date; ",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  WHERE hand = 'left'  ORDER BY birth_date; ",
      "SELECT first_name || ' ' || last_name AS full_name  FROM players  WHERE hand = 'left'  ORDER BY players.birth_date; ",
      "SELECT first_name || ' ' || last_name AS full_name  FROM players  WHERE hand = 'left'  ORDER BY players.\"Date\"; ",
      "SELECT first_name || ' ' || last_name AS full_name  FROM players  WHERE hand = 'left'  ORDER BY strftime('%Y-%m-%d', birth_date); ",
      "SELECT players.first_name || ' ' || players.last_name AS full_name  FROM players  JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id WHERE players.hand = 'left'  GROUP BY players.player_id  ORDER BY players.birth_date; ",
      "SELECT first_name || ' ' || last_name AS full_name  FROM players  WHERE hand = 'left'  GROUP BY player_id  ORDER BY birth_date; ",
      "SELECT first_name || ' ' || last_name AS full_name  FROM players  WHERE hand = 'left'  GROUP BY first_name, last_name  ORDER BY birth_date; ",
      "SELECT first_name || ' ' || last_name AS full_name  FROM players  WHERE hand = 'left'  ORDER BY strftime('%Y-%m-%d', players.\"Date\"); ",
      "SELECT first_name || ' ' || last_name AS full_name  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE hand = 'left'  ORDER BY birth_date;"
    ],
    "gpt_answers2": [
      "SELECT first_name, last_name  FROM players  WHERE hand = 'left'  ORDER BY birth_date ASC; ",
      "SELECT first_name, last_name  FROM players  WHERE hand = 'left'  ORDER BY date(birth_date) ASC; ",
      "SELECT first_name, last_name  FROM players  WHERE hand = 'left'  ORDER BY strftime('%Y-%m-%d', birth_date) ASC; ",
      "SELECT p.first_name, p.last_name  FROM players AS p  INNER JOIN matches AS m ON p.player_id = m.winner_id OR p.player_id = m.loser_id  WHERE p.hand = 'left'  ORDER BY p.birth_date ASC; ",
      "SELECT p.first_name, p.last_name  FROM players AS p  INNER JOIN matches AS m ON p.player_id = m.winner_id OR p.player_id = m.loser_id  WHERE p.hand = 'left'  GROUP BY p.player_id  ORDER BY p.birth_date ASC; ",
      "SELECT p.first_name, p.last_name  FROM players AS p  INNER JOIN matches AS m ON p.player_id = m.winner_id OR p.player_id = m.loser_id  WHERE p.hand = 'left'  GROUP BY p.first_name, p.last_name  ORDER BY p.birth_date ASC; ",
      "SELECT p.first_name, p.last_name  FROM players AS p  INNER JOIN matches AS m ON p.player_id = m.winner_id OR p.player_id = m.loser_id  INNER JOIN rankings AS r ON p.player_id = r.player_id  WHERE p.hand = 'left'  GROUP BY p.first_name, p.last_name  ORDER BY p.birth_date ASC; ",
      "SELECT p.first_name, p.last_name  FROM players AS p  INNER JOIN matches AS m ON p.player_id = m.winner_id OR p.player_id = m.loser_id  INNER JOIN rankings AS r ON p.player_id = r.player_id  WHERE p.hand = 'left'  GROUP BY p.player_id  ORDER BY MIN(p.birth_date) ASC; ",
      "SELECT p.first_name, p.last_name  FROM matches AS m  INNER JOIN players AS p ON m.winner_id = p.player_id  WHERE p.hand = 'left'  GROUP BY p.player_id  ORDER BY MIN(p.birth_date) ASC; ",
      "SELECT p.first_name, p.last_name  FROM players AS p  INNER JOIN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches) AS m ON p.player_id = m.winner_id  WHERE p.hand = 'left'  GROUP BY p.player_id  ORDER BY MIN(p.birth_date) ASC;"
    ],
    "gpt_answers3": [
      "SELECT first_name || ' ' || last_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date;\r ",
      "SELECT CONCAT(first_name, ' ', last_name)\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date;\r ",
      "SELECT first_name || ' ' || last_name AS full_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date;\r ",
      "SELECT first_name || ' ' || last_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date ASC;\r ",
      "SELECT first_name || ' ' || last_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date DESC;\r ",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date;\r ",
      "SELECT first_name || ' ' || last_name AS full_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date ASC;\r ",
      "SELECT first_name || ' ' || last_name AS full_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date DESC;\r ",
      "SELECT first_name || ' ' || last_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date\r LIMIT 10;\r ",
      "SELECT CONCAT(first_name, ' ', last_name) AS full_name\r FROM players\r WHERE hand = 'left'\r ORDER BY birth_date\r LIMIT 10;"
    ]
  },
  {
    "id": 460,
    "db_id": "wta_1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id HAVING COUNT(DISTINCT r.tours) = (SELECT MAX(count_tours) FROM (SELECT COUNT(DISTINCT r.tours) AS count_tours FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id)); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id HAVING COUNT(DISTINCT r.tours) = (SELECT COUNT(DISTINCT r.tours) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id HAVING COUNT(DISTINCT r.tours) = (SELECT MAX(tours_count) FROM (SELECT COUNT(DISTINCT r.tours) AS tours_count FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id)); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours_count) FROM (SELECT COUNT(DISTINCT r.tours) AS tours_count FROM rankings GROUP BY player_id)); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT COUNT(DISTINCT r.tours) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours IN (SELECT MAX(tours_count) FROM (SELECT COUNT(DISTINCT r.tours) AS tours_count FROM rankings GROUP BY player_id)); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT COUNT(DISTINCT r.tours) FROM rankings r GROUP BY r.player_id HAVING COUNT(DISTINCT r.tours) = (SELECT MAX(tours_count) FROM (SELECT COUNT(DISTINCT r.tours) AS tours_count FROM rankings GROUP BY player_id))); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours_count) FROM (SELECT COUNT(DISTINCT r.tours) AS tours_count FROM rankings GROUP BY player_id)); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT max_tours FROM (SELECT COUNT(DISTINCT r.tours) AS max_tours FROM rankings GROUP BY player_id ORDER BY max_tours DESC LIMIT 1));"
    ],
    "gpt_answers2": [
      "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN rankings r ON p.player_id = r.player_id  GROUP BY p.player_id  ORDER BY COUNT(r.tours) DESC  LIMIT 1; ",
      "SELECT p.first_name, p.country_code  FROM players p  WHERE p.player_id = (SELECT r.player_id  FROM rankings r  GROUP BY r.player_id  ORDER BY COUNT(r.tours) DESC  LIMIT 1); ",
      "SELECT p.first_name, p.country_code  FROM players p  WHERE p.player_id IN (SELECT r.player_id  FROM rankings r  GROUP BY r.player_id  HAVING COUNT(r.tours) = (SELECT MAX(temp.count_tours)  FROM (SELECT COUNT(r2.tours) as count_tours  FROM rankings r2  GROUP BY r2.player_id) temp)); ",
      "WITH temp AS (SELECT r.player_id, COUNT(r.tours) as count_tours  FROM rankings r  GROUP BY r.player_id)  SELECT p.first_name, p.country_code  FROM players p  INNER JOIN temp t ON p.player_id = t.player_id  WHERE t.count_tours = (SELECT MAX(temp.count_tours)  FROM temp); ",
      "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN (SELECT r.player_id, COUNT(r.tours) as count_tours  FROM rankings r  GROUP BY r.player_id) temp ON p.player_id = temp.player_id  WHERE temp.count_tours = (SELECT MAX(temp.count_tours)  FROM (SELECT COUNT(r2.tours) as count_tours  FROM rankings r2  GROUP BY r2.player_id) temp); ",
      "SELECT p.first_name, p.country_code  FROM players p,  (SELECT r.player_id, COUNT(r.tours) as count_tours  FROM rankings r  GROUP BY r.player_id) temp  WHERE p.player_id = temp.player_id  GROUP BY p.player_id  HAVING COUNT(temp.count_tours) = (SELECT MAX(temp.count_tours)  FROM (SELECT COUNT(r2.tours) as count_tours  FROM rankings r2  GROUP BY r2.player_id) temp); ",
      "WITH temp AS (SELECT r.player_id, COUNT(r.tours) as count_tours  FROM rankings r  GROUP BY r.player_id  ORDER BY count_tours DESC)  SELECT p.first_name, p.country_code  FROM players p  INNER JOIN temp t ON p.player_id = t.player_id  WHERE t.count_tours = (SELECT MAX(count_tours) FROM temp LIMIT 1); ",
      "SELECT p.first_name, p.country_code  FROM players p,  (SELECT r.player_id, COUNT(r.tours) as count_tours  FROM rankings r  GROUP BY r.player_id  ORDER BY count_tours DESC) temp  WHERE p.player_id = temp.player_id  LIMIT 1; ",
      "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN (SELECT r.player_id, COUNT(r.tours) as count_tours  FROM rankings r  GROUP BY r.player_id  ORDER BY count_tours DESC) temp  ON p.player_id = temp.player_id  LIMIT 1; ",
      "SELECT p.first_name, p.country_code  FROM players p  WHERE p.player_id = (SELECT r.player_id  FROM rankings r  GROUP BY r.player_id  ORDER BY COUNT(r.tours) DESC  LIMIT 1)  LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT players.first_name, players.country_code FROM players WHERE players.player_id = (SELECT rankings.player_id FROM rankings GROUP BY rankings.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1); ",
      "SELECT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1; ",
      "SELECT players.first_name, players.country_code FROM rankings INNER JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1; ",
      "SELECT players.first_name, players.country_code FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1; ",
      "SELECT players.first_name, players.country_code FROM players WHERE players.player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1); ",
      "SELECT players.first_name, players.country_code FROM players WHERE players.player_id = (SELECT player_id FROM (SELECT player_id, COUNT(tours) AS tour_count FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1)); ",
      "SELECT players.first_name, players.country_code FROM players INNER JOIN (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1) AS subquery ON players.player_id = subquery.player_id; ",
      "SELECT players.first_name, players.country_code FROM players INNER JOIN (SELECT player_id, COUNT(tours) AS tour_count FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1) AS subquery ON players.player_id = subquery.player_id; ",
      "SELECT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(rankings.tours) = (SELECT MAX(tour_count) FROM (SELECT COUNT(tours) AS tour_count FROM rankings GROUP BY player_id)); ",
      "SELECT players.first_name, players.country_code FROM players INNER JOIN (SELECT player_id, COUNT(tours) AS tour_count FROM rankings GROUP BY player_id HAVING COUNT(tours) = (SELECT MAX(count_tours) FROM (SELECT COUNT(tours) AS count_tours FROM rankings GROUP BY player_id))) AS subquery ON players.player_id = subquery.player_id;"
    ]
  },
  {
    "id": 461,
    "db_id": "wta_1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT p.first_name, p.country_code  FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id, COUNT(DISTINCT tours) AS tour_count FROM rankings GROUP BY player_id ORDER BY tour_count DESC LIMIT 1) r ON p.player_id = r.player_id; ",
      "SELECT first_name, country_code FROM players WHERE player_id = ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(DISTINCT tours) DESC LIMIT 1 ); ",
      "SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id, COUNT(*) AS tour_count FROM rankings GROUP BY player_id ORDER BY tour_count DESC LIMIT 1) r ON p.player_id = r.player_id; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT r.player_id, COUNT(*) AS tour_count FROM rankings r JOIN matches m ON r.player_id = m.winner_id OR r.player_id = m.loser_id GROUP BY r.player_id ORDER BY tour_count DESC LIMIT 1) r ON p.player_id = r.player_id; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id, COUNT(DISTINCT tours) AS tour_count FROM rankings WHERE player_id IN ( SELECT winner_id FROM matches UNION ALL SELECT loser_id FROM matches ) GROUP BY player_id ORDER BY tour_count DESC LIMIT 1) r ON p.player_id = r.player_id; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT r.player_id, COUNT(*) AS tour_count FROM rankings r JOIN matches m ON r.player_id = m.winner_id GROUP BY r.player_id UNION ALL SELECT r.player_id, COUNT(*) AS tour_count FROM rankings r JOIN matches m ON r.player_id = m.loser_id GROUP BY r.player_id ORDER BY tour_count DESC LIMIT 1) r ON p.player_id = r.player_id; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT r.player_id, COUNT(*) AS tour_count FROM rankings r JOIN matches m ON r.player_id = m.winner_id GROUP BY r.player_id UNION ALL SELECT r.player_id, COUNT(*) AS tour_count FROM rankings r JOIN matches m ON r.player_id = m.loser_id GROUP BY r.player_id HAVING COUNT(*) = ( SELECT COUNT(*) FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1) r ON p.player_id = r.player_id; ",
      "SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id, COUNT(*) AS tour_count FROM ( SELECT winner_id AS player_id FROM matches UNION ALL SELECT loser_id AS player_id FROM matches) m JOIN rankings r ON m.player_id = r.player_id GROUP BY player_id ORDER BY tour_count DESC LIMIT 1) r ON p.player_id = r.player_id; ",
      "SELECT first_name, country_code FROM players WHERE player_id = ( SELECT winner_id FROM ( SELECT winner_id, COUNT(*) AS tour_count FROM matches JOIN rankings ON winner_id = player_id GROUP BY winner_id UNION ALL SELECT loser_id, COUNT(*) AS tour_count FROM matches JOIN rankings ON loser_id = player_id GROUP BY loser_id) m GROUP BY winner_id ORDER BY tour_count DESC LIMIT 1)"
    ],
    "gpt_answers2": [
      "SELECT players.first_name, players.country_code  FROM players  WHERE players.player_id = ( SELECT player_id  FROM rankings  GROUP BY player_id  ORDER BY COUNT(DISTINCT tours) DESC  LIMIT 1 ); ",
      "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN ( SELECT player_id, COUNT(DISTINCT tours) AS num_tours  FROM rankings  GROUP BY player_id  ORDER BY num_tours DESC  LIMIT 1 ) r ON r.player_id = p.player_id; ",
      "SELECT p.first_name, p.country_code  FROM players p  INNER JOIN ( SELECT player_id, COUNT(tours) AS num_tours  FROM rankings  GROUP BY player_id  ORDER BY num_tours DESC  LIMIT 1 ) r ON r.player_id = p.player_id; ",
      "SELECT p.first_name, p.country_code  FROM players p  WHERE p.player_id = ( SELECT r.player_id  FROM rankings r  GROUP BY r.player_id  ORDER BY COUNT(DISTINCT r.tours) DESC  LIMIT 1 ); ",
      "SELECT players.first_name, players.country_code  FROM players  INNER JOIN ( SELECT player_id, COUNT(DISTINCT tours) AS num_tours  FROM rankings  GROUP BY player_id  ORDER BY num_tours DESC  LIMIT 1 ) AS subquery ON players.player_id = subquery.player_id; ",
      "SELECT players.first_name, players.country_code  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  HAVING COUNT(DISTINCT rankings.tours) = ( SELECT MAX(num_tours)  FROM ( SELECT player_id, COUNT(DISTINCT tours) AS num_tours  FROM rankings  GROUP BY player_id ) AS subquery ) LIMIT 1; ",
      "SELECT first_name, country_code  FROM ( SELECT players.first_name, players.country_code, COUNT(DISTINCT ranks.tours) AS num_tours  FROM players  INNER JOIN rankings AS ranks ON players.player_id = ranks.player_id  GROUP BY players.first_name, players.country_code  ORDER BY num_tours DESC ) AS subquery  LIMIT 1; ",
      "SELECT DISTINCT first_name, country_code  FROM players  INNER JOIN ( SELECT player_id, COUNT(tours) AS num_tours  FROM rankings  GROUP BY player_id  ORDER BY num_tours DESC  LIMIT 1 ) r ON players.player_id = r.player_id; ",
      "SELECT players.first_name, players.country_code  FROM players  WHERE players.player_id = ( SELECT player_id  FROM rankings  GROUP BY player_id  HAVING COUNT(DISTINCT tours) = ( SELECT MAX(num_tours)  FROM ( SELECT player_id, COUNT(DISTINCT tours) AS num_tours  FROM rankings  GROUP BY player_id ) AS subquery ) ) LIMIT 1; ",
      "SELECT players.first_name, players.country_code  FROM players  INNER JOIN ( SELECT player_id, COUNT(DISTINCT tours) AS num_tours  FROM rankings  GROUP BY player_id  ORDER BY num_tours DESC  LIMIT 1 ) r ON players.player_id = r.player_id;"
    ],
    "gpt_answers3": [
      "SELECT p.first_name, p.country_code  FROM players p WHERE p.player_id = ( SELECT r.player_id FROM rankings r GROUP BY r.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1 ); ",
      "SELECT p.first_name, p.country_code  FROM players p INNER JOIN ( SELECT r.player_id FROM rankings r GROUP BY r.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1 ) t  ON p.player_id = t.player_id; ",
      "SELECT p.first_name, p.country_code  FROM players p, rankings r WHERE p.player_id = r.player_id GROUP BY p.player_id HAVING COUNT(DISTINCT r.tours) = ( SELECT COUNT(DISTINCT r.tours) FROM rankings r GROUP BY r.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1 ); ",
      "SELECT p.first_name, p.country_code  FROM players p INNER JOIN rankings r ON p.player_id = r.player_id INNER JOIN ( SELECT r.player_id, COUNT(DISTINCT r.tours) AS num_tours FROM rankings r GROUP BY r.player_id ORDER BY num_tours DESC LIMIT 1 ) t  ON p.player_id = t.player_id; ",
      "SELECT p.first_name, p.country_code  FROM players p WHERE p.player_id IN ( SELECT r.player_id FROM rankings r GROUP BY r.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1 ); ",
      "SELECT p.first_name, p.country_code  FROM players p INNER JOIN ( SELECT r.player_id FROM rankings r GROUP BY r.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1 ) t  ON p.player_id = t.player_id; ",
      "SELECT p.first_name, p.country_code FROM players p ORDER BY ( SELECT COUNT(DISTINCT r.tours) FROM rankings r WHERE r.player_id = p.player_id ) DESC LIMIT 1; ",
      "SELECT p.first_name, p.country_code FROM players p INNER JOIN ( SELECT player_id FROM rankings GROUP BY player_id HAVING COUNT(DISTINCT tours) = ( SELECT MAX(num_tours) FROM ( SELECT COUNT(DISTINCT tours) AS num_tours FROM rankings GROUP BY player_id ) ) ) t ON p.player_id = t.player_id; ",
      "SELECT p.first_name, p.country_code FROM players p WHERE EXISTS ( SELECT 1 FROM rankings r GROUP BY r.player_id HAVING COUNT(DISTINCT r.tours) = ( SELECT COUNT(DISTINCT r.tours) FROM rankings r GROUP BY r.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1 ) AND r.player_id = p.player_id ); ",
      "SELECT p.first_name, p.country_code FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.country_code HAVING COUNT(DISTINCT r.tours) = ( SELECT COUNT(DISTINCT r.tours) FROM rankings r GROUP BY r.player_id ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1 ) ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1;"
    ]
  },
  {
    "id": 464,
    "db_id": "wta_1",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT winner_name, winner_rank_points  FROM matches  GROUP BY winner_name  ORDER BY COUNT(*) DESC  LIMIT 1; ",
      "SELECT m.winner_name, m.winner_rank_points  FROM matches m  GROUP BY m.winner_name  HAVING COUNT(m.winner_name) = ( SELECT MAX(cnt)  FROM ( SELECT COUNT(winner_name) as cnt  FROM matches  GROUP BY winner_name ) ); ",
      "SELECT m.winner_name, m.winner_rank_points  FROM matches m  INNER JOIN ( SELECT winner_name, COUNT(*) as num_wins  FROM matches  GROUP BY winner_name  ) as sub  ON m.winner_name = sub.winner_name AND m.loser_id <> m.winner_id  ORDER BY sub.num_wins DESC  LIMIT 1; ",
      "SELECT p.first_name || ' ' || p.last_name as winner_name, m.winner_rank_points  FROM matches m  INNER JOIN players p  ON m.winner_id = p.player_id  WHERE m.match_num IN ( SELECT m.match_num  FROM matches m  GROUP BY m.match_num  HAVING COUNT(*) = ( SELECT COUNT(*) as max_wins  FROM matches  GROUP BY winner_id  ORDER BY max_wins DESC  LIMIT 1 ) ); ",
      "SELECT p.first_name || ' ' || p.last_name as winner_name, m.winner_rank_points  FROM matches m  INNER JOIN players p  ON m.winner_id = p.player_id  WHERE m.winner_id = ( SELECT winner_id  FROM ( SELECT winner_id, COUNT(*) as num_wins  FROM matches  GROUP BY winner_id  ORDER BY num_wins DESC  LIMIT 1 ) as sub ); ",
      "SELECT p.first_name || ' ' || p.last_name as winner_name, m.winner_rank_points  FROM matches m  INNER JOIN players p  ON m.winner_id = p.player_id  WHERE m.winner_id IN ( SELECT winner_id  FROM matches  GROUP BY winner_id  HAVING COUNT(*) = ( SELECT COUNT(*)  FROM matches  GROUP BY winner_id  ORDER BY COUNT(*) DESC  LIMIT 1 ) ); ",
      "SELECT p.first_name || ' ' || p.last_name as winner_name, m.winner_rank_points  FROM matches m  INNER JOIN players p  ON m.winner_id = p.player_id  WHERE m.winner_id = ( SELECT winner_id  FROM matches  GROUP BY winner_id  ORDER BY COUNT(*) DESC  LIMIT 1 ); ",
      "SELECT p.first_name || ' ' || p.last_name as winner_name, m.winner_rank_points  FROM matches m  INNER JOIN players p  ON m.winner_id = p.player_id  WHERE m.winner_id = ( SELECT winner_id  FROM matches  GROUP BY winner_id  HAVING COUNT(*) = ( SELECT MAX(num_wins)  FROM ( SELECT COUNT(*) as num_wins  FROM matches  GROUP BY winner_id ) ) ); ",
      "SELECT p.first_name || ' ' || p.last_name as winner_name, m.winner_rank_points  FROM matches m  INNER JOIN players p  ON m.winner_id = p.player_id  WHERE m.winner_id = ( SELECT winner_id  FROM ( SELECT winner_id, COUNT(*) as num_wins  FROM matches  GROUP BY winner_id  ORDER BY num_wins DESC  LIMIT 1 ) as sub ); ",
      "SELECT p.first_name || ' ' || p.last_name as winner_name, m.winner_rank_points  FROM matches m  INNER JOIN players p  ON m.winner_id = p.player_id  GROUP BY m.winner_id  ORDER BY COUNT(*) DESC  LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT winner_name, SUM(winner_rank_points) AS total_points FROM matches GROUP BY winner_name ORDER BY total_points DESC LIMIT 1; ",
      "SELECT winner_name, winner_rank_points FROM matches WHERE match_num IN ( SELECT MAX(match_num)  FROM matches GROUP BY winner_id ); ",
      "SELECT winner_name, winner_rank_points FROM ( SELECT winner_name, winner_rank_points, COUNT(*) AS win_count FROM matches GROUP BY winner_name ) AS subquery WHERE win_count = ( SELECT MAX(win_count) FROM ( SELECT COUNT(*) AS win_count FROM matches GROUP BY winner_name ) ); ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN ( SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ) AS subquery ON matches.winner_id = subquery.winner_id WHERE win_count = ( SELECT MAX(win_count) FROM ( SELECT COUNT(*) AS win_count FROM matches GROUP BY winner_id ) ); ",
      "SELECT winner_name, winner_rank_points FROM matches WHERE winner_id = ( SELECT winner_id FROM ( SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ORDER BY win_count DESC LIMIT 1 ) AS subquery ); ",
      "SELECT p.first_name || ' ' || p.last_name AS winner_name, m.winner_rank_points FROM matches AS m JOIN players AS p ON m.winner_id = p.player_id GROUP BY m.winner_id ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT p.first_name || ' ' || p.last_name AS winner_name, m.winner_rank_points FROM matches AS m JOIN players AS p ON m.winner_id = p.player_id WHERE m.match_num IN ( SELECT MAX(match_num)  FROM matches GROUP BY winner_id ); ",
      "SELECT p.first_name || ' ' || p.last_name AS winner_name, m.winner_rank_points FROM matches AS m JOIN players AS p ON m.winner_id = p.player_id WHERE (  SELECT COUNT(*)  FROM matches WHERE winner_id = m.winner_id ) = ( SELECT MAX(win_count) FROM ( SELECT COUNT(*) AS win_count FROM matches GROUP BY winner_id ) ); ",
      "SELECT p.first_name || ' ' || p.last_name AS winner_name, m.winner_rank_points FROM matches AS m JOIN players AS p ON m.winner_id = p.player_id WHERE (  SELECT COUNT(*)  FROM matches WHERE winner_id = m.winner_id ) = ( SELECT MAX(win_count) FROM ( SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ) ); ",
      "SELECT p.first_name || ' ' || p.last_name AS winner_name, m.winner_rank_points FROM matches AS m JOIN players AS p ON m.winner_id = p.player_id WHERE (  SELECT COUNT(*)  FROM matches WHERE winner_id = m.winner_id ) = ( SELECT MAX(win_count) FROM ( SELECT COUNT(*) AS win_count FROM matches GROUP BY winner_id ) ) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name, winner_rank_points HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT winner_id, COUNT(*) as cnt FROM matches GROUP BY winner_id)); ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_id IN (SELECT winner_id FROM matches GROUP BY winner_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT winner_id, COUNT(*) as cnt FROM matches GROUP BY winner_id))); ",
      "WITH temp AS ( SELECT winner_name, winner_rank_points, COUNT(*) as num_of_wins FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name, winner_rank_points ) SELECT winner_name, winner_rank_points FROM temp WHERE num_of_wins = (SELECT MAX(num_of_wins) FROM temp); ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name, winner_rank_points HAVING COUNT(*) = ( SELECT MAX(num_of_wins) FROM ( SELECT winner_id, COUNT(*) as num_of_wins FROM matches GROUP BY winner_id ) ); ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_id = ( SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT winner_name, winner_rank_points FROM ( SELECT winner_id, winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id, winner_name, winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1 ) subquery; ",
      "SELECT winner_name, winner_rank_points FROM ( SELECT winner_id, winner_name, winner_rank_points, COUNT(*) as num_of_wins FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id, winner_name, winner_rank_points ) temp WHERE num_of_wins = (SELECT MAX(num_of_wins) FROM temp); ",
      "SELECT winner_name, winner_rank_points FROM ( SELECT winner_id, winner_name, winner_rank_points, COUNT(*) as num_of_wins FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id, winner_name, winner_rank_points ) temp ORDER BY num_of_wins DESC LIMIT 1;"
    ]
  },
  {
    "id": 465,
    "db_id": "wta_1",
    "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT winner_name, SUM(winner_rank_points) AS total_rank_points  FROM matches  GROUP BY winner_name  ORDER BY total_rank_points DESC  LIMIT 1; ",
      "SELECT winner_name, winner_rank_points  FROM matches  WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT p.first_name, p.last_name, SUM(m.winner_rank_points) AS total_rank_points  FROM matches m  JOIN players p ON m.winner_id = p.player_id  GROUP BY p.first_name, p.last_name  ORDER BY total_rank_points DESC  LIMIT 1; ",
      "SELECT p.first_name, p.last_name, m.winner_rank_points  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_rank_points  FROM matches m  JOIN players p ON m.winner_id = p.player_id  JOIN rankings r ON p.player_id = r.player_id  GROUP BY p.first_name, p.last_name  ORDER BY total_rank_points DESC  LIMIT 1; ",
      "SELECT p.first_name, p.last_name, r.ranking_points  FROM matches m  JOIN players p ON m.winner_id = p.player_id  JOIN rankings r ON p.player_id = r.player_id  WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings); ",
      "SELECT p.first_name, p.last_name, m.winner_rank_points  FROM players p  JOIN matches m ON p.player_id = m.winner_id  WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT p.first_name, p.last_name, m.winner_rank_points  FROM players p  JOIN matches m ON p.player_id = m.winner_id  GROUP BY p.first_name, p.last_name  HAVING m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT p.first_name, p.last_name, r.ranking_points  FROM players p  JOIN matches m ON p.player_id = m.winner_id  JOIN rankings r ON p.player_id = r.player_id  WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings); ",
      "SELECT p.first_name, p.last_name, r.ranking_points  FROM players p  JOIN matches m ON p.player_id = m.winner_id  JOIN rankings r ON p.player_id = r.player_id  GROUP BY p.first_name, p.last_name, r.ranking_points  HAVING r.ranking_points = (SELECT MAX(ranking_points) FROM rankings);"
    ],
    "gpt_answers2": [
      "SELECT winner_name, MAX(winner_rank_points) FROM matches JOIN players ON matches.winner_id = players.player_id; ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT winner_name, COUNT(*) AS count FROM matches GROUP BY winner_name)); ",
      "SELECT winner_name, MAX(winner_rank_points) FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT winner_name, COUNT(*) AS count FROM matches GROUP BY winner_name)); ",
      "SELECT winner_name, MAX(winner_rank_points) FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT winner_name, MAX(winner_rank_points) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE COUNT(*) = (SELECT MAX(count) FROM (SELECT winner_name, COUNT(*) AS count FROM matches GROUP BY winner_name)) GROUP BY winner_name; ",
      "SELECT p.first_name || ' ' || p.last_name as winner_name, MAX(m.winner_rank_points) FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY p.first_name, p.last_name ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT winner_name, winner_rank_points FROM (SELECT winner_name, winner_rank_points, COUNT(*) as num_wins FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY num_wins DESC, winner_rank_points DESC LIMIT 1); ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id WHERE match_num IN (SELECT match_num FROM matches GROUP BY match_num HAVING COUNT(*) =  (SELECT MAX(count) FROM (SELECT match_num, COUNT(*) AS count FROM matches GROUP BY match_num))); ",
      "SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_name IN (SELECT winner_name FROM matches GROUP BY winner_name HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT winner_name, COUNT(*) AS count FROM matches GROUP BY winner_name)));"
    ],
    "gpt_answers3": [
      "SELECT  m.winner_name, MAX(p.winner_rank_points) AS max_rank_points FROM  matches AS m LEFT JOIN  players AS p ON  m.winner_id = p.player_id GROUP BY  m.winner_name ORDER BY  max_rank_points DESC LIMIT 1; ",
      "SELECT  m.winner_name, p.winner_rank_points FROM  matches AS m LEFT JOIN  players AS p ON  m.winner_id = p.player_id WHERE  p.winner_rank_points = ( SELECT  MAX(winner_rank_points) FROM  players ); ",
      "SELECT  m.winner_name, MAX(r.ranking_points) AS max_rank_points FROM  matches AS m LEFT JOIN  players AS p ON  m.winner_id = p.player_id LEFT JOIN  rankings AS r ON  p.player_id = r.player_id GROUP BY  m.winner_name ORDER BY  max_rank_points DESC LIMIT 1; ",
      "SELECT  p.first_name || ' ' || p.last_name AS winner_name, MAX(p.winner_rank_points) AS max_rank_points FROM  matches AS m, players AS p WHERE  m.winner_id = p.player_id GROUP BY  winner_name ORDER BY  max_rank_points DESC LIMIT 1; ",
      "SELECT  p.first_name || ' ' || p.last_name AS winner_name, p.winner_rank_points FROM  players AS p WHERE  p.winner_rank_points = ( SELECT  MAX(winner_rank_points) FROM  players WHERE  player_id IN ( SELECT  winner_id FROM  matches ) ); ",
      "SELECT  m.winner_name, p.winner_rank_points FROM  matches AS m, players AS p WHERE  m.winner_id = p.player_id AND p.winner_rank_points = ( SELECT  MAX(winner_rank_points) FROM  players ); ",
      "SELECT  m.winner_name, p.winner_rank_points FROM  matches AS m JOIN  players AS p ON  m.winner_id = p.player_id GROUP BY  m.winner_name HAVING  p.winner_rank_points = ( SELECT  MAX(winner_rank_points) FROM  players ); ",
      "SELECT  p.first_name || ' ' || p.last_name AS winner_name, p.winner_rank_points FROM  players AS p WHERE  p.winner_rank_points = ( SELECT  MAX(winner_rank_points) FROM  players WHERE  player_id IN ( SELECT  winner_id FROM  matches ) ) LIMIT 1; ",
      "SELECT  p.first_name || ' ' || p.last_name AS winner_name, p.winner_rank_points FROM  players AS p WHERE  p.player_id IN ( SELECT  winner_id FROM  matches GROUP BY  winner_id HAVING  COUNT(*) = ( SELECT  COUNT(*) AS max_matches_won FROM  matches GROUP BY  winner_id ORDER BY  max_matches_won DESC LIMIT 1 ) ); ",
      "SELECT  p.first_name || ' ' || p.last_name AS winner_name, MAX(p.winner_rank_points) AS max_rank_points FROM  players AS p WHERE  p.player_id IN ( SELECT  winner_id FROM  matches GROUP BY  winner_id HAVING  COUNT(*) = ( SELECT  COUNT(*) AS max_matches_won FROM  matches GROUP BY  winner_id ORDER BY  max_matches_won DESC LIMIT 1 ) ) GROUP BY  winner_name ORDER BY  max_rank_points DESC LIMIT 1;"
    ]
  },
  {
    "id": 466,
    "db_id": "wta_1",
    "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT winner_name  FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = \"Australian Open\" ORDER BY winner_rank_points DESC LIMIT 1; ",
      "SELECT m.winner_name  FROM matches m, players p, rankings r WHERE m.winner_id = p.player_id AND p.player_id = r.player_id AND m.tourney_name = \"Australian Open\" ORDER BY m.winner_rank_points DESC LIMIT 1; ",
      "SELECT winner_name FROM matches, players, rankings WHERE matches.winner_id = players.player_id AND players.player_id = rankings.player_id AND tourney_name = \"Australian Open\" GROUP BY winner_name HAVING MAX(winner_rank_points); ",
      "SELECT winner_name  FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = \"Australian Open\" GROUP BY winner_name HAVING winner_rank_points = MAX(winner_rank_points) LIMIT 1; ",
      "SELECT winner_name  FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = \"Australian Open\" ORDER BY winner_rank_points DESC FETCH FIRST ROW ONLY; ",
      "SELECT winner_name  FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = \"Australian Open\" HAVING winner_rank_points = MAX(winner_rank_points) LIMIT 1; ",
      "SELECT DISTINCT winner_name  FROM matches, players, rankings WHERE matches.winner_id = players.player_id AND players.player_id = rankings.player_id AND tourney_name = \"Australian Open\" AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) LIMIT 1; ",
      "SELECT winner_name  FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = \"Australian Open\" AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) AND ROWNUM <= 1; ",
      "SELECT winner_name  FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = \"Australian Open\" AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) AND rownum <= 1; ",
      "SELECT winner_name  FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = \"Australian Open\" AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = \"Australian Open\") LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT winner_name  FROM matches  WHERE tourney_name = \"Australian Open\"  ORDER BY winner_rank_points DESC  LIMIT 1; ",
      "SELECT DISTINCT winner_name  FROM matches  WHERE tourney_name = \"Australian Open\"  AND winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\"); ",
      "SELECT players.first_name, players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = \"Australian Open\"  GROUP BY players.player_id  HAVING matches.winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\"); ",
      "SELECT winner_name  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE tourney_name = \"Australian Open\"  AND winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\"); ",
      "SELECT p.first_name, p.last_name  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE m.tourney_name = \"Australian Open\"  AND m.winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\"); ",
      "SELECT winner_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE tourney_name = \"Australian Open\"  AND winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\"); ",
      "SELECT DISTINCT winner_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE tourney_name = \"Australian Open\"  AND winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\"); ",
      "SELECT winner_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE tourney_name = \"Australian Open\"  AND winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\"); ",
      "SELECT p.first_name, p.last_name  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE m.tourney_name = \"Australian Open\"  AND m.winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\"); ",
      "SELECT players.first_name, players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = \"Australian Open\"  AND matches.winner_rank_points = (SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = \"Australian Open\");"
    ],
    "gpt_answers3": [
      "SELECT winner_name FROM matches WHERE tourney_name = \"Australian Open\" ORDER BY winner_rank_points DESC LIMIT 1; ",
      "SELECT winner_name FROM matches WHERE tourney_name = \"Australian Open\" AND winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = \"Australian Open\" ); ",
      "SELECT m.winner_name FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN ( SELECT MAX(winner_rank_points) AS max_points FROM matches WHERE tourney_name = \"Australian Open\" ) subq ON m.winner_rank_points = subq.max_points WHERE m.tourney_name = \"Australian Open\"; ",
      "SELECT p.first_name || \" \" || p.last_name AS winner_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = \"Australian Open\" AND m.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = \"Australian Open\" ); ",
      "SELECT p.first_name || \" \" || p.last_name AS winner_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = \"Australian Open\" AND m.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = \"Australian Open\" AND winner_id = m.winner_id ); ",
      "SELECT DISTINCT p1.first_name || \" \" || p1.last_name AS winner_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id WHERE m.tourney_name = \"Australian Open\" AND m.winner_rank_points = ( SELECT MAX(m2.winner_rank_points) FROM matches m2 JOIN players p2 ON m2.winner_id = p2.player_id WHERE m2.tourney_name = \"Australian Open\" ); ",
      "SELECT p1.first_name || \" \" || p1.last_name AS winner_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN ( SELECT MAX(m2.winner_rank_points) AS max_points FROM matches m2 WHERE m2.tourney_name = \"Australian Open\" ) subq ON m.winner_rank_points = subq.max_points WHERE m.tourney_name = \"Australian Open\"; ",
      "SELECT p.first_name || \" \" || p.last_name AS winner_name FROM players p JOIN ( SELECT winner_id, MAX(winner_rank_points) AS max_points FROM matches WHERE tourney_name = \"Australian Open\" GROUP BY winner_id ) subq ON p.player_id = subq.winner_id WHERE subq.max_points = ( SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = \"Australian Open\" ); ",
      "SELECT p.first_name || \" \" || p.last_name AS winner_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = \"Australian Open\" AND m.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = \"Australian Open\" ); ",
      "SELECT p.first_name || \" \" || p.last_name AS winner_name FROM players p JOIN ( SELECT winner_id, MAX(winner_rank_points) AS max_points FROM matches WHERE tourney_name = \"Australian Open\" GROUP BY winner_id ) subq ON p.player_id = subq.winner_id ORDER BY subq.max_points DESC LIMIT 1;"
    ]
  },
  {
    "id": 470,
    "db_id": "wta_1",
    "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "gpt_answers1": [
      "SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;",
      "SELECT players.first_name, AVG(ranking) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id;",
      "SELECT p.first_name, AVG(r.ranking) FROM players AS p, rankings AS r WHERE p.player_id = r.player_id GROUP BY p.player_id;",
      "SELECT p.first_name, AVG(rankings.ranking) FROM players AS p INNER JOIN rankings ON p.player_id = rankings.player_id GROUP BY p.player_id;",
      "SELECT first_name, AVG(ranking) FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;",
      "SELECT p.first_name, AVG(r.ranking) FROM players p, rankings r WHERE p.player_id = r.player_id GROUP BY p.first_name;",
      "SELECT p.first_name, AVG(rankings.ranking) FROM players p INNER JOIN rankings ON p.player_id = rankings.player_id GROUP BY p.first_name;",
      "SELECT DISTINCT players.first_name, AVG(rankings.ranking) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;",
      "SELECT DISTINCT p.first_name, AVG(r.ranking) FROM players AS p, rankings AS r WHERE p.player_id = r.player_id GROUP BY p.first_name;",
      "SELECT DISTINCT p.first_name, AVG(rankings.ranking) FROM players AS p INNER JOIN rankings ON p.player_id = rankings.player_id GROUP BY p.first_name;"
    ],
    "gpt_answers2": [
      "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id; ",
      "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id; ",
      "SELECT players.first_name, AVG(ranking) AS avg_ranking FROM players  NATURAL JOIN rankings GROUP BY player_id; ",
      "SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players AS p JOIN rankings AS r ON p.player_id = r.player_id GROUP BY p.player_id; ",
      "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id; ",
      "SELECT players.first_name, AVG(ranking) AS avg_ranking FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT first_name, AVG(ranking) AS avg_ranking FROM players INNER JOIN rankings USING (player_id) GROUP BY first_name; ",
      "SELECT first_name, AVG(rankings.ranking) AS avg_ranking FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY first_name; ",
      "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT first_name, AVG(ranking) AS avg_ranking FROM players JOIN rankings USING (player_id) GROUP BY first_name;"
    ],
    "gpt_answers3": [
      "SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;",
      "SELECT first_name, AVG(ranking) as average_ranking FROM players JOIN rankings USING(player_id) GROUP BY player_id;",
      "SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id;",
      "SELECT first_name, AVG(ranking) as average_ranking FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY player_id;",
      "SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;",
      "SELECT first_name, AVG(ranking) as average_ranking FROM players INNER JOIN rankings USING(player_id) GROUP BY player_id;",
      "SELECT players.first_name, AVG(rankings.ranking) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.first_name;",
      "SELECT first_name, AVG(ranking) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY first_name;",
      "SELECT players.first_name, AVG(rankings.ranking) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;",
      "SELECT first_name, AVG(ranking) FROM players INNER JOIN rankings USING(player_id) GROUP BY first_name;"
    ]
  },
  {
    "id": 472,
    "db_id": "wta_1",
    "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "gpt_answers1": [
      "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY first_name; ",
      "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players, rankings GROUP BY players.player_id; ",
      "SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id; ",
      "SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players AS p INNER JOIN rankings AS r ON p.player_id = r.player_id GROUP BY p.first_name; ",
      "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name; ",
      "SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name; ",
      "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players AS p JOIN rankings AS r ON p.player_id = r.player_id GROUP BY p.first_name;"
    ],
    "gpt_answers2": [
      "SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT p.first_name, SUM(r.ranking_points) FROM players p, rankings r WHERE p.player_id = r.player_id GROUP BY p.first_name; ",
      "SELECT first_name, SUM(ranking_points) FROM players NATURAL JOIN rankings GROUP BY first_name; ",
      "SELECT first_name, SUM(ranking_points) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY first_name; ",
      "SELECT players.first_name, SUM(rankings.ranking_points) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT players.first_name, SUM(rankings.ranking_points) FROM rankings JOIN players ON players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT first_name, SUM(rankings.ranking_points) FROM players JOIN rankings USING (player_id) GROUP BY first_name; ",
      "SELECT players.first_name, SUM(rankings.ranking_points) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT players.first_name, SUM(rankings.ranking_points) FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name; ",
      "SELECT players.first_name, SUM(rankings.ranking_points) FROM rankings LEFT JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name;"
    ],
    "gpt_answers3": [
      "SELECT players.first_name, SUM(rankings.ranking_points) AS total_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ",
      "SELECT first_name, SUM(ranking_points) AS total_points FROM players, rankings WHERE rankings.player_id = players.player_id GROUP BY players.player_id ",
      "SELECT p.first_name, SUM(r.ranking_points) AS total_points FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ",
      "SELECT players.first_name, SUM(rankings.ranking_points) AS total_points FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id ",
      "SELECT p.first_name, SUM(r.ranking_points) AS total_points FROM players p, rankings r WHERE p.player_id = r.player_id GROUP BY p.player_id ",
      "SELECT players.first_name, SUM(rankings.ranking_points) AS total_points FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ",
      "SELECT p.first_name, SUM(r.ranking_points) AS total_points FROM players p, rankings r WHERE p.player_id = r.player_id GROUP BY p.player_id ",
      "SELECT players.first_name, SUM(rankings.ranking_points) AS total_points FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ",
      "SELECT first_name, SUM(ranking_points) AS total_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ",
      "SELECT p.first_name, SUM(r.ranking_points) AS total_points FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id"
    ]
  },
  {
    "id": 480,
    "db_id": "wta_1",
    "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "gpt_answers1": [
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT rankings.ranking_date, COUNT(DISTINCT rankings.tours) AS total_tours FROM rankings GROUP BY rankings.ranking_date; ",
      "SELECT ranking_date, COUNT(ranking_date) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings; ",
      "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings; ",
      "SELECT ranking_date, COUNT(DISTINCT tours) total_tours FROM rankings; ",
      "SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date ORDER BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings WHERE ranking_date IS NOT NULL GROUP BY ranking_date;"
    ],
    "gpt_answers2": [
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date; ",
      "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date; ",
      "SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date; ",
      "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date HAVING COUNT(*) > 0; ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings WHERE tours IS NOT NULL GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings WHERE tours IS NOT NULL GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings WHERE tours IS NOT NULL GROUP BY ranking_date;"
    ],
    "gpt_answers3": [
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours  FROM rankings  GROUP BY ranking_date ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours  FROM rankings  GROUP BY ranking_date  ORDER BY ranking_date ",
      "SELECT ranking_date, COUNT(tours) AS total_tours  FROM rankings  GROUP BY ranking_date  ORDER BY ranking_date ",
      "SELECT ranking_date, COUNT(*) AS total_tours  FROM rankings  GROUP BY ranking_date  ORDER BY ranking_date ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours  FROM rankings  GROUP BY ranking_date  HAVING COUNT(DISTINCT tours) > 0 ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours  FROM rankings  GROUP BY ranking_date  HAVING COUNT(*) > 0 ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours  FROM rankings  WHERE tours IS NOT NULL  GROUP BY ranking_date  ORDER BY ranking_date ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours  FROM rankings  WHERE tours <> ''  GROUP BY ranking_date  ORDER BY ranking_date ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours  FROM rankings  WHERE tours != ''  GROUP BY ranking_date  ORDER BY ranking_date ",
      "SELECT ranking_date, COUNT(*) AS total_tours  FROM rankings  WHERE tours IS NOT NULL  GROUP BY ranking_date  ORDER BY ranking_date"
    ]
  },
  {
    "id": 481,
    "db_id": "wta_1",
    "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "gpt_answers1": [
      "SELECT ranking_date, COUNT(DISTINCT tours)  FROM rankings  GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id)  FROM matches  JOIN rankings ON matches.winner_id = rankings.player_id  GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id)  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id)  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE EXISTS(SELECT 1 FROM rankings WHERE rankings.player_id = players.player_id)  GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id)  FROM matches  WHERE winner_id IN (SELECT player_id FROM rankings)  GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id)  FROM matches  WHERE EXISTS(SELECT 1 FROM rankings WHERE rankings.player_id = matches.winner_id)  GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id)  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  GROUP BY ranking_date ORDER BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id)  FROM (SELECT ranking_date, tours, player_id  FROM rankings  GROUP BY ranking_date, tours, player_id) AS subquery  JOIN matches ON subquery.player_id = matches.winner_id  GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id)  FROM (SELECT ranking_date, tours, player_id  FROM rankings  GROUP BY ranking_date, tours, player_id) AS subquery  JOIN matches ON subquery.player_id IN (matches.winner_id, matches.loser_id) GROUP BY ranking_date;"
    ],
    "gpt_answers2": [
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id) AS total_tours FROM matches INNER JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id) AS total_tours FROM matches INNER JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings INNER JOIN players ON rankings.player_id = players.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT matches.tourney_id) AS total_tours FROM matches INNER JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT matches.tourney_id) AS total_tours FROM matches INNER JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT r.ranking_date, COUNT(DISTINCT t.tourney_id) AS total_tours FROM rankings r INNER JOIN (SELECT tourney_id, winner_id FROM matches UNION ALL SELECT tourney_id, loser_id FROM matches) t ON r.player_id = t.winner_id GROUP BY r.ranking_date; ",
      "SELECT r.ranking_date, COUNT(DISTINCT t.tourney_id) AS total_tours FROM rankings r INNER JOIN (SELECT tourney_id, winner_id FROM matches UNION ALL SELECT tourney_id, loser_id FROM matches) t ON r.player_id = t.loser_id GROUP BY r.ranking_date;"
    ],
    "gpt_answers3": [
      "SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(*) FROM rankings GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tournament_id) FROM matches JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id) + COUNT(DISTINCT tournament_id) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id AND matches.loser_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id) AS total_tournaments FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT tourney_id) AS total_tournaments FROM matches JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT matches.tourney_id) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id OR matches.loser_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT matches.tourney_id) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY ranking_date UNION SELECT ranking_date, COUNT(DISTINCT matches.tourney_id) FROM matches JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY ranking_date; ",
      "SELECT ranking_date, COUNT(DISTINCT matches.tourney_id) FROM (SELECT tourney_date, tourney_id, winner_id FROM matches UNION SELECT tourney_date, tourney_id, loser_id FROM matches) AS matches JOIN rankings ON matches.winner_id = rankings.player_id OR matches.loser_id = rankings.player_id GROUP BY ranking_date;"
    ]
  },
  {
    "id": 484,
    "db_id": "wta_1",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "gpt_answers1": [
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC, winner_rank ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches) ORDER BY winner_rank ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches GROUP BY winner_age) ORDER BY winner_rank ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches GROUP BY winner_name) ORDER BY winner_rank ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches) GROUP BY winner_name ORDER BY winner_rank ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches) AND ranking_points > 0 ORDER BY winner_rank ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches GROUP BY winner_age) AND ranking_points > 0 ORDER BY winner_rank ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches GROUP BY winner_name) GROUP BY winner_name ORDER BY winner_rank ASC LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches) GROUP BY winner_name, winner_rank ORDER BY winner_rank ASC LIMIT 3;"
    ],
    "gpt_answers2": [
      "SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY p.birth_date ASC LIMIT 3; ",
      "SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE p.birth_date IS NOT NULL ORDER BY p.birth_date ASC LIMIT 3; ",
      "SELECT p.first_name, p.last_name, r.ranking FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN rankings r ON p.player_id = r.player_id WHERE p.birth_date IS NOT NULL ORDER BY p.birth_date ASC LIMIT 3; ",
      "SELECT p.first_name, p.last_name, r.ranking FROM players p, matches m, rankings r WHERE p.player_id = m.winner_id AND p.player_id = r.player_id AND p.birth_date IS NOT NULL ORDER BY p.birth_date ASC LIMIT 3; ",
      "SELECT first_name, last_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE birth_date IS NOT NULL ORDER BY birth_date ASC LIMIT 3; ",
      "SELECT first_name, last_name, winner_rank FROM matches, players WHERE winner_id = player_id AND birth_date IS NOT NULL ORDER BY birth_date ASC LIMIT 3; ",
      "SELECT first_name, last_name, ranking FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN rankings r ON p.player_id = r.player_id WHERE birth_date IS NOT NULL ORDER BY birth_date ASC LIMIT 3; ",
      "SELECT first_name, last_name, ranking FROM players INNER JOIN matches ON players.player_id = matches.winner_id INNER JOIN rankings ON players.player_id = rankings.player_id WHERE birth_date IS NOT NULL ORDER BY birth_date ASC LIMIT 3; ",
      "SELECT p.first_name, p.last_name, m.winner_rank FROM players p INNER JOIN matches m ON p.player_id = m.winner_id WHERE p.birth_date IS NOT NULL ORDER BY p.birth_date ASC LIMIT 3; ",
      "SELECT p.first_name, p.last_name, r.ranking FROM players p INNER JOIN matches m ON p.player_id = m.winner_id INNER JOIN rankings r ON p.player_id = r.player_id WHERE p.birth_date IS NOT NULL ORDER BY p.birth_date ASC LIMIT 3;"
    ],
    "gpt_answers3": [
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age IN (SELECT winner_age  FROM matches  ORDER BY winner_age ASC  LIMIT 3) ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age IN (SELECT MIN(winner_age)  FROM matches  ORDER BY winner_age ASC  LIMIT 3) ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age IN (SELECT winner_age  FROM matches  ORDER BY winner_age ASC  FETCH FIRST 3 ROWS ONLY) ",
      "SELECT winner_name, winner_rank  FROM matches ORDER BY winner_age ASC LIMIT 3 ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age IN (SELECT MIN(winner_age)  FROM matches  GROUP BY winner_name  ORDER BY winner_age ASC  LIMIT 3) ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age IN (SELECT winner_age  FROM matches  GROUP BY winner_name, winner_age  ORDER BY winner_age ASC  LIMIT 3) ",
      "SELECT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  ORDER BY winner_age ASC  LIMIT 3 ",
      "SELECT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  ORDER BY winner_id ASC  LIMIT 3 ",
      "SELECT winner_name, winner_rank  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  ORDER BY winner_age ASC  LIMIT 3 ",
      "SELECT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  ORDER BY winner_age ASC  FETCH FIRST 3 ROWS ONLY"
    ]
  },
  {
    "id": 485,
    "db_id": "wta_1",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "gpt_answers1": [
      "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches WHERE winner_age IN (SELECT MIN(winner_age) FROM matches) LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches, players WHERE matches.winner_id = players.player_id ORDER BY players.player_age LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.player_age LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches INNER JOIN players ON matches.winner_id = players.player_id ORDER BY players.player_age LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches) LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT MIN(winner_age) FROM matches) LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE winner_age <= (SELECT MIN(winner_age) + 2 FROM matches) ORDER BY winner_age LIMIT 3;",
      "SELECT winner_name, winner_rank FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE winner_age <= (SELECT MIN(winner_age) + 2 FROM matches LIMIT 1) ORDER BY winner_age LIMIT 3;"
    ],
    "gpt_answers2": [
      "SELECT winner_name, winner_rank  FROM matches  ORDER BY winner_age ASC  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age IN (SELECT MIN(winner_age) FROM matches) LIMIT 3; ",
      "SELECT m.winner_name, m.winner_rank  FROM matches m  INNER JOIN (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 3) AS sub  ON m.winner_age = sub.winner_age; ",
      "SELECT m.winner_name, m.winner_rank  FROM matches AS m  WHERE m.winner_age IN (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 3); ",
      "SELECT m.winner_name, m.winner_rank  FROM matches AS m  JOIN (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 3) AS sub  ON m.winner_age = sub.winner_age; ",
      "SELECT winner_name, winner_rank  FROM matches  ORDER BY winner_age ASC  FETCH FIRST 3 ROWS ONLY; ",
      "SELECT m.winner_name, m.winner_rank  FROM matches AS m  WHERE m.winner_age <= (SELECT MAX(winner_age) FROM matches ORDER BY winner_age ASC LIMIT 3); ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age <= (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 3, 1); ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age <= (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 2, 1) ORDER BY winner_age ASC  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age <= (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 2, 1)  AND winner_age <= (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 1, 1)  LIMIT 3;"
    ],
    "gpt_answers3": [
      "SELECT winner_name, winner_rank  FROM matches  ORDER BY winner_age ASC  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age IN (SELECT MIN(winner_age) FROM matches)  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  ORDER BY players.winner_age ASC  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE winner_age IN (SELECT MIN(winner_age) FROM matches)  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  ORDER BY players.winner_age ASC  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE winner_age IN (SELECT MIN(winner_age) FROM matches)  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM (SELECT winner_name, winner_rank, ROW_NUMBER() OVER (ORDER BY winner_age ASC) AS rn  FROM matches) AS subquery  WHERE rn <= 3; ",
      "SELECT winner_name, winner_rank  FROM (SELECT winner_name, winner_rank  FROM matches  ORDER BY winner_age ASC  LIMIT 3) AS subquery; ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age <= (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 1 OFFSET 2)  ORDER BY winner_age ASC  LIMIT 3; ",
      "SELECT winner_name, winner_rank  FROM matches  WHERE winner_age <= (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 2, 1)  ORDER BY winner_age ASC  LIMIT 3;"
    ]
  },
  {
    "id": 486,
    "db_id": "wta_1",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT m.winner_id)  FROM matches AS m INNER JOIN players AS p ON m.winner_id = p.player_id WHERE tourney_name = 'WTA Championships' AND p.hand = 'left' ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left' ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches WHERE tourney_name = 'WTA Championships' AND winner_id IN (SELECT player_id FROM players WHERE hand = 'left') ",
      "SELECT COUNT(DISTINCT m.winner_id)  FROM matches AS m, players AS p WHERE m.winner_id = p.player_id AND p.hand = 'left' AND m.tourney_name = 'WTA Championships' ",
      "SELECT COUNT(DISTINCT m.winner_id)  FROM matches AS m JOIN players AS p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'left' ",
      "SELECT COUNT(DISTINCT m.winner_id)  FROM matches m INNER JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'left' ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches WHERE tourney_name = 'WTA Championships' AND winner_id IN (SELECT player_id FROM players WHERE hand = 'left') ",
      "SELECT COUNT(DISTINCT m.winner_id)  FROM matches AS m WHERE m.tourney_name = 'WTA Championships' AND m.winner_hand = 'left' ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches, players WHERE winner_id = player_id AND tourney_name = 'WTA Championships' AND hand = 'left' ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches JOIN players ON winner_id = player_id WHERE tourney_name = 'WTA Championships' AND hand = 'left'"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = \"WTA Championships\" AND winner_hand = \"left\"; ",
      "SELECT COUNT(DISTINCT m.winner_id)  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE m.tourney_name = \"WTA Championships\" AND p.hand = \"left\"; ",
      "SELECT COUNT(*)  FROM (SELECT COUNT(DISTINCT player_id)  FROM matches  WHERE tourney_name = \"WTA Championships\" AND winner_hand = \"left\"  GROUP BY winner_id  HAVING COUNT(DISTINCT player_id) >= 2) AS subquery; ",
      "SELECT COUNT(*)  FROM (SELECT DISTINCT m.winner_id  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE m.tourney_name = \"WTA Championships\" AND p.hand = \"left\" GROUP BY m.winner_id  HAVING COUNT(DISTINCT p.player_id) >= 2) AS subquery; ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = \"WTA Championships\"  INTERSECT  SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_hand = \"left\"; ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = \"WTA Championships\"  AND winner_id IN (SELECT player_id FROM players WHERE hand = \"left\"); ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = \"WTA Championships\"  AND (winner_hand = \"left\" OR loser_hand = \"left\"); ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE tourney_name = \"WTA Championships\"  AND winner_hand = \"left\"  AND loser_id IN (SELECT player_id FROM players WHERE hand = \"left\"); ",
      "SELECT COUNT(DISTINCT m.winner_id)  FROM matches m  JOIN players p1 ON m.winner_id = p1.player_id  JOIN players p2 ON m.loser_id = p2.player_id  WHERE m.tourney_name = \"WTA Championships\"  AND p1.hand = \"left\"  AND p2.hand = \"left\"; ",
      "SELECT COUNT(*)  FROM (SELECT COUNT(DISTINCT m.winner_id)  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE m.tourney_name = \"WTA Championships\" AND p.hand = \"left\"  GROUP BY m.winner_id) AS subquery;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT m.winner_id)  FROM matches m  INNER JOIN players p ON m.winner_id = p.player_id  WHERE m.tourney_name = \"WTA Championships\" AND p.hand = \"left\"; ",
      "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = \"WTA Championships\" AND (winner_hand = \"left\" OR loser_hand = \"left\"); ",
      "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = \"WTA Championships\" AND winner_hand = \"left\"  UNION SELECT COUNT(DISTINCT loser_id) FROM matches WHERE tourney_name = \"WTA Championships\" AND loser_hand = \"left\"; ",
      "SELECT COUNT(DISTINCT winner_id) FROM ( SELECT m.winner_id FROM matches m  INNER JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = \"WTA Championships\" AND p.hand = \"left\" UNION SELECT m.loser_id FROM matches m  INNER JOIN players p ON m.loser_id = p.player_id WHERE m.tourney_name = \"WTA Championships\" AND p.hand = \"left\" ); ",
      "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = \"WTA Championships\" AND winner_id IN ( SELECT player_id FROM players WHERE hand = \"left\" ); ",
      "SELECT COUNT(DISTINCT winner_id) FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = \"WTA Championships\" AND players.hand = \"left\"; ",
      "SELECT COUNT(DISTINCT m.winner_id) FROM matches m, players p WHERE m.tourney_name = \"WTA Championships\" AND m.winner_id = p.player_id AND p.hand = \"left\"; ",
      "SELECT COUNT(DISTINCT m.winner_id) FROM matches m, players p WHERE m.tourney_name = \"WTA Championships\" AND m.winner_id = p.player_id  AND EXISTS ( SELECT * FROM players WHERE player_id = m.winner_id AND hand = \"left\" ); ",
      "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = \"WTA Championships\" AND winner_hand = \"left\"; ",
      "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = \"WTA Championships\" AND winner_id IN ( SELECT player_id FROM players WHERE hand = \"left\" );"
    ]
  },
  {
    "id": 487,
    "db_id": "wta_1",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT winner_id)  FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'left' AND tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(DISTINCT players.player_id) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = 'left' AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(DISTINCT matches.winner_id) FROM matches, players WHERE matches.winner_id = players.player_id AND players.hand = 'left' AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches WHERE winner_hand = 'left' AND tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(DISTINCT players.player_id) FROM players WHERE players.hand = 'left' AND players.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships'); ",
      "SELECT COUNT(DISTINCT players.player_id) FROM players, matches WHERE players.player_id = matches.winner_id  AND players.hand = 'left'  AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(*)  FROM (SELECT DISTINCT winner_id  FROM matches JOIN players ON matches.winner_id = players.player_id  WHERE players.hand = 'left' AND tourney_name = 'WTA Championships') AS subquery; ",
      "SELECT COUNT(*)  FROM (SELECT DISTINCT winner_id  FROM matches  WHERE winner_hand = 'left' AND tourney_name = 'WTA Championships') AS subquery; ",
      "SELECT COUNT(*)  FROM (SELECT DISTINCT players.player_id  FROM players  WHERE players.hand = 'left'  AND players.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships')) AS subquery; ",
      "SELECT COUNT(*)  FROM (SELECT DISTINCT players.player_id  FROM players, matches  WHERE players.player_id = matches.winner_id  AND players.hand = 'left'  AND matches.tourney_name = 'WTA Championships') AS subquery;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT winner_id) FROM matches  WHERE winner_hand = 'left' AND tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(DISTINCT matches.winner_id)  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'left' AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(*)  FROM matches  WHERE winner_hand = 'left' AND tourney_name = 'WTA Championships' GROUP BY winner_id; ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches, players  WHERE matches.winner_id = players.player_id  AND players.hand = 'left'  AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(*)  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE players.hand = 'left' AND matches.tourney_name = 'WTA Championships' GROUP BY matches.winner_id; ",
      "SELECT COUNT(*)  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE players.hand = 'left' AND tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(*)  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE hand = 'left' AND tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE players.hand = 'left' AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(DISTINCT winner_id)  FROM matches  INNER JOIN players ON (matches.winner_id = players.player_id AND players.hand = 'left')  WHERE tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(DISTINCT players.player_id)  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE players.hand = 'left' AND matches.tourney_name = 'WTA Championships';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*)   FROM matches   INNER JOIN players ON matches.winner_id = players.player_id   WHERE players.hand = 'left'   AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(*)   FROM matches   INNER JOIN players ON matches.winner_id = players.player_id   WHERE players.hand = 'left'   AND matches.tourney_id = (SELECT tourney_id FROM matches WHERE tourney_name = 'WTA Championships' LIMIT 1); ",
      "SELECT COUNT(DISTINCT matches.winner_id)   FROM matches   INNER JOIN players ON matches.winner_id = players.player_id   WHERE players.hand = 'left'   AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(*)   FROM matches   WHERE winner_id IN (SELECT player_id FROM players WHERE hand = 'left')   AND tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(*)   FROM matches   INNER JOIN players AS winners ON matches.winner_id = winners.player_id   INNER JOIN players AS losers ON matches.loser_id = losers.player_id   WHERE winners.hand = 'left'   AND matches.tourney_name = 'WTA Championships'; ",
      "SELECT COUNT(*)   FROM matches   INNER JOIN players ON matches.winner_id = players.player_id   WHERE players.hand = 'left'   AND matches.tourney_name = 'WTA Championships'   GROUP BY matches.winner_id; ",
      "SELECT COUNT(DISTINCT matches.winner_id)   FROM matches   INNER JOIN players ON matches.winner_id = players.player_id   WHERE players.hand = 'left'   AND EXISTS (SELECT * FROM matches WHERE tourney_name = 'WTA Championships'); ",
      "SELECT COUNT(*)   FROM matches   INNER JOIN players ON matches.winner_id = players.player_id   WHERE players.hand = 'left'   AND tourney_name = 'WTA Championships'   GROUP BY matches.winner_id   HAVING tourney_id = (SELECT tourney_id FROM matches WHERE tourney_name = 'WTA Championships' LIMIT 1); ",
      "SELECT COUNT(*)   FROM matches   INNER JOIN players ON matches.winner_id = players.player_id   WHERE players.hand = 'left'   AND tourney_name = 'WTA Championships'   GROUP BY matches.winner_id   HAVING tourney_id IN (SELECT tourney_id FROM matches WHERE tourney_name = 'WTA Championships' LIMIT 1); ",
      "SELECT COUNT(*)   FROM matches   INNER JOIN players ON matches.winner_id = players.player_id   WHERE players.hand = 'left'   AND EXISTS (SELECT * FROM matches WHERE tourney_name = 'WTA Championships'); "
    ]
  },
  {
    "id": 488,
    "db_id": "wta_1",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches ); ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1; ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) LIMIT 1; ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players WHERE player_id = ( SELECT winner_id FROM matches WHERE winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches ) ); ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_rank_points = ( SELECT MAX(matches.winner_rank_points) FROM matches ) LIMIT 1; ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id INNER JOIN ( SELECT MAX(winner_rank_points) AS max_rank_points FROM matches ) AS subquery WHERE matches.winner_rank_points = subquery.max_rank_points; ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id INNER JOIN ( SELECT MAX(winner_rank_points) AS max_rank_points FROM matches WHERE winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches ) ) AS subquery WHERE matches.winner_rank_points = subquery.max_rank_points; ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id INNER JOIN ( SELECT MAX(winner_rank_points) AS max_rank_points FROM matches ORDER BY max_rank_points DESC LIMIT 1 ) AS subquery WHERE matches.winner_rank_points = subquery.max_rank_points; ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id HAVING matches.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches ); ",
      "SELECT players.first_name, players.country_code, players.birth_date FROM players WHERE player_id IN ( SELECT winner_id FROM matches WHERE winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches ) );"
    ],
    "gpt_answers2": [
      "SELECT  players.first_name, players.country_code, players.birth_date FROM  players WHERE players.player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1); ",
      "SELECT  first_name, country_code, birth_date FROM  players WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)); ",
      "SELECT  first_name, country_code, birth_date FROM  players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT  players.first_name, players.country_code, players.birth_date FROM  players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1; ",
      "SELECT  players.first_name, players.country_code, players.birth_date FROM  players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1; ",
      "SELECT  first_name, country_code, birth_date FROM  players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE winner_id = players.player_id) LIMIT 1; ",
      "SELECT  players.first_name, players.country_code, players.birth_date FROM  players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches GROUP BY winner_id HAVING winner_id = players.player_id) LIMIT 1; ",
      "SELECT  players.first_name, players.country_code, players.birth_date FROM  players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1; ",
      "SELECT  first_name, country_code, birth_date FROM  players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT winner_rank_points FROM matches ORDER BY winner_rank_points DESC LIMIT 1) LIMIT 1; ",
      "SELECT  first_name, country_code, birth_date FROM  (SELECT first_name, country_code, birth_date, ROW_NUMBER() OVER (ORDER BY matches.winner_rank_points DESC) AS row_number FROM players JOIN matches ON players.player_id = matches.winner_id) AS subquery WHERE row_number = 1;"
    ],
    "gpt_answers3": [
      "SELECT first_name, country_code, birth_date  FROM players  WHERE player_id = ( SELECT winner_id  FROM matches  ORDER BY winner_rank_points DESC  LIMIT 1 ) ",
      "SELECT p.first_name, p.country_code, p.birth_date  FROM players p  INNER JOIN matches m ON p.player_id = m.winner_id  ORDER BY m.winner_rank_points DESC  LIMIT 1 ",
      "SELECT p.first_name, p.country_code, p.birth_date  FROM players p, matches m  WHERE p.player_id = m.winner_id  ORDER BY m.winner_rank_points DESC  LIMIT 1 ",
      "SELECT first_name, country_code, birth_date  FROM players  WHERE player_id = ( SELECT winner_id  FROM matches  WHERE winner_rank_points = ( SELECT MAX(winner_rank_points)  FROM matches ) ) ",
      "SELECT first_name, country_code, birth_date  FROM players  INNER JOIN ( SELECT winner_id  FROM matches  ORDER BY winner_rank_points DESC  LIMIT 1 ) AS sub ON players.player_id = sub.winner_id ",
      "SELECT p.first_name, p.country_code, p.birth_date  FROM players p, matches m  WHERE p.player_id = m.winner_id  AND m.winner_rank_points = ( SELECT MAX(winner_rank_points)  FROM matches )  LIMIT 1 ",
      "SELECT first_name, country_code, birth_date  FROM players  INNER JOIN ( SELECT winner_id, MAX(winner_rank_points) AS max_points  FROM matches  GROUP BY winner_id  ORDER BY max_points DESC  LIMIT 1 ) AS sub ON players.player_id = sub.winner_id ",
      "SELECT p.first_name, p.country_code, p.birth_date  FROM players AS p  JOIN ( SELECT winner_id, MAX(winner_rank_points) AS max_points  FROM matches GROUP BY winner_id ) AS m ON p.player_id = m.winner_id  ORDER BY max_points DESC  LIMIT 1 ",
      "SELECT p.first_name, p.country_code, p.birth_date  FROM players p  JOIN ( SELECT winner_id, winner_rank_points  FROM matches  ORDER BY winner_rank_points DESC  LIMIT 1 ) AS m ON p.player_id = m.winner_id ",
      "SELECT p.first_name, p.country_code, p.birth_date  FROM players p  JOIN ( SELECT winner_id, winner_rank_points  FROM matches  WHERE winner_rank_points = ( SELECT MAX(winner_rank_points)  FROM matches )  LIMIT 1 ) AS m ON p.player_id = m.winner_id"
    ]
  },
  {
    "id": 489,
    "db_id": "wta_1",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p JOIN  matches m ON p.player_id = m.winner_id GROUP BY  p.player_id ORDER BY  SUM(m.winner_rank_points) DESC LIMIT 1; ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p JOIN  matches m ON p.player_id = m.winner_id GROUP BY  p.player_id HAVING  SUM(m.winner_rank_points) =  (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p WHERE  p.player_id IN  (SELECT  m.winner_id FROM  matches m GROUP BY  m.winner_id HAVING  SUM(m.winner_rank_points) =  (SELECT  MAX(winner_rank_points) FROM matches)); ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p JOIN  matches m ON p.player_id = m.winner_id GROUP BY  p.first_name, p.country_code, p.birth_date HAVING  SUM(m.winner_rank_points) =  (SELECT  MAX(winner_rank_points) FROM matches); ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p WHERE  p.player_id =  (SELECT  winner_id FROM  matches GROUP BY  winner_id ORDER BY  SUM(winner_rank_points) DESC LIMIT 1); ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p JOIN  matches m ON p.player_id = m.winner_id GROUP BY  p.player_id, p.first_name, p.country_code, p.birth_date HAVING  SUM(m.winner_rank_points) =  (SELECT  MAX(winner_rank_points) FROM  (SELECT  winner_rank_points FROM  matches GROUP BY  winner_id) t); ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p JOIN  matches m ON p.player_id = m.winner_id GROUP BY  p.first_name, p.country_code, p.birth_date ORDER BY  SUM(m.winner_rank_points) DESC LIMIT 1; ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p WHERE  p.player_id =  (SELECT  winner_id FROM  matches GROUP BY  winner_id ORDER BY  SUM(winner_rank_points) DESC FETCH FIRST ROW ONLY); ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p JOIN  matches m ON p.player_id = m.winner_id GROUP BY  p.first_name, p.country_code, p.birth_date HAVING  SUM(m.winner_rank_points) >= ALL  (SELECT  SUM(winner_rank_points) FROM  matches GROUP BY  winner_id); ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p JOIN  matches m ON p.player_id = m.winner_id WHERE  m.winner_rank_points =  (SELECT  MAX(winner_rank_points) FROM  matches) GROUP BY  p.player_id LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT first_name, country_code, birth_date FROM players WHERE player_id = ( SELECT winner_id FROM matches GROUP BY winner_id ORDER BY SUM(winner_rank_points) DESC LIMIT 1 ) ",
      "SELECT  players.first_name, players.country_code, players.birth_date FROM  players INNER JOIN  matches ON players.player_id = matches.winner_id GROUP BY  players.first_name,  players.country_code,  players.birth_date ORDER BY  SUM(matches.winner_rank_points) DESC LIMIT 1; ",
      "SELECT first_name, country_code, birth_date FROM players WHERE player_id = ( SELECT winner_id FROM matches GROUP BY winner_id HAVING SUM(winner_rank_points) = ( SELECT MAX(total_points) FROM ( SELECT winner_id, SUM(winner_rank_points) as total_points FROM matches GROUP BY winner_id ) as subquery ) ) ",
      "SELECT  players.first_name,  players.country_code,  players.birth_date FROM  players JOIN  rankings ON players.player_id = rankings.player_id JOIN  matches ON players.player_id = matches.winner_id GROUP BY  players.first_name, players.country_code, players.birth_date HAVING  SUM(matches.winner_rank_points) = ( SELECT  MAX(total_points) FROM  ( SELECT  players.player_id, SUM(matches.winner_rank_points) as total_points FROM  players  JOIN  matches ON players.player_id = matches.winner_id GROUP BY  players.player_id ) as subquery ) ",
      "SELECT  players.first_name, players.country_code, players.birth_date FROM  players JOIN  matches ON players.player_id = matches.winner_id GROUP BY  players.first_name, players.country_code, players.birth_date HAVING  SUM(matches.winner_rank_points) = ( SELECT  MAX(points) FROM  ( SELECT  matches.winner_id, SUM(matches.winner_rank_points) as points FROM  matches GROUP BY  matches.winner_id ) as subquery ) LIMIT 1; ",
      "SELECT  first_name, country_code, birth_date FROM  players WHERE  player_id = ( SELECT  t1.winner_id  FROM  ( SELECT  winner_id, SUM(winner_rank_points) as rank_points FROM  matches GROUP BY  winner_id ORDER BY  rank_points DESC LIMIT 1 ) as t1 ); ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m on p.player_id = m.winner_id GROUP BY p.player_id, p.first_name, p.country_code, p.birth_date HAVING m.winner_rank_points = ( SELECT  MAX(winner_rank_points) FROM  matches ); ",
      "SELECT  p.first_name, p.country_code, p.birth_date FROM  players p JOIN  matches m ON p.player_id = m.winner_id WHERE  m.winner_rank_points = ( SELECT  MAX(winner_rank_points) FROM  matches ); ",
      "SELECT  first_name, country_code, birth_date FROM  players WHERE  player_id IN ( SELECT  winner_id FROM  matches GROUP BY  winner_id ORDER BY  SUM(winner_rank_points) DESC LIMIT 1 ); ",
      "SELECT  players.first_name, players.country_code, players.birth_date FROM  players JOIN  matches ON players.player_id = matches.winner_id GROUP BY  players.player_id, players.first_name, players.country_code, players.birth_date HAVING  matches.winner_rank_points = ( SELECT  MAX(matches.winner_rank_points) FROM  matches ) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id ORDER BY SUM(m.winner_rank_points) DESC LIMIT 1; ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id HAVING SUM(m.winner_rank_points) = (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) LIMIT 1; ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) GROUP BY p.first_name, p.country_code, p.birth_date; ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id, SUM(winner_rank_points) as total_points FROM matches GROUP BY winner_id ) m ON p.player_id = m.winner_id WHERE m.total_points = (SELECT MAX(total_points) FROM ( SELECT winner_id, SUM(winner_rank_points) as total_points FROM matches GROUP BY winner_id ) totals) LIMIT 1; ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id, SUM(winner_rank_points) as total_points FROM matches GROUP BY winner_id HAVING total_points = MAX(total_points) ) m ON p.player_id = m.winner_id LIMIT 1; ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id, p.first_name, p.country_code, p.birth_date HAVING SUM(m.winner_rank_points) = (SELECT MAX(winner_rank_points) FROM matches); ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id, p.first_name, p.country_code, p.birth_date HAVING SUM(m.winner_rank_points) = ( SELECT MAX(total_points)  FROM ( SELECT winner_id, SUM(winner_rank_points) as total_points FROM matches GROUP BY winner_id ) totals ); ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id, MAX(total_points) as max_points FROM ( SELECT winner_id, SUM(winner_rank_points) as total_points FROM matches GROUP BY winner_id ) totals GROUP BY winner_id ) m ON p.player_id = m.winner_id WHERE m.max_points = (SELECT MAX(total_points) FROM ( SELECT winner_id, SUM(winner_rank_points) as total_points FROM matches GROUP BY winner_id ) totals) LIMIT 1; ",
      "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points IN ( SELECT MAX(winner_rank_points)  FROM matches );"
    ]
  },
  {
    "id": 494,
    "db_id": "battle_death",
    "gold": "SELECT name ,  date FROM battle",
    "gpt_answers1": [
      "SELECT name, date, result FROM battle;",
      "SELECT battle.name, battle.date, battle.result FROM battle;",
      "SELECT name, date, result FROM battle AS b;",
      "SELECT b.name, b.date, b.result FROM battle AS b;",
      "SELECT battle.name AS name, battle.date AS date, battle.result AS result FROM battle;",
      "SELECT b.name AS name, b.date AS date, b.result AS result FROM battle AS b;",
      "SELECT b.name, b.date, b.result FROM battle b;",
      "SELECT name, date, result FROM battle ORDER BY date;",
      "SELECT name, date, result FROM battle WHERE date IS NOT NULL;",
      "SELECT DISTINCT name, date, result FROM battle;"
    ],
    "gpt_answers2": [
      "SELECT name, date, result FROM battle;",
      "SELECT battle.name, battle.date, battle.result FROM battle;",
      "SELECT b.name, b.date, b.result FROM battle AS b;",
      "SELECT b.name, b.date, b.result FROM battle b;",
      "SELECT b.name, b.date, b.result FROM battle AS b ORDER BY b.date;",
      "SELECT b.name, b.date, b.result FROM battle AS b WHERE b.date IS NOT NULL;",
      "SELECT b.name, b.date, b.result FROM battle AS b WHERE b.result IS NOT NULL;",
      "SELECT name, date, result FROM battle WHERE date IS NOT NULL;",
      "SELECT name, date, result FROM battle WHERE result IS NOT NULL;",
      "SELECT name, date, result FROM battle ORDER BY date DESC;"
    ],
    "gpt_answers3": [
      "SELECT name, date, result FROM battle;",
      "SELECT battle.name, battle.date, battle.result FROM battle;",
      "SELECT b.name, b.date, b.result FROM battle b;",
      "SELECT b.name AS battle_name, b.date AS battle_date, b.result AS battle_result FROM battle b;",
      "SELECT b.name, b.date, b.result FROM battle AS b;",
      "SELECT name, date, result FROM battle AS b;",
      "SELECT battle.name AS battle_name, battle.date AS battle_date, battle.result AS battle_result FROM battle;",
      "SELECT battle.name, battle.date, battle.result FROM battle AS b;",
      "SELECT b.name, b.date, b.result FROM battle b;",
      "SELECT b.name AS battle_name, b.date AS battle_date, b.result AS battle_result FROM battle b;"
    ]
  },
  {
    "id": 497,
    "db_id": "battle_death",
    "gold": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "gpt_answers1": [
      "SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't');",
      "SELECT d.id, d.note, d.killed FROM death AS d INNER JOIN ship AS s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';",
      "SELECT d.id, d.note, d.killed FROM death AS d, ship AS s WHERE d.caused_by_ship_id = s.id AND s.tonnage = 't';",
      "SELECT d.id, d.note, d.killed FROM death AS d JOIN ship AS s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';",
      "SELECT death.id, death.note, death.killed FROM ship JOIN death ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';",
      "SELECT death.* FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';",
      "SELECT death.id, death.note, death.killed FROM death, ship WHERE death.caused_by_ship_id = ship.id AND ship.tonnage = 't';",
      "SELECT death.id, death.note, death.killed FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id AND ship.tonnage = 't';",
      "SELECT death.id, death.note, death.killed FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';",
      "SELECT death.* FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';"
    ],
    "gpt_answers2": [
      "SELECT death.id, death.note, death.killed FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't' ",
      "SELECT d.id, d.note, d.killed FROM death d WHERE d.caused_by_ship_id IN ( SELECT s.id FROM ship s WHERE s.tonnage = 't' ) ",
      "SELECT id, note, killed FROM death WHERE caused_by_ship_id IN ( SELECT id FROM ship WHERE tonnage = 't' ) ",
      "SELECT d.id, d.note, d.killed FROM death d, ship s WHERE d.caused_by_ship_id = s.id AND s.tonnage = 't' ",
      "SELECT d.id, d.note, d.killed FROM death d, ship s WHERE d.caused_by_ship_id = s.id AND s.tonnage = 't' GROUP BY d.id, d.note, d.killed ",
      "SELECT id, note, killed FROM death WHERE caused_by_ship_id IN ( SELECT id FROM ship WHERE tonnage = 't' ) GROUP BY id, note, killed ",
      "SELECT d.id, d.note, d.killed FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't' ",
      "SELECT id, note, killed FROM death WHERE caused_by_ship_id = ( SELECT id FROM ship WHERE tonnage = 't' ) ",
      "SELECT id, note, killed FROM death WHERE caused_by_ship_id = ( SELECT id FROM ship WHERE tonnage = 't' ) GROUP BY id, note, killed ",
      "SELECT d.id, d.note, d.killed FROM death d JOIN ship s ON d.caused_by_ship_id = s.id AND s.tonnage = 't'"
    ],
    "gpt_answers3": [
      "SELECT note, killed FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't');",
      "SELECT note, killed FROM death WHERE caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't');",
      "SELECT death.note, death.killed FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';",
      "SELECT death.note, death.killed FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id AND ship.tonnage = 't';",
      "SELECT death.note, death.killed FROM death, ship WHERE death.caused_by_ship_id = ship.id AND ship.tonnage = 't';",
      "SELECT death.note, death.killed FROM death, ship WHERE death.caused_by_ship_id = ship.id AND ship.tonnage = 't';",
      "SELECT death.note, death.killed FROM death JOIN ship ON death.caused_by_ship_id = ship.id AND ship.tonnage = 't';",
      "SELECT death.note, death.killed FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';",
      "SELECT death.note, death.killed FROM death JOIN ship ON death.caused_by_ship_id = ship.id, WHERE ship.tonnage = 't';",
      "SELECT death.note, death.killed FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';"
    ]
  },
  {
    "id": 501,
    "db_id": "battle_death",
    "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT ship.id, ship.name FROM ship INNER JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1 ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) as total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id)) ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) as total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name)) ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) as total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.name)) ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = MAX(total_injuries) ORDER BY SUM(death.injured) DESC LIMIT 1 ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) as total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name) AS injuries) ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) as total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id)) ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) as total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.name)) ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) as total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.name)) ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id HAVING SUM(death.injured) = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) as total_injuries FROM death GROUP BY caused_by_ship_id))"
    ],
    "gpt_answers2": [
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1; ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = ( SELECT MAX(total_injuries) FROM ( SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id ORDER BY total_injuries DESC LIMIT 1 ) ); ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = ( SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id ORDER BY total_injuries DESC LIMIT 1 ); ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = ( SELECT MAX(total_injuries) FROM ( SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id ) ); ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id WHERE EXISTS ( SELECT 1 FROM death AS d WHERE d.caused_by_ship_id = ship.id GROUP BY d.caused_by_ship_id HAVING SUM(d.injured) = ( SELECT MAX(total_injuries) FROM ( SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id ) ) ); ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id WHERE EXISTS ( SELECT 1 FROM death AS d WHERE d.caused_by_ship_id = ship.id GROUP BY d.caused_by_ship_id HAVING SUM(d.injured) = ( SELECT MAX(total_injuries) FROM ( SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id ORDER BY total_injuries DESC LIMIT 1 ) ) ); ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id WHERE SUM(death.injured) = ( SELECT MAX(total_injuries) FROM ( SELECT SUM(injured) AS total_injuries FROM death AS d WHERE d.caused_by_ship_id = ship.id GROUP BY d.caused_by_ship_id ) ) GROUP BY ship.id, ship.name; ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death AS d1 ON ship.id = d1.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(d1.injured) = ( SELECT MAX(total_injuries) FROM ( SELECT SUM(injured) AS total_injuries FROM death AS d2 WHERE d2.caused_by_ship_id = ship.id GROUP BY d2.caused_by_ship_id ) ); ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id WHERE SUM(death.injured) = ( SELECT MAX(total_injuries) FROM ( SELECT SUM(injured) AS total_injuries FROM death WHERE caused_by_ship_id = ship.id GROUP BY caused_by_ship_id ) ) GROUP BY ship.id, ship.name; ",
      "SELECT ship.id, ship.name  FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.id = ( SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id ORDER BY SUM(injured) DESC LIMIT 1 );"
    ],
    "gpt_answers3": [
      "SELECT ship.id, ship.name FROM ship, death WHERE ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1; ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1; ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(injured_sum) FROM (SELECT caused_by_ship_id, SUM(injured) as injured_sum FROM death GROUP BY caused_by_ship_id)); ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT MAX(injured_sum) FROM (SELECT caused_by_ship_id, SUM(injured) as injured_sum FROM death GROUP BY caused_by_ship_id ORDER BY injured_sum DESC LIMIT 1)); ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT injured_sum FROM (SELECT caused_by_ship_id, SUM(injured) as injured_sum FROM death GROUP BY caused_by_ship_id ORDER BY injured_sum DESC LIMIT 1)); ",
      "SELECT s.id, s.name FROM (SELECT caused_by_ship_id, SUM(injured) as total_injuries FROM death GROUP BY caused_by_ship_id) AS d JOIN ship AS s ON d.caused_by_ship_id = s.id ORDER BY d.total_injuries DESC LIMIT 1; ",
      "SELECT s.id, s.name FROM (SELECT caused_by_ship_id, SUM(injured) as total_injuries FROM death GROUP BY caused_by_ship_id) AS d, ship AS s WHERE d.caused_by_ship_id = s.id ORDER BY d.total_injuries DESC LIMIT 1; ",
      "SELECT s.id, s.name FROM death AS d JOIN ship AS s ON d.caused_by_ship_id = s.id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1; ",
      "SELECT s.id, s.name FROM death AS d JOIN ship AS s ON d.caused_by_ship_id = s.id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC FETCH FIRST ROW ONLY; ",
      "SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name HAVING SUM(death.injured) = (SELECT injured_sum FROM (SELECT caused_by_ship_id, SUM(injured) as injured_sum FROM death GROUP BY caused_by_ship_id ORDER BY injured_sum DESC) WHERE ROWNUM = 1);"
    ]
  },
  {
    "id": 502,
    "db_id": "battle_death",
    "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "gpt_answers1": [
      "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'; ",
      "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' GROUP BY name; ",
      "SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I'; ",
      "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' INTERSECT SELECT name FROM battle WHERE latin_commander = 'Baldwin I'; ",
      "SELECT b.name FROM battle b JOIN (SELECT DISTINCT bulgarian_commander, latin_commander FROM battle) b1 ON b.bulgarian_commander = b1.bulgarian_commander AND b.latin_commander = b1.latin_commander WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I'; ",
      "SELECT DISTINCT battle.name FROM battle INNER JOIN (SELECT DISTINCT bulgarian_commander, latin_commander FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I') b ON battle.bulgarian_commander = b.bulgarian_commander AND battle.latin_commander = b.latin_commander; ",
      "SELECT name FROM battle WHERE (bulgarian_commander = 'Kaloyan' OR latin_commander = 'Baldwin I') GROUP BY name HAVING COUNT(DISTINCT bulgarian_commander) > 0 AND COUNT(DISTINCT latin_commander) > 0; ",
      "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' OR latin_commander = 'Baldwin I'; ",
      "SELECT DISTINCT battle.name FROM battle WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I') OR (bulgarian_commander = 'Baldwin I' AND latin_commander = 'Kaloyan'); ",
      "SELECT DISTINCT b1.name FROM battle b1, battle b2 WHERE b1.bulgarian_commander = 'Kaloyan' AND b2.latin_commander = 'Baldwin I' AND b1.id = b2.id;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';",
      "SELECT DISTINCT b.name FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';",
      "SELECT DISTINCT b.name FROM battle AS b INNER JOIN ship AS s ON b.id = s.lost_in_battle WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';",
      "SELECT DISTINCT battle.name FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';",
      "SELECT DISTINCT battle.name FROM battle, ship WHERE ship.lost_in_battle = battle.id AND battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';",
      "SELECT DISTINCT name FROM battle, ship WHERE ship.lost_in_battle = battle.id AND (battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I');",
      "SELECT DISTINCT name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';",
      "SELECT DISTINCT name FROM battle, ship WHERE ship.lost_in_battle = battle.id AND battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';",
      "SELECT DISTINCT b.name FROM battle b, ship s WHERE b.id = s.lost_in_battle AND b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';",
      "SELECT DISTINCT b.name FROM battle b, ship s WHERE b.id = s.lost_in_battle AND (b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I');"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
      "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' GROUP BY name",
      "SELECT DISTINCT name FROM battle WHERE (bulgarian_commander = 'Kaloyan' OR latin_commander = 'Baldwin I') ",
      "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' INTERSECT SELECT name FROM battle WHERE latin_commander = 'Baldwin I'",
      "SELECT DISTINCT name FROM battle WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I') OR (bulgarian_commander = 'Baldwin I' AND latin_commander = 'Kaloyan')",
      "SELECT name FROM battle WHERE (bulgarian_commander = 'Kaloyan' OR latin_commander = 'Baldwin I') GROUP BY name HAVING COUNT(DISTINCT bulgarian_commander) > 0 AND COUNT(DISTINCT latin_commander) > 0",
      "SELECT DISTINCT b.name FROM battle b INNER JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'Kaloyan' AND s.name = 'Baldwin I'",
      "SELECT DISTINCT b.name FROM battle b INNER JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Kaloyan', 'Baldwin I')",
      "SELECT DISTINCT b.name FROM battle b INNER JOIN ship s1 ON b.id = s1.lost_in_battle INNER JOIN ship s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Kaloyan' AND s2.name = 'Baldwin I'",
      "SELECT DISTINCT b.name FROM battle b WHERE EXISTS (SELECT 1 FROM ship s1 WHERE s1.lost_in_battle = b.id AND s1.name = 'Kaloyan') AND EXISTS (SELECT 1 FROM ship s2 WHERE s2.lost_in_battle = b.id AND s2.name = 'Baldwin I')"
    ]
  },
  {
    "id": 505,
    "db_id": "battle_death",
    "gold": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
    "gpt_answers1": [
      "SELECT b.name, b.date FROM ship s JOIN battle b ON s.lost_in_battle = b.id WHERE s.name IN ('HMS Atalanta', 'Lettice') ",
      "SELECT b.name, b.date FROM battle b WHERE b.id IN (SELECT s.lost_in_battle FROM ship s WHERE s.name IN ('HMS Atalanta', 'Lettice')) ",
      "SELECT b.name, b.date FROM battle b, ship s WHERE b.id = s.lost_in_battle AND s.name IN ('HMS Atalanta', 'Lettice') ",
      "SELECT b.name, b.date FROM ship s INNER JOIN battle b ON s.lost_in_battle = b.id WHERE s.name = 'HMS Atalanta' OR s.name = 'Lettice' ",
      "SELECT b.name, b.date FROM ship s, battle b WHERE s.lost_in_battle = b.id AND (s.name = 'HMS Atalanta' OR s.name = 'Lettice') ",
      "SELECT b.name, b.date FROM ship s LEFT JOIN battle b ON s.lost_in_battle = b.id WHERE s.name = 'HMS Atalanta' OR s.name = 'Lettice' ",
      "SELECT b.name, b.date FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'HMS Atalanta' OR s.name = 'Lettice' ",
      "SELECT b.name, b.date FROM ship s RIGHT JOIN battle b ON s.lost_in_battle = b.id WHERE s.name = 'HMS Atalanta' OR s.name = 'Lettice' ",
      "SELECT b.name, b.date FROM battle b RIGHT JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'HMS Atalanta' OR s.name = 'Lettice' ",
      "SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'HMS Atalanta' OR s.name = 'Lettice'"
    ],
    "gpt_answers2": [
      "SELECT battle.name, battle.date  FROM battle  INNER JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' ",
      "SELECT battle.name, battle.date  FROM ship, battle  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'  AND ship.lost_in_battle = battle.id ",
      "SELECT b.name, b.date  FROM battle b, ship s  WHERE s.name IN ('Lettice', 'HMS Atalanta')  AND s.lost_in_battle = b.id ",
      "SELECT b.name, b.date  FROM battle AS b, ship AS s  WHERE s.name IN ('Lettice', 'HMS Atalanta')  AND s.lost_in_battle = b.id ",
      "SELECT battle.name, battle.date  FROM battle, ship  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'  AND ship.lost_in_battle = battle.id ",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' ",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' ",
      "SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name IN ('Lettice', 'HMS Atalanta') ",
      "SELECT b.name, b.date  FROM battle b  JOIN ship s ON s.lost_in_battle = b.id  WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta' ",
      "SELECT b.name, b.date  FROM battle AS b  JOIN ship AS s ON s.lost_in_battle = b.id  WHERE s.name IN ('Lettice', 'HMS Atalanta')"
    ],
    "gpt_answers3": [
      "SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta') ",
      "SELECT b.name, b.date FROM battle b JOIN ship s ON s.lost_in_battle = b.id WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta' ",
      "SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' ",
      "SELECT b.name, b.date FROM battle b JOIN ship s ON s.lost_in_battle = b.id WHERE s.name = 'Lettice' AND s.name = 'HMS Atalanta' ",
      "SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice' AND ship.name = 'HMS Atalanta' ",
      "SELECT b.name, b.date FROM battle b JOIN ship s ON s.lost_in_battle = b.id WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta' GROUP BY b.name, b.date ",
      "SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' GROUP BY battle.name, battle.date ",
      "SELECT battle.name, battle.date FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta' ",
      "SELECT battle.name, battle.date FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta') ",
      "SELECT battle.name, battle.date FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice' AND ship.name = 'HMS Atalanta'"
    ]
  },
  {
    "id": 506,
    "db_id": "battle_death",
    "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
    "gpt_answers1": [
      "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel'); ",
      "SELECT b.name, b.result, b.bulgarian_commander FROM battle AS b LEFT JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.location <> 'English Channel' OR s.location IS NULL; ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id AND ship.location = 'English Channel' WHERE ship.id IS NULL; ",
      "SELECT B.name, B.result, B.bulgarian_commander FROM battle B LEFT JOIN ship S ON B.id = S.lost_in_battle AND S.location = 'English Channel' WHERE S.id IS NULL; ",
      "SELECT Battle.name, Battle.result, Battle.bulgarian_commander FROM battle Battle LEFT JOIN ship Ship ON Battle.id = Ship.lost_in_battle AND Ship.location = 'English Channel' WHERE Ship.lost_in_battle IS NULL; ",
      "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE NOT EXISTS (SELECT 1 FROM ship s WHERE s.lost_in_battle = b.id AND s.location = 'English Channel'); ",
      "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE NOT EXISTS (SELECT 1 FROM ship s WHERE b.id = s.lost_in_battle AND s.location = 'English Channel'); ",
      "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel'); ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location <> 'English Channel' OR ship.id IS NULL; ",
      "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT DISTINCT lost_in_battle FROM ship WHERE location = 'English Channel');"
    ],
    "gpt_answers2": [
      "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = \"English Channel\") ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location <> \"English Channel\" OR ship.location IS NULL ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle AND ship.location = \"English Channel\" WHERE ship.id IS NULL ",
      "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT s.lost_in_battle FROM ship s WHERE s.location = \"English Channel\") ",
      "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT lost_in_battle FROM ship WHERE location = \"English Channel\") ",
      "SELECT name, result, bulgarian_commander FROM battle WHERE NOT EXISTS (SELECT 1 FROM ship WHERE lost_in_battle = battle.id AND location = \"English Channel\") ",
      "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = \"English Channel\") AND id IN (SELECT lost_in_battle FROM ship) ",
      "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = \"English Channel\") AND id IN (SELECT lost_in_battle FROM ship WHERE lost_in_battle IS NOT NULL) ",
      "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = \"English Channel\") AND id IN (SELECT lost_in_battle FROM ship WHERE lost_in_battle IS NOT NULL) ",
      "SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location <> \"English Channel\" OR s.location IS NULL"
    ],
    "gpt_answers3": [
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE battle.result = 'Victory' AND ship.location = 'English Channel' AND ship.name IS NULL ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel') ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'English Channel') ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id AND ship.location = 'English Channel' WHERE ship.name IS NULL ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT battle.id FROM battle JOIN ship ON ship.lost_in_battle = battle.id AND ship.location = 'English Channel') ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE (ship.location = 'English Channel' OR ship.location IS NULL) AND ship.name IS NULL ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id AND ship.location = 'English Channel' WHERE ship.id IS NULL ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE NOT EXISTS (SELECT 1 FROM ship WHERE ship.lost_in_battle = battle.id AND ship.location = 'English Channel') ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'English Channel' AND ship.lost_in_battle IS NOT NULL) ",
      "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id AND ship.location = 'English Channel' WHERE ship.id IS NULL OR ship.lost_in_battle IS NULL"
    ]
  },
  {
    "id": 517,
    "db_id": "student_transcripts_tracking",
    "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
    "gpt_answers1": [
      "SELECT departments.department_id, departments.department_name  FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1; ",
      "SELECT departments.department_id, departments.department_name  FROM departments, degree_programs  WHERE departments.department_id = degree_programs.department_id GROUP BY departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1; ",
      "SELECT departments.department_id, departments.department_name  FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id HAVING COUNT(degree_programs.degree_program_id) = (SELECT MAX(COUNT(degree_programs.degree_program_id)) FROM degree_programs GROUP BY degree_programs.department_id); ",
      "SELECT departments.department_id, departments.department_name  FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE degree_programs.degree_program_id IN (SELECT degree_program_id FROM degree_programs GROUP BY department_id HAVING COUNT(degree_programs.degree_program_id) = (SELECT MAX(COUNT(degree_programs.degree_program_id)) FROM degree_programs GROUP BY degree_programs.department_id)) GROUP BY departments.department_id; ",
      "SELECT departments.department_id, departments.department_name  FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE departments.department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1); ",
      "SELECT department_id, department_name  FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1); ",
      "SELECT department_id, department_name  FROM departments WHERE department_id IN (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(department_id) = (SELECT MAX(COUNT(department_id)) FROM degree_programs GROUP BY department_id)); ",
      "SELECT departments.department_id, departments.department_name FROM departments JOIN (SELECT department_id, COUNT(degree_program_id) as total_degrees FROM degree_programs GROUP BY department_id) dp ON departments.department_id = dp.department_id WHERE dp.total_degrees = (SELECT MAX(total_degrees) FROM (SELECT department_id, COUNT(degree_program_id) as total_degrees FROM degree_programs GROUP BY department_id)); ",
      "SELECT department_id, department_name FROM departments WHERE department_id IN (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(degree_program_id) = (SELECT MAX(count_degree_programs) FROM (SELECT COUNT(degree_program_id) as count_degree_programs FROM degree_programs GROUP BY department_id))); ",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1);"
    ],
    "gpt_answers2": [
      "SELECT department_id, department_name FROM departments WHERE department_id IN (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM degree_programs GROUP BY department_id)));",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM degree_programs GROUP BY department_id));",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1);",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY);",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0);",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1 OFFSET (SELECT COUNT(*)/2 FROM degree_programs));",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY);",
      "SELECT department_id, department_name FROM departments ORDER BY (SELECT COUNT(*) FROM degree_programs WHERE departments.department_id = degree_programs.department_id) DESC LIMIT 1;",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(*) = (SELECT COUNT(*) FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1));",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(degree_program_id) = (SELECT MAX(degree_count) from (SELECT COUNT(degree_program_id) as degree_count FROM degree_programs GROUP BY department_id)))); "
    ],
    "gpt_answers3": [
      "SELECT department_id, department_name FROM departments WHERE department_id IN  (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(*) =  (SELECT MAX(degree_count) FROM  (SELECT department_id, COUNT(*) as degree_count FROM degree_programs GROUP BY department_id))) ",
      "SELECT d.department_id, d.department_name FROM departments d JOIN (SELECT department_id, COUNT(*) as degree_count FROM degree_programs GROUP BY department_id  ORDER BY degree_count DESC LIMIT 1) dp ON d.department_id = dp.department_id ",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(*) =  (SELECT MAX(degree_count) FROM  (SELECT department_id, COUNT(*) as degree_count FROM degree_programs GROUP BY department_id))) ",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(*) =  (SELECT COUNT(*) FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)) ",
      "SELECT d.department_id, d.department_name FROM departments d INNER JOIN (SELECT department_id, COUNT(*) as degree_count FROM degree_programs GROUP BY department_id  ORDER BY degree_count DESC LIMIT 1) dp ON d.department_id = dp.department_id ",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1) ",
      "SELECT department_id, department_name FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW WITH TIES) ",
      "SELECT department_id, department_name FROM departments WHERE department_id IN  (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1) ",
      "SELECT department_id, department_name FROM departments WHERE department_id IN  (SELECT department_id FROM degree_programs GROUP BY department_id HAVING COUNT(*) = (SELECT COUNT(*) FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)) ",
      "SELECT d.department_id, d.department_name FROM departments d JOIN (SELECT department_id, COUNT(*) as degree_count FROM degree_programs GROUP BY department_id  HAVING COUNT(*) = (SELECT COUNT(*) FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)) dp ON d.department_id = dp.department_id"
    ]
  },
  {
    "id": 521,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;",
      "SELECT COUNT(DISTINCT degree_summary_description) FROM degree_programs;",
      "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM degree_programs);",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_description FROM degree_programs);",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_program_id FROM degree_programs);",
      "SELECT COUNT(*) FROM (SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name);",
      "SELECT COUNT(*) FROM (SELECT degree_summary_description FROM degree_programs GROUP BY degree_summary_description);",
      "SELECT COUNT(*) FROM (SELECT degree_program_id FROM degree_programs GROUP BY degree_program_id);",
      "SELECT COUNT(*) FROM (SELECT degree_summary_name, degree_summary_description FROM degree_programs GROUP BY degree_summary_name, degree_summary_description);"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name, department_id FROM degree_programs); ",
      "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_program_id, department_id, degree_summary_name FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT department_id FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT department_id, degree_summary_name FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT department_id, degree_summary_description FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_description FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT department_name, degree_summary_name FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id);"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT department_id FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT department_id, degree_summary_name FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_description FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT department_id, degree_summary_name, degree_summary_description FROM degree_programs); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT department_id, degree_summary_name FROM degree_programs UNION SELECT DISTINCT department_id, degree_summary_name FROM departments); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM degree_programs UNION SELECT DISTINCT department_name FROM departments); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM degree_programs INTERSECT SELECT DISTINCT degree_summary_name FROM departments); ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM degree_programs UNION SELECT DISTINCT degree_summary_name FROM courses);"
    ]
  },
  {
    "id": 522,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering') ",
      "SELECT COUNT(*) FROM degree_programs INNER JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering' ",
      "SELECT COUNT(*) FROM degree_programs, departments WHERE degree_programs.department_id = departments.department_id AND departments.department_name = 'engineering' ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering' ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering') ",
      "SELECT COUNT(*) FROM degree_programs WHERE EXISTS (SELECT * FROM departments WHERE departments.department_id = degree_programs.department_id AND departments.department_name = 'engineering') ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name LIKE '%engineering%') ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name LIKE '%engineering%') ",
      "SELECT COUNT(*) FROM degree_programs WHERE degree_programs.department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering') ",
      "SELECT COUNT(*) FROM (SELECT degree_programs.degree_program_id, departments.department_id FROM degree_programs LEFT JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering') AS subquery"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'; ",
      "SELECT COUNT(degree_program_id) FROM degree_programs JOIN departments ON departments.department_id = degree_programs.department_id WHERE departments.department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments USING (department_id) WHERE department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs, departments WHERE degree_programs.department_id = departments.department_id AND department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON departments.department_id = degree_programs.department_id AND departments.department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(*) FROM (SELECT * FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id) WHERE department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering' LIMIT 1);"
    ],
    "gpt_answers3": [
      "SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs INNER JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE departments.department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM departments INNER JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE departments.department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM departments INNER JOIN degree_programs ON departments.department_id = degree_programs.department_id WHERE department_name = 'engineering';"
    ]
  },
  {
    "id": 523,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(*) FROM degree_programs dp JOIN departments d ON dp.department_id = d.department_id WHERE d.department_name = 'engineering'; ",
      "SELECT COUNT(DISTINCT dp.degree_program_id) FROM degree_programs dp JOIN departments d ON dp.department_id = d.department_id WHERE d.department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs dp, departments d WHERE dp.department_id = d.department_id AND d.department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs dp INNER JOIN departments d ON dp.department_id = d.department_id WHERE d.department_name = 'engineering'; ",
      "SELECT COUNT(degree_summary_name) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(degree_summary_name) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'; ",
      "SELECT COUNT(distinct degree_summary_name) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(distinct degree_summary_name) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering';"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'engineering'); ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name LIKE '%engineering%'); ",
      "SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name LIKE 'engineering'); ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE department_name LIKE '%engineering%'; ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id AND department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON departments.department_id = degree_programs.department_id WHERE department_name = 'engineering'; ",
      "SELECT COUNT(*) FROM degree_programs JOIN departments ON departments.department_id = degree_programs.department_id AND department_name LIKE '%engineering%';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(degree_program_id)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering'); ",
      "SELECT COUNT(*)  FROM degree_programs  WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'Engineering'); ",
      "SELECT COUNT(*)  FROM degree_programs  INNER JOIN departments ON degree_programs.department_id = departments.department_id  WHERE department_name = 'Engineering'; ",
      "SELECT COUNT(*)  FROM degree_programs, departments  WHERE degree_programs.department_id = departments.department_id  AND department_name = 'Engineering'; ",
      "SELECT COUNT(*)  FROM degree_programs  LEFT JOIN departments ON degree_programs.department_id = departments.department_id  WHERE department_name = 'Engineering'; ",
      "SELECT COUNT(*)  FROM degree_programs, departments  WHERE degree_programs.department_id = departments.department_id  AND departments.department_name = 'Engineering'; ",
      "SELECT COUNT(*)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering'); ",
      "SELECT COUNT(*)  FROM degree_programs  WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering') GROUP BY department_id; ",
      "SELECT COUNT(*)  FROM degree_programs  WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'Engineering') GROUP BY department_id; ",
      "SELECT COUNT(*)  FROM degree_programs  INNER JOIN departments ON degree_programs.department_id = departments.department_id  WHERE departments.department_name = 'Engineering';"
    ]
  },
  {
    "id": 527,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "gpt_answers1": [
      "SELECT course_name, course_id FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) < 2); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) >= 2); ",
      "SELECT course_name, course_id FROM courses WHERE course_id IN (SELECT course_id FROM sections WHERE COUNT(section_id) < 2); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections WHERE COUNT(section_id) >= 2); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections HAVING COUNT(section_id) >= 2); ",
      "SELECT course_name, course_id FROM courses WHERE course_id IN (SELECT course_id FROM sections WHERE section_id NOT IN (SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(section_id) >= 2)); ",
      "SELECT course_name, course_id FROM courses WHERE course_id IN (SELECT course_id FROM sections WHERE section_id NOT IN (SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(*) >= 2)); ",
      "SELECT course_name, course_id FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id HAVING COUNT(sections.section_id) < 2; ",
      "SELECT course_name, course_id FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY course_id HAVING COUNT(section_id) < 2; ",
      "SELECT course_name, course_id FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id HAVING COUNT(DISTINCT sections.section_id) < 2;"
    ],
    "gpt_answers2": [
      "SELECT course_name, course_id FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) < 2 )  ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN ( SELECT course_id FROM sections WHERE section_id NOT IN ( SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(*) > 1 ) ) ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN ( SELECT course_id FROM sections WHERE section_id IN ( SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(*) >= 2 ) ) ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN ( SELECT DISTINCT course_id FROM sections WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) >= 2 ) ) ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN ( SELECT DISTINCT course_id FROM sections WHERE section_id NOT IN ( SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(*) > 1 ) ) ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(DISTINCT section_id) >= 2 ) ",
      "SELECT course_name, course_id FROM courses WHERE course_id IN ( SELECT DISTINCT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) < 2 ) ",
      "SELECT c.course_name, c.course_id FROM courses c LEFT JOIN sections s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) < 2 ",
      "SELECT course_name, course_id FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2 ) ",
      "SELECT course_name, course_id FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(DISTINCT section_id) < 2 )"
    ],
    "gpt_answers3": [
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) >= 2); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections WHERE section_id IN (SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(*) >= 2)); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) >= 2)); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections WHERE section_id NOT IN (SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(*) >= 2)); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections WHERE section_id NOT IN (SELECT section_id FROM sections GROUP BY section_id)); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections WHERE section_id NOT IN (SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(DISTINCT section_id) >= 2)); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections WHERE section_id IN (SELECT section_id FROM sections GROUP BY section_id) GROUP BY section_id HAVING COUNT(*) >= 2); ",
      "SELECT course_name, course_id FROM courses WHERE course_id NOT IN (SELECT course_id FROM sections WHERE section_id IN (SELECT section_id FROM sections GROUP BY section_id HAVING COUNT(DISTINCT section_id) >= 2)); ",
      "SELECT course_name, course_id FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2); ",
      "SELECT course_name, course_id FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(DISTINCT section_id) < 2);"
    ]
  },
  {
    "id": 530,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1; ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id = ( SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1 ); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id = ( SELECT semester_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) as count FROM student_enrolment GROUP BY semester_id ) ) ); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id IN ( SELECT semester_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) as count FROM student_enrolment GROUP BY semester_id ) ) ); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id = ( SELECT semester_id FROM( SELECT semester_id, COUNT(*) as count FROM student_enrolment GROUP BY semester_id ORDER BY count DESC LIMIT 1 ) ); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM( SELECT semester_id, COUNT(*) as count FROM student_enrolment GROUP BY semester_id ORDER BY count DESC LIMIT 1 ) INNER JOIN semesters ON semesters.semester_id = semester_id; ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(student_enrolment.student_id) = ( SELECT MAX(count) FROM ( SELECT COUNT(student_enrolment.student_id) as count FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ) ); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM( SELECT semester_id, COUNT(*) as count FROM student_enrolment GROUP BY semester_id ORDER BY count DESC ) LEFT JOIN semesters ON semesters.semester_id = semester_id LIMIT 1; ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN( SELECT semester_id, COUNT(*) as count FROM student_enrolment GROUP BY semester_id ORDER BY count DESC LIMIT 1 ) AS subquery ON semesters.semester_id = subquery.semester_id; ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN ( SELECT student_enrolment.semester_id, COUNT(*) as count FROM student_enrolment GROUP BY student_enrolment.semester_id ORDER BY count DESC LIMIT 1 ) AS subquery ON semesters.semester_id = subquery.semester_id;"
    ],
    "gpt_answers2": [
      "SELECT semester_id, semester_name FROM semesters  WHERE semester_id IN (SELECT semester_id FROM student_enrolment  GROUP BY semester_id  HAVING COUNT(student_id) = (SELECT MAX(count)  FROM (SELECT COUNT(student_id) AS count  FROM student_enrolment  GROUP BY semester_id) AS temp)) ",
      "SELECT S.semester_id, S.semester_name FROM semesters S  INNER JOIN student_enrolment SE ON S.semester_id = SE.semester_id  GROUP BY S.semester_id  HAVING COUNT(SE.student_id) = (SELECT MAX(count)  FROM (SELECT COUNT(student_id) AS count  FROM student_enrolment  GROUP BY semester_id) AS temp) ",
      "SELECT semester_id, semester_name FROM semesters  WHERE semester_id = (SELECT semester_id  FROM student_enrolment  GROUP BY semester_id  ORDER BY COUNT(student_id) DESC  LIMIT 1) ",
      "SELECT semester_id, semester_name FROM semesters  WHERE semester_id = (SELECT semester_id  FROM student_enrolment  GROUP BY semester_id  ORDER BY COUNT(student_id) DESC  FETCH FIRST ROW ONLY) ",
      "SELECT DISTINCT semester_id, semester_name FROM semesters  INNER JOIN student_enrolment SE ON semesters.semester_id = SE.semester_id  GROUP BY semester_id, semester_name  HAVING COUNT(DISTINCT SE.student_id) = (SELECT MAX(count)  FROM (SELECT COUNT(DISTINCT student_id) AS count  FROM student_enrolment  GROUP BY semester_id) AS temp) ",
      "SELECT semester_id, semester_name FROM semesters  WHERE semester_id = (SELECT MAX(semester_id)  FROM student_enrolment  GROUP BY semester_id  HAVING COUNT(student_id) = (SELECT MAX(count)  FROM (SELECT COUNT(student_id) AS count  FROM student_enrolment  GROUP BY semester_id) AS temp)) ",
      "SELECT semester_id, semester_name FROM semesters  WHERE semester_id = (SELECT semester_id  FROM (SELECT semester_id, COUNT(student_id) AS count  FROM student_enrolment  GROUP BY semester_id  ORDER BY count DESC)  LIMIT 1) ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters  INNER JOIN student_enrolment SE ON semesters.semester_id = SE.semester_id  GROUP BY semesters.semester_id  ORDER BY COUNT(SE.student_id) DESC  LIMIT 1 ",
      "SELECT semester_id, semester_name FROM semesters  INNER JOIN (SELECT semester_id, COUNT(student_id) AS count  FROM student_enrolment  GROUP BY semester_id) AS temp ON semesters.semester_id = temp.semester_id  WHERE count = (SELECT MAX(count)  FROM (SELECT semester_id, COUNT(student_id) AS count  FROM student_enrolment  GROUP BY semester_id) AS temp) ",
      "SELECT semester_id, semester_name FROM semesters  WHERE semester_id = (SELECT semester_id  FROM student_enrolment  GROUP BY semester_id  ORDER BY COUNT(student_id) DESC  LIMIT 1)"
    ],
    "gpt_answers3": [
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC LIMIT 1; ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(student_enrolment.student_enrolment_id) =  (SELECT MAX(enrolment_count) FROM  (SELECT COUNT(student_enrolment_id) AS enrolment_count FROM student_enrolment GROUP BY semester_id)); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id =  (SELECT semester_id FROM student_enrolment  GROUP BY semester_id  ORDER BY COUNT(student_enrolment_id) DESC  LIMIT 1); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id =  (SELECT semester_id FROM student_enrolment  GROUP BY semester_id  HAVING COUNT(student_enrolment_id) =  (SELECT MAX(enrolment_count) FROM  (SELECT COUNT(student_enrolment_id) AS enrolment_count FROM student_enrolment GROUP BY semester_id))); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id IN  (SELECT semester_id FROM student_enrolment  GROUP BY semester_id  HAVING COUNT(student_enrolment_id) =  (SELECT MAX(enrolment_count) FROM  (SELECT COUNT(student_enrolment_id) AS enrolment_count FROM student_enrolment GROUP BY semester_id))); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(*) =  (SELECT MAX(enrolment_count) FROM  (SELECT COUNT(student_enrolment_id) AS enrolment_count FROM student_enrolment GROUP BY semester_id)); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(*) =  (SELECT enrolment_count FROM  (SELECT COUNT(student_enrolment_id) AS enrolment_count FROM student_enrolment GROUP BY semester_id ORDER BY enrolment_count DESC LIMIT 1)); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id =  (SELECT semester_id FROM student_enrolment  GROUP BY semester_id  ORDER BY COUNT(student_enrolment_id) DESC, semester_id DESC LIMIT 1); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id =  (SELECT semester_id FROM student_enrolment  GROUP BY semester_id  HAVING COUNT(student_enrolment_id) =  (SELECT MAX(enrolment_count) FROM  (SELECT COUNT(student_enrolment_id) AS enrolment_count FROM student_enrolment  GROUP BY semester_id  ORDER BY enrolment_count DESC, semester_id DESC))); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id =  (SELECT semester_id FROM  (SELECT semester_id, COUNT(student_enrolment_id) AS enrolment_count FROM student_enrolment  GROUP BY semester_id  ORDER BY enrolment_count DESC, semester_id DESC LIMIT 1));"
    ]
  },
  {
    "id": 531,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT semester_name, semester_id FROM semesters WHERE semester_id = (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1) ",
      "SELECT s.semester_name, s.semester_id FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id GROUP BY s.semester_name, s.semester_id HAVING COUNT(se.student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(*) as student_count FROM student_enrolment GROUP BY semester_id) counts) ",
      "SELECT semester_name, semester_id FROM semesters WHERE semester_id = (SELECT semester_id FROM (SELECT semester_id, COUNT(*) as student_count FROM student_enrolment GROUP BY semester_id ORDER BY student_count DESC) counts LIMIT 1) ",
      "SELECT s.semester_name, s.semester_id FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id GROUP BY s.semester_name, s.semester_id HAVING COUNT(se.student_enrolment_id) = (SELECT COUNT(*) FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1) ",
      "SELECT s.semester_name, s.semester_id FROM semesters s WHERE s.semester_id IN (SELECT se.semester_id FROM student_enrolment se GROUP BY se.semester_id HAVING COUNT(se.student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(*) as student_count FROM student_enrolment GROUP BY semester_id) counts)) ",
      "SELECT semester_name, semester_id FROM semesters WHERE semester_id = (SELECT TOP 1 WITH TIES semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC) ",
      "SELECT s1.semester_name, s1.semester_id FROM semesters s1 JOIN (SELECT se.semester_id, COUNT(*) as student_count FROM student_enrolment se GROUP BY se.semester_id) s2 ON s1.semester_id = s2.semester_id WHERE s2.student_count = (SELECT MAX(student_count) FROM (SELECT semester_id, COUNT(*) as student_count FROM student_enrolment GROUP BY semester_id) counts) ",
      "SELECT semester_name, semester_id FROM semesters WHERE semester_id = (SELECT semester_id FROM (SELECT semester_id, COUNT(*) as student_count FROM student_enrolment GROUP BY semester_id) counts WHERE student_count = (SELECT MAX(student_count) FROM (SELECT COUNT(*) as student_count FROM student_enrolment GROUP BY semester_id) counts)) ",
      "SELECT semester_name, semester_id FROM semesters WHERE semester_id = (SELECT TOP 1 semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC) ",
      "SELECT s.semester_name, s.semester_id FROM semesters s JOIN (SELECT se.semester_id, COUNT(*) as student_count FROM student_enrolment se GROUP BY se.semester_id ORDER BY student_count DESC LIMIT 1) counts ON s.semester_id = counts.semester_id"
    ],
    "gpt_answers2": [
      "SELECT semesters.semester_id, semesters.semester_name  FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1; ",
      "SELECT semester_id, semester_name FROM semesters WHERE semester_id = (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id = (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(student_enrolment.student_id) =  (SELECT COUNT(student_id) FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1) LIMIT 1; ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id IN  (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1; ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(student_enrolment.student_id) =  (SELECT MAX(student_count)  FROM (SELECT COUNT(student_id) as student_count FROM student_enrolment GROUP BY semester_id) as counts); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(student_enrolment.student_id) =  (SELECT COUNT(student_id)  FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1); ",
      "SELECT semester_id, semester_name FROM semesters WHERE semester_id IN  (SELECT semester_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(student_id) =  (SELECT MAX(student_count) FROM (SELECT COUNT(student_id) as student_count FROM student_enrolment GROUP BY semester_id) as counts)); ",
      "SELECT semester_id, semester_name FROM semesters WHERE semester_id =  (SELECT semester_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(student_id) =  (SELECT MAX(student_count) FROM (SELECT COUNT(student_id) as student_count FROM student_enrolment GROUP BY semester_id) as counts));"
    ],
    "gpt_answers3": [
      "SELECT semesters.semester_id, semesters.semester_name  FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC LIMIT 1; ",
      "SELECT semesters.semester_id, semesters.semester_name  FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(student_enrolment.student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_enrolment.student_enrolment_id) AS student_count FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id) AS counts); ",
      "SELECT semesters.semester_id, semesters.semester_name  FROM semesters WHERE semesters.semester_id = (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1); ",
      "SELECT semesters.semester_id, semesters.semester_name  FROM semesters WHERE semesters.semester_id = (SELECT semester_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_enrolment_id) AS student_count FROM student_enrolment GROUP BY semester_id) AS counts)); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id = (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_enrolment_id) DESC FETCH FIRST ROW ONLY); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id = (SELECT semester_id FROM student_enrolment WHERE semester_id IS NOT NULL GROUP BY semester_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(student_enrolment.student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_enrolment.student_enrolment_id) AS student_count FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id) AS counts); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id IN (SELECT semester_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_enrolment_id) AS student_count FROM student_enrolment GROUP BY semester_id) AS counts)); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters WHERE semesters.semester_id IN (SELECT semester_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_enrolment.student_enrolment_id) AS student_count FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id) AS counts)); ",
      "SELECT semesters.semester_id, semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(student_enrolment.student_enrolment_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_enrolment_id) AS student_count FROM student_enrolment GROUP BY semester_id) AS counts) ORDER BY semesters.semester_id ASC LIMIT 1;"
    ]
  },
  {
    "id": 534,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "gpt_answers1": [
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY student_enrolment.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2 AND COUNT(DISTINCT semester_id) = 1 ); ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT semester_id) = 1 ) GROUP BY student_enrolment.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id, semester_id HAVING COUNT(DISTINCT student_id) = 2 ) GROUP BY student_enrolment.student_id; ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE EXISTS ( SELECT 1 FROM student_enrolment temp WHERE temp.student_id = student_enrolment.student_id AND temp.semester_id = student_enrolment.semester_id AND temp.degree_program_id <> student_enrolment.degree_program_id ) GROUP BY student_enrolment.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(DISTINCT student_id) > 1 ) GROUP BY student_enrolment.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT semester_id) = 1 ) GROUP BY student_enrolment.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE EXISTS ( SELECT 1 FROM student_enrolment temp WHERE temp.student_id = student_enrolment.student_id AND temp.semester_id = student_enrolment.semester_id AND temp.degree_program_id <> student_enrolment.degree_program_id ) GROUP BY student_enrolment.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(DISTINCT student_id) > 1 ) GROUP BY student_enrolment.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, student_enrolment.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT semester_id) = 1 ) GROUP BY student_enrolment.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;"
    ],
    "gpt_answers2": [
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN (SELECT degree_program_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT semester_id) = 1) GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN (SELECT degree_program_id FROM student_enrolment WHERE semester_id = (SELECT semester_id FROM semesters WHERE semester_name = 'current semester')) GROUP BY students.student_id HAVING COUNT(DISTINCT degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.semester_id IN (SELECT semester_id FROM student_enrolment WHERE student_id IN  (SELECT student_id FROM student_enrolment WHERE COUNT(DISTINCT degree_program_id) = 2 GROUP BY student_id HAVING COUNT(DISTINCT semester_id) = 1)) GROUP BY students.student_id HAVING COUNT(DISTINCT degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE (SELECT COUNT(DISTINCT degree_program_id) FROM student_enrolment WHERE student_id = students.student_id AND semester_id = semesters.semester_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.student_enrolment_id IN  (SELECT student_enrolment_id FROM student_enrolment GROUP BY student_enrolment_id HAVING COUNT(DISTINCT degree_program_id) = 2); ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment.semester_id IN  (SELECT semester_id FROM student_enrolment WHERE student_id = students.student_id GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2); ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN semesters ON student_enrolment.semester_id = semesters.semester_id WHERE EXISTS  (SELECT student_id FROM student_enrolment WHERE student_id = students.student_id AND semester_id = semesters.semester_id GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2); ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE EXISTS  (SELECT degree_program_id FROM student_enrolment WHERE student_id = students.student_id GROUP BY degree_program_id HAVING COUNT(DISTINCT semester_id) = 1) AND student_enrolment.degree_program_id IN  (SELECT degree_program_id FROM student_enrolment WHERE student_id = students.student_id GROUP BY degree_program_id HAVING COUNT(DISTINCT semester_id) = 1) AND student_enrolment.degree_program_id IN  (SELECT degree_program_id FROM student_enrolment WHERE student_id = students.student_id GROUP BY degree_program_id HAVING COUNT(DISTINCT semester_id) >= 2) GROUP BY students.student_id HAVING COUNT(DISTINCT degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN  (SELECT degree_program_id FROM student_enrolment WHERE student_id = students.student_id GROUP BY degree_program_id HAVING COUNT(DISTINCT semester_id) >= 2) GROUP BY students.student_id HAVING COUNT(DISTINCT degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.semester_id IN  (SELECT semester_id FROM student_enrolment WHERE student_id = students.student_id GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2) GROUP BY students.student_id HAVING COUNT(DISTINCT degree_program_id) = 2;"
    ],
    "gpt_answers3": [
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment.semester_id = <semester_id> GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment.semester_id = <semester_id> GROUP BY students.student_id HAVING COUNT(*) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id AND student_enrolment.semester_id = <semester_id> GROUP BY students.student_id HAVING COUNT(*) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment.semester_id = <semester_id> GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 LIMIT 10; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment.semester_id = <semester_id> GROUP BY students.student_id HAVING COUNT(student_enrolment.degree_program_id) = 2; ",
      "SELECT first_name, middle_name, last_name, student_id FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE semester_id = <semester_id> GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2); ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(student_enrolment.semester_id) = 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment.semester_id = <semester_id> GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(distinct student_enrolment.student_enrolment_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment.semester_id = <semester_id> GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.student_enrolment_id) = 2; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE student_enrolment.semester_id = <semester_id> GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 ORDER BY students.student_id LIMIT 10;"
    ]
  },
  {
    "id": 535,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "gpt_answers1": [
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2  AND COUNT(DISTINCT student_enrolment.semester_id) = 1 ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE student_enrolment.degree_program_id IN (SELECT degree_program_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2)  AND student_enrolment.semester_id IN (SELECT semester_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT semester_id) = 1) ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE students.student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2 AND COUNT(DISTINCT semester_id) = 1) ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE students.student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2)  AND students.student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT semester_id) = 1) ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  INNER JOIN semesters ON student_enrolment.semester_id = semesters.semester_id  GROUP BY students.student_id  HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2  AND COUNT(DISTINCT student_enrolment.semester_id) = 1 ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students, student_enrolment, degree_programs, semesters  WHERE students.student_id = student_enrolment.student_id  AND student_enrolment.degree_program_id = degree_programs.degree_program_id  AND student_enrolment.semester_id = semesters.semester_id  GROUP BY students.student_id  HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2  AND COUNT(DISTINCT student_enrolment.semester_id) = 1 ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE (SELECT COUNT(DISTINCT degree_program_id) FROM student_enrolment WHERE student_enrolment.student_id = students.student_id) = 2  AND (SELECT COUNT(DISTINCT semester_id) FROM student_enrolment WHERE student_enrolment.student_id = students.student_id) = 1 ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2  AND COUNT(DISTINCT student_enrolment.semester_id) = 1 ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE students.student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2)  AND students.student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT semester_id) = 1) ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN (SELECT student_id, COUNT(DISTINCT degree_program_id) AS program_count, COUNT(DISTINCT semester_id) AS semester_count  FROM student_enrolment  GROUP BY student_id  HAVING program_count = 2 AND semester_count = 1) AS subquery  ON students.student_id = subquery.student_id"
    ],
    "gpt_answers2": [
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s INNER JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1 ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id != se2.degree_program_id AND se1.semester_id = se2.semester_id ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id <> se2.degree_program_id AND se1.semester_id = se2.semester_id ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s WHERE s.student_id IN ( SELECT se.student_id FROM student_enrolment se GROUP BY se.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2 ) ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id <> se2.degree_program_id AND se1.semester_id = se2.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se1 ON s.student_id = se1.student_id JOIN student_enrolment se2 ON s.student_id = se2.student_id WHERE se1.degree_program_id != se2.degree_program_id AND se1.semester_id = se2.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s, student_enrolment se1, student_enrolment se2 WHERE s.student_id = se1.student_id AND s.student_id = se2.student_id AND se1.degree_program_id <> se2.degree_program_id AND se1.semester_id = se2.semester_id ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s WHERE s.student_id IN ( SELECT se1.student_id FROM student_enrolment se1, student_enrolment se2 WHERE se1.student_id = se2.student_id AND se1.degree_program_id <> se2.degree_program_id AND se1.semester_id = se2.semester_id ) ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s WHERE s.student_id IN ( SELECT se.student_id FROM student_enrolment se WHERE se.degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) GROUP BY se.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2 ) ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1"
    ],
    "gpt_answers3": [
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE semester_id IN ( SELECT semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ); ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id AND (student_enrolment.student_id, student_enrolment.semester_id) IN ( SELECT student_id, semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ); ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN ( SELECT student_id, semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) AS temp ON student_enrolment.student_id = temp.student_id AND student_enrolment.semester_id = temp.semester_id; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students INNER JOIN ( SELECT student_id, semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) AS temp ON students.student_id = temp.student_id INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN ( SELECT student_id, semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) AS temp ON student_enrolment.student_id = temp.student_id AND student_enrolment.semester_id = temp.semester_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ); ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students, student_enrolment WHERE students.student_id = student_enrolment.student_id AND (student_enrolment.student_id, student_enrolment.semester_id) IN ( SELECT student_id, semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ); ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment WHERE semester_id IN ( SELECT semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ) ); ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.semester_id IN ( SELECT semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 ); ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.student_id IN ( SELECT student_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 );"
    ]
  },
  {
    "id": 536,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "gpt_answers1": [
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = \"Bachelor\")); ",
      "SELECT s.first_name, s.middle_name, s.last_name  FROM students s  JOIN student_enrolment se ON s.student_id = se.student_id  JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id  WHERE dp.degree_summary_name = \"Bachelor\"; ",
      "SELECT students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelor'; ",
      "SELECT first_name, middle_name, last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelor'; ",
      "SELECT s.first_name, s.middle_name, s.last_name  FROM students s, student_enrolment se, degree_programs dp  WHERE s.student_id = se.student_id  AND se.degree_program_id = dp.degree_program_id  AND dp.degree_summary_name = 'Bachelor'; ",
      "SELECT students.first_name, students.middle_name, students.last_name  FROM students, student_enrolment, degree_programs  WHERE students.student_id = student_enrolment.student_id  AND student_enrolment.degree_program_id = degree_programs.degree_program_id  AND degree_summary_name = 'Bachelor'; ",
      "SELECT students.first_name, students.middle_name, students.last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelor'; ",
      "SELECT students.first_name, students.middle_name, students.last_name  FROM students, student_enrolment, degree_programs  WHERE students.student_id = student_enrolment.student_id  AND student_enrolment.degree_program_id = degree_programs.degree_program_id  AND degree_programs.degree_summary_name = 'Bachelor'; ",
      "SELECT s.first_name, s.middle_name, s.last_name  FROM students s  JOIN student_enrolment se ON s.student_id = se.student_id  JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id  WHERE dp.degree_summary_name = 'Bachelor'; ",
      "SELECT first_name, middle_name, last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelor';"
    ],
    "gpt_answers2": [
      "SELECT students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = \"Bachelor\"; ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students, student_enrolment, student_enrolment_courses, degree_programs WHERE students.student_id = student_enrolment.student_id  AND student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  AND student_enrolment.degree_program_id = degree_programs.degree_program_id  AND degree_programs.degree_summary_name = \"Bachelor\"; ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s, student_enrolment se, student_enrolment_courses sec, degree_programs dp WHERE s.student_id = se.student_id  AND se.student_enrolment_id = sec.student_enrolment_id  AND se.degree_program_id = dp.degree_program_id  AND dp.degree_summary_name = \"Bachelor\"; ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment_courses WHERE student_enrolment_id IN ( SELECT student_enrolment_id FROM student_enrolment WHERE degree_program_id = ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = \"Bachelor\") ) ); ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment WHERE degree_program_id = ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = \"Bachelor\") ); ",
      "SELECT first_name, middle_name, last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id WHERE student_enrolment.degree_program_id = ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = \"Bachelor\" ); ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = \"Bachelor\"; ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id JOIN student_enrolment_courses AS sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN degree_programs AS dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = \"Bachelor\"; ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s, student_enrolment se, student_enrolment_courses sec, degree_programs dp WHERE s.student_id = se.student_id  AND se.student_enrolment_id = sec.student_enrolment_id  AND se.degree_program_id = dp.degree_program_id  AND dp.degree_summary_name = 'Bachelor'; ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s INNER JOIN student_enrolment se ON s.student_id = se.student_id INNER JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id INNER JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE 'Bachelor';"
    ],
    "gpt_answers3": [
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = \"Bachelor\"; ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id AND degree_summary_name = \"Bachelor\"; ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = \"Bachelor\"; ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = \"Bachelor\" ); ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students WHERE student_id = ANY ( SELECT student_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = \"Bachelor\" ); ",
      "SELECT first_name, middle_name, last_name FROM students WHERE EXISTS ( SELECT 1 FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE students.student_id = student_enrolment.student_id AND degree_summary_name = \"Bachelor\" ); ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = \"Bachelor\" ); ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE EXISTS ( SELECT 1 FROM degree_programs WHERE student_enrolment.degree_program_id = degree_programs.degree_program_id AND degree_summary_name = \"Bachelor\" ); ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = \"Bachelor\" ); ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment JOIN degree_programs USING (degree_program_id) WHERE degree_summary_name = \"Bachelor\" );"
    ]
  },
  {
    "id": 537,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "gpt_answers1": [
      "SELECT first_name, middle_name, last_name FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelors'; ",
      "SELECT students.first_name, students.middle_name, students.last_name  FROM students, student_enrolment, degree_programs  WHERE students.student_id = student_enrolment.student_id  AND student_enrolment.degree_program_id = degree_programs.degree_program_id  AND degree_summary_name = 'Bachelors'; ",
      "SELECT s.first_name, s.middle_name, s.last_name  FROM students s  INNER JOIN student_enrolment se ON s.student_id = se.student_id  INNER JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id  WHERE dp.degree_summary_name = 'Bachelors'; ",
      "SELECT first_name, middle_name, last_name  FROM students, student_enrolment, degree_programs  WHERE students.student_id = student_enrolment.student_id  AND student_enrolment.degree_program_id = degree_programs.degree_program_id  AND degree_summary_name LIKE '%Bachelors%'; ",
      "SELECT *  FROM students  WHERE student_id IN (SELECT student_id FROM student_enrolment  WHERE degree_program_id IN (SELECT degree_program_id  FROM degree_programs  WHERE degree_summary_name = 'Bachelors')); ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id IN (SELECT student_id FROM student_enrolment  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name = 'Bachelors'); ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id IN (SELECT student_id FROM student_enrolment  WHERE degree_program_id IN (SELECT degree_program_id  FROM degree_programs  WHERE degree_summary_description LIKE '%Bachelors%')); ",
      "SELECT first_name, middle_name, last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_summary_name LIKE '%Bachelors%'; ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE EXISTS (SELECT 1 FROM student_enrolment  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE students.student_id = student_enrolment.student_id  AND degree_summary_name = 'Bachelors'); ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id IN (SELECT student_id FROM student_enrolment  WHERE degree_program_id IN (SELECT degree_program_id  FROM degree_programs  WHERE degree_summary_name = 'Bachelors'));"
    ],
    "gpt_answers2": [
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelors'; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_description LIKE '%Bachelors%'; ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelors'); ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors')); ",
      "SELECT first_name, middle_name, last_name FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id AND degree_summary_name = 'Bachelors'; ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors')); ",
      "SELECT first_name, middle_name, last_name FROM students WHERE EXISTS (SELECT 1 FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE students.student_id = student_enrolment.student_id AND degree_summary_name = 'Bachelors'); ",
      "SELECT first_name, middle_name, last_name FROM students WHERE EXISTS (SELECT 1 FROM student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id AND degree_summary_name = 'Bachelors'); ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelors'); ",
      "SELECT first_name, middle_name, last_name FROM students WHERE EXISTS (SELECT 1 FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE students.student_id = student_enrolment.student_id AND degree_summary_name = 'Bachelors');"
    ],
    "gpt_answers3": [
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%' ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s, student_enrolment se, degree_programs dp WHERE s.student_id = se.student_id AND se.degree_program_id = dp.degree_program_id AND dp.degree_summary_name LIKE '%Bachelors%' ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name LIKE '%Bachelors%' ) ) ",
      "SELECT first_name, middle_name, last_name FROM students WHERE EXISTS ( SELECT 1 FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE students.student_id = se.student_id AND dp.degree_summary_name LIKE '%Bachelors%' ) ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s WHERE EXISTS ( SELECT 1 FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE s.student_id = se.student_id AND dp.degree_summary_name LIKE '%Bachelors%' ) ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s, student_enrolment se, degree_programs dp WHERE s.student_id = se.student_id AND se.degree_program_id = dp.degree_program_id AND dp.degree_summary_name LIKE '%Bachelors%' ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s INNER JOIN student_enrolment se ON s.student_id = se.student_id INNER JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%' ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name LIKE '%Bachelors%' ",
      "SELECT first_name, middle_name, last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%' ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id AND degree_programs.degree_summary_name LIKE '%Bachelors%'"
    ]
  },
  {
    "id": 540,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = ( SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  LIMIT 1 ); ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = ( SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(*) = ( SELECT MAX(num_students)  FROM ( SELECT degree_program_id, COUNT(*) as num_students  FROM student_enrolment  GROUP BY degree_program_id ) ) ); ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = ( SELECT degree_program_id  FROM ( SELECT degree_program_id, COUNT(*) as num_students  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY num_students DESC  LIMIT 1 ) ); ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = ( SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  ) LIMIT 1; ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id IN ( SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(*) = ( SELECT COUNT(*)  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  LIMIT 1 ) ); ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = ( SELECT MAX(degree_program_id)  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  LIMIT 1 ); ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = ( SELECT TOP 1 degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC ); ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id IN ( SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(*) = ( SELECT TOP 1 COUNT(*)  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  ) ); ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  JOIN student_enrolment  ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY student_enrolment.degree_program_id  ORDER BY COUNT(*) DESC  LIMIT 1; ",
      "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name  FROM degree_programs  JOIN student_enrolment  ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY degree_programs.degree_program_id  HAVING COUNT(*) = ( SELECT MAX(num_students)  FROM ( SELECT COUNT(*) as num_students  FROM student_enrolment  GROUP BY degree_program_id ) );"
    ],
    "gpt_answers2": [
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id IN ( SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(*) = ( SELECT MAX(count)  FROM ( SELECT degree_program_id, COUNT(*) as count  FROM student_enrolment  GROUP BY degree_program_id ) ) ); ",
      "SELECT degree_program_id, degree_summary_name  FROM degree_programs  WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment  GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment GROUP BY degree_program_id ORDER BY count DESC LIMIT 1 ) AS temp ); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs INNER JOIN ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment GROUP BY degree_program_id ORDER BY count DESC LIMIT 1 ) AS temp ON degree_programs.degree_program_id = temp.degree_program_id; ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment_courses INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment_courses GROUP BY degree_program_id ) AS temp WHERE count = ( SELECT MAX(count) FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment_courses GROUP BY degree_program_id ) ) ); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment_courses INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY degree_program_id ) AS temp WHERE count = ( SELECT MAX(count) FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment_courses INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY degree_program_id ) ) ); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment_courses GROUP BY degree_program_id HAVING count = ( SELECT MAX(count) FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment_courses GROUP BY degree_program_id ) ) ) ); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs INNER JOIN ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment_courses GROUP BY degree_program_id HAVING count = ( SELECT MAX(count) FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment_courses GROUP BY degree_program_id ) ) ) AS temp ON degree_programs.degree_program_id = temp.degree_program_id; ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT degree_program_id, COUNT(*) as count FROM student_enrolment GROUP BY degree_program_id ) ) LIMIT 1 );"
    ],
    "gpt_answers3": [
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  LIMIT 1); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(*) = (SELECT MAX(program_count)  FROM (SELECT COUNT(*) as program_count  FROM student_enrolment  GROUP BY degree_program_id) as counts)); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id IN (SELECT degree_program_id  FROM (SELECT degree_program_id, COUNT(*) as program_count  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY program_count DESC) as counts WHERE ROWNUM = 1); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id IN (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(*) = (SELECT COUNT(*)  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  LIMIT 1)); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id  FROM (SELECT degree_program_id, COUNT(*) as program_count  FROM student_enrolment  GROUP BY degree_program_id ORDER BY program_count DESC LIMIT 1)  LIMIT 1); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(*) = (SELECT MAX(num_of_students)  FROM (SELECT COUNT(*) as num_of_students  FROM student_enrolment  GROUP BY degree_program_id) as students)); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(*) = (SELECT COUNT(*)  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  FETCH FIRST ROW ONLY)); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  FETCH FIRST ROW ONLY); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  LIMIT 1 OFFSET 0); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(*) DESC  OFFSET 0 ROWS FETCH NEXT 1 ROW ONLY);"
    ]
  },
  {
    "id": 541,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT degree_program_id, degree_summary_description  FROM degree_programs  WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  ORDER BY COUNT(student_id) DESC  LIMIT 1); ",
      "SELECT degree_programs.degree_program_id, degree_summary_description  FROM degree_programs  INNER JOIN student_enrolment  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1; ",
      "SELECT DISTINCT degree_programs.degree_program_id, degree_summary_description  FROM degree_programs  JOIN student_enrolment  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  JOIN student_enrolment_courses  ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(DISTINCT student_enrolment.student_id) DESC  LIMIT 1; ",
      "SELECT degree_program_id, degree_summary_description  FROM degree_programs  JOIN student_enrolment  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_program_id  HAVING COUNT(student_id) = (SELECT MAX(student_count)  FROM (SELECT COUNT(student_id) as student_count  FROM student_enrolment  GROUP BY degree_program_id)  AS student_counts); ",
      "SELECT degree_programs.degree_program_id, degree_summary_description  FROM degree_programs  JOIN student_enrolment  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_programs.degree_program_id  HAVING COUNT(student_enrolment.student_id) = (SELECT MAX(enrolment_count)  FROM (SELECT COUNT(student_enrolment.student_id) as enrolment_count  FROM student_enrolment  GROUP BY degree_program_id)  AS enrolment_counts); ",
      "SELECT degree_programs.degree_program_id, degree_summary_description  FROM degree_programs  JOIN student_enrolment  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(student_enrolment.student_id) DESC  FETCH FIRST ROW ONLY; ",
      "SELECT degree_program_id, degree_summary_description  FROM degree_programs  WHERE degree_program_id = (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(student_id) = MAX(COUNT(student_id))); ",
      "SELECT degree_programs.degree_program_id, degree_summary_description  FROM degree_programs  JOIN student_enrolment  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_programs.degree_program_id  HAVING COUNT(student_enrolment.student_id) = (SELECT MAX(COUNT(enrolment.student_id))  FROM student_enrolment  GROUP BY degree_program_id); ",
      "SELECT degree_programs.degree_program_id, degree_summary_description  FROM degree_programs  JOIN student_enrolment  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  GROUP BY degree_programs.degree_program_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1; ",
      "SELECT degree_program_id, degree_summary_description  FROM degree_programs  WHERE degree_program_id IN (SELECT degree_program_id  FROM student_enrolment  GROUP BY degree_program_id  HAVING COUNT(student_id) = (SELECT MAX(COUNT(student_id))  FROM student_enrolment  GROUP BY degree_program_id));"
    ],
    "gpt_answers2": [
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = ( SELECT MAX(num_students) FROM ( SELECT degree_program_id, COUNT(student_id) AS num_students FROM student_enrolment GROUP BY degree_program_id ) ) ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM ( SELECT degree_program_id, COUNT(student_id) AS num_students FROM student_enrolment GROUP BY degree_program_id ORDER BY num_students DESC LIMIT 1 ) ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM ( SELECT degree_program_id, COUNT(student_id) AS num_students FROM student_enrolment GROUP BY degree_program_id ) WHERE num_students = ( SELECT MAX(num_students) FROM ( SELECT degree_program_id, COUNT(student_id) AS num_students FROM student_enrolment GROUP BY degree_program_id ) ) ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 OFFSET 0 ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = ( SELECT MAX(num_students) FROM ( SELECT degree_program_id, COUNT(student_id) as num_students FROM student_enrolment GROUP BY degree_program_id ) AS temp ) ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = ( SELECT COUNT(student_id) FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = ( SELECT MAX(COUNT(student_id)) FROM student_enrolment GROUP BY degree_program_id ) )"
    ],
    "gpt_answers3": [
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1); ",
      "SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id IN (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_id) AS count FROM student_enrolment GROUP BY degree_program_id))); ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM (SELECT degree_program_id, COUNT(student_id) AS count FROM student_enrolment GROUP BY degree_program_id ORDER BY count DESC LIMIT 1)); ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM (SELECT degree_program_id, COUNT(student_id) AS count FROM student_enrolment GROUP BY degree_program_id ORDER BY count DESC) LIMIT 1); ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM (SELECT degree_program_id, COUNT(student_id) AS count FROM student_enrolment GROUP BY degree_program_id) ORDER BY count DESC LIMIT 1); ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC) LIMIT 1; ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT TOP 1 degree_program_id FROM (SELECT degree_program_id, COUNT(student_id) AS count FROM student_enrolment GROUP BY degree_program_id ORDER BY count DESC)); ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT TOP 1 degree_program_id FROM (SELECT degree_program_id, COUNT(student_id) AS count FROM student_enrolment GROUP BY degree_program_id) ORDER BY count DESC); ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT TOP 1 degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC); ",
      "SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = (SELECT TOP 1 degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC);"
    ]
  },
  {
    "id": 542,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollment_count DESC LIMIT 1;",
      "SELECT student_enrolment.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id ORDER BY enrollment_count DESC LIMIT 1;",
      "SELECT student_enrolment.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM student_enrolment JOIN students ON students.student_id = student_enrolment.student_id GROUP BY student_enrolment.student_id HAVING enrollment_count = (SELECT MAX(enrollment_count) FROM (SELECT student_id, COUNT(*) AS enrollment_count FROM student_enrolment GROUP BY student_id));",
      "SELECT student_id, first_name, middle_name, last_name, COUNT(*) AS enrollment_count FROM ( SELECT student_enrolment.student_id, students.first_name, students.middle_name, students.last_name FROM student_enrolment JOIN students ON students.student_id = student_enrolment.student_id ) GROUP BY student_id ORDER BY enrollment_count DESC LIMIT 1;",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING enrollment_count = (SELECT MAX(enrollment_count) FROM (SELECT students.student_id, COUNT(*) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id));",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT students.student_id, COUNT(*) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id));",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id GROUP BY students.student_id ORDER BY enrollment_count DESC LIMIT 1;",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM students, student_enrolment WHERE students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollment_count DESC LIMIT 1;",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM students, student_enrolment WHERE students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING enrollment_count = (SELECT MAX(enrollment_count) FROM (SELECT students.student_id, COUNT(*) AS enrollment_count FROM students, student_enrolment WHERE students.student_id = student_enrolment.student_id GROUP BY students.student_id));",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollment_count FROM students, student_enrolment WHERE students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT students.student_id, COUNT(*) AS enrollment_count FROM students, student_enrolment WHERE students.student_id = student_enrolment.student_id GROUP BY students.student_id));"
    ],
    "gpt_answers2": [
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS enrollments  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  ORDER BY enrollments DESC  LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS enrollments  FROM students, student_enrolment  WHERE students.student_id = student_enrolment.student_id  GROUP BY students.student_id  ORDER BY enrollments DESC  LIMIT 1; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS enrollments  FROM students AS s  INNER JOIN student_enrolment AS se ON s.student_id = se.student_id  GROUP BY s.student_id  ORDER BY enrollments DESC  LIMIT 1; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS enrollments  FROM students s  JOIN student_enrolment se ON s.student_id = se.student_id  GROUP BY s.student_id  ORDER BY enrollments DESC  LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS enrollments  FROM students, student_enrolment  WHERE students.student_id = student_enrolment.student_id  GROUP BY students.student_id  HAVING COUNT(student_enrolment.student_enrolment_id) = (SELECT MAX(CountEnrollment) FROM (SELECT COUNT(student_enrolment_id) as CountEnrollment FROM student_enrolment GROUP BY student_id) AS e) LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, count(student_enrolment_courses.student_enrolment_id) AS enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id GROUP BY students.student_id ORDER BY enrollments DESC LIMIT 1; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS enrollments  FROM students s, student_enrolment se  WHERE s.student_id = se.student_id  GROUP BY s.student_id  ORDER BY enrollments DESC  LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS enrollments  FROM students, student_enrolment  WHERE students.student_id = student_enrolment.student_id  GROUP BY students.student_id  ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC  LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS enrollments  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC  LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollments  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  ORDER BY enrollments DESC  LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollments DESC LIMIT 1; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS enrollments FROM students s, student_enrolment se WHERE s.student_id = se.student_id GROUP BY s.student_id ORDER BY enrollments DESC LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS enrollments FROM students, student_enrolment WHERE students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollments DESC LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollments DESC LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING enrollments = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(*) AS enrollment_count FROM student_enrolment GROUP BY student_id)) LIMIT 1; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS enrollments FROM students s, student_enrolment se WHERE s.student_id = se.student_id GROUP BY s.student_id HAVING enrollments = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(*) AS enrollment_count FROM student_enrolment GROUP BY student_id)) LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(*) AS enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING enrollments >= ALL (SELECT COUNT(*) FROM student_enrolment GROUP BY student_id) LIMIT 1; ",
      "SELECT students.student_id, students.first_name, students.middle_name, students.last_name, enrollments FROM students JOIN ( SELECT student_id, COUNT(*) AS enrollments FROM student_enrolment GROUP BY student_id HAVING enrollments = (SELECT MAX(enrollments) FROM (SELECT COUNT(*) AS enrollments FROM student_enrolment GROUP BY student_id)) ) AS temp ON students.student_id = temp.student_id; ",
      "WITH enrollments_count AS ( SELECT student_id, COUNT(*) AS enrollments FROM student_enrolment GROUP BY student_id ) SELECT students.student_id, students.first_name, students.middle_name, students.last_name, ec.enrollments FROM students JOIN enrollments_count ec ON students.student_id = ec.student_id ORDER BY ec.enrollments DESC LIMIT 1; ",
      "WITH enrollments_count AS ( SELECT student_id, COUNT(*) AS enrollments FROM student_enrolment GROUP BY student_id ) SELECT students.student_id, students.first_name, students.middle_name, students.last_name, ec.enrollments FROM students JOIN enrollments_count ec ON students.student_id = ec.student_id WHERE ec.enrollments = (SELECT MAX(enrollments) FROM enrollments_count) LIMIT 1;"
    ]
  },
  {
    "id": 543,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students s INNER JOIN student_enrolment e ON s.student_id = e.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students s JOIN student_enrolment e ON s.student_id = e.student_id GROUP BY s.student_id HAVING num_enrollments = (SELECT MAX(enrollments) FROM (SELECT COUNT(student_enrolment_id) AS enrollments FROM student_enrolment GROUP BY student_id)); ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students s, student_enrolment e WHERE s.student_id = e.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students s, student_enrolment e WHERE s.student_id = e.student_id GROUP BY s.student_id HAVING num_enrollments = (SELECT MAX(enrollments) FROM (SELECT COUNT(student_enrolment_id) AS enrollments FROM student_enrolment GROUP BY student_id)); ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students AS s INNER JOIN student_enrolment AS e ON s.student_id = e.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students AS s INNER JOIN student_enrolment AS e ON s.student_id = e.student_id GROUP BY s.student_id HAVING num_enrollments = (SELECT MAX(enrollments) FROM (SELECT COUNT(student_enrolment_id) AS enrollments FROM student_enrolment GROUP BY student_id)); ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students s INNER JOIN student_enrolment e ON s.student_id = e.student_id GROUP BY s.student_id HAVING COUNT(e.student_enrolment_id) >= ALL (SELECT COUNT(student_enrolment_id) FROM student_enrolment GROUP BY student_id); ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students s, student_enrolment e WHERE s.student_id = e.student_id GROUP BY s.student_id HAVING COUNT(e.student_enrolment_id) >= ALL (SELECT COUNT(student_enrolment_id) FROM student_enrolment GROUP BY student_id); ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students s JOIN student_enrolment e ON s.student_id = e.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC FETCH FIRST ROW ONLY; ",
      "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.student_enrolment_id) AS num_enrollments FROM students s JOIN student_enrolment e ON s.student_id = e.student_id GROUP BY s.student_id HAVING num_enrollments = (SELECT MAX(enrollments) FROM (SELECT COUNT(student_enrolment_id) AS enrollments FROM student_enrolment GROUP BY student_id)) FETCH FIRST ROW ONLY;"
    ],
    "gpt_answers2": [
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY enrollments DESC LIMIT 1; ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY enrollments DESC LIMIT 1; ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(*) = (SELECT MAX(enrollments) FROM (SELECT COUNT(*) AS enrollments FROM student_enrolment GROUP BY student_id)); ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(*) = (SELECT MAX(enrollments) FROM (SELECT COUNT(*) AS enrollments FROM student_enrolment GROUP BY student_id) ); ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE se.student_id = (SELECT se2.student_id FROM student_enrolment AS se2 GROUP BY se2.student_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY s.student_id; ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE se.student_id = (SELECT student_id FROM (SELECT se2.student_id, COUNT(*) AS enrollments FROM student_enrolment AS se2 GROUP BY se2.student_id ORDER BY enrollments DESC LIMIT 1)) GROUP BY s.student_id; ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE s.student_id = (SELECT se2.student_id FROM student_enrolment AS se2 GROUP BY se2.student_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY s.student_id; ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE s.student_id = (SELECT student_id FROM (SELECT se2.student_id, COUNT(*) AS enrollments FROM student_enrolment AS se2 GROUP BY se2.student_id ORDER BY enrollments DESC LIMIT 1)) GROUP BY s.student_id; ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE s.student_id = (SELECT student_id FROM student_enrolment GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY s.student_id; ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE se.student_id = (SELECT student_id FROM student_enrolment GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY s.student_id;"
    ],
    "gpt_answers3": [
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(student_enrolment.student_enrolment_id) AS num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY num_enrollments DESC LIMIT 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(*) AS num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY num_enrollments DESC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name, students.student_id, COUNT(*) as num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(*) = (SELECT MAX(enrollments) FROM (SELECT COUNT(*) AS enrollments FROM student_enrolment GROUP BY student_id)); ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(*) AS num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(*) = (SELECT MAX(num_enrollments) FROM (SELECT students.student_id, COUNT(*) AS num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id)); ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(*) = (SELECT MAX(num_enrollments) FROM (SELECT COUNT(*) AS num_enrollments FROM student_enrolment GROUP BY student_id)); ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM student_enrolment GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM student_enrolment GROUP BY student_id HAVING COUNT(*) = MAX(COUNT(*))); ",
      "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(*) = (SELECT COUNT(*) AS num_enrollments FROM student_enrolment GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1); ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(*) AS num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN (SELECT degree_program_id FROM degree_programs) GROUP BY students.student_id ORDER BY num_enrollments DESC LIMIT 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(*) AS num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id = (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY students.student_id ORDER BY num_enrollments DESC LIMIT 1;"
    ]
  },
  {
    "id": 546,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "gpt_answers1": [
      "SELECT DISTINCT course_name FROM courses  JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id ",
      "SELECT course_name FROM courses  WHERE course_id IN (SELECT course_id FROM student_enrolment_courses) ",
      "SELECT course_name FROM courses  WHERE course_id IN (SELECT course_id FROM student_enrolment_courses GROUP BY course_id) ",
      "SELECT course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id ",
      "SELECT DISTINCT course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id ",
      "SELECT course_name FROM courses  WHERE EXISTS (SELECT * FROM student_enrolment_courses WHERE courses.course_id = student_enrolment_courses.course_id) ",
      "SELECT course_name FROM courses  WHERE course_id IN (SELECT course_id FROM student_enrolment_courses WHERE course_id IS NOT NULL) ",
      "SELECT course_name FROM courses  WHERE course_id IN (SELECT course_id FROM student_enrolment_courses WHERE course_id IS NOT NULL GROUP BY course_id) ",
      "SELECT course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  GROUP BY course_name ",
      "SELECT course_name FROM courses  WHERE EXISTS (SELECT * FROM student_enrolment_courses WHERE courses.course_id = student_enrolment_courses.course_id)"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id ",
      "SELECT DISTINCT course_name FROM courses  WHERE course_id IN (SELECT course_id FROM student_enrolment_courses) ",
      "SELECT course_name FROM courses  WHERE course_id IN (SELECT course_id FROM student_enrolment_courses) ",
      "SELECT DISTINCT courses.course_name FROM courses, student_enrolment_courses  WHERE courses.course_id = student_enrolment_courses.course_id ",
      "SELECT course_name FROM courses  WHERE course_id IN (SELECT course_id FROM student_enrolment_courses  WHERE student_enrolment_id IN (SELECT student_enrolment_id FROM student_enrolment)) ",
      "SELECT course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id ",
      "SELECT DISTINCT course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  WHERE student_enrolment_courses.student_enrolment_id IN (SELECT student_enrolment_id FROM student_enrolment) ",
      "SELECT DISTINCT courses.course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id ",
      "SELECT DISTINCT courses.course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  WHERE student_enrolment.student_enrolment_id IS NOT NULL ",
      "SELECT DISTINCT courses.course_name FROM courses  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  WHERE student_enrolment.student_id IS NOT NULL"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT course_name FROM student_enrolment_courses INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id INNER JOIN courses ON student_enrolment_courses.course_id = courses.course_id ",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT DISTINCT course_id FROM student_enrolment_courses) ",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses) ",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses GROUP BY course_id) ",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(*) > 0) ",
      "SELECT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses WHERE courses.course_id = student_enrolment_courses.course_id) ",
      "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON student_enrolment_courses.course_id = courses.course_id ",
      "SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON student_enrolment_courses.course_id = courses.course_id JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id ",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses) ",
      "SELECT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses WHERE student_enrolment_courses.course_id = courses.course_id)"
    ]
  },
  {
    "id": 547,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "gpt_answers1": [
      "SELECT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id ",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses) ",
      "SELECT DISTINCT course_name FROM courses, student_enrolment_courses WHERE courses.course_id = student_enrolment_courses.course_id ",
      "SELECT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses WHERE courses.course_id = student_enrolment_courses.course_id) ",
      "SELECT course_name FROM courses JOIN student_enrolment_courses USING (course_id) ",
      "SELECT course_name FROM courses LEFT JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id WHERE student_enrolment_courses.course_id IS NOT NULL ",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses WHERE student_enrolment_id IS NOT NULL) ",
      "SELECT courses.course_name FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id ",
      "SELECT course_name FROM courses, student_enrolment_courses WHERE courses.course_id = student_enrolment_courses.course_id AND student_enrolment_id IS NOT NULL ",
      "SELECT courses.course_name FROM student_enrolment_courses LEFT JOIN courses ON student_enrolment_courses.course_id = courses.course_id WHERE courses.course_id IS NOT NULL"
    ],
    "gpt_answers2": [
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses);",
      "SELECT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;",
      "SELECT DISTINCT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;",
      "SELECT DISTINCT courses.course_name FROM courses, student_enrolment_courses WHERE student_enrolment_courses.course_id = courses.course_id;",
      "SELECT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name;",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses GROUP BY course_id);",
      "SELECT courses.course_name FROM courses, student_enrolment_courses WHERE student_enrolment_courses.course_id = courses.course_id GROUP BY courses.course_name;",
      "SELECT DISTINCT courses.course_name FROM courses, student_enrolment_courses WHERE student_enrolment_courses.course_id = courses.course_id;",
      "SELECT course_name FROM courses WHERE EXISTS (SELECT 1 FROM student_enrolment_courses WHERE student_enrolment_courses.course_id = courses.course_id);",
      "SELECT courses.course_name FROM courses, student_enrolment_courses WHERE student_enrolment_courses.course_id = courses.course_id;"
    ],
    "gpt_answers3": [
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses); ",
      "SELECT DISTINCT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id; ",
      "SELECT course_name FROM courses WHERE course_id IN  (SELECT course_id  FROM student_enrolment_courses  WHERE student_enrolment_id IN  (SELECT student_enrolment_id FROM student_enrolment)); ",
      "SELECT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id; ",
      "SELECT DISTINCT course_name FROM courses LEFT JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id WHERE student_enrolment_courses.course_id IS NOT NULL; ",
      "SELECT course_name FROM courses WHERE EXISTS  (SELECT 1  FROM student_enrolment_courses  WHERE student_enrolment_courses.course_id = courses.course_id); ",
      "SELECT course_name FROM courses WHERE EXISTS  (SELECT 1  FROM student_enrolment_courses  JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id WHERE student_enrolment_courses.course_id = courses.course_id); ",
      "SELECT DISTINCT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id; ",
      "SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY course_name; ",
      "SELECT course_name FROM courses WHERE course_id IN  (SELECT course_id  FROM student_enrolment_courses  WHERE student_enrolment_id IN  (SELECT student_enrolment_id FROM student_enrolment_courses));"
    ]
  },
  {
    "id": 548,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses  GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(cnt)  FROM (SELECT course_id, COUNT(*) as cnt  FROM student_enrolment_courses  GROUP BY course_id) t)); ",
      "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM  (SELECT course_id, COUNT(*) as cnt  FROM student_enrolment_courses  GROUP BY course_id ORDER BY cnt DESC LIMIT 1) t); ",
      "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM  (SELECT course_id, COUNT(*) as cnt  FROM student_enrolment_courses  GROUP BY course_id HAVING cnt = MAX(cnt)) t); ",
      "SELECT course_name FROM courses WHERE course_id = (SELECT course_id FROM  (SELECT course_id, COUNT(*) as cnt  FROM student_enrolment_courses  GROUP BY course_id ORDER BY cnt DESC LIMIT 1) AS t); ",
      "SELECT MAX(course_name) FROM courses WHERE course_id = (SELECT course_id FROM  (SELECT course_id, COUNT(*) as cnt  FROM student_enrolment_courses  GROUP BY course_id ORDER BY cnt DESC LIMIT 1) AS t); ",
      "SELECT course_name FROM courses JOIN student_enrolment_courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT course_name FROM courses JOIN (SELECT course_id, COUNT(*) as cnt  FROM student_enrolment_courses  GROUP BY course_id) t ON t.course_id = courses.course_id WHERE cnt = (SELECT MAX(cnt) FROM t); ",
      "SELECT course_name FROM courses JOIN (SELECT course_id, COUNT(*) as cnt  FROM student_enrolment_courses  GROUP BY course_id ORDER BY cnt DESC LIMIT 1) t ON t.course_id = courses.course_id; ",
      "SELECT course_name FROM courses JOIN student_enrolment_courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(cnt)  FROM (SELECT course_id, COUNT(*) as cnt  FROM student_enrolment_courses  GROUP BY course_id) t)"
    ],
    "gpt_answers2": [
      "SELECT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT course_name FROM courses WHERE course_id = ( SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1 ); ",
      "SELECT course_name FROM courses WHERE course_id = ( SELECT course_id FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(*) = ( SELECT MAX(enrollment_count) FROM ( SELECT course_id, COUNT(*) AS enrollment_count FROM student_enrolment_courses GROUP BY course_id ) ) ); ",
      "SELECT c.course_name  FROM courses AS c JOIN ( SELECT sec.course_id, COUNT(*) AS cnt FROM student_enrolment_courses AS sec GROUP BY sec.course_id ORDER BY cnt DESC LIMIT 1) AS subq ON c.course_id = subq.course_id; ",
      "SELECT course_name  FROM courses  WHERE course_id = ( SELECT course_id  FROM student_enrolment_courses  GROUP BY course_id  ORDER BY COUNT(*) DESC  LIMIT 1 )  LIMIT 1; ",
      "SELECT c.course_name FROM ( SELECT se.course_id, COUNT(*) AS num_enrollments FROM student_enrolment_courses AS se GROUP BY se.course_id ORDER BY num_enrollments DESC LIMIT 1 ) AS max_enrollments INNER JOIN courses AS c ON max_enrollments.course_id = c.course_id; ",
      "SELECT course_name FROM ( SELECT sc.course_id, COUNT(*) AS enrollments FROM student_enrolment_courses AS sc GROUP BY sc.course_id ORDER BY enrollments DESC LIMIT 1 ) AS max_enrollments JOIN courses ON max_enrollments.course_id = courses.course_id; ",
      "SELECT c.course_name FROM courses AS c JOIN ( SELECT course_id, COUNT(*) AS enrollments FROM student_enrolment_courses GROUP BY course_id ORDER BY enrollments DESC LIMIT 1 ) AS s ON c.course_id = s.course_id; ",
      "SELECT c.course_name FROM student_enrolment_courses AS sc  JOIN courses AS c ON sc.course_id = c.course_id GROUP BY c.course_name ORDER BY COUNT(sc.course_id) DESC LIMIT 1; ",
      "SELECT course_name FROM courses WHERE course_id = ( SELECT course_id FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(student_enrolment_id) = ( SELECT MAX(enrollment_count) FROM ( SELECT COUNT(student_enrolment_id) AS enrollment_count FROM student_enrolment_courses GROUP BY course_id ) ) );"
    ],
    "gpt_answers3": [
      "SELECT course_name FROM courses WHERE course_id IN ( SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1 ) ",
      "SELECT course_name FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_name ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1 ",
      "SELECT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id JOIN student_enrolment se ON sec.student_enrolment_id = se.student_enrolment_id GROUP BY c.course_name ORDER BY COUNT(se.student_id) DESC LIMIT 1 ",
      "SELECT c.course_name FROM courses c JOIN student_enrolment_courses sec ON c.course_id = sec.course_id GROUP BY c.course_name HAVING COUNT(sec.student_enrolment_id) = ( SELECT MAX(course_count) FROM ( SELECT COUNT(student_enrolment_id) as course_count FROM student_enrolment_courses GROUP BY course_id ) ) ",
      "SELECT course_name FROM courses WHERE course_id = ( SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1 ) ",
      "SELECT course_name FROM courses WHERE course_id = ( SELECT course_id FROM ( SELECT course_id, COUNT(student_enrolment_id) as enrolment_count FROM student_enrolment_courses GROUP BY course_id ORDER BY enrolment_count DESC LIMIT 1 ) ) ",
      "SELECT course_name FROM student_enrolment_courses JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_name HAVING COUNT(student_enrolment_id) = ( SELECT MAX(enrolment_count) FROM ( SELECT COUNT(student_enrolment_id) as enrolment_count FROM student_enrolment_courses GROUP BY course_id ) ) ",
      "SELECT course_name FROM courses WHERE course_id IN ( SELECT course_id FROM ( SELECT course_id, COUNT(student_enrolment_id) as enrolment_count FROM student_enrolment_courses GROUP BY course_id ORDER BY enrolment_count DESC LIMIT 1 ) ) ",
      "SELECT c.course_name FROM student_enrolment_courses sec JOIN courses c ON sec.course_id = c.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_enrolment_id) DESC LIMIT 1 ",
      "SELECT c.course_name FROM student_enrolment_courses sec JOIN courses c ON sec.course_id = c.course_id GROUP BY c.course_name HAVING COUNT(sec.student_enrolment_id) = ( SELECT MAX(enrolment_count) FROM ( SELECT COUNT(student_enrolment_id) as enrolment_count FROM student_enrolment_courses GROUP BY course_id ) )"
    ]
  },
  {
    "id": 550,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "gpt_answers1": [
      "SELECT last_name FROM students WHERE current_address_id IN ( SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina' ) AND student_id NOT IN ( SELECT student_id FROM student_enrolment ); ",
      "SELECT last_name FROM students WHERE current_address_id IN ( SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina' ) AND student_id NOT EXISTS ( SELECT student_id FROM student_enrolment WHERE student_id = students.student_id ); ",
      "SELECT last_name FROM students WHERE current_address_id IN ( SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina' ) AND NOT EXISTS ( SELECT student_id FROM student_enrolment WHERE student_id = students.student_id ); ",
      "SELECT last_name FROM students WHERE current_address_id IN ( SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina' ) AND student_id NOT IN ( SELECT student_id FROM student_enrolment WHERE degree_program_id IS NOT NULL ); ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND student_id NOT IN ( SELECT student_id FROM student_enrolment ); ",
      "SELECT last_name FROM students WHERE current_address_id IN ( SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina' ) AND student_id NOT IN ( SELECT DISTINCT student_id FROM student_enrolment ); ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.student_id IS NULL; ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina'  AND NOT EXISTS ( SELECT student_id FROM student_enrolment WHERE student_id = students.student_id ); ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.semester_id IS NULL; ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND NOT EXISTS ( SELECT student_id FROM student_enrolment WHERE student_id = students.student_id AND degree_program_id IS NOT NULL );"
    ],
    "gpt_answers2": [
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment); ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL; ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id IS NULL WHERE state_province_county = 'North Carolina'; ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM student_enrolment WHERE student_enrolment.student_id = students.student_id); ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IS NOT NULL); ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE state_province_county = 'North Carolina' AND degree_program_id IS NULL; ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' EXCEPT SELECT last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id; ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IS NOT NULL); ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IS NOT NULL) AND student_id NOT IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IS NULL); ",
      "SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IS NOT NULL) AND student_id NOT IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IS NOT NULL OR degree_program_id IS NULL);"
    ],
    "gpt_answers3": [
      "SELECT last_name  FROM students  WHERE current_address_id IN (SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id  FROM student_enrolment) ",
      "SELECT last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id  FROM student_enrolment) ",
      "SELECT last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.student_id IS NULL ",
      "SELECT last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  LEFT JOIN student_enrolment  ON students.student_id = student_enrolment.student_id  AND student_enrolment.degree_program_id IS NOT NULL  WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.student_id IS NULL ",
      "SELECT last_name  FROM students  JOIN addresses  ON students.current_address_id = addresses.address_id  LEFT JOIN student_enrolment  ON students.student_id = student_enrolment.student_id  LEFT JOIN degree_programs  ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE addresses.state_province_county = 'North Carolina'  AND degree_programs.degree_program_id IS NULL ",
      "SELECT last_name  FROM students  JOIN addresses  ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id  FROM student_enrolment  WHERE degree_program_id IS NOT NULL) ",
      "SELECT last_name  FROM students  JOIN addresses  ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND NOT EXISTS (SELECT student_id  FROM student_enrolment  WHERE student_id = students.student_id) ",
      "SELECT last_name  FROM students  JOIN addresses  ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id  FROM student_enrolment  JOIN degree_programs  ON student_enrolment.degree_program_id = degree_programs.degree_program_id) ",
      "SELECT last_name  FROM students  JOIN addresses  ON students.current_address_id = addresses.address_id  LEFT JOIN student_enrolment  ON students.student_id = student_enrolment.student_id  WHERE addresses.state_province_county = 'North Carolina'  AND (student_enrolment.degree_program_id IS NULL  OR student_enrolment.degree_program_id = '') ",
      "SELECT last_name  FROM students  WHERE current_address_id IN (SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id  FROM student_enrolment  WHERE degree_program_id IS NOT NULL)"
    ]
  },
  {
    "id": 551,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "gpt_answers1": [
      "SELECT last_name  FROM students  WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment) ",
      "SELECT last_name  FROM students  WHERE EXISTS (SELECT * FROM addresses WHERE state_province_county = 'North Carolina' AND permanent_address_id = address_id)  AND NOT EXISTS (SELECT * FROM student_enrolment WHERE student_enrolment.student_id = students.student_id) ",
      "SELECT last_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id FROM student_enrolment) ",
      "SELECT last_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.student_id IS NULL ",
      "SELECT last_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND NOT EXISTS (SELECT * FROM student_enrolment WHERE student_enrolment.student_id = students.student_id) ",
      "SELECT last_name  FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment) ",
      "SELECT last_name  FROM students  LEFT JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM student_enrolment) ",
      "SELECT last_name  FROM students  LEFT JOIN addresses ON students.permanent_address_id = addresses.address_id  LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id  WHERE addresses.state_province_county = 'North Carolina'  AND student_enrolment.student_id IS NULL ",
      "SELECT last_name  FROM students  WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment) ",
      "SELECT last_name  FROM students  WHERE current_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN (SELECT student_id FROM student_enrolment)"
    ],
    "gpt_answers2": [
      "SELECT last_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment); ",
      "SELECT last_name FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment); ",
      "SELECT last_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment); ",
      "SELECT last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment); ",
      "SELECT last_name FROM students WHERE permanent_address_id = (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM student_enrolment); ",
      "SELECT last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND student_id NOT EXISTS (SELECT student_id FROM student_enrolment); ",
      "SELECT last_name FROM students WHERE permanent_address_id = (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND NOT EXISTS (SELECT student_id FROM student_enrolment WHERE students.student_id = student_enrolment.student_id); ",
      "SELECT last_name FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT student_id FROM student_enrolment WHERE students.student_id = student_enrolment.student_id); ",
      "SELECT last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment); ",
      "SELECT last_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE state_province_county = 'North Carolina') AND student_id NOT EXISTS (SELECT student_id FROM student_enrolment);"
    ],
    "gpt_answers3": [
      "SELECT last_name  FROM students  WHERE current_address_id = ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT IN ( SELECT student_id  FROM student_enrolment ); ",
      "SELECT last_name  FROM students  WHERE current_address_id IN ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT IN ( SELECT student_id  FROM student_enrolment ); ",
      "SELECT last_name  FROM students  WHERE current_address_id = ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT EXISTS ( SELECT student_id  FROM student_enrolment ); ",
      "SELECT  last_name FROM students LEFT JOIN addresses on students.current_address_id = addresses.address_id LEFT JOIN student_enrolment on students.student_id = student_enrolment.student_id LEFT JOIN degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_enrolment_id IS NULL; ",
      "SELECT last_name  FROM students   WHERE current_address_id = ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT IN ( SELECT student_id  FROM student_enrolment )  AND NOT EXISTS ( SELECT student_id  FROM student_enrolment ); ",
      "SELECT last_name  FROM students  WHERE current_address_id IN ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT EXISTS ( SELECT student_id  FROM student_enrolment ); ",
      "SELECT last_name  FROM students  WHERE current_address_id = ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT IN ( SELECT student_id  FROM student_enrolment )  AND NOT EXISTS ( SELECT student_id  FROM student_enrolment ); ",
      "SELECT last_name  FROM students  WHERE current_address_id IN ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT EXISTS ( SELECT student_id  FROM student_enrolment ); ",
      "SELECT last_name  FROM students  WHERE current_address_id = ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT EXISTS ( SELECT student_id  FROM student_enrolment ); ",
      "SELECT last_name  FROM students  WHERE current_address_id IN ( SELECT address_id  FROM addresses  WHERE state_province_county = 'North Carolina' )  AND student_id NOT EXISTS ( SELECT student_id  FROM student_enrolment );"
    ]
  },
  {
    "id": 552,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "gpt_answers1": [
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN ( SELECT transcript_id  FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t  INNER JOIN ( SELECT sec.transcript_id FROM ( SELECT transcript_id, COUNT(course_id) as course_count FROM student_enrolment_courses GROUP BY transcript_id ) sec WHERE sec.course_count >= 2) temp ON temp.transcript_id = t.transcript_id; ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t WHERE EXISTS ( SELECT transcript_id FROM student_enrolment_courses WHERE transcripts.transcript_id = student_enrolment_courses.transcript_id GROUP BY transcript_id HAVING COUNT(course_id) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t INNER JOIN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2 ) sec ON t.transcript_id = sec.transcript_id; ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t INNER JOIN ( SELECT transcript_id, COUNT(course_id) as course_count FROM student_enrolment_courses GROUP BY transcript_id HAVING course_count >= 2 ) sec ON t.transcript_id = sec.transcript_id; ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t WHERE (t.transcript_id, t.transcript_date) IN ( SELECT transcript_id, transcript_date FROM student_enrolment_courses GROUP BY transcript_id, transcript_date HAVING COUNT(course_id) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t WHERE t.transcript_id IN ( SELECT student_enrolment_courses.transcript_id FROM student_enrolment_courses GROUP BY student_enrolment_courses.transcript_id HAVING COUNT(student_enrolment_courses.course_id) >= 2 ); ",
      "SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts, student_enrolment_courses WHERE student_enrolment_courses.transcript_id = transcripts.transcript_id GROUP BY transcripts.transcript_id, transcripts.transcript_date HAVING COUNT(student_enrolment_courses.course_id) >= 2; ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t WHERE EXISTS ( SELECT * FROM student_enrolment_courses sec WHERE sec.transcript_id = t.transcript_id GROUP BY sec.transcript_id HAVING COUNT(sec.course_id) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t WHERE t.transcript_id IN ( SELECT sec.transcript_id FROM ( SELECT transcript_id, COUNT(course_id) as course_count FROM student_enrolment_courses GROUP BY transcript_id ) sec WHERE sec.course_count >= 2 );"
    ],
    "gpt_answers2": [
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(*) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t INNER JOIN student_enrolment_courses sec ON t.transcript_id = sec.transcript_id GROUP BY t.transcript_id HAVING COUNT(*) >= 2; ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2 ); ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN ( SELECT sec.transcript_id FROM student_enrolment_courses sec INNER JOIN courses c ON sec.course_id = c.course_id GROUP BY sec.transcript_id HAVING COUNT(*) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t JOIN ( SELECT sec.transcript_id FROM student_enrolment_courses sec GROUP BY sec.transcript_id HAVING COUNT(*) >= 2 ) s ON t.transcript_id = s.transcript_id; ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN ( SELECT sec.transcript_id FROM student_enrolment_courses sec INNER JOIN courses c ON sec.course_id = c.course_id GROUP BY sec.transcript_id HAVING COUNT(DISTINCT c.course_id) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t INNER JOIN ( SELECT sec.transcript_id FROM student_enrolment_courses sec INNER JOIN courses c ON sec.course_id = c.course_id GROUP BY sec.transcript_id HAVING COUNT(*) >= 2 ) s ON t.transcript_id = s.transcript_id; ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM ( SELECT transcript_id, COUNT(*) AS num_courses FROM student_enrolment_courses GROUP BY transcript_id ) subquery WHERE num_courses >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t JOIN ( SELECT sec.transcript_id FROM student_enrolment_courses sec GROUP BY sec.transcript_id HAVING COUNT(DISTINCT sec.course_id) >= 2 ) s ON t.transcript_id = s.transcript_id; ",
      "SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN ( SELECT sec.transcript_id FROM student_enrolment_courses sec JOIN courses ON sec.course_id = courses.course_id GROUP BY sec.transcript_id HAVING COUNT(*) >= 2 ) AS subquery ON transcripts.transcript_id = subquery.transcript_id;"
    ],
    "gpt_answers3": [
      "SELECT transcript_date, transcript_id  FROM transcripts INNER JOIN student_enrolment_courses ON transcripts.transcript_id = student_enrolment_courses.transcript_id GROUP BY transcript_id HAVING COUNT(course_id) >= 2; ",
      "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2 ); ",
      "SELECT t.transcript_date, t.transcript_id FROM transcripts t, student_enrolment_courses sc WHERE t.transcript_id = sc.transcript_id GROUP BY t.transcript_id HAVING COUNT(sc.course_id) >= 2; ",
      "SELECT transcript_date, transcript_id  FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(*) >= 2 ); ",
      "SELECT transcript_date, transcript_id  FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) > 1 ); ",
      "SELECT transcript_date, transcript_id  FROM transcripts WHERE transcript_id IN ( SELECT DISTINCT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(*) >= 2 ); ",
      "SELECT transcript_date, transcript_id  FROM transcripts JOIN student_enrolment_courses ON transcripts.transcript_id = student_enrolment_courses.transcript_id GROUP BY transcript_id HAVING COUNT(course_id) >= 2; ",
      "SELECT transcript_date, transcript_id  FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(*) > 1 ); ",
      "SELECT transcript_date, transcript_id  FROM transcripts JOIN ( SELECT transcript_id, COUNT(course_id) AS course_count FROM student_enrolment_courses GROUP BY transcript_id HAVING course_count >= 2 ) AS subquery ON transcripts.transcript_id = subquery.transcript_id; ",
      "SELECT transcript_date, transcript_id  FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2 );"
    ]
  },
  {
    "id": 553,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "gpt_answers1": [
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2) ",
      "SELECT transcript_id, transcript_date FROM transcripts JOIN (SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2) AS subquery ON transcripts.transcript_id = subquery.transcript_id ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t INNER JOIN (SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2) sec ON t.transcript_id = sec.transcript_id ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM student_enrolment_courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2)) ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM student_enrolment_courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses WHERE transcript_id IN (SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2))) ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t INNER JOIN (SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(course_id) >= 2) sec ON t.transcript_id = sec.transcript_id ",
      "SELECT t.transcript_id, t.transcript_date FROM transcripts t INNER JOIN student_enrolment_courses sec ON t.transcript_id = sec.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(sec.course_id) >= 2 ",
      "SELECT t.transcript_id, t.transcript_date FROM student_enrolment_courses sec JOIN transcripts t ON t.transcript_id = sec.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(sec.course_id) >= 2 ",
      "SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts INNER JOIN student_enrolment_courses ON transcripts.transcript_id = student_enrolment_courses.transcript_id GROUP BY transcripts.transcript_id, transcripts.transcript_date HAVING COUNT(*) >= 2 ",
      "SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts INNER JOIN student_enrolment_courses ON transcripts.transcript_id = student_enrolment_courses.transcript_id GROUP BY transcripts.transcript_id, transcripts.transcript_date HAVING COUNT(*) >= 2;"
    ],
    "gpt_answers2": [
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id HAVING COUNT(course_id) >= 2 ); ",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT student_enrolment_courses.transcript_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.transcript_id  HAVING COUNT(*) >= 2 ); ",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(*) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date  FROM transcripts t  JOIN student_enrolment_courses sec  ON t.transcript_id = sec.transcript_id  GROUP BY t.transcript_id, t.transcript_date  HAVING COUNT(*) >= 2; ",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(*) >= 2 ); ",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(*) >= 2  ORDER BY transcript_id ASC ); ",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(course_id) >= 2 ); ",
      "SELECT t.transcript_id, t.transcript_date  FROM transcripts t  JOIN student_enrolment_courses sec  ON t.transcript_id = sec.transcript_id  GROUP BY t.transcript_id  HAVING COUNT(*) >= 2; ",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT transcript_id  FROM ( SELECT transcript_id, COUNT(*) AS course_count  FROM student_enrolment_courses  GROUP BY transcript_id )  WHERE course_count >= 2 ); ",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN ( SELECT transcript_id  FROM ( SELECT transcript_id, COUNT(*) AS course_count  FROM student_enrolment_courses  GROUP BY transcript_id )  WHERE course_count >= 2 ORDER BY transcript_id ASC );"
    ],
    "gpt_answers3": [
      "SELECT transcript_id, transcript_date FROM transcripts  WHERE transcript_id IN (SELECT transcript_id FROM student_enrolment_courses  GROUP BY transcript_id HAVING COUNT(course_id) >= 2); ",
      "SELECT t.transcript_id, t.transcript_date  FROM transcripts t INNER JOIN student_enrolment_courses sec ON t.transcript_id = sec.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(DISTINCT sec.course_id) >= 2; ",
      "SELECT transcript_id, transcript_date  FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM student_enrolment_courses  GROUP BY transcript_id HAVING COUNT(*) >= 2); ",
      "SELECT t.transcript_id, t.transcript_date  FROM transcripts t INNER JOIN (SELECT transcript_id, COUNT(*) AS num_courses  FROM student_enrolment_courses GROUP BY transcript_id) sec  ON t.transcript_id = sec.transcript_id WHERE sec.num_courses >= 2; ",
      "SELECT transcript_id, transcript_date  FROM transcripts WHERE transcript_id IN (SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(DISTINCT course_id) >= 2); ",
      "SELECT transcript_id, transcript_date  FROM transcripts WHERE transcript_id IN (SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(1) >= 2); ",
      "SELECT transcript_id, transcript_date  FROM transcripts WHERE transcript_id IN (SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(DISTINCT course_id) >= 2); ",
      "SELECT transcript_id, transcript_date  FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM (SELECT transcript_id, COUNT(course_id) AS num_courses FROM student_enrolment_courses  GROUP BY transcript_id)  WHERE num_courses >= 2); ",
      "SELECT transcript_id, transcript_date  FROM transcripts WHERE transcript_id IN (SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(course_id) >= 2); ",
      "SELECT transcript_id, transcript_date  FROM transcripts WHERE transcript_id IN (SELECT transcript_id  FROM student_enrolment_courses  GROUP BY transcript_id  HAVING COUNT(DISTINCT student_course_id) >= 2);"
    ]
  },
  {
    "id": 555,
    "db_id": "student_transcripts_tracking",
    "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
    "gpt_answers1": [
      "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';",
      "SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';",
      "SELECT s.cell_mobile_number FROM students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';",
      "SELECT s.cell_mobile_number FROM students AS s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';",
      "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward' LIMIT 1;",
      "SELECT students.cell_mobile_number FROM students WHERE students.first_name LIKE 'Timmothy' AND students.last_name LIKE 'Ward';",
      "SELECT s.cell_mobile_number FROM students s WHERE s.first_name LIKE 'Timmothy' AND s.last_name LIKE 'Ward';",
      "SELECT s.cell_mobile_number FROM students AS s WHERE s.first_name LIKE 'Timmothy' AND s.last_name LIKE 'Ward';",
      "SELECT cell_mobile_number FROM students WHERE first_name LIKE 'Timmothy' AND last_name LIKE 'Ward' LIMIT 1;",
      "SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward' LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'; ",
      "SELECT s.cell_mobile_number FROM students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward'; ",
      "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' OR last_name = 'Ward'; ",
      "SELECT cell_mobile_number FROM students WHERE first_name || ' ' || last_name = 'Timmothy Ward'; ",
      "SELECT s.cell_mobile_number FROM students AS s WHERE s.first_name || ' ' || s.last_name = 'Timmothy Ward'; ",
      "SELECT cell_mobile_number FROM students WHERE first_name || ' ' || last_name LIKE 'Timmothy Ward'; ",
      "SELECT s.cell_mobile_number FROM students s WHERE s.first_name || ' ' || s.last_name LIKE 'Timmothy Ward'; ",
      "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name LIKE '%Ward%'; ",
      "SELECT cell_mobile_number FROM students WHERE first_name LIKE '%Timmothy%' AND last_name LIKE '%Ward%'; ",
      "SELECT cell_mobile_number FROM students WHERE last_name = 'Ward' AND first_name LIKE 'T%';"
    ],
    "gpt_answers3": [
      "SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';",
      "SELECT cell_mobile_number FROM students WHERE first_name LIKE 'Timmothy' AND last_name LIKE 'Ward';",
      "SELECT students.cell_mobile_number FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE first_name = 'Timmothy' AND last_name = 'Ward';",
      "SELECT students.cell_mobile_number FROM students, addresses WHERE students.permanent_address_id = addresses.address_id AND first_name = 'Timmothy' AND last_name = 'Ward';",
      "SELECT s.cell_mobile_number FROM students s INNER JOIN addresses a ON s.permanent_address_id = a.address_id WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';",
      "SELECT s.cell_mobile_number FROM students AS s INNER JOIN addresses AS a ON s.permanent_address_id = a.address_id WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';",
      "SELECT students.cell_mobile_number FROM students, addresses WHERE students.permanent_address_id = addresses.address_id AND students.first_name = 'Timmothy' AND students.last_name = 'Ward';",
      "SELECT students.cell_mobile_number FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';",
      "SELECT s.cell_mobile_number FROM students AS s, addresses AS a WHERE s.permanent_address_id = a.address_id AND s.first_name = 'Timmothy' AND s.last_name = 'Ward';",
      "SELECT students.cell_mobile_number FROM students as s, addresses as a WHERE s.permanent_address_id = a.address_id AND s.first_name = 'Timmothy' AND s.last_name = 'Ward';"
    ]
  },
  {
    "id": 558,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "gpt_answers1": [
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id IN (SELECT student_id  FROM student_enrolment  WHERE degree_program_id IS NOT NULL  ORDER BY date_left ASC  LIMIT 1); ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id  FROM student_enrolment  WHERE degree_program_id IS NOT NULL  ORDER BY date_left ASC  LIMIT 1); ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id  FROM student_enrolment  WHERE degree_program_id IS NOT NULL  AND semester_id IS NOT NULL  ORDER BY date_left ASC  LIMIT 1); ",
      "SELECT s.first_name, s.middle_name, s.last_name  FROM students s  INNER JOIN student_enrolment se ON s.student_id = se.student_id  WHERE se.degree_program_id IS NOT NULL  ORDER BY se.date_left ASC  LIMIT 1; ",
      "SELECT first_name, middle_name, last_name  FROM (SELECT s.first_name, s.middle_name, s.last_name, se.date_left  FROM students s  INNER JOIN student_enrolment se ON s.student_id = se.student_id  WHERE se.degree_program_id IS NOT NULL)  ORDER BY date_left ASC  LIMIT 1; ",
      "SELECT s.first_name, s.middle_name, s.last_name  FROM students s  INNER JOIN student_enrolment se ON s.student_id = se.student_id  WHERE se.degree_program_id IS NOT NULL  AND se.date_left = (SELECT MIN(date_left)  FROM student_enrolment  WHERE degree_program_id IS NOT NULL); ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id  FROM student_enrolment  WHERE degree_program_id IS NOT NULL  ORDER BY date_left ASC  FETCH FIRST 1 ROWS ONLY); ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id IN (SELECT student_id  FROM student_enrolment  WHERE degree_program_id IS NOT NULL  ORDER BY date_left ASC  FETCH FIRST ROW ONLY); ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id  FROM student_enrolment  WHERE degree_program_id IS NOT NULL  ORDER BY date_left ASC  ROWS 1); ",
      "SELECT s.first_name, s.middle_name, s.last_name  FROM students s  INNER JOIN student_enrolment se ON s.student_id = se.student_id  WHERE se.degree_program_id IS NOT NULL  ORDER BY se.date_left ASC  LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id ORDER BY transcript_date ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id WHERE student_enrolment.date_left IS NULL ORDER BY student_enrolment.semester_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id WHERE student_enrolment.date_left IS NOT NULL ORDER BY student_enrolment_courses.student_course_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id GROUP BY students.student_id ORDER BY transcript_date ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id ORDER BY transcript_date ASC LIMIT 1 ); ",
      "SELECT first_name, middle_name, last_name FROM (SELECT first_name, middle_name, last_name, transcript_date FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id ORDER BY transcript_date ASC LIMIT 1) AS earliest_graduate; ",
      "SELECT first_name, middle_name, last_name FROM students WHERE EXISTS ( SELECT 1 FROM student_enrolment JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id WHERE students.student_id = student_enrolment.student_id ORDER BY transcript_date ASC LIMIT 1 ); ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id WHERE transcript_date = ( SELECT MIN(transcript_date) FROM transcripts ) LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.student_course_id = transcripts.transcript_id WHERE transcript_date IN ( SELECT MIN(transcript_date) FROM transcripts ) LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment WHERE student_enrolment_id IN ( SELECT student_enrolment_id FROM student_enrolment_courses WHERE student_course_id IN ( SELECT transcript_id FROM transcripts WHERE transcript_date IN ( SELECT MIN(transcript_date) FROM transcripts ) ) ) );"
    ],
    "gpt_answers3": [
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN transcripts t ON se.student_enrolment_id = t.transcript_id ORDER BY t.transcript_date LIMIT 1;",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN transcripts t ON sec.student_enrolment_id = t.transcript_id WHERE se.degree_program_id IS NOT NULL ORDER BY t.transcript_date LIMIT 1;",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment WHERE student_enrolment_id IN ( SELECT student_enrolment_id FROM student_enrolment_courses WHERE course_id IN ( SELECT course_id FROM transcripts WHERE transcript_date IS NOT NULL ) ) ) ORDER BY student_id LIMIT 1;",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id = ( SELECT student_id FROM student_enrolment WHERE student_enrolment_id = ( SELECT student_enrolment_id FROM student_enrolment_courses WHERE student_course_id = ( SELECT student_course_id FROM transcripts WHERE transcript_date IS NOT NULL ) ) );",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment_courses.course_id = transcripts.course_id WHERE student_enrolment.degree_program_id IS NOT NULL ORDER BY transcripts.transcript_date LIMIT 1;",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id JOIN transcripts AS t ON se.student_enrolment_id = t.transcript_id WHERE t.transcript_date = ( SELECT MIN(transcript_date) FROM transcripts );",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN transcripts t ON se.student_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN transcripts t ON sec.student_course_id = t.transcript_id ORDER BY t.transcript_date LIMIT 1;",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN transcripts t ON sec.student_enrolment_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id = ( SELECT student_id FROM student_enrolment WHERE student_enrolment_id = ( SELECT student_enrolment_id FROM student_enrolment_courses WHERE student_course_id = ( SELECT transcript_id FROM transcripts WHERE transcript_date IS NOT NULL ORDER BY transcript_date LIMIT 1 ) ) );"
    ]
  },
  {
    "id": 559,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "gpt_answers1": [
      "SELECT first_name, middle_name, last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  WHERE transcript_id IN (SELECT min(transcript_id) FROM transcripts) ",
      "SELECT first_name, middle_name, last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  JOIN transcripts ON transcripts.transcript_id = student_enrolment_courses.course_id  WHERE transcript_date = (SELECT min(transcript_date) FROM transcripts)  ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id  FROM student_enrolment  WHERE student_enrolment_id = (SELECT student_enrolment_id  FROM student_enrolment_courses  WHERE course_id = (SELECT min(transcript_id)  FROM transcripts))) ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id IN (SELECT student_id  FROM student_enrolment  WHERE student_enrolment_id IN (SELECT student_enrolment_id  FROM student_enrolment_courses  WHERE course_id = (SELECT min(transcript_id)  FROM transcripts))) ",
      "SELECT first_name, middle_name, last_name  FROM students, student_enrolment, student_enrolment_courses, transcripts  WHERE students.student_id = student_enrolment.student_id  AND student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  AND student_enrolment_courses.course_id = transcripts.transcript_id  AND transcript_date = (SELECT min(transcript_date) FROM transcripts)  ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id  FROM student_enrolment  WHERE student_enrolment_id IN (SELECT student_enrolment_id  FROM student_enrolment_courses  WHERE student_course_id = (SELECT min(transcript_id)  FROM transcripts))) ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id IN (SELECT student_id  FROM student_enrolment  WHERE student_enrolment_id = (SELECT student_enrolment_id  FROM student_enrolment_courses  WHERE student_enrolment_id = (SELECT min(student_enrolment_id)  FROM student_enrolment_courses  WHERE course_id = (SELECT min(course_id)  FROM student_enrolment_courses  WHERE student_enrolment_id = student_enrolment.student_enrolment_id))))  ",
      "SELECT first_name, middle_name, last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  JOIN transcripts ON student_enrolment_courses.course_id = transcripts.transcript_id  WHERE transcript_date = (SELECT min(transcript_date)  FROM transcripts  WHERE transcript_id IN (SELECT course_id  FROM student_enrolment_courses  WHERE student_enrolment_id = student_enrolment.student_enrolment_id))  ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id IN (SELECT student_id  FROM student_enrolment  WHERE student_enrolment_id IN (SELECT student_enrolment_id  FROM student_enrolment_courses  WHERE student_course_id IN (SELECT course_id   FROM transcripts  WHERE transcript_id = (SELECT min(transcript_id)  FROM transcripts))))) ",
      "SELECT first_name, middle_name, last_name  FROM students  WHERE student_id = (SELECT student_id  FROM student_enrolment  WHERE student_enrolment_id = (SELECT student_enrolment_id  FROM student_enrolment_courses  WHERE course_id = (SELECT min(transcript_id)  FROM transcripts))))"
    ],
    "gpt_answers2": [
      "SELECT first_name, middle_name, last_name  FROM students ORDER BY student_id ASC LIMIT 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name  FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY student_enrolment.semester_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name  FROM students WHERE student_id = (SELECT student_id  FROM student_enrolment  ORDER BY semester_id ASC  LIMIT 1); ",
      "SELECT s.first_name, s.middle_name, s.last_name  FROM students AS s, student_enrolment AS se WHERE s.student_id = se.student_id ORDER BY se.semester_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name  FROM students WHERE student_id IN (SELECT student_id  FROM student_enrolment  ORDER BY semester_id ASC  LIMIT 1); ",
      "SELECT first_name, middle_name, last_name  FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY student_enrolment.semester_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name  FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id ORDER BY student_enrolment.semester_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name  FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON students.student_id = student_enrolment_courses.student_enrolment_id ORDER BY student_enrolment.semester_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name  FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON students.student_id = transcripts.transcript_id ORDER BY student_enrolment.semester_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name  FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id INNER JOIN transcripts ON students.student_id = transcripts.transcript_id ORDER BY student_enrolment.semester_id ASC LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY student_enrolment.semester_id ASC LIMIT 1; ",
      "SELECT s.first_name, s.middle_name, s.last_name FROM students AS s JOIN student_enrolment AS se ON s.student_id = se.student_id WHERE se.student_enrolment_id = (SELECT MIN(student_enrolment_id) FROM student_enrolment) LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students WHERE student_id = (SELECT student_id FROM student_enrolment ORDER BY semester_id ASC LIMIT 1); ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment_id = (SELECT MIN(student_enrolment_id) FROM student_enrolment) LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.semester_id = (SELECT MIN(semester_id) FROM student_enrolment) LIMIT 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id ORDER BY student_enrolment.semester_id ASC LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id ORDER BY student_enrolment_courses.student_course_id ASC LIMIT 1; ",
      "SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id WHERE student_enrolment_courses.student_course_id = (SELECT MIN(student_course_id) FROM student_enrolment_courses) LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment_courses.student_course_id IN (SELECT MIN(student_course_id) FROM student_enrolment_courses) LIMIT 1; ",
      "SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.semester_id = (SELECT MIN(semester_id) FROM student_enrolment) LIMIT 1;"
    ]
  },
  {
    "id": 560,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "gpt_answers1": [
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id;",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id AND students.current_address_id <> addresses.address_id;",
      "SELECT first_name FROM students WHERE EXISTS (SELECT 1 FROM addresses WHERE students.permanent_address_id = addresses.address_id AND students.current_address_id <> addresses.address_id);",
      "SELECT first_name FROM students WHERE EXISTS (SELECT 1 FROM addresses WHERE students.permanent_address_id = addresses.address_id) AND EXISTS (SELECT 1 FROM addresses WHERE students.current_address_id <> addresses.address_id);",
      "SELECT first_name FROM students WHERE EXISTS (SELECT 1 FROM addresses WHERE students.permanent_address_id = addresses.address_id) AND NOT EXISTS (SELECT 1 FROM addresses WHERE students.current_address_id = addresses.address_id);",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses) AND current_address_id NOT IN (SELECT address_id FROM addresses);",
      "SELECT first_name FROM students WHERE (permanent_address_id IN (SELECT address_id FROM addresses)) AND (current_address_id NOT IN (SELECT address_id FROM addresses));",
      "SELECT first_name FROM students JOIN addresses ON (students.permanent_address_id = addresses.address_id) WHERE (students.current_address_id <> addresses.address_id);",
      "SELECT first_name FROM students JOIN addresses ON (students.permanent_address_id = addresses.address_id) AND (students.current_address_id <> addresses.address_id);",
      "SELECT first_name FROM students JOIN addresses ON (students.permanent_address_id = addresses.address_id) AND (students.current_address_id NOT IN (SELECT address_id FROM addresses));"
    ],
    "gpt_answers2": [
      "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id;",
      "SELECT s.first_name FROM students s JOIN addresses a ON s.current_address_id <> a.address_id AND s.permanent_address_id <> a.address_id;",
      "SELECT first_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE address_id <> permanent_address_id);",
      "SELECT first_name FROM students WHERE current_address_id NOT IN (SELECT address_id FROM addresses WHERE address_id = permanent_address_id);",
      "SELECT first_name FROM students WHERE EXISTS (SELECT * FROM addresses WHERE address_id <> permanent_address_id AND address_id = current_address_id);",
      "SELECT first_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE address_id <> permanent_address_id) AND permanent_address_id IN (SELECT address_id FROM addresses WHERE address_id <> current_address_id);",
      "SELECT s.first_name FROM students s, addresses a WHERE s.current_address_id <> a.address_id AND s.permanent_address_id <> a.address_id;",
      "SELECT first_name FROM students WHERE current_address_id IN (SELECT address_id FROM addresses WHERE address_id <> permanent_address_id) AND student_id IN (SELECT student_id FROM student_enrolment);",
      "SELECT s.first_name FROM students s WHERE EXISTS (SELECT * FROM addresses a WHERE a.address_id <> s.permanent_address_id AND a.address_id = s.current_address_id);",
      "SELECT first_name FROM students WHERE current_address_id NOT IN (SELECT address_id FROM addresses WHERE address_id = permanent_address_id) AND student_id IN (SELECT student_id FROM student_enrolment);"
    ],
    "gpt_answers3": [
      "SELECT first_name FROM students WHERE permanent_address_id != current_address_id; ",
      "SELECT students.first_name FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE students.current_address_id != students.permanent_address_id; ",
      "SELECT s.first_name FROM students AS s, addresses AS a WHERE s.permanent_address_id != s.current_address_id; ",
      "SELECT first_name FROM students WHERE current_address_id <> permanent_address_id; ",
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id; ",
      "SELECT st.first_name FROM students st WHERE st.permanent_address_id <> st.current_address_id; ",
      "SELECT s.first_name FROM students s inner join addresses a on s.permanent_address_id = a.address_id WHERE s.current_address_id != s.permanent_address_id; ",
      "SELECT st.first_name  FROM students st, addresses a  WHERE st.permanent_address_id != st.current_address_id; ",
      "SELECT s.first_name FROM students s INNER JOIN addresses a ON s.permanent_address_id = a.address_id WHERE s.current_address_id != s.permanent_address_id; ",
      "SELECT students.first_name FROM students, addresses WHERE students.permanent_address_id != students.current_address_id;"
    ]
  },
  {
    "id": 561,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "gpt_answers1": [
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id; ",
      "SELECT first_name FROM students WHERE NOT permanent_address_id = current_address_id; ",
      "SELECT first_name FROM students WHERE permanent_address_id != current_address_id; ",
      "SELECT first_name FROM students WHERE permanent_address_id IS NOT current_address_id; ",
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id LIMIT 1; ",
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id ORDER BY student_id ASC LIMIT 1; ",
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id ORDER BY student_id DESC LIMIT 1; ",
      "SELECT first_name FROM students INNER JOIN addresses ON students.permanent_address_id <> addresses.address_id INNER JOIN addresses ON students.current_address_id <> addresses.address_id; ",
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id AND permanent_address_id IN (SELECT address_id FROM addresses) AND current_address_id IN (SELECT address_id FROM addresses); ",
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id AND (permanent_address_id IN (SELECT address_id FROM addresses) OR current_address_id IN (SELECT address_id FROM addresses));"
    ],
    "gpt_answers2": [
      "SELECT first_name FROM students WHERE permanent_address_id != current_address_id;",
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id;",
      "SELECT first_name FROM students WHERE permanent_address_id IS NOT current_address_id;",
      "SELECT s.first_name FROM students s INNER JOIN addresses a ON s.permanent_address_id <> s.current_address_id;",
      "SELECT s.first_name FROM students s, addresses a WHERE s.permanent_address_id != s.current_address_id;",
      "SELECT first_name FROM students WHERE EXISTS (SELECT * FROM addresses WHERE addresses.address_id = students.permanent_address_id AND addresses.address_id != students.current_address_id);",
      "SELECT first_name FROM students s INNER JOIN addresses a ON s.permanent_address_id != s.current_address_id AND s.current_address_id = a.address_id;",
      "SELECT s.first_name FROM students s, addresses a WHERE s.permanent_address_id != s.current_address_id AND s.current_address_id = a.address_id;",
      "SELECT s.first_name FROM students s JOIN addresses a ON s.permanent_address_id != s.current_address_id AND s.current_address_id = a.address_id;",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE address_id != current_address_id);"
    ],
    "gpt_answers3": [
      "SELECT first_name FROM students WHERE permanent_address_id <> current_address_id LIMIT 1;",
      "SELECT first_name FROM students WHERE permanent_address_id != current_address_id LIMIT 1;",
      "SELECT first_name FROM students WHERE permanent_address_id IS NOT current_address_id LIMIT 1;",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id <> students.current_address_id LIMIT 1;",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id != students.current_address_id LIMIT 1;",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id IS NOT students.current_address_id LIMIT 1;",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE address_id <> current_address_id) LIMIT 1;",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE address_id != current_address_id) LIMIT 1;",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE address_id IS NOT current_address_id) LIMIT 1;",
      "SELECT first_name FROM students WHERE EXISTS (SELECT * FROM addresses WHERE address_id <> current_address_id) LIMIT 1;"
    ]
  },
  {
    "id": 562,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s1 ON s1.current_address_id = a.address_id LEFT JOIN students s2 ON s2.current_address_id = a.address_id AND s2.student_id > s1.student_id WHERE s2.student_id IS NULL; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a WHERE a.address_id IN ( SELECT s.current_address_id FROM students s GROUP BY s.current_address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1 ); ",
      "WITH addresses_students AS ( SELECT a.address_id, COUNT(s.student_id) AS student_count FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ) SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN addresses_students as ON a.address_id = as.address_id ORDER BY as.student_count DESC LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN ( SELECT s.current_address_id, COUNT(s.student_id) AS student_count FROM students s GROUP BY s.current_address_id ) as ON a.address_id = as.current_address_id ORDER BY as.student_count DESC LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 HAVING COUNT(s.student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(s.student_id) AS student_count FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ) as ); ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 HAVING COUNT(s.student_id) = ( SELECT COUNT(s.student_id) AS student_count FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ORDER BY student_count DESC LIMIT 1 ); ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 ORDER BY COUNT(s.student_id) DESC LIMIT 1; ",
      "SELECT a1.address_id, a1.line_1, a1.line_2, a1.line_3 FROM addresses a1 LEFT JOIN addresses a2 ON a2.address_id = a1.address_id AND a1.address_id < a2.address_id INNER JOIN students s ON s.current_address_id = a1.address_id WHERE a2.address_id IS NULL GROUP BY a1.address_id, a1.line_1, a1.line_2, a1.line_3 HAVING COUNT(s.student_id) = ( SELECT COUNT(s.student_id) AS student_count FROM students s INNER JOIN addresses a ON s.current_address_id = a.address_id GROUP BY a.address_id ORDER BY student_count DESC LIMIT 1 ); ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 HAVING COUNT(s.student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(s.student_id) AS student_count FROM addresses a INNER JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ) as );"
    ],
    "gpt_answers2": [
      "SELECT address_id, line_1, line_2, line_3 FROM addresses WHERE address_id IN ( SELECT current_address_id FROM students GROUP BY current_address_id HAVING COUNT(student_id) = ( SELECT MAX(student_count) FROM ( SELECT current_address_id, COUNT(student_id) AS student_count FROM students GROUP BY current_address_id ) ) ) ",
      "SELECT address_id, line_1, line_2, line_3 FROM addresses WHERE address_id IN ( SELECT current_address_id FROM students GROUP BY current_address_id HAVING COUNT(student_id) = ( SELECT COUNT(student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) ) ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id HAVING COUNT(s.student_id) = ( SELECT COUNT(student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) ",
      "SELECT address_id, line_1, line_2, line_3 FROM ( SELECT a.address_id, a.line_1, a.line_2, a.line_3, COUNT(s.student_id) AS student_count FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC ) LIMIT 1 ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id HAVING COUNT(s.student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(s.student_id) AS student_count FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ) ) ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 HAVING COUNT(s.student_id) = ( SELECT COUNT(student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) ",
      "SELECT address_id, line_1, line_2, line_3 FROM addresses WHERE address_id = ( SELECT current_address_id FROM students GROUP BY current_address_id HAVING COUNT(student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(student_id) AS student_count FROM students GROUP BY current_address_id ) ) ) ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id HAVING COUNT(s.student_id) = ( SELECT MAX(student_count) FROM ( SELECT a.address_id, COUNT(s.student_id) AS student_count FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ) ) ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 HAVING COUNT(s.student_id) = ( SELECT COUNT(student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) ",
      "SELECT address_id, line_1, line_2, line_3 FROM ( SELECT a.address_id, a.line_1, a.line_2, a.line_3, COUNT(s.student_id) AS student_count FROM addresses a JOIN students s ON s.current_address_id = a.address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC ) LIMIT 1"
    ],
    "gpt_answers3": [
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a WHERE EXISTS (SELECT 1 FROM students s WHERE s.current_address_id = a.address_id) ORDER BY (SELECT COUNT(*) FROM students s WHERE s.current_address_id = a.address_id) DESC LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id HAVING COUNT(s.student_id) = (SELECT COUNT(student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1) LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a INNER JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 HAVING COUNT(DISTINCT s.student_id) = (SELECT COUNT(DISTINCT student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(DISTINCT student_id) DESC LIMIT 1) LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a WHERE a.address_id = (SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1); ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a, students s WHERE a.address_id = s.current_address_id GROUP BY a.address_id HAVING COUNT(s.student_id) = (SELECT COUNT(student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1) LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a, students s WHERE a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 HAVING COUNT(DISTINCT s.student_id) = (SELECT COUNT(DISTINCT student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(DISTINCT student_id) DESC LIMIT 1) LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a LEFT JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id HAVING COUNT(s.student_id) = (SELECT COUNT(student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1) LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a LEFT JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 HAVING COUNT(DISTINCT s.student_id) = (SELECT COUNT(DISTINCT student_id) FROM students GROUP BY current_address_id ORDER BY COUNT(DISTINCT student_id) DESC LIMIT 1) LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM addresses a WHERE a.address_id = (SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1);"
    ]
  },
  {
    "id": 563,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses INNER JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses INNER JOIN students ON students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses INNER JOIN students ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses WHERE addresses.address_id IN ( SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) OR addresses.address_id IN ( SELECT permanent_address_id FROM students GROUP BY permanent_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses WHERE addresses.address_id = ( SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ) OR addresses.address_id = ( SELECT permanent_address_id FROM students GROUP BY permanent_address_id ORDER BY COUNT(student_id) DESC LIMIT 1 ); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 HAVING COUNT(students.student_id) = ( SELECT MAX(student_count) FROM ( SELECT addresses.address_id, COUNT(students.student_id) AS student_count FROM addresses JOIN students ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ) ); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id HAVING COUNT(students.student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(students.student_id) AS student_count FROM addresses JOIN students ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ) ); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(DISTINCT students.student_id) DESC LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id HAVING COUNT(DISTINCT students.student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(DISTINCT students.student_id) AS student_count FROM addresses JOIN students ON students.current_address_id = addresses.address_id OR students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ) ); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN ( SELECT current_address_id UNION ALL SELECT permanent_address_id FROM students ) AS student_addresses ON student_addresses.current_address_id = addresses.address_id GROUP BY addresses.address_id HAVING COUNT(student_addresses.current_address_id) = ( SELECT MAX(address_count) FROM ( SELECT COUNT(student_addresses.current_address_id) AS address_count FROM addresses JOIN ( SELECT current_address_id UNION ALL SELECT permanent_address_id FROM students ) AS student_addresses ON student_addresses.current_address_id = addresses.address_id GROUP BY addresses.address_id ) );"
    ],
    "gpt_answers2": [
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  INNER JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(*) DESC  LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  INNER JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(students.student_id) DESC  LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(*) DESC  LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM students GROUP BY permanent_address_id) AS temp); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id, addresses.line_1, addresses.line_2  HAVING COUNT(*) = (SELECT COUNT(*) FROM students GROUP BY permanent_address_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  HAVING COUNT(addresses.address_id) = (SELECT COUNT(addresses.address_id) FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(*) DESC  LIMIT 1); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  WHERE addresses.address_id = (SELECT permanent_address_id FROM students  GROUP BY permanent_address_id  ORDER BY COUNT(*) DESC  LIMIT 1); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  WHERE addresses.address_id IN (SELECT permanent_address_id FROM students  GROUP BY permanent_address_id  HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM students GROUP BY permanent_address_id) AS temp)) LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  WHERE addresses.address_id = (SELECT permanent_address_id FROM students  GROUP BY permanent_address_id  HAVING COUNT(*) IN (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM students GROUP BY permanent_address_id) AS temp)); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  WHERE addresses.address_id = (SELECT permanent_address_id FROM students  GROUP BY permanent_address_id  ORDER BY COUNT(DISTINCT students.student_id) DESC  LIMIT 1);"
    ],
    "gpt_answers3": [
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(students.student_id) DESC  LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2  FROM addresses a  JOIN students s ON s.permanent_address_id = a.address_id  GROUP BY a.address_id  HAVING COUNT(s.student_id) = (SELECT COUNT(student_id)  FROM students  GROUP BY permanent_address_id  ORDER BY COUNT(student_id) DESC  LIMIT 1); ",
      "SELECT address_id, line_1, line_2  FROM addresses  WHERE address_id IN (SELECT permanent_address_id  FROM students  GROUP BY permanent_address_id  ORDER BY COUNT(student_id) DESC  LIMIT 1); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  LEFT JOIN students ON addresses.address_id = students.permanent_address_id  GROUP BY addresses.address_id  ORDER BY COUNT(students.student_id) DESC  LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2  FROM addresses a  JOIN students s ON s.permanent_address_id = a.address_id  GROUP BY a.address_id  HAVING COUNT(s.student_id) = (SELECT COUNT(student_id)  FROM students  WHERE permanent_address_id = a.address_id  GROUP BY permanent_address_id  ORDER BY COUNT(student_id) DESC  LIMIT 1); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM students  LEFT JOIN addresses ON students.permanent_address_id = addresses.address_id  GROUP BY students.permanent_address_id  ORDER BY COUNT(students.student_id) DESC  LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2  FROM addresses a  JOIN students s ON s.permanent_address_id = a.address_id  GROUP BY a.address_id  ORDER BY COUNT(s.student_id) DESC  LIMIT 1; ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM students  LEFT JOIN addresses ON students.permanent_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(students.student_id) DESC  LIMIT 1; ",
      "SELECT a.address_id, a.line_1, a.line_2  FROM addresses a  JOIN students s ON s.permanent_address_id = a.address_id  GROUP BY a.address_id  HAVING COUNT(*) = (SELECT COUNT(*)  FROM students  GROUP BY permanent_address_id  ORDER BY COUNT(*) DESC  LIMIT 1); ",
      "SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON addresses.address_id = students.permanent_address_id  GROUP BY addresses.address_id  HAVING COUNT(*) = (SELECT MAX(count)  FROM (SELECT COUNT(*) as count  FROM students  GROUP BY permanent_address_id)  AS counts);"
    ]
  },
  {
    "id": 572,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT COUNT(*) as max_enrollment, SEC.course_id as course_enrollment_id FROM (SELECT student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM student_enrolment_courses GROUP BY student_enrolment_id)) SEC GROUP BY SEC.course_id; ",
      "SELECT MAX(enrollment_count) as max_enrollment, SEC.course_id as course_enrollment_id FROM (SELECT student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id, COUNT(*) as enrollment_count FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id) SEC GROUP BY SEC.course_id ORDER BY max_enrollment DESC LIMIT 1; ",
      "SELECT MAX(SEC.enrollment_count) as max_enrollment, SEC.course_id as course_enrollment_id FROM (SELECT student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id, COUNT(*) as enrollment_count FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id ORDER BY enrollment_count DESC) SEC GROUP BY SEC.course_id LIMIT 1; ",
      "SELECT COUNT(*) as max_enrollment, student_enrolment_courses.course_id as course_enrollment_id FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(*) as enrollment_count FROM student_enrolment_courses GROUP BY student_enrolment_id) SEC); ",
      "SELECT COUNT(*) as max_enrollment, student_enrolment_courses.course_id as course_enrollment_id FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id WHERE student_enrolment_courses.student_enrolment_id IN (SELECT student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_id HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(*) as enrollment_count FROM student_enrolment_courses GROUP BY student_enrolment_id) SEC)) GROUP BY student_enrolment_courses.course_id; ",
      "SELECT COUNT(*) as max_enrollment, student_enrolment_courses.course_id as course_enrollment_id FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id WHERE student_enrolment_courses.student_enrolment_id IN (SELECT student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_id HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(*) as enrollment_count FROM student_enrolment_courses GROUP BY student_enrolment_id) SEC) ORDER BY enrollment_count DESC) GROUP BY student_enrolment_courses.course_id; ",
      "SELECT COUNT(*) as max_enrollment, student_enrolment_courses.course_id as course_enrollment_id FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id HAVING COUNT(*) = (SELECT enrollment_count FROM (SELECT COUNT(*) as enrollment_count FROM student_enrolment_courses  GROUP BY student_enrolment_id  ORDER BY enrollment_count DESC  LIMIT 1) SEC); ",
      "SELECT COUNT(*) as max_enrollment, student_enrolment_courses.course_id as course_enrollment_id FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id WHERE student_enrolment_courses.student_enrolment_id IN (SELECT student_enrolment_id FROM student_enrolment_courses  GROUP BY student_enrolment_id  HAVING COUNT(*) = (SELECT enrollment_count FROM  (SELECT COUNT(*) as enrollment_count FROM student_enrolment_courses  GROUP BY student_enrolment_id  ORDER BY enrollment_count DESC  LIMIT 1) SEC)) GROUP BY student_enrolment_courses.course_id; ",
      "SELECT MAX(SEC.enrollment_count) as max_enrollment, SEC.course_id as course_enrollment_id FROM (SELECT student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id, COUNT(*) as enrollment_count FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id) SEC GROUP BY SEC.course_id ORDER BY max_enrollment DESC LIMIT 1; ",
      "SELECT MAX(SEC.enrollment_count) as max_enrollment, SEC.course_id as course_enrollment_id FROM (SELECT student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id, COUNT(*) as enrollment_count FROM student_enrolment_courses INNER JOIN transcripts ON student_enrolment_courses.student_enrolment_id = transcripts.transcript_id GROUP BY student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id ORDER BY enrollment_count DESC) SEC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) AS max_enrollment_result, sec.course_id, sec.student_enrolment_id FROM ( SELECT course_id, student_enrolment_courses.student_enrolment_id FROM student_enrolment_courses GROUP BY course_id, student_enrolment_courses.student_enrolment_id ) AS sec JOIN transcripts t ON t.student_enrolment_id = sec.student_enrolment_id GROUP BY sec.course_id, sec.student_enrolment_id ORDER BY max_enrollment_result DESC LIMIT 1; ",
      "SELECT MAX(cnt) AS max_enrollment_result, course_id, student_enrolment_id FROM ( SELECT COUNT(*) AS cnt, course_id, student_enrolment_id FROM student_enrolment_courses GROUP BY course_id, student_enrolment_id ) AS sec JOIN transcripts t ON t.student_enrolment_id = sec.student_enrolment_id GROUP BY course_id, student_enrolment_id ORDER BY max_enrollment_result DESC LIMIT 1; ",
      "SELECT COUNT(*) AS max_enrollment_result, course_id, student_enrolment_id FROM student_enrolment_courses INNER JOIN transcripts ON transcripts.student_enrolment_id = student_enrolment_courses.student_enrolment_id GROUP BY course_id, student_enrolment_id ORDER BY max_enrollment_result DESC LIMIT 1; ",
      "SELECT MAX(enrollment_count) AS max_enrollment_result, course_id, student_enrolment_id FROM ( SELECT COUNT(*) AS enrollment_count, course_id, student_enrolment_id FROM student_enrolment_courses GROUP BY course_id, student_enrolment_id ) AS sec JOIN student_enrolment ON student_enrolment.student_enrolment_id = sec.student_enrolment_id JOIN transcripts ON transcripts.transcript_id = student_enrolment.transcript_id GROUP BY course_id, student_enrolment_id ORDER BY max_enrollment_result DESC LIMIT 1; ",
      "SELECT MAX(cnt) AS max_enrollment_result, course_id, student_enrolment_id FROM ( SELECT COUNT(*) AS cnt, course_id, student_enrolment_id FROM student_enrolment_courses GROUP BY course_id, student_enrolment_id ) AS sec JOIN student_enrolment ON student_enrolment.student_enrolment_id = sec.student_enrolment_id JOIN transcripts ON transcripts.transcript_id = student_enrolment.transcript_id GROUP BY course_id, student_enrolment_id ORDER BY max_enrollment_result DESC LIMIT 1; ",
      "SELECT COUNT(*) AS max_enrollment_result, course_id, student_enrolment_id FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON transcripts.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY course_id, student_enrolment_id ORDER BY max_enrollment_result DESC LIMIT 1; ",
      "SELECT MAX(cnt) AS max_enrollment_result, course_id, student_enrolment_id FROM ( SELECT COUNT(*) AS cnt, course_id, student_enrolment_id FROM student_enrolment_courses GROUP BY course_id, student_enrolment_id ) AS sec JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON transcripts.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY course_id, student_enrolment_id ORDER BY max_enrollment_result DESC LIMIT 1; ",
      "SELECT max(enrollment_count) AS max_enrollment_result, sec.course_id, sec.student_enrolment_id FROM ( SELECT student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id, COUNT(*) AS enrollment_count FROM student_enrolment_courses GROUP BY student_enrolment_courses.course_id, student_enrolment_courses.student_enrolment_id ) AS sec JOIN student_enrolment ON student_enrolment.student_enrolment_id = sec.student_enrolment_id JOIN transcripts ON transcripts.transcript_id = student_enrolment.transcript_id GROUP BY sec.course_id, sec.student_enrolment_id ORDER BY max_enrollment_result DESC LIMIT 1; ",
      "SELECT COUNT(*) AS max_enrollment_result, course_id, student_enrolment_id FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON transcripts.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY course_id, student_enrolment_id HAVING MAX(max_enrollment_result) LIMIT 1; ",
      "SELECT COUNT(*) AS max_enrollment_result, course_id, student_enrolment_id FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON transcripts.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY course_id, student_enrolment_id HAVING max_enrollment_result = (SELECT MAX(max_enrollment_result) FROM (SELECT COUNT(*) AS max_enrollment_result FROM student_enrolment_courses GROUP BY course_id, student_enrolment_id) AS temp) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) as max_enrollment_count, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.course_id  ORDER BY max_enrollment_count DESC  LIMIT 1; ",
      "SELECT MAX(enrollment_count) as max_enrollment_count, student_enrolment_courses.student_enrolment_id  FROM  (SELECT COUNT(*) as enrollment_count, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.course_id) t; ",
      "SELECT COUNT(*) as max_enrollment_count, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id  ORDER BY max_enrollment_count DESC  LIMIT 1; ",
      "SELECT MAX(enrollment_count) as max_enrollment_count, student_enrolment_courses.student_enrolment_id  FROM  (SELECT COUNT(*) as enrollment_count, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id) t; ",
      "SELECT COUNT(*) as max_enrollment_count, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.course_id  HAVING COUNT(*) = (SELECT MAX(enrollment_count)  FROM (SELECT COUNT(*) as enrollment_count  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.course_id) t); ",
      "SELECT MAX(enrollment_count) as max_enrollment_count, student_enrolment_courses.student_enrolment_id  FROM  (SELECT COUNT(*) as enrollment_count, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.course_id) t  HAVING MAX(enrollment_count) = (SELECT MAX(enrollment_count)  FROM (SELECT COUNT(*) as enrollment_count  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.course_id) t); ",
      "SELECT COUNT(*) as max_enrollment_count, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id  HAVING COUNT(*) = (SELECT MAX(enrollment_count)  FROM (SELECT COUNT(*) as enrollment_count  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id) t); ",
      "SELECT MAX(enrollment_count) as max_enrollment_count, student_enrolment_courses.student_enrolment_id  FROM  (SELECT COUNT(*) as enrollment_count, student_enrolment_courses.student_enrolment_id  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id) t  HAVING MAX(enrollment_count) = (SELECT MAX(enrollment_count)  FROM (SELECT COUNT(*) as enrollment_count  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id) t); ",
      "SELECT COUNT(*) as max_enrollment_count, student_enrolment_id  FROM  (SELECT student_enrolment_courses.student_enrolment_id, COUNT(*) as enrollment_count  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id) t  GROUP BY student_enrolment_id  ORDER BY enrollment_count DESC  LIMIT 1; ",
      "SELECT COUNT(*) as max_enrollment_count, student_enrolment_id  FROM  (SELECT student_enrolment_courses.student_enrolment_id, COUNT(*) as enrollment_count  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id) t  GROUP BY student_enrolment_id  HAVING COUNT(*) = (SELECT MAX(enrollment_count)  FROM (SELECT student_enrolment_courses.student_enrolment_id, COUNT(*) as enrollment_count  FROM student_enrolment_courses  GROUP BY student_enrolment_courses.student_enrolment_id) t);"
    ]
  },
  {
    "id": 573,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT course_id, COUNT(course_id) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id ORDER BY num_transcripts DESC LIMIT 1; ",
      "SELECT course_id, COUNT(*) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id ORDER BY num_transcripts DESC LIMIT 1; ",
      "SELECT course_id, COUNT(*) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id HAVING num_transcripts = (SELECT MAX(count) FROM (SELECT course_id, COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id)); ",
      "SELECT course_id, COUNT(course_id) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id HAVING num_transcripts = (SELECT MAX(num_transcripts) FROM (SELECT COUNT(course_id) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id)); ",
      "SELECT course_id, COUNT(course_id) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(course_id) = (SELECT MAX(num_transcripts) FROM (SELECT COUNT(course_id) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id)); ",
      "SELECT course_id, COUNT(course_id) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id HAVING num_transcripts = (SELECT COUNT(*) FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT course_id, COUNT(*) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id HAVING num_transcripts = (SELECT num_transcripts FROM (SELECT course_id, COUNT(*) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id ORDER BY num_transcripts DESC LIMIT 1) AS T); ",
      "SELECT course_id, COUNT(course_id) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id HAVING num_transcripts = (SELECT COUNT(*) FROM (SELECT course_id, COUNT(course_id) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id ORDER BY num_transcripts DESC) AS T LIMIT 1); ",
      "SELECT course_id, COUNT(*) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id HAVING num_transcripts = (SELECT MAX(num_transcripts) FROM (SELECT COUNT(*) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id) AS T); ",
      "SELECT course_id, COUNT(*) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id HAVING num_transcripts = (SELECT MAX(num_transcripts) FROM (SELECT course_id, COUNT(*) AS num_transcripts FROM student_enrolment_courses GROUP BY course_id) AS T LIMIT 1);"
    ],
    "gpt_answers2": [
      "SELECT course_id, COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id ORDER BY course_count DESC LIMIT 1;",
      "SELECT sec.course_id, COUNT(*) AS course_count FROM (SELECT DISTINCT course_id, student_enrolment_id FROM student_enrolment_courses) sec GROUP BY sec.course_id ORDER BY course_count DESC LIMIT 1;",
      "SELECT course_id, COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id) sub);",
      "SELECT course_id, COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM (SELECT DISTINCT course_id, student_enrolment_id FROM student_enrolment_courses) sub GROUP BY sub.course_id) sub2);",
      "SELECT course_id, COUNT(*) AS course_count FROM (SELECT DISTINCT course_id, student_enrolment_id FROM student_enrolment_courses) sub GROUP BY sub.course_id HAVING course_count = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM (SELECT DISTINCT course_id, student_enrolment_id FROM student_enrolment_courses) sub GROUP BY sub.course_id) sub2);",
      "SELECT course_id, COUNT(*) AS course_count FROM (SELECT DISTINCT course_id, student_enrolment_id FROM student_enrolment_courses) sub GROUP BY sub.course_id ORDER BY course_count DESC LIMIT 1;",
      "SELECT course_id, COUNT(DISTINCT transcript_id) AS transcript_count FROM student_enrolment_courses GROUP BY course_id ORDER BY transcript_count DESC LIMIT 1;",
      "SELECT sec.course_id, COUNT(DISTINCT sec.transcript_id) AS transcript_count FROM (SELECT DISTINCT transcript_id, course_id, student_enrolment_id FROM student_enrolment_courses) sec GROUP BY sec.course_id ORDER BY transcript_count DESC LIMIT 1;",
      "SELECT course_id, COUNT(DISTINCT transcript_id) AS transcript_count FROM (SELECT DISTINCT transcript_id, course_id, student_enrolment_id FROM student_enrolment_courses) sub GROUP BY sub.course_id HAVING transcript_count = (SELECT MAX(transcript_count) FROM (SELECT COUNT(DISTINCT transcript_id) AS transcript_count FROM (SELECT DISTINCT transcript_id, course_id, student_enrolment_id FROM student_enrolment_courses) sub GROUP BY sub.course_id) sub2);",
      "SELECT course_id, COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id HAVING course_count = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id) sub) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT MAX(count), course_id FROM (SELECT COUNT(*) AS count, course_id FROM student_enrolment_courses GROUP BY course_id) AS s;",
      "SELECT MAX(course_count) AS max_count, course_id FROM (SELECT course_id, COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id) AS c;",
      "SELECT MAX(course_count) AS max_count, course_id FROM (SELECT course_id, COUNT(*) AS course_count FROM student_enrolment_courses GROUP BY course_id) AS c GROUP BY course_id;",
      "SELECT COUNT(*) AS count, course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY count DESC LIMIT 1;",
      "SELECT course_id, COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id HAVING count = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id));",
      "SELECT course_id, COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id ORDER BY count DESC LIMIT 1;",
      "SELECT course_id, COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id HAVING count = (SELECT COUNT(*) FROM student_enrolment_courses GROUP BY course_id ORDER BY count DESC LIMIT 1);",
      "SELECT course_id, COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id HAVING count = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id) AS s);",
      "SELECT course_id, COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id ORDER BY count DESC LIMIT 1 OFFSET 0;",
      "SELECT course_id, MAX(count) AS max_count FROM (SELECT course_id, COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id) AS s;"
    ]
  },
  {
    "id": 574,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "gpt_answers1": [
      "SELECT transcript_date, transcript_id FROM transcripts ORDER BY transcript_id LIMIT 1;",
      "SELECT transcript_date, transcript_id FROM transcripts ORDER BY transcript_id ASC LIMIT 1;",
      "SELECT transcript_date, transcript_id FROM transcripts ORDER BY transcript_id ASC FETCH FIRST 1 ROWS ONLY;",
      "SELECT transcript_date, transcript_id FROM transcripts ORDER BY transcript_id ASC FETCH NEXT 1 ROWS ONLY;",
      "SELECT transcript_date, transcript_id FROM transcripts ORDER BY transcript_id ASC OFFSET 0 LIMIT 1;",
      "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (SELECT MIN(transcript_id) FROM transcripts);",
      "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcripts ORDER BY transcript_id ASC LIMIT 1);",
      "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcripts ORDER BY transcript_id ASC FETCH FIRST 1 ROWS ONLY);",
      "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcripts ORDER BY transcript_id ASC FETCH NEXT 1 ROWS ONLY);",
      "SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcripts ORDER BY transcript_id ASC OFFSET 0 LIMIT 1);"
    ],
    "gpt_answers2": [
      "SELECT transcript_id, transcript_date FROM transcripts ORDER BY transcript_id ASC LIMIT 1; ",
      "SELECT transcript_id, transcript_date FROM transcripts GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(result_count) FROM (SELECT transcript_id, COUNT(*) as result_count FROM transcript_contents GROUP BY transcript_id)); ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(*) = MIN(COUNT(*))); ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM transcript_contents GROUP BY transcript_id)); ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT COUNT(*) FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)); ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT COUNT(*) FROM transcript_contents GROUP BY transcript_id LIMIT 1)); ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(C) FROM (SELECT COUNT(*) AS C FROM transcript_contents GROUP BY transcript_id))); ",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id LIMIT 1); ",
      "SELECT transcript_id, transcript_date FROM (SELECT transcript_id, COUNT(*) as result_count FROM transcript_contents GROUP BY transcript_id) AS counts JOIN transcripts ON transcripts.transcript_id = counts.transcript_id WHERE result_count = (SELECT MIN(result_count) FROM (SELECT transcript_id, COUNT(*) as result_count FROM transcript_contents GROUP BY transcript_id));"
    ],
    "gpt_answers3": [
      "SELECT transcript_id, transcript_date FROM transcripts ORDER BY transcript_id ASC LIMIT 1;",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1);",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(*) = (SELECT MIN(transcript_count) FROM (SELECT COUNT(*) as transcript_count FROM transcript_contents GROUP BY transcript_id)));",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY);",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM (SELECT transcript_id, COUNT(*) as transcript_count FROM transcript_contents GROUP BY transcript_id) AS temp_table ORDER BY transcript_count ASC LIMIT 1);",
      "SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = (SELECT transcript_id FROM (SELECT transcript_id, COUNT(*) as transcript_count FROM transcript_contents GROUP BY transcript_id) AS temp_table WHERE transcript_count = (SELECT MIN(transcript_count) FROM (SELECT transcript_id, COUNT(*) as transcript_count FROM transcript_contents GROUP BY transcript_id))));",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id = (SELECT transcript_id  FROM (SELECT transcript_id, COUNT(*) as transcript_count  FROM transcript_contents  GROUP BY transcript_id ) AS temp_table  ORDER BY transcript_count ASC  LIMIT 1);",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN (SELECT transcript_id  FROM transcript_contents  GROUP BY transcript_id  ORDER BY COUNT(*) ASC  LIMIT 1);",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN (SELECT transcript_id  FROM transcript_contents  GROUP BY transcript_id  HAVING COUNT(*) = (SELECT MIN(result_count)  FROM (SELECT COUNT(*) as result_count  FROM transcript_contents  GROUP BY transcript_id ) AS temp_table));",
      "SELECT transcript_id, transcript_date  FROM transcripts  WHERE transcript_id IN (SELECT transcript_id FROM (SELECT transcript_id, COUNT(*) as result_count  FROM transcript_contents  GROUP BY transcript_id) AS temp_table  WHERE result_count = (SELECT MIN(result_count)  FROM (SELECT COUNT(*) as result_count  FROM transcript_contents  GROUP BY transcript_id) AS temp_table));"
    ]
  },
  {
    "id": 576,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "gpt_answers1": [
      "SELECT semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = \"Master\" INTERSECT SELECT semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = \"Bachelor\"; ",
      "SELECT semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name IN (\"Master\", \"Bachelor\") GROUP BY semester_name HAVING COUNT(DISTINCT degree_summary_name) = 2; ",
      "SELECT semester_name FROM semesters WHERE semester_id IN ( SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = \"Master\" ) AND semester_id IN ( SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = \"Bachelor\" ); ",
      "SELECT semester_name FROM semesters WHERE semester_id IN ( SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name LIKE \"Mas%\" ) AND semester_id IN ( SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name LIKE \"Bach%\" ); ",
      "SELECT semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = \"Master\" OR degree_summary_name = \"Bachelor\" ) GROUP BY semester_name HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2; ",
      "SELECT semester_name FROM semesters JOIN student_enrolment AS se1 ON semesters.semester_id = se1.semester_id JOIN student_enrolment AS se2 ON semesters.semester_id = se2.semester_id JOIN degree_programs AS dp1 ON se1.degree_program_id = dp1.degree_program_id JOIN degree_programs AS dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp1.degree_summary_name = \"Master\" AND dp2.degree_summary_name = \"Bachelor\"; ",
      "SELECT s1.semester_name FROM semesters AS s1 JOIN student_enrolment AS se1 ON s1.semester_id = se1.semester_id JOIN degree_programs AS dp1 ON se1.degree_program_id = dp1.degree_program_id WHERE dp1.degree_summary_name = \"Master\" AND EXISTS ( SELECT s2.semester_id FROM semesters AS s2 JOIN student_enrolment AS se2 ON s2.semester_id = se2.semester_id JOIN degree_programs AS dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp2.degree_summary_name = \"Bachelor\" AND s2.semester_id = s1.semester_id ); ",
      "SELECT semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name IN ( SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name HAVING COUNT(*) > 1 ); ",
      "SELECT semester_name FROM semesters WHERE EXISTS ( SELECT 1 FROM student_enrolment AS se1 JOIN degree_programs AS dp1 ON se1.degree_program_id = dp1.degree_program_id WHERE se1.semester_id = semesters.semester_id AND dp1.degree_summary_name = \"Master\" ) AND EXISTS ( SELECT 1 FROM student_enrolment AS se2 JOIN degree_programs AS dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE se2.semester_id = semesters.semester_id AND dp2.degree_summary_name = \"Bachelor\" ); ",
      "SELECT semester_name FROM semesters JOIN student_enrolment AS se ON semesters.semester_id = se.semester_id JOIN degree_programs AS dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = \"Master\" OR dp.degree_summary_name = \"Bachelor\" GROUP BY semester_name HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;"
    ],
    "gpt_answers2": [
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name = \"Master\" INTERSECT SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name = \"Bachelor\" ",
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name IN (\"Master\", \"Bachelor\") GROUP BY semesters.semester_name HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2 ",
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY semesters.semester_name HAVING SUM(CASE WHEN degree_programs.degree_summary_name = \"Master\" THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN degree_programs.degree_summary_name = \"Bachelor\" THEN 1 ELSE 0 END) > 0 ",
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE EXISTS ( SELECT 1 FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subse.semester_id = semesters.semester_id AND subdp.degree_summary_name = \"Master\" )  AND EXISTS ( SELECT 1 FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subse.semester_id = semesters.semester_id AND subdp.degree_summary_name = \"Bachelor\" ) ",
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name = \"Master\" AND EXISTS ( SELECT 1 FROM student_enrolment subse WHERE subse.semester_id = semesters.semester_id AND EXISTS ( SELECT 1 FROM degree_programs subdp WHERE subse.degree_program_id = subdp.degree_program_id AND subdp.degree_summary_name = \"Bachelor\" ) ) ",
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE EXISTS ( SELECT 1 FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subse.semester_id = semesters.semester_id AND subdp.degree_summary_name = \"Master\" )  AND EXISTS ( SELECT 1 FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subse.semester_id = semesters.semester_id AND subdp.degree_summary_name = \"Bachelor\" ) ",
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE EXISTS ( SELECT 1 FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subse.semester_id = semesters.semester_id AND (subdp.degree_summary_name = \"Master\" OR subdp.degree_summary_name = \"Bachelor\") GROUP BY subse.semester_id HAVING COUNT(DISTINCT subdp.degree_summary_name) = 2 ) ",
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE semesters.semester_id IN ( SELECT subse.semester_id FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subdp.degree_summary_name = \"Master\" ) AND semesters.semester_id IN ( SELECT subse.semester_id FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subdp.degree_summary_name = \"Bachelor\" ) ",
      "SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE semesters.semester_id IN ( SELECT subse.semester_id FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subdp.degree_summary_name = \"Master\" ) INTERSECT SELECT semesters.semester_name FROM semesters INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id INNER JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE semesters.semester_id IN ( SELECT subse.semester_id FROM student_enrolment subse INNER JOIN degree_programs subdp ON subse.degree_program_id = subdp.degree_program_id WHERE subdp.degree_summary_name = \"Bachelor\" ) ",
      "SELECT semesters.semester_name FROM semesters CROSS JOIN degree_programs WHERE (degree_programs.degree_summary_name = \"Master\" OR degree_programs.degree_summary_name = \"Bachelor\") AND EXISTS ( SELECT 1 FROM student_enrolment WHERE student_enrolment.semester_id = semesters.semester_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id ) GROUP BY semesters.semester_id HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2"
    ],
    "gpt_answers3": [
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id INNER JOIN degree_programs dp ON dp.degree_program_id = se.degree_program_id WHERE dp.degree_summary_name = 'Master' INTERSECT SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id INNER JOIN degree_programs dp ON dp.degree_program_id = se.degree_program_id WHERE dp.degree_summary_name = 'Bachelor'  ",
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id INNER JOIN degree_programs dp ON dp.degree_program_id = se.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_name HAVING COUNT(DISTINCT dp.degree_summary_name) = 2 ",
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id INNER JOIN degree_programs dp ON dp.degree_program_id = se.degree_program_id WHERE dp.degree_summary_name = 'Master' AND EXISTS ( SELECT 1 FROM student_enrolment se2 INNER JOIN degree_programs dp2 ON dp2.degree_program_id = se2.degree_program_id WHERE dp2.degree_summary_name = 'Bachelor' AND se2.semester_id = se.semester_id AND se2.student_id = se.student_id ) ",
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id INNER JOIN degree_programs dp ON dp.degree_program_id = se.degree_program_id WHERE dp.degree_summary_name = 'Master' AND EXISTS ( SELECT 1 FROM semesters s2 INNER JOIN student_enrolment se2 ON se2.semester_id = s2.semester_id INNER JOIN degree_programs dp2 ON dp2.degree_program_id = se2.degree_program_id WHERE dp2.degree_summary_name = 'Bachelor' AND s2.semester_name = s.semester_name ) ",
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id INNER JOIN degree_programs dp1 ON dp1.degree_program_id = se.degree_program_id INNER JOIN student_enrolment se2 ON se2.semester_id = s.semester_id INNER JOIN degree_programs dp2 ON dp2.degree_program_id = se2.degree_program_id WHERE dp1.degree_summary_name = 'Master' AND dp2.degree_summary_name = 'Bachelor' ",
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se ON se.semester_id = s.semester_id INNER JOIN degree_programs dp1 ON dp1.degree_program_id = se.degree_program_id WHERE dp1.degree_summary_name = 'Master' AND EXISTS ( SELECT 1 FROM student_enrolment se2 INNER JOIN semesters s2 ON s2.semester_id = se2.semester_id INNER JOIN degree_programs dp2 ON dp2.degree_program_id = se2.degree_program_id WHERE dp2.degree_summary_name = 'Bachelor' AND s2.semester_name = s.semester_name AND se2.student_id = se.student_id ) ",
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se1 ON se1.semester_id = s.semester_id INNER JOIN degree_programs dp1 ON dp1.degree_program_id = se1.degree_program_id INNER JOIN student_enrolment se2 ON se2.semester_id = s.semester_id INNER JOIN degree_programs dp2 ON dp2.degree_program_id = se2.degree_program_id WHERE dp1.degree_summary_name = 'Master' AND dp2.degree_summary_name = 'Bachelor' GROUP BY s.semester_name ",
      "SELECT s.semester_name FROM semesters s, student_enrolment se1, degree_programs dp1, student_enrolment se2, degree_programs dp2 WHERE se1.semester_id = s.semester_id AND se1.degree_program_id = dp1.degree_program_id AND dp1.degree_summary_name = 'Master' AND se2.semester_id = s.semester_id AND se2.degree_program_id = dp2.degree_program_id AND dp2.degree_summary_name = 'Bachelor' GROUP BY s.semester_name HAVING COUNT(DISTINCT dp1.degree_summary_name) + COUNT(DISTINCT dp2.degree_summary_name) = 2 ",
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se1 ON se1.semester_id = s.semester_id INNER JOIN degree_programs dp1 ON dp1.degree_program_id = se1.degree_program_id INNER JOIN student_enrolment se2 ON se2.semester_id = s.semester_id INNER JOIN degree_programs dp2 ON dp2.degree_program_id = se2.degree_program_id WHERE (dp1.degree_summary_name = 'Master' OR dp2.degree_summary_name = 'Master') AND (dp1.degree_summary_name = 'Bachelor' OR dp2.degree_summary_name = 'Bachelor') GROUP BY s.semester_name ",
      "SELECT s.semester_name FROM semesters s INNER JOIN student_enrolment se1 ON se1.semester_id = s.semester_id INNER JOIN degree_programs dp1 ON dp1.degree_program_id = se1.degree_program_id WHERE dp1.degree_summary_name = 'Master' AND EXISTS ( SELECT 1 FROM student_enrolment se2 INNER JOIN degree_programs dp2 ON dp2.degree_program_id = se2.degree_program_id WHERE dp2.degree_summary_name = 'Bachelor' AND se2.semester_id = se1.semester_id AND se2.student_id = se1.student_id )"
    ]
  },
  {
    "id": 577,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "gpt_answers1": [
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' OR degree_summary_name = 'Bachelors' ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2; ",
      "SELECT semester_id FROM student_enrolment se INNER JOIN degree_programs dp USING(degree_program_id) WHERE dp.degree_summary_name = 'Masters' AND EXISTS ( SELECT 1 FROM student_enrolment se2 INNER JOIN degree_programs dp2 USING(degree_program_id) WHERE dp2.degree_summary_name = 'Bachelors' AND se2.semester_id = se.semester_id ); ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' ) INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors' ); ",
      "SELECT se.semester_id FROM student_enrolment se INNER JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Masters' AND EXISTS ( SELECT 1 FROM student_enrolment se2 INNER JOIN degree_programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp2.degree_summary_name = 'Bachelors' AND se2.semester_id = se.semester_id ); ",
      "SELECT semester_id FROM student_enrolment se INNER JOIN ( SELECT semester_id, COUNT(DISTINCT degree_summary_name) AS num_degrees FROM student_enrolment INNER JOIN degree_programs USING(degree_program_id) WHERE degree_summary_name IN ('Masters', 'Bachelors') GROUP BY semester_id ) temp ON se.semester_id = temp.semester_id WHERE num_degrees = 2; ",
      "SELECT semester_id FROM student_enrolment se1 INNER JOIN degree_programs dp1 ON se1.degree_program_id = dp1.degree_program_id INNER JOIN student_enrolment se2 ON se1.semester_id = se2.semester_id INNER JOIN degree_programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp1.degree_summary_name = 'Masters' AND dp2.degree_summary_name = 'Bachelors'; ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' ) AND semester_id IN ( SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors' ) ); ",
      "SELECT se1.semester_id FROM student_enrolment se1 INNER JOIN degree_programs dp1 ON se1.degree_program_id = dp1.degree_program_id INNER JOIN student_enrolment se2 ON se1.semester_id = se2.semester_id INNER JOIN degree_programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp1.degree_summary_name = 'Masters' AND dp2.degree_summary_name = 'Bachelors' GROUP BY se1.semester_id; ",
      "SELECT semester_id FROM ( SELECT se1.semester_id, COUNT(DISTINCT dp1.degree_summary_name) AS num_degrees FROM student_enrolment se1 INNER JOIN degree_programs dp1 ON se1.degree_program_id = dp1.degree_program_id INNER JOIN student_enrolment se2 ON se1.semester_id = se2.semester_id INNER JOIN degree_programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp1.degree_summary_name = 'Masters' AND dp2.degree_summary_name = 'Bachelors' GROUP BY se1.semester_id ) temp WHERE num_degrees = 2; ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' OR degree_summary_name = 'Bachelors' ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_summary_name) = 2;"
    ],
    "gpt_answers2": [
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2; ",
      "SELECT semester_id FROM student_enrolment se1 JOIN student_enrolment se2 ON se1.semester_id = se2.semester_id JOIN degree_programs dp1 ON se1.degree_program_id = dp1.degree_program_id AND dp1.degree_summary_name = 'Masters' JOIN degree_programs dp2 ON se2.degree_program_id = dp2.degree_program_id AND dp2.degree_summary_name = 'Bachelors'; ",
      "SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Masters' OR degree_programs.degree_summary_name = 'Bachelors' GROUP BY semester_id HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2; ",
      "SELECT se1.semester_id FROM student_enrolment se1 JOIN student_enrolment se2 ON se1.semester_id = se2.semester_id JOIN degree_programs dp1 ON se1.degree_program_id = dp1.degree_program_id JOIN degree_programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp1.degree_summary_name = 'Masters' AND dp2.degree_summary_name = 'Bachelors'; ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors'); ",
      "SELECT semester_id FROM student_enrolment se1 INNER JOIN student_enrolment se2 ON se1.semester_id = se2.semester_id INNER JOIN degree_programs dp1 ON se1.degree_program_id = dp1.degree_program_id INNER JOIN degree_programs dp2 ON se2.degree_program_id = dp2.degree_program_id WHERE dp1.degree_summary_name = 'Masters' AND dp2.degree_summary_name = 'Bachelors' GROUP BY semester_id; ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors'); ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors')); ",
      "SELECT semester_id FROM student_enrolment JOIN (SELECT semester_id, COUNT(DISTINCT degree_program_id) AS count_programs FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' OR degree_summary_name = 'Bachelors') GROUP BY semester_id) subq ON student_enrolment.semester_id = subq.semester_id WHERE subq.count_programs = 2; ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors')) INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id = (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters'));"
    ],
    "gpt_answers3": [
      "SELECT semester_id FROM student_enrolment GROUP BY semester_id HAVING COUNT(DISTINCT CASE WHEN degree_summary_name = 'Masters' THEN student_id END) > 0 AND COUNT(DISTINCT CASE WHEN degree_summary_name = 'Bachelors' THEN student_id END) > 0; ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Masters', 'Bachelors') ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2; ",
      "SELECT semester_id FROM student_enrolment e1 JOIN degree_programs dp1 ON e1.degree_program_id = dp1.degree_program_id JOIN student_enrolment e2 ON e1.semester_id = e2.semester_id JOIN degree_programs dp2 ON e2.degree_program_id = dp2.degree_program_id WHERE dp1.degree_summary_name = 'Masters' AND dp2.degree_summary_name = 'Bachelors' GROUP BY semester_id; ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' ) INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors' ); ",
      "SELECT semester_id FROM student_enrolment e1, degree_programs dp1 WHERE e1.degree_program_id = dp1.degree_program_id AND dp1.degree_summary_name = 'Masters' AND EXISTS ( SELECT semester_id FROM student_enrolment e2, degree_programs dp2 WHERE e2.degree_program_id = dp2.degree_program_id AND dp2.degree_summary_name = 'Bachelors' AND e2.semester_id = e1.semester_id ); ",
      "SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' INTERSECT SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors' ); ",
      "SELECT semester_id FROM student_enrolment WHERE EXISTS ( SELECT student_id FROM student_enrolment e1 JOIN degree_programs dp1 ON e1.degree_program_id = dp1.degree_program_id WHERE e1.semester_id = student_enrolment.semester_id AND dp1.degree_summary_name = 'Masters' ) AND EXISTS ( SELECT student_id FROM student_enrolment e2 JOIN degree_programs dp2 ON e2.degree_program_id = dp2.degree_program_id WHERE e2.semester_id = student_enrolment.semester_id AND dp2.degree_summary_name = 'Bachelors' ); ",
      "SELECT semester_id FROM student_enrolment e1 JOIN degree_programs dp1 ON e1.degree_program_id = dp1.degree_program_id JOIN student_enrolment e2 ON e1.semester_id = e2.semester_id JOIN degree_programs dp2 ON e2.degree_program_id = dp2.degree_program_id WHERE (dp1.degree_summary_name = 'Masters' AND dp2.degree_summary_name = 'Bachelors') OR (dp1.degree_summary_name = 'Bachelors' AND dp2.degree_summary_name = 'Masters') GROUP BY semester_id; ",
      "SELECT e1.semester_id FROM ( SELECT semester_id, degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id ) e1 JOIN ( SELECT semester_id, degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id ) e2 ON e1.semester_id = e2.semester_id WHERE e1.degree_summary_name = 'Masters' AND e2.degree_summary_name = 'Bachelors'; ",
      "SELECT semester_id FROM student_enrolment WHERE EXISTS ( SELECT 1 FROM student_enrolment e1 JOIN degree_programs dp1 ON e1.degree_program_id = dp1.degree_program_id WHERE e1.semester_id = student_enrolment.semester_id AND dp1.degree_summary_name = 'Masters' ) INTERSECT SELECT semester_id FROM student_enrolment WHERE EXISTS ( SELECT 1 FROM student_enrolment e2 JOIN degree_programs dp2 ON e2.degree_program_id = dp2.degree_program_id WHERE e2.semester_id = student_enrolment.semester_id AND dp2.degree_summary_name = 'Bachelors' );"
    ]
  },
  {
    "id": 579,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
    "gpt_answers1": [
      "SELECT addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses  INNER JOIN students ON addresses.address_id = students.current_address_id INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id ",
      "SELECT a.line_1, a.line_2, a.line_3 FROM addresses AS a  INNER JOIN students AS s1 ON a.address_id = s1.current_address_id INNER JOIN student_enrolment AS se ON s1.student_id = se.student_id ",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3 FROM addresses AS a  INNER JOIN students AS s ON a.address_id = s.current_address_id INNER JOIN student_enrolment AS se ON s.student_id = se.student_id ",
      "SELECT a.line_1, a.line_2, a.line_3 FROM addresses AS a, students AS s, student_enrolment AS se WHERE a.address_id = s.current_address_id AND s.student_id = se.student_id ",
      "SELECT addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses  JOIN students ON addresses.address_id = students.current_address_id JOIN student_enrolment ON students.student_id = student_enrolment.student_id ",
      "SELECT a.line_1, a.line_2, a.line_3 FROM addresses AS a  JOIN students AS s1 ON a.address_id = s1.current_address_id JOIN student_enrolment AS se ON s1.student_id = se.student_id ",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3 FROM addresses AS a  JOIN students AS s ON a.address_id = s.current_address_id JOIN student_enrolment AS se ON s.student_id = se.student_id ",
      "SELECT a.line_1, a.line_2, a.line_3 FROM addresses AS a, students AS s, student_enrolment AS se WHERE a.address_id = s.current_address_id AND s.student_id = se.student_id ",
      "SELECT addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses  JOIN students ON addresses.address_id = students.current_address_id JOIN student_enrolment_courses ON students.student_id = student_enrolment_courses.student_id ",
      "SELECT a.line_1, a.line_2, a.line_3 FROM addresses AS a  JOIN students AS s1 ON a.address_id = s1.current_address_id JOIN student_enrolment_courses AS sec ON s1.student_id = sec.student_id"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses JOIN students ON addresses.address_id = students.current_address_id ",
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses JOIN students ON addresses.address_id = students.permanent_address_id ",
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses WHERE address_id IN ( SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students ) ",
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses WHERE address_id IN ( SELECT current_address_id FROM students ) OR address_id IN ( SELECT permanent_address_id FROM students ) ",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3  FROM addresses a, students s  WHERE a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id ",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3  FROM addresses a  JOIN students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id ",
      "SELECT DISTINCT line_1, line_2, line_3  FROM addresses  WHERE address_id IN ( SELECT current_address_id FROM students ) OR address_id IN ( SELECT permanent_address_id FROM students ) ",
      "SELECT DISTINCT line_1, line_2, line_3  FROM addresses  WHERE address_id IN ( SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students ) ",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3  FROM addresses a  INNER JOIN students s ON a.address_id = s.current_address_id UNION SELECT DISTINCT a.line_1, a.line_2, a.line_3  FROM addresses a  INNER JOIN students s ON a.address_id = s.permanent_address_id ",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3  FROM (SELECT current_address_id AS address_id FROM students UNION SELECT permanent_address_id AS address_id FROM students) AS s JOIN addresses a ON s.address_id = a.address_id;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses INNER JOIN students ON students.current_address_id = addresses.address_id;",
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses INNER JOIN students ON students.permanent_address_id = addresses.address_id;",
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses WHERE address_id IN (SELECT current_address_id FROM students);",
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses WHERE address_id IN (SELECT permanent_address_id FROM students);",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3 FROM addresses a, students s WHERE s.current_address_id = a.address_id;",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3 FROM addresses a, students s WHERE s.permanent_address_id = a.address_id;",
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses, students WHERE students.current_address_id = addresses.address_id;",
      "SELECT DISTINCT line_1, line_2, line_3 FROM addresses, students WHERE students.permanent_address_id = addresses.address_id;",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3 FROM addresses AS a, students AS s WHERE s.current_address_id = a.address_id;",
      "SELECT DISTINCT a.line_1, a.line_2, a.line_3 FROM addresses AS a, students AS s WHERE s.permanent_address_id = a.address_id;"
    ]
  },
  {
    "id": 580,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "gpt_answers1": [
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC, first_name DESC, middle_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC, first_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC, first_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC, first_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC, first_name DESC; ",
      "SELECT first_name, last_name, middle_name  FROM students  ORDER BY last_name DESC;"
    ],
    "gpt_answers2": [
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE NOCASE DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE utf8_general_ci DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE utf8_unicode_ci DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE latin1_general_ci DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE latin1_german2_ci DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE latin1_general_cs DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE latin1_spanish2_ci DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE latin1_swedish_ci DESC; ",
      "SELECT last_name, first_name, middle_name, student_id, email_address, permanent_address_id, current_address_id FROM students ORDER BY last_name COLLATE latin1_italian_ci DESC;"
    ],
    "gpt_answers3": [
      "SELECT * FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name DESC;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name DESC, first_name DESC;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC LIMIT 10;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC LIMIT 20 OFFSET 0;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC LIMIT 10 OFFSET 0;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name, first_name, middle_name DESC;",
      "SELECT last_name, first_name, middle_name FROM students ORDER BY last_name DESC, first_name, middle_name;"
    ]
  },
  {
    "id": 581,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "gpt_answers1": [
      "SELECT last_name, first_name, student_id, middle_name  FROM students  ORDER BY last_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  ORDER BY last_name DESC  LIMIT 10; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  ORDER BY last_name DESC  FETCH NEXT 10 ROWS ONLY; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  ORDER BY last_name DESC  LIMIT 10 OFFSET 0; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  WHERE last_name <= 'Z'  ORDER BY last_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  WHERE last_name >= 'A'  ORDER BY last_name DESC  LIMIT 10; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  WHERE last_name BETWEEN 'A' AND 'Z'  ORDER BY last_name DESC  LIMIT 10; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  WHERE last_name LIKE '%' ORDER BY last_name DESC  LIMIT 10; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  ORDER BY last_name DESC, first_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name  FROM students  ORDER BY last_name DESC, first_name DESC  LIMIT 10;"
    ],
    "gpt_answers2": [
      "SELECT * FROM students ORDER BY last_name DESC;",
      "SELECT last_name, first_name, student_id FROM students ORDER BY last_name DESC;",
      "SELECT last_name, first_name, student_id, middle_name FROM students ORDER BY last_name DESC;",
      "SELECT last_name, first_name, student_id, other_student_details FROM students ORDER BY last_name DESC;",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details FROM students ORDER BY last_name DESC;",
      "SELECT * FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY last_name DESC;",
      "SELECT * FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.last_name DESC;",
      "SELECT * FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.last_name DESC LIMIT 10;",
      "SELECT students.last_name, students.first_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.last_name DESC LIMIT 10;",
      "SELECT students.last_name, students.first_name, students.student_id, students.middle_name, students.other_student_details FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.last_name DESC LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  ORDER BY last_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  ORDER BY last_name DESC, first_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  ORDER BY last_name DESC, first_name DESC, student_id DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  ORDER BY last_name DESC, first_name DESC, student_id DESC, middle_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  ORDER BY last_name DESC, first_name DESC, student_id DESC, middle_name DESC, other_student_details DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  WHERE last_name IS NOT NULL  ORDER BY last_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  WHERE last_name IS NOT NULL  ORDER BY last_name DESC, first_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  WHERE last_name IS NOT NULL  ORDER BY last_name DESC, first_name DESC, student_id DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  WHERE last_name IS NOT NULL  ORDER BY last_name DESC, first_name DESC, student_id DESC, middle_name DESC; ",
      "SELECT last_name, first_name, student_id, middle_name, other_student_details  FROM students  WHERE last_name IS NOT NULL  ORDER BY last_name DESC, first_name DESC, student_id DESC, middle_name DESC, other_student_details DESC;"
    ]
  },
  {
    "id": 582,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "gpt_answers1": [
      "SELECT section_name, section_description FROM sections WHERE section_name = 'h';",
      "SELECT * FROM sections WHERE section_name = 'h' AND section_description = 'description of section h';",
      "SELECT section_name, section_description FROM sections WHERE section_id = (SELECT section_id FROM sections WHERE section_name = 'h');",
      "SELECT sections.section_name, sections.section_description  FROM sections  INNER JOIN courses ON sections.course_id = courses.course_id  WHERE sections.section_name = 'h';",
      "SELECT section_name, section_description  FROM sections  INNER JOIN student_enrolment_courses ON sections.course_id = student_enrolment_courses.course_id  INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  WHERE section_name = 'h';",
      "SELECT section_name, section_description  FROM sections  INNER JOIN courses ON sections.course_id = courses.course_id  INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  INNER JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  WHERE section_name = 'h';",
      "SELECT section_name, section_description  FROM sections  JOIN courses ON sections.course_id = courses.course_id  JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id  JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  WHERE section_name = 'h';",
      "SELECT section_name, section_description  FROM sections, courses, student_enrolment_courses, student_enrolment  WHERE sections.course_id = courses.course_id  AND courses.course_id = student_enrolment_courses.course_id  AND student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  AND section_name = 'h';",
      "SELECT sections.section_name, sections.section_description  FROM sections, courses, student_enrolment_courses, student_enrolment  WHERE sections.course_id = courses.course_id  AND student_enrolment_courses.course_id = courses.course_id  AND student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  AND sections.section_name = 'h';",
      "SELECT sections.section_name, sections.section_description  FROM sections  JOIN courses  ON sections.course_id = courses.course_id  JOIN student_enrolment_courses  ON sections.course_id = student_enrolment_courses.course_id  JOIN student_enrolment  ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  WHERE sections.section_name = 'h';"
    ],
    "gpt_answers2": [
      "SELECT * FROM sections WHERE section_name = 'h';",
      "SELECT section_description FROM sections WHERE section_name = 'h';",
      "SELECT section_name, section_description FROM sections WHERE section_name = 'h';",
      "SELECT section_name, section_id FROM sections WHERE section_name = 'h';",
      "SELECT section_name FROM sections WHERE section_description = 'h';",
      "SELECT section_id FROM sections WHERE section_name = 'h';",
      "SELECT * FROM sections WHERE section_name LIKE '%h%';",
      "SELECT section_name, section_description FROM sections WHERE section_description = 'h';",
      "SELECT section_name, section_description, section_id FROM sections WHERE section_name = 'h';",
      "SELECT section_name, section_description, section_id FROM sections WHERE section_description = 'h';"
    ],
    "gpt_answers3": [
      "SELECT *  FROM sections WHERE section_name = 'h'; ",
      "SELECT section_name, section_description, section_id, course_id FROM sections WHERE section_name = 'h'; ",
      "SELECT * FROM sections WHERE section_id = ( SELECT section_id FROM sections WHERE section_name = 'h' ); ",
      "SELECT section_name FROM sections WHERE section_description = 'h'; ",
      "SELECT section_description FROM sections WHERE section_name = 'h'; ",
      "SELECT section_name FROM sections WHERE section_id IN ( SELECT section_id FROM sections WHERE section_name = 'h' ); ",
      "SELECT section_description FROM sections WHERE section_id IN ( SELECT section_id FROM sections WHERE section_name = 'h' ); ",
      "SELECT * FROM sections WHERE section_id IN ( SELECT section_id FROM sections WHERE section_name LIKE '%h%' ); ",
      "SELECT section_name, section_description FROM sections WHERE section_id IN ( SELECT section_id FROM sections WHERE section_name LIKE '%h%' ); ",
      "SELECT section_name, section_description, course_name, course_description FROM sections INNER JOIN courses ON sections.course_id = courses.course_id WHERE section_name = 'h';"
    ]
  },
  {
    "id": 584,
    "db_id": "student_transcripts_tracking",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "gpt_answers1": [
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = \"Haiti\" ",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = \"Haiti\" OR students.cell_mobile_number = \"09700166582\" ",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = \"Haiti\" UNION SELECT first_name FROM students WHERE cell_mobile_number = \"09700166582\" ",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = \"Haiti\" OR cell_mobile_number = \"09700166582\" ",
      "SELECT first_name FROM students JOIN addresses AS perm_address ON students.permanent_address_id = perm_address.address_id JOIN addresses AS cur_address ON students.current_address_id = cur_address.address_id WHERE perm_address.country = \"Haiti\" OR cell_mobile_number = \"09700166582\" ",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = \"Haiti\" AND students.cell_mobile_number = \"09700166582\" ",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = \"Haiti\" IN (SELECT cell_mobile_number FROM students WHERE cell_mobile_number = \"09700166582\") ",
      "SELECT first_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.country = \"Haiti\" UNION SELECT first_name FROM students WHERE cell_mobile_number = \"09700166582\" ",
      "SELECT first_name FROM students JOIN addresses AS perm_address ON students.permanent_address_id = perm_address.address_id JOIN addresses AS cur_address ON students.current_address_id = cur_address.address_id WHERE perm_address.country = \"Haiti\" OR perm_address.country = \"Haiti\" ",
      "SELECT first_name FROM students JOIN addresses AS perm_address ON students.permanent_address_id = perm_address.address_id LEFT JOIN addresses AS cur_address ON students.current_address_id = cur_address.address_id WHERE perm_address.country = \"Haiti\" OR cur_address.country = \"Haiti\""
    ],
    "gpt_answers2": [
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students WHERE permanent_address_id = (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students JOIN addresses AS permanent ON students.permanent_address_id = permanent.address_id JOIN addresses AS current ON students.current_address_id = current.address_id WHERE permanent.country = 'Haiti' OR students.cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' UNION SELECT first_name FROM students WHERE cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') UNION SELECT first_name FROM students WHERE cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students s WHERE EXISTS (SELECT 1 FROM addresses a WHERE a.address_id = s.permanent_address_id AND a.country = 'Haiti') OR s.cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students WHERE permanent_address_id = (SELECT address_id FROM addresses WHERE country = 'Haiti') UNION ALL SELECT first_name FROM students WHERE cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students WHERE permanent_address_id = (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number IN ('09700166582'); ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') UNION SELECT first_name FROM students WHERE cell_mobile_number = '09700166582';"
    ],
    "gpt_answers3": [
      "SELECT first_name FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' UNION SELECT first_name FROM students WHERE cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students WHERE permanent_address_id IN ( SELECT address_id FROM addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students WHERE permanent_address_id IN ( SELECT address_id FROM addresses WHERE country = 'Haiti' ) OR EXISTS ( SELECT 1 FROM students WHERE cell_mobile_number = '09700166582' ); ",
      "SELECT first_name FROM students WHERE permanent_address_id IN ( SELECT address_id FROM addresses WHERE country = 'Haiti' ) OR EXISTS ( SELECT 1 FROM students WHERE cell_mobile_number = '09700166582' ) GROUP BY first_name; ",
      "SELECT s.first_name FROM students s JOIN addresses a1 ON s.permanent_address_id = a1.address_id JOIN addresses a2 ON s.current_address_id = a2.address_id WHERE a1.country = 'Haiti' OR s.cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students WHERE permanent_address_id = ( SELECT address_id FROM addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582'; ",
      "SELECT first_name FROM students WHERE permanent_address_id = ( SELECT address_id FROM addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582' GROUP BY first_name; ",
      "SELECT first_name FROM students WHERE permanent_address_id IN ( SELECT address_id FROM addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582' ORDER BY first_name LIMIT 10; ",
      "SELECT first_name FROM students WHERE (permanent_address_id, cell_mobile_number) IN ( SELECT address_id, '09700166582' FROM addresses WHERE country = 'Haiti' )"
    ]
  },
  {
    "id": 585,
    "db_id": "student_transcripts_tracking",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "gpt_answers1": [
      "SELECT first_name FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' UNION SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number IN (SELECT cell_mobile_number FROM students WHERE cell_mobile_number = '09700166582') ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' GROUP BY first_name ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') UNION SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' LIMIT 10 ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' FETCH FIRST 10 ROWS ONLY ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') UNION ALL SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' LIMIT 10 ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') UNION ALL SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' LIMIT 10 OFFSET 0"
    ],
    "gpt_answers2": [
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = \"Haiti\") OR cell_mobile_number = \"09700166582\"; ",
      "SELECT DISTINCT s.first_name FROM students s INNER JOIN addresses a ON s.permanent_address_id = a.address_id WHERE a.country = \"Haiti\" OR s.cell_mobile_number = \"09700166582\"; ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = \"Haiti\") UNION SELECT first_name FROM students WHERE cell_mobile_number = \"09700166582\"; ",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = \"Haiti\") UNION ALL SELECT first_name FROM students WHERE cell_mobile_number = \"09700166582\"; ",
      "SELECT s.first_name FROM students s, addresses a WHERE s.permanent_address_id = a.address_id AND a.country = \"Haiti\" OR s.cell_mobile_number = \"09700166582\"; ",
      "SELECT s.first_name FROM students s, addresses a WHERE s.permanent_address_id = a.address_id AND a.country = \"Haiti\" UNION SELECT first_name FROM students WHERE cell_mobile_number = \"09700166582\"; ",
      "SELECT first_name FROM students WHERE permanent_address_id = (SELECT address_id FROM addresses WHERE country = \"Haiti\") OR cell_mobile_number = \"09700166582\"; ",
      "SELECT s.first_name FROM students s JOIN addresses a ON s.permanent_address_id = a.address_id WHERE a.country = \"Haiti\" OR s.cell_mobile_number = \"09700166582\"; ",
      "SELECT first_name FROM students WHERE permanent_address_id = (SELECT address_id FROM addresses WHERE country = \"Haiti\") OR cell_mobile_number LIKE \"%09700166582%\"; ",
      "SELECT DISTINCT first_name FROM students WHERE permanent_address_id = (SELECT address_id FROM addresses WHERE country = \"Haiti\") OR cell_mobile_number = \"09700166582\";"
    ],
    "gpt_answers3": [
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti');",
      "SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' OR permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti');",
      "SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' OR EXISTS (SELECT * FROM addresses WHERE address_id = permanent_address_id AND country = 'Haiti');",
      "SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' OR EXISTS (SELECT * FROM addresses WHERE address_id = permanent_address_id AND country = 'Haiti') AND permanent_address_id IS NOT NULL;",
      "SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' OR EXISTS (SELECT * FROM addresses WHERE address_id = permanent_address_id AND country = 'Haiti') OR EXISTS (SELECT * FROM addresses WHERE address_id = current_address_id AND country = 'Haiti');",
      "SELECT first_name FROM students WHERE permanent_address_id IS NOT NULL AND permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' AND cell_mobile_number IS NOT NULL;",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' AND cell_mobile_number != NULL;",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') AND cell_mobile_number = '09700166582' OR cell_mobile_number IS NOT NULL;",
      "SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582' AND cell_mobile_number IS NOT NULL;"
    ]
  },
  {
    "id": 611,
    "db_id": "tvshow",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "gpt_answers1": [
      "SELECT tv_series.series_name  FROM tv_series  INNER JOIN cartoon ON cartoon.channel = tv_series.channel  INNER JOIN tv_channel ON tv_channel.id = tv_series.channel  WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT series_name  FROM tv_series  WHERE channel = (SELECT channel  FROM cartoon  WHERE title = \"The Rise of the Blue Beetle!\"); ",
      "SELECT series_name  FROM tv_channel  INNER JOIN tv_series ON tv_channel.id = tv_series.channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT series_name  FROM tv_channel  WHERE id = (SELECT channel  FROM cartoon  WHERE title = \"The Rise of the Blue Beetle!\"); ",
      "SELECT tv_channel.series_name  FROM cartoon  LEFT JOIN tv_channel ON cartoon.channel = tv_channel.id  LEFT JOIN tv_series ON cartoon.channel = tv_series.channel  WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT tv_channel.series_name  FROM cartoon  LEFT JOIN tv_channel ON tv_channel.id = cartoon.channel  LEFT JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT tv_channel.series_name  FROM cartoon  INNER JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT series_name FROM tv_channel  WHERE id IN (SELECT channel  FROM cartoon  WHERE title = \"The Rise of the Blue Beetle!\"); ",
      "SELECT series_name  FROM tv_series  INNER JOIN cartoon ON cartoon.channel = tv_series.channel  INNER JOIN tv_channel ON tv_channel.id = tv_series.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle!'  LIMIT 1; ",
      "SELECT series_name  FROM tv_channel  INNER JOIN tv_series ON tv_channel.id = tv_series.channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.title = 'The Rise of the Blue Beetle!'  LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT tv_channel.series_name FROM cartoon, tv_channel WHERE cartoon.channel = tv_channel.id AND cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT tv_channel.series_name FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\"); ",
      "SELECT tv_series.series_name FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT tv_series.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_channel.id = tv_series.channel WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON tv_channel.id = cartoon.channel WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT tv_channel.series_name FROM cartoon LEFT JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = \"The Rise of the Blue Beetle!\"; ",
      "SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\"); ",
      "SELECT tv_channel.series_name FROM cartoon LEFT OUTER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = \"The Rise of the Blue Beetle!\";"
    ],
    "gpt_answers3": [
      "SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = \"The Rise of the Blue Beetle!\" ",
      "SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\") ",
      "SELECT series_name FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.title = \"The Rise of the Blue Beetle!\" ",
      "SELECT tv_channel.series_name FROM cartoon, tv_channel WHERE cartoon.channel = tv_channel.id AND cartoon.title = \"The Rise of the Blue Beetle!\" ",
      "SELECT tv_channel.series_name FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = \"The Rise of the Blue Beetle!\" ",
      "SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = \"The Rise of the Blue Beetle!\") ",
      "SELECT tc.series_name FROM cartoon c, tv_channel tc WHERE c.channel = tc.id AND c.title = \"The Rise of the Blue Beetle!\" ",
      "SELECT tc.series_name FROM cartoon c INNER JOIN tv_channel tc ON c.channel = tc.id WHERE c.title = \"The Rise of the Blue Beetle!\" ",
      "SELECT tv_channel.series_name FROM cartoon LEFT JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = \"The Rise of the Blue Beetle!\" ",
      "SELECT series_name FROM tv_channel WHERE EXISTS (SELECT 1 FROM cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.title = \"The Rise of the Blue Beetle!\")"
    ]
  },
  {
    "id": 614,
    "db_id": "tvshow",
    "gold": "SELECT Episode FROM TV_series ORDER BY rating",
    "gpt_answers1": [
      "SELECT episode FROM tv_series ORDER BY rating DESC;",
      "SELECT episode FROM tv_series ORDER BY rating ASC;",
      "SELECT episode FROM tv_series ORDER BY rating;",
      "SELECT episode FROM tv_series ORDER BY rating DESC LIMIT 10;",
      "SELECT episode FROM tv_series ORDER BY rating ASC LIMIT 10;",
      "SELECT episode FROM tv_series ORDER BY rating LIMIT 10;",
      "SELECT episode FROM tv_series ORDER BY rating DESC FETCH FIRST 10 ROWS ONLY;",
      "SELECT episode FROM tv_series ORDER BY rating ASC FETCH FIRST 10 ROWS ONLY;",
      "SELECT episode FROM tv_series ORDER BY rating FETCH FIRST 10 ROWS ONLY;",
      "SELECT episode FROM tv_series ORDER BY rating DESC LIMIT 10 OFFSET 0;"
    ],
    "gpt_answers2": [
      "SELECT episode FROM tv_series ORDER BY rating ASC;",
      "SELECT episode FROM tv_series ORDER BY rating DESC;",
      "SELECT episode FROM tv_series ORDER BY rating;",
      "SELECT episode FROM tv_series ORDER BY rating ASC, episode ASC;",
      "SELECT episode FROM tv_series ORDER BY rating DESC, episode DESC;",
      "SELECT episode FROM tv_series ORDER BY rating, episode;",
      "SELECT episode FROM tv_series ORDER BY rating ASC LIMIT 10;",
      "SELECT episode FROM tv_series ORDER BY rating DESC LIMIT 10;",
      "SELECT episode FROM tv_series ORDER BY rating LIMIT 10;",
      "SELECT episode FROM tv_series ORDER BY rating, episode LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT episode FROM tv_series ORDER BY rating; ",
      "SELECT episode FROM tv_series ORDER BY rating ASC; ",
      "SELECT episode FROM tv_series ORDER BY rating DESC; ",
      "SELECT episode FROM tv_series ORDER BY rating, episode; ",
      "SELECT episode FROM tv_series ORDER BY rating ASC, episode ASC; ",
      "SELECT episode FROM tv_series ORDER BY rating DESC, episode DESC; ",
      "SELECT episode FROM tv_series ORDER BY rating ASC, episode DESC; ",
      "SELECT episode FROM tv_series ORDER BY rating DESC, episode ASC; ",
      "SELECT episode FROM tv_series ORDER BY rating ASC LIMIT 10; ",
      "SELECT episode FROM tv_series ORDER BY rating DESC LIMIT 10;"
    ]
  },
  {
    "id": 627,
    "db_id": "tvshow",
    "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "gpt_answers1": [
      "SELECT episode FROM tv_series WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = \"Sky Radio\"); ",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = \"Sky Radio\"); ",
      "SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = \"Sky Radio\"; ",
      "SELECT episode FROM tv_series, tv_channel WHERE tv_channel.id = tv_series.channel AND tv_channel.series_name = \"Sky Radio\"; ",
      "SELECT episode FROM tv_series INNER JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = \"Sky Radio\"; ",
      "SELECT episode FROM tv_series, tv_channel WHERE tv_series.channel = tv_channel.id AND tv_channel.series_name = \"Sky Radio\"; ",
      "SELECT episode FROM tv_series JOIN tv_channel ON tv_channel.id = tv_series.channel WHERE tv_channel.series_name = \"Sky Radio\"; ",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name LIKE \"Sky Radio\"); ",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio' AND country = 'USA'); ",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name IN ('Sky Radio'));"
    ],
    "gpt_answers2": [
      "SELECT episode FROM tv_series, tv_channel WHERE tv_channel.id = tv_series.channel AND series_name = \"Sky Radio\";",
      "SELECT episode FROM tv_series INNER JOIN tv_channel ON tv_channel.id = tv_series.channel WHERE series_name = \"Sky Radio\";",
      "SELECT episode FROM tv_series JOIN tv_channel ON tv_channel.id = tv_series.channel WHERE series_name = \"Sky Radio\";",
      "SELECT episode FROM tv_series NATURAL JOIN tv_channel WHERE series_name = \"Sky Radio\";",
      "SELECT episode FROM tv_series JOIN tv_channel USING (channel) WHERE series_name = \"Sky Radio\";",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = \"Sky Radio\");",
      "SELECT episode FROM tv_series WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = \"Sky Radio\");",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name LIKE \"Sky Radio\");",
      "SELECT episode FROM tv_series WHERE channel IN (SELECT id FROM tv_channel WHERE series_name LIKE \"Sky Radio\");",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');"
    ],
    "gpt_answers3": [
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio'); ",
      "SELECT episode FROM tv_series INNER JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'; ",
      "SELECT episode FROM tv_series, tv_channel WHERE tv_series.channel = tv_channel.id AND tv_channel.series_name = 'Sky Radio'; ",
      "SELECT episode FROM tv_series WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio'); ",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio') LIMIT 1; ",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio') AND rownum = 1; ",
      "SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio') ORDER BY air_date DESC LIMIT 1; ",
      "SELECT tv_series.episode FROM tv_series, tv_channel WHERE tv_series.channel = tv_channel.id AND tv_channel.series_name = 'Sky Radio'; ",
      "SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio'; ",
      "SELECT tv_series.episode FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.series_name = 'Sky Radio'; "
    ]
  },
  {
    "id": 631,
    "db_id": "tvshow",
    "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "gpt_answers1": [
      "SELECT production_code, channel FROM cartoon ORDER BY air_date DESC LIMIT 1; ",
      "SELECT production_code, channel FROM cartoon WHERE air_date = (SELECT MAX(air_date) FROM cartoon);",
      "SELECT production_code, channel FROM cartoon WHERE air_date = (SELECT MAX(air_date) FROM tv_series);",
      "SELECT c.production_code, c.channel FROM cartoon AS c INNER JOIN tv_series AS t ON c.channel = t.channel WHERE t.air_date = (SELECT MAX(air_date) FROM tv_series);",
      "SELECT production_code, channel FROM cartoon WHERE air_date = (SELECT MAX(air_date) FROM tv_series) LIMIT 1;",
      "SELECT c.production_code, c.channel FROM cartoon AS c INNER JOIN tv_series AS t ON c.channel = t.channel ORDER BY t.air_date DESC LIMIT 1;",
      "SELECT production_code, channel FROM cartoon WHERE air_date IN (SELECT MAX(air_date) FROM cartoon);",
      "SELECT production_code, channel FROM cartoon WHERE air_date = (SELECT MAX(air_date) FROM tv_series) LIMIT 1;",
      "SELECT production_code, channel FROM cartoon WHERE air_date IN (SELECT MAX(air_date) FROM tv_series) LIMIT 1;",
      "SELECT production_code, channel FROM cartoon WHERE air_date = (SELECT MAX(air_date) FROM tv_series) ORDER BY id DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT production_code, cartoon.channel FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY air_date DESC LIMIT 1; ",
      "SELECT production_code, cartoon.channel FROM cartoon INNER JOIN tv_series ON cartoon.channel = tv_series.channel ORDER BY tv_series.air_date DESC LIMIT 1; ",
      "SELECT production_code, tv_channel.id FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.air_date = (SELECT MAX(air_date) FROM tv_series); ",
      "SELECT cartoon.production_code, cartoon.channel FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.air_date = (SELECT MAX(air_date) FROM tv_series) LIMIT 1; ",
      "SELECT c.production_code, c.channel FROM cartoon c JOIN tv_channel tc ON c.channel = tc.id JOIN tv_series ts ON c.channel = ts.channel WHERE ts.air_date = (SELECT MAX(air_date) FROM tv_series) LIMIT 1; ",
      "SELECT cartoon.production_code, cartoon.channel FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_channel.id = tv_series.channel ORDER BY tv_series.air_date DESC LIMIT 1; ",
      "SELECT c.production_code, c.channel FROM cartoon AS c JOIN (SELECT MAX(air_date) AS max_air_date FROM tv_series) AS t JOIN tv_channel AS tc ON c.channel = tc.id JOIN tv_series AS ts ON c.channel = ts.channel AND ts.air_date = t.max_air_date LIMIT 1; ",
      "SELECT production_code, channel FROM cartoon INNER JOIN tv_series ON cartoon.channel = tv_series.channel WHERE tv_series.air_date = (SELECT MAX(air_date) FROM tv_series) LIMIT 1; ",
      "SELECT production_code, channel FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id INNER JOIN tv_series ON cartoon.channel = tv_series.channel WHERE tv_series.air_date = (SELECT MAX(air_date) FROM tv_series) LIMIT 1; ",
      "SELECT cartoon.production_code, cartoon.channel FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.air_date = (SELECT MAX(air_date) FROM tv_series) ORDER BY cartoon.production_code ASC LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT production_code, channel FROM cartoon WHERE id = (SELECT id FROM cartoon ORDER BY id DESC LIMIT 1); ",
      "SELECT production_code, channel FROM cartoon WHERE id = (SELECT MAX(id) FROM cartoon); ",
      "SELECT production_code, channel FROM cartoon ORDER BY id DESC LIMIT 1; ",
      "SELECT production_code, channel FROM cartoon WHERE id = (SELECT id FROM cartoon ORDER BY air_date DESC LIMIT 1); ",
      "SELECT production_code, channel FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id WHERE air_date = (SELECT MAX(air_date) FROM tv_series); ",
      "SELECT production_code, channel FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id WHERE air_date = (SELECT MAX(air_date) FROM tv_series WHERE channel = cartoon.channel); ",
      "SELECT production_code, channel FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE id = (SELECT id FROM cartoon ORDER BY air_date DESC LIMIT 1); ",
      "SELECT production_code, channel FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE air_date = (SELECT MAX(air_date) FROM tv_series WHERE channel = cartoon.channel); ",
      "SELECT production_code, channel FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE id = (SELECT id FROM cartoon ORDER BY air_date DESC LIMIT 1) ORDER BY air_date DESC LIMIT 1; ",
      "SELECT production_code, channel FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE air_date = (SELECT MAX(air_date) FROM tv_series WHERE channel = tv_channel.id);"
    ]
  },
  {
    "id": 632,
    "db_id": "tvshow",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "gpt_answers1": [
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'yes'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'True'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv != 0; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'high definition'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv LIKE '%HD%'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv IS NOT NULL; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1 AND hight_definition_tv IS NOT NULL; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'true' OR hight_definition_tv = 'yes';"
    ],
    "gpt_answers2": [
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'Yes'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'True'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = '1'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv LIKE '%HD%'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv LIKE '%yes%'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv IN ('Yes', 'True', '1'); ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv IN (1, 'Yes', true);"
    ],
    "gpt_answers3": [
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.high_definition_tv = 1; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1; ",
      "SELECT package_option, series_name FROM tv_channel WHERE high_definition_tv = 'yes'; ",
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 'true'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE high_definition_tv = '1'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'true'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE high_definition_tv = TRUE; ",
      "SELECT package_option, series_name FROM tv_channel WHERE high_definition_tv = 'on'; ",
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = '1'; ",
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.high_definition_tv = TRUE;"
    ]
  },
  {
    "id": 633,
    "db_id": "tvshow",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "gpt_answers1": [
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1; ",
      "SELECT package_option AS package_options, series_name AS series_name FROM tv_channel WHERE hight_definition_tv = 1; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'Yes'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'true'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv IN (1, 'Yes', true, 'true'); ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1 OR hight_definition_tv = 'Yes'; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1 AND hight_definition_tv = 'Yes'; ",
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE hight_definition_tv = 1; ",
      "SELECT tv_channel.package_option AS package_options, tv_channel.series_name AS series_name FROM tv_channel WHERE hight_definition_tv = 1;"
    ],
    "gpt_answers2": [
      "SELECT package_option, series_name FROM tv_channel WHERE high_definition_tv = 1; ",
      "SELECT tv_channel.package_option, tv_series.series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.high_definition_tv = 1; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1 AND package_option IS NOT NULL; ",
      "SELECT package_option, series_name FROM tv_channel WHERE high_definition_tv = 1 AND package_option <> ''; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1 AND package_option != ''; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1 AND package_option NOT LIKE ''; ",
      "SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1 AND package_option NOT LIKE ''; ",
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.high_definition_tv = 1 AND tv_channel.package_option IS NOT NULL; ",
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.hight_definition_tv = 1 AND tv_channel.package_option IS NOT NULL; ",
      "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_channel.hight_definition_tv = 1 AND tv_channel.package_option != '';"
    ],
    "gpt_answers3": [
      "SELECT package_option, series_name  FROM tv_channel  WHERE high_definition_tv = 1;",
      "SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = 'true';",
      "SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = 'yes';",
      "SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = 'Y';",
      "SELECT package_option, series_name  FROM tv_channel  WHERE hight_definition_tv = '1';",
      "SELECT tv_channel.package_option, tv_channel.series_name  FROM tv_channel  WHERE tv_channel.high_definition_tv = 1;",
      "SELECT tv_channel.package_option, tv_channel.series_name  FROM tv_channel  WHERE tv_channel.hight_definition_tv = 'true';",
      "SELECT tv_channel.package_option, tv_channel.series_name  FROM tv_channel  WHERE tv_channel.hight_definition_tv = 'yes';",
      "SELECT tv_channel.package_option, tv_channel.series_name  FROM tv_channel  WHERE tv_channel.hight_definition_tv = 'Y';",
      "SELECT tv_channel.package_option, tv_channel.series_name  FROM tv_channel  WHERE tv_channel.hight_definition_tv = '1';"
    ]
  },
  {
    "id": 636,
    "db_id": "tvshow",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "gpt_answers1": [
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN ( SELECT DISTINCT channel FROM cartoon WHERE written_by = \"Todd Casey\" ); ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by != \"Todd Casey\"; ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT DISTINCT cartoon.channel FROM cartoon WHERE cartoon.written_by = \"Todd Casey\" ); ",
      "SELECT DISTINCT country FROM tv_channel WHERE NOT EXISTS ( SELECT * FROM cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.written_by = \"Todd Casey\" ); ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel AND cartoon.written_by = \"Todd Casey\" WHERE cartoon.channel IS NULL; ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by != \"Todd Casey\" GROUP BY tv_channel.country HAVING COUNT(cartoon.id) = 0; ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by != \"Todd Casey\" GROUP BY tv_channel.country HAVING MAX(cartoon.id) IS NULL; ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by != \"Todd Casey\" OR cartoon.channel IS NULL; ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN ( SELECT DISTINCT cartoon.channel FROM cartoon JOIN tv_channel ON tv_channel.id = cartoon.channel WHERE cartoon.written_by = \"Todd Casey\" ); ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE (cartoon.channel IS NULL OR cartoon.written_by != \"Todd Casey\");"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN ( SELECT channel  FROM cartoon WHERE written_by = 'Todd Casey' ); ",
      "SELECT DISTINCT country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE written_by <> 'Todd Casey' OR written_by IS NULL; ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN ( SELECT channel  FROM cartoon WHERE written_by = 'Todd Casey' GROUP BY channel ); ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN ( SELECT channel  FROM cartoon WHERE written_by = 'Todd Casey' ) GROUP BY country; ",
      "SELECT DISTINCT country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by = 'Todd Casey' WHERE cartoon.id IS NULL; ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN ( SELECT tv_channel.id  FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by = 'Todd Casey' WHERE cartoon.id IS NOT NULL ); ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN ( SELECT cartoon.channel  FROM cartoon WHERE written_by = 'Todd Casey' ); ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN ( SELECT channel  FROM cartoon WHERE written_by = 'Todd Casey' ) GROUP BY country HAVING COUNT(*) > 0; ",
      "SELECT DISTINCT country FROM ( SELECT tv_channel.country, COUNT(cartoon.channel) as cartoon_count FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by = 'Todd Casey' GROUP BY tv_channel.country ) WHERE cartoon_count = 0; ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN ( SELECT channel, COUNT(*) as num_cartoons FROM cartoon WHERE written_by = 'Todd Casey' GROUP BY channel ) AS c ON tv_channel.id = c.channel WHERE c.num_cartoons IS NULL;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = \"Todd Casey\") ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by = \"Todd Casey\" WHERE cartoon.channel IS NULL ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = \"Todd Casey\" AND channel IS NOT NULL) ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by = \"Todd Casey\" WHERE cartoon.channel IS NULL  AND cartoon.written_by = \"Todd Casey\" ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by LIKE \"%Todd Casey%\") ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by LIKE \"%Todd Casey%\" WHERE cartoon.channel IS NULL ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by LIKE \"%Todd Casey%\" AND channel IS NOT NULL) ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by LIKE \"%Todd Casey%\" WHERE cartoon.channel IS NULL  AND cartoon.written_by LIKE \"%Todd Casey%\" ",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE written_by IN (\"Todd Casey\")) ",
      "SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by IN (\"Todd Casey\") WHERE cartoon.channel IS NULL"
    ]
  },
  {
    "id": 637,
    "db_id": "tvshow",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "gpt_answers1": [
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel  FROM cartoon  WHERE written_by = 'Todd Casey'); ",
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel  FROM cartoon WHERE written_by LIKE '%Todd Casey%'); ",
      "SELECT DISTINCT c.country  FROM tv_channel AS c LEFT JOIN cartoon AS t ON c.id = t.channel WHERE t.written_by != 'Todd Casey' GROUP BY c.country; ",
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel  FROM cartoon  WHERE written_by IN ('Todd Casey')); ",
      "SELECT DISTINCT t.country  FROM tv_channel AS t  LEFT JOIN cartoon AS c ON c.channel = t.id WHERE c.written_by != 'Todd Casey'; ",
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel  FROM cartoon WHERE written_by = 'Todd Casey'); ",
      "SELECT DISTINCT c.country  FROM tv_channel AS c  JOIN cartoon AS t ON c.id = t.channel  WHERE t.written_by <> 'Todd Casey'; ",
      "SELECT DISTINCT c.country  FROM tv_channel AS c  LEFT JOIN cartoon AS t ON c.id = t.channel WHERE t.written_by != 'Todd Casey'; ",
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel  FROM cartoon  WHERE written_by = 'Todd Casey'); ",
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT EXISTS (SELECT channel  FROM cartoon  WHERE written_by = 'Todd Casey');"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE written_by = \"Todd Casey\");",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE written_by = 'Todd Casey');",
      "SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE written_by = 'Todd Casey') LIMIT 10;",
      "SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');",
      "SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey') LIMIT 10;",
      "SELECT country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE written_by != 'Todd Casey';",
      "SELECT country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE written_by != 'Todd Casey' LIMIT 10;",
      "SELECT country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE written_by NOT LIKE 'Todd Casey';",
      "SELECT country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id WHERE written_by NOT LIKE 'Todd Casey' LIMIT 10;",
      "SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by != 'Todd Casey');"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel  FROM cartoon  WHERE written_by = \"Todd Casey\"); ",
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel  FROM cartoon  WHERE written_by = 'Todd Casey'); ",
      "SELECT DISTINCT tv_channel.country  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.written_by != 'Todd Casey'; ",
      "SELECT DISTINCT c.country  FROM cartoon AS ca  JOIN tv_channel AS c ON ca.channel = c.id  WHERE ca.written_by != 'Todd Casey'; ",
      "SELECT DISTINCT tv_channel.country  FROM tv_channel  LEFT JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.written_by != 'Todd Casey' OR cartoon.written_by IS NULL; ",
      "SELECT DISTINCT c.country  FROM tv_channel AS c  LEFT JOIN cartoon AS ca ON c.id = ca.channel AND ca.written_by = 'Todd Casey'  WHERE ca.channel IS NULL; ",
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT DISTINCT channel  FROM cartoon  WHERE written_by = 'Todd Casey'); ",
      "SELECT DISTINCT tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON tv_channel.id = cartoon.channel  WHERE cartoon.written_by != 'Todd Casey'; ",
      "SELECT DISTINCT tv_channel.country  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.written_by NOT LIKE '%Todd Casey%'; ",
      "SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel  FROM cartoon  WHERE written_by LIKE '%Todd Casey%');"
    ]
  },
  {
    "id": 638,
    "db_id": "tvshow",
    "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "gpt_answers1": [
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang'); ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by LIKE '%Ben Jones%' OR cartoon.directed_by LIKE '%Michael Chang%'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon, tv_channel WHERE cartoon.channel = tv_channel.id AND (cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'); ",
      "SELECT DISTINCT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by LIKE '%Ben Jones%' AND cartoon.directed_by LIKE '%Michael Chang%'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' UNION SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Michael Chang'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY tv_channel.series_name, tv_channel.country;"
    ],
    "gpt_answers2": [
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon  INNER JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by IN (\"Ben Jones\", \"Michael Chang\") ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  WHERE tv_channel.id IN  (SELECT cartoon.channel  FROM cartoon  WHERE cartoon.directed_by IN (\"Ben Jones\", \"Michael Chang\")) ",
      "SELECT series_name, country  FROM tv_channel  WHERE id IN  (SELECT channel  FROM cartoon  WHERE directed_by IN (\"Ben Jones\", \"Michael Chang\")) ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel, cartoon  WHERE cartoon.channel = tv_channel.id  AND cartoon.directed_by IN (\"Ben Jones\", \"Michael Chang\") ",
      "SELECT series_name, country  FROM tv_channel  WHERE EXISTS  (SELECT 1  FROM cartoon  WHERE cartoon.channel = tv_channel.id  AND cartoon.directed_by IN (\"Ben Jones\", \"Michael Chang\")) ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN  (SELECT channel  FROM cartoon  WHERE directed_by IN (\"Ben Jones\", \"Michael Chang\")) AS temp  ON tv_channel.id = temp.channel ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  WHERE tv_channel.id =  (SELECT cartoon.channel  FROM cartoon  WHERE cartoon.directed_by IN (\"Ben Jones\", \"Michael Chang\")) ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\" ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by = \"Ben Jones\" AND cartoon.channel IN  (SELECT cartoon.channel  FROM cartoon  WHERE cartoon.directed_by = \"Michael Chang\") ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon, tv_channel  WHERE cartoon.channel = tv_channel.id  AND (cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\")"
    ],
    "gpt_answers3": [
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\" GROUP BY tv_channel.series_name, tv_channel.country ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN (\"Ben Jones\", \"Michael Chang\") GROUP BY tv_channel.series_name, tv_channel.country ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon, tv_channel  WHERE (cartoon.channel = tv_channel.id)  AND (cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\") GROUP BY tv_channel.series_name, tv_channel.country ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon NATURAL JOIN tv_channel WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\" GROUP BY tv_channel.series_name, tv_channel.country ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon, tv_channel WHERE cartoon.channel = tv_channel.id AND (cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\") GROUP BY tv_channel.series_name, tv_channel.country ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\" GROUP BY tv_channel.series_name, tv_channel.country ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon LEFT JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\" GROUP BY tv_channel.series_name, tv_channel.country ",
      "SELECT tv_channel.series_name, tv_channel.country FROM cartoon RIGHT JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\" GROUP BY tv_channel.series_name, tv_channel.country ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel WHERE tv_channel.id IN (SELECT distinct(channel) FROM cartoon WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\") ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel WHERE tv_channel.id IN (SELECT channel FROM cartoon WHERE cartoon.directed_by = \"Ben Jones\" INTERSECT SELECT channel FROM cartoon WHERE cartoon.directed_by = \"Michael Chang\")"
    ]
  },
  {
    "id": 639,
    "db_id": "tvshow",
    "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "gpt_answers1": [
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  WHERE tv_channel.id IN (SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'); ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'; ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang'); ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang'); ",
      "SELECT DISTINCT tv_channel.series_name, tv_channel.country  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'; ",
      "SELECT series_name, country  FROM tv_channel  WHERE id IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Michael Chang'); ",
      "SELECT series_name, country  FROM tv_channel  WHERE id IN (SELECT channel FROM cartoon WHERE directed_by IN ('Ben Jones', 'Michael Chang')); ",
      "SELECT series_name, country  FROM tv_channel  WHERE id IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')  AND id IN (SELECT channel FROM cartoon WHERE directed_by = 'Michael Chang'); ",
      "SELECT series_name, country  FROM tv_channel  WHERE id IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')  OR id IN (SELECT channel FROM cartoon WHERE directed_by = 'Michael Chang'); ",
      "SELECT series_name, country  FROM tv_channel  WHERE id = (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')  OR id = (SELECT channel FROM cartoon WHERE directed_by = 'Michael Chang');"
    ],
    "gpt_answers2": [
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  WHERE tv_channel.id IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by IN (\"Ben Jones\", \"Michael Chang\") ) ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\" ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Ben Jones\" AND cartoon.channel IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = \"Michael Chang\" ) ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN (\"Ben Jones\", \"Michael Chang\") ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Ben Jones\" UNION SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Michael Chang\" ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\" ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by LIKE \"%Ben Jones%\" OR cartoon.directed_by LIKE \"%Michael Chang%\" ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN (\"Ben Jones\")  UNION SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN (\"Michael Chang\") ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN (\"Ben Jones\") AND cartoon.channel IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by IN (\"Michael Chang\") ) ",
      "SELECT tv_channel.series_name, tv_channel.country  FROM tv_channel  WHERE tv_channel.id = (  SELECT cartoon.channel  FROM cartoon  WHERE cartoon.directed_by = \"Ben Jones\" OR cartoon.directed_by = \"Michael Chang\"  GROUP BY cartoon.channel HAVING COUNT(DISTINCT cartoon.directed_by) = 2  )"
    ],
    "gpt_answers3": [
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang'); ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by LIKE '%Ben Jones%' OR cartoon.directed_by LIKE '%Michael Chang%'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang'; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.directed_by = 'Michael Chang' GROUP BY tv_channel.series_name, tv_channel.country; ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY tv_channel.series_name, tv_channel.country; ",
      "SELECT DISTINCT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang'); ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel WHERE tv_channel.id IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang') ); ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel WHERE tv_channel.id IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' ) OR tv_channel.id IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Michael Chang' ); ",
      "SELECT tv_channel.series_name, tv_channel.country FROM tv_channel WHERE tv_channel.id = ANY ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' ) AND tv_channel.id = ANY ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Michael Chang' );"
    ]
  },
  {
    "id": 642,
    "db_id": "tvshow",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "gpt_answers1": [
      "SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2 ); ",
      "SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(id) > 2 ); ",
      "SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.country HAVING COUNT(tv_channel.id) > 2; ",
      "SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.country HAVING COUNT(*) > 2; ",
      "SELECT id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(DISTINCT id) > 2 ); ",
      "SELECT tv_channel.id FROM tv_channel INNER JOIN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2 ) AS c ON tv_channel.country = c.country; ",
      "SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(DISTINCT tv_channel.id) > 2 ); ",
      "SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(DISTINCT id) > 2 ); ",
      "SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(tv_channel.id) > 2 ); ",
      "SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(DISTINCT tv_channel.id) > 2 );"
    ],
    "gpt_answers2": [
      "SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.country IN (SELECT tv_channel.country  FROM tv_channel  GROUP BY tv_channel.country  HAVING COUNT(tv_channel.id) > 2); ",
      "SELECT tv_channel.id  FROM tv_channel  JOIN (SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(country) > 2) AS subquery ON tv_channel.country = subquery.country; ",
      "SELECT id  FROM tv_channel  WHERE country IN (SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(DISTINCT id) > 2); ",
      "SELECT id  FROM tv_channel  WHERE country IN (SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(*) > 2); ",
      "SELECT tv_channel.id  FROM tv_channel  INNER JOIN (SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(country) > 2) AS subquery ON tv_channel.country = subquery.country; ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE country IN (SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(DISTINCT series_name) > 2); ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE country IN (SELECT country  FROM tv_channel c  JOIN tv_series s ON c.id = s.channel  GROUP BY country  HAVING COUNT(DISTINCT s.id) > 2); ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE country IN (SELECT country  FROM tv_channel c  JOIN cartoon t ON c.id = t.channel  GROUP BY country  HAVING COUNT(DISTINCT t.id) > 2); ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE country IN (SELECT country  FROM tv_channel  WHERE id IN (SELECT channel  FROM tv_series  GROUP BY channel  HAVING COUNT(DISTINCT id) > 2) ); ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE country IN (SELECT country  FROM (SELECT country, COUNT(DISTINCT id) AS cnt  FROM tv_channel  GROUP BY country) AS sub  WHERE cnt > 2);"
    ],
    "gpt_answers3": [
      "SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.country IN ( SELECT tv_channel.country  FROM tv_channel  GROUP BY tv_channel.country  HAVING COUNT(tv_channel.id) > 2 ); ",
      "SELECT tv_channel.id  FROM tv_channel  INNER JOIN ( SELECT tv_channel.country, COUNT(tv_channel.id) AS channel_count  FROM tv_channel  GROUP BY tv_channel.country  HAVING channel_count > 2 ) AS subquery  ON tv_channel.country = subquery.country; ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.country IN ( SELECT country  FROM ( SELECT country, COUNT(id) AS channel_count  FROM tv_channel  GROUP BY country ) AS subquery  WHERE channel_count > 2 ); ",
      "SELECT tv_channel.id  FROM ( SELECT tv_channel.id, COUNT(tv_channel.id) AS channel_count  FROM tv_channel  GROUP BY tv_channel.id  HAVING channel_count > 2 ) AS subquery; ",
      "SELECT tv_channel.id  FROM tv_channel GROUP BY tv_channel.country  HAVING COUNT(tv_channel.id) > 2; ",
      "SELECT DISTINCT tv_channel.id  FROM tv_channel  INNER JOIN ( SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(id) > 2 ) AS subquery  ON tv_channel.country = subquery.country; ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.country IN ( SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(channel) > 2 ); ",
      "SELECT id  FROM tv_channel  WHERE country IN ( SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(id) > 2 ); ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.country IN ( SELECT country  FROM tv_channel  GROUP BY country  HAVING COUNT(DISTINCT id) > 2 ); ",
      "SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.country IN ( SELECT tv_channel.country  FROM tv_channel  GROUP BY tv_channel.country  HAVING COUNT(DISTINCT tv_channel.id) > 2 );"
    ]
  },
  {
    "id": 643,
    "db_id": "tvshow",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "gpt_answers1": [
      "SELECT c.id FROM tv_channel c WHERE (SELECT COUNT(id) FROM tv_channel) > 2; ",
      "SELECT c.id FROM tv_channel c INNER JOIN (SELECT channel, COUNT(*) AS num_channels FROM tv_series GROUP BY channel HAVING num_channels > 2) s ON c.id = s.channel; ",
      "SELECT c.id FROM tv_channel c WHERE c.id IN (SELECT channel FROM tv_series GROUP BY channel HAVING COUNT(*) > 2); ",
      "SELECT c.id FROM tv_channel c WHERE EXISTS (SELECT channel FROM tv_series WHERE channel = c.id GROUP BY channel HAVING COUNT(*) > 2); ",
      "SELECT channel FROM tv_series GROUP BY channel HAVING COUNT(DISTINCT id) > 2; ",
      "SELECT c.id FROM tv_channel c WHERE (SELECT COUNT(id) FROM tv_series WHERE channel = c.id) > 2; ",
      "SELECT c.id FROM tv_channel c INNER JOIN (SELECT channel, COUNT(DISTINCT id) AS num_series FROM tv_series GROUP BY channel HAVING num_series > 2) s ON c.id = s.channel; ",
      "SELECT c.id FROM tv_channel c WHERE (SELECT COUNT(id) FROM cartoon WHERE channel = c.id) > 2; ",
      "SELECT c.id FROM tv_channel c WHERE (SELECT COUNT(DISTINCT id) FROM tv_series WHERE channel = c.id) > 2; ",
      "SELECT c.id FROM tv_channel c WHERE EXISTS (SELECT channel FROM cartoon WHERE channel = c.id GROUP BY channel HAVING COUNT(*) > 2);"
    ],
    "gpt_answers2": [
      "SELECT tv_channel.id FROM tv_channel WHERE (SELECT COUNT(*) FROM tv_channel) > 2;",
      "SELECT channel.id FROM tv_channel AS channel WHERE (SELECT COUNT(*) FROM tv_channel) > 2;",
      "SELECT id FROM tv_channel WHERE (SELECT COUNT(*) FROM tv_channel) > 2;",
      "SELECT id FROM tv_channel HAVING COUNT(*) > 2;",
      "SELECT tv_channel.id FROM tv_channel JOIN (SELECT COUNT(*) as count FROM tv_channel) AS c WHERE c.count > 2;",
      "SELECT tv_channel.id FROM tv_channel WHERE (SELECT COUNT(DISTINCT id) FROM tv_channel) > 2;",
      "SELECT tv_channel.id FROM tv_channel GROUP BY id HAVING COUNT(id) > 2;",
      "SELECT tv_channel.id FROM tv_channel WHERE EXISTS (SELECT * FROM tv_channel WHERE id <> tv_channel.id GROUP BY id HAVING COUNT(id) > 2);",
      "SELECT tv_channel.id FROM tv_channel WHERE id IN (SELECT id FROM tv_channel GROUP BY id HAVING COUNT(id) > 2);",
      "SELECT tv_channel.id FROM tv_channel WHERE id IN (SELECT channel FROM cartoon GROUP BY channel HAVING COUNT(*) > 2);"
    ],
    "gpt_answers3": [
      "SELECT id FROM tv_channel WHERE id IN (SELECT channel FROM tv_series GROUP BY channel HAVING COUNT(*) > 2)",
      "SELECT id FROM tv_channel WHERE id IN (SELECT channel FROM cartoon GROUP BY channel HAVING COUNT(*) > 2)",
      "SELECT tc.id FROM tv_channel tc INNER JOIN tv_series ts ON tc.id = ts.channel GROUP BY tc.id HAVING COUNT(*) > 2",
      "SELECT tc.id FROM tv_channel tc INNER JOIN cartoon ca ON tc.id = ca.channel GROUP BY tc.id HAVING COUNT(*) > 2",
      "SELECT id FROM tv_channel WHERE id IN (SELECT channel FROM tv_series UNION ALL SELECT channel FROM cartoon GROUP BY channel HAVING COUNT(*) > 2)",
      "SELECT id FROM tv_channel WHERE id IN (SELECT channel FROM tv_series UNION SELECT channel FROM cartoon GROUP BY channel HAVING COUNT(*) > 2)",
      "SELECT DISTINCT c.channel AS id FROM (SELECT channel FROM tv_series UNION ALL SELECT channel FROM cartoon) AS c GROUP BY c.channel HAVING COUNT(*) > 2",
      "SELECT DISTINCT c.channel AS id FROM (SELECT channel FROM tv_series UNION SELECT channel FROM cartoon) AS c GROUP BY c.channel HAVING COUNT(*) > 2",
      "SELECT id FROM tv_channel WHERE EXISTS (SELECT 1 FROM tv_series WHERE channel = tv_channel.id GROUP BY channel HAVING COUNT(*) > 2)",
      "SELECT id FROM tv_channel WHERE EXISTS (SELECT 1 FROM cartoon WHERE channel = tv_channel.id GROUP BY channel HAVING COUNT(*) > 2)"
    ]
  },
  {
    "id": 688,
    "db_id": "voter_1",
    "gold": "SELECT count(*) FROM area_code_state",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT state) FROM votes;",
      "SELECT COUNT(*) FROM area_code_state;",
      "SELECT COUNT(DISTINCT state) FROM area_code_state;",
      "SELECT COUNT(*) FROM (SELECT DISTINCT state FROM votes);",
      "SELECT COUNT(*) AS num_states FROM (SELECT DISTINCT state FROM area_code_state) AS sub_query;",
      "SELECT COUNT(*) FROM (SELECT state FROM votes GROUP BY state) AS sub_query;",
      "SELECT COUNT(*) FROM (SELECT state FROM area_code_state GROUP BY state) AS sub_query;",
      "SELECT COUNT(*) FROM (SELECT state FROM votes UNION SELECT state FROM area_code_state) AS sub_query;",
      "SELECT COUNT(*) FROM (SELECT state FROM votes INTERSECT SELECT state FROM area_code_state) AS sub_query;",
      "SELECT COUNT(*) FROM (SELECT state FROM votes EXCEPT SELECT state FROM area_code_state) AS sub_query;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT state) FROM area_code_state;",
      "SELECT COUNT(*) FROM area_code_state;",
      "SELECT COUNT(state) FROM area_code_state;",
      "SELECT COUNT(DISTINCT state) FROM votes;",
      "SELECT COUNT(*) FROM votes GROUP BY state;",
      "SELECT COUNT(state) FROM votes;",
      "SELECT COUNT(DISTINCT state) FROM contestants;",
      "SELECT COUNT(*) FROM contestants;",
      "SELECT COUNT(state) FROM contestants;",
      "SELECT COUNT(*) FROM area_code_state JOIN votes ON area_code_state.state = votes.state;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT state) FROM area_code_state;",
      "SELECT COUNT(*) FROM (SELECT DISTINCT state FROM area_code_state) AS states;",
      "SELECT COUNT(*) FROM area_code_state;",
      "SELECT COUNT(DISTINCT state) FROM votes;",
      "SELECT COUNT(*) FROM (SELECT DISTINCT state FROM votes) AS states;",
      "SELECT COUNT(*) FROM votes;",
      "SELECT COUNT(DISTINCT state) FROM contestants;",
      "SELECT COUNT(*) FROM (SELECT DISTINCT state FROM contestants) AS states;",
      "SELECT COUNT(*) FROM contestants;",
      "SELECT COUNT(*) FROM (SELECT DISTINCT state FROM area_code_state UNION SELECT DISTINCT state FROM votes UNION SELECT DISTINCT state FROM contestants) AS states;"
    ]
  },
  {
    "id": 708,
    "db_id": "world_1",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "gpt_answers1": [
      "SELECT SUM(surfacearea) FROM country WHERE region = 'Carribean';",
      "SELECT SUM(surfacearea) AS TotalSurfaceArea FROM country WHERE region = 'Carribean';",
      "SELECT region, SUM(surfacearea) AS TotalSurfaceArea FROM country WHERE region = 'Carribean' GROUP BY region;",
      "SELECT region, SUM(surfacearea) FROM country WHERE continent = 'North America' AND region = 'Carribean';",
      "SELECT SUM(surfacearea) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Carribean');",
      "SELECT region, SUM(surfacearea) FROM country WHERE region LIKE '%Carribean%';",
      "SELECT region, SUM(surfacearea) FROM country WHERE region IN ('Carribean');",
      "SELECT region, SUM(surfacearea) FROM country WHERE region LIKE 'Carribean%';",
      "SELECT region, SUM(surfacearea) FROM country WHERE name LIKE 'Carribean%';",
      "SELECT region, SUM(surfacearea) FROM country WHERE region LIKE '%Carribean';"
    ],
    "gpt_answers2": [
      "SELECT SUM(surfacearea) FROM country WHERE continent = 'Carribean';",
      "SELECT SUM(surfacearea) FROM country WHERE region = 'Carribean';",
      "SELECT SUM(surfacearea) FROM country WHERE name LIKE '%Carribean%';",
      "SELECT SUM(surfacearea) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Carribean');",
      "SELECT SUM(surfacearea) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language LIKE '%Carribean%');",
      "SELECT SUM(surfacearea) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish');",
      "SELECT SUM(surfacearea) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language LIKE '%Spanish%');",
      "SELECT SUM(surfacearea) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('Carribean', 'Spanish'));",
      "SELECT SUM(surfacearea) FROM country WHERE continent IN ('Carribean', 'Central America');",
      "SELECT SUM(surfacearea) FROM country WHERE region IN ('Carribean', 'Central America');"
    ],
    "gpt_answers3": [
      "SELECT SUM(surfacearea) FROM country WHERE continent = 'Carribean';",
      "SELECT SUM(surfacearea) FROM country WHERE region = 'Carribean';",
      "SELECT continent, SUM(surfacearea) FROM country WHERE continent = 'Carribean' GROUP BY continent;",
      "SELECT region, SUM(surfacearea) FROM country WHERE region = 'Carribean' GROUP BY region;",
      "SELECT SUM(surfacearea) FROM country WHERE continent LIKE '%Carribean%';",
      "SELECT SUM(surfacearea) FROM country WHERE region LIKE '%Carribean%';",
      "SELECT continent, SUM(surfacearea) FROM country WHERE continent LIKE '%Carribean%' GROUP BY continent;",
      "SELECT region, SUM(surfacearea) FROM country WHERE region LIKE '%Carribean%' GROUP BY region;",
      "SELECT SUM(surfacearea) FROM country WHERE name LIKE '%Carribean%';",
      "SELECT SUM(surfacearea) FROM country WHERE region = 'Carribean' OR continent = 'Carribean';"
    ]
  },
  {
    "id": 713,
    "db_id": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  ORDER BY percentage DESC  LIMIT 1; ",
      "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  GROUP BY language  HAVING MAX(percentage); ",
      "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  GROUP BY language  ORDER BY SUM(percentage) DESC  LIMIT 1; ",
      "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  AND isofficial = 1  ORDER BY percentage DESC  LIMIT 1; ",
      "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  GROUP BY language  ORDER BY percentage DESC  LIMIT 1; ",
      "SELECT MAX(language) AS language  FROM countrylanguage  WHERE countrycode = 'ABW'; ",
      "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  AND isofficial = 1  GROUP BY language  ORDER BY percentage DESC  LIMIT 1; ",
      "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW'); ",
      "SELECT MAX(language) AS language  FROM countrylanguage  WHERE countrycode = 'ABW'  GROUP BY language  ORDER BY SUM(percentage) DESC; ",
      "SELECT language  FROM countrylanguage  WHERE countrycode = 'ABW'  AND percentage = (SELECT MAX(percentage)  FROM countrylanguage  WHERE countrycode = 'ABW'  GROUP BY language);"
    ],
    "gpt_answers2": [
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = (SELECT MAX(percentage) FROM countrylanguage);",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T' ORDER BY percentage DESC LIMIT 1;",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = (SELECT percentage FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1);",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = (SELECT MAX(percentage) FROM (SELECT * FROM countrylanguage WHERE countrycode = 'ABW') AS subquery);",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' HAVING MAX(percentage);",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC FETCH FIRST 1 ROW ONLY;",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' HAVING percentage = MAX(percentage);",
      "SELECT MAX(language) FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language;"
    ],
    "gpt_answers3": [
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 1;",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T' ORDER BY percentage DESC LIMIT 1;",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');",
      "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Aruba' ORDER BY cl.percentage DESC LIMIT 1;",
      "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Aruba' AND cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') ORDER BY percentage DESC LIMIT 1;",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');",
      "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Aruba' AND cl.isofficial = 1;"
    ]
  },
  {
    "id": 714,
    "db_id": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T' ",
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND isofficial = 'T' ",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') AND isofficial = 'T' ",
      "SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba' AND countrylanguage.isofficial = 'T' ",
      "SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba' AND countrylanguage.isofficial = 1 ",
      "SELECT cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.name = 'Aruba' AND cl.isofficial = 'T' ",
      "SELECT cl.language FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND c.name = 'Aruba' AND cl.isofficial = 'T' ",
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba' LIMIT 1) AND isofficial = 1 ",
      "SELECT language FROM countrylanguage WHERE countrycode = ANY (SELECT code FROM country WHERE name = 'Aruba') AND isofficial = 1 ",
      "SELECT cl.language FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND c.name LIKE 'Aruba' AND cl.isofficial = 1"
    ],
    "gpt_answers2": [
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode ='ABW'); ",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1; ",
      "SELECT language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba' ORDER BY percentage DESC LIMIT 1; ",
      "SELECT cl.language FROM countrylanguage cl, country c WHERE cl.countrycode = c.code AND c.name = 'Aruba' ORDER BY cl.percentage DESC LIMIT 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')); ",
      "SELECT cl.language FROM countrylanguage cl INNER JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Aruba' ORDER BY cl.percentage DESC LIMIT 1; ",
      "SELECT l.language FROM country c INNER JOIN countrylanguage l ON c.code = l.countrycode WHERE c.name = 'Aruba' ORDER BY l.percentage DESC LIMIT 1; ",
      "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Aruba' ORDER BY cl.percentage DESC LIMIT 1; ",
      "SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba')  ORDER BY percentage DESC  LIMIT 1; ",
      "SELECT language  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')  AND percentage = (SELECT MAX(percentage) FROM countrylanguage)  LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND isofficial = 1;",
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba'));",
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE isofficial = 1 AND countrycode = (SELECT code FROM country WHERE name = 'Aruba'));",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') AND isofficial = 1;",
      "SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 1;",
      "SELECT language FROM countrylanguage cl INNER JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Aruba' AND cl.isofficial = 1;",
      "SELECT cl.language FROM countrylanguage cl, country c WHERE cl.countrycode = c.code AND c.name = 'Aruba' AND cl.isofficial = 1;",
      "SELECT language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Aruba' AND cl.isofficial = 1;",
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND isofficial = 'T';",
      "SELECT LANGUAGE FROM COUNTRYLANGUAGE JOIN COUNTRY ON COUNTRY.CODE = COUNTRYLANGUAGE.COUNTRYCODE WHERE COUNTRY.NAME = 'Aruba' AND COUNTRYLANGUAGE.ISOFFICIAL = 'T';"
    ]
  },
  {
    "id": 737,
    "db_id": "world_1",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode = 'ABW') AS result;",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language;",
      "SELECT COUNT(*) FROM (SELECT language FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language) AS result;",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba';",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba') AS result;",
      "SELECT COUNT(language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba' GROUP BY language;",
      "SELECT COUNT(*) FROM (SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba' GROUP BY language) AS result;",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba')) AS result;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba'));",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE localname = 'Aruba');",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE code = 'ABW');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode = 'ABW');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE localname = 'Aruba'));"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode = 'ABW') AS temp; ",
      "SELECT COUNT(*) FROM (SELECT language FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language) AS temp; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba') AS temp; ",
      "SELECT COUNT(DISTINCT(language)) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba'; ",
      "SELECT COUNT(*) FROM (SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba')) AS temp; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba')) AS temp; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE localname = 'Aruba')) AS temp; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE region = 'Aruba')) AS temp; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Aruba')) AS temp;"
    ]
  },
  {
    "id": 738,
    "db_id": "world_1",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';",
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'ABW';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba';",
      "SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba';",
      "SELECT COUNT(language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');",
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE localname = 'Aruba');"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode = 'ABW');",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba';",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba');",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba'));",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') GROUP BY countrycode;",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') GROUP BY countrycode);",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba')) AS total_languages;",
      "SELECT COUNT(*) FROM (SELECT language FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language) AS total_languages;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode = 'ABW') AS languages;",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language;",
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language;",
      "SELECT COUNT(DISTINCT language) AS language_count FROM countrylanguage WHERE countrycode = 'ABW';",
      "SELECT COUNT(*) AS language_count FROM (SELECT DISTINCT language FROM countrylanguage WHERE countrycode = 'ABW') AS languages;",
      "SELECT COUNT(language) AS language_count FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language;",
      "SELECT COUNT(*) AS language_count FROM countrylanguage WHERE countrycode = 'ABW' GROUP BY language;",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage INNER JOIN country ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba';",
      "SELECT COUNT(*) FROM (SELECT DISTINCT language FROM countrylanguage INNER JOIN country ON country.code = countrylanguage.countrycode WHERE country.name = 'Aruba') AS languages;"
    ]
  },
  {
    "id": 739,
    "db_id": "world_1",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = \"T\"; ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = \"T\"; ",
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = \"T\"; ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = \"Afghanistan\" AND isofficial = \"T\"; ",
      "SELECT COUNT(language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = \"Afghanistan\" AND isofficial = \"T\"; ",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = \"T\"; ",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = 1; ",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = true; ",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = \"Yes\"; ",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 'T';",
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 'T';",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 'T';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'; (assuming 'AFG' is the country code for Afghanistan)",
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'; (assuming 'AFG' is the country code for Afghanistan)",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'; (assuming 'AFG' is the country code for Afghanistan)",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage CL INNER JOIN country C ON CL.countrycode = C.code WHERE C.name = 'Afghanistan' AND CL.isofficial = 'T';",
      "SELECT COUNT(*) FROM countrylanguage CL INNER JOIN country C ON CL.countrycode = C.code WHERE C.name = 'Afghanistan' AND CL.isofficial = 'T';",
      "SELECT COUNT(language) FROM countrylanguage CL INNER JOIN country C ON CL.countrycode = C.code WHERE C.name = 'Afghanistan' AND CL.isofficial = 'T';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage CL, country C WHERE CL.countrycode = C.code AND C.name = 'Afghanistan' AND CL.isofficial = 'T';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = 1; ",
      "SELECT COUNT(language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = \"Afghanistan\") AND isofficial = 1; ",
      "SELECT COUNT(language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = \"Afghanistan\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(*) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = \"Afghanistan\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = \"Afghanistan\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(language) FROM countrylanguage, country WHERE countrylanguage.countrycode = country.code AND country.name = \"Afghanistan\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(*) FROM countrylanguage, country WHERE countrylanguage.countrycode = country.code AND country.name = \"Afghanistan\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage, country WHERE countrylanguage.countrycode = country.code AND country.name = \"Afghanistan\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(language) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name = \"Afghanistan\" AND countrylanguage.isofficial = 1;"
    ]
  },
  {
    "id": 740,
    "db_id": "world_1",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan')  AND isofficial = 1; ",
      "SELECT COUNT(*)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan')  AND isofficial = 1; ",
      "SELECT COUNT(language)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan')  AND isofficial = 1; ",
      "SELECT COUNT(*)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan'  AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan'  AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(*)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan'  AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan'  AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(1)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan')  AND isofficial = 1; ",
      "SELECT COUNT(*)  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan'  AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan'  AND countrylanguage.isofficial = 1;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';",
      "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 'T';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 'T';",
      "SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Afghanistan' AND countrylanguage.isofficial = 'T';",
      "SELECT COUNT(DISTINCT countrylanguage.language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Afghanistan' AND countrylanguage.isofficial = 'T';",
      "SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Afghanistan' AND countrylanguage.isofficial = 1;",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Afghanistan' AND countrylanguage.isofficial = 'true';",
      "SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Afghanistan' AND countrylanguage.isofficial = 'true';",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Afghanistan' AND countrylanguage.isofficial = 1;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan' AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan' AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(language)  FROM countrylanguage  WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 1; ",
      "SELECT COUNT(language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = 'Afghanistan' AND isofficial = 1; ",
      "SELECT COUNT(language)  FROM countrylanguage, country  WHERE countrylanguage.countrycode = country.code  AND country.name = 'Afghanistan' AND isofficial = 1; ",
      "SELECT COUNT(language)  FROM countrylanguage, country  WHERE countrylanguage.countrycode = country.code  AND country.name = 'Afghanistan' AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = 'AFG' AND isofficial = 1; ",
      "SELECT COUNT(language)  FROM countrylanguage  WHERE countrycode = 'AFG' AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = 'AFG' AND isofficial = 1;"
    ]
  },
  {
    "id": 741,
    "db_id": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.name ORDER BY COUNT(DISTINCT cl.language) DESC LIMIT 1; ",
      "SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.name HAVING COUNT(DISTINCT cl.language) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM countrylanguage GROUP BY countrycode)); ",
      "SELECT c.name FROM country c JOIN (SELECT countrycode, COUNT(*) AS lang_count FROM countrylanguage GROUP BY countrycode) cl ON c.code = cl.countrycode ORDER BY cl.lang_count DESC LIMIT 1; ",
      "SELECT c.name FROM country c WHERE c.code = ( SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1 ); ",
      "SELECT c.name FROM country c WHERE c.code = ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = ( SELECT MAX(lang_count) FROM (SELECT countrycode, COUNT(DISTINCT language) AS lang_count FROM countrylanguage GROUP BY countrycode) ) ); ",
      "SELECT c.name FROM country c WHERE c.code = ( SELECT cl.countrycode FROM countrylanguage cl JOIN ( SELECT COUNT(DISTINCT language) AS lang_count FROM countrylanguage GROUP BY countrycode ORDER BY lang_count DESC LIMIT 1 ) max_count ON cl.countrycode = max_count.countrycode ); ",
      "SELECT c1.name FROM country c1 JOIN ( SELECT countrycode, COUNT(*) AS lang_count FROM countrylanguage GROUP BY countrycode ) cl ON c1.code = cl.countrycode WHERE cl.lang_count = ( SELECT MAX(cnt) FROM ( SELECT countrycode, COUNT(*) AS cnt FROM countrylanguage GROUP BY countrycode ) ); ",
      "SELECT c.name FROM country c JOIN ( SELECT cl.countrycode, COUNT(DISTINCT language) AS lang_count FROM countrylanguage cl GROUP BY cl.countrycode ) t ON c.code = t.countrycode ORDER BY t.lang_count DESC LIMIT 1; ",
      "SELECT c.name FROM country c WHERE ( SELECT COUNT(DISTINCT language) FROM countrylanguage cl WHERE c.code = cl.countrycode GROUP BY cl.countrycode ) = ( SELECT MAX(cnt) FROM ( SELECT COUNT(DISTINCT language) AS cnt FROM countrylanguage GROUP BY countrycode ) ); ",
      "SELECT name FROM ( SELECT c.name, COUNT(DISTINCT cl.language) AS lang_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.name ORDER BY lang_count DESC ) WHERE ROWNUM = 1;"
    ],
    "gpt_answers2": [
      "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  ORDER BY COUNT(DISTINCT countrylanguage.language) DESC  LIMIT 1; ",
      "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(DISTINCT countrylanguage.language) = ( SELECT COUNT(DISTINCT language)  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(DISTINCT language) DESC  LIMIT 1 ); ",
      "SELECT country.name  FROM country  WHERE country.code = ( SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(DISTINCT language) DESC  LIMIT 1 ); ",
      "SELECT country.name  FROM country  JOIN ( SELECT countrycode, COUNT(*) as num_languages  FROM countrylanguage  GROUP BY countrycode  ORDER BY num_languages DESC  LIMIT 1 ) AS max_languages ON country.code = max_languages.countrycode; ",
      "SELECT country.name  FROM country  WHERE country.code IN ( SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  HAVING COUNT(DISTINCT language) = ( SELECT COUNT(DISTINCT language)  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(DISTINCT language) DESC  LIMIT 1 ) ); ",
      "SELECT country.name  FROM country  JOIN ( SELECT countrycode, COUNT(*) as num_languages  FROM countrylanguage  GROUP BY countrycode  ORDER BY num_languages DESC  FETCH FIRST ROW ONLY ) AS max_languages ON country.code = max_languages.countrycode; ",
      "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(DISTINCT countrylanguage.language) = ( SELECT COUNT(DISTINCT language)  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(DISTINCT language) DESC  FETCH FIRST ROW ONLY ); ",
      "SELECT country.name  FROM country  WHERE ( SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE country.code = countrylanguage.countrycode  GROUP BY countrycode  ) = ( SELECT COUNT(DISTINCT language)  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(DISTINCT language) DESC  LIMIT 1 ); ",
      "SELECT country.name  FROM country  WHERE country.code IN ( SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(DISTINCT language) DESC  FETCH FIRST ROW ONLY ); ",
      "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  ORDER BY COUNT(DISTINCT countrylanguage.language) DESC  FETCH FIRST ROW ONLY;"
    ],
    "gpt_answers3": [
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(language_count) FROM (SELECT COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode))) ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(COUNT(DISTINCT language)) FROM countrylanguage GROUP BY countrycode)) ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT COUNT(DISTINCT language) FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1)) ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1) ",
      "SELECT name FROM country WHERE code = (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(COUNT(DISTINCT language)) FROM countrylanguage GROUP BY countrycode)) ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(language) DESC LIMIT 1) ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(language) = (SELECT MAX(COUNT(language)) FROM countrylanguage GROUP BY countrycode)) ",
      "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = (SELECT MAX(language_count) FROM (SELECT COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode)) ",
      "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = (SELECT MAX(COUNT(DISTINCT language)) FROM countrylanguage GROUP BY countrycode) ",
      "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1"
    ]
  },
  {
    "id": 742,
    "db_id": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.code  ORDER BY COUNT(DISTINCT countrylanguage.language) DESC  LIMIT 1;",
      "SELECT name  FROM country  WHERE code = (SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(DISTINCT language) DESC  LIMIT 1);",
      "SELECT name  FROM country  WHERE code IN (SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  HAVING COUNT(DISTINCT language) = (SELECT MAX(lang_count)  FROM (SELECT COUNT(DISTINCT language) as lang_count  FROM countrylanguage  GROUP BY countrycode))));",
      "SELECT country.name  FROM country  JOIN (SELECT countrycode, COUNT(DISTINCT language) as lang_count  FROM countrylanguage  GROUP BY countrycode  ORDER BY lang_count DESC  LIMIT 1) AS temp ON country.code = temp.countrycode;",
      "SELECT name  FROM country  JOIN (SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(DISTINCT language) DESC  LIMIT 1) AS temp ON country.code = temp.countrycode;",
      "SELECT name  FROM country  WHERE code = (SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  ORDER BY COUNT(language) DESC  LIMIT 1);",
      "SELECT country.name  FROM country  JOIN (SELECT countrycode, COUNT(DISTINCT language) as lang_count  FROM countrylanguage  GROUP BY countrycode  HAVING COUNT(DISTINCT language) = (SELECT MAX(lang_count)  FROM (SELECT COUNT(DISTINCT language) as lang_count  FROM countrylanguage  GROUP BY countrycode)))) AS temp ON country.code = temp.countrycode;",
      "SELECT name  FROM country  WHERE code = (SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  HAVING COUNT(language) = (SELECT MAX(lang_count)  FROM (SELECT COUNT(language) as lang_count  FROM countrylanguage  GROUP BY countrycode))));",
      "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  ORDER BY COUNT(DISTINCT countrylanguage.language) DESC  LIMIT 1;",
      "SELECT name  FROM country  WHERE code = (SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  HAVING COUNT(language) = (SELECT MAX(lang_count)  FROM (SELECT COUNT(language) as lang_count  FROM countrylanguage  GROUP BY countrycode  HAVING lang_count = (SELECT MAX(lang_count)  FROM (SELECT COUNT(language) as lang_count  FROM countrylanguage  GROUP BY countrycode))))));"
    ],
    "gpt_answers2": [
      "SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(DISTINCT language) as languageCount FROM countrylanguage GROUP BY countrycode ) ) ) ",
      "SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(language) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(language) as languageCount FROM countrylanguage GROUP BY countrycode ) ) ) ",
      "SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language IN ( SELECT language FROM countrylanguage GROUP BY language HAVING COUNT(countrycode) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(countrycode) as languageCount FROM countrylanguage GROUP BY language ) ) ) ) ",
      "SELECT name FROM country WHERE code = ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(DISTINCT language) as languageCount FROM countrylanguage GROUP BY countrycode ) ) ) ",
      "SELECT c.name FROM country c JOIN ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(DISTINCT language) as languageCount FROM countrylanguage GROUP BY countrycode ) ) ) cl ON c.code = cl.countrycode ",
      "SELECT name FROM country WHERE code = ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(language) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(language) as languageCount FROM countrylanguage GROUP BY countrycode ) ) ) ",
      "SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(DISTINCT language) as languageCount FROM countrylanguage GROUP BY countrycode ) ) ) ",
      "SELECT c.name FROM country c JOIN ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(DISTINCT language) as languageCount FROM countrylanguage GROUP BY countrycode ) ) ) cl ON c.code = cl.countrycode ",
      "SELECT name FROM country WHERE code = ( SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(language) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(language) as languageCount FROM countrylanguage GROUP BY countrycode ) ) ) ",
      "SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language IN ( SELECT language FROM countrylanguage GROUP BY language HAVING COUNT(countrycode) = ( SELECT MAX(languageCount) FROM ( SELECT COUNT(countrycode) as languageCount FROM countrylanguage GROUP BY language ) ) ) )"
    ],
    "gpt_answers3": [
      "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1; ",
      "SELECT c.name FROM country c WHERE (SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode = c.code) = (SELECT MAX(lang_count) FROM (SELECT COUNT(DISTINCT language) AS lang_count FROM countrylanguage GROUP BY countrycode)); ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(language_count) FROM (SELECT countrycode, COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode))); ",
      "SELECT c.name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.countrycode = c.code GROUP BY cl.countrycode HAVING COUNT(DISTINCT cl.language) = (SELECT MAX(language_count) FROM (SELECT countrycode, COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode))); ",
      "SELECT name FROM country WHERE code = (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1); ",
      "SELECT name FROM country WHERE (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = country.code) = (SELECT MAX(lang_count) FROM (SELECT COUNT(DISTINCT language) AS lang_count FROM countrylanguage GROUP BY countrycode)); ",
      "SELECT c.name FROM country c WHERE (SELECT COUNT(DISTINCT language) FROM countrylanguage cl WHERE cl.countrycode = c.code) = (SELECT MAX(language_count) FROM (SELECT countrycode, COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode)); ",
      "SELECT c.name FROM country c JOIN (SELECT countrycode, COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode ORDER BY language_count DESC LIMIT 1) AS cl ON c.code = cl.countrycode; ",
      "SELECT name FROM country WHERE (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = country.code) = (SELECT MAX(language_count) FROM (SELECT countrycode, COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode)); ",
      "SELECT c.name FROM country c JOIN (SELECT countrycode, COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode HAVING language_count = (SELECT MAX(language_count) FROM (SELECT COUNT(DISTINCT language) AS language_count FROM countrylanguage GROUP BY countrycode))) AS cl ON c.code = cl.countrycode;"
    ]
  },
  {
    "id": 743,
    "db_id": "world_1",
    "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT continent, COUNT(DISTINCT language) as language_count  FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY continent ORDER BY language_count DESC LIMIT 1; ",
      "SELECT continent, COUNT(language) as language_count FROM ( SELECT c.continent, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.code, cl.language ) t GROUP BY continent ORDER BY language_count DESC LIMIT 1; ",
      "SELECT continent, COUNT(DISTINCT cl.language) as language_count FROM country c JOIN ( SELECT countrycode, language FROM countrylanguage GROUP BY countrycode, language ) cl ON c.code = cl.countrycode GROUP BY continent ORDER BY language_count DESC LIMIT 1; ",
      "SELECT c.continent, COUNT(DISTINCT cl.language) as language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent HAVING language_count IN ( SELECT MAX(lang_count) FROM ( SELECT c1.continent, COUNT(DISTINCT cl1.language) as lang_count FROM country c1 JOIN countrylanguage cl1 ON c1.code = cl1.countrycode GROUP BY c1.continent ) t1 ); ",
      "SELECT c1.continent, COUNT(DISTINCT cl1.language) as language_count FROM country c1 JOIN countrylanguage cl1 ON c1.code = cl1.countrycode GROUP BY c1.continent HAVING language_count = ( SELECT MAX(lang_count) as max_language_count FROM ( SELECT COUNT(DISTINCT cl2.language) as lang_count FROM country c2 JOIN countrylanguage cl2 ON c2.code = cl2.countrycode GROUP BY c2.continent ) t2 ); ",
      "SELECT c.continent, COUNT(DISTINCT cl.language) as language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent HAVING language_count = ( SELECT MAX(language_count) FROM ( SELECT COUNT(DISTINCT cl.language) as language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent ) t ); ",
      "SELECT c.continent, COUNT(DISTINCT cl.language) as language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent ORDER BY language_count DESC LIMIT 1; ",
      "SELECT c.continent, COUNT(DISTINCT cl.language) as language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE language_count = ( SELECT MAX(language_count) FROM ( SELECT COUNT(DISTINCT cl1.language) as language_count FROM country c1 JOIN countrylanguage cl1 ON c1.code = cl1.countrycode GROUP BY c1.continent ) t ) GROUP BY c.continent; ",
      "SELECT c.continent FROM country c JOIN ( SELECT countrycode, COUNT(DISTINCT language) as language_count FROM countrylanguage GROUP BY countrycode ) cl ON c.code = cl.countrycode GROUP BY c.continent HAVING COUNT(DISTINCT cl.language) >= ALL ( SELECT COUNT(DISTINCT cl1.language) FROM country c1 JOIN countrylanguage cl1 ON c1.code = cl1.countrycode GROUP BY c1.continent ); ",
      "SELECT c.continent FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent HAVING COUNT(DISTINCT cl.language) = ( SELECT COUNT(DISTINCT cl1.language) as max_language_count FROM country c1 JOIN countrylanguage cl1 ON c1.code = cl1.countrycode GROUP BY c1.continent ORDER BY max_language_count DESC LIMIT 1 );"
    ],
    "gpt_answers2": [
      "SELECT continent, COUNT(DISTINCT language) AS language_count  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  GROUP BY continent  ORDER BY language_count DESC  LIMIT 1; ",
      "SELECT continent  FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) =  (SELECT MAX(language_count) FROM (SELECT COUNT(DISTINCT language) AS language_count  FROM countrylanguage  GROUP BY countrycode) AS subquery)); ",
      "SELECT c.continent  FROM ( SELECT cl.countrycode, COUNT(DISTINCT cl.language) AS language_count  FROM countrylanguage cl  GROUP BY cl.countrycode ) AS subquery  JOIN country c ON subquery.countrycode = c.code  GROUP BY c.continent  ORDER BY MAX(subquery.language_count) DESC  LIMIT 1; ",
      "SELECT c1.continent  FROM country c1  INNER JOIN ( SELECT cl.countrycode FROM countrylanguage cl  GROUP BY cl.countrycode  HAVING COUNT(DISTINCT cl.language) = ( SELECT MAX(language_count) FROM ( SELECT COUNT(DISTINCT cl2.language) AS language_count FROM countrylanguage cl2  GROUP BY cl2.countrycode ) AS subquery ) ) AS subquery ON c1.code = subquery.countrycode; ",
      "SELECT continent  FROM country  WHERE code IN ( SELECT countrycode  FROM countrylanguage  GROUP BY countrycode  HAVING COUNT(DISTINCT language) = ( SELECT MAX(language_count)  FROM ( SELECT COUNT(DISTINCT language) AS language_count  FROM countrylanguage  GROUP BY countrycode ) AS subquery ) ); ",
      "SELECT continent FROM ( SELECT cnt.continent, ROW_NUMBER() OVER (ORDER BY cnt.language_count DESC) AS rn FROM ( SELECT c.continent, COUNT(DISTINCT cl.language) AS language_count FROM countrylanguage cl JOIN country c ON c.code = cl.countrycode GROUP BY c.continent ) AS cnt )  WHERE rn = 1; ",
      "SELECT c.continent  FROM country c  JOIN ( SELECT cl.countrycode, COUNT(DISTINCT cl.language) AS language_count  FROM countrylanguage cl  GROUP BY cl.countrycode ) AS subquery ON c.code = subquery.countrycode  GROUP BY c.continent  HAVING MAX(subquery.language_count) = ( SELECT MAX(language_count)  FROM ( SELECT COUNT(DISTINCT cl2.language) AS language_count  FROM countrylanguage cl2  GROUP BY cl2.countrycode ) AS subquery2 ); ",
      "SELECT continent  FROM ( SELECT c.continent, COUNT(DISTINCT cl.language) AS language_count  FROM countrylanguage cl  JOIN country c ON cl.countrycode = c.code  GROUP BY c.continent  ORDER BY language_count DESC  LIMIT 1 ) AS subquery; ",
      "SELECT c.continent  FROM country c  JOIN ( SELECT cl.countrycode, COUNT(DISTINCT cl.language) AS language_count  FROM countrylanguage cl  GROUP BY cl.countrycode ) AS subquery ON c.code = subquery.countrycode  GROUP BY c.continent  ORDER BY MAX(subquery.language_count) DESC  LIMIT 1; ",
      "SELECT continent  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY continent  HAVING COUNT(DISTINCT language) = ( SELECT MAX(language_count)  FROM ( SELECT COUNT(DISTINCT language) AS language_count  FROM countrylanguage  GROUP BY countrycode ) AS subquery );"
    ],
    "gpt_answers3": [
      "SELECT continent, COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING COUNT(DISTINCT language) = (SELECT COUNT(DISTINCT language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1); ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING COUNT(DISTINCT language) = (SELECT MAX(language_count) FROM (SELECT continent, COUNT(DISTINCT language) as language_count FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent)); ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1; ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING COUNT(DISTINCT language) >= ALL (SELECT COUNT(DISTINCT language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent); ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING COUNT(DISTINCT language) = (SELECT MAX(num_languages) FROM (SELECT continent, COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent)); ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1; ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING COUNT(DISTINCT language) = (SELECT COUNT(DISTINCT language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1); ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING COUNT(DISTINCT language) = (SELECT MAX(language_count) FROM (SELECT continent, COUNT(DISTINCT language) as language_count FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent)); ",
      "SELECT continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING COUNT(DISTINCT language) >= ALL (SELECT COUNT(DISTINCT language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent);"
    ]
  },
  {
    "id": 744,
    "db_id": "world_1",
    "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT continent, COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent, COUNT(*) as num_languages FROM ( SELECT DISTINCT continent, language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code ) AS languages_per_continent GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent, COUNT(language) as num_languages FROM ( SELECT continent, language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent, language ) AS languages_per_continent GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent, COUNT(language) as num_languages FROM ( SELECT continent, language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent, language HAVING COUNT(language) >= ALL ( SELECT COUNT(language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent, language ) ) AS languages_per_continent GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent, COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING COUNT(DISTINCT language) = ( SELECT MAX(num_languages) FROM ( SELECT COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ) ); ",
      "SELECT continent, COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE continent IN ( SELECT continent FROM ( SELECT continent, COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ) WHERE num_languages = ( SELECT MAX(num_languages) FROM ( SELECT COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ) ) ) GROUP BY continent; ",
      "SELECT continent, COUNT(DISTINCT language) as num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent, COUNT(*) as num_languages FROM ( SELECT DISTINCT continent, language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code ) AS languages_per_continent GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent, COUNT(language) as num_languages FROM ( SELECT continent, language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent, language ) AS languages_per_continent GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent, COUNT(language) as num_languages FROM ( SELECT continent, language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent, language HAVING COUNT(language) >= ALL ( SELECT COUNT(language) FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent, language ) ) AS languages_per_continent GROUP BY continent ORDER BY num_languages DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT continent, COUNT(DISTINCT language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY language_count DESC LIMIT 1; ",
      "SELECT continent FROM ( SELECT continent, COUNT(*) AS language_count FROM ( SELECT DISTINCT continent, language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode ) GROUP BY continent ) ORDER BY language_count DESC LIMIT 1; ",
      "SELECT continent FROM ( SELECT continent, COUNT(*) AS language_count FROM ( SELECT DISTINCT continent, language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode ) GROUP BY continent ORDER BY language_count DESC LIMIT 1 ); ",
      "SELECT continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent HAVING COUNT(DISTINCT language) = ( SELECT MAX(language_count) FROM ( SELECT COUNT(DISTINCT language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ) ); ",
      "SELECT continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1; ",
      "SELECT c.continent FROM ( SELECT cl.language, COUNT(cl.language) AS language_count, c.continent FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code GROUP BY cl.language, c.continent ORDER BY language_count DESC ) AS temp GROUP BY continent ORDER BY SUM(language_count) DESC LIMIT 1; ",
      "SELECT continent FROM country JOIN ( SELECT countrylanguage.countrycode, COUNT(DISTINCT countrylanguage.language) AS language_count FROM countrylanguage GROUP BY countrylanguage.countrycode ) AS temp ON country.code = temp.countrycode GROUP BY continent ORDER BY SUM(language_count) DESC LIMIT 1; ",
      "SELECT c.continent FROM country c JOIN ( SELECT countrylanguage.countrycode, COUNT(DISTINCT countrylanguage.language) AS language_count FROM countrylanguage GROUP BY countrylanguage.countrycode ) AS temp ON c.code = temp.countrycode GROUP BY c.continent HAVING COUNT(DISTINCT temp.language_count) = ( SELECT MAX(count_language) FROM ( SELECT COUNT(DISTINCT countrylanguage.language) AS count_language FROM countrylanguage GROUP BY countrylanguage.countrycode ) ); ",
      "SELECT continent FROM country JOIN ( SELECT countrylanguage.countrycode, COUNT(*) AS language_count FROM countrylanguage GROUP BY countrylanguage.countrycode ) AS temp ON country.code = temp.countrycode GROUP BY continent HAVING COUNT(DISTINCT temp.language_count) = ( SELECT MAX(count_language) FROM ( SELECT COUNT(*) AS count_language FROM countrylanguage GROUP BY countrylanguage.countrycode ) ); ",
      "SELECT c1.continent FROM ( SELECT c.continent, COUNT(DISTINCT cl.language) AS language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent ) AS c1 WHERE c1.language_count = ( SELECT MAX(language_count) FROM ( SELECT COUNT(DISTINCT cl.language) AS language_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent ) ) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY num_languages DESC LIMIT 1; ",
      "SELECT continent, COUNT(DISTINCT language) AS num_languages FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent HAVING num_languages = (SELECT MAX(num_languages) FROM (SELECT continent, COUNT(DISTINCT language) AS num_languages FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent)); ",
      "SELECT continent FROM country WHERE code IN (SELECT countrycode  FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(num_languages)  FROM (SELECT COUNT(DISTINCT language) AS num_languages FROM countrylanguage  GROUP BY countrycode)) ); ",
      "SELECT continent FROM country WHERE code IN (SELECT countrycode  FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT COUNT(DISTINCT language) FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1) ); ",
      "SELECT continent FROM country WHERE code IN (SELECT countrycode  FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1); ",
      "SELECT continent FROM country WHERE code IN (SELECT countrycode  FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(count_languages) FROM (SELECT COUNT(DISTINCT language) AS count_languages FROM countrylanguage  GROUP BY countrycode)) ); ",
      "SELECT continent FROM country WHERE code IN (SELECT countrycode  FROM countrylanguage GROUP BY countrycode HAVING COUNT(language) = (SELECT MAX(count_languages) FROM (SELECT COUNT(language) AS count_languages FROM countrylanguage  GROUP BY countrycode)) ); ",
      "SELECT continent FROM country WHERE code IN (SELECT countrycode  FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1); ",
      "SELECT continent FROM country WHERE code IN (SELECT countrycode  FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC FETCH FIRST 1 ROWS ONLY); ",
      "SELECT continent FROM country WHERE code IN (SELECT countrycode  FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) >= ALL (SELECT COUNT(DISTINCT language) FROM countrylanguage GROUP BY countrycode) );"
    ]
  },
  {
    "id": 745,
    "db_id": "world_1",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT c.code) FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 1 AND EXISTS (SELECT 1 FROM countrylanguage cl2 WHERE c.code = cl2.countrycode AND cl2.language = 'Dutch' AND cl2.isofficial = 1) ",
      "SELECT COUNT(DISTINCT c.code) FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode INNER JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 1 AND cl2.language = 'Dutch' AND cl2.isofficial = 1 ",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' AND isofficial = 1 AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' AND isofficial = 1) ",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE (language = 'English' OR language = 'Dutch') AND isofficial = 1 GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2 ",
      "SELECT COUNT(DISTINCT c.code) FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language = 'English' AND cl.isofficial = 1) AND EXISTS (SELECT 1 FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language = 'Dutch' AND cl.isofficial = 1) ",
      "SELECT COUNT(DISTINCT c.code) FROM country c WHERE (SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.isofficial = 1 AND cl.language IN ('English', 'Dutch')) = 2 ",
      "SELECT COUNT(DISTINCT c.code) FROM country c WHERE (SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.isofficial = 1 AND cl.language = 'English') > 0 AND (SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.isofficial = 1 AND cl.language = 'Dutch') > 0 ",
      "SELECT COUNT(DISTINCT c.code) FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 1 INNER JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'Dutch' AND cl2.isofficial = 1 ",
      "SELECT COUNT(DISTINCT c.code) FROM country c WHERE (SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language IN ('English', 'Dutch') AND cl.isofficial = 1) = 2 ",
      "SELECT COUNT(DISTINCT c.code) FROM country c WHERE (SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.isofficial = 1) = 2 AND (SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language IN ('English', 'Dutch') AND cl.isofficial = 1) = 2"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM countrylanguage WHERE language = 'English' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch'); ",
      "SELECT COUNT(*) FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'Dutch'; ",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch'); ",
      "SELECT COUNT(*) FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'Dutch'; ",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2; ",
      "SELECT COUNT(*) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2; ",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch')) GROUP BY code HAVING COUNT(DISTINCT code) = 2; ",
      "SELECT COUNT(*) FROM (SELECT DISTINCT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch')) AS subquery; ",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch'); ",
      "SELECT COUNT(countrycode) FROM (SELECT countrycode FROM countrylanguage WHERE language = 'English' INTERSECT SELECT countrycode FROM countrylanguage WHERE language = 'Dutch');"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch') AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT c.code) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'English' OR cl.language = 'Dutch' GROUP BY c.code HAVING COUNT(DISTINCT cl.language) = 2; ",
      "SELECT COUNT(DISTINCT c.code) FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 1 AND cl2.language = 'Dutch' AND cl2.isofficial = 1; ",
      "SELECT COUNT(DISTINCT cl1.countrycode) FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 1 AND cl2.language = 'Dutch' AND cl2.isofficial = 1; ",
      "SELECT COUNT(DISTINCT cl1.countrycode) FROM countrylanguage cl1, countrylanguage cl2 WHERE cl1.countrycode = cl2.countrycode AND cl1.language = 'English' AND cl1.isofficial = 1 AND cl2.language = 'Dutch' AND cl2.isofficial = 1; ",
      "SELECT COUNT(DISTINCT c.code) FROM country c, countrylanguage cl1, countrylanguage cl2 WHERE c.code = cl1.countrycode AND c.code = cl2.countrycode AND cl1.language = 'English' AND cl1.isofficial = 1 AND cl2.language = 'Dutch' AND cl2.isofficial = 1; ",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' AND isofficial = 1 INTERSECT SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Dutch' AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT c.code) FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE (cl1.language = 'English' AND cl1.isofficial = 1) AND (cl2.language = 'Dutch' AND cl2.isofficial = 1); ",
      "SELECT COUNT(DISTINCT c.code) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE (cl.language = 'English' AND cl.isofficial = 1) OR (cl.language = 'Dutch' AND cl.isofficial = 1) GROUP BY c.code HAVING COUNT(DISTINCT cl.language) = 2; ",
      "SELECT COUNT(DISTINCT c.code) FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 1 JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'Dutch' AND cl2.isofficial = 1;"
    ]
  },
  {
    "id": 746,
    "db_id": "world_1",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch');",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' OR language = 'Dutch';",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' AND language = 'Dutch';",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' UNION SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Dutch';",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch');",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'English' AND language = 'Dutch');",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch' GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2);",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT code FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY code HAVING COUNT(DISTINCT language) = 2);",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch');",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch') AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language NOT IN ('English', 'Dutch'));"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT code) FROM countrylanguage WHERE language IN ('English', 'Dutch');",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' OR language = 'Dutch';",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language LIKE 'English' OR language LIKE 'Dutch';",
      "SELECT COUNT(DISTINCT c.code) FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch');",
      "SELECT COUNT(DISTINCT c.code) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'English' OR cl.language = 'Dutch';",
      "SELECT COUNT(DISTINCT c.code) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language LIKE 'English' OR cl.language LIKE 'Dutch';",
      "SELECT COUNT(DISTINCT code) FROM countrylanguage WHERE language = 'English' UNION SELECT COUNT(DISTINCT code) FROM countrylanguage WHERE language = 'Dutch';",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'English' OR language = 'Dutch' GROUP BY language;",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY language;",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY language HAVING COUNT(DISTINCT countrycode) > 1;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'English' UNION SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'Dutch');",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch');",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'));",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch'));",
      "SELECT COUNT(*) FROM (SELECT DISTINCT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') UNION SELECT DISTINCT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch'));",
      "SELECT COUNT(*) FROM (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'English') UNION (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'Dutch');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'English') INTERSECT (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'Dutch');",
      "SELECT COUNT(*) FROM (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'English' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch'));"
    ]
  },
  {
    "id": 748,
    "db_id": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "gpt_answers1": [
      "SELECT DISTINCT c.name  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language IN ('English', 'French') GROUP BY c.name HAVING COUNT(DISTINCT cl.language) = 2; ",
      "SELECT c.name  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode  JOIN countrylanguage cl2 ON c.code = cl2.countrycode  WHERE cl1.language = 'English' AND cl2.language = 'French'; ",
      "SELECT c.name  FROM country c, countrylanguage cl1, countrylanguage cl2  WHERE c.code = cl1.countrycode  AND c.code = cl2.countrycode  AND cl1.language = 'English'  AND cl2.language = 'French'; ",
      "SELECT c.name  FROM country c  WHERE EXISTS (SELECT cl.language FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language = 'English')  AND EXISTS (SELECT cl.language FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language = 'French'); ",
      "SELECT c.name  FROM country c  WHERE (SELECT cl.language FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language = 'English')  INTERSECT  (SELECT cl.language FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language = 'French'); ",
      "SELECT c.name  FROM country c  WHERE c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')  AND c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French'); ",
      "SELECT c.name  FROM country c  INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English'  INNER JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French'; ",
      "SELECT c.name  FROM country c  JOIN (SELECT countrycode FROM countrylanguage WHERE language = 'English') cl1 ON c.code = cl1.countrycode  JOIN (SELECT countrycode FROM countrylanguage WHERE language = 'French') cl2 ON c.code = cl2.countrycode; ",
      "SELECT c.name  FROM country c  WHERE (SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language IN ('English', 'French')) = 2; ",
      "SELECT c.name  FROM country c, countrylanguage cl  WHERE c.code = cl.countrycode  AND cl.language IN ('English', 'French')  GROUP BY c.name  HAVING COUNT(DISTINCT cl.language) = 2;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT c.name FROM country c WHERE EXISTS ( SELECT 1 FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = 'English' ) AND EXISTS ( SELECT 1 FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = 'French' )  ",
      "SELECT DISTINCT c.name FROM country c INNER JOIN countrylanguage cl1 ON cl1.countrycode = c.code AND cl1.language = 'English' INNER JOIN countrylanguage cl2 ON cl2.countrycode = c.code AND cl2.language = 'French' ",
      "SELECT DISTINCT c.name FROM country c, countrylanguage cl1, countrylanguage cl2 WHERE c.code = cl1.countrycode AND c.code = cl2.countrycode  AND (cl1.language = 'English' AND cl2.language = 'French') ",
      "SELECT DISTINCT c.name FROM country c WHERE c.code IN ( SELECT cl1.countrycode FROM countrylanguage cl1, countrylanguage cl2 WHERE cl1.language = 'English' AND cl2.language = 'French' AND cl1.countrycode = cl2.countrycode ) ",
      "SELECT DISTINCT c.name FROM country c WHERE c.code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' ) AND c.code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' ) ",
      "SELECT DISTINCT c.name FROM country c WHERE c.code IN ( SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'French') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2 ) ",
      "SELECT DISTINCT c.name FROM country c INNER JOIN ( SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'French') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2 ) cl ON c.code = cl.countrycode ",
      "SELECT DISTINCT c.name FROM country c, countrylanguage cl1, countrylanguage cl2 WHERE c.code = cl1.countrycode AND c.code = cl2.countrycode  AND cl1.language = 'English' AND cl2.language = 'French' ",
      "SELECT DISTINCT c.name FROM country c WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' ) AND code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' ) ",
      "SELECT DISTINCT c.name FROM country c WHERE EXISTS ( SELECT 1 FROM countrylanguage cl1 WHERE cl1.countrycode = c.code AND cl1.language = 'English' ) AND EXISTS ( SELECT 1 FROM countrylanguage cl2 WHERE cl2.countrycode = c.code AND cl2.language = 'French' )"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT c.name  FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = \"English\" JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = \"French\" ",
      "SELECT c.name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage cl1 WHERE cl1.countrycode = c.code AND cl1.language = \"English\") AND EXISTS (SELECT 1 FROM countrylanguage cl2 WHERE cl2.countrycode = c.code AND cl2.language = \"French\") ",
      "SELECT c.name FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode INNER JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = \"English\" AND cl2.language = \"French\" ",
      "SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"English\" ) AND code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"French\" ) ",
      "SELECT DISTINCT c.name FROM country c, countrylanguage cl1, countrylanguage cl2 WHERE c.code = cl1.countrycode AND c.code = cl2.countrycode AND cl1.language = \"English\" AND cl2.language = \"French\" ",
      "SELECT c.name FROM country c, countrylanguage cl1, countrylanguage cl2 WHERE c.code = cl1.countrycode AND c.code = cl2.countrycode AND (cl1.language = \"English\" OR cl2.language = \"English\") AND (cl1.language = \"French\" OR cl2.language = \"French\") GROUP BY c.name HAVING COUNT(DISTINCT cl1.language) = 2 ",
      "SELECT c1.name FROM country c1 JOIN countrylanguage cl1 ON c1.code = cl1.countrycode AND cl1.language = \"English\" JOIN (SELECT DISTINCT cl2.countrycode FROM countrylanguage cl2 WHERE cl2.language = \"French\") AS cl2 ON c1.code = cl2.countrycode ",
      "SELECT name FROM country WHERE code = ANY ( SELECT countrycode FROM countrylanguage WHERE language = \"English\" ) AND code = ANY ( SELECT countrycode FROM countrylanguage WHERE language = \"French\" ) ",
      "SELECT name FROM ( SELECT c.name, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN (\"English\", \"French\") ) GROUP BY name HAVING COUNT(DISTINCT language) = 2 ",
      "SELECT name FROM country WHERE (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND language IN (\"English\", \"French\")) = 2"
    ]
  },
  {
    "id": 749,
    "db_id": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "SELECT DISTINCT c.name  FROM country c  INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T'  INNER JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = 'French' AND cl2.isofficial = 'T' ",
      "SELECT c.name FROM country c WHERE c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T') ",
      "SELECT c.name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = c.code AND language = 'English' AND isofficial = 'T') AND EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = c.code AND language = 'French' AND isofficial = 'T') ",
      "SELECT c.name FROM country c WHERE (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = c.code AND language IN ('English', 'French') AND isofficial = 'T') = 2 ",
      "SELECT c.name FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = 'English' AND cl1.isofficial = 'T'  WHERE EXISTS (SELECT 1 FROM countrylanguage cl2 WHERE cl2.countrycode = c.code AND cl2.language = 'French' AND cl2.isofficial = 'T') ",
      "SELECT c.name FROM country c WHERE (SELECT COUNT(*) FROM countrylanguage WHERE countrycode = c.code AND language IN ('English', 'French') AND isofficial = 'T') = 2 ",
      "SELECT c.name FROM country c WHERE c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') INTERSECT SELECT c.code FROM country c WHERE c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T') ",
      "SELECT c.name FROM country c WHERE c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND c.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T')  ",
      "SELECT c.name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = c.code AND language = 'English' AND isofficial = 'T') INTERSECT SELECT c.code FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = c.code AND language = 'French' AND isofficial = 'T') ",
      "SELECT c.name FROM country c WHERE (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = c.code AND language IN ('English', 'French') AND isofficial = 'T') = 2"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT c.name FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = \"English\" AND cl.isofficial = \"T\" AND cl.percentage > 0 AND EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = c.code AND language = \"French\" AND isofficial = \"T\" AND percentage > 0); ",
      "SELECT DISTINCT c.name FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = \"English\" AND cl1.isofficial = \"T\" AND cl1.percentage > 0 INNER JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = \"French\" AND cl2.isofficial = \"T\" AND cl2.percentage > 0; ",
      "SELECT c.name FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND cl.language IN (\"English\", \"French\") AND cl.isofficial = \"T\" AND cl.percentage > 0 GROUP BY c.name HAVING COUNT(DISTINCT cl.language) = 2; ",
      "SELECT DISTINCT c.name FROM country c WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = c.code AND language = \"English\" AND isofficial = \"T\" AND percentage > 0) AND EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = c.code AND language = \"French\" AND isofficial = \"T\" AND percentage > 0); ",
      "SELECT DISTINCT c.name FROM country c WHERE c.code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = \"T\" AND percentage > 0) AND c.code IN (SELECT countrycode FROM countrylanguage WHERE language = \"French\" AND isofficial = \"T\" AND percentage > 0); ",
      "SELECT DISTINCT c.name FROM country c WHERE c.code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = \"T\" AND percentage > 0) INTERSECT SELECT DISTINCT c.name FROM country c WHERE c.code IN (SELECT countrycode FROM countrylanguage WHERE language = \"French\" AND isofficial = \"T\" AND percentage > 0); ",
      "SELECT c.name FROM country c WHERE (SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = c.code AND language IN (\"English\", \"French\") AND isofficial = \"T\" AND percentage > 0) = 2; ",
      "SELECT DISTINCT c.name FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = \"English\" AND cl1.isofficial = \"T\" AND cl1.percentage > 0 WHERE EXISTS (SELECT 1 FROM countrylanguage cl2 WHERE cl2.countrycode = c.code AND cl2.language = \"French\" AND cl2.isofficial = \"T\" AND cl2.percentage > 0); ",
      "SELECT c.name FROM country c INNER JOIN ( SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = \"T\" AND percentage > 0 INTERSECT SELECT countrycode FROM countrylanguage WHERE language = \"French\" AND isofficial = \"T\" AND percentage > 0 ) cl ON c.code = cl.countrycode; ",
      "SELECT DISTINCT c.name FROM country c WHERE c.code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = \"T\" AND percentage > 0 ) AND c.code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"French\" AND isofficial = \"T\" AND percentage > 0 );"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = \"English\" AND cl.isofficial = 1 AND EXISTS ( SELECT 1 FROM countrylanguage cl2 WHERE cl2.countrycode = cl.countrycode AND cl2.language = \"French\" AND cl2.isofficial = 1 ) ",
      "SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode AND cl1.language = \"English\" AND cl1.isofficial = 1 JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl2.language = \"French\" AND cl2.isofficial = 1 ",
      "SELECT DISTINCT c.name FROM country c JOIN ( SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1 ) cl1 ON c.code = cl1.countrycode JOIN ( SELECT countrycode FROM countrylanguage WHERE language = \"French\" AND isofficial = 1 ) cl2 ON c.code = cl2.countrycode ",
      "SELECT DISTINCT c.name FROM country c, countrylanguage cl1, countrylanguage cl2 WHERE c.code = cl1.countrycode AND c.code = cl2.countrycode AND cl1.language = \"English\" AND cl2.language = \"French\" AND cl1.isofficial = 1 AND cl2.isofficial = 1 ",
      "SELECT DISTINCT c.name FROM country c WHERE EXISTS ( SELECT 1 FROM countrylanguage cl1 WHERE cl1.countrycode = c.code AND cl1.language = \"English\" AND cl1.isofficial = 1 ) AND EXISTS ( SELECT 1 FROM countrylanguage cl2 WHERE cl2.countrycode = c.code AND cl2.language = \"French\" AND cl2.isofficial = 1 ) ",
      "SELECT DISTINCT c.name FROM country c WHERE c.code IN ( SELECT cl1.countrycode FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode WHERE cl1.language = \"English\" AND cl1.isofficial = 1 AND cl2.language = \"French\" AND cl2.isofficial = 1 ) ",
      "SELECT DISTINCT c.name FROM country c WHERE c.code IN ( SELECT countrycode FROM countrylanguage WHERE language IN (\"English\", \"French\") AND isofficial = 1 GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2 ) ",
      "SELECT DISTINCT c.name FROM country c WHERE ( SELECT COUNT(*) FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language IN (\"English\", \"French\") AND cl.isofficial = 1 ) = 2 ",
      "SELECT DISTINCT c.name FROM country c WHERE ( SELECT COUNT(*) FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = \"English\" AND cl.isofficial = 1 ) > 0 AND ( SELECT COUNT(*) FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = \"French\" AND cl.isofficial = 1 ) > 0 ",
      "SELECT DISTINCT c.name FROM country c WHERE ( SELECT COUNT(*) FROM countrylanguage  WHERE countrycode = c.code AND language = \"English\" AND isofficial = 1 ) > 0 INTERSECT SELECT DISTINCT c.name FROM country c WHERE ( SELECT COUNT(*) FROM countrylanguage  WHERE countrycode = c.code AND language = \"French\" AND isofficial = 1 ) > 0"
    ]
  },
  {
    "id": 753,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "gpt_answers1": [
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch')) ",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch') GROUP BY region ",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' UNION SELECT countrycode FROM countrylanguage WHERE language = 'Dutch') ",
      "SELECT region FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND (language = 'English' OR language = 'Dutch')) ",
      "SELECT DISTINCT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'English' OR language = 'Dutch' ",
      "SELECT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY region HAVING language = 'English' OR language = 'Dutch' ",
      "SELECT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language IN ('English', 'Dutch') GROUP BY region ",
      "SELECT DISTINCT region FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND (language = 'English' OR language = 'Dutch')) ",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch') ",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language LIKE '%English%' OR language LIKE '%Dutch%')"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch')); ",
      "SELECT DISTINCT region FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language IN ('English', 'Dutch'); ",
      "SELECT DISTINCT country.region FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE language IN ('English', 'Dutch'); ",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch') GROUP BY region; ",
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch'); ",
      "SELECT DISTINCT region FROM countrylanguage INNER JOIN country ON country.code = countrylanguage.countrycode WHERE language = 'English' OR language= 'Dutch'; ",
      "SELECT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'English' OR language='Dutch' GROUP BY region; ",
      "SELECT DISTINCT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch'); ",
      "SELECT DISTINCT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch'); ",
      "SELECT DISTINCT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language IN ('English', 'Dutch');"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch')); ",
      "SELECT region FROM country WHERE EXISTS (SELECT * FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND language IN ('English', 'Dutch')); ",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch'); ",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch'); ",
      "SELECT region FROM country WHERE EXISTS (SELECT * FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND (language = 'English' OR language = 'Dutch')); ",
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch'); ",
      "SELECT region FROM country WHERE EXISTS (SELECT * FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND language = 'English') OR EXISTS (SELECT * FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND language = 'Dutch'); ",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' AND isofficial = 'T'); ",
      "SELECT DISTINCT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'English' OR language = 'Dutch'; ",
      "SELECT DISTINCT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language IN ('English', 'Dutch');"
    ]
  },
  {
    "id": 754,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "gpt_answers1": [
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Dutch\" OR language = \"English\"); ",
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Dutch\") OR code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN (\"Dutch\", \"English\")); ",
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Dutch\") UNION SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT DISTINCT c.region FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = \"Dutch\" OR cl.language = \"English\"; ",
      "SELECT DISTINCT c.region FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = \"Dutch\" OR cl.language = \"English\"; ",
      "SELECT DISTINCT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = \"Dutch\" OR language = \"English\"; ",
      "SELECT region FROM country WHERE code = (SELECT countrycode FROM countrylanguage WHERE language = \"Dutch\" OR language = \"English\") GROUP BY region; ",
      "SELECT region FROM country WHERE code = ANY (SELECT countrycode FROM countrylanguage WHERE language = \"Dutch\" OR language = \"English\") GROUP BY region; ",
      "SELECT region FROM country WHERE EXISTS (SELECT * FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND language = \"Dutch\" OR language = \"English\") GROUP BY region;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT region FROM country WHERE name IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English');",
      "SELECT region FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Dutch' OR language = 'English' GROUP BY region;",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English') GROUP BY region;",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' UNION SELECT countrycode FROM countrylanguage WHERE language = 'English');",
      "SELECT DISTINCT region FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Dutch' OR language = 'English';",
      "SELECT region FROM country WHERE code = ANY (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English') GROUP BY region;",
      "SELECT DISTINCT region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Dutch' OR language = 'English';",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') GROUP BY region;",
      "SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');",
      "WITH languages AS (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' UNION SELECT countrycode FROM countrylanguage WHERE language = 'English') SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM languages);"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English'); ",
      "SELECT DISTINCT region FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Dutch' OR countrylanguage.language = 'English'; ",
      "SELECT DISTINCT c.region FROM country AS c, countrylanguage AS cl WHERE c.code = cl.countrycode AND (cl.language = 'Dutch' OR cl.language = 'English'); ",
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('Dutch', 'English')); ",
      "SELECT DISTINCT c.region FROM country AS c INNER JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language IN ('Dutch', 'English'); ",
      "SELECT DISTINCT region FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language = 'Dutch' OR cl.language = 'English'; ",
      "SELECT DISTINCT c.region FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'Dutch' OR cl.language = 'English'; ",
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language LIKE '%Dutch%' OR language LIKE '%English%'); ",
      "SELECT DISTINCT c.region FROM country AS c LEFT JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language LIKE '%Dutch%' OR cl.language LIKE '%English%'; ",
      "SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language LIKE '%Dutch%')  OR code IN (SELECT countrycode FROM countrylanguage WHERE language LIKE '%English%');"
    ]
  },
  {
    "id": 755,
    "db_id": "world_1",
    "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
    "gpt_answers1": [
      "SELECT country.name  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.isofficial = 1 AND countrylanguage.language IN ('English', 'Dutch') ",
      "SELECT name  FROM country  WHERE code IN ( SELECT countrycode  FROM countrylanguage  WHERE isofficial = 1 AND language IN ('English', 'Dutch') ) ",
      "SELECT name  FROM country  WHERE code IN ( SELECT country.code  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.isofficial = 1 AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') ) ",
      "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch'  AND countrylanguage.isofficial = 1 ",
      "SELECT name  FROM country  WHERE EXISTS ( SELECT *  FROM countrylanguage  WHERE countrylanguage.countrycode = country.code  AND countrylanguage.isofficial = 1  AND countrylanguage.language IN ('English', 'Dutch') ) ",
      "SELECT c.name  FROM country c, countrylanguage cl  WHERE c.code = cl.countrycode  AND cl.isofficial = 1  AND cl.language IN ('English', 'Dutch') ",
      "SELECT name  FROM country  WHERE code IN ( SELECT DISTINCT countrycode  FROM countrylanguage  WHERE isofficial = 1  AND language = 'English'  UNION  SELECT DISTINCT countrycode  FROM countrylanguage  WHERE isofficial = 1  AND language = 'Dutch' ) ",
      "SELECT name  FROM country  WHERE EXISTS ( SELECT *  FROM countrylanguage  WHERE countrylanguage.countrycode = country.code  AND countrylanguage.isofficial = 1  AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') ) ",
      "SELECT c.name  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language = 'English'  AND cl.isofficial = 1  UNION  SELECT c.name  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language = 'Dutch'  AND cl.isofficial = 1 ",
      "SELECT c.name  FROM country c, countrylanguage cl  WHERE c.code = cl.countrycode  AND cl.language IN ('English', 'Dutch')  AND cl.isofficial = 1"
    ],
    "gpt_answers2": [
      "SELECT country.name FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch') AND isofficial = 'T') ",
      "SELECT c.name FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch') AND cl.isofficial = 'T' ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') UNION SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' AND isofficial = 'T') ",
      "SELECT c.name FROM country c JOIN countrylanguage cl1 ON cl1.countrycode = c.code AND cl1.language = 'English' AND cl1.isofficial = 'T' JOIN countrylanguage cl2 ON cl2.countrycode = c.code AND cl2.language = 'Dutch' AND cl2.isofficial = 'T' ",
      "SELECT c.name FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND (cl.language = 'English' AND cl.isofficial = 'T' OR cl.language = 'Dutch' AND cl.isofficial = 'T') ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch' AND isofficial = 'T') ",
      "SELECT c.name FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND cl.isofficial = 'T' AND (cl.language = 'English' OR cl.language = 'Dutch') ",
      "SELECT c.name FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE (cl.language = 'English' OR cl.language = 'Dutch') AND cl.isofficial = 'T' ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' AND isofficial = 'T') ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE (language = 'English' OR language = 'Dutch') AND isofficial = 'T')"
    ],
    "gpt_answers3": [
      "SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('English', 'Dutch')  AND countrylanguage.isofficial = 1; ",
      "SELECT name  FROM country  WHERE (SELECT COUNT(*)  FROM countrylanguage  WHERE countrylanguage.countrycode = country.code  AND countrylanguage.language IN ('English', 'Dutch')  AND countrylanguage.isofficial = 1) >= 1; ",
      "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  OR countrylanguage.language = 'Dutch'  AND countrylanguage.isofficial = 1; ",
      "SELECT name  FROM country  WHERE code IN (SELECT countrycode  FROM countrylanguage  WHERE language IN ('English', 'Dutch')  AND isofficial = 1); ",
      "SELECT country.name  FROM country  WHERE EXISTS (SELECT *  FROM countrylanguage  WHERE countrylanguage.countrycode = country.code  AND countrylanguage.language IN ('English', 'Dutch')  AND countrylanguage.isofficial = 1); ",
      "SELECT country.name  FROM country  WHERE country.code IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English'  AND isofficial = 1)  OR country.code IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'Dutch'  AND isofficial = 1); ",
      "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('English', 'Dutch')  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  AND countrylanguage.isofficial = 1  OR countrylanguage.language = 'Dutch'  AND countrylanguage.isofficial = 1; ",
      "SELECT country.name  FROM country  WHERE EXISTS (SELECT *  FROM countrylanguage  WHERE countrylanguage.countrycode = country.code  AND (countrylanguage.language = 'English'  OR countrylanguage.language = 'Dutch')  AND countrylanguage.isofficial = 1); ",
      "SELECT name  FROM country  WHERE code = ANY (SELECT countrycode  FROM countrylanguage  WHERE language = 'English'  AND isofficial = 1)  OR code = ANY (SELECT countrycode  FROM countrylanguage  WHERE language = 'Dutch'  AND isofficial = 1);"
    ]
  },
  {
    "id": 756,
    "db_id": "world_1",
    "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 1 AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1 AND (language = 'English' OR language = 'Dutch')) ",
      "SELECT name FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND isofficial = 1 AND (language = 'English' OR language = 'Dutch')) ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1 AND language IN ('English', 'Dutch')) ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1 AND language = 'English') UNION SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1 AND language = 'Dutch') ",
      "SELECT country.name FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.isofficial = 1 AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') ",
      "SELECT name FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND isofficial = 1 AND (language = 'English' OR language = 'Dutch')) ",
      "SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 1 AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1 AND language = 'English') OR code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1 AND language = 'Dutch') ",
      "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 1 AND countrylanguage.language IN ('English', 'Dutch')"
    ],
    "gpt_answers2": [
      "SELECT country.name FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isoffical = 1; ",
      "SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE language = 'English' AND isofficial = 1) OR code IN (SELECT countrycode FROM countrylanguage  WHERE language = 'Dutch' AND isofficial = 1); ",
      "SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE (language = 'English' OR language = 'Dutch') AND isofficial = 1) GROUP BY name; ",
      "SELECT name FROM country  WHERE EXISTS (SELECT countrycode FROM countrylanguage  WHERE (language = 'English' OR language = 'Dutch')  AND isofficial = 1 AND country.code = countrylanguage.countrycode); ",
      "SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE language IN ('English', 'Dutch') AND isofficial = 1); ",
      "SELECT DISTINCT country.name FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')  AND countrylanguage.isofficial = 1; ",
      "SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE language = 'English' AND isofficial = 1 UNION SELECT countrycode FROM countrylanguage  WHERE language = 'Dutch' AND isofficial = 1); ",
      "SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE language = 'English' AND isofficial = 1) UNION SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE language = 'Dutch' AND isofficial = 1); ",
      "SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE language IN ('English', 'Dutch') AND isofficial = 1) GROUP BY name HAVING COUNT(DISTINCT language) = 2; ",
      "SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE language IN ('English', 'Dutch') AND isofficial = 1) INTERSECT SELECT name FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage  WHERE language IN ('English', 'Dutch') AND isofficial = 1);"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" OR language = \"Dutch\") AND governmentform IS NOT NULL; ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" OR language = \"Dutch\") AND isofficial = 1; ",
      "SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN (\"English\", \"Dutch\") AND cl.isofficial = 1; ",
      "SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" OR language = \"Dutch\") AND isofficial = 'T'; ",
      "SELECT name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language IN (\"English\", \"Dutch\") AND isofficial = 1; ",
      "SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'English' OR language = 'Dutch' AND isofficial = 1; ",
      "SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language IN ('English', 'Dutch') AND isofficial = 1; ",
      "SELECT DISTINCT name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = \"English\" OR language = \"Dutch\" AND isofficial = 1; ",
      "SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (language = \"English\" OR language = \"Dutch\") AND isofficial = 1; ",
      "SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language IN ('English', 'Dutch') AND isofficial = 'T';"
    ]
  },
  {
    "id": 757,
    "db_id": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1;",
      "SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1;",
      "SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;",
      "SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language HAVING MAX(percentage) LIMIT 1;",
      "SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage);",
      "SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia'));",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia'));",
      "SELECT language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' GROUP BY language HAVING MAX(percentage) LIMIT 1;",
      "SELECT language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' GROUP BY language HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage);",
      "SELECT language FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.continent = 'Asia' GROUP BY language HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia'));"
    ],
    "gpt_answers2": [
      "SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) ORDER BY percentage DESC LIMIT 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1; ",
      "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.continent = 'Asia' GROUP BY cl.language ORDER BY SUM(cl.percentage) DESC LIMIT 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) GROUP BY language HAVING percentage = MAX(percentage); ",
      "SELECT cl.language FROM countrylanguage cl JOIN ( SELECT code FROM country WHERE continent = 'Asia' ) c ON cl.countrycode = c.code GROUP BY cl.language ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT cl.language FROM countrylanguage cl JOIN city ci ON cl.countrycode = ci.countrycode JOIN country co ON cl.countrycode = co.code WHERE co.continent = 'Asia' GROUP BY cl.language ORDER BY SUM(ci.population) DESC LIMIT 1; ",
      "SELECT cl.language FROM countrylanguage cl, country co WHERE cl.countrycode = co.code AND co.continent = 'Asia' GROUP BY cl.language HAVING cl.percentage = MAX(cl.percentage); ",
      "SELECT cl.language FROM countrylanguage cl JOIN (SELECT code FROM country WHERE continent = 'Asia') c ON cl.countrycode = c.code GROUP BY cl.language HAVING cl.percentage = ( SELECT MAX(percentage) FROM countrylanguage ); ",
      "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.continent = 'Asia' GROUP BY cl.language HAVING cl.percentage = ( SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) ); ",
      "SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) GROUP BY language HAVING MAX(percentage);"
    ],
    "gpt_answers3": [
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language HAVING SUM(percentage) = (SELECT MAX(total_percentage) FROM (SELECT SUM(percentage) AS total_percentage FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language)); ",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY COUNT(language) DESC, SUM(percentage) DESC LIMIT 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC, SUM(percentage) DESC LIMIT 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC, MAX(percentage) DESC LIMIT 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC, AVG(percentage) DESC LIMIT 1; ",
      "SELECT l.language FROM country c JOIN countrylanguage l ON c.code = l.countrycode WHERE c.continent = 'Asia' GROUP BY l.language ORDER BY SUM(l.percentage) DESC LIMIT 1; ",
      "SELECT l.language FROM country c JOIN countrylanguage l ON c.code = l.countrycode WHERE c.continent = 'Asia' GROUP BY l.language HAVING SUM(l.percentage) = (SELECT MAX(total_percentage) FROM (SELECT SUM(l1.percentage) AS total_percentage FROM country c1 JOIN countrylanguage l1 ON c1.code = l1.countrycode WHERE c1.continent = 'Asia' GROUP BY l1.language)); ",
      "SELECT l.language FROM country c, countrylanguage l WHERE c.code = l.countrycode AND c.continent = 'Asia' GROUP BY l.language ORDER BY SUM(l.percentage) DESC LIMIT 1; ",
      "SELECT l.language FROM country c, countrylanguage l WHERE c.code = l.countrycode AND c.continent = 'Asia' GROUP BY l.language HAVING SUM(l.percentage) = (SELECT MAX(total_percentage) FROM (SELECT SUM(l1.percentage) AS total_percentage FROM country c1, countrylanguage l1 WHERE c1.code = l1.countrycode AND c1.continent = 'Asia' GROUP BY l1.language));"
    ]
  },
  {
    "id": 761,
    "db_id": "world_1",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT city.name  FROM city  WHERE city.id = (SELECT city.countrycode  FROM countrylanguage  WHERE countrylanguage.language = \"English\"  GROUP BY countrylanguage.countrycode  ORDER BY SUM(city.population) DESC  LIMIT 1) ",
      "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = \"English\"  GROUP BY city.id  ORDER BY SUM(city.population) DESC  LIMIT 1 ",
      "SELECT city.name  FROM city  WHERE city.countrycode IN (SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE countrylanguage.language = \"English\")  ORDER BY city.population DESC  LIMIT 1 ",
      "SELECT city.name  FROM city  WHERE city.countrycode = (SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE countrylanguage.language = \"English\"  ORDER BY countrylanguage.percentage DESC  LIMIT 1)  ORDER BY city.population DESC  LIMIT 1 ",
      "SELECT city.name  FROM city, countrylanguage  WHERE city.countrycode = countrylanguage.countrycode  AND countrylanguage.language = \"English\"  ORDER BY city.population DESC LIMIT 1 ",
      "SELECT city.name  FROM city  WHERE city.poplulation = (SELECT MAX(city.population)  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = \"English\") ",
      "SELECT city.name  FROM city  WHERE city.id = (SELECT city.countrycode  FROM countrylanguage  WHERE countrylanguage.language = \"English\"  ORDER BY countrylanguage.percentage DESC  LIMIT 1)  ORDER BY city.population DESC  LIMIT 1 ",
      "SELECT city.name  FROM city  WHERE city.countrycode = (SELECT country.code  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = \"English\"  ORDER BY country.population DESC  LIMIT 1)  ORDER BY city.population DESC  LIMIT 1 ",
      "SELECT city.name  FROM city  WHERE city.population = (SELECT MAX(city.population)  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = \"English\")  LIMIT 1 ",
      "SELECT city.name  FROM city  LEFT JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE language = \"English\"  ORDER BY city.population DESC  LIMIT 1"
    ],
    "gpt_answers2": [
      "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE language = \"English\"  ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city, countrylanguage  WHERE city.countrycode = countrylanguage.countrycode  AND countrylanguage.language = \"English\"  ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city  INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = \"English\"  ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city  WHERE city.countrycode IN  (SELECT country.code FROM countrylanguage WHERE language = \"English\")  ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city  WHERE city.countrycode =  (SELECT country.code  FROM countrylanguage  JOIN city on countrylanguage.countrycode = city.countrycode  WHERE countrylanguage.language = \"English\"  ORDER BY city.population DESC  LIMIT 1)  ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city  WHERE city.countrycode =  (SELECT countrycode  FROM countrylanguage  WHERE language = \"English\"  ORDER BY percentage DESC  LIMIT 1)  ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city  WHERE city.countrycode =  (SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE language = \"English\"  ORDER BY percentage DESC  LIMIT 1)  ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city  WHERE city.id =  (SELECT city.id  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE language = \"English\"  ORDER BY city.population DESC  LIMIT 1) ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = \"English\"  GROUP BY city.name  ORDER BY city.population DESC  LIMIT 1; ",
      "SELECT city.name  FROM city  WHERE city.countrycode =  (SELECT country.code  FROM countrylanguage  JOIN city ON countrylanguage.countrycode = city.countrycode  WHERE countrylanguage.language = \"English\"  ORDER BY countrylanguage.percentage DESC  LIMIT 1)  ORDER BY city.population DESC  LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city, countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") ORDER BY population DESC LIMIT 1; ",
      "SELECT name FROM city WHERE countrycode IN (SELECT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\") ORDER BY population DESC LIMIT 1; ",
      "SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" ORDER BY percentage DESC LIMIT 1) ORDER BY population DESC LIMIT 1; ",
      "SELECT city.name FROM city, countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" ORDER BY city.population DESC FETCH FIRST ROW ONLY; ",
      "SELECT city.name FROM city INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC FETCH FIRST ROW ONLY; ",
      "SELECT city.name FROM city WHERE countrycode IN (SELECT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\") AND population = (SELECT MAX(population) FROM city WHERE countrycode IN (SELECT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\")) LIMIT 1; ",
      "SELECT city.name FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") AND population = (SELECT MAX(population) FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\")) LIMIT 1;"
    ]
  },
  {
    "id": 762,
    "db_id": "world_1",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city WHERE city.id = (SELECT city.id FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1); ",
      "SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") ORDER BY population DESC LIMIT 1; ",
      "SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE name = \"United States\") ORDER BY population DESC LIMIT 1; ",
      "SELECT MAX(population), name FROM city WHERE countrycode IN (SELECT code FROM country WHERE name = \"United States\") AND code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" AND city.population = (SELECT MAX(city.population) FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\") LIMIT 1; ",
      "SELECT name FROM city WHERE countrycode = (SELECT code FROM country WHERE name = \"United Kingdom\") AND id = (SELECT city.countrycode FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1); ",
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.code IN (SELECT code FROM countrylanguage WHERE language = \"English\") ORDER BY city.population DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT city.name  FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name  FROM city, country, countrylanguage WHERE city.countrycode = country.code AND country.code = countrylanguage.countrycode AND countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT MAX(city.population) AS populace FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\"; ",
      "SELECT city.name  FROM city, country, countrylanguage WHERE city.countrycode = country.code AND country.code = countrylanguage.countrycode AND countrylanguage.language = \"English\" AND city.population = (SELECT MAX(population) FROM city); ",
      "SELECT city.name  FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" GROUP BY city.name HAVING city.population = MAX(city.population); ",
      "SELECT city.name  FROM city LEFT JOIN country ON city.countrycode = country.code LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name  FROM city, country, countrylanguage WHERE city.countrycode = country.code AND country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name  FROM city LEFT JOIN country ON city.countrycode = country.code LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name  FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name  FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' GROUP BY city.name HAVING city.population = MAX(city.population);"
    ],
    "gpt_answers3": [
      "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city WHERE city.id IN (SELECT city.countrycode FROM countrylanguage WHERE countrylanguage.language = \"English\") ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city WHERE city.id = (SELECT city.countrycode FROM countrylanguage WHERE countrylanguage.language = \"English\" ORDER BY percentage DESC LIMIT 1) ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city, countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city, countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" GROUP BY city.name ORDER BY MAX(city.population) DESC LIMIT 1; ",
      "SELECT city.name FROM city, countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" GROUP BY city.name ORDER BY SUM(city.population) DESC LIMIT 1; ",
      "SELECT city.name FROM city WHERE city.countrycode IN (SELECT country.code FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"English\") ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city WHERE city.countrycode IN (SELECT country.code FROM countrylanguage WHERE countrylanguage.language = \"English\") ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = \"English\" ORDER BY city.population DESC LIMIT 1; ",
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.code IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = \"English\") ORDER BY city.population DESC LIMIT 1;"
    ]
  },
  {
    "id": 765,
    "db_id": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "gpt_answers1": [
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 0);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language != \"English\" AND isofficial = 0);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 1);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language != \"English\" AND isofficial = 1);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 0);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language != \"English\" AND isofficial = 0);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1);",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 1);"
    ],
    "gpt_answers2": [
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 'F'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 'N'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 'T'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 'Y'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language != \"English\" AND isofficial = 'F'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language != \"English\" AND isofficial = 'N'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 'T'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 'Y'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial != 'T'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial != 'Y'); "
    ],
    "gpt_answers3": [
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1); ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\")  AND code IN (SELECT countrycode FROM countrylanguage); ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1)  AND name IN (SELECT DISTINCT countrycode FROM countrylanguage); ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1)  AND code IN (SELECT DISTINCT countrycode FROM countrylanguage); ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1)  AND code IN (SELECT countrycode FROM countrylanguage WHERE language != \"English\"); ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1)  AND code IN (SELECT countrycode FROM countrylanguage WHERE language NOT LIKE \"English\"); ",
      "SELECT AVG(c.lifeexpectancy)  FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE (cl.language IS NULL OR cl.language != \"English\")  AND cl.isofficial = 0; ",
      "SELECT AVG(c.lifeexpectancy)  FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE (cl.language = \"English\" AND cl.isofficial = 0)  OR cl.language IS NULL; ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1)  AND code IN (SELECT code FROM countrylanguage); ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1)  AND code IN (SELECT code FROM countrylanguage WHERE language != \"English\");"
    ]
  },
  {
    "id": 766,
    "db_id": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "gpt_answers1": [
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T'); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') GROUP BY code; ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') HAVING COUNT(*) > 0; ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')); ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')) GROUP BY code; ",
      "SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')) HAVING COUNT(*) > 0; ",
      "SELECT AVG(lifeexpectancy) FROM country  JOIN countrylanguage ON countrylanguage.countrycode = country.code  WHERE language = 'English' AND isofficial = 'F'; ",
      "SELECT AVG(lifeexpectancy) FROM country  LEFT JOIN countrylanguage ON countrylanguage.countrycode = country.code  WHERE language = 'English' AND isofficial = 'F'; ",
      "SELECT AVG(lifeexpectancy) FROM country  INNER JOIN countrylanguage ON countrylanguage.countrycode = country.code  WHERE language = 'English' AND isofficial = 'F'; ",
      "SELECT AVG(lifeexpectancy) FROM country  RIGHT JOIN countrylanguage ON countrylanguage.countrycode = country.code  WHERE language = 'English' AND isofficial = 'F';"
    ],
    "gpt_answers2": [
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = \"T\") ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 1) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code IN (SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1)) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code IN (SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 1)) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code IN (SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\")) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code IN (SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1)) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\" AND isofficial = 1)"
    ],
    "gpt_answers3": [
      "SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = \"T\") ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN ( SELECT countrycode  FROM countrylanguage  WHERE language = \"English\"  AND isofficial = \"Y\" ) ",
      "SELECT AVG(c.lifeexpectancy)  FROM country c WHERE NOT EXISTS ( SELECT 1  FROM countrylanguage cl  WHERE cl.countrycode = c.code  AND cl.language = \"English\"  AND cl.isofficial = \"Y\" ) ",
      "SELECT AVG(c.lifeexpectancy)  FROM country c LEFT JOIN countrylanguage cl ON cl.countrycode = c.code WHERE cl.language != \"English\"  OR (cl.language = \"English\" AND cl.isofficial != \"Y\") ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN ( SELECT countrycode  FROM countrylanguage  WHERE language = \"English\" )  OR code IN ( SELECT countrycode  FROM countrylanguage  WHERE language = \"English\" AND isofficial != \"Y\" ) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN ( SELECT countrycode  FROM countrylanguage  WHERE language = \"English\" AND isofficial = \"Y\" ) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN ( SELECT countrycode  FROM countrylanguage  WHERE language = \"English\" AND isofficial = 1 ) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE NOT EXISTS ( SELECT 1  FROM countrylanguage  WHERE countrylanguage.countrycode = country.code  AND language = \"English\"  AND isofficial = 1 ) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE NOT EXISTS ( SELECT 1  FROM countrylanguage  WHERE countrylanguage.countrycode = country.code  AND language = \"English\"  AND isofficial = \"Y\" ) ",
      "SELECT AVG(lifeexpectancy)  FROM country  WHERE country.code NOT IN ( SELECT countrycode  FROM countrylanguage  WHERE language = \"English\" AND isofficial = 1 )"
    ]
  },
  {
    "id": 767,
    "db_id": "world_1",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "gpt_answers1": [
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT SUM(country.population) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != \"English\"; ",
      "SELECT SUM(country.population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English'); ",
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'English'); ",
      "SELECT SUM(country.population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English'); ",
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') GROUP BY code; ",
      "SELECT SUM(country.population) FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English'; ",
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') GROUP BY code; ",
      "SELECT SUM(country.population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');"
    ],
    "gpt_answers2": [
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage) AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = \"T\"); ",
      "SELECT SUM(c.population) FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != \"English\"; ",
      "SELECT SUM(c.population) FROM country c WHERE c.code NOT IN (SELECT cl.countrycode FROM countrylanguage cl WHERE cl.language = \"English\"); ",
      "SELECT SUM(c.population) FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language <> \"English\" OR cl.language IS NULL; ",
      "SELECT SUM(c.population) FROM country c WHERE c.code NOT IN (SELECT cl.countrycode FROM countrylanguage cl WHERE cl.language = \"English\" AND cl.isofficial = \"T\"); ",
      "SELECT SUM(c.population) FROM country c WHERE c.code NOT IN ( SELECT DISTINCT countrycode FROM countrylanguage WHERE language = \"English\" UNION SELECT DISTINCT countrycode FROM countrylanguage WHERE countrycode NOT IN (SELECT DISTINCT countrycode FROM countrylanguage) ); ",
      "SELECT SUM(c.population) FROM country c WHERE NOT EXISTS ( SELECT * FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = \"English\" ); ",
      "SELECT SUM(c.population) FROM country c WHERE NOT EXISTS ( SELECT * FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.isofficial = \"T\" AND cl.language = \"English\" ); ",
      "SELECT SUM(c.population) FROM country c WHERE NOT EXISTS ( SELECT * FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = \"English\" ) OR NOT EXISTS ( SELECT * FROM countrylanguage cl WHERE cl.countrycode = c.code );"
    ],
    "gpt_answers3": [
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT SUM(c.population) FROM country AS c LEFT JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language <> \"English\" OR cl.language IS NULL; ",
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\"); ",
      "SELECT SUM(c.population) FROM country AS c WHERE c.code NOT IN (SELECT cl.countrycode FROM countrylanguage AS cl WHERE cl.language = \"English\"); ",
      "SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> \"English\"); ",
      "SELECT SUM(c.population) FROM country c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE c.code = cl.countrycode AND language = \"English\"); ",
      "SELECT SUM(c.population) FROM country c WHERE c.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT SUM(c.population) FROM country AS c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage AS cl WHERE c.code = cl.countrycode AND language = \"English\"); ",
      "SELECT SUM(c.population) FROM country AS c LEFT JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language <> \"English\" OR cl.language IS NULL; ",
      "SELECT SUM(c.population) FROM country AS c LEFT JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language != \"English\" OR cl.language IS NULL;"
    ]
  },
  {
    "id": 768,
    "db_id": "world_1",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "gpt_answers1": [
      "SELECT SUM(population)  FROM country  WHERE code NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = \"English\"); ",
      "SELECT SUM(population)  FROM country  WHERE code NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = \"English\" AND isofficial = \"T\"); ",
      "SELECT SUM(c.population)  FROM city c  WHERE c.countrycode NOT IN (SELECT cl.countrycode  FROM countrylanguage cl  WHERE cl.language = \"English\"); ",
      "SELECT SUM(c.population)  FROM city c, countrylanguage cl  WHERE c.countrycode = cl.countrycode  AND cl.language != \"English\"; ",
      "SELECT SUM(c.population)  FROM country c  WHERE c.code NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = \"English\") AND continent != \"Antarctica\"; ",
      "SELECT SUM(c.population)  FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != \"English\"; ",
      "SELECT SUM(c.population)  FROM country c  LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language IS NULL OR cl.language != \"English\"; ",
      "SELECT SUM(population)  FROM country  WHERE code NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language LIKE \"%English%\"); ",
      "SELECT SUM(population)  FROM country  WHERE code NOT IN (SELECT cl.countrycode  FROM countrylanguage cl  WHERE cl.language = \"English\") AND code != \"GBR\"; ",
      "SELECT SUM(c.population)  FROM city c  WHERE c.countrycode NOT IN (SELECT cl.countrycode  FROM countrylanguage cl  WHERE cl.language = \"English\" AND cl.isofficial = \"T\");"
    ],
    "gpt_answers2": [
      "SELECT SUM(country.population)  FROM country  WHERE country.code NOT IN  (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language <> \"English\"); ",
      "SELECT SUM(country.population)  FROM country WHERE country.code NOT IN  (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = \"English\"); ",
      "SELECT SUM(country.population) FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> \"English\"; ",
      "SELECT SUM(country.population) FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> \"English\" GROUP BY country.code; ",
      "SELECT SUM(country.population) FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> \"English\" GROUP BY country.name; ",
      "SELECT SUM(country.population) FROM country WHERE country.code NOT IN  (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = \"English\") GROUP BY country.continent; ",
      "SELECT SUM(country.population) FROM country WHERE country.code NOT IN  (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language <> \"English\") GROUP BY country.continent; ",
      "SELECT SUM(country.population) FROM country WHERE country.code NOT IN  (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language <> \"English\") GROUP BY country.region; ",
      "SELECT COUNT(*) FROM country WHERE country.code IN  (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language <> \"English\"); ",
      "SELECT COUNT(*) FROM country WHERE country.code NOT IN  (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = \"English\");"
    ],
    "gpt_answers3": [
      "SELECT SUM(c.population)  FROM country c  WHERE c.code NOT IN (SELECT cl.countrycode  FROM countrylanguage cl  WHERE cl.language = 'English') ",
      "SELECT SUM(c.population)  FROM country c  WHERE c.code NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English') ",
      "SELECT SUM(population)  FROM country  WHERE code NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English') ",
      "SELECT SUM(c.population)  FROM country c  LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language <> 'English' OR cl.language IS NULL ",
      "SELECT SUM(c.population)  FROM country c  LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE NOT cl.language = 'English' ",
      "SELECT SUM(c.population)  FROM country c  LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE NOT cl.language = 'English' OR cl.language IS NULL ",
      "SELECT SUM(c.population)  FROM country c  LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.language <> 'English' OR cl.language IS NULL ",
      "SELECT SUM(c.population)  FROM country c  WHERE NOT EXISTS (SELECT 1  FROM countrylanguage cl  WHERE cl.language = 'English'  AND cl.countrycode = c.code) ",
      "SELECT SUM(c.population)  FROM country c  WHERE NOT EXISTS (SELECT 1  FROM countrylanguage  WHERE language = 'English'  AND countrycode = c.code) ",
      "SELECT SUM(c.population)  FROM country c  WHERE NOT EXISTS (SELECT 1  FROM countrylanguage  WHERE language = 'English'  AND countrycode = c.code)"
    ]
  },
  {
    "id": 769,
    "db_id": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 'T'; ",
      "SELECT language FROM countrylanguage WHERE countrycode = ( SELECT code FROM country WHERE headofstate = 'Beatrix' ) AND isofficial = 'T'; ",
      "SELECT language FROM countrylanguage cl, country c WHERE c.code = cl.countrycode AND c.headofstate = 'Beatrix' AND cl.isofficial = 'T'; ",
      "SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE headofstate = 'Beatrix' ) AND isofficial = 'T'; ",
      "SELECT cl.language FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'T'; ",
      "SELECT language FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND isofficial = 'T'; ",
      "SELECT language FROM countrylanguage WHERE countrycode = ( SELECT code FROM country WHERE headofstate = 'Beatrix' ) AND isofficial = 'true'; ",
      "SELECT cl.language FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND c.headofstate = 'Beatrix' AND cl.isofficial = 'true'; ",
      "SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE headofstate = 'Beatrix' ) AND isofficial = 'true'; ",
      "SELECT language FROM countrylanguage WHERE countrycode = ( SELECT code FROM country WHERE headofstate = 'Beatrix' ) AND isofficial = 1;"
    ],
    "gpt_answers2": [
      "SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code  FROM country  WHERE headofstate = 'Beatrix')  AND isofficial = 1;",
      "SELECT language  FROM countrylanguage  WHERE countrycode = (SELECT code  FROM country  WHERE headofstate = 'Beatrix')  AND isofficial = 1;",
      "SELECT language  FROM countrylanguage  WHERE countrycode = (SELECT code  FROM country  WHERE headofstate = 'Beatrix'  LIMIT 1)  AND isofficial = 1;",
      "SELECT language  FROM countrylanguage  WHERE countrycode = (SELECT code  FROM country  WHERE headofstate = 'Beatrix')  AND isofficial = 'True';",
      "SELECT cl.language  FROM countrylanguage AS cl  INNER JOIN country AS c ON cl.countrycode = c.code  WHERE c.headofstate = 'Beatrix'  AND cl.isofficial = 1;",
      "SELECT cl.language  FROM countrylanguage AS cl, country AS c  WHERE cl.countrycode = c.code  AND c.headofstate = 'Beatrix'  AND cl.isofficial = 1;",
      "SELECT cl.language  FROM countrylanguage AS cl  JOIN country AS c ON (cl.countrycode = c.code)  WHERE c.headofstate = 'Beatrix'  AND cl.isofficial = 1;",
      "SELECT cl.language  FROM countrylanguage cl, country c  WHERE cl.countrycode = c.code  AND c.headofstate = 'Beatrix'  AND cl.isofficial = 1;",
      "SELECT language  FROM countrylanguage  WHERE countrycode = (SELECT code  FROM country  WHERE headofstate like '%Beatrix%'  LIMIT 1)  AND isofficial = 1;",
      "SELECT cl.language  FROM countrylanguage AS cl  INNER JOIN country AS c ON cl.countrycode = c.code  WHERE c.headofstate LIKE '%Beatrix%'  AND cl.isofficial = 1;"
    ],
    "gpt_answers3": [
      "SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE headofstate = 'Beatrix') AND isofficial = 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix') AND isofficial = 1; ",
      "SELECT countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 1; ",
      "SELECT cl.language FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND c.headofstate = 'Beatrix' AND cl.isofficial = 1; ",
      "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 1; ",
      "SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix') AND isofficial = 'T'; ",
      "SELECT language FROM countrylanguage cl, country c WHERE cl.countrycode = c.code AND c.headofstate = 'Beatrix' AND cl.isofficial = 'T'; ",
      "SELECT language FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 'T'; ",
      "SELECT language FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 1; ",
      "SELECT cl.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix' AND cl.isofficial = 'true';"
    ]
  },
  {
    "id": 771,
    "db_id": "world_1",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE isofficial = 'T' AND indepyear < 1930; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND countrycode IN  (SELECT code FROM country WHERE indepyear < 1930); ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND countrycode IN  (SELECT code FROM country WHERE indepyear < 1930 GROUP BY code); ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND countrycode IN  (SELECT code FROM country WHERE indepyear < 1930 HAVING COUNT(*) > 0); ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND EXISTS  (SELECT code FROM country WHERE country.code = countrylanguage.countrycode AND indepyear < 1930); ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND countrycode IN  (SELECT DISTINCT code FROM country WHERE indepyear < 1930); ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND countrycode IN  (SELECT DISTINCT countrycode FROM countrylanguage WHERE countrycode IN  (SELECT code FROM country WHERE indepyear < 1930) ); ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND countrycode IN  (SELECT code FROM country WHERE indepyear < 1930)  GROUP BY isofficial; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND countrycode IN  (SELECT code FROM country WHERE indepyear < 1930)  GROUP BY language; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T' AND countrycode IN  (SELECT code FROM country WHERE indepyear < 1930)  GROUP BY countrycode;"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE isofficial = 'T' AND indepyear < 1930 ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage, country  WHERE countrylanguage.countrycode = country.code  AND isofficial = 'T'  AND indepyear < 1930 ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country  ON countrylanguage.countrycode = country.code  WHERE isofficial = 'T'  AND indepyear < 1930 ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country  USING (countrycode)  WHERE isofficial = 'T'  AND indepyear < 1930 ",
      "SELECT COUNT(DISTINCT cl.language)  FROM countrylanguage cl, country c  WHERE cl.countrycode = c.code  AND cl.isofficial = 'T'  AND c.indepyear < 1930 ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930) ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930) ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930) ",
      "SELECT COUNT(DISTINCT cl.language)  FROM countrylanguage cl  INNER JOIN country c ON cl.countrycode = c.code  WHERE cl.isofficial = 'T'  AND c.indepyear < 1930 ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930)"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE isofficial = 'T' AND countrycode IN ( SELECT code FROM country WHERE indepyear < 1930 ) ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE isofficial = 'T' AND indepyear < 1930 ",
      "SELECT COUNT(*) FROM ( SELECT DISTINCT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE isofficial = 'T' AND indepyear < 1930 ) ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage, country WHERE isofficial = 'T' AND countrylanguage.countrycode = country.code  AND indepyear < 1930 ",
      "SELECT COUNT(DISTINCT language) FROM ( SELECT * FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE isofficial = 'T' AND indepyear < 1930 ) ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE isofficial = 'T' AND countrycode IN ( SELECT code FROM country WHERE indepyear < '1930' ) ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage, country WHERE isofficial = 'T' AND country.code = countrylanguage.countrycode  AND indepyear < 1930 ",
      "SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl JOIN country co ON cl.countrycode = co.code WHERE cl.isofficial = 'T' AND co.indepyear < 1930 ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE isofficial = 'T' AND countrycode IN ( SELECT code FROM country WHERE indepyear <= 1929 ) ",
      "SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN ( SELECT code FROM country WHERE indepyear < 1930 ) AS c ON countrylanguage.countrycode = c.code WHERE isofficial = 'T'"
    ]
  },
  {
    "id": 772,
    "db_id": "world_1",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = 1 ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 1 ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930)  AND isofficial = 1 GROUP BY language ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 1 GROUP BY language ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930)  AND isofficial = 1 GROUP BY language HAVING COUNT(DISTINCT language) >= 1 ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 1 GROUP BY language HAVING COUNT(DISTINCT language) >= 1 ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930)  AND isofficial = 1 HAVING COUNT(DISTINCT language) >= 1 ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 1 HAVING COUNT(DISTINCT language) >= 1 ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = 1 UNION SELECT 0 AS total_languages ORDER BY total_languages DESC LIMIT 1 ",
      "SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 1 UNION SELECT 0 AS total_languages ORDER BY total_languages DESC LIMIT 1"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930)  AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930)  AND isofficial = 'T'; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE indepyear < 1930 AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE indepyear < 1930 AND isofficial = 'T'; ",
      "SELECT COUNT(DISTINCT countrylanguage.language)  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT countrylanguage.language)  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T'; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930)  AND isofficial = 'TRUE'; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930)  AND isofficial = 'Y'; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE indepyear < 1930 AND isofficial = 'TRUE'; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE indepyear < 1930 AND isofficial = 'Y';"
    ],
    "gpt_answers3": [
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code  FROM country  WHERE indepyear < 1930  AND name IS NOT NULL) AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code  FROM country  WHERE indepyear < 1930  AND name IS NOT NULL)  AND percentage > 0; ",
      "SELECT COUNT(DISTINCT countrylanguage.language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930  AND country.name IS NOT NULL  AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930  AND country.name IS NOT NULL  AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT cl.language)  FROM countrylanguage cl JOIN country co ON cl.countrycode = co.code  WHERE co.indepyear < 1930  AND co.name IS NOT NULL  AND cl.isofficial = 1; ",
      "SELECT COUNT(DISTINCT cl.language)  FROM countrylanguage AS cl  JOIN country AS co ON cl.countrycode = co.code  WHERE co.indepyear < 1930  AND co.name IS NOT NULL  AND cl.isofficial = 1; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code  FROM country  WHERE indepyear < 1930  AND name IS NOT NULL)  AND isofficial = 1  AND percentage > 0; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code  FROM country  WHERE indepyear < 1930  AND name IS NOT NULL)  AND percentage > 0  AND isofficial = 'T'; ",
      "SELECT COUNT(DISTINCT language)  FROM countrylanguage  WHERE countrycode IN (SELECT code  FROM country  WHERE indepyear < 1930  AND name IS NOT NULL)  AND percentage > 0  AND isofficial = TRUE; ",
      "SELECT COUNT(DISTINCT countrylanguage.language)  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.indepyear < 1930  AND country.name IS NOT NULL  AND (countrylanguage.isofficial = 1 OR countrylanguage.isofficial = 'T' OR countrylanguage.isofficial = TRUE);"
    ]
  },
  {
    "id": 773,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "gpt_answers1": [
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe'); ",
      "SELECT distinct(c.name)  FROM country c  LEFT JOIN country c2 ON c.surfacearea > c2.surfacearea  WHERE c2.continent = 'Europe'; ",
      "SELECT name  FROM country  WHERE surfacearea > ALL(SELECT surfacearea FROM country WHERE continent = 'Europe'); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MIN(surfacearea) FROM country WHERE continent = 'Europe'); ",
      "SELECT name  FROM country  WHERE surfacearea > ANY(SELECT surfacearea FROM country WHERE continent = 'Europe'); ",
      "SELECT name  FROM country  WHERE surfacearea > ANY(SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe'); ",
      "SELECT c1.name  FROM country c1  WHERE NOT EXISTS (SELECT * FROM country c2 WHERE c2.surfacearea > c1.surfacearea AND c2.continent = 'Europe'); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = 'Europe' ORDER BY surfacearea DESC LIMIT 1); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' GROUP BY surfacearea LIMIT 1); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' HAVING count(*) = 1);"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT c.name  FROM country c  WHERE c.surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe') ",
      "SELECT c.name  FROM country c  WHERE NOT EXISTS (SELECT 1 FROM country ce WHERE ce.continent = 'Europe' AND ce.surfacearea > c.surfacearea) ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe') ",
      "SELECT name  FROM country  WHERE surfacearea > ALL (SELECT surfacearea FROM country WHERE continent = 'Europe') ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = 'Europe' ORDER BY surfacearea DESC LIMIT 1) ",
      "SELECT C.name  FROM country C  WHERE NOT EXISTS (SELECT * FROM country C2 WHERE C2.continent = 'Europe' AND C2.surfacearea >= C.surfacearea) ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' GROUP BY continent) ",
      "SELECT name  FROM country  WHERE surfacearea > ANY (SELECT surfacearea FROM country WHERE continent = 'Europe') ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')  LIMIT 10 ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')  ORDER BY surfacearea DESC  LIMIT 10"
    ],
    "gpt_answers3": [
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe'); ",
      "SELECT c1.name  FROM country c1  JOIN country c2 ON c1.surfacearea > c2.surfacearea WHERE c2.continent = 'Europe'; ",
      "SELECT name  FROM country  WHERE surfacearea > ALL (SELECT surfacearea FROM country WHERE continent = 'Europe'); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = 'Europe' ORDER BY surfacearea DESC LIMIT 1); ",
      "SELECT name  FROM country  WHERE surfacearea > ANY (SELECT surfacearea FROM country WHERE continent = 'Europe'); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe') ORDER BY surfacearea DESC; ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = 'Europe') ORDER BY surfacearea DESC LIMIT 10; ",
      "SELECT name  FROM country A  WHERE NOT EXISTS (SELECT * FROM country B WHERE B.continent = 'Europe' AND A.surfacearea <= B.surfacearea); ",
      "SELECT DISTINCT c1.name  FROM country c1, country c2  WHERE c1.surfacearea > c2.surfacearea AND c2.continent = 'Europe'; ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe') FETCH FIRST 10 ROWS ONLY;"
    ]
  },
  {
    "id": 774,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "gpt_answers1": [
      "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea)  FROM country  WHERE continent = \"Europe\") ",
      "SELECT name FROM country WHERE surfacearea > ALL(SELECT surfacearea  FROM country  WHERE continent = \"Europe\") ",
      "SELECT name FROM country WHERE surfacearea > (SELECT surfacearea  FROM country  WHERE continent = \"Europe\"  ORDER BY surfacearea DESC  LIMIT 1) ",
      "SELECT c.name FROM country c JOIN (SELECT MAX(surfacearea) AS max_area  FROM country  WHERE continent = \"Europe\") e ON c.surfacearea > e.max_area ",
      "SELECT name FROM country WHERE surfacearea > ANY(SELECT surfacearea  FROM country  WHERE continent = \"Europe\") ",
      "SELECT name FROM country WHERE surfacearea > (SELECT surfacearea  FROM country  WHERE continent = \"Europe\"  ORDER BY surfacearea  LIMIT 1)  ",
      "SELECT name FROM country WHERE surfacearea > ANY(SELECT MAX(surfacearea)  FROM country  WHERE continent = \"Europe\") ",
      "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea)  FROM country WHERE continent = \"Europe\") ",
      "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM (SELECT surfacearea  FROM country  WHERE continent = \"Europe\")) ",
      "SELECT name FROM country WHERE surfacearea > (SELECT TOP 1 surfacearea  FROM country  WHERE continent = \"Europe\"  ORDER BY surfacearea DESC)"
    ],
    "gpt_answers2": [
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = \"Europe\"); ",
      "SELECT name  FROM country  WHERE surfacearea > ALL (SELECT surfacearea FROM country WHERE continent = \"Europe\"); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = \"Europe\" ORDER BY surfacearea DESC LIMIT 1); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = \"Europe\" LIMIT 1); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = \"Europe\" AND surfacearea = MAX(surfacearea)); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = \"Europe\")  ORDER BY name ASC; ",
      "SELECT c.name  FROM country c JOIN (SELECT MAX(surfacearea) AS max_area FROM country WHERE continent = \"Europe\") e WHERE c.surfacearea > e.max_area; ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent IN (SELECT DISTINCT continent FROM country WHERE continent = \"Europe\")); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT surfacearea FROM (SELECT surfacearea FROM country WHERE continent = \"Europe\" ORDER BY surfacearea DESC) LIMIT 1); ",
      "SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = \"Europe\" GROUP BY continent);"
    ],
    "gpt_answers3": [
      "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe'); ",
      "SELECT name FROM country WHERE surfacearea > ALL (SELECT surfacearea FROM country WHERE continent = 'Europe'); ",
      "SELECT name FROM country WHERE surfacearea > ANY (SELECT surfacearea FROM country WHERE continent = 'Europe'); ",
      "SELECT name FROM country WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = 'Europe' ORDER BY surfacearea DESC LIMIT 1); ",
      "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' GROUP BY continent); ",
      "SELECT name FROM country WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = 'Europe' LIMIT 1 OFFSET 0); ",
      "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' LIMIT 1); ",
      "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' HAVING continent = 'Europe'); ",
      "SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' ORDER BY surfacearea DESC); ",
      "SELECT name FROM country WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = 'Europe' AND surfacearea = (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe'));"
    ]
  },
  {
    "id": 775,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "gpt_answers1": [
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT MIN(population) FROM country WHERE continent = \"Asia\"); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < ALL (SELECT population FROM country WHERE continent = \"Asia\"); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < ANY (SELECT population FROM country WHERE continent = \"Asia\"); ",
      "SELECT c.name FROM country c JOIN (SELECT MIN(population) AS min_population FROM country WHERE continent = \"Asia\") a ON c.population < a.min_population WHERE c.continent = \"Africa\"; ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT population FROM country WHERE continent = \"Asia\" ORDER BY population ASC LIMIT 1); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT MAX(population) FROM country WHERE continent = \"Asia\"); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT TOP 1 population FROM country WHERE continent = \"Asia\" ORDER BY population ASC); ",
      "SELECT c.name FROM country c JOIN (SELECT MAX(population) AS max_population FROM country WHERE continent = \"Asia\") a ON c.population < a.max_population WHERE c.continent = \"Africa\"; ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT population FROM country WHERE continent = \"Asia\" LIMIT 1); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT population FROM city JOIN country ON city.countrycode = country.code WHERE continent = \"Asia\" ORDER BY population ASC LIMIT 1);"
    ],
    "gpt_answers2": [
      "SELECT c.name FROM country c WHERE c.continent = 'Africa' AND c.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia') ",
      "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia') ",
      "SELECT c.name FROM country c JOIN ( SELECT MIN(population) as min_pop FROM country WHERE continent = 'Asia' ) a WHERE c.continent = 'Africa' AND c.population < a.min_pop ",
      "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT population FROM country WHERE continent = 'Asia' ORDER BY population ASC LIMIT 1) ",
      "SELECT c.name FROM country c JOIN ( SELECT MIN(population) as min_pop FROM country WHERE continent = 'Asia' ) a ON c.population < a.min_pop WHERE c.continent = 'Africa' ",
      "SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia' GROUP BY continent) ",
      "SELECT c.name FROM country c WHERE c.continent = 'Africa' AND c.population < ALL (SELECT population FROM country WHERE continent = 'Asia') ",
      "SELECT name FROM country WHERE continent = 'Africa' AND population < ALL (SELECT population FROM country WHERE continent = 'Asia') ",
      "SELECT c.name FROM country c WHERE c.continent = 'Africa' AND NOT EXISTS (SELECT 1 FROM country c2 WHERE c2.continent = 'Asia' AND c.population >= c2.population) ",
      "SELECT c.name FROM country c WHERE c.continent = 'Africa' AND c.population < (SELECT AVG(population) FROM country WHERE continent = 'Asia')"
    ],
    "gpt_answers3": [
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT MIN(population) FROM country WHERE continent = \"Asia\"); ",
      "SELECT c.name FROM country c WHERE c.continent = \"Africa\" AND c.population < (SELECT MIN(population) FROM country WHERE continent = \"Asia\"); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < ALL (SELECT population FROM country WHERE continent = \"Asia\"); ",
      "SELECT c.name FROM country c WHERE c.continent = \"Africa\" AND c.population < ALL (SELECT population FROM country WHERE continent = \"Asia\"); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < ANY (SELECT population FROM country WHERE continent = \"Asia\"); ",
      "SELECT c.name FROM country c WHERE c.continent = \"Africa\" AND c.population < ANY (SELECT population FROM country WHERE continent = \"Asia\"); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT MAX(population) FROM (SELECT population FROM country WHERE continent = \"Asia\")); ",
      "SELECT c.name FROM country c WHERE c.continent = \"Africa\" AND c.population < (SELECT MAX(population) FROM (SELECT population FROM country WHERE continent = \"Asia\")); ",
      "SELECT name FROM country WHERE continent = \"Africa\" AND population < (SELECT TOP 1 population FROM country WHERE continent = \"Asia\" ORDER BY population ASC); ",
      "SELECT c.name FROM country c WHERE c.continent = \"Africa\" AND c.population < (SELECT TOP 1 population FROM country WHERE continent = \"Asia\" ORDER BY population ASC);"
    ]
  },
  {
    "id": 778,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "gpt_answers1": [
      "SELECT name  FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa') ",
      "SELECT name  FROM country  WHERE continent = 'Asia' AND population > ALL (SELECT population FROM country WHERE continent = 'Africa') ",
      "SELECT c1.name  FROM country c1  WHERE c1.continent = 'Asia'  AND c1.population >  (SELECT MAX(c2.population)  FROM country c2  WHERE c2.continent = 'Africa') ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population >  (SELECT population  FROM country  WHERE continent = 'Africa'  ORDER BY population DESC LIMIT 1) ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population >  (SELECT population  FROM country  WHERE continent = 'Africa'  ORDER BY population DESC  FETCH FIRST ROW ONLY) ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population >  (SELECT MAX(population)  FROM country  WHERE continent = 'Africa')  ORDER BY population DESC ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population >  (SELECT population  FROM country  WHERE continent = 'Africa'  ORDER BY population DESC  LIMIT 1) ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population >  (SELECT MAX(population)  FROM country  WHERE continent = 'Africa')  LIMIT 10 ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population >  (SELECT MAX(population)  FROM country  WHERE continent = 'Africa')  FETCH FIRST 10 ROWS ONLY ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population >  (SELECT MAX(population)  FROM country  WHERE continent = 'Africa')  OFFSET 0 ROWS  FETCH FIRST 10 ROWS ONLY"
    ],
    "gpt_answers2": [
      "SELECT c1.name  FROM country c1 WHERE c1.continent = \"Asia\" AND c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = \"Africa\"); ",
      "SELECT c1.name  FROM country c1 WHERE c1.continent = \"Asia\" AND c1.population > ALL (SELECT c2.population FROM country c2 WHERE c2.continent = \"Africa\"); ",
      "SELECT c1.name  FROM country c1 WHERE c1.continent = \"Asia\" AND c1.population > ANY (SELECT c2.population FROM country c2 WHERE c2.continent = \"Africa\"); ",
      "SELECT c1.name  FROM country c1 WHERE c1.continent = \"Asia\" AND c1.population > (SELECT population FROM country WHERE continent = \"Africa\" ORDER BY population DESC LIMIT 1); ",
      "SELECT c1.name  FROM country c1 INNER JOIN city ON c1.code = city.countrycode WHERE c1.continent = \"Asia\" AND c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = \"Africa\"); ",
      "SELECT c1.name  FROM country c1 WHERE c1.continent = \"Asia\" AND c1.population > (SELECT MAX(c2.population) FROM country c2 JOIN city ON c2.code = city.countrycode WHERE c2.continent = \"Africa\"); ",
      "SELECT c1.name  FROM country c1 WHERE c1.continent = \"Asia\" AND c1.population > (SELECT MAX(c2.population) FROM country c2 INNER JOIN city ON c2.code = city.countrycode WHERE c2.continent = \"Africa\"); ",
      "SELECT c1.name  FROM country c1 WHERE c1.continent = \"Asia\" AND c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = \"Africa\" LIMIT 1); ",
      "SELECT c1.name  FROM country c1 INNER JOIN countrylanguage ON c1.code = countrylanguage.countrycode WHERE c1.continent = \"Asia\" AND c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = \"Africa\"); ",
      "SELECT c1.name  FROM country c1 WHERE c1.continent = \"Asia\" AND c1.population > (SELECT MAX(c2.population) FROM country c2 INNER JOIN countrylanguage ON c2.code = countrylanguage.countrycode WHERE c2.continent = \"Africa\");"
    ],
    "gpt_answers3": [
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa'); ",
      "SELECT c.name  FROM country c, (SELECT MAX(population) as max_pop FROM country WHERE continent = 'Africa') a WHERE c.continent = 'Asia'  AND c.population > a.max_pop; ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population > (SELECT population FROM country WHERE continent = 'Africa' ORDER BY population DESC LIMIT 1); ",
      "SELECT c.name  FROM country c  INNER JOIN (SELECT MAX(population) as max_pop FROM country WHERE continent = 'Africa') a ON c.continent = 'Asia'  WHERE c.population > a.max_pop; ",
      "SELECT c.name  FROM country c  INNER JOIN (SELECT MAX(population) as max_pop FROM country WHERE continent = 'Africa') a WHERE c.continent = 'Asia'  AND c.population > a.max_pop; ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population > ALL (SELECT population FROM country WHERE continent = 'Africa'); ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population > ANY (SELECT population FROM country WHERE continent = 'Africa'); ",
      "SELECT c.name  FROM country c  WHERE c.continent = 'Asia'  AND c.population > (SELECT MAX(cc.population) FROM country cc WHERE cc.continent = 'Africa'); ",
      "SELECT name  FROM country  WHERE continent = 'Asia'  AND population > (SELECT population FROM country WHERE continent = 'Africa' ORDER BY population LIMIT 1 OFFSET (SELECT COUNT(*) FROM country WHERE continent = 'Africa')); ",
      "SELECT c.name  FROM country c  WHERE c.continent = 'Asia'  AND c.population > (SELECT MAX(clc.population) FROM countrylanguage cl, country clc WHERE cl.countrycode = clc.code AND clc.continent = 'Africa');"
    ]
  },
  {
    "id": 779,
    "db_id": "world_1",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "gpt_answers1": [
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT c.code  FROM country c LEFT JOIN countrylanguage cl ON cl.countrycode = c.code WHERE cl.language <> \"English\" OR cl.language IS NULL; ",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") GROUP BY code; ",
      "SELECT country.code  FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> \"English\" OR countrylanguage.language IS NULL; ",
      "SELECT country.code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT c.code  FROM country c WHERE NOT EXISTS (SELECT countrycode FROM countrylanguage WHERE countrycode = c.code AND language = \"English\"); ",
      "SELECT code  FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") UNION SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage); ",
      "SELECT code  FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") UNION ALL SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage); ",
      "SELECT code  FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") OR code NOT IN (SELECT countrycode FROM countrylanguage); ",
      "SELECT c.code  FROM country c LEFT OUTER JOIN countrylanguage cl ON cl.countrycode = c.code AND cl.language = \"English\" WHERE cl.countrycode IS NULL;"
    ],
    "gpt_answers2": [
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\");",
      "SELECT DISTINCT countrycode FROM countrylanguage WHERE language != \"English\";",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1);",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 'T');",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") AND code IN (SELECT countrycode FROM country);",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") GROUP BY code;",
      "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\");",
      "SELECT code FROM country EXCEPT SELECT countrycode FROM countrylanguage WHERE language = \"English\";",
      "SELECT code FROM countrylanguage GROUP BY countrycode HAVING MAX(CASE WHEN language = \"English\" THEN 1 ELSE 0 END) = 0;",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial);"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\");",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\");",
      "SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language <> \"English\" OR language IS NULL;",
      "SELECT code FROM country EXCEPT SELECT countrycode FROM countrylanguage WHERE language = \"English\";",
      "SELECT DISTINCT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language <> \"English\";",
      "SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING MAX(language <> \"English\") = 1;",
      "SELECT country.code FROM country WHERE NOT EXISTS (SELECT * FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND language = \"English\");",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" GROUP BY countrycode);",
      "SELECT c.code FROM country c WHERE NOT EXISTS (SELECT * FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = \"English\");",
      "SELECT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language <> \"English\" OR cl.language IS NULL;"
    ]
  },
  {
    "id": 780,
    "db_id": "world_1",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "gpt_answers1": [
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\");",
      "SELECT code FROM country EXCEPT SELECT countrycode FROM countrylanguage WHERE language = \"English\";",
      "SELECT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language <> \"English\" OR cl.language IS NULL;",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" GROUP BY countrycode);",
      "SELECT c.code FROM country c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE c.code = cl.countrycode AND cl.language = \"English\");",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") AND continent IS NOT NULL;",
      "SELECT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode AND cl.language = \"English\" WHERE cl.language IS NULL;",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") AND continent <> \"English\";",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") AND code IN (SELECT countrycode FROM city);",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") AND code NOT IN (SELECT countrycode FROM city);"
    ],
    "gpt_answers2": [
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != \"English\" OR cl.language IS NULL; ",
      "SELECT code FROM country WHERE code NOT EXISTS (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT code FROM country WHERE code NOT IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' GROUP BY countrycode); ",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 1); ",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T'); ",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' AND percentage > 0); ",
      "SELECT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode AND cl.language = 'English' WHERE cl.countrycode IS NULL; ",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT DISTINCT countrycode FROM countrylanguage);"
    ],
    "gpt_answers3": [
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != \"English\"; ",
      "SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != \"English\"; ",
      "SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> \"English\"; ",
      "SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\"); ",
      "SELECT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode AND cl.language != \"English\"; ",
      "SELECT code FROM country EXCEPT SELECT countrycode FROM countrylanguage WHERE language = \"English\"; ",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\") GROUP BY code; ",
      "SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language != \"English\";"
    ]
  },
  {
    "id": 782,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "gpt_answers1": [
      "SELECT DISTINCT countrycode FROM countrylanguage WHERE language != \"English\";",
      "SELECT countrycode FROM countrylanguage WHERE language != \"English\" GROUP BY countrycode;",
      "SELECT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language != \"English\";",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language != \"English\");",
      "SELECT DISTINCT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\");",
      "SELECT DISTINCT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language != \"English\";",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language NOT LIKE \"English\");",
      "SELECT DISTINCT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language != \"English\";",
      "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language != \"English\";",
      "SELECT code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND language != \"English\");"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT country.code FROM country WHERE country.code NOT IN ( SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != \"English\" ); ",
      "SELECT DISTINCT country.code FROM country WHERE country.code NOT IN ( SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language <> \"English\" ); ",
      "SELECT DISTINCT code FROM country WHERE code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language != \"English\" ); ",
      "SELECT DISTINCT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> \"English\" GROUP BY country.code; ",
      "SELECT DISTINCT code FROM country WHERE code NOT IN ( SELECT countrylanguage.countrycode FROM countrylanguage WHERE language IS NOT \"English\" ); ",
      "SELECT DISTINCT code FROM country WHERE code NOT IN ( SELECT countrylanguage.countrycode FROM countrylanguage WHERE language NOT LIKE \"English\" ); ",
      "SELECT DISTINCT country.code FROM country LEFT OUTER JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language != \"English\" WHERE countrylanguage.countrycode IS NULL; ",
      "SELECT DISTINCT country.code FROM country WHERE NOT EXISTS ( SELECT * FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.language != \"English\" ); ",
      "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != \"English\" GROUP BY country.code; ",
      "SELECT DISTINCT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language != \"English\" GROUP BY country.code;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> \"English\";",
      "SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\");",
      "SELECT countrylanguage.countrycode FROM countrylanguage LEFT JOIN country ON countrylanguage.countrycode = country.code WHERE language <> \"English\";",
      "SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\");",
      "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> \"English\";",
      "SELECT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != \"English\";",
      "SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language != \"English\";",
      "SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language != \"English\";",
      "SELECT country.code FROM country WHERE NOT EXISTS (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND country.code = countrycode);",
      "SELECT country.code FROM country EXCEPT SELECT countrycode FROM countrylanguage WHERE language = \"English\";"
    ]
  },
  {
    "id": 785,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "gpt_answers1": [
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND NOT EXISTS (SELECT * FROM countrylanguage WHERE countrycode = country.code AND language = 'English' AND isofficial = 'T') ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode AND language <> 'English' AND isofficial = 'T' WHERE country.continent = 'Europe' AND countrylanguage.countrycode IS NULL ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND language NOT IN (SELECT language FROM countrylanguage WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T') ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND language = 'English' AND isofficial = 'T') = 0 ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' GROUP BY countrycode) ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' HAVING COUNT(*) >= 1) ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') OR country.code IS NULL ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' EXCEPT SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode AND language = 'English' AND isofficial = 'T' ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') AND city.countrycode IS NOT NULL"
    ],
    "gpt_answers2": [
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'N'; ",
      "SELECT name FROM city WHERE city.countrycode IN ( SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'N' ); ",
      "SELECT name FROM city WHERE EXISTS ( SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'N' AND city.countrycode = country.code ); ",
      "SELECT name FROM city WHERE countrycode IN ( SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'N' GROUP BY country.code ); ",
      "SELECT name FROM city WHERE countrycode IN ( SELECT countrylanguage.countrycode FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'N' GROUP BY countrylanguage.countrycode ); ",
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Europe' AND NOT EXISTS ( SELECT 1 FROM countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' AND countrylanguage.isofficial = 'Y' ); ",
      "SELECT name FROM city WHERE countrycode IN ( SELECT countrylanguage.countrycode FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' GROUP BY countrylanguage.countrycode HAVING MAX(CASE WHEN countrylanguage.language = 'English' AND countrylanguage.isofficial = 'Y' THEN 1 ELSE 0 END) = 0 ); ",
      "SELECT city.name FROM city WHERE city.countrycode IN ( SELECT countrylanguage.countrycode FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' GROUP BY countrylanguage.countrycode HAVING COUNT(CASE WHEN countrylanguage.language = 'English' AND countrylanguage.isofficial = 'N' THEN 1 END) = COUNT(*) ); ",
      "SELECT city.name FROM city WHERE city.countrycode IN ( SELECT country.code FROM country WHERE country.continent = 'Europe' ) AND city.countrycode NOT IN ( SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'Y' ); ",
      "SELECT name FROM city WHERE city.countrycode IN ( SELECT country.code FROM country WHERE country.continent = 'Europe' AND country.code NOT IN ( SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'Y' ) );"
    ],
    "gpt_answers3": [
      "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language <> 'English'  AND countrylanguage.isofficial = 0;  ",
      "SELECT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = 'Europe'  AND countrylanguage.language != 'English'  AND countrylanguage.isofficial = 0;  ",
      "SELECT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = 'Europe'  AND countrylanguage.language IS NOT 'English'  AND countrylanguage.isofficial = 0;  ",
      "SELECT city.name  FROM city  JOIN country USING(code)  JOIN countrylanguage USING(countrycode)  WHERE country.continent = 'Europe'  AND countrylanguage.language != 'English'  AND countrylanguage.isofficial = 0;  ",
      "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND NOT countrylanguage.language = 'English'  AND countrylanguage.isofficial = 0;  ",
      "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language != 'English'  AND countrylanguage.isofficial = 0;  ",
      "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND NOT countrylanguage.language = 'English'  AND countrylanguage.isofficial = 0;  ",
      "SELECT city.name  FROM city  WHERE city.countrycode IN (SELECT code  FROM country  WHERE continent = 'Europe')  AND city.countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English'  AND isofficial = 1);  ",
      "SELECT city.name  FROM city  JOIN country USING (code)  JOIN countrylanguage USING (countrycode)  WHERE country.continent = 'Europe'  AND countrylanguage.language != 'English'  AND countrylanguage.isofficial = 0;  ",
      "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND NOT countrylanguage.language = 'English'  AND countrylanguage.isofficial = 0;"
    ]
  },
  {
    "id": 786,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "gpt_answers1": [
      "SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Europe') AND countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 't') ",
      "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  LEFT JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND (countrylanguage.language IS NULL OR (countrylanguage.language = 'English' AND countrylanguage.isofficial = 'f')) ",
      "SELECT name  FROM city  WHERE countrycode IN (SELECT code  FROM country  WHERE continent = 'Europe'  AND code NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English'  AND isofficial = 't')) ",
      "SELECT city.name  FROM city  JOIN country  ON city.countrycode = country.code  LEFT JOIN countrylanguage  ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND (countrylanguage.language IS NULL OR (countrylanguage.language = 'English' AND countrylanguage.isofficial = 'f')) ",
      "SELECT name  FROM city  WHERE countrycode IN (SELECT code  FROM country  WHERE continent = 'Europe')  AND countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English'  AND isofficial = 't') ",
      "SELECT name  FROM city  WHERE countrycode IN (SELECT code  FROM country  WHERE continent = 'Europe')  AND countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English')  AND countrycode IN (SELECT countrycode  FROM countrylanguage  WHERE isofficial = 'f') ",
      "SELECT name  FROM city  JOIN country  ON city.countrycode = country.code  WHERE country.continent = 'Europe'  AND city.countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English'  AND isofficial = 't') ",
      "SELECT name  FROM city  WHERE countrycode IN (SELECT code  FROM country  WHERE continent = 'Europe')  AND countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English'  AND isofficial = 't') ",
      "SELECT city.name  FROM city  JOIN country  ON city.countrycode = country.code  WHERE country.region = 'Europe'  AND city.countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = 'English'  AND isofficial = 't') ",
      "SELECT city.name  FROM city  INNER JOIN country  ON city.countrycode = country.code  INNER JOIN countrylanguage  ON city.countrycode = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language != 'English'  AND countrylanguage.isofficial != 't'"
    ],
    "gpt_answers2": [
      "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  JOIN country ON city.countrycode = country.code  WHERE country.continent = \"Europe\" AND countrylanguage.language <> \"English\" AND countrylanguage.isofficial = 0; ",
      "SELECT city.name  FROM city, countrylanguage, country  WHERE city.countrycode = countrylanguage.countrycode  AND city.countrycode = country.code  AND country.continent = \"Europe\"  AND countrylanguage.language <> \"English\"  AND countrylanguage.isofficial = 0; ",
      "SELECT name  FROM city  WHERE countrycode IN (SELECT country.code  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = \"Europe\"  AND countrylanguage.language <> \"English\"  AND countrylanguage.isofficial = 0); ",
      "SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  JOIN country ON city.countrycode = country.code  WHERE country.continent = \"Europe\"  AND countrylanguage.language <> \"English\"  AND NOT countrylanguage.isofficial; ",
      "SELECT name  FROM city  WHERE countrycode IN (SELECT country.code  FROM country  WHERE country.continent = \"Europe\"  AND country.code NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = \"English\"  AND isofficial = 1)); ",
      "SELECT c.name  FROM city c  INNER JOIN country co ON c.countrycode = co.code  WHERE co.continent = \"Europe\"  AND c.countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = \"English\"  AND isofficial = 1); ",
      "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.continent = \"Europe\"  AND city.countrycode NOT IN (SELECT countrycode  FROM countrylanguage  WHERE language = \"English\"  AND isofficial = 1); ",
      "SELECT name  FROM city  WHERE countrycode IN (SELECT country.code  FROM country  WHERE continent = \"Europe\")  AND countrycode NOT IN (SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE language = \"English\"  AND isofficial = 1); ",
      "SELECT name  FROM city  WHERE countrycode IN (SELECT country.code  FROM country  WHERE continent = \"Europe\")  AND countrycode NOT IN (SELECT countrylanguage.countrycode  FROM countrylanguage  WHERE language = \"English\"  AND isofficial = 1)  ORDER BY name ASC; ",
      "SELECT c.name  FROM city c, countrylanguage cl, country co  WHERE c.countrycode = cl.countrycode  AND c.countrycode = co.code  AND co.continent = \"Europe\"  AND cl.language <> \"English\"  AND cl.isofficial = 0;"
    ],
    "gpt_answers3": [
      "SELECT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  WHERE country.continent = \"Europe\"  AND city.countrycode NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = \"English\" AND countrylanguage.isofficial = 1); ",
      "SELECT city.name  FROM city, country  WHERE city.countrycode = country.code  AND country.continent = \"Europe\"  AND city.countrycode NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = \"English\" AND countrylanguage.isofficial = 1); ",
      "SELECT city.name  FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = \"Europe\")  AND countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1); ",
      "SELECT city.name  FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = \"Europe\")  AND countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = \"English\" AND isofficial = 1); ",
      "SELECT city.name  FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = \"Europe\")  AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" AND countrylanguage.isofficial = 1); ",
      "SELECT city.name  FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = \"Europe\")  AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" AND countrylanguage.isofficial = 1); ",
      "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  LEFT JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" AND countrylanguage.isofficial = 1 WHERE country.continent = \"Europe\"  AND countrylanguage.countrycode IS NULL; ",
      "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  LEFT JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" AND countrylanguage.isofficial = 1 WHERE country.continent = \"Europe\"  AND countrylanguage.countrycode IS NULL; ",
      "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.continent = \"Europe\"  AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" AND countrylanguage.isofficial = 1); ",
      "SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  WHERE country.continent = \"Europe\"  AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE city.countrycode = countrylanguage.countrycode AND countrylanguage.language = \"English\" AND countrylanguage.isofficial = 1);"
    ]
  },
  {
    "id": 787,
    "db_id": "world_1",
    "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
    "gpt_answers1": [
      "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name  FROM city  LEFT JOIN country ON city.countrycode = country.code  LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON countrylanguage.countrycode = country.code  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON (city.countrycode = country.code)  INNER JOIN countrylanguage ON (country.code = countrylanguage.countrycode)  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'True' ",
      "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = true ",
      "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = \"Asia\" AND countrylanguage.language = \"Chinese\" AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name FROM city, country, countrylanguage WHERE city.countrycode = country.code AND country.code = countrylanguage.countrycode AND country.continent = \"Asia\" AND countrylanguage.language = \"Chinese\" AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = \"Asia\" AND countrylanguage.language = \"Chinese\" AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent LIKE \"Asia\" AND countrylanguage.language LIKE \"Chinese\" AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent IN (\"Asia\") AND countrylanguage.language IN (\"Chinese\") AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent IN ('Asia') AND countrylanguage.language IN ('Chinese') AND countrylanguage.isofficial = 1 ",
      "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent IN ('Asia') AND countrylanguage.language IN ('Chinese') AND countrylanguage.isofficial = 'Yes' ",
      "SELECT DISTINCT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = \"Asia\" AND countrylanguage.language = \"Chinese\" AND countrylanguage.isofficial = \"Yes\" ",
      "SELECT DISTINCT city.name FROM city, country, countrylanguage WHERE city.countrycode = country.code AND country.code = countrylanguage.countrycode AND country.continent = \"Asia\" AND countrylanguage.language = \"Chinese\" AND countrylanguage.isofficial = \"Yes\" ",
      "SELECT DISTINCT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = \"Asia\" AND countrylanguage.language = \"Chinese\" AND countrylanguage.isofficial = \"Yes\""
    ],
    "gpt_answers3": [
      "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = \"Asia\"  AND countrylanguage.language = \"Chinese\"  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = \"Asia\"  AND countrylanguage.language = \"Chinese\"  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = \"Asia\"  AND countrylanguage.language = \"Chinese\"  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city  LEFT JOIN country ON city.countrycode = country.code  LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = \"Asia\"  AND countrylanguage.language = \"Chinese\"  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = \"Asia\"  AND countrylanguage.language = \"Chinese\"  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name  FROM city, country, countrylanguage  WHERE city.countrycode = country.code  AND country.code = countrylanguage.countrycode  AND country.continent = \"Asia\"  AND countrylanguage.language = \"Chinese\"  AND countrylanguage.isofficial = 1;"
    ]
  },
  {
    "id": 788,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "gpt_answers1": [
      "SELECT city.name FROM city  INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1; ",
      "SELECT name FROM city  WHERE countrycode IN (SELECT country.code FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1); ",
      "SELECT c.name FROM city c, countrylanguage cl, country co  WHERE c.countrycode = cl.countrycode AND cl.countrycode = co.code  AND co.continent = 'Asia' AND cl.language = 'Chinese' AND cl.isofficial = 1; ",
      "SELECT DISTINCT city.name FROM city, countrylanguage, country  WHERE city.countrycode = countrylanguage.countrycode  AND countrylanguage.countrycode = country.code  AND country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT name FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia')  AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1); ",
      "SELECT name FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia')  INTERSECT  SELECT name FROM city  WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1); ",
      "SELECT name FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia')  AND id IN (SELECT city.countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1); ",
      "SELECT name FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia')  AND id IN (SELECT countrylanguage.countrycode FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1); ",
      "SELECT name FROM city  WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia')  AND countrycode IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1); ",
      "SELECT name FROM city  WHERE countrycode IN (SELECT country.code FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1) AND countrycode IN (SELECT country.code FROM country WHERE continent = 'Asia' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1));"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT city.name FROM city, country, countrylanguage WHERE city.countrycode = country.code AND countrylanguage.countrycode = country.code AND country.continent = 'Asia'AND countrylanguage.language = 'Chinese'AND countrylanguage.isofficial = 1; ",
      "SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE continent = 'Asia') AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1); ",
      "SELECT DISTINCT name FROM city WHERE countrycode = (SELECT code FROM country WHERE continent = 'Asia') AND countrycode = (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1); ",
      "SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode JOIN country ON city.countrycode = country.code WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1; ",
      "SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') AND id IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1); ",
      "SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1) AND countrycode IN (SELECT code FROM country WHERE continent = 'Asia'); ",
      "SELECT name FROM city WHERE countrycode IN (SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1); ",
      "SELECT DISTINCT city.name FROM city, country, countrylanguage WHERE city.countrycode = country.code AND country.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1) AND country.continent = 'Asia'; ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1; ",
      "SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1 GROUP BY city.name;"
    ],
    "gpt_answers3": [
      "SELECT city.name FROM city, country, countrylanguage WHERE city.countrycode = country.code AND countrylanguage.countrycode = country.code AND country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1; ",
      "SELECT name FROM city WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) AND id IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1 ); ",
      "SELECT c.name FROM city c JOIN country co ON c.countrycode = co.code JOIN countrylanguage cl ON cl.countrycode = co.code WHERE co.continent = 'Asia' AND cl.language = 'Chinese' AND cl.isofficial = 1; ",
      "SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1; ",
      "SELECT DISTINCT city.name FROM city INNER JOIN country ON city.countrycode = country.code INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1; ",
      "SELECT name FROM city WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) AND countrycode IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1 ); ",
      "SELECT name FROM city WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' AND code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1 ) ); ",
      "SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND isofficial = 1; ",
      "SELECT name FROM city WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' AND code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1 ) ); ",
      "SELECT name FROM city WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) AND countrycode IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 1 );"
    ]
  },
  {
    "id": 789,
    "db_id": "world_1",
    "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "gpt_answers1": [
      "SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (SELECT MIN(population) FROM country) ",
      "SELECT country.name, country.indepyear, country.surfacearea FROM country JOIN (SELECT MIN(population) AS min_pop FROM country) AS min_pop_table WHERE country.population = min_pop_table.min_pop ",
      "SELECT c.name, c.indepyear, c.surfacearea FROM country AS c WHERE c.population = (SELECT MIN(population) FROM country) ",
      "SELECT c.name, c.indepyear, c.surfacearea FROM country AS c JOIN (SELECT MIN(population) AS min_pop FROM country) AS t WHERE c.population = t.min_pop ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) ",
      "SELECT name, indepyear, surfaceare FROM country WHERE population IN (SELECT MIN(population) FROM country) ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT population FROM country WHERE country.population = (SELECT MIN(population) FROM country)) ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population <= ALL(SELECT population FROM country) ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) ORDER BY population LIMIT 1 ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) LIMIT 1"
    ],
    "gpt_answers2": [
      "SELECT c.name, c.indepyear, c.surfacearea FROM country c WHERE c.population = (SELECT MIN(population) FROM country) ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) ",
      "SELECT c.name, c.indepyear, c.surfacearea FROM country c INNER JOIN (SELECT MIN(population) AS min_population FROM country) sub WHERE c.population = sub.min_population ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) LIMIT 1 ",
      "SELECT c.name, c.indepyear, c.surfacearea FROM country c GROUP BY c.name, c.indepyear, c.surfacearea HAVING c.population = MIN(c.population) ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) ORDER BY name DESC LIMIT 1 ",
      "SELECT c.name, c.indepyear, c.surfacearea FROM country c, (SELECT MIN(population) AS min_population FROM country) sub WHERE c.population = sub.min_population ",
      "SELECT c.name, c.indepyear, c.surfacearea FROM country c WHERE c.population = (SELECT MIN(population) FROM (SELECT * FROM country) x) ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM (SELECT * FROM country) x) ",
      "SELECT c.name, c.indepyear, c.surfacearea FROM country c WHERE c.population = (SELECT population FROM country ORDER BY population ASC LIMIT 1)"
    ],
    "gpt_answers3": [
      "SELECT name, indepyear, surfacearea  FROM country  ORDER BY population ASC  LIMIT 1 ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country) ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country) LIMIT 1 ",
      "SELECT name, indepyear, surfacearea  FROM country  ORDER BY population  LIMIT 1 ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM city) ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM city) ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM city) LIMIT 1 ",
      "SELECT name, indepyear, surfacearea  FROM country  ORDER BY population  LIMIT 1 ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM city) ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM city)"
    ]
  },
  {
    "id": 790,
    "db_id": "world_1",
    "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "gpt_answers1": [
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country); ",
      "SELECT name, indepyear, surfacearea  FROM country  ORDER BY population ASC  LIMIT 1; ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT population FROM country ORDER BY population ASC LIMIT 1); ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM (SELECT population FROM country)); ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT population FROM (SELECT population FROM country ORDER BY population ASC LIMIT 1)); ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  INNER JOIN (SELECT MIN(population) AS min_pop FROM country) AS sub  ON c.population = sub.min_pop; ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  INNER JOIN (SELECT MIN(population) AS min_pop FROM (SELECT population FROM country)) AS sub  ON c.population = sub.min_pop; ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  INNER JOIN (SELECT population FROM country ORDER BY population ASC LIMIT 1) AS sub  ON c.population = sub.population; ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  INNER JOIN (SELECT population FROM (SELECT population FROM country ORDER BY population ASC LIMIT 1)) AS sub  ON c.population = sub.population; ",
      "SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM (SELECT population FROM country ORDER BY population ASC LIMIT 1));"
    ],
    "gpt_answers2": [
      "SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (SELECT MIN(population) FROM country); ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country); ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) LIMIT 1; ",
      "SELECT c.name, c.indepyear, c.surfacearea FROM country c WHERE c.population = (SELECT MIN(population) FROM country); ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) ORDER BY name LIMIT 1; ",
      "SELECT country.name, country.indepyear, country.surfacearea FROM country JOIN (SELECT MIN(population) AS min_pop FROM country) AS sub ON country.population = sub.min_pop; ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(country.population) FROM country); ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) GROUP BY name, indepyear, surfacearea; ",
      "SELECT country.name, country.indepyear, country.surfacearea FROM country INNER JOIN (SELECT MIN(population) AS min_pop FROM country) AS sub ON country.population = sub.min_pop; ",
      "SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) AND rownum <= 1;"
    ],
    "gpt_answers3": [
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  WHERE c.population = (SELECT MIN(population) FROM city) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  JOIN city ci ON c.code = ci.countrycode  GROUP BY c.name  HAVING MIN(ci.population) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  WHERE c.population = (SELECT MIN(population)  FROM city  WHERE countrycode = c.code) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  JOIN city ci ON c.code = ci.countrycode  WHERE ci.population = (SELECT MIN(population)  FROM city) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  JOIN city ci ON c.code = ci.countrycode  WHERE ci.population = (SELECT population  FROM city  WHERE population = (SELECT MIN(population)  FROM city)) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  JOIN city ci ON c.code = ci.countrycode  WHERE ci.population = (SELECT population  FROM city  ORDER BY population ASC  LIMIT 1) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  JOIN city ci ON c.code = ci.countrycode  GROUP BY c.name  HAVING ci.population = (SELECT MIN(population)  FROM city) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  JOIN city ci ON c.code = ci.countrycode  WHERE ci.population = (SELECT MIN(population)  FROM city  GROUP BY countrycode) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  JOIN city ci ON c.code = ci.countrycode  WHERE ci.population = (SELECT population  FROM city  WHERE population = (SELECT MIN(population)  FROM city  GROUP BY countrycode)) ",
      "SELECT c.name, c.indepyear, c.surfacearea  FROM country c  JOIN city ci ON c.code = ci.countrycode  WHERE ci.population = (SELECT MIN(population)  FROM city  GROUP BY countrycode  HAVING countrycode = c.code)"
    ]
  },
  {
    "id": 797,
    "db_id": "world_1",
    "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "gpt_answers1": [
      "SELECT governmentform, SUM(population)  FROM country WHERE governmentform IN ( SELECT governmentform  FROM country WHERE lifeexpectancy > 72 ) GROUP BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform ",
      "SELECT c.governmentform, SUM(c.population)  FROM country c INNER JOIN ( SELECT governmentform  FROM country WHERE lifeexpectancy > 72 ) AS c2 ON c.governmentform = c2.governmentform GROUP BY c.governmentform ",
      "SELECT governmentform, SUM(population)  FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72 ",
      "SELECT governmentform, SUM(population)  FROM country WHERE governmentform IN ( SELECT governmentform  FROM country WHERE lifeexpectancy > 72 ) GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72 ",
      "SELECT governmentform, SUM(population)  FROM country INNER JOIN ( SELECT governmentform  FROM country WHERE lifeexpectancy > 72 ) AS c2 ON country.governmentform = c2.governmentform GROUP BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country INNER JOIN ( SELECT governmentform, AVG(lifeexpectancy) AS avg_lifeexpectancy FROM country GROUP BY governmentform HAVING avg_lifeexpectancy > 72 ) AS c2 ON country.governmentform = c2.governmentform GROUP BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country WHERE governmentform = ANY ( SELECT governmentform  FROM country WHERE lifeexpectancy > 72 ) GROUP BY governmentform ",
      "SELECT governmentform, SUM(population) FROM country WHERE governmentform IN ( SELECT governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform ",
      "SELECT c.governmentform, SUM(c.population) FROM country c WHERE c.governmentform IN ( SELECT governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72 ) GROUP BY c.governmentform"
    ],
    "gpt_answers2": [
      "SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) as total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) as total_population FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72; ",
      "SELECT governmentform, SUM(population) as total_population FROM country INNER JOIN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) AS subquery ON country.governmentform = subquery.governmentform GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) as total_population FROM country WHERE EXISTS (SELECT 1 FROM country WHERE governmentform = country.governmentform AND lifeexpectancy > 72) GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) as total_population FROM country WHERE EXISTS (SELECT 1 FROM country WHERE governmentform = country.governmentform) AND AVG(lifeexpectancy) > 72 GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72; ",
      "SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72) GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform, lifeexpectancy HAVING AVG(lifeexpectancy) > 72; ",
      "SELECT governmentform, SUM(population) as total_population FROM country INNER JOIN (SELECT governmentform FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72) AS subquery ON country.governmentform = subquery.governmentform GROUP BY governmentform;"
    ],
    "gpt_answers3": [
      "SELECT governmentform, SUM(population)  FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) FROM country WHERE EXISTS (SELECT 1 FROM country WHERE governmentform = c.governmentform AND lifeexpectancy > 72) GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72; ",
      "SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform HAVING AVG(lifeexpectancy) > (SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = c.governmentform); ",
      "SELECT DISTINCT c.governmentform, SUM(c.population) FROM country c INNER JOIN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) sub ON c.governmentform = sub.governmentform GROUP BY c.governmentform; ",
      "SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform ORDER BY governmentform DESC; ",
      "SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform ORDER BY SUM(population) DESC; ",
      "SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform ORDER BY population DESC; ",
      "SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (SELECT governmentform FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform ORDER BY AVG(population) DESC; ",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;"
    ]
  },
  {
    "id": 798,
    "db_id": "world_1",
    "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "gpt_answers1": [
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;",
      "SELECT governmentform, SUM(population) FROM country WHERE code IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE AVG(lifeexpectancy) > 72) GROUP BY governmentform;",
      "SELECT governmentform, SUM(population) FROM country WHERE code IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE lifeexpectancy > 72) GROUP BY governmentform;",
      "SELECT governmentform, SUM(population) FROM country WHERE code IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE countrycode IN (SELECT DISTINCT countrycode FROM country WHERE lifeexpectancy > 72)) GROUP BY governmentform;",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 AND code IN (SELECT DISTINCT countrycode FROM countrylanguage) GROUP BY governmentform;",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 AND code IN (SELECT DISTINCT countrycode FROM countrylanguage GROUP BY countrycode HAVING AVG(lifeexpectancy) > 72) GROUP BY governmentform;",
      "SELECT governmentform, SUM(population) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE lifeexpectancy > 72 GROUP BY governmentform;",
      "SELECT governmentform, SUM(population) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE code IN (SELECT DISTINCT countrycode FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform;",
      "SELECT governmentform, SUM(population) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.countrycode IN (SELECT DISTINCT countrycode FROM country WHERE lifeexpectancy > 72) GROUP BY governmentform;"
    ],
    "gpt_answers2": [
      "SELECT governmentform, SUM(population)  FROM country  WHERE governmentform IN ( SELECT governmentform  FROM country  WHERE lifeexpectancy > 72 ) GROUP BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72 GROUP BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY SUM(population) DESC ",
      "SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING SUM(population) > 0 ",
      "SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING SUM(population) > 0 ORDER BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country  JOIN city ON country.code = city.countrycode WHERE lifeexpectancy > 72 GROUP BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country  JOIN city ON country.code = city.countrycode WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING SUM(population) > 0 ",
      "SELECT governmentform, SUM(population)  FROM country  JOIN city ON country.code = city.countrycode WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY governmentform ",
      "SELECT governmentform, SUM(population)  FROM country  JOIN city ON country.code = city.countrycode WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY SUM(population) DESC"
    ],
    "gpt_answers3": [
      "SELECT governmentform, SUM(population)  FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform; ",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY 1; ",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY governmentform; ",
      "SELECT DISTINCT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform; ",
      "SELECT DISTINCT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY governmentform; ",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING SUM(population) > 0; ",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform HAVING SUM(population) > 0 ORDER BY governmentform; ",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY 2 DESC; ",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY SUM(population) DESC; ",
      "SELECT governmentform, SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY 2 DESC, governmentform;"
    ]
  },
  {
    "id": 811,
    "db_id": "world_1",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "gpt_answers1": [
      "SELECT SUM(country.population), AVG(country.surfacearea) FROM country WHERE country.continent = \"North America\"  AND country.surfacearea > 3000; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = \"North America\"  AND surfacearea > 3000; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = \"North America\"  AND surfacearea > 3000 AND country.code IN (SELECT countrycode FROM city); ",
      "SELECT SUM(population), AVG(surfacearea) FROM country JOIN city ON country.code = city.countrycode WHERE continent = \"North America\"  AND surfacearea > 3000; ",
      "SELECT SUM(country.population), AVG(country.surfacearea) FROM country JOIN city ON country.code = city.countrycode WHERE country.continent = \"North America\"  AND country.surfacearea > 3000; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country INNER JOIN city ON country.code = city.countrycode WHERE continent = \"North America\"  AND surfacearea > 3000; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country LEFT JOIN city ON country.code = city.countrycode WHERE continent = \"North America\"  AND surfacearea > 3000; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country RIGHT JOIN city ON country.code = city.countrycode WHERE continent = \"North America\"  AND surfacearea > 3000; ",
      "SELECT SUM(country.population), AVG(country.surfacearea) FROM country, city WHERE country.code = city.countrycode AND country.continent = \"North America\"  AND country.surfacearea > 3000; ",
      "SELECT SUM(country.population), AVG(country.surfacearea) FROM country, city WHERE country.code = city.countrycode AND country.continent = \"North America\"  AND country.surfacearea > 3000 GROUP BY country.code;"
    ],
    "gpt_answers2": [
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_area FROM country INNER JOIN city ON country.code = city.countrycode WHERE country.continent = 'North America' AND country.surfacearea > 3000; ",
      "SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS average_area FROM country AS c, city AS ct WHERE c.code = ct.countrycode AND c.continent = 'North America' AND c.surfacearea > 3000; ",
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent; ",
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000 HAVING COUNT(*) >= 1; ",
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country JOIN city ON country.code = city.countrycode WHERE continent = 'North America' AND surfacearea > 3000; ",
      "SELECT SUM(population) AS total_population, AVG(country.surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000; ",
      "SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS average_area FROM country AS c WHERE c.continent = 'North America' AND c.surfacearea > 3000; ",
      "SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS average_area FROM country c INNER JOIN city ct ON c.code = ct.countrycode WHERE c.continent = 'North America' AND c.surfacearea > 3000; ",
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent;"
    ],
    "gpt_answers3": [
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS avg_area FROM country WHERE country.continent = \"North America\" AND country.surfacearea > 3000; ",
      "SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS avg_area FROM country AS c WHERE c.continent = \"North America\" AND c.surfacearea > 3000; ",
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS avg_area FROM country WHERE continent = \"North America\" AND surfacearea > 3000; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS avg_area FROM country JOIN city ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = \"North America\" AND country.surfacearea > 3000; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS avg_area FROM country INNER JOIN city ON country.code = city.countrycode INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = \"North America\" AND country.surfacearea > 3000; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS avg_area FROM country JOIN city ON country.code = city.countrycode AND country.surfacearea > 3000 WHERE country.continent = \"North America\"; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS avg_area FROM country JOIN city ON country.code = city.countrycode WHERE country.surfacearea > 3000 AND country.continent = \"North America\"; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS avg_area FROM country INNER JOIN city ON country.code = city.countrycode WHERE country.surfacearea > 3000 AND country.continent = \"North America\"; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS avg_area FROM country JOIN city ON country.code = city.countrycode JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = \"North America\" AND country.surfacearea > 3000; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS avg_area FROM country INNER JOIN city ON country.code = city.countrycode INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = \"North America\" AND country.surfacearea > 3000;"
    ]
  },
  {
    "id": 812,
    "db_id": "world_1",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "gpt_answers1": [
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
      "SELECT total(population), avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' HAVING surfacearea > 3000;",
      "SELECT total(population), avg(surfacearea) FROM country WHERE continent = 'North America' HAVING surfacearea > 3000;",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent;",
      "SELECT total(population), avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent;",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 LIMIT 1;",
      "SELECT total(population), avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 LIMIT 1;",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 ORDER BY population DESC LIMIT 1;",
      "SELECT total(population), avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 ORDER BY population DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000; ",
      "SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS average_surface_area FROM country c WHERE c.continent = 'North America' AND c.surfacearea > 3000; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_surface_area FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000; ",
      "SELECT SUM(population) total_population, AVG(surfacearea) average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000; ",
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surface_area FROM country WHERE continent = 'North America'  HAVING average_surface_area > 3000; ",
      "SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS average_surface_area FROM country AS c WHERE c.continent = 'North America' AND c.surfacearea > 3000; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_surface_area FROM country AS country WHERE country.continent = 'North America' AND country.surfacearea > 3000; ",
      "SELECT SUM(population) total_population, AVG(surfacearea) average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent; ",
      "SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent; ",
      "SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent;"
    ],
    "gpt_answers3": [
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > (SELECT MAX(surfacearea) from country WHERE continent = 'North America'); ",
      "SELECT SUM(country.population), AVG(country.surfacearea) FROM country INNER JOIN city ON country.code = city.countrycode WHERE country.continent = 'North America' AND country.surfacearea > 3000; ",
      "SELECT SUM(country.population), AVG(country.surfacearea)  FROM country INNER JOIN city ON city.countrycode = country.code WHERE country.continent = 'North America' AND country.surfacearea > 3000; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent; ",
      "SELECT SUM(country.population), AVG(country.surfacearea) FROM country JOIN city ON country.code = city.countrycode WHERE country.continent = 'North America' AND country.surfacearea > 3000 GROUP BY country.continent; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' HAVING surfacearea > 3000; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent, surfacearea; ",
      "SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent, surfacearea ORDER BY population DESC;"
    ]
  },
  {
    "id": 817,
    "db_id": "world_1",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "gpt_answers1": [
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage) GROUP BY country.name; ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' GROUP BY country.name HAVING countrylanguage.percentage = MAX(countrylanguage.percentage); ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.isofficial = 'T' AND countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage) GROUP BY country.name; ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = country.code); ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = country.code) GROUP BY country.name; ",
      "SELECT country.name, language FROM country LEFT JOIN ( SELECT countrycode, language FROM countrylanguage WHERE percentage = ( SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = country.code ) ) AS cl ON country.code = cl.countrycode; ",
      "SELECT c.name, l.language FROM ( SELECT c.name, cl.language, ROW_NUMBER() OVER (PARTITION BY c.code ORDER BY cl.percentage DESC) AS rn FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode ) AS result WHERE result.rn = 1; ",
      "SELECT country.name, language FROM country JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code); ",
      "SELECT country.name, countrylanguage.language FROM country JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.percentage = ( SELECT MAX(percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code ); ",
      "SELECT DISTINCT c.name, cl.language FROM country c INNER JOIN countrylanguage cl ON c.code=cl.countrycode WHERE cl.percentage=(SELECT MAX(percentage) FROM countrylanguage WHERE countrycode=c.code);"
    ],
    "gpt_answers2": [
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = country.code) ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING countrylanguage.percentage = MAX(countrylanguage.percentage) ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.countrycode, countrylanguage.percentage) IN (SELECT countrycode, MAX(percentage) FROM countrylanguage GROUP BY countrycode) ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode INNER JOIN (SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode) AS max_lang ON countrylanguage.countrycode = max_lang.countrycode AND countrylanguage.percentage = max_lang.max_percentage ",
      "SELECT c.name, cl.language FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode INNER JOIN (SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode) ml ON cl.countrycode = ml.countrycode AND cl.percentage = ml.max_percentage ",
      "SELECT c.name, cl.language FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode WHERE (cl.countrycode, cl.percentage) IN (SELECT countrycode, MAX(percentage) FROM countrylanguage GROUP BY countrycode) ",
      "SELECT c.name, cl.language FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND (cl.countrycode, cl.percentage) IN (SELECT countrycode, MAX(percentage) FROM countrylanguage GROUP BY countrycode) ",
      "SELECT c.name, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code) ",
      "SELECT c.name, cl.language FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code) ",
      "SELECT country.name, countrylanguage.language FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = country.code)"
    ],
    "gpt_answers3": [
      "SELECT country.name, countrylanguage.language  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code); ",
      "SELECT country.name, countrylanguage.language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING countrylanguage.percentage = MAX(countrylanguage.percentage); ",
      "SELECT country.name,  (SELECT language  FROM countrylanguage  WHERE countrylanguage.countrycode = country.code  ORDER BY percentage DESC  LIMIT 1) AS language  FROM country; ",
      "SELECT c.name, cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code); ",
      "SELECT c.name, cl1.language  FROM country c  JOIN countrylanguage cl1 ON c.code = cl1.countrycode  LEFT JOIN countrylanguage cl2 ON c.code = cl2.countrycode AND cl1.percentage < cl2.percentage  WHERE cl2.countrycode IS NULL; ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage GROUP BY countrycode); ",
      "SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code) GROUP BY country.name; ",
      "SELECT c.name, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.name HAVING cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code); ",
      "SELECT c1.name, cl1.language FROM country c1 JOIN countrylanguage cl1 ON c1.code = cl1.countrycode LEFT JOIN countrylanguage cl2 ON c1.code = cl2.countrycode AND cl2.percentage > cl1.percentage WHERE cl2.language IS NULL; ",
      "SELECT c.name, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl2 WHERE c.code = cl2.countrycode AND cl2.percentage > cl.percentage);  Note: These queries may not consider cases where multiple languages have the same highest percentage for a country."
    ]
  },
  {
    "id": 818,
    "db_id": "world_1",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "gpt_answers1": [
      "SELECT c.code, cl.language FROM country c INNER JOIN countrylanguage cl ON cl.countrycode = c.code WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = cl.countrycode); ",
      "SELECT c.code, cl.language FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND cl.percentage = (SELECT MAX(percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = cl.countrycode); ",
      "SELECT c.code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = cl.countrycode); ",
      "SELECT DISTINCT c.code, cl.language FROM country c, countrylanguage cl WHERE c.code = cl.countrycode GROUP BY c.code ORDER BY cl.percentage DESC LIMIT 1; ",
      "SELECT c.code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.code HAVING cl.percentage = (SELECT MAX(cl2.percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = c.code); ",
      "SELECT c.code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.percentage = ALL (SELECT MAX(percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = c.code); ",
      "SELECT c.code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.percentage = (SELECT DISTINCT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code); ",
      "SELECT DISTINCT c.code, cl.language FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code); ",
      "SELECT c.code, cl.language FROM country c INNER JOIN ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode ) AS cl ON c.code = cl.countrycode AND cl.max_percentage = cl.percentage; ",
      "SELECT c.code, cl.language FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode WHERE (cl.countrycode, cl.percentage) IN ( SELECT cl2.countrycode, MAX(cl2.percentage) FROM countrylanguage cl2 GROUP BY cl2.countrycode );"
    ],
    "gpt_answers2": [
      "SELECT c1.code, cl1.language  FROM country c1 INNER JOIN countrylanguage cl1 ON c1.code = cl1.countrycode WHERE cl1.percentage = (SELECT MAX(cl2.percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = c1.code) GROUP BY c1.code; ",
      "SELECT c.code, cl.language  FROM country c, countrylanguage cl  WHERE c.code = cl.countrycode  AND cl.percentage >= ALL (SELECT cl2.percentage  FROM countrylanguage cl2  WHERE cl2.countrycode = c.code); ",
      "SELECT c.code, cl.language  FROM country c, countrylanguage cl  WHERE c.code = cl.countrycode  GROUP BY c.code  HAVING cl.percentage = MAX(cl.percentage); ",
      "SELECT c.code, cl.language  FROM country c  LEFT JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.percentage = (SELECT MAX(cl2.percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = c.code) GROUP BY c.code; ",
      "SELECT DISTINCT c.code, cl.language  FROM country c, countrylanguage cl  WHERE c.code = cl.countrycode  AND cl.percentage = (SELECT MAX(cl2.percentage)  FROM countrylanguage cl2  WHERE cl2.countrycode = c.code); ",
      "SELECT c.code, cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.percentage = (SELECT MAX(cl2.percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = c.code) GROUP BY c.code; ",
      "SELECT c.code, cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.percentage IN (SELECT MAX(cl2.percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = c.code) GROUP BY c.code; ",
      "SELECT c.code, cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.percentage >= ALL (SELECT cl2.percentage  FROM countrylanguage cl2  WHERE cl2.countrycode = c.code) GROUP BY c.code; ",
      "SELECT c.code, cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.percentage = (SELECT MAX(cl2.percentage) FROM countrylanguage cl2 WHERE cl2.countrycode = c.code) GROUP BY c.code, cl.language; ",
      "SELECT c.code, cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE (cl.countrycode, cl.percentage) IN (SELECT cl2.countrycode, MAX(cl2.percentage) FROM countrylanguage cl2 GROUP BY cl2.countrycode) GROUP BY c.code;"
    ],
    "gpt_answers3": [
      "SELECT country.code, MAX(countrylanguage.percentage)  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.code;",
      "SELECT c.code, cl.language  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code);",
      "SELECT c.code, cl.language  FROM country c, countrylanguage cl  WHERE c.code = cl.countrycode  AND cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code);",
      "SELECT country.code, countrylanguage.language  FROM country, countrylanguage  WHERE country.code = countrylanguage.countrycode  GROUP BY country.code  HAVING countrylanguage.percentage = MAX(countrylanguage.percentage);",
      "SELECT code, language  FROM (SELECT country.code AS code, countrylanguage.language AS language, MAX(countrylanguage.percentage)  FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.code);",
      "SELECT country.code, countrylanguage.language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.percentage = (SELECT MAX(countrylanguage.percentage) FROM countrylanguage WHERE countrycode = country.code);",
      "SELECT country.code, countrylanguage.language  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = country.code);",
      "SELECT code, language  FROM (SELECT c.code, cl.language, cl.percentage, RANK() OVER (PARTITION BY c.code ORDER BY cl.percentage DESC) AS rank  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode)  WHERE rank = 1;",
      "SELECT code, language  FROM (SELECT country.code, countrylanguage.language, countrylanguage.percentage, ROW_NUMBER() OVER (PARTITION BY country.code ORDER BY countrylanguage.percentage DESC) AS rn  FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode)  WHERE rn = 1;",
      "SELECT c.code, cl.language  FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode  WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = c.code)  GROUP BY c.code, cl.language  HAVING COUNT(DISTINCT cl.percentage) < 2;"
    ]
  },
  {
    "id": 819,
    "db_id": "world_1",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\");",
      "SELECT COUNT(*) FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM countrylanguage);",
      "SELECT COUNT(*) FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\" GROUP BY language);",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\"));",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" GROUP BY language HAVING percentage = MAX(percentage));",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\");",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" GROUP BY language HAVING percentage = MAX(percentage));",
      "SELECT COUNT(code) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" GROUP BY language HAVING percentage = MAX(percentage));",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\"));",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM countrylanguage);"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\") ",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = \"Spanish\" AND percentage >= ALL(SELECT percentage FROM countrylanguage WHERE language = \"Spanish\") ",
      "SELECT COUNT(*) FROM (SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = \"Spanish\" GROUP BY language HAVING percentage = MAX(percentage)) AS temp ",
      "SELECT COUNT(*) FROM (SELECT COUNT(DISTINCT countrycode) AS count FROM countrylanguage WHERE language = \"Spanish\" GROUP BY language HAVING percentage = MAX(percentage)) AS temp ",
      "SELECT COUNT(DISTINCT c1.countrycode) FROM countrylanguage c1 INNER JOIN (SELECT language, MAX(percentage) AS max_percentage FROM countrylanguage WHERE language = \"Spanish\" GROUP BY language) AS c2 ON c1.language = c2.language AND c1.percentage = c2.max_percentage ",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode HAVING percentage = MAX(percentage)) ",
      "SELECT COUNT(DISTINCT code) FROM countrylanguage WHERE language = \"Spanish\" AND percentage = (SELECT MAX(percentage) FROM (SELECT language, MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\" GROUP BY language) AS temp) ",
      "SELECT COUNT(DISTINCT c.code) FROM country c INNER JOIN (SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode) AS cl ON c.code = cl.countrycode AND cl.max_percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\") ",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\")) ",
      "SELECT COUNT(DISTINCT c.code) FROM country c INNER JOIN (SELECT countrycode, percentage FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode HAVING percentage = MAX(percentage)) AS cl ON c.code = cl.countrycode"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish'); ",
      "SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish'); ",
      "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY language  HAVING percentage = MAX(percentage); ",
      "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode  HAVING percentage = MAX(percentage); ",
      "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode  ORDER BY percentage DESC  LIMIT 1; ",
      "SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY language  HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish'); ",
      "SELECT COUNT(countrycode)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY language  HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish'); ",
      "SELECT COUNT(*)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY language, percentage  HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish'); ",
      "SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode  HAVING MAX(percentage); ",
      "SELECT COUNT(*)  FROM (SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode) AS temp_table;"
    ]
  },
  {
    "id": 820,
    "db_id": "world_1",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1 AND percentage > 50;",
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1 AND percentage > 50;",
      "SELECT COUNT(*) FROM countrylanguage WHERE language = \"Spanish\" AND (isofficial = 1 OR percentage > 50);",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND (isofficial = 1 OR percentage > 50));",
      "SELECT COUNT(DISTINCT code) FROM countrylanguage WHERE language = \"Spanish\" AND (isofficial = 1 OR percentage > 50);",
      "SELECT COUNT(*) FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = \"Spanish\" AND (isofficial = 1 OR percentage > 50);",
      "SELECT COUNT(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = \"Spanish\" AND (isofficial = 1 OR percentage > 50);",
      "SELECT COUNT(*) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = \"Spanish\" AND isofficial = 1 AND percentage > 50;",
      "SELECT COUNT(*) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\") AND code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1) AND code IN (SELECT countrycode FROM countrylanguage WHERE percentage > 50);",
      "SELECT COUNT(code) FROM (SELECT code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = \"Spanish\" AND (isofficial = 1 OR percentage > 50) GROUP BY code);"
    ],
    "gpt_answers2": [
      "SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50;  ",
      "SELECT COUNT(*) FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 );  ",
      "SELECT COUNT(DISTINCT code) FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 );  ",
      "SELECT COUNT(*) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" AND countrylanguage.percentage > 50;  ",
      "SELECT COUNT(DISTINCT country.code) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" AND countrylanguage.percentage > 50;  ",
      "SELECT COUNT(*) FROM ( SELECT countrycode, MAX(percentage) as max_percentage FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode ) AS subquery WHERE subquery.max_percentage > 50;  ",
      "WITH subquery AS ( SELECT countrycode, MAX(percentage) as max_percentage FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode ) SELECT COUNT(*) FROM subquery WHERE subquery.max_percentage > 50;  ",
      "SELECT COUNT(*) FROM ( SELECT DISTINCT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 ) AS subquery;  ",
      "WITH subquery AS ( SELECT DISTINCT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 ) SELECT COUNT(*) FROM subquery;  ",
      "SELECT COUNT(*) FROM ( SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 ) AS subquery;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(country.code)  FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(*)  FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = \"Spanish\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(*)  FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1); ",
      "SELECT COUNT(*)  FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\")  AND code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 1); ",
      "SELECT COUNT(*)  FROM countrylanguage  WHERE language = \"Spanish\" AND isofficial = 1  AND countrycode IN (SELECT code FROM country);  ",
      "SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language = \"Spanish\" AND isofficial = 1; ",
      "SELECT COUNT(DISTINCT countrylanguage.countrycode)  FROM countrylanguage  JOIN country ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" AND countrylanguage.isofficial = 1; ",
      "SELECT COUNT(DISTINCT code)  FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1); ",
      "SELECT COUNT(DISTINCT code)  FROM country  WHERE code = ANY (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1); ",
      "SELECT COUNT(DISTINCT code)  FROM country c, countrylanguage cl  WHERE c.code = cl.countrycode  AND cl.language = \"Spanish\"  AND cl.isofficial = 1;"
    ]
  },
  {
    "id": 821,
    "db_id": "world_1",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "gpt_answers1": [
      "SELECT code FROM countrylanguage WHERE language = \"Spanish\" ORDER BY percentage DESC LIMIT 10; ",
      "SELECT c.code FROM country c WHERE EXISTS ( SELECT 1 FROM countrylanguage cl WHERE cl.language = \"Spanish\" AND cl.countrycode = c.code ) ORDER BY ( SELECT cl.percentage FROM countrylanguage cl WHERE cl.language = \"Spanish\" AND cl.countrycode = c.code ) DESC LIMIT 10; ",
      "SELECT c.code FROM country c JOIN countrylanguage cl ON cl.countrycode = c.code WHERE cl.language = \"Spanish\" GROUP BY c.code ORDER BY MAX(cl.percentage) DESC LIMIT 10; ",
      "SELECT c.code FROM country c WHERE c.code IN ( SELECT cl.countrycode FROM countrylanguage cl WHERE cl.language = \"Spanish\" GROUP BY cl.countrycode ORDER BY MAX(cl.percentage) DESC LIMIT 10 ); ",
      "SELECT code FROM ( SELECT cl.countrycode AS code, cl.percentage FROM countrylanguage cl WHERE cl.language = \"Spanish\" ORDER BY cl.percentage DESC LIMIT 10 ); ",
      "SELECT DISTINCT c.code FROM country c, countrylanguage cl WHERE c.code = cl.countrycode AND cl.language = \"Spanish\" ORDER BY cl.percentage DESC LIMIT 10; ",
      "SELECT DISTINCT cl.countrycode FROM countrylanguage cl WHERE cl.language = \"Spanish\" ORDER BY cl.percentage DESC LIMIT 10; ",
      "SELECT cl.countrycode FROM countrylanguage cl WHERE cl.language = \"Spanish\" GROUP BY cl.countrycode ORDER BY cl.percentage DESC LIMIT 10; ",
      "SELECT code FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" ) ORDER BY ( SELECT percentage FROM countrylanguage WHERE language = \"Spanish\" AND countrycode = code ) DESC LIMIT 10; ",
      "SELECT c.code FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = \"Spanish\" GROUP BY c.code HAVING MAX(cl.percentage) = ( SELECT MAX(percentage) FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode ) LIMIT 10;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 10;",
      "SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode HAVING MAX(percentage) ORDER BY percentage DESC LIMIT 10;",
      "SELECT DISTINCT countrycode FROM countrylanguage WHERE language = 'Spanish' GROUP BY percentage ORDER BY percentage DESC LIMIT 10;",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish') GROUP BY code ORDER BY percentage DESC LIMIT 10;",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish') GROUP BY code HAVING MAX(percentage) ORDER BY percentage DESC LIMIT 10;",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish') AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish') LIMIT 10;",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish') ORDER BY percentage DESC LIMIT 10;",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode) ORDER BY percentage DESC LIMIT 10;",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode HAVING MAX(percentage)) ORDER BY percentage DESC LIMIT 10;",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode) AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish') LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT country.code FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = \"Spanish\" ORDER BY countrylanguage.percentage DESC LIMIT 10; ",
      "SELECT code FROM country  WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\") ORDER BY percentage DESC LIMIT 10; ",
      "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" GROUP BY country.code ORDER BY countrylanguage.percentage DESC LIMIT 10; ",
      "SELECT country.code FROM country JOIN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\") AS cl  ON country.code = cl.countrycode ORDER BY percentage DESC LIMIT 10; ",
      "SELECT country.code FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = \"Spanish\" GROUP BY country.code HAVING MAX(countrylanguage.percentage) LIMIT 10; ",
      "SELECT code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.language = \"Spanish\"  AND countrylanguage.countrycode = country.code) ORDER BY percentage DESC LIMIT 10; ",
      "SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode AND countrylanguage.language = \"Spanish\" GROUP BY country.code ORDER BY MAX(countrylanguage.percentage) DESC LIMIT 10; ",
      "SELECT country.code FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\") ORDER BY percentage DESC LIMIT 10; ",
      "SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" GROUP BY country.code ORDER BY countrylanguage.percentage DESC LIMIT 10; ",
      "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" GROUP BY country.code ORDER BY MAX(countrylanguage.percentage) DESC LIMIT 10;"
    ]
  },
  {
    "id": 822,
    "db_id": "world_1",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "gpt_answers1": [
      "SELECT countrycode  FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50; ",
      "SELECT code  FROM country WHERE code IN ( SELECT countrycode  FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 ); ",
      "SELECT country.code  FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = \"Spanish\" AND percentage > 50; ",
      "SELECT countrylanguage.countrycode  FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 GROUP BY countrycode; ",
      "SELECT code  FROM country WHERE EXISTS ( SELECT countrycode  FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 AND country.code = countrylanguage.countrycode ); ",
      "SELECT countrylanguage.countrycode  FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 GROUP BY countrycode HAVING COUNT(*) = 1; ",
      "SELECT country.code  FROM country WHERE EXISTS ( SELECT countrycode  FROM countrylanguage WHERE language = \"Spanish\" AND percentage > 50 AND country.code = countrylanguage.countrycode GROUP BY countrycode HAVING COUNT(*) = 1 ); ",
      "SELECT code  FROM country WHERE code IN ( SELECT countrycode  FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode HAVING MAX(percentage) > 50 ); ",
      "SELECT c.code  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = \"Spanish\" GROUP BY c.code HAVING SUM(cl.percentage) > 50; ",
      "SELECT DISTINCT c.code  FROM country c  JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = \"Spanish\" AND cl.percentage > 50;"
    ],
    "gpt_answers2": [
      "SELECT country.code FROM country WHERE country.code IN ( SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = \"Spanish\" AND countrylanguage.percentage >= 50 ); ",
      "SELECT C.code FROM country C WHERE EXISTS ( SELECT * FROM countrylanguage L WHERE L.countrycode = C.code AND L.language = \"Spanish\" AND L.percentage >= 50 ); ",
      "SELECT C.code FROM country C INNER JOIN countrylanguage L ON C.code = L.countrycode WHERE L.language = \"Spanish\" AND L.percentage >= 50; ",
      "SELECT code FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND percentage >= 50 ); ",
      "SELECT code FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = \"T\" ); ",
      "SELECT C.code FROM country C, countrylanguage L WHERE C.code = L.countrycode AND L.language = \"Spanish\" AND L.isofficial = \"T\" AND L.percentage >= 50; ",
      "SELECT C.code FROM country C INNER JOIN countrylanguage L ON C.code = L.countrycode WHERE L.language = \"Spanish\" AND L.isofficial = \"T\" AND L.percentage >= 50; ",
      "SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = \"Spanish\" AND countrylanguage.isofficial = \"T\" AND countrylanguage.percentage >= 50; ",
      "SELECT C.code FROM country C JOIN countrylanguage L ON C.code = L.countrycode WHERE L.language = \"Spanish\" AND L.isofficial = \"T\" AND L.percentage >= 50; ",
      "SELECT C.code FROM country C, countrylanguage L WHERE C.code = L.countrycode AND L.language = \"Spanish\" AND L.percentage >= 50 UNION SELECT C.code FROM country C, countrylanguage L WHERE C.code = L.countrycode AND L.language = \"Spanish\" AND L.isofficial = \"T\";"
    ],
    "gpt_answers3": [
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1 AND percentage > 50) ",
      "SELECT DISTINCT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1 AND percentage > 50 ",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode HAVING SUM(CASE WHEN isofficial = 1 AND percentage > 50 THEN 1 ELSE 0 END) > 0) ",
      "SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" GROUP BY countrycode HAVING MAX(CASE WHEN isofficial = 1 AND percentage > 50 THEN 1 ELSE 0 END) = 1) ",
      "SELECT DISTINCT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1 GROUP BY countrycode HAVING MAX(percentage) > 50 ",
      "SELECT DISTINCT country.code FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" AND countrylanguage.isofficial = 1 AND countrylanguage.percentage > 50 ",
      "SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = \"Spanish\" AND countrylanguage.isofficial = 1 AND countrylanguage.percentage > 50 GROUP BY country.code ",
      "WITH cte AS (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\" AND isofficial = 1 AND percentage > 50) SELECT code FROM country WHERE code IN (SELECT countrycode FROM cte) ",
      "WITH cte AS (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\") SELECT code FROM country WHERE code IN (SELECT countrycode FROM cte GROUP BY countrycode HAVING SUM(CASE WHEN isofficial = 1 AND percentage > 50 THEN 1 ELSE 0 END) > 0) ",
      "WITH cte AS (SELECT countrycode FROM countrylanguage WHERE language = \"Spanish\") SELECT code FROM country WHERE code IN (SELECT countrycode FROM cte GROUP BY countrycode HAVING MAX(CASE WHEN isofficial = 1 AND percentage > 50 THEN 1 ELSE 0 END) = 1)"
    ]
  },
  {
    "id": 843,
    "db_id": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "gpt_answers1": [
      "SELECT c.name  FROM conductor c  INNER JOIN orchestra o ON c.conductor_id = o.conductor_id  GROUP BY c.name  HAVING COUNT(DISTINCT o.orchestra_id) > 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id IN ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) > 1 ); ",
      "SELECT name  FROM conductor  WHERE conductor_id IN ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  WHERE COUNT(DISTINCT orchestra_id) > 1 ); ",
      "SELECT c.name  FROM conductor c, orchestra o  WHERE c.conductor_id = o.conductor_id  GROUP BY c.name  HAVING COUNT(DISTINCT o.orchestra_id) > 1; ",
      "SELECT DISTINCT c.name  FROM conductor c, orchestra o  WHERE c.conductor_id = o.conductor_id  GROUP BY c.name  HAVING COUNT(o.orchestra_id) > 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id IN ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(*) > 1 ); ",
      "SELECT c.name  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id  GROUP BY c.name  HAVING COUNT(DISTINCT o.orchestra_id) > 1; ",
      "SELECT DISTINCT c.name  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id  GROUP BY c.name  HAVING COUNT(*) > 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id IN ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(orchestra_id) > 1 ); ",
      "SELECT name  FROM conductor  WHERE conductor_id IN ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  WHERE COUNT(*) > 1 );"
    ],
    "gpt_answers2": [
      "SELECT conductor.name  FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1; ",
      "SELECT c.name  FROM conductor c  WHERE (SELECT COUNT(DISTINCT o.orchestra_id)  FROM orchestra o  WHERE o.conductor_id = c.conductor_id) > 1; ",
      "SELECT DISTINCT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(orchestra.orchestra_id) > 1; ",
      "SELECT c.name  FROM conductor c  JOIN (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) > 1) o ON c.conductor_id = o.conductor_id; ",
      "SELECT conductor.name  FROM conductor  WHERE conductor.conductor_id IN (SELECT conductor_id  FROM orchestra GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) > 1); ",
      "SELECT conductor.name  FROM conductor, orchestra  WHERE conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(orchestra.orchestra_id) > 1; ",
      "SELECT conductor.name  FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(orchestra.orchestra_id) > 1; ",
      "SELECT c.name  FROM (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) > 1) o  JOIN conductor c ON c.conductor_id = o.conductor_id; ",
      "SELECT c.name  FROM conductor c, orchestra o  WHERE c.conductor_id = o.conductor_id  GROUP BY c.name  HAVING COUNT(DISTINCT o.orchestra_id) > 1; ",
      "SELECT conductor.name  FROM conductor  INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1;"
    ],
    "gpt_answers3": [
      "SELECT name  FROM conductor  WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(DISTINCT orchestra_id) > 1); ",
      "SELECT c.name  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra_id) > 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE conductor_id IN  (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(orchestra_id) > 1)); ",
      "SELECT conductor.name  FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1; ",
      "SELECT c.name  FROM conductor c  WHERE EXISTS (SELECT * FROM orchestra o WHERE c.conductor_id = o.conductor_id GROUP BY o.orchestra_id HAVING COUNT(o.orchestra_id) > 1); ",
      "SELECT name  FROM conductor  WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(*) > 1); ",
      "SELECT c.name  FROM conductor c  WHERE EXISTS (SELECT * FROM orchestra o WHERE c.conductor_id = o.conductor_id GROUP BY o.conductor_id HAVING COUNT(DISTINCT o.orchestra_id) > 1); ",
      "SELECT name  FROM conductor  WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id, orchestra_id HAVING COUNT(*) > 1); ",
      "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(DISTINCT orchestra_id) > 1);"
    ]
  },
  {
    "id": 845,
    "db_id": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT orchestra) FROM orchestra ); ",
      "SELECT c.name FROM conductor c WHERE c.conductor_id IN ( SELECT conductor_id FROM orchestra GROUP BY conductor_id ORDER BY COUNT(DISTINCT orchestra) DESC LIMIT 1 ); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(*) = ( SELECT MAX(count) FROM ( SELECT COUNT(*) as count FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ) ); ",
      "SELECT name FROM ( SELECT c.name, COUNT(DISTINCT o.orchestra) as num_orchestras FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ) AS subquery WHERE num_orchestras = ( SELECT MAX(num_orchestras) FROM ( SELECT COUNT(DISTINCT o.orchestra) as num_orchestras FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ) AS subquery ); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT o2.orchestra) FROM orchestra o2 ); ",
      "SELECT c.name FROM conductor c WHERE c.conductor_id = ( SELECT conductor_id FROM orchestra GROUP BY conductor_id ORDER BY COUNT(orchestra_id) DESC LIMIT 1 ); ",
      "SELECT c.name FROM conductor c JOIN ( SELECT conductor_id, COUNT(DISTINCT orchestra) as num_orchestras FROM orchestra GROUP BY conductor_id ) AS subquery ON c.conductor_id = subquery.conductor_id WHERE num_orchestras = ( SELECT MAX(num_orchestras) FROM ( SELECT conductor_id, COUNT(DISTINCT orchestra) as num_orchestras FROM orchestra GROUP BY conductor_id ) AS subquery ); ",
      "SELECT c.name FROM conductor c, orchestra o WHERE c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT orchestra) FROM orchestra ); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT orchestra) FROM orchestra ) LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.conductor_id  ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC  LIMIT 1; ",
      "SELECT conductor.name  FROM conductor  WHERE conductor.conductor_id IN ( SELECT orchestra.conductor_id  FROM orchestra  GROUP BY orchestra.conductor_id  ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC  LIMIT 1 ); ",
      "SELECT conductor.name  FROM conductor  WHERE conductor.conductor_id = ( SELECT orchestra.conductor_id  FROM orchestra  GROUP BY orchestra.conductor_id  ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC  LIMIT 1 ); ",
      "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC  LIMIT 1; ",
      "SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.conductor_id  ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC  LIMIT 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id = ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(DISTINCT orchestra_id) DESC  LIMIT 1 ); ",
      "SELECT conductor.name  FROM conductor  JOIN ( SELECT orchestra.conductor_id, COUNT(DISTINCT orchestra.orchestra_id) AS num_orchestras  FROM orchestra  GROUP BY orchestra.conductor_id  ORDER BY num_orchestras DESC  LIMIT 1 ) AS subquery ON conductor.conductor_id = subquery.conductor_id; ",
      "SELECT conductor.name  FROM conductor  JOIN ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(DISTINCT orchestra_id) DESC  LIMIT 1 ) AS subquery ON conductor.conductor_id = subquery.conductor_id; ",
      "SELECT conductor.name  FROM conductor  JOIN ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) = ( SELECT COUNT(DISTINCT orchestra_id)  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(DISTINCT orchestra_id) DESC  LIMIT 1 ) ) AS subquery ON conductor.conductor_id = subquery.conductor_id; ",
      "SELECT conductor.name  FROM conductor  WHERE conductor.conductor_id = ( SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(DISTINCT orchestra_id) DESC  LIMIT 1 );"
    ],
    "gpt_answers3": [
      "SELECT conductor.name  FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1; ",
      "SELECT conductor.name  FROM conductor WHERE conductor.conductor_id IN (SELECT orchestra.conductor_id  FROM orchestra  GROUP BY orchestra.conductor_id  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1); ",
      "SELECT conductor.name  FROM conductor WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(orchestra_id) DESC  LIMIT 1); ",
      "SELECT conductor.name  FROM conductor WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) = (SELECT MAX(orchestras)  FROM (SELECT COUNT(DISTINCT orchestra_id) AS orchestras  FROM orchestra  GROUP BY conductor_id))); ",
      "SELECT conductor.name  FROM conductor WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) = (SELECT MAX(orchestras)  FROM (SELECT COUNT(DISTINCT orchestra_id) AS orchestras  FROM orchestra  GROUP BY conductor_id  ORDER BY orchestras DESC  LIMIT 1))); ",
      "SELECT conductor.name  FROM conductor WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(orchestra_id) DESC  LIMIT 1 OFFSET 0); ",
      "SELECT conductor.name  FROM conductor WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  LIMIT 1); ",
      "SELECT conductor.name  FROM conductor WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(DISTINCT orchestra_id) DESC  LIMIT 1) LIMIT 1; ",
      "SELECT conductor.name  FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) = (SELECT MAX(orchestras)  FROM (SELECT COUNT(DISTINCT orchestra_id) AS orchestras  FROM orchestra  GROUP BY conductor_id)); ",
      "SELECT conductor.name  FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1;"
    ]
  },
  {
    "id": 846,
    "db_id": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT c.name  FROM conductor c  GROUP BY c.name  ORDER BY COUNT(DISTINCT o.orchestra_id) DESC  LIMIT 1; ",
      "SELECT c.name  FROM conductor c  INNER JOIN orchestra o ON c.conductor_id = o.conductor_id  GROUP BY c.name  ORDER BY COUNT(DISTINCT o.orchestra) DESC  LIMIT 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(DISTINCT orchestra_id) DESC  LIMIT 1); ",
      "SELECT c.name  FROM conductor c  INNER JOIN orchestra o ON c.conductor_id = o.conductor_id  INNER JOIN performance p ON o.orchestra_id = p.orchestra_id  GROUP BY c.conductor_id  ORDER BY COUNT(DISTINCT p.orchestra_id) DESC  LIMIT 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) =  (SELECT MAX(orchestra_count)  FROM (SELECT COUNT(DISTINCT orchestra_id) AS orchestra_count  FROM orchestra  GROUP BY conductor_id) AS temp)); ",
      "SELECT c.name  FROM conductor c  INNER JOIN orchestra o ON c.conductor_id = o.conductor_id  INNER JOIN performance p ON o.orchestra_id = p.orchestra_id  INNER JOIN show s ON p.performance_id = s.performance_id  GROUP BY c.name  ORDER BY COUNT(DISTINCT o.orchestra_id) DESC  LIMIT 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id IN (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  HAVING COUNT(DISTINCT orchestra_id) =  (SELECT MAX(orchestra_count)  FROM (SELECT COUNT(DISTINCT orchestra_id) AS orchestra_count  FROM orchestra  GROUP BY conductor_id) AS temp)); ",
      "SELECT c.name  FROM conductor c  LEFT JOIN orchestra o ON c.conductor_id = o.conductor_id  GROUP BY c.name  ORDER BY COUNT(DISTINCT o.orchestra) DESC  LIMIT 1; ",
      "SELECT c.name  FROM conductor c  LEFT JOIN orchestra o ON c.conductor_id = o.conductor_id  LEFT JOIN performance p ON o.orchestra_id = p.orchestra_id  GROUP BY c.conductor_id  ORDER BY COUNT(DISTINCT p.orchestra_id) DESC  LIMIT 1; ",
      "SELECT name  FROM conductor  WHERE conductor_id = (SELECT conductor_id  FROM orchestra  GROUP BY conductor_id  ORDER BY COUNT(DISTINCT orchestra_id) DESC  LIMIT 1)"
    ],
    "gpt_answers2": [
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(DISTINCT o.orchestra) DESC LIMIT 1; ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT o2.orchestra) FROM conductor c2 JOIN orchestra o2 ON c2.conductor_id = o2.conductor_id GROUP BY c2.name ORDER BY COUNT(DISTINCT o2.orchestra) DESC LIMIT 1 ); ",
      "SELECT name FROM conductor WHERE conductor_id = ( SELECT conductor_id FROM orchestra GROUP BY conductor_id ORDER BY COUNT(DISTINCT orchestra) DESC LIMIT 1 ); ",
      "WITH orchestras_count AS ( SELECT conductor_id, COUNT(DISTINCT orchestra) AS num_orchestras FROM orchestra GROUP BY conductor_id ) SELECT c.name FROM conductor c JOIN orchestras_count oc ON c.conductor_id = oc.conductor_id WHERE oc.num_orchestras = ( SELECT MAX(num_orchestras) FROM orchestras_count ); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT o2.orchestra) FROM orchestra o2 WHERE o2.conductor_id = o.conductor_id GROUP BY o2.conductor_id ORDER BY COUNT(DISTINCT o2.orchestra) DESC LIMIT 1 ); ",
      "SELECT c.name FROM conductor c JOIN ( SELECT conductor_id, COUNT(DISTINCT orchestra) AS num_orchestras FROM orchestra GROUP BY conductor_id ) oc ON c.conductor_id = oc.conductor_id WHERE oc.num_orchestras = ( SELECT MAX(num_orchestras) FROM ( SELECT conductor_id, COUNT(DISTINCT orchestra) AS num_orchestras FROM orchestra GROUP BY conductor_id ) ); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra_id) = ( SELECT COUNT(DISTINCT o2.orchestra_id) FROM conductor c2 JOIN orchestra o2 ON c2.conductor_id = o2.conductor_id GROUP BY c2.name ORDER BY COUNT(DISTINCT o2.orchestra_id) DESC LIMIT 1 ); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT o2.orchestra) FROM orchestra o2 WHERE o2.conductor_id = c.conductor_id GROUP BY o2.conductor_id ORDER BY COUNT(DISTINCT o2.orchestra) DESC LIMIT 1 ); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT o2.orchestra) FROM conductor c2 JOIN orchestra o2 ON c2.conductor_id = o2.conductor_id WHERE c2.name = c.name GROUP BY c2.name ORDER BY COUNT(DISTINCT o2.orchestra) DESC LIMIT 1 ); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = ( SELECT COUNT(DISTINCT o2.orchestra) FROM orchestra o2 WHERE o2.conductor_id = ( SELECT conductor_id FROM conductor GROUP BY conductor_id ORDER BY COUNT(DISTINCT conductor_id) DESC LIMIT 1 ) GROUP BY o2.conductor_id ORDER BY COUNT(DISTINCT o2.orchestra) DESC LIMIT 1 );"
    ],
    "gpt_answers3": [
      "SELECT c.name FROM conductor c INNER JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(DISTINCT o.orchestra) DESC LIMIT 1; ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = (SELECT MAX(orchestras)  FROM (SELECT COUNT(DISTINCT o.orchestra) as orchestras  FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name)); ",
      "SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id ORDER BY COUNT(DISTINCT orchestra) DESC LIMIT 1); ",
      "SELECT c.name FROM conductor c LEFT JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(DISTINCT o.orchestra) DESC LIMIT 1; ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name, c.conductor_id HAVING COUNT(DISTINCT o.orchestra) = (SELECT MAX(orchestras)  FROM (SELECT COUNT(DISTINCT o2.orchestra) as orchestras  FROM conductor c2 JOIN orchestra o2 ON c2.conductor_id = o2.conductor_id GROUP BY c2.name, c2.conductor_id)); ",
      "SELECT c.name FROM conductor c JOIN (SELECT o.conductor_id, COUNT(DISTINCT o.orchestra) as orchestra_count FROM orchestra o GROUP BY o.conductor_id) as orches ON c.conductor_id = orches.conductor_id ORDER BY orches.orchestra_count DESC LIMIT 1; ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(DISTINCT o.orchestra) DESC LIMIT 1; ",
      "SELECT DISTINCT c.name FROM conductor c, orchestra o WHERE c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra) = (SELECT MAX(orchestras)  FROM (SELECT COUNT(DISTINCT o2.orchestra) as orchestras  FROM conductor c2, orchestra o2 WHERE c2.conductor_id = o2.conductor_id GROUP BY c2.name)); ",
      "SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.conductor_id HAVING COUNT(DISTINCT o.orchestra) = (SELECT MAX(orchestras)  FROM (SELECT COUNT(DISTINCT o2.orchestra) as orchestras  FROM conductor c2 JOIN orchestra o2 ON c2.conductor_id = o2.conductor_id GROUP BY c2.conductor_id)); ",
      "SELECT c.name FROM conductor c LEFT JOIN (SELECT conductor_id, COUNT(DISTINCT orchestra) as orchestra_count FROM orchestra GROUP BY conductor_id) as orches ON c.conductor_id = orches.conductor_id ORDER BY orches.orchestra_count DESC LIMIT 1;"
    ]
  },
  {
    "id": 852,
    "db_id": "orchestra",
    "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "gpt_answers1": [
      "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC;",
      "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;",
      "SELECT DISTINCT major_record_format FROM orchestra ORDER BY major_record_format;",
      "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY major_record_format;",
      "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY major_record_format;",
      "SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format HAVING frequency > 1 ORDER BY frequency DESC;",
      "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY 1;",
      "SELECT major_record_format FROM orchestra GROUP BY major_record_format HAVING COUNT(*) > 0 ORDER BY COUNT(*) DESC;",
      "SELECT major_record_format FROM orchestra WHERE major_record_format IS NOT NULL GROUP BY major_record_format ORDER BY COUNT(*) DESC;",
      "SELECT major_record_format FROM orchestra WHERE major_record_format != '' GROUP BY major_record_format ORDER BY COUNT(*) DESC;"
    ],
    "gpt_answers2": [
      "SELECT major_record_format, COUNT(*) AS frequency  FROM orchestra  GROUP BY major_record_format  ORDER BY frequency DESC; ",
      "SELECT major_record_format  FROM orchestra  GROUP BY major_record_format  ORDER BY COUNT(*) DESC; ",
      "SELECT major_record_format, COUNT(*) AS frequency  FROM orchestra  GROUP BY major_record_format  ORDER BY COUNT(*) DESC; ",
      "SELECT major_record_format, COUNT(major_record_format) AS frequency  FROM orchestra  GROUP BY major_record_format  ORDER BY frequency DESC; ",
      "SELECT DISTINCT major_record_format  FROM orchestra ORDER BY major_record_format; ",
      "SELECT major_record_format, COUNT(*) AS frequency  FROM orchestra  GROUP BY major_record_format  HAVING COUNT(*) > 0  ORDER BY frequency DESC; ",
      "SELECT major_record_format  FROM orchestra  GROUP BY major_record_format  HAVING COUNT(*) > 0  ORDER BY COUNT(*) DESC; ",
      "SELECT major_record_format  FROM orchestra  WHERE major_record_format IS NOT NULL  GROUP BY major_record_format  ORDER BY COUNT(*) DESC; ",
      "SELECT major_record_format, COUNT(*) AS frequency  FROM orchestra  WHERE major_record_format IS NOT NULL  GROUP BY major_record_format  ORDER BY frequency DESC; ",
      "SELECT major_record_format, COUNT(*) AS frequency  FROM orchestra  WHERE major_record_format IS NOT NULL  GROUP BY major_record_format  ORDER BY frequency DESC  LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;",
      "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC;",
      "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format SORT BY frequency DESC;",
      "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format HAVING COUNT(*) > 0 ORDER BY frequency DESC;",
      "SELECT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency;",
      "SELECT DISTINCT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC;",
      "SELECT DISTINCT major_record_format, COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;",
      "SELECT DISTINCT(major_record_format), COUNT(*) as frequency FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC;",
      "SELECT DISTINCT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC;",
      "SELECT DISTINCT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY major_record_format DESC;"
    ]
  },
  {
    "id": 861,
    "db_id": "orchestra",
    "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "gpt_answers1": [
      "SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(orchestra_id) > 1;",
      "SELECT DISTINCT year_of_founded FROM orchestra INNER JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY year_of_founded HAVING COUNT(performance_id) > 1;",
      "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(performance_id) > 1);",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1);",
      "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(orchestra_id) > 1);",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(orchestra_id) > 1);",
      "SELECT year_of_founded FROM orchestra INNER JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY year_of_founded HAVING COUNT(*) > 1;",
      "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1);",
      "SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1) GROUP BY year_of_founded;",
      "SELECT DISTINCT year_of_founded FROM orchestra INNER JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY year_of_founded HAVING COUNT(*) > 1;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1);",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(orchestra_id) > 1);",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(performance_id) > 1);",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(DISTINCT performance_id) > 1);",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(official_ratings_(millions)) > 1);",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1) ORDER BY year_of_founded;",
      "SELECT DISTINCT orchestra.year_of_founded FROM orchestra INNER JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.year_of_founded HAVING COUNT(DISTINCT performance.performance_id) > 1;",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE EXISTS (SELECT orchestra_id FROM performance WHERE orchestra_id = orchestra.orchestra_id GROUP BY orchestra_id HAVING COUNT(*) > 1);",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE conductor_id IN (SELECT conductor_id FROM performance JOIN orchestra USING (orchestra_id) GROUP BY conductor_id HAVING COUNT(DISTINCT performance_id) > 1);",
      "SELECT DISTINCT orchestra.year_of_founded FROM orchestra INNER JOIN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1) AS p ON orchestra.orchestra_id = p.orchestra_id;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(performance_id) > 1); ",
      "SELECT DISTINCT orchestra.year_of_founded FROM orchestra INNER JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.year_of_founded HAVING COUNT(DISTINCT performance.performance_id) > 1; ",
      "SELECT DISTINCT o.year_of_founded FROM orchestra o WHERE EXISTS (SELECT 1 FROM performance p WHERE p.orchestra_id = o.orchestra_id HAVING COUNT(p.performance_id) > 1); ",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1); ",
      "SELECT DISTINCT orchestra.year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id = performance.orchestra_id GROUP BY orchestra.year_of_founded HAVING COUNT(*) > 1; ",
      "SELECT DISTINCT o.year_of_founded FROM orchestra o JOIN performance p ON o.orchestra_id = p.orchestra_id GROUP BY o.year_of_founded HAVING COUNT(DISTINCT p.performance_id) > 1; ",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(DISTINCT performance_id) > 1); ",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE conductor_id IN (SELECT conductor_id FROM performance GROUP BY conductor_id HAVING COUNT(DISTINCT performance_id) > 1); ",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance WHERE type IS NOT NULL GROUP BY orchestra_id HAVING COUNT(DISTINCT performance_id) > 1); ",
      "SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance WHERE official_ratings_millions > 0 GROUP BY orchestra_id HAVING COUNT(DISTINCT performance_id) > 1);"
    ]
  },
  {
    "id": 884,
    "db_id": "network_1",
    "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "gpt_answers1": [
      "SELECT student_id, COUNT(friend_id) AS friend_count FROM friend GROUP BY student_id;",
      "SELECT s.id, COUNT(f.friend_id) AS friend_count FROM highschooler AS s LEFT JOIN friend AS f ON s.id = f.student_id GROUP BY s.id;",
      "SELECT student_id, COUNT(*) AS friend_count FROM friend GROUP BY student_id;",
      "SELECT student_id, COUNT(*) AS friend_count FROM friend GROUP BY student_id ORDER BY student_id;",
      "SELECT student_id, COUNT(*) AS friend_count FROM friend GROUP BY student_id HAVING COUNT(*) > 0;",
      "SELECT s.id, COUNT(f.friend_id) AS friend_count FROM highschooler AS s, friend AS f WHERE s.id = f.student_id GROUP BY s.id;",
      "SELECT highschooler.id, COUNT(friend_id) AS friend_count FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;",
      "SELECT s.id, COUNT(f.friend_id) AS friend_count FROM highschooler AS s INNER JOIN friend AS f ON s.id = f.student_id GROUP BY s.id;",
      "SELECT student_id, COUNT(*) AS friend_count FROM friend GROUP BY student_id ORDER BY COUNT(*) DESC;",
      "SELECT student_id, COUNT(*) AS friend_count FROM friend GROUP BY student_id ORDER BY friend_count DESC;"
    ],
    "gpt_answers2": [
      "SELECT student_id, COUNT(friend_id) as num_friends FROM friend GROUP BY student_id;",
      "SELECT id, COUNT(friend_id) as num_friends FROM (SELECT student_id as id, friend_id FROM friend UNION SELECT friend_id as id, student_id FROM friend) GROUP by id;",
      "SELECT student_id, COUNT(friend_id) as num_friends FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 0;",
      "SELECT student_id, COUNT(friend_id) as num_friends FROM friend GROUP BY student_id ORDER BY num_friends DESC;",
      "SELECT student_id, COUNT(friend_id) as num_friends FROM friend WHERE student_id IN (SELECT id FROM highschooler) GROUP BY student_id;",
      "SELECT id, COUNT(friend_id) as num_friends FROM (SELECT student_id as id, friend_id FROM friend UNION SELECT friend_id as id, student_id FROM friend) WHERE id IN (SELECT id FROM highschooler) GROUP BY id;",
      "SELECT id, COUNT(friend_id) as num_friends FROM (SELECT student_id as id, friend_id FROM friend UNION SELECT friend_id as id, student_id FROM friend) WHERE id IN (SELECT id FROM highschooler) GROUP BY id HAVING id IS NOT NULL;",
      "SELECT student_id, COUNT(friend_id) as num_friends FROM friend WHERE student_id IN (SELECT student_id FROM likes) GROUP BY student_id;",
      "SELECT student_id, COUNT(friend_id) as num_friends FROM friend WHERE student_id IN (SELECT student_id FROM likes) GROUP BY student_id HAVING COUNT(liked_id) > 0;",
      "SELECT student_id, COUNT(friend_id) as num_friends FROM friend WHERE student_id IN (SELECT student_id FROM likes) GROUP BY student_id ORDER BY student_id ASC;"
    ],
    "gpt_answers3": [
      "SELECT friend.student_id, COUNT(friend.friend_id) AS num_friends FROM friend GROUP BY friend.student_id ",
      "SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler JOIN friend ON friend.friend_id = highschooler.id GROUP BY highschooler.id ",
      "SELECT highschooler.id, COUNT(DISTINCT friend.friend_id) AS num_friends FROM highschooler JOIN friend ON friend.friend_id = highschooler.id GROUP BY highschooler.id ",
      "SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON friend.friend_id = highschooler.id GROUP BY highschooler.id ",
      "SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON friend.friend_id = highschooler.id WHERE friend.friend_id IS NOT NULL GROUP BY highschooler.id ",
      "SELECT highschooler.id,  (SELECT COUNT(friend.friend_id) FROM friend  WHERE friend.student_id = highschooler.id) AS num_friends FROM highschooler ",
      "SELECT highschooler.id,  (SELECT COUNT(friend.friend_id) FROM friend  WHERE friend.friend_id = highschooler.id) AS num_friends FROM highschooler ",
      "SELECT highschooler.id, (SELECT COUNT(liked_id) FROM likes WHERE student_id = highschooler.id) AS num_friends FROM highschooler ",
      "SELECT highschooler.id, (SELECT COUNT(*) FROM friend WHERE friend.student_id = highschooler.id OR friend.friend_id = highschooler.id) AS num_friends FROM highschooler ",
      "SELECT highschooler.id, (SELECT COUNT(*) FROM friend AS f1 WHERE f1.student_id = highschooler.id UNION ALL SELECT COUNT(*) FROM friend AS f2 WHERE f2.friend_id = highschooler.id) AS num_friends FROM highschooler"
    ]
  },
  {
    "id": 885,
    "db_id": "network_1",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "gpt_answers1": [
      "SELECT highschooler.name, COUNT(friend.friend_id)  FROM highschooler  LEFT JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler, friend  WHERE friend.student_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(f.friend_id)  FROM highschooler h  LEFT JOIN friend f ON f.student_id = h.id  GROUP BY h.name; ",
      "SELECT h.name, COUNT(f.friend_id)  FROM highschooler h  INNER JOIN friend f ON f.student_id = h.id  GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler  INNER JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id)  FROM highschooler  INNER JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(f.friend_id)  FROM highschooler h, friend f  WHERE f.student_id = h.id  GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler, friend  WHERE friend.student_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id)  FROM highschooler  INNER JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(f.friend_id)  FROM highschooler h  LEFT JOIN friend f ON f.student_id = h.id  GROUP BY h.name;"
    ],
    "gpt_answers2": [
      "SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends  FROM highschooler  INNER JOIN friend ON friend.student_id = highschooler.id  GROUP BY highschooler.name;",
      "SELECT h.name, (SELECT COUNT(*) FROM friend f WHERE f.student_id = h.id) AS num_friends  FROM highschooler h;",
      "SELECT h.name, COUNT(*) AS num_friends  FROM highschooler h, friend f  WHERE f.student_id = h.id  GROUP BY h.name;",
      "SELECT h.name, COUNT(f.friend_id) AS num_friends  FROM highschooler h, friend f  WHERE f.student_id = h.id  GROUP BY h.name;",
      "SELECT h.name, COUNT(*) AS num_friends  FROM highschooler h  LEFT JOIN friend f ON f.student_id = h.id  GROUP BY h.name;",
      "SELECT h.name, COUNT(f.friend_id) AS num_friends  FROM highschooler h  LEFT JOIN friend f ON f.student_id = h.id  GROUP BY h.name;",
      "SELECT h.name, COUNT(*) AS num_friends  FROM highschooler h, friend f  WHERE f.friend_id = h.id  GROUP BY h.name;",
      "SELECT h.name, COUNT(f.friend_id) AS num_friends  FROM highschooler h, friend f  WHERE f.friend_id = h.id  GROUP BY h.name;",
      "SELECT h.name, COUNT(f.friend_id) AS num_friends  FROM highschooler h  JOIN friend f ON f.student_id = h.id  GROUP BY h.name;",
      "SELECT h.name, COUNT(f.friend_id) AS num_friends  FROM highschooler h  LEFT JOIN friend f ON f.student_id = h.id  GROUP BY h.name;"
    ],
    "gpt_answers3": [
      "SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(friend.friend_id) > 0; ",
      "SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(f.friend_id) FROM highschooler AS h, friend AS f WHERE h.id = f.student_id GROUP BY h.name; ",
      "SELECT h.name, COUNT(f.friend_id) FROM highschooler AS h JOIN friend AS f ON h.id = f.student_id GROUP BY h.name; ",
      "SELECT h.name, COUNT(f.friend_id) FROM highschooler h, friend f WHERE h.id = f.student_id GROUP BY h.name HAVING COUNT(f.friend_id) > 0; ",
      "SELECT h.name, COUNT(f.friend_id) FROM highschooler h, friend f WHERE h.id = f.student_id GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler, friend WHERE highschooler.id = friend.student_id GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(f.friend_id) FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.name;"
    ]
  },
  {
    "id": 886,
    "db_id": "network_1",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "gpt_answers1": [
      "SELECT highschooler.name, COUNT(friend.friend_id) as num_of_friends  FROM highschooler  LEFT JOIN friend ON friend.friend_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name,  (SELECT COUNT(*) FROM friend WHERE friend.friend_id = highschooler.id) as num_of_friends  FROM highschooler; ",
      "SELECT highschooler.name, COUNT(*) as num_of_friends  FROM highschooler  JOIN friend ON friend.friend_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name,  (SELECT COUNT(*) FROM friend WHERE friend.student_id = highschooler.id OR friend.friend_id = highschooler.id) as num_of_friends  FROM highschooler; ",
      "SELECT highschooler.name, COUNT(f.friend_id) as num_of_friends  FROM highschooler h  LEFT JOIN friend f ON f.friend_id = h.id  GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id) as num_of_friends  FROM highschooler, friend  WHERE friend.friend_id = highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name,  (SELECT COUNT(*) FROM friend WHERE friend.student_id = highschooler.id OR friend.friend_id = highschooler.id) as num_of_friends  FROM highschooler  GROUP BY highschooler.name; ",
      "SELECT highschooler.name, (SELECT COUNT(*) FROM friend WHERE friend.student_id = highschooler.id) +  (SELECT COUNT(*) FROM friend WHERE friend.friend_id = highschooler.id) as num_of_friends  FROM highschooler; ",
      "SELECT highschooler.name,  (SELECT COUNT(*) FROM friend WHERE friend.student_id = highschooler.id) +  (SELECT COUNT(*) FROM friend WHERE friend.friend_id = highschooler.id)  as num_of_friends from highschooler; ",
      "SELECT highschooler.name, COUNT(*) as num_of_friends  FROM highschooler  JOIN friend ON friend.friend_id = highschooler.id OR friend.student_id = highschooler.id  GROUP BY highschooler.name;"
    ],
    "gpt_answers2": [
      "SELECT h.name, COUNT(f.friend_id)  FROM highschooler h  LEFT JOIN friend f ON f.student_id = h.id GROUP BY h.name; ",
      "SELECT h.name, (SELECT COUNT(friend_id) FROM friend WHERE student_id = h.id) as friend_count FROM highschooler h; ",
      "SELECT h.name, COUNT(f.friend_id) as friend_count FROM highschooler h, friend f  WHERE f.student_id = h.id GROUP BY h.name; ",
      "SELECT h.name, COUNT(f.friend_id) as friend_count FROM highschooler h  JOIN friend f ON f.student_id = h.id GROUP BY h.name; ",
      "SELECT h.name, COUNT(f.friend_id) as friend_count FROM highschooler h, friend f  WHERE f.student_id = h.id GROUP BY h.name ORDER BY h.name; ",
      "SELECT h.name, (SELECT COUNT(friend_id) FROM friend WHERE student_id = h.id) as friend_count FROM highschooler h ORDER BY h.name; ",
      "SELECT h.name, (SELECT COUNT(*) FROM friend f WHERE f.student_id = h.id) as friend_count FROM highschooler h; ",
      "SELECT h.name, COUNT(f.friend_id) as friend_count FROM highschooler h, friend f  WHERE f.student_id = h.id GROUP BY h.name HAVING COUNT(f.friend_id) > 0; ",
      "SELECT h.name, COUNT(f.friend_id) as friend_count FROM highschooler h  LEFT JOIN friend f ON f.student_id = h.id GROUP BY h.name ORDER BY friend_count DESC; ",
      "SELECT h.name, COUNT(f.friend_id) as friend_count FROM highschooler h, friend f  WHERE f.student_id = h.id GROUP BY h.name HAVING COUNT(f.friend_id) > 0;"
    ],
    "gpt_answers3": [
      "SELECT highschooler.name, COUNT(friend.friend_id)  FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, (SELECT COUNT(*) FROM friend WHERE friend.student_id = highschooler.id) AS friend_count  FROM highschooler; ",
      "SELECT highschooler.name, (SELECT COUNT(*) FROM friend WHERE friend.student_id = highschooler.id) AS friend_count  FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(*) AS friend_count  FROM highschooler, friend WHERE highschooler.id = friend.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(*) AS friend_count  FROM highschooler INNER JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count  FROM highschooler, friend WHERE highschooler.id = friend.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count  FROM highschooler INNER JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count  FROM highschooler, friend WHERE highschooler.id = friend_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(*) AS friend_count  FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(*) AS friend_count  FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name, highschooler.id;"
    ]
  },
  {
    "id": 891,
    "db_id": "network_1",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "gpt_answers1": [
      "SELECT h2.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN highschooler h2 ON f.friend_id = h2.id WHERE h.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler h, friend f, highschooler h2 WHERE h.id = f.student_id AND f.friend_id = h2.id AND h.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler AS h JOIN friend AS f ON h.id = f.student_id JOIN highschooler AS h2 ON f.friend_id = h2.id WHERE h.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id INNER JOIN highschooler h2 ON f.friend_id = h2.id WHERE h.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler AS h, friend AS f, highschooler AS h2 WHERE h.id = f.student_id AND f.friend_id = h2.id AND h.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler INNER JOIN friend ON highschooler.id = friend.student_id INNER JOIN highschooler h2 ON friend.friend_id = h2.id WHERE highschooler.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN highschooler h2 ON friend.friend_id = h2.id WHERE highschooler.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler INNER JOIN friend ON highschooler.id = friend.student_id INNER JOIN highschooler h2 ON friend.friend_id = h2.id WHERE highschooler.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN highschooler h2 ON f.friend_id = h2.id WHERE h.name = 'Kyle'; ",
      "SELECT h2.name FROM highschooler AS h JOIN friend AS f ON h.id = f.student_id JOIN highschooler AS h2 ON f.friend_id = h2.id WHERE h.name = 'Kyle';"
    ],
    "gpt_answers2": [
      "SELECT highschooler.name  FROM highschooler, friend, highschooler kyle WHERE friend.friend_id = kyle.id  AND friend.student_id = highschooler.id  AND kyle.name = \"Kyle\"; ",
      "SELECT highschooler.name  FROM highschooler  INNER JOIN friend ON friend.friend_id = highschooler.id  INNER JOIN highschooler kyle ON friend.student_id = kyle.id  WHERE kyle.name = \"Kyle\"; ",
      "SELECT h.name  FROM highschooler h, friend f, highschooler k WHERE f.friend_id = h.id  AND f.student_id = k.id  AND k.name = \"Kyle\"; ",
      "SELECT h.name  FROM highschooler h  INNER JOIN friend f ON f.friend_id = h.id  INNER JOIN highschooler k ON f.student_id = k.id  WHERE k.name = \"Kyle\"; ",
      "SELECT h.name  FROM highschooler h  JOIN friend f ON f.friend_id = h.id  JOIN highschooler k ON f.student_id = k.id  WHERE k.name = \"Kyle\"; ",
      "SELECT h.name  FROM highschooler h  JOIN friend f ON f.friend_id = h.id  JOIN highschooler k ON f.student_id = k.id  WHERE k.name = 'Kyle'; ",
      "SELECT h.name  FROM highschooler AS h  JOIN friend AS f ON f.friend_id = h.id  JOIN highschooler AS k ON f.student_id = k.id  WHERE k.name = 'Kyle'; ",
      "SELECT name  FROM highschooler  WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')); ",
      "SELECT DISTINCT h.name  FROM highschooler h, friend f, highschooler k  WHERE f.friend_id = h.id  AND f.student_id = k.id  AND k.name = 'Kyle'; ",
      "SELECT h.name  FROM highschooler h  JOIN friend f ON f.friend_id = h.id  JOIN highschooler k ON f.student_id = k.id  WHERE k.name = 'Kyle';"
    ],
    "gpt_answers3": [
      "SELECT h1.name FROM highschooler AS h1 INNER JOIN friend AS f ON f.friend_id = h1.id INNER JOIN highschooler AS h2 ON h2.id = f.student_id WHERE h2.name = 'Kyle'; ",
      "SELECT h.name FROM highschooler AS h INNER JOIN friend AS f ON f.friend_id = h.id WHERE f.student_id IN (SELECT id FROM highschooler WHERE name = 'Kyle'); ",
      "SELECT h2.name FROM highschooler AS h1, friend AS f, highschooler AS h2 WHERE h1.name = 'Kyle' AND h1.id = f.student_id AND f.friend_id = h2.id; ",
      "SELECT name FROM highschooler WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')); ",
      "SELECT h.name FROM highschooler AS h WHERE EXISTS (SELECT 1 FROM friend AS f WHERE f.student_id = h.id AND f.friend_id = (SELECT id FROM highschooler WHERE name = 'Kyle')); ",
      "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend WHERE friend_id = (SELECT id FROM highschooler WHERE name = 'Kyle')); ",
      "SELECT h.name FROM highschooler AS h, friend AS f WHERE f.student_id = h.id AND f.friend_id = (SELECT id FROM highschooler WHERE name = 'Kyle'); ",
      "SELECT h.name FROM highschooler AS h WHERE h.id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')); ",
      "SELECT name FROM highschooler WHERE id = (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')); ",
      "SELECT h.name FROM highschooler AS h WHERE EXISTS (SELECT 1 FROM friend AS f WHERE f.student_id = h.id AND f.friend_id = (SELECT id FROM highschooler WHERE name = 'Kyle'));"
    ]
  },
  {
    "id": 893,
    "db_id": "network_1",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend JOIN highschooler ON highschooler.id = friend.student_id WHERE highschooler.name = \"Kyle\"; ",
      "SELECT COUNT(*) FROM friend AS f JOIN highschooler AS h ON f.student_id = h.id WHERE h.name = \"Kyle\"; ",
      "SELECT COUNT(*) FROM friend f JOIN highschooler h ON f.student_id = h.id WHERE h.name = \"Kyle\"; ",
      "SELECT COUNT(*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = \"Kyle\"; ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\" AND grade IS NOT NULL); ",
      "SELECT COUNT(*) FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name LIKE \"%Kyle%\"); ",
      "SELECT COUNT(*) FROM friend, highschooler WHERE friend.student_id = highschooler.id  AND highschooler.name = \"Kyle\";"
    ],
    "gpt_answers2": [
      "SELECT COUNT(f.friend_id) FROM highschooler h JOIN friend f ON h.id = f.student_id WHERE h.name = \"Kyle\" ",
      "SELECT COUNT(f.friend_id) FROM friend f JOIN highschooler h ON h.id = f.student_id WHERE h.name = \"Kyle\" ",
      "SELECT COUNT(*) FROM highschooler h JOIN friend f ON h.id = f.student_id WHERE h.name = \"Kyle\" ",
      "SELECT COUNT(*) FROM friend f JOIN highschooler h ON h.id = f.student_id WHERE h.name = \"Kyle\" ",
      "SELECT COUNT(*) FROM friend f, highschooler h WHERE h.id = f.student_id AND h.name = \"Kyle\" ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") ",
      "SELECT COUNT(*)  FROM friend f WHERE f.student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle') ",
      "SELECT COUNT(*) FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE name = 'Kyle') ",
      "SELECT COUNT(f.friend_id) FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id WHERE h.name = \"Kyle\""
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\");",
      "SELECT COUNT(friend_id) FROM friend JOIN highschooler ON friend.friend_id = highschooler.id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") OR friend_id = (SELECT id FROM highschooler WHERE name = \"Kyle\");",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") AND friend_id = (SELECT id FROM highschooler WHERE name = \"Kyle\");",
      "SELECT COUNT(*) FROM friend JOIN highschooler ON friend.friend_id = highschooler.id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\") OR friend_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\");",
      "SELECT COUNT(*) FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\") AND friend_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\");"
    ]
  },
  {
    "id": 894,
    "db_id": "network_1",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "gpt_answers1": [
      "SELECT COUNT(*)  FROM friend  WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") ",
      "SELECT COUNT(friend_id)  FROM friend  WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") ",
      "SELECT COUNT(*)  FROM friend  INNER JOIN highschooler ON friend.friend_id = highschooler.id  WHERE highschooler.name = \"Kyle\" ",
      "SELECT COUNT(*)  FROM friend  JOIN highschooler ON friend.friend_id = highschooler.id  WHERE highschooler.name = \"Kyle\" ",
      "SELECT COUNT(*)  FROM highschooler  WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\")) ",
      "SELECT COUNT(*)  FROM highschooler  WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\")) AND name = \"Kyle\" ",
      "SELECT COUNT(*)  FROM friend  WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\")  AND friend_id IN (SELECT id FROM highschooler) ",
      "SELECT COUNT(*)  FROM friend  WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\")  AND friend_id IN (SELECT id FROM highschooler WHERE name != \"Kyle\") ",
      "SELECT COUNT(*)  FROM friend  INNER JOIN highschooler ON friend.friend_id = highschooler.id  WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") ",
      "SELECT COUNT(*)  FROM friend  INNER JOIN highschooler ON friend.friend_id = highschooler.id  WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") AND highschooler.name = \"Kyle\""
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend JOIN highschooler ON friend.friend_id = highschooler.id WHERE highschooler.name = \"Kyle\"; ",
      "SELECT COUNT(*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = \"Kyle\"; ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") OR friend_id = (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\") OR friend_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") AND friend_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") OR friend_id IN (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\") AND friend_id = (SELECT id FROM highschooler WHERE name = \"Kyle\"); ",
      "SELECT COUNT(*) FROM friend JOIN highschooler ON friend.friend_id = highschooler.id WHERE highschooler.name = \"Kyle\" OR highschooler.name = \"Kyle\"; ",
      "SELECT COUNT(*) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = \"Kyle\" OR highschooler.name = \"Kyle\";"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM friend WHERE friend_id = (SELECT id FROM highschooler WHERE name = 'Kyle') ",
      "SELECT COUNT(*) FROM friend JOIN highschooler on friend.friend_id = highschooler.id WHERE highschooler.name = 'Kyle' ",
      "SELECT COUNT(*) FROM highschooler JOIN friend on highschooler.id = friend.friend_id WHERE highschooler.name = 'Kyle' ",
      "SELECT COUNT(*) FROM highschooler WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')) ",
      "SELECT COUNT(*) FROM highschooler AS k WHERE k.name = 'Kyle' AND EXISTS (SELECT * FROM friend WHERE friend_id = k.id) ",
      "SELECT COUNT(*) FROM highschooler AS k JOIN friend ON k.id = friend.friend_id WHERE k.name = 'Kyle' ",
      "SELECT COUNT(*) FROM friend AS f JOIN highschooler ON f.friend_id = highschooler.id WHERE highschooler.name = 'Kyle' ",
      "SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle') ",
      "SELECT COUNT(*) FROM friend WHERE friend_id = (SELECT id FROM highschooler WHERE name = 'Kyle') ",
      "SELECT COUNT(*)  FROM friend JOIN highschooler on friend.friend_id = highschooler.id WHERE highschooler.name = 'Kyle'"
    ]
  },
  {
    "id": 897,
    "db_id": "network_1",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "gpt_answers1": [
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend);",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend);",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend);",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend UNION SELECT DISTINCT friend_id FROM friend);",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend) AND id NOT IN (SELECT DISTINCT friend_id FROM friend);",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend WHERE friend_id IS NOT NULL);",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend WHERE friend_id NOT NULL);",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend WHERE friend_id <> '');",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend WHERE friend_id NOT LIKE '');"
    ],
    "gpt_answers2": [
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT friend_id FROM friend) ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend) ",
      "SELECT name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id OR highschooler.id = friend.friend_id WHERE friend_id IS NULL ",
      "SELECT name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id LEFT JOIN friend AS f2 ON highschooler.id = f2.friend_id WHERE f2.student_id IS NULL ",
      "SELECT name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.friend_id LEFT JOIN friend AS f2 ON highschooler.id = f2.student_id WHERE f2.friend_id IS NULL ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE friend.student_id = highschooler.id OR friend.friend_id = highschooler.id) ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE friend.student_id = highschooler.id) AND NOT EXISTS (SELECT * FROM friend WHERE friend.friend_id = highschooler.id) ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend) AND id NOT IN (SELECT student_id FROM likes UNION SELECT liked_id FROM likes) ",
      "SELECT name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id OR highschooler.id = friend.friend_id WHERE friend_id IS NULL AND highschooler.id NOT IN (SELECT student_id FROM likes UNION SELECT liked_id FROM likes)"
    ],
    "gpt_answers3": [
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend); ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend); ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend); ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend GROUP BY student_id); ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend INTERSECT SELECT friend_id FROM friend); ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend HAVING COUNT(friend_id) > 0); ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT 1 FROM friend WHERE friend.student_id = highschooler.id); ",
      "SELECT name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id WHERE friend.friend_id IS NULL; ",
      "SELECT name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id WHERE friend.student_id IS NULL; ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT 1 FROM friend WHERE friend.student_id = highschooler.id OR friend.friend_id = highschooler.id);"
    ]
  },
  {
    "id": 898,
    "db_id": "network_1",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "gpt_answers1": [
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT student_id FROM friend ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT student_id  FROM friend  UNION  SELECT friend_id  FROM friend ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT student_id  FROM friend  WHERE friend_id = id ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT student_id  FROM friend  WHERE student_id = id ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT student_id  FROM friend  UNION ALL  SELECT friend_id  FROM friend ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT friend_id  FROM friend  WHERE student_id = id ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT friend_id  FROM friend  WHERE student_id IN (SELECT id FROM highschooler) ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT friend_id  FROM friend  WHERE student_id IN (SELECT student_id FROM friend) ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT friend_id  FROM friend  WHERE student_id IN (SELECT student_id FROM friend WHERE friend_id IS NOT NULL) ) ",
      "SELECT name  FROM highschooler  WHERE id NOT IN ( SELECT friend_id  FROM friend  WHERE student_id IN (SELECT student_id FROM highschooler) )"
    ],
    "gpt_answers2": [
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT DISTINCT friend_id FROM friend) ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend) ",
      "SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend UNION SELECT student_id FROM likes UNION SELECT liked_id FROM likes) ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.friend_id) ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id) ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE highschooler.id IN (friend.student_id, friend.friend_id)) ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id OR highschooler.id = friend.friend_id) ",
      "SELECT name FROM highschooler LEFT JOIN friend ON highschooler.id = friend.friend_id WHERE friend.id IS NULL ",
      "SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.friend_id) AND NOT EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id)"
    ],
    "gpt_answers3": [
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend  UNION  SELECT friend_id FROM friend); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend  UNION ALL  SELECT friend_id FROM friend); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT friend_id FROM friend  UNION  SELECT student_id FROM friend); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT friend_id FROM friend  UNION ALL  SELECT student_id FROM friend); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend  UNION  SELECT friend_id FROM friend  UNION  SELECT liked_id FROM likes); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT student_id FROM friend  UNION  SELECT friend_id FROM friend  UNION ALL  SELECT liked_id FROM likes); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT friend_id FROM friend  UNION  SELECT student_id FROM friend  UNION  SELECT liked_id FROM likes); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT friend_id FROM friend  UNION ALL  SELECT student_id FROM friend  UNION  SELECT liked_id FROM likes); ",
      "SELECT name  FROM highschooler  WHERE id NOT IN (SELECT friend_id FROM friend  UNION ALL  SELECT student_id FROM friend  UNION ALL  SELECT liked_id FROM likes);"
    ]
  },
  {
    "id": 899,
    "db_id": "network_1",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "gpt_answers1": [
      "SELECT DISTINCT h1.id FROM highschooler h1 JOIN friend f ON f.friend_id = h1.id JOIN likes l ON l.liked_id = h1.id ",
      "SELECT h.id FROM highschooler h WHERE h.id IN (SELECT f.student_id FROM friend f) AND h.id IN (SELECT l.student_id FROM likes l) ",
      "SELECT h.id FROM highschooler h WHERE h.id IN (SELECT f.friend_id FROM friend f) AND h.id IN (SELECT l.student_id FROM likes l) ",
      "SELECT h1.id FROM highschooler h1, friend f, likes l WHERE f.friend_id = h1.id AND l.liked_id = h1.id ",
      "SELECT h.id FROM highschooler h JOIN friend f ON f.friend_id = h.id JOIN likes l ON l.student_id = h.id ",
      "SELECT DISTINCT h.id FROM highschooler h JOIN friend f ON f.friend_id = h.id JOIN likes l ON l.liked_id = h.id ",
      "SELECT DISTINCT highschooler.id FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN likes ON likes.student_id = highschooler.id ",
      "SELECT DISTINCT h.id FROM highschooler h, friend f, likes l WHERE f.friend_id = h.id AND l.liked_id = h.id ",
      "SELECT highschooler.id FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN likes ON likes.liked_id = highschooler.id ",
      "SELECT h.id FROM highschooler h, friend f, likes l WHERE f.friend_id = h.id AND l.student_id = h.id"
    ],
    "gpt_answers2": [
      "SELECT h.id  FROM highschooler h WHERE EXISTS (SELECT * FROM friend f WHERE f.student_id = h.id) AND EXISTS (SELECT * FROM likes l WHERE l.liked_id = h.id); ",
      "SELECT h.id  FROM highschooler h INNER JOIN friend f ON f.student_id = h.id INNER JOIN likes l ON l.liked_id = h.id; ",
      "SELECT h.id  FROM highschooler h, friend f, likes l WHERE f.student_id = h.id AND l.liked_id = h.id; ",
      "SELECT DISTINCT h.id  FROM highschooler h, friend f, likes l WHERE f.student_id = h.id AND l.liked_id = h.id; ",
      "SELECT h.id  FROM highschooler h JOIN friend f ON f.student_id = h.id JOIN likes l ON l.liked_id = h.id; ",
      "SELECT h.id  FROM highschooler h JOIN friend f ON f.student_id = h.id WHERE h.id IN (SELECT liked_id FROM likes); ",
      "SELECT h.id  FROM highschooler h WHERE EXISTS (SELECT * FROM friend f WHERE f.student_id = h.id) AND h.id IN (SELECT liked_id FROM likes); ",
      "SELECT h.id  FROM highschooler h, friend f WHERE f.student_id = h.id AND h.id IN (SELECT liked_id FROM likes); ",
      "SELECT h.id  FROM highschooler h, friend f WHERE f.student_id = h.id AND h.id IN (SELECT l.liked_id FROM likes l); ",
      "SELECT h.id  FROM highschooler h WHERE EXISTS (SELECT * FROM friend f, likes l WHERE f.student_id = h.id AND l.liked_id = h.id);"
    ],
    "gpt_answers3": [
      "SELECT hs.id  FROM highschooler hs WHERE hs.id IN (SELECT f.student_id FROM friend f) AND hs.id IN (SELECT l.liked_id FROM likes l); ",
      "SELECT hs.id  FROM highschooler hs JOIN friend f ON f.student_id = hs.id JOIN likes l ON l.student_id = hs.id WHERE l.liked_id = hs.id; ",
      "SELECT hs.id FROM highschooler hs, friend f, likes l WHERE hs.id = f.student_id  AND hs.id = l.student_id AND hs.id = l.liked_id; ",
      "SELECT hs1.id FROM highschooler hs1, friend f1, likes l1 WHERE f1.friend_id = hs1.id AND l1.student_id = hs1.id AND EXISTS (SELECT 1 FROM friend f2 WHERE f2.student_id = hs1.id) AND EXISTS (SELECT 1 FROM likes l2 WHERE l2.liked_id = hs1.id); ",
      "SELECT hs1.id FROM highschooler hs1, friend f1, likes l1 WHERE f1.student_id = hs1.id AND f1.friend_id = hs1.id AND l1.student_id = hs1.id AND l1.liked_id = hs1.id; ",
      "SELECT hs.id FROM highschooler hs INNER JOIN friend f1 ON hs.id = f1.student_id INNER JOIN friend f2 ON hs.id = f2.friend_id INNER JOIN likes l ON hs.id = l.liked_id; ",
      "SELECT DISTINCT hs.id FROM highschooler hs, friend f, likes l WHERE (hs.id = f.student_id OR hs.id = f.friend_id) AND (hs.id = l.student_id OR hs.id = l.liked_id); ",
      "SELECT DISTINCT hs.id FROM highschooler hs JOIN friend f ON hs.id = f.student_id OR hs.id = f.friend_id JOIN likes l ON hs.id = l.student_id OR hs.id = l.liked_id; ",
      "SELECT hs.id FROM highschooler hs WHERE hs.id IN (SELECT student_id FROM friend) AND hs.id IN (SELECT liked_id FROM likes); ",
      "SELECT hs.id FROM highschooler hs WHERE EXISTS (SELECT 1 FROM friend f WHERE f.student_id = hs.id) AND EXISTS (SELECT 1 FROM likes l WHERE l.student_id = hs.id);"
    ]
  },
  {
    "id": 900,
    "db_id": "network_1",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "gpt_answers1": [
      "SELECT highschooler.id  FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id INNER JOIN likes ON likes.student_id = highschooler.id ",
      "SELECT highschooler.id  FROM highschooler, friend, likes WHERE friend.friend_id = highschooler.id AND likes.liked_id = highschooler.id ",
      "SELECT highschooler.id  FROM highschooler WHERE highschooler.id IN ( SELECT student_id FROM friend ) AND highschooler.id IN ( SELECT student_id FROM likes ) ",
      "SELECT highschooler.id  FROM highschooler WHERE EXISTS ( SELECT * FROM friend WHERE friend.friend_id = highschooler.id ) AND EXISTS ( SELECT * FROM likes WHERE likes.liked_id = highschooler.id ) ",
      "SELECT highschooler.id  FROM highschooler WHERE highschooler.id = ANY ( SELECT student_id FROM friend ) AND highschooler.id = ANY ( SELECT student_id FROM likes ) ",
      "SELECT highschooler.id  FROM highschooler WHERE highschooler.id = SOME ( SELECT student_id FROM friend ) AND highschooler.id = SOME ( SELECT student_id FROM likes ) ",
      "SELECT highschooler.id  FROM highschooler WHERE highschooler.id = ANY ( SELECT friend.friend_id FROM friend ) AND highschooler.id = ANY ( SELECT likes.liked_id FROM likes ) ",
      "SELECT highschooler.id  FROM highschooler WHERE highschooler.id IN ( SELECT friend.friend_id FROM friend ) AND highschooler.id IN ( SELECT likes.liked_id FROM likes ) ",
      "SELECT highschooler.id  FROM highschooler WHERE highschooler.id = ANY ( SELECT friend.friend_id FROM friend WHERE friend.student_id = highschooler.id ) AND highschooler.id = ANY ( SELECT likes.liked_id FROM likes WHERE likes.student_id = highschooler.id ) ",
      "SELECT highschooler.id  FROM highschooler WHERE (highschooler.id, highschooler.id) IN ( SELECT friend.student_id, likes.liked_id FROM friend, likes WHERE friend.friend_id = likes.student_id )"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT student_id FROM friend WHERE student_id IN (SELECT student_id FROM likes) AND friend_id IN (SELECT liked_id FROM likes); ",
      "SELECT DISTINCT student_id FROM friend WHERE student_id IN (SELECT student_id FROM likes) AND friend_id IN (SELECT student_id FROM likes); ",
      "SELECT DISTINCT f.student_id FROM friend f INNER JOIN likes l1 ON f.student_id = l1.student_id WHERE f.friend_id IN (SELECT l2.liked_id FROM likes l2); ",
      "SELECT DISTINCT f.student_id FROM friend f, likes l1, likes l2 WHERE f.student_id = l1.student_id AND f.friend_id = l2.liked_id AND l1.student_id = l2.student_id; ",
      "SELECT DISTINCT student_id FROM friend WHERE student_id IN (SELECT student_id FROM likes) AND friend_id IN (SELECT liked_id FROM likes) AND student_id IN (SELECT friend_id FROM friend) AND friend_id IN (SELECT student_id FROM likes); ",
      "SELECT DISTINCT student_id FROM friend f WHERE student_id IN (SELECT student_id FROM likes l1 WHERE f.friend_id = l1.liked_id) AND f.friend_id IN (SELECT l2.student_id FROM likes l2 WHERE f.student_id = l2.student_id); ",
      "SELECT DISTINCT f.student_id FROM friend f JOIN likes l1 ON f.student_id = l1.student_id JOIN likes l2 ON f.friend_id = l2.liked_id; ",
      "SELECT DISTINCT f.student_id FROM friend f JOIN likes l1 ON f.student_id = l1.student_id JOIN likes l2 ON f.friend_id = l2.liked_id WHERE f.student_id <> f.friend_id; ",
      "SELECT DISTINCT f1.student_id FROM friend f1, friend f2, likes l1, likes l2 WHERE f1.friend_id = f2.student_id AND f1.student_id = l1.student_id AND f2.friend_id = l2.liked_id AND l1.student_id = l2.student_id; ",
      "SELECT DISTINCT student_id FROM friend WHERE student_id IN (SELECT student_id FROM likes) INTERSECT SELECT DISTINCT friend_id FROM friend WHERE friend_id IN (SELECT liked_id FROM likes);"
    ],
    "gpt_answers3": [
      "SELECT student_id FROM friend WHERE student_id IN (SELECT student_id FROM likes) ",
      "SELECT student_id FROM friend f JOIN likes l ON f.student_id = l.student_id ",
      "SELECT student_id FROM friend INTERSECT SELECT student_id FROM likes ",
      "SELECT DISTINCT f.student_id FROM friend f INNER JOIN likes l ON f.student_id = l.student_id ",
      "SELECT student_id FROM friend WHERE student_id IN (SELECT student_id FROM likes GROUP BY student_id) ",
      "SELECT DISTINCT(student_id) FROM friend WHERE EXISTS (SELECT student_id FROM likes WHERE friend.student_id = likes.student_id) ",
      "SELECT student_id FROM friend WHERE EXISTS (SELECT student_id FROM likes WHERE friend.student_id = likes.student_id) ",
      "SELECT DISTINCT(f.student_id) FROM friend f INNER JOIN likes l ON f.student_id = l.student_id ",
      "SELECT student_id FROM friend WHERE EXISTS (SELECT liked_id FROM likes WHERE friend.student_id = likes.student_id) ",
      "SELECT DISTINCT(student_id) FROM friend WHERE EXISTS (SELECT student_id FROM likes WHERE friend.student_id = likes.student_id)"
    ]
  },
  {
    "id": 901,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "gpt_answers1": [
      "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT liked_id FROM likes); ",
      "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT liked_id FROM likes) GROUP BY name; ",
      "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) INTERSECT SELECT name FROM highschooler WHERE id IN (SELECT liked_id FROM likes); ",
      "SELECT name FROM highschooler INNER JOIN friend ON highschooler.id = friend.student_id INNER JOIN likes ON highschooler.id = likes.student_id WHERE likes.liked_id <> highschooler.id; ",
      "SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE likes.liked_id <> highschooler.id; ",
      "SELECT name FROM highschooler, friend, likes WHERE highschooler.id = friend.student_id AND highschooler.id = likes.student_id AND likes.liked_id <> highschooler.id; ",
      "SELECT DISTINCT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id; ",
      "SELECT DISTINCT name FROM highschooler, friend, likes WHERE highschooler.id = friend.student_id AND highschooler.id = likes.student_id; ",
      "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) OR id IN (SELECT liked_id FROM likes); ",
      "SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) OR id IN (SELECT liked_id FROM likes) GROUP BY name;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN likes l ON h.id = l.student_id  ",
      "SELECT name  FROM highschooler  WHERE id IN (SELECT student_id FROM friend)  AND id IN (SELECT liked_id FROM likes)  ",
      "SELECT h.name  FROM highschooler h, friend f, likes l  WHERE h.id = f.student_id  AND h.id = l.student_id  ",
      "SELECT name  FROM highschooler  WHERE id IN (SELECT student_id FROM friend)  AND id IN (SELECT liked_id FROM likes)  ",
      "SELECT h.name  FROM highschooler h  INNER JOIN friend f ON h.id = f.student_id  INNER JOIN likes l ON h.id = l.student_id  ",
      "SELECT highschooler.name  FROM highschooler  JOIN friend ON highschooler.id = friend.student_id  JOIN likes ON highschooler.id = likes.student_id  ",
      "SELECT h.name  FROM highschooler h  JOIN friend f ON h.id = f.student_id  JOIN likes l ON h.id = l.liked_id  ",
      "SELECT name  FROM highschooler  WHERE id IN (SELECT student_id FROM friend)  AND id IN (SELECT liked_id FROM likes)  ",
      "SELECT h.name  FROM highschooler h  INNER JOIN friend f ON h.id = f.student_id  INNER JOIN likes l ON h.id = l.liked_id  ",
      "SELECT highschooler.name  FROM highschooler  JOIN friend ON highschooler.id = friend.student_id  JOIN likes ON highschooler.id = likes.liked_id"
    ],
    "gpt_answers3": [
      "SELECT highschooler.name  FROM highschooler  INNER JOIN friend ON highschooler.id = friend.student_id  INNER JOIN likes ON highschooler.id = likes.student_id  WHERE highschooler.id <> likes.liked_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name  FROM highschooler  JOIN friend ON highschooler.id = friend.student_id  JOIN likes ON highschooler.id = likes.student_id  WHERE likes.liked_id <> highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name  FROM highschooler, friend, likes  WHERE highschooler.id = friend.student_id  AND highschooler.id = likes.student_id  AND highschooler.id <> likes.liked_id  GROUP BY highschooler.name; ",
      "SELECT name  FROM highschooler  WHERE id IN (SELECT student_id  FROM friend  WHERE student_id != friend_id)  AND id IN (SELECT student_id  FROM likes  WHERE student_id != liked_id); ",
      "SELECT name  FROM highschooler  WHERE id IN (SELECT student_id FROM friend  WHERE student_id != friend_id)  INTERSECT  SELECT name  FROM highschooler  WHERE id IN (SELECT student_id FROM likes  WHERE student_id != liked_id); ",
      "SELECT highschooler.name  FROM highschooler  LEFT JOIN friend ON highschooler.id = friend.student_id  LEFT JOIN likes ON highschooler.id = likes.student_id  WHERE friend.friend_id IS NOT NULL  AND likes.liked_id <> highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name  FROM highschooler  LEFT JOIN friend ON highschooler.id = friend.student_id  INNER JOIN likes ON highschooler.id = likes.student_id  WHERE likes.liked_id <> highschooler.id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name  FROM highschooler  JOIN friend ON highschooler.id = friend.student_id  JOIN likes ON highschooler.id = likes.student_id  WHERE friend.friend_id <> highschooler.id  AND likes.liked_id <> highschooler.id  GROUP BY highschooler.name; ",
      "SELECT name  FROM highschooler  WHERE EXISTS (SELECT 1  FROM friend  WHERE friend.student_id = highschooler.id  AND friend.student_id != friend.friend_id)  AND EXISTS (SELECT 1  FROM likes  WHERE likes.student_id = highschooler.id  AND likes.student_id != likes.liked_id); ",
      "SELECT name  FROM highschooler  WHERE EXISTS (SELECT 1  FROM friend  WHERE friend.student_id = highschooler.id  AND friend.student_id != friend.friend_id)  INTERSECT  SELECT name  FROM highschooler  WHERE EXISTS (SELECT 1  FROM likes  WHERE likes.student_id = highschooler.id  AND likes.student_id != likes.liked_id);"
    ]
  },
  {
    "id": 902,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "gpt_answers1": [
      "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE h.id IN ( SELECT f.student_id FROM friend f ) AND h.id IN ( SELECT l.student_id FROM likes l ) ",
      "SELECT DISTINCT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id INNER JOIN likes l ON h.id = l.student_id ",
      "SELECT DISTINCT h.name FROM highschooler h, friend f, likes l WHERE h.id = f.student_id AND h.id = l.student_id ",
      "SELECT DISTINCT h.name FROM highschooler h WHERE EXISTS ( SELECT 1  FROM friend f, likes l  WHERE h.id = f.student_id  AND h.id = l.student_id ) ",
      "SELECT DISTINCT h.name FROM highschooler h WHERE h.id IN ( SELECT f.student_id FROM friend f, likes l WHERE f.student_id = l.student_id ) ",
      "SELECT DISTINCT h.name FROM highschooler h WHERE h.id IN ( SELECT f.student_id FROM friend f INNER JOIN likes l ON f.student_id = l.student_id ) ",
      "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id ",
      "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id GROUP BY h.name ",
      "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id GROUP BY h.name HAVING COUNT(DISTINCT f.friend_id) > 0 AND COUNT(DISTINCT l.liked_id) > 0 ",
      "SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE EXISTS ( SELECT 1 FROM friend f2, likes l2 WHERE f2.student_id = f.student_id AND l2.student_id = l.student_id )"
    ],
    "gpt_answers2": [
      "SELECT h.name  FROM highschooler h WHERE h.id IN (SELECT f.student_id  FROM friend f INNER JOIN likes l ON f.student_id = l.student_id AND f.friend_id = l.liked_id) ",
      "SELECT h.name  FROM highschooler h WHERE EXISTS (SELECT *  FROM friend f INNER JOIN likes l ON f.student_id = l.student_id AND f.friend_id = l.liked_id WHERE f.student_id = h.id) ",
      "SELECT h.name  FROM highschooler h WHERE h.id IN (SELECT f.student_id  FROM friend f WHERE f.friend_id IN (SELECT l.liked_id  FROM likes l WHERE l.student_id = f.student_id)) ",
      "SELECT h.name  FROM highschooler h WHERE h.id IN (SELECT f.student_id  FROM friend f INNER JOIN likes l ON f.friend_id = l.liked_id) ",
      "SELECT h.name  FROM highschooler h WHERE EXISTS (SELECT *  FROM friend f INNER JOIN likes l ON f.friend_id = l.liked_id WHERE f.student_id = h.id) ",
      "SELECT h.name  FROM highschooler h WHERE h.id IN (SELECT f.student_id  FROM friend f WHERE f.friend_id IN (SELECT l.student_id  FROM likes l WHERE l.liked_id = f.student_id)) ",
      "SELECT h.name  FROM highschooler h WHERE h.id IN (SELECT l.student_id  FROM likes l INNER JOIN friend f ON l.liked_id = f.friend_id AND l.student_id = f.student_id) ",
      "SELECT h.name  FROM highschooler h WHERE h.id IN (SELECT l.student_id  FROM likes l WHERE l.liked_id IN (SELECT f.friend_id  FROM friend f WHERE f.student_id = l.student_id)) ",
      "SELECT h.name  FROM highschooler h WHERE EXISTS (SELECT *  FROM likes l INNER JOIN friend f ON l.liked_id = f.friend_id AND l.student_id = f.student_id WHERE l.student_id = h.id) ",
      "SELECT h.name  FROM highschooler h WHERE EXISTS (SELECT *  FROM likes l WHERE l.liked_id IN (SELECT f.friend_id  FROM friend f WHERE f.student_id = l.student_id)  AND l.student_id = h.id)"
    ],
    "gpt_answers3": [
      "SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.student_id WHERE h.id IN (SELECT DISTINCT friend_id FROM friend) AND h.id IN (SELECT DISTINCT liked_id FROM likes); ",
      "SELECT h.name FROM highschooler h WHERE EXISTS (SELECT 1 FROM friend f WHERE f.student_id = h.id) AND EXISTS (SELECT 1 FROM likes l WHERE l.student_id = h.id); ",
      "SELECT h.name FROM highschooler h JOIN friend f1 ON h.id = f1.friend_id JOIN likes l1 ON h.id = l1.liked_id JOIN friend f2 ON h.id = f2.student_id JOIN likes l2 ON h.id = l2.student_id; ",
      "SELECT h.name FROM highschooler h WHERE EXISTS (SELECT 1 FROM friend f WHERE f.student_id = h.id) AND h.id IN (SELECT liked_id FROM likes); ",
      "SELECT h.name FROM highschooler h WHERE h.id IN (SELECT student_id FROM friend) AND h.id IN (SELECT liked_id FROM likes); ",
      "SELECT h.name FROM highschooler h WHERE h.id IN (SELECT DISTINCT friend_id FROM friend) AND EXISTS (SELECT 1 FROM likes l WHERE l.student_id = h.id); ",
      "SELECT h.name FROM highschooler h WHERE h.id IN (SELECT student_id FROM friend) AND EXISTS (SELECT 1 FROM likes l WHERE l.student_id = h.id); ",
      "SELECT h.name FROM highschooler h WHERE (SELECT COUNT(DISTINCT f.friend_id) FROM friend f WHERE f.student_id = h.id) > 0 AND (SELECT COUNT(DISTINCT l.liked_id) FROM likes l WHERE l.student_id = h.id) > 0; ",
      "SELECT h.name FROM highschooler h WHERE (SELECT COUNT(*) FROM friend f WHERE f.student_id = h.id) > 0 AND (SELECT COUNT(*) FROM likes l WHERE l.student_id = h.id) > 0; ",
      "SELECT h.name FROM highschooler h WHERE h.id IN (SELECT DISTINCT f.friend_id FROM friend f WHERE f.student_id = h.id) AND h.id IN (SELECT DISTINCT l.liked_id FROM likes l WHERE l.student_id = h.id);"
    ]
  },
  {
    "id": 905,
    "db_id": "network_1",
    "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "gpt_answers1": [
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler  INNER JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler, likes  WHERE highschooler.id = likes.student_id  GROUP BY highschooler.name ",
      "SELECT h.name, COUNT(l.liked_id)  FROM highschooler h  JOIN likes l ON h.id = l.student_id  GROUP BY h.name ",
      "SELECT h.name, COUNT(DISTINCT l.liked_id)  FROM highschooler h  JOIN likes l ON h.id = l.student_id  GROUP BY h.name ",
      "SELECT h.name, (SELECT COUNT(*) FROM likes l WHERE l.student_id = h.id) AS num_likes  FROM highschooler h ",
      "SELECT h.name, (SELECT COUNT(*) FROM likes WHERE student_id = h.id) AS num_likes  FROM highschooler h ",
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler, likes  WHERE highschooler.id = likes.student_id  GROUP BY highschooler.name ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name ",
      "SELECT h.name, COUNT(*)  FROM highschooler h  LEFT JOIN likes l ON h.id = l.student_id  GROUP BY h.name ",
      "SELECT h.name, COUNT(DISTINCT l.liked_id)  FROM highschooler h  LEFT JOIN likes l ON h.id = l.student_id  GROUP BY h.name"
    ],
    "gpt_answers2": [
      "SELECT highschooler.name, COUNT(likes.student_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(l.student_id) AS num_likes FROM highschooler AS h, likes AS l WHERE h.id = l.student_id GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(*) AS num_likes FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, (SELECT COUNT(*) FROM likes WHERE likes.student_id = highschooler.id) AS num_likes FROM highschooler; ",
      "SELECT h.name, COUNT(l.liked_id) AS num_likes FROM highschooler AS h JOIN likes AS l ON h.id = l.student_id GROUP BY h.name; ",
      "SELECT h.name, (SELECT COUNT(*) FROM likes WHERE likes.student_id = h.id) AS num_likes FROM highschooler AS h; ",
      "SELECT highschooler.name, COUNT(*) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name ORDER BY num_likes DESC; ",
      "SELECT DISTINCT highschooler.name, COUNT(likes.student_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name ORDER BY num_likes DESC; ",
      "SELECT h.name, COUNT(l.liked_id) AS num_likes FROM highschooler AS h JOIN likes AS l ON h.id = l.student_id GROUP BY h.name ORDER BY num_likes DESC; ",
      "SELECT h.name, (SELECT COUNT(*) FROM likes WHERE likes.student_id = h.id) AS num_likes FROM highschooler AS h ORDER BY num_likes DESC;"
    ],
    "gpt_answers3": [
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name; ",
      "SELECT H.name, COUNT(L.liked_id)  FROM highschooler H, likes L WHERE L.student_id = H.id GROUP BY H.name; ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler, likes  WHERE highschooler.id = likes.student_id GROUP BY highschooler.name; ",
      "SELECT H.name, COUNT(*)  FROM highschooler H  JOIN likes L ON H.id = L.student_id GROUP BY H.name; ",
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler  INNER JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(l.liked_id)  FROM highschooler h  INNER JOIN likes l ON h.id = l.student_id GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler, likes  WHERE highschooler.id = likes.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler, likes  WHERE highschooler.id = likes.student_id GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;"
    ]
  },
  {
    "id": 906,
    "db_id": "network_1",
    "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "gpt_answers1": [
      "SELECT highschooler.name, COUNT(likes.student_id)  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name; ",
      "SELECT name, COUNT(liked_id)  FROM highschooler  JOIN likes ON id = likes.student_id  GROUP BY name; ",
      "SELECT h.name, COUNT(l.student_id)  FROM highschooler AS h, likes AS l  WHERE h.id = l.student_id  GROUP BY h.name; ",
      "SELECT h.name, COUNT(l.liked_id)  FROM highschooler AS h  JOIN likes AS l ON h.id = l.student_id  GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(likes.student_id)  FROM highschooler, likes  WHERE highschooler.id = likes.student_id  GROUP BY highschooler.name; ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler, likes  WHERE highschooler.id = likes.student_id  GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(l.student_id)  FROM highschooler h  JOIN likes l ON h.id = l.student_id  GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler  JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name; ",
      "SELECT h.name, COUNT(*)  FROM highschooler AS h, likes AS l  WHERE h.id = l.student_id  GROUP BY h.name; ",
      "SELECT highschooler.name, COUNT(*)  FROM highschooler  INNER JOIN likes ON highschooler.id = likes.student_id  GROUP BY highschooler.name;"
    ],
    "gpt_answers2": [
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler INNER JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name ",
      "SELECT highschooler.name, (SELECT COUNT(*) FROM likes WHERE likes.student_id = highschooler.id)  FROM highschooler ",
      "SELECT highschooler.name, COUNT(liked_id)  FROM highschooler LEFT JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name ",
      "SELECT highschooler.name, ( SELECT COUNT(*)  FROM likes  WHERE likes.student_id = highschooler.id  GROUP BY likes.student_id) FROM highschooler ",
      "SELECT highschooler.name, COUNT(likes.student_id)  FROM highschooler LEFT JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name ",
      "SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.name ",
      "SELECT highschooler.name, (SELECT COUNT(*) FROM likes WHERE likes.student_id = highschooler.id)  FROM highschooler, likes WHERE highschooler.id = likes.student_id ",
      "SELECT highschooler.name, COUNT(liked_id)  FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.name ",
      "SELECT highschooler.name, ( SELECT COUNT(*)  FROM likes  WHERE likes.student_id = highschooler.id  GROUP BY likes.student_id) FROM highschooler, likes WHERE highschooler.id = likes.student_id ",
      "SELECT highschooler.name, COUNT(likes.student_id)  FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.name"
    ],
    "gpt_answers3": [
      "SELECT highschooler.name, COUNT(likes.student_id)  FROM highschooler  INNER JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id;",
      "SELECT highschooler.name, (SELECT COUNT(*)  FROM likes  WHERE likes.student_id = highschooler.id) as num_likes FROM highschooler;",
      "SELECT highschooler.name, COUNT(*) as num_likes FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.id;",
      "SELECT highschooler.name, COUNT(*) FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.name;",
      "SELECT highschooler.name, COUNT(*) as num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;",
      "SELECT highschooler.name, COUNT(likes.student_id)  FROM highschooler  LEFT JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id;",
      "SELECT highschooler.name, COUNT(*) FROM highschooler LEFT JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;",
      "SELECT highschooler.name, COUNT(*) as num_likes FROM highschooler LEFT JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;",
      "SELECT highschooler.name, count(liked_id) as num_likes FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.id;",
      "SELECT highschooler.name, count(likes.liked_id) as num_likes FROM highschooler, likes WHERE highschooler.id = likes.student_id GROUP BY highschooler.name;"
    ]
  },
  {
    "id": 913,
    "db_id": "network_1",
    "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "gpt_answers1": [
      "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\");",
      "SELECT COUNT(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';",
      "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');",
      "SELECT COUNT(*) FROM likes, highschooler WHERE likes.student_id = highschooler.id AND highschooler.name = 'Kyle';",
      "SELECT COUNT(*) FROM likes INNER JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';",
      "SELECT COUNT(*) FROM likes INNER JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';",
      "SELECT COUNT(*) FROM likes INNER JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';",
      "SELECT COUNT(*) FROM likes INNER JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';",
      "SELECT COUNT(*) FROM likes INNER JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';"
    ],
    "gpt_answers2": [
      "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');",
      "SELECT COUNT(liked_id) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE name = 'Kyle';",
      "SELECT COUNT(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE name = 'Kyle';",
      "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle') GROUP BY student_id;",
      "SELECT COUNT(*) FROM likes WHERE student_id IN (SELECT id FROM highschooler WHERE name = 'Kyle');",
      "SELECT COUNT(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = 'Kyle';",
      "SELECT COUNT(*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle';",
      "SELECT COUNT(*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE name = 'Kyle';",
      "SELECT COUNT(*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle' GROUP BY highschooler.name;",
      "SELECT COUNT(*) FROM highschooler JOIN likes ON highschooler.id = likes.student_id WHERE name = 'Kyle' GROUP BY highschooler.name;"
    ],
    "gpt_answers3": [
      "SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = \"Kyle\");",
      "SELECT COUNT(*) FROM likes l JOIN highschooler h ON l.student_id = h.id WHERE h.name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes, highschooler WHERE likes.student_id = highschooler.id AND highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes NATURAL JOIN highschooler WHERE name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes INNER JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes INNER JOIN highschooler USING (id) WHERE name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes INNER JOIN highschooler ON likes.student_id = highschooler.id AND highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes LEFT JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = \"Kyle\";",
      "SELECT COUNT(*) FROM likes RIGHT JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = \"Kyle\";"
    ]
  },
  {
    "id": 919,
    "db_id": "dog_kennels",
    "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "gpt_answers1": [
      "SELECT DISTINCT o.state FROM owners o JOIN professionals p ON o.state = p.state;",
      "SELECT o.state FROM owners o JOIN professionals p USING (state) GROUP BY o.state HAVING COUNT(DISTINCT o.owner_id) > 0 AND COUNT(DISTINCT p.professional_id) > 0;",
      "SELECT DISTINCT state FROM owners WHERE state IN (SELECT state FROM professionals);",
      "SELECT DISTINCT state FROM owners WHERE state IN (SELECT state FROM professionals GROUP BY state);",
      "SELECT DISTINCT o.state FROM owners o WHERE EXISTS (SELECT 1 FROM professionals p WHERE o.state = p.state);",
      "SELECT DISTINCT o.state FROM owners o WHERE o.state IN (SELECT p.state FROM professionals p);",
      "SELECT DISTINCT state FROM owners WHERE EXISTS (SELECT 1 FROM professionals WHERE professionals.state = owners.state);",
      "SELECT DISTINCT o.state FROM owners o, professionals p WHERE o.state = p.state;",
      "SELECT DISTINCT o.state FROM owners o, professionals p WHERE o.state = p.state GROUP BY o.state HAVING COUNT(DISTINCT o.owner_id) > 0 AND COUNT(DISTINCT p.professional_id) > 0;",
      "SELECT DISTINCT o.state FROM owners o, professionals p WHERE o.state = p.state GROUP BY o.state HAVING COUNT(*) > 1;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT o.state FROM owners o JOIN professionals p ON o.state = p.state; ",
      "SELECT o.state FROM owners o, professionals p WHERE o.state = p.state GROUP BY o.state HAVING COUNT(DISTINCT o.owner_id) > 0 AND COUNT(DISTINCT p.professional_id) > 0; ",
      "SELECT o.state FROM owners o WHERE EXISTS (SELECT 1 FROM professionals WHERE state = o.state); ",
      "SELECT o.state FROM owners o WHERE o.state IN (SELECT state FROM professionals); ",
      "SELECT o.state FROM owners o, professionals p WHERE o.state = p.state GROUP BY o.state HAVING COUNT(*) > 1; ",
      "SELECT o.state FROM owners o INNER JOIN professionals p ON o.state = p.state GROUP BY o.state; ",
      "SELECT o.state FROM owners o WHERE o.state IN (SELECT state FROM professionals WHERE state IN (SELECT state FROM owners)); ",
      "SELECT o.state FROM owners o WHERE o.state IN (SELECT state FROM professionals) GROUP BY o.state; ",
      "SELECT state FROM ( SELECT o.state, COUNT(DISTINCT o.owner_id) AS owners_count, COUNT(DISTINCT p.professional_id) AS professionals_count FROM owners o LEFT JOIN professionals p ON o.state = p.state GROUP BY o.state ) AS subquery WHERE owners_count > 0 AND professionals_count > 0; ",
      "SELECT DISTINCT o.state FROM owners o, professionals p WHERE o.state = p.state;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT state FROM owners WHERE state IN (SELECT state FROM professionals)",
      "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state",
      "SELECT owners.state FROM owners INNER JOIN professionals ON owners.state = professionals.state GROUP BY owners.state HAVING COUNT(DISTINCT owners.owner_id) > 0 AND COUNT(DISTINCT professionals.professional_id) > 0",
      "SELECT DISTINCT state FROM owners WHERE state IN (SELECT state FROM professionals GROUP BY state HAVING COUNT(DISTINCT professional_id) > 0)",
      "SELECT owners.state FROM owners INNER JOIN professionals USING (state) GROUP BY owners.state HAVING COUNT(DISTINCT owners.owner_id) > 0 AND COUNT(DISTINCT professionals.professional_id) > 0",
      "SELECT DISTINCT owners.state FROM owners, professionals WHERE owners.state = professionals.state",
      "SELECT owners.state FROM owners INNER JOIN professionals ON owners.state = professionals.state GROUP BY owners.state HAVING COUNT(*) > 1",
      "SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state GROUP BY owners.state",
      "SELECT owners.state FROM owners INNER JOIN professionals USING (state) GROUP BY owners.state HAVING COUNT(*) > 1",
      "SELECT owners.state FROM owners, professionals WHERE owners.state = professionals.state GROUP BY owners.state HAVING COUNT(*) > 1"
    ]
  },
  {
    "id": 925,
    "db_id": "dog_kennels",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "gpt_answers1": [
      "SELECT d.name FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000; ",
      "SELECT d.name FROM dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM treatments t WHERE t.cost_of_treatment > 1000); ",
      "SELECT d.name FROM dogs d WHERE d.dog_id NOT EXISTS (SELECT * FROM treatments t WHERE d.dog_id = t.dog_id AND t.cost_of_treatment > 1000); ",
      "SELECT d.name FROM dogs d WHERE NOT EXISTS (SELECT * FROM treatments t WHERE d.dog_id = t.dog_id AND t.cost_of_treatment > 1000); ",
      "SELECT d.name FROM dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM treatments t WHERE t.cost_of_treatment > 1000 GROUP BY t.dog_id); ",
      "SELECT d.name FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment IS NULL OR t.cost_of_treatment <= 1000; ",
      "SELECT d.name FROM dogs d WHERE (SELECT MAX(cost_of_treatment) FROM treatments t WHERE t.dog_id = d.dog_id) <= 1000; ",
      "SELECT d.name FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING MAX(t.cost_of_treatment) <= 1000; ",
      "SELECT d.name FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000; ",
      "SELECT d.name FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING IFNULL(SUM(t.cost_of_treatment), 0) <= 1000;"
    ],
    "gpt_answers2": [
      "SELECT dogs.name  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment <= 1000; ",
      "SELECT dogs.name  FROM dogs  WHERE dogs.dog_id IN (SELECT dog_id FROM treatments WHERE cost_of_treatment <= 1000); ",
      "SELECT dogs.name  FROM dogs, treatments  WHERE dogs.dog_id = treatments.dog_id AND treatments.cost_of_treatment <= 1000; ",
      "SELECT d.name  FROM dogs AS d  INNER JOIN treatments AS t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000; ",
      "SELECT d.name  FROM dogs d, treatments t  WHERE d.dog_id = t.dog_id AND t.cost_of_treatment <= 1000; ",
      "SELECT d.name  FROM dogs d  INNER JOIN treatments t USING (dog_id) WHERE t.cost_of_treatment <= 1000; ",
      "SELECT dogs.name  FROM dogs  WHERE dogs.dog_id IN (SELECT dog_id FROM treatments WHERE treatments.cost_of_treatment <= 1000); ",
      "SELECT dogs.name FROM dogs, treatments  WHERE dogs.dog_id = treatments.dog_id AND treatments.cost_of_treatment <= 1000; ",
      "SELECT dogs.name  FROM dogs WHERE EXISTS (SELECT 1 FROM treatments WHERE dogs.dog_id = treatments.dog_id AND treatments.cost_of_treatment <= 1000); ",
      "SELECT dogs.name  FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments WHERE cost_of_treatment <= 1000);"
    ],
    "gpt_answers3": [
      "SELECT d.name FROM dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM treatments t WHERE t.cost_of_treatment > 1000) ",
      "SELECT d.name  FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING MAX(t.cost_of_treatment) <= 1000 ",
      "SELECT d.name  FROM dogs d JOIN owners o ON d.owner_id = o.owner_id LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment IS NULL OR t.cost_of_treatment <= 1000 ",
      "SELECT d.name  FROM dogs d INNER JOIN owners o ON d.owner_id = o.owner_id LEFT JOIN treatments t ON d.dog_id = t.dog_id AND t.cost_of_treatment > 1000 WHERE t.cost_of_treatment IS NULL ",
      "SELECT d.name  FROM dogs d JOIN owners o ON d.owner_id = o.owner_id LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000 ",
      "SELECT d.name  FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE NOT EXISTS (SELECT 1 FROM treatments t WHERE d.dog_id = t.dog_id AND t.cost_of_treatment > 1000) ",
      "SELECT d.name  FROM dogs d INNER JOIN owners o ON d.owner_id = o.owner_id WHERE d.dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000) ",
      "SELECT d.name  FROM dogs d, treatments t WHERE d.dog_id = t.dog_id GROUP BY d.name HAVING MAX(t.cost_of_treatment) <= 1000 ",
      "SELECT d.name  FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE NOT EXISTS (SELECT 1 FROM treatments t WHERE d.dog_id = t.dog_id AND t.cost_of_treatment > 1000) ",
      "SELECT d.name  FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment IS NULL OR t.cost_of_treatment <= 1000"
    ]
  },
  {
    "id": 926,
    "db_id": "dog_kennels",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "gpt_answers1": [
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY name HAVING SUM(cost_of_treatment) <= 1000; ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000 ); ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments GROUP BY dog_id HAVING MAX(cost_of_treatment) > 1000 ); ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000 ); ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY name HAVING COALESCE(SUM(cost_of_treatment), 0) <= 1000; ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE NOT EXISTS ( SELECT dog_id FROM treatments WHERE treatments.dog_id = dogs.dog_id GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000 ); ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000 GROUP BY dog_id ); ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY name HAVING SUM(CASE WHEN cost_of_treatment IS NULL THEN 0 ELSE cost_of_treatment END) <= 1000; ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000 GROUP BY dog_id HAVING COUNT(*) > 1 ); ",
      "SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY name HAVING COUNT(DISTINCT treatment_id) = 0 OR MAX(cost_of_treatment) <= 1000;"
    ],
    "gpt_answers2": [
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000 ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id LEFT JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000 OR COUNT(t.dog_id) = 0 ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id LEFT JOIN ( SELECT dog_id, SUM(cost_of_treatment) as total_cost FROM treatments GROUP BY dog_id ) t ON d.dog_id = t.dog_id WHERE t.total_cost <= 1000 OR t.total_cost IS NULL ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id LEFT JOIN treatments t ON d.dog_id = t.dog_id AND t.cost_of_treatment > 1000 WHERE t.treatment_id IS NULL ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE NOT EXISTS ( SELECT NULL FROM treatments t WHERE d.dog_id = t.dog_id AND t.cost_of_treatment > 1000 ) ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE d.dog_id NOT IN ( SELECT t.dog_id FROM treatments t WHERE t.cost_of_treatment > 1000 ) ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id LEFT JOIN treatments t ON d.dog_id = t.dog_id AND t.cost_of_treatment <= 1000 GROUP BY d.name HAVING COUNT(t.dog_id) = 0 ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE d.name NOT IN ( SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) > 1000 ) ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE NOT EXISTS ( SELECT NULL FROM treatments t WHERE d.dog_id = t.dog_id GROUP BY t.dog_id HAVING SUM(t.cost_of_treatment) > 1000 ) ",
      "SELECT d.name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE d.dog_id NOT IN ( SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000 )"
    ],
    "gpt_answers3": [
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT treatments.dog_id FROM treatments WHERE treatments.cost_of_treatment > 1000 ); ",
      "SELECT dogs.name FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING SUM(treatments.cost_of_treatment) <= 1000; ",
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING SUM(treatments.cost_of_treatment) <= 1000; ",
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment <= 1000 GROUP BY dogs.name; ",
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN ( SELECT treatments.dog_id FROM treatments WHERE treatments.cost_of_treatment > 1000 ) AS t ON dogs.dog_id = t.dog_id WHERE t.dog_id IS NULL; ",
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000 ); ",
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.dog_id IS NULL OR treatments.cost_of_treatment <= 1000; ",
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000 ) OR dogs.dog_id NOT IN ( SELECT dog_id FROM treatments ); ",
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000 ) OR dogs.dog_id NOT IN ( SELECT dog_id FROM treatments ) OR dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE treatments.cost_of_treatment <= 1000 ); ",
      "SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE treatments.cost_of_treatment > 1000 ) OR dogs.dog_id NOT IN ( SELECT dog_id FROM treatments WHERE treatments.cost_of_treatment <= 1000 );"
    ]
  },
  {
    "id": 931,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(owner_count) FROM (SELECT owner_id, COUNT(*) as owner_count FROM dogs GROUP BY owner_id)))",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN (SELECT owner_id, COUNT(*) as dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1) AS d ON o.owner_id = d.owner_id",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY COUNT(d.dog_id) DESC LIMIT 1",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners INNER JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id) AS dog_counts ON owners.owner_id = dog_counts.owner_id ORDER BY dog_count DESC LIMIT 1",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM (SELECT owner_id, COUNT(*) as dog_count FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1) AS max_dogs)",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = MAX(SELECT COUNT(*) FROM dogs GROUP BY owner_id))",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT COUNT(*) FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1))",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = MAX(SELECT COUNT(*) FROM dogs GROUP BY owner_id))"
    ],
    "gpt_answers2": [
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY count(*) DESC LIMIT 1); ",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name HAVING COUNT(d.dog_id) = (SELECT MAX(dog_count) FROM (SELECT owner_id, COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id)); ",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM dogs GROUP BY owner_id))); ",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id)); ",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM dogs GROUP BY owner_id))); ",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id) d ON o.owner_id = d.owner_id WHERE dog_count = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM dogs GROUP BY owner_id)); ",
      "SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT COUNT(*) FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)); ",
      "SELECT owner_id, first_name, last_name FROM owners ORDER BY (SELECT COUNT(*) FROM dogs WHERE owners.owner_id = dogs.owner_id) DESC LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT dogs.owner_id FROM dogs GROUP BY dogs.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1 ); ",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners AS o WHERE o.owner_id = ( SELECT d.owner_id FROM dogs AS d GROUP BY d.owner_id ORDER BY COUNT(d.dog_id) DESC LIMIT 1 ); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1 ); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(dog_id) = ( SELECT MAX(dog_count) FROM ( SELECT COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ) ) ); ",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners AS o INNER JOIN ( SELECT owner_id, COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1 ) AS od ON o.owner_id = od.owner_id; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners INNER JOIN ( SELECT owner_id, COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1 ) AS dp ON owners.owner_id = dp.owner_id; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(dog_id) = ( SELECT MAX(dog_count) FROM ( SELECT COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ) ) ) LIMIT 1; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id IN ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1 ); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC FETCH FIRST ROW ONLY );"
    ]
  },
  {
    "id": 932,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT owner_id, first_name, last_name  FROM owners  WHERE owner_id = ( SELECT owner_id  FROM dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1 ) ",
      "SELECT o.owner_id, o.first_name, o.last_name  FROM owners o JOIN ( SELECT owner_id, COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1 ) d ON o.owner_id = d.owner_id ",
      "SELECT owner_id, first_name, last_name  FROM owners  WHERE owner_id = ( SELECT owner_id  FROM ( SELECT owner_id, COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1 ) subquery ) ",
      "SELECT owner_id, first_name, last_name  FROM owners  WHERE owner_id IN ( SELECT owner_id  FROM dogs GROUP BY owner_id HAVING COUNT(dog_id) = ( SELECT MAX(dog_count)  FROM ( SELECT COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ) subquery ) ) ",
      "SELECT o.owner_id, o.first_name, o.last_name  FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name HAVING COUNT(d.dog_id) = ( SELECT MAX(dog_count)  FROM ( SELECT COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ) subquery ) ",
      "SELECT owner_id, first_name, last_name  FROM owners  ORDER BY ( SELECT COUNT(dog_id)  FROM dogs WHERE dogs.owner_id = owners.owner_id ) DESC LIMIT 1 ",
      "SELECT owner_id, first_name, last_name  FROM owners  JOIN ( SELECT owner_id, COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1 ) subquery ON owners.owner_id = subquery.owner_id ",
      "SELECT owner_id, first_name, last_name  FROM owners  WHERE ( SELECT COUNT(dog_id)  FROM dogs WHERE dogs.owner_id = owners.owner_id ) = ( SELECT MAX(dog_count)  FROM ( SELECT COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ) subquery ) ",
      "SELECT owner_id, first_name, last_name  FROM owners  WHERE owner_id IN ( SELECT owner_id  FROM dogs GROUP BY owner_id HAVING COUNT(dog_id) >= ALL ( SELECT COUNT(dog_id)  FROM dogs GROUP BY owner_id ) ) ",
      "SELECT o.owner_id, o.first_name, o.last_name  FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name HAVING COUNT(d.dog_id) >= ALL ( SELECT COUNT(dog_id)  FROM dogs GROUP BY owner_id )"
    ],
    "gpt_answers2": [
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1) AS max_dogs ON owners.owner_id = max_dogs.owner_id; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT COUNT(*) FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = (SELECT dogs.owner_id FROM dogs GROUP BY dogs.owner_id ORDER BY COUNT(*) DESC LIMIT 1) AND owners.owner_id IN (SELECT dogs.owner_id FROM dogs GROUP BY dogs.owner_id HAVING COUNT(*) = (SELECT COUNT(*) FROM dogs GROUP BY dogs.owner_id ORDER BY COUNT(*) DESC LIMIT 1)); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1) AS max_dogs ON owners.owner_id = max_dogs.owner_id; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1) AND owners.owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT COUNT(*) AS max_dogs FROM dogs GROUP BY owner_id ORDER BY max_dogs DESC LIMIT 1)); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id))); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id))); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1) AS max_dogs ON owners.owner_id = max_dogs.owner_id; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = (SELECT owner_id FROM dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT owner_id, COUNT(*) AS dog_count FROM dogs GROUP BY owner_id)));"
    ],
    "gpt_answers3": [
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT dogs.owner_id FROM dogs GROUP BY dogs.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1 ); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT dogs.owner_id FROM dogs GROUP BY dogs.owner_id HAVING COUNT(dogs.dog_id) = ( SELECT MAX(dog_count) FROM ( SELECT COUNT(dogs.dog_id) as dog_count FROM dogs GROUP BY dogs.owner_id ) ) ); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT MAX(owner_id) FROM ( SELECT owners.owner_id, COUNT(dogs.dog_id) as dog_count FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ) ); ",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN ( SELECT d.owner_id, COUNT(d.dog_id) as dog_count FROM dogs d GROUP BY d.owner_id ORDER BY dog_count DESC LIMIT 1 ) as sub ON o.owner_id = sub.owner_id; ",
      "SELECT DISTINCT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name HAVING COUNT(dogs.dog_id) = ( SELECT MAX(dog_count) FROM ( SELECT COUNT(dogs.dog_id) as dog_count FROM dogs GROUP BY dogs.owner_id ) ); ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN ( SELECT dogs.owner_id FROM dogs GROUP BY dogs.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1 ) AS subquery ON owners.owner_id = subquery.owner_id; ",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id GROUP BY o.owner_id HAVING COUNT(d.dog_id) = ( SELECT MAX(dog_count) FROM ( SELECT COUNT(dog_id) AS dog_count FROM dogs GROUP BY owner_id ) ); ",
      "SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners WHERE owners.owner_id = ( SELECT dogs.owner_id FROM dogs WHERE dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1 );"
    ]
  },
  {
    "id": 937,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING COUNT(treatments.treatment_id) = (SELECT MAX(treatment_count) FROM ( SELECT COUNT(treatments.treatment_id) as treatment_count FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ) AS counts); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE treatments.treatment_id IN (SELECT treatment_id FROM treatments GROUP BY treatment_id HAVING COUNT(treatment_id) = ( SELECT MAX(treatment_count) FROM ( SELECT COUNT(treatment_id) as treatment_count FROM treatments GROUP BY treatment_id ) AS counts) ) GROUP BY owners.owner_id ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners WHERE owners.owner_id IN (SELECT dogs.owner_id FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners WHERE owners.owner_id = (SELECT dogs.owner_id FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING COUNT(treatments.treatment_id) = (SELECT COUNT(treatment_id) as treatment_count FROM treatments GROUP BY treatment_id HAVING COUNT(*) = (SELECT MAX(count_treatments) FROM ( SELECT COUNT(*) as count_treatments FROM treatments GROUP BY treatment_id ) AS counts)); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING COUNT(treatments.treatment_id) = (SELECT MAX(count_treatments) FROM ( SELECT COUNT(*) as count_treatments FROM treatments GROUP BY treatment_id ) AS counts) LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id HAVING COUNT(treatments.treatment_id) = (SELECT MAX(count_treatments) FROM ( SELECT COUNT(*) as count_treatments FROM treatments GROUP BY dog_id ) AS counts) LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING COUNT(treatments.treatment_id) = (SELECT COUNT(*) FROM treatments GROUP BY dog_id ORDER BY COUNT(*) DESC LIMIT 1);"
    ],
    "gpt_answers2": [
      "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON dogs.owner_id = owners.owner_id  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id  ORDER BY COUNT(treatments.treatment_id) DESC  LIMIT 1 ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  WHERE owners.owner_id IN ( SELECT dogs.owner_id  FROM dogs  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY dogs.owner_id  ORDER BY COUNT(treatments.treatment_id) DESC  LIMIT 1 ) ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id  HAVING COUNT(treatments.treatment_id) = ( SELECT MAX(treatment_count)  FROM ( SELECT COUNT(treatments.treatment_id) AS treatment_count  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id ) ) ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id, owners.last_name  HAVING COUNT(treatments.treatment_id) = ( SELECT MAX(treatment_count)  FROM ( SELECT COUNT(treatments.treatment_id) AS treatment_count  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id ) ) ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id, owners.last_name  ORDER BY COUNT(treatments.treatment_id) DESC  LIMIT 1 ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  WHERE owners.owner_id = ( SELECT dogs.owner_id  FROM dogs  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY dogs.owner_id  ORDER BY COUNT(treatments.treatment_id) DESC  LIMIT 1 ) ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  WHERE owners.owner_id = ( SELECT owners.owner_id  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id  ORDER BY COUNT(treatments.treatment_id) DESC  LIMIT 1 ) ",
      "SELECT owner_id, last_name  FROM owners  WHERE owner_id = ( SELECT owner_id  FROM dogs  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owner_id  ORDER BY COUNT(treatments.treatment_id) DESC  LIMIT 1 ) ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id  ORDER BY COUNT(*) DESC  LIMIT 1 ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id  HAVING COUNT(*) = ( SELECT MAX(treatment_count)  FROM ( SELECT COUNT(*) AS treatment_count  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id ) )"
    ],
    "gpt_answers3": [
      "SELECT owners.owner_id, owners.last_name  FROM owners  JOIN dogs ON dogs.owner_id = owners.owner_id  JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id WHERE EXISTS (SELECT 1  FROM treatments  WHERE treatments.dog_id = dogs.dog_id) GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(*) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING COUNT(*) = (SELECT MAX(count_treatments) FROM (SELECT COUNT(*) AS count_treatments FROM treatments GROUP BY dog_id) AS counts); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN (SELECT dog_id, COUNT(*) AS count_treatments FROM treatments GROUP BY dog_id) AS dog_counts ON dog_counts.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY dog_counts.count_treatments DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(DISTINCT treatments.treatment_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(DISTINCT treatments.professional_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY MAX(treatments.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING SUM(treatments.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT owners.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id) AS costs); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING COUNT(DISTINCT treatments.professional_id) * COUNT(DISTINCT treatments.treatment_id) = (SELECT MAX(count_products) FROM (SELECT COUNT(DISTINCT treatments.professional_id) * COUNT(DISTINCT treatments.treatment_id) AS count_products FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id) AS products);"
    ]
  },
  {
    "id": 938,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE owners.owner_id = (SELECT dogs.owner_id FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1); ",
      "SELECT owners.owner_id, owners.last_name FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY owners.owner_id, owners.last_name HAVING SUM(treatments.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT dogs.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id)); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE treatments.cost_of_treatment = (SELECT MAX(cost_of_treatment) FROM treatments) LIMIT 1; ",
      "WITH owners_treatment_cost AS ( SELECT owners.owner_id, owners.last_name, SUM(treatments.cost_of_treatment) AS total_cost FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ) SELECT owner_id, last_name FROM owners_treatment_cost WHERE total_cost = (SELECT MAX(total_cost) FROM owners_treatment_cost) LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING SUM(treatments.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT owners.owner_id, owners.last_name, SUM(treatments.cost_of_treatment) FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name)); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE treatments.cost_of_treatment = (SELECT MAX(treatments.cost_of_treatment) FROM treatments) LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE treatments.cost_of_treatment = (SELECT MAX(total_cost) FROM (SELECT owners.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog.id GROUP BY owners.owner_id)); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON dogs.owner_id = owners.owner_id  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  WHERE owners.owner_id = ( SELECT dogs.owner_id  FROM dogs  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY dogs.owner_id  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1 ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  WHERE owners.owner_id = ( SELECT dogs.owner_id  FROM dogs  WHERE dogs.dog_id = ( SELECT treatments.dog_id  FROM treatments  GROUP BY treatments.dog_id  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1 ) ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON dogs.owner_id = owners.owner_id  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  WHERE treatments.cost_of_treatment = ( SELECT MAX(cost_of_treatment)  FROM treatments ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  WHERE owners.owner_id = ANY( SELECT dogs.owner_id  FROM dogs  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY dogs.owner_id  HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost)  FROM ( SELECT dogs.owner_id, SUM(treatments.cost_of_treatment) AS total_cost  FROM dogs  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY dogs.owner_id ) ) ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON dogs.owner_id = owners.owner_id  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id, owners.last_name HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost)  FROM ( SELECT SUM(treatments.cost_of_treatment) AS total_cost  FROM treatments  GROUP BY treatments.dog_id ) ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON dogs.owner_id = owners.owner_id  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id  HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost)  FROM ( SELECT dogs.owner_id, SUM(treatments.cost_of_treatment) AS total_cost  FROM dogs  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY dogs.owner_id ) ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON dogs.owner_id = owners.owner_id  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id  HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost)  FROM ( SELECT SUM(treatments.cost_of_treatment) AS total_cost  FROM treatments  INNER JOIN dogs ON treatments.dog_id = dogs.dog_id  GROUP BY dogs.owner_id ) ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON dogs.owner_id = owners.owner_id  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  WHERE treatments.cost_of_treatment = ANY( SELECT MAX(cost_of_treatment)  FROM treatments ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners  INNER JOIN dogs ON dogs.owner_id = owners.owner_id  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  GROUP BY owners.owner_id, owners.last_name  HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost)  FROM ( SELECT dogs.owner_id, owners.last_name, SUM(treatments.cost_of_treatment) AS total_cost  FROM dogs  INNER JOIN treatments ON treatments.dog_id = dogs.dog_id  INNER JOIN owners ON owners.owner_id = dogs.owner_id  GROUP BY dogs.owner_id, owners.last_name ) );"
    ],
    "gpt_answers3": [
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE treatments.cost_of_treatment = ( SELECT MAX(cost_of_treatment) FROM treatments ); ",
      "SELECT owners.owner_id, owners.last_name  FROM owners WHERE owner_id = ( SELECT owner_id FROM dogs WHERE dog_id = ( SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1 ) ); ",
      "SELECT owners.owner_id, owners.last_name FROM owners WHERE owner_id = ( SELECT dogs.owner_id FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1 ); ",
      "SELECT owners.owner_id, owners.last_name FROM owners WHERE owner_id IN ( SELECT dogs.owner_id FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost) FROM ( SELECT SUM(cost_of_treatment) AS total_cost FROM treatments GROUP BY dog_id ) ) ); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost) FROM ( SELECT SUM(cost_of_treatment) AS total_cost FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id ) ); ",
      "SELECT owners.owner_id, owners.last_name FROM owners JOIN ( SELECT dogs.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id ORDER BY total_cost DESC LIMIT 1 ) AS max_treatment_cost ON owners.owner_id = max_treatment_cost.owner_id; ",
      "SELECT owners.owner_id, owners.last_name FROM owners WHERE owner_id = ( SELECT owner_id FROM dogs WHERE dog_id = ( SELECT dog_id FROM ( SELECT dogs.dog_id, SUM(treatments.cost_of_treatment) AS total_cost FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.dog_id ORDER BY total_cost DESC LIMIT 1 ) ) ); ",
      "SELECT owners.owner_id, owners.last_name FROM owners WHERE owner_id = ( SELECT owners.owner_id FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1 ); ",
      "SELECT owners.owner_id, owners.last_name FROM owners WHERE owner_id = ( SELECT dogs.owner_id FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC FETCH FIRST 1 ROWS ONLY );"
    ]
  },
  {
    "id": 940,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "gpt_answers1": [
      "SELECT treatment_type_description  FROM treatment_types  WHERE treatment_type_code = (SELECT treatment_type_code  FROM treatments  GROUP BY treatment_type_code  ORDER BY SUM(cost_of_treatment) ASC  LIMIT 1); ",
      "SELECT treatment_type_description  FROM treatment_types  WHERE treatment_type_code = (SELECT treatment_type_code  FROM treatments  GROUP BY treatment_type_code  HAVING SUM(cost_of_treatment) = (SELECT MIN(total_cost)  FROM (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost  FROM treatments  GROUP BY treatment_type_code))); ",
      "SELECT treatment_type_description  FROM treatment_types  WHERE treatment_type_code IN (SELECT treatment_type_code  FROM treatments  GROUP BY treatment_type_code  HAVING SUM(cost_of_treatment) = (SELECT MIN(total_cost)  FROM (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost  FROM treatments  GROUP BY treatment_type_code))); ",
      "SELECT treatment_type_description  FROM treatment_types  WHERE treatment_type_code = (SELECT treatment_type_code  FROM treatments  GROUP BY treatment_type_code  ORDER BY cost_of_treatment ASC  LIMIT 1); ",
      "SELECT treatment_type_description  FROM treatment_types  INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_type_description  HAVING SUM(cost_of_treatment) = (SELECT MIN(total_cost)  FROM (SELECT treatment_type_description, SUM(cost_of_treatment) AS total_cost  FROM treatment_types  INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_type_description)); ",
      "SELECT treatment_type_description  FROM treatment_types  INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_type_description  ORDER BY SUM(cost_of_treatment) ASC  LIMIT 1; ",
      "SELECT treatment_type_description  FROM treatment_types  INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_type_description  HAVING SUM(cost_of_treatment) = (SELECT MIN(total_cost)  FROM (SELECT treatment_type_description, SUM(cost_of_treatment) AS total_cost  FROM treatment_types  INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_type_description)); ",
      "SELECT treatment_type_description  FROM treatment_types  WHERE treatment_type_code = (SELECT treatment_type_code  FROM treatments  GROUP BY treatment_type_code  HAVING SUM(cost_of_treatment) = (SELECT MIN(total_cost)  FROM (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost  FROM treatments  GROUP BY treatment_type_code  ORDER BY total_cost ASC  LIMIT 1))); ",
      "SELECT treatment_type_description  FROM treatment_types  WHERE treatment_type_code = (SELECT treatment_type_code  FROM treatments  GROUP BY treatment_type_code  HAVING SUM(cost_of_treatment) = (SELECT total_cost  FROM (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost  FROM treatments  GROUP BY treatment_type_code  ORDER BY total_cost ASC  LIMIT 1))); ",
      "SELECT treatment_type_description  FROM treatment_types  INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code  GROUP BY treatment_type_description  ORDER BY SUM(cost_of_treatment) ASC  LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT treatment_types.treatment_type_description  FROM treatment_types  INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1; ",
      "SELECT t.treatment_type_description  FROM treatment_types AS t  JOIN treatments AS tr ON t.treatment_type_code = tr.treatment_type_code GROUP BY t.treatment_type_description HAVING MIN(tr.cost_of_treatment); ",
      "SELECT TT.treatment_type_description FROM treatment_types AS TT WHERE TT.treatment_type_code IN ( SELECT T.treatment_type_code FROM treatments AS T GROUP BY T.treatment_type_code HAVING MIN(T.cost_of_treatment) ); ",
      "SELECT TT.treatment_type_description FROM treatment_types AS TT JOIN ( SELECT T.treatment_type_code, MIN(T.cost_of_treatment) AS min_cost FROM treatments AS T GROUP BY T.treatment_type_code ) AS TC ON TT.treatment_type_code = TC.treatment_type_code AND TC.min_cost = TC.min_cost; ",
      "SELECT ttd.treatment_type_description  FROM treatment_types AS ttd  INNER JOIN treatments AS tr ON ttd.treatment_type_code = tr.treatment_type_code  GROUP BY ttd.treatment_type_description  HAVING SUM(tr.cost_of_treatment) = ( SELECT MIN(total_cost) FROM ( SELECT SUM(t.cost_of_treatment) AS total_cost FROM treatments AS t GROUP BY t.treatment_type_code ) AS subq ); ",
      "SELECT t.treatment_type_description FROM treatment_types AS t INNER JOIN ( SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM treatments GROUP BY treatment_type_code ORDER BY total_cost ASC LIMIT 1 ) AS tt ON tt.treatment_type_code = t.treatment_type_code; ",
      "SELECT tt.treatment_type_description FROM treatment_types AS tt WHERE tt.treatment_type_code IN ( SELECT t.treatment_type_code FROM treatments AS t GROUP BY t.treatment_type_code HAVING SUM(t.cost_of_treatment) = ( SELECT MIN(total_cost) FROM ( SELECT SUM(tc.cost_of_treatment) AS total_cost FROM treatments AS tc GROUP BY tc.treatment_type_code ) AS subq ) ); ",
      "SELECT tt.treatment_type_description  FROM treatment_types AS tt, treatments AS tr WHERE tt.treatment_type_code = tr.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1; ",
      "SELECT treatment_types.treatment_type_description FROM treatment_types WHERE treatment_types.treatment_type_code = ( SELECT treatments.treatment_type_code FROM treatments GROUP BY treatments.treatment_type_code HAVING MIN(treatments.cost_of_treatment) ); ",
      "SELECT treatment_types.treatment_type_description  FROM treatment_types  JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_code HAVING SUM(treatments.cost_of_treatment) = ( SELECT MIN(total_cost) FROM ( SELECT SUM(treatments.cost_of_treatment) AS total_cost FROM treatments GROUP BY treatments.treatment_type_code ) AS subquery );"
    ],
    "gpt_answers3": [
      "SELECT treatment_type_description  FROM treatment_types  WHERE treatment_type_code = ( SELECT treatment_type_code  FROM treatments  GROUP BY treatment_type_code  ORDER BY SUM(cost_of_treatment)  LIMIT 1 ) ",
      "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = ( SELECT treatment_type_code FROM treatments  GROUP BY treatment_type_code  HAVING SUM(cost_of_treatment) = ( SELECT MIN(total_cost) FROM ( SELECT SUM(cost_of_treatment) as total_cost FROM treatments GROUP BY treatment_type_code ) ) ) ",
      "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = ( SELECT treatment_type_code FROM ( SELECT treatment_type_code, SUM(cost_of_treatment) as total_cost FROM treatments  GROUP BY treatment_type_code  ORDER BY total_cost LIMIT 1 ) ) ",
      "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code IN ( SELECT treatment_type_code FROM treatments  GROUP BY treatment_type_code  ORDER BY SUM(cost_of_treatment) ASC LIMIT 1 ) ",
      "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code IN ( SELECT treatment_type_code FROM treatments  GROUP BY treatment_type_code  HAVING SUM(cost_of_treatment) = ( SELECT MIN(total_cost) FROM ( SELECT SUM(cost_of_treatment) as total_cost FROM treatments GROUP BY treatment_type_code ) ) ) ",
      "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code IN ( SELECT treatment_type_code FROM ( SELECT treatment_type_code, SUM(cost_of_treatment) as total_cost FROM treatments  GROUP BY treatment_type_code  ) AS subquery WHERE total_cost = ( SELECT MIN(total_cost) FROM ( SELECT SUM(cost_of_treatment) as total_cost FROM treatments GROUP BY treatment_type_code ) ) ) ",
      "SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = ( SELECT treatment_type_code FROM ( SELECT treatment_type_code, SUM(cost_of_treatment) as total_cost FROM treatments  GROUP BY treatment_type_code  ORDER BY total_cost ASC LIMIT 1 ) ) ",
      "SELECT treatment_type_description FROM treatment_types JOIN ( SELECT treatment_type_code FROM treatments  GROUP BY treatment_type_code  ORDER BY SUM(cost_of_treatment) ASC LIMIT 1 ) AS min_cost ON treatment_types.treatment_type_code = min_cost.treatment_type_code ",
      "SELECT treatment_type_description FROM treatment_types JOIN ( SELECT treatment_type_code FROM treatments  GROUP BY treatment_type_code  HAVING SUM(cost_of_treatment) = ( SELECT MIN(total_cost) FROM ( SELECT SUM(cost_of_treatment) as total_cost FROM treatments GROUP BY treatment_type_code ) ) ) AS min_cost ON treatment_types.treatment_type_code = min_cost.treatment_type_code ",
      "SELECT treatment_type_description FROM treatment_types JOIN ( SELECT treatment_type_code FROM ( SELECT treatment_type_code, SUM(cost_of_treatment) as total_cost FROM treatments  GROUP BY treatment_type_code  ORDER BY total_cost LIMIT 1 ) ) AS min_cost ON treatment_types.treatment_type_code = min_cost.treatment_type_code"
    ]
  },
  {
    "id": 942,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "gpt_answers1": [
      "SELECT owners.owner_id, owners.zip_code  FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT o.owner_id, o.zip_code FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code HAVING SUM(t.cost_of_treatment) = ( SELECT MAX(total_cost) FROM ( SELECT SUM(cost_of_treatment) as total_cost FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY owners.owner_id ) ); ",
      "SELECT owners.owner_id, owners.zip_code FROM owners WHERE owners.owner_id = ( SELECT dogs.owner_id FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1 ); ",
      "SELECT owners.owner_id, owners.zip_code  FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(treatment_total) FROM ( SELECT dogs.owner_id, SUM(treatments.cost_of_treatment) as treatment_total FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id ) ); ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost) FROM ( SELECT owners.owner_id, SUM(treatments.cost_of_treatment) as total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ) ); ",
      "SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN ( SELECT treatments.dog_id, SUM(treatments.cost_of_treatment) as total_cost FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id GROUP BY treatments.dog_id ) t ON dogs.dog_id = t.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY total_cost DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN ( SELECT dogs.owner_id, SUM(treatments.cost_of_treatment) as total_cost FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id ) t ON owners.owner_id = t.owner_id GROUP BY owners.owner_id, owners.zip_code ORDER BY total_cost DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code HAVING SUM(treatments.cost_of_treatment) = ( SELECT MAX(total_cost) FROM ( SELECT dogs.owner_id, SUM(treatments.cost_of_treatment) as total_cost FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.owner_id ORDER BY total_cost DESC LIMIT 1 ) ); "
    ],
    "gpt_answers2": [
      "SELECT  owners.owner_id, owners.zip_code FROM  owners INNER JOIN  dogs ON dogs.owner_id = owners.owner_id INNER JOIN  treatments ON treatments.dog_id = dogs.dog_id GROUP BY  owners.owner_id, owners.zip_code ORDER BY  SUM(treatments.cost_of_treatment) DESC LIMIT 1 ",
      "SELECT  owners.owner_id, owners.zip_code FROM  owners JOIN  dogs ON dogs.owner_id = owners.owner_id JOIN  treatments ON treatments.dog_id = dogs.dog_id GROUP BY  owners.owner_id, owners.zip_code ORDER BY  SUM(treatments.cost_of_treatment) DESC LIMIT 1 ",
      "SELECT  owners.owner_id, owners.zip_code FROM  owners INNER JOIN  dogs ON owners.owner_id = dogs.owner_id INNER JOIN  treatments ON dogs.dog_id = treatments.dog_id GROUP BY  owners.owner_id, owners.zip_code HAVING  SUM(treatments.cost_of_treatment) = ( SELECT  MAX(total_cost) FROM  ( SELECT  owners.owner_id,  SUM(treatments.cost_of_treatment) AS total_cost FROM  owners INNER JOIN  dogs ON owners.owner_id = dogs.owner_id INNER JOIN  treatments ON dogs.dog_id = treatments.dog_id GROUP BY  owners.owner_id ) AS subquery ) ",
      "SELECT  owners.owner_id, owners.zip_code FROM  owners JOIN  dogs ON owners.owner_id = dogs.owner_id JOIN ( SELECT  treatments.dog_id,  SUM(cost_of_treatment) AS total_cost FROM  treatments JOIN  dogs ON treatments.dog_id = dogs.dog_id GROUP BY  treatments.dog_id ) AS subquery ON dogs.dog_id = subquery.dog_id GROUP BY  owners.owner_id, owners.zip_code HAVING  SUM(total_cost) = ( SELECT  MAX(total_cost) FROM ( SELECT  owners.owner_id,  SUM(cost_of_treatment) AS total_cost FROM  treatments JOIN  dogs ON treatments.dog_id = dogs.dog_id GROUP BY  owners.owner_id ) AS subquery ) ",
      "SELECT  owners.owner_id, owners.zip_code FROM  owners JOIN  dogs ON owners.owner_id = dogs.owner_id JOIN  treatments ON dogs.dog_id = treatments.dog_id GROUP BY  owners.owner_id, owners.zip_code HAVING  SUM(treatments.cost_of_treatment) = ( SELECT  MAX(total_cost) FROM ( SELECT  dogs.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM  dogs JOIN  treatments ON dogs.dog_id = treatments.dog_id GROUP BY  dogs.owner_id ) AS subquery ) ",
      "SELECT  owners.owner_id, owners.zip_code FROM  owners JOIN  dogs ON owners.owner_id = dogs.owner_id JOIN  treatments ON treatments.dog_id = dogs.dog_id GROUP BY  owners.owner_id, owners.zip_code ORDER BY  SUM(treatments.cost_of_treatment) DESC LIMIT 1 ",
      "SELECT  owners.owner_id, owners.zip_code FROM  owners JOIN  dogs ON owners.owner_id = dogs.owner_id JOIN  ( SELECT  dog_id,  SUM(cost_of_treatment) AS total_cost FROM  treatments GROUP BY  dog_id ) AS subquery ON dogs.dog_id = subquery.dog_id GROUP BY  owners.owner_id, owners.zip_code ORDER BY  SUM(subquery.total_cost) DESC LIMIT 1 ",
      "SELECT  owners.owner_id, owners.zip_code FROM  owners JOIN  dogs ON owners.owner_id = dogs.owner_id JOIN  treatments ON treatments.dog_id = dogs.dog_id GROUP BY  owners.owner_id, owners.zip_code HAVING  SUM(treatments.cost_of_treatment) = ( SELECT  MAX(total_cost) FROM ( SELECT  owners.owner_id,  SUM(treatments.cost_of_treatment) AS total_cost FROM  owners JOIN  dogs ON owners.owner_id = dogs.owner_id JOIN  treatments ON treatments.dog_id = dogs.dog_id GROUP BY  owners.owner_id ) AS subquery ) ",
      "SELECT  owners.owner_id, owners.zip_code FROM  (  SELECT  owners.owner_id, owners.zip_code, SUM(treatments.cost_of_treatment) AS total_cost FROM  owners JOIN  dogs ON owners.owner_id = dogs.owner_id JOIN  treatments ON treatments.dog_id = dogs.dog_id GROUP BY  owners.owner_id, owners.zip_code ) AS subquery WHERE  subquery.total_cost = ( SELECT  MAX(subquery.total_cost) FROM  subquery ) LIMIT 1 ",
      "SELECT  owners.owner_id, owners.zip_code FROM  owners JOIN  dogs ON owners.owner_id = dogs.owner_id JOIN  treatments ON dogs.dog_id = treatments.dog_id GROUP BY  owners.owner_id, owners.zip_code HAVING  SUM(treatments.cost_of_treatment) = ( SELECT  MAX(total_cost) FROM ( SELECT  dogs.owner_id, SUM(cost_of_treatment) AS total_cost FROM  treatments JOIN  dogs ON treatments.dog_id = dogs.dog_id GROUP BY  dogs.owner_id ) AS subquery ) LIMIT 1"
    ],
    "gpt_answers3": [
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code HAVING SUM(treatments.cost_of_treatment) =  (SELECT MAX(total_cost)  FROM (SELECT owners.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id) AS sub_query); ",
      "SELECT owner_id, zip_code FROM (SELECT owners.owner_id, owners.zip_code, SUM(cost_of_treatment) AS total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code) AS sub_query ORDER BY total_cost DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY (SELECT SUM(cost_of_treatment)  FROM treatments WHERE treatments.dog_id = dogs.dog_id) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY MAX(treatments.cost_of_treatment * (SELECT COUNT(*)  FROM dogs WHERE dogs.owner_id = owners.owner_id)) DESC LIMIT 1; ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE (SELECT SUM(cost_of_treatment)  FROM treatments WHERE treatments.dog_id = dogs.dog_id) =  (SELECT MAX(total_cost) FROM (SELECT owners.owner_id, SUM(cost_of_treatment) AS total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id) AS sub_query); ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code HAVING (SELECT SUM(cost_of_treatment)  FROM treatments WHERE treatments.dog_id = dogs.dog_id) = (SELECT MAX(total_cost) FROM (SELECT owners.owner_id, SUM(cost_of_treatment) AS total_cost FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id) AS sub_query); ",
      "SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE (SELECT SUM(cost_of_treatment) FROM treatments WHERE treatments.dog_id = dogs.dog_id) = (SELECT MAX(total_cost) FROM (SELECT dogs.owner_id, SUM(cost_of_treatment) AS total_cost FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.owner_id) AS sub_query); ",
      "SELECT owners.owner_id, owners.zip_code FROM owners, dogs, treatments WHERE owners.owner_id = dogs.owner_id AND dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code HAVING SUM(treatments.cost_of_treatment) =  (SELECT MAX(total_cost)  FROM (SELECT owners.owner_id, SUM(treatments.cost_of_treatment) AS total_cost FROM owners, dogs, treatments WHERE owners.owner_id = dogs.owner_id AND dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id) AS sub_query); ",
      "SELECT owners.owner_id, owners.zip_code FROM owners, dogs, treatments WHERE owners.owner_id = dogs.owner_id AND dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;"
    ]
  },
  {
    "id": 943,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "gpt_answers1": [
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id  FROM treatments  GROUP BY professional_id  HAVING COUNT(DISTINCT treatment_type_code) >= 2); ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2; ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(treatments.treatment_type_code) >= 2; ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) > 1; ",
      "SELECT P.professional_id, P.cell_number FROM professionals P INNER JOIN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2) T ON P.professional_id = T.professional_id; ",
      "SELECT P.professional_id, P.cell_number FROM professionals P INNER JOIN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1) T ON P.professional_id = T.professional_id; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1); ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatment_type_code) > 1; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1);"
    ],
    "gpt_answers2": [
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING count(DISTINCT treatment_type_code) >= 2 ); ",
      "SELECT DISTINCT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(treatment_type_code) >= 2 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(treatment_type_code) > 1 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_description) >= 2 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 1 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_id) >= 2 );"
    ],
    "gpt_answers3": [
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2); ",
      "SELECT professional_id, cell_number FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) >= 2; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments WHERE treatment_type_code IN  (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code HAVING COUNT(*) >= 2) GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2); ",
      "SELECT professional_id, cell_number FROM treatments INNER JOIN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2) AS subquery ON treatments.professional_id = subquery.professional_id GROUP BY professional_id, cell_number; ",
      "SELECT professional_id, cell_number FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatment_type_code IN  (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code HAVING COUNT(*) >= 2) GROUP BY professional_id, cell_number; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments WHERE treatment_type_code IN  (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code HAVING COUNT(*) >= 2) GROUP BY professional_id HAVING COUNT(*) >= 2); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2) AND professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments WHERE treatment_type_code IN  (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code HAVING COUNT(DISTINCT professional_id) >= 2) GROUP BY professional_id HAVING COUNT(DISTINCT professional_id) >= 2); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2) AND EXISTS  (SELECT * FROM treatments AS t WHERE t.professional_id = professionals.professional_id GROUP BY treatment_type_code HAVING COUNT(*) >= 2);"
    ]
  },
  {
    "id": 944,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "gpt_answers1": [
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 ); ",
      "SELECT p.professional_id, p.cell_number FROM professionals p JOIN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 ) t ON p.professional_id = t.professional_id; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(treatment_type_code) >= 2 ); ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2; ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id, treatment_type_code HAVING COUNT(*) >= 2 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id, treatment_type_code HAVING COUNT(*) >= 2 ) GROUP BY professional_id; ",
      "SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2; ",
      "SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;"
    ],
    "gpt_answers2": [
      "SELECT professional_id, cell_number  FROM professionals WHERE professional_id IN (SELECT professional_id  FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2); ",
      "SELECT professionals.professional_id, professionals.cell_number  FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2; ",
      "SELECT professionals.professional_id, professionals.cell_number  FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(treatment_type_code) >= 2) ORDER BY professional_id ASC; ",
      "SELECT professional_id, cell_number  FROM professionals WHERE professional_id IN  (SELECT t.professional_id FROM treatments t GROUP BY t.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2); ",
      "SELECT professionals.professional_id, professionals.cell_number  FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.treatment_type_code IN  (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code HAVING COUNT(treatment_type_code) >= 2) GROUP BY professionals.professional_id; ",
      "SELECT professional_id, cell_number  FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2); ",
      "SELECT professionals.professional_id, professionals.cell_number  FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE EXISTS  (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code HAVING COUNT(treatment_type_code) >= 2) GROUP BY professionals.professional_id; ",
      "SELECT p.professional_id, p.cell_number  FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2; ",
      "SELECT p.professional_id, p.cell_number  FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id WHERE t.treatment_type_code IN  (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code HAVING COUNT(DISTINCT professional_id) >= 2) GROUP BY p.professional_id, p.cell_number; ",
      "SELECT professional_id, cell_number  FROM professionals WHERE professional_id IN  (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1);"
    ],
    "gpt_answers3": [
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1 ); ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 ); ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) > 1; ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2; ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 ); ",
      "SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 ); ",
      "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.cell_number HAVING COUNT(DISTINCT treatments.treatment_type_code) > 1;"
    ]
  },
  {
    "id": 945,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "gpt_answers1": [
      "SELECT professionals.first_name, professionals.last_name  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professionals.first_name, professionals.last_name ",
      "SELECT professionals.first_name, professionals.last_name  FROM professionals  WHERE professional_id IN ( SELECT professional_id  FROM treatments  WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) ) ",
      "SELECT p.first_name, p.last_name  FROM professionals p  INNER JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) ",
      "SELECT professionals.first_name, professionals.last_name  FROM professionals  WHERE professional_id IN ( SELECT professional_id  FROM treatments  WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) ) ",
      "SELECT first_name, last_name  FROM professionals  WHERE professional_id IN ( SELECT professional_id  FROM treatments  WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) ) ",
      "SELECT first_name, last_name  FROM professionals  WHERE professional_id IN ( SELECT professional_id  FROM treatments  WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) ) GROUP BY first_name, last_name ",
      "SELECT professionals.first_name, professionals.last_name  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professionals.first_name, professionals.last_name ",
      "SELECT professionals.first_name, professionals.last_name  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professionals.first_name, professionals.last_name ",
      "SELECT professionals.first_name, professionals.last_name  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professionals.first_name, professionals.last_name ",
      "SELECT professionals.first_name, professionals.last_name  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professionals.first_name, professionals.last_name"
    ],
    "gpt_answers2": [
      "SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT p.first_name, p.last_name FROM professionals AS p JOIN treatments AS t ON p.professional_id = t.professional_id GROUP BY p.first_name, p.last_name HAVING AVG(t.cost_of_treatment) > ( SELECT AVG(cost_of_treatment) FROM treatments ); ",
      "SELECT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.first_name, professionals.last_name HAVING AVG(treatments.cost_of_treatment) < ( SELECT AVG(cost_of_treatment) FROM treatments ); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) < ( SELECT AVG(cost_of_treatment) FROM treatments ) ); ",
      "SELECT p.first_name, p.last_name FROM professionals AS p JOIN treatments AS t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id GROUP BY professionals.first_name, professionals.last_name HAVING AVG(treatments.cost_of_treatment) < ( SELECT AVG(cost_of_treatment) FROM treatments ); ",
      "SELECT p.first_name, p.last_name FROM professionals AS p JOIN treatments AS t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY p.first_name, p.last_name; ",
      "SELECT professionals.first_name, professionals.last_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professionals.first_name, professionals.last_name; ",
      "SELECT p.first_name, p.last_name FROM professionals AS p JOIN treatments AS t ON t.professional_id = p.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY p.first_name, p.last_name;"
    ],
    "gpt_answers3": [
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments))  ",
      "SELECT P.first_name, P.last_name FROM professionals P JOIN treatments T ON T.professional_id = P.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)  ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM treatments))  ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT P.professional_id FROM professionals P JOIN treatments T ON T.professional_id = P.professional_id GROUP BY P.professional_id HAVING AVG(T.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM treatments)) ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING AVG(treatments.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM treatments) ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professional_id) ",
      "SELECT P.first_name, P.last_name FROM professionals P JOIN treatments T ON T.professional_id = P.professional_id GROUP BY P.professional_id HAVING AVG(T.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM treatments) ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professional_id HAVING COUNT(treatment_id) > 0) ",
      "SELECT P.first_name, P.last_name FROM professionals P JOIN treatments T ON T.professional_id = P.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY P.professional_id, P.first_name, P.last_name ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 0)"
    ]
  },
  {
    "id": 946,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "gpt_answers1": [
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM treatments)); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments GROUP BY professional_id)); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments) GROUP BY professional_id); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments GROUP BY professional_id) GROUP BY professional_id); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments WHERE professional_id = professionals.professional_id)); ",
      "SELECT first_name, last_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT first_name, last_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments GROUP BY professional_id); ",
      "SELECT first_name, last_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments WHERE treatments.professional_id = professionals.professional_id); ",
      "SELECT first_name, last_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments WHERE treatments.professional_id = professionals.professional_id GROUP BY professional_id);"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT professionals.first_name, professionals.last_name FROM professionals WHERE professionals.professional_id IN ( SELECT professional_id FROM treatments WHERE treatments.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ) ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals, treatments WHERE professionals.professional_id = treatments.professional_id AND treatments.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals WHERE professionals.professional_id IN ( SELECT professional_id FROM treatments WHERE cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ) ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < ( SELECT AVG(treatments.cost_of_treatment) FROM treatments ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals WHERE professionals.professional_id IN ( SELECT professional_id FROM treatments WHERE cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ) ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals WHERE professionals.professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) > ( SELECT AVG(cost_of_treatment) FROM treatments ) ); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments WHERE cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments ) );"
    ],
    "gpt_answers3": [
      "SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)); ",
      "SELECT p.first_name, p.last_name FROM professionals p, treatments t WHERE p.professional_id = t.professional_id AND t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals, treatments WHERE professionals.professional_id = treatments.professional_id AND treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)); ",
      "SELECT p.first_name, p.last_name FROM professionals AS p, treatments AS t WHERE p.professional_id = t.professional_id AND t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)); ",
      "SELECT p.first_name, p.last_name FROM professionals p, treatments t WHERE p.professional_id = t.professional_id AND t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments); ",
      "SELECT professionals.first_name, professionals.last_name FROM professionals, treatments WHERE professionals.professional_id = treatments.professional_id AND treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);"
    ]
  },
  {
    "id": 951,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "gpt_answers1": [
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners o, dogs d, sizes s WHERE o.owner_id = d.owner_id AND d.size_code = s.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners, dogs, sizes  WHERE owners.owner_id = dogs.owner_id  AND dogs.size_code = sizes.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  JOIN sizes s ON d.size_code = s.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners, dogs, sizes  WHERE owners.owner_id = dogs.owner_id  AND dogs.size_code = sizes.size_code LIMIT 10; ",
      "SELECT first_name, last_name, size_description  FROM owners, dogs, sizes  WHERE owners.owner_id = dogs.owner_id  AND dogs.size_code = sizes.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  LEFT JOIN dogs ON owners.owner_id = dogs.owner_id  LEFT JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  INNER JOIN sizes ON dogs.size_code = sizes.size_code  ORDER BY owners.last_name ASC; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  LEFT JOIN dogs ON owners.owner_id = dogs.owner_id  LEFT JOIN sizes ON dogs.size_code = sizes.size_code  WHERE dogs.abandoned_yn = 'N'; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs USING (owner_id)  JOIN sizes USING (size_code);"
    ],
    "gpt_answers2": [
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN sizes s ON d.size_code = s.size_code ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners, dogs, sizes WHERE owners.owner_id = dogs.owner_id AND dogs.size_code = sizes.size_code ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT first_name, last_name, size_description FROM owners JOIN dogs USING(owner_id) JOIN sizes USING(size_code) ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o, dogs d, sizes s WHERE o.owner_id = d.owner_id AND d.size_code = s.size_code ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id JOIN sizes AS s ON d.size_code = s.size_code ",
      "SELECT first_name, last_name, size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o LEFT JOIN dogs d ON o.owner_id = d.owner_id LEFT JOIN sizes s ON d.size_code = s.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o LEFT OUTER JOIN dogs d ON o.owner_id = d.owner_id LEFT OUTER JOIN sizes s ON d.size_code = s.size_code"
    ],
    "gpt_answers3": [
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o, dogs d, sizes s WHERE o.owner_id = d.owner_id AND d.size_code = s.size_code; ",
      "SELECT first_name, last_name, size_description FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners, dogs, sizes WHERE owners.owner_id = dogs.owner_id AND dogs.size_code = sizes.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN sizes s ON d.size_code = s.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o LEFT JOIN dogs d ON o.owner_id = d.owner_id LEFT JOIN sizes s ON d.size_code = s.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o RIGHT JOIN dogs d ON o.owner_id = d.owner_id RIGHT JOIN sizes s ON d.size_code = s.size_code; ",
      "SELECT owners.first_name AS first_name, owners.last_name AS last_name, sizes.size_description AS size_description FROM owners LEFT JOIN dogs ON owners.owner_id = dogs.owner_id LEFT JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners AS o LEFT OUTER JOIN dogs AS d ON o.owner_id = d.owner_id LEFT OUTER JOIN sizes AS s ON d.size_code = s.size_code; ",
      "SELECT first_name, last_name, size_description FROM owners LEFT OUTER JOIN dogs USING(owner_id) LEFT OUTER JOIN sizes USING(size_code);"
    ]
  },
  {
    "id": 952,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "gpt_answers1": [
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  JOIN sizes s ON d.size_code = s.size_code ",
      "SELECT first_name, last_name, size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners, dogs, sizes  WHERE owners.owner_id = dogs.owner_id  AND dogs.size_code = sizes.size_code ",
      "SELECT owners.first_name, owners.last_name, size_description  FROM owners  INNER JOIN dogs ON  owners.owner_id = dogs.owner_id  INNER JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners AS o  INNER JOIN dogs AS d ON o.owner_id = d.owner_id  INNER JOIN sizes AS s ON d.size_code = s.size_code ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id  INNER JOIN sizes s ON d.size_code = s.size_code ",
      "SELECT first_name, last_name, size_description  FROM owners, dogs, sizes  WHERE owners.owner_id = dogs.owner_id  AND dogs.size_code = sizes.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners o, dogs d, sizes s  WHERE o.owner_id = d.owner_id  AND d.size_code = s.size_code ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners, dogs, sizes  WHERE owners.owner_id = dogs.owner_id  AND dogs.size_code = sizes.size_code"
    ],
    "gpt_answers2": [
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners, dogs, sizes WHERE owners.owner_id = dogs.owner_id AND dogs.size_code = sizes.size_code; ",
      "SELECT first_name, last_name, size_description FROM owners, dogs, sizes WHERE owners.owner_id = dogs.owner_id AND dogs.size_code = sizes.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners LEFT JOIN dogs ON owners.owner_id = dogs.owner_id LEFT JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners RIGHT JOIN dogs ON owners.owner_id = dogs.owner_id RIGHT JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o, dogs d, sizes s WHERE o.owner_id = d.owner_id AND d.size_code = s.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners AS o, dogs AS d, sizes AS s WHERE o.owner_id = d.owner_id AND d.size_code = s.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id JOIN sizes AS s ON d.size_code = s.size_code; ",
      "SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;"
    ],
    "gpt_answers3": [
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id  INNER JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT first_name, last_name, size_description  FROM owners, dogs, sizes  WHERE owners.owner_id = dogs.owner_id  AND dogs.size_code = sizes.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners o, dogs d, sizes s  WHERE o.owner_id = d.owner_id  AND d.size_code = s.size_code ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners, dogs, sizes  WHERE owners.owner_id = dogs.owner_id  AND dogs.size_code = sizes.size_code ",
      "SELECT first_name, last_name, size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  JOIN sizes s ON d.size_code = s.size_code ",
      "SELECT owners.first_name AS FirstName, owners.last_name AS LastName, sizes.size_description AS DogSize  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT o.first_name AS FirstName, o.last_name AS LastName, s.size_description AS DogSize  FROM owners AS o  JOIN dogs AS d ON o.owner_id = d.owner_id  JOIN sizes AS s ON d.size_code = s.size_code ",
      "SELECT o.first_name, o.last_name, s.size_description  FROM owners AS o, dogs AS d, sizes AS s  WHERE o.owner_id = d.owner_id  AND d.size_code = s.size_code ",
      "SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  LEFT JOIN dogs ON owners.owner_id = dogs.owner_id  LEFT JOIN sizes ON dogs.size_code = sizes.size_code"
    ]
  },
  {
    "id": 955,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "gpt_answers1": [
      "SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN breeds b ON d.breed_code = b.breed_code INNER JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT d.name, t.date_of_treatment FROM dogs d, breeds b, treatments t WHERE d.breed_code = b.breed_code AND d.dog_id = t.dog_id AND b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, breeds, treatments WHERE dogs.breed_code = breeds.breed_code AND dogs.dog_id = treatments.dog_id AND breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, breeds, treatments WHERE dogs.breed_code = breeds.breed_code AND dogs.dog_id = treatments.dog_id AND breeds.breed_code = (SELECT breed_code FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_code = (SELECT breed_code FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs LEFT JOIN breeds ON dogs.breed_code = breeds.breed_code LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs LEFT OUTER JOIN breeds ON dogs.breed_code = breeds.breed_code LEFT OUTER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs NATURAL JOIN breeds, treatments WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, breeds, treatments WHERE dogs.breed_code = breeds.breed_code AND dogs.dog_id = treatments.dog_id AND breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) LIMIT 10;"
    ],
    "gpt_answers2": [
      "SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN breeds b ON d.breed_code = b.breed_code INNER JOIN treatments t ON d.dog_id = t.dog_id INNER JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY count(dog_id) ASC LIMIT 1); ",
      "SELECT d.name, t.date_of_treatment FROM dogs d, breeds b, treatments t, treatment_types tt WHERE d.breed_code = b.breed_code AND t.dog_id = d.dog_id AND t.treatment_type_code = tt.treatment_type_code AND b.breed_name = (SELECT breed_name FROM breeds ORDER BY count(dog_id) ASC LIMIT 1); ",
      "SELECT d.name, t.date_of_treatment FROM dogs AS d, breeds AS b, treatments AS t, treatment_types AS tt WHERE d.breed_code = b.breed_code AND t.dog_id = d.dog_id AND t.treatment_type_code = tt.treatment_type_code AND b.breed_name = (SELECT breed_name FROM breeds ORDER BY count(dog_id) ASC LIMIT 1); ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, breeds, treatments, treatment_types WHERE dogs.breed_code = breeds.breed_code AND treatments.dog_id = dogs.dog_id AND treatments.treatment_type_code = treatment_types.treatment_type_code AND breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY count(dog_id) ASC LIMIT 1); ",
      "SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY count(dog_id) ASC LIMIT 1); ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY count(dog_id) ASC LIMIT 1); ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, breeds, treatments, treatment_types WHERE dogs.breed_code = breeds.breed_code AND treatments.dog_id = dogs.dog_id AND treatments.treatment_type_code = treatment_types.treatment_type_code AND breeds.breed_name = (SELECT breed_name FROM breeds WHERE breed_code IN (SELECT breed_code FROM dogs GROUP BY breed_code HAVING COUNT(*) = 1)); ",
      "SELECT d.name, t.date_of_treatment FROM dogs d, breeds b, treatments t, treatment_types tt WHERE d.breed_code = b.breed_code AND t.dog_id = d.dog_id AND t.treatment_type_code = tt.treatment_type_code AND b.breed_name = (SELECT breed_name FROM breeds WHERE breed_code IN (SELECT breed_code FROM dogs GROUP BY breed_code HAVING COUNT(*) = 1)); ",
      "SELECT d.name, t.date_of_treatment FROM dogs d, treatments t, treatment_types tt WHERE d.dog_id = t.dog_id AND t.treatment_type_code = tt.treatment_type_code AND d.breed_code = (SELECT breed_code FROM breeds ORDER BY count(dog_id) ASC LIMIT 1); ",
      "SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN breeds b ON d.breed_code = b.breed_code INNER JOIN treatments t ON d.dog_id = t.dog_id INNER JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code WHERE b.breed_name = (SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code HAVING COUNT(*) = 1));"
    ],
    "gpt_answers3": [
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.breed_code = (SELECT breed_code FROM breeds  GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT d.name, t.date_of_treatment FROM dogs AS d, treatments AS t WHERE d.dog_id = t.dog_id AND d.breed_code IN (SELECT breed_code FROM breeds  GROUP BY breed_code  HAVING COUNT(*) = (SELECT MIN(cnt)  FROM (SELECT COUNT(*) AS cnt  FROM dogs  GROUP BY breed_code) AS temp)); ",
      "SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id INNER JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_code = (SELECT breed_code FROM breeds  GROUP BY breed_code  ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, treatments, breeds WHERE dogs.dog_id = treatments.dog_id AND dogs.breed_code = breeds.breed_code AND breeds.breed_code = (SELECT breed_code FROM breeds  GROUP BY breed_code  ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.breed_code = (SELECT breed_code FROM breeds  GROUP BY breed_code  HAVING COUNT(*) = (SELECT MIN(cnt)  FROM (SELECT COUNT(*) AS cnt  FROM dogs  GROUP BY breed_code) AS temp)); ",
      "SELECT d.name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_code = (SELECT breed_code FROM breeds  GROUP BY breed_code  HAVING COUNT(*) = (SELECT MIN(cnt)  FROM (SELECT COUNT(*) AS cnt  FROM dogs  GROUP BY breed_code) AS temp)); ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.breed_code IN (SELECT breed_code FROM breeds  GROUP BY breed_code  HAVING COUNT(*) = (SELECT MIN(cnt)  FROM (SELECT COUNT(*) AS cnt  FROM dogs  GROUP BY breed_code) AS temp)); ",
      "SELECT d.name, t.date_of_treatment FROM dogs AS d, treatments AS t, breeds AS b WHERE d.dog_id = t.dog_id AND d.breed_code = b.breed_code AND b.breed_code = (SELECT breed_code FROM breeds  GROUP BY breed_code  HAVING COUNT(*) = (SELECT MIN(cnt)  FROM (SELECT COUNT(*) AS cnt  FROM dogs  GROUP BY breed_code) AS temp)); ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id INNER JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_code = (SELECT breed_code FROM breeds  GROUP BY breed_code  ORDER BY COUNT(*) ASC LIMIT 1); ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id INNER JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_code = (SELECT breed_code FROM breeds  GROUP BY breed_code  HAVING COUNT(*) = (SELECT MIN(cnt)  FROM (SELECT COUNT(*) AS cnt  FROM dogs  GROUP BY breed_code) AS temp));"
    ]
  },
  {
    "id": 956,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "gpt_answers1": [
      "SELECT d.name, t.date_of_treatment  FROM dogs d  JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON t.dog_id = d.dog_id WHERE b.breed_name = 'rarest'  ",
      "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_name IN (SELECT breed_name FROM breeds WHERE breed_name='rarest') ",
      "SELECT d.name, t.date_of_treatment  FROM dogs d, treatments t, breeds b  WHERE d.breed_code = b.breed_code  AND t.dog_id = d.dog_id  AND b.breed_name = 'rarest' ",
      "SELECT dogs.name, treatments.date_of_treatment  FROM dogs, treatments, breeds  WHERE dogs.breed_code = breeds.breed_code  AND treatments.dog_id = dogs.dog_id  AND breeds.breed_name = 'rarest' ",
      "SELECT d.name, t.date_of_treatment  FROM dogs AS d  JOIN treatments AS t ON d.dog_id = t.dog_id WHERE d.breed_code IN (SELECT breed_code FROM breeds WHERE breed_name = 'rarest') ",
      "SELECT dogs.name, treatments.date_of_treatment  FROM dogs, treatments, breeds  WHERE dogs.breed_code = (SELECT breed_code FROM breeds WHERE breed_name = 'rarest')  AND treatments.dog_id = dogs.dog_id ",
      "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN treatments ON treatments.dog_id = dogs.dog_id  WHERE dogs.breed_code = (SELECT breed_code FROM breeds WHERE breed_name = 'rarest') ",
      "SELECT dogs.name, treatments.date_of_treatment  FROM dogs, treatments  WHERE dogs.dog_id = treatments.dog_id  AND EXISTS (SELECT * FROM breeds  WHERE breeds.breed_code = dogs.breed_code  AND breeds.breed_name = 'rarest') ",
      "SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN treatments ON treatments.dog_id = dogs.dog_id JOIN breeds ON breeds.breed_code = dogs.breed_code WHERE breeds.breed_name = 'rarest' ",
      "SELECT dogs.name, treatments.date_of_treatment  FROM dogs, treatments, breeds WHERE treatments.dog_id = dogs.dog_id  AND dogs.breed_code = breeds.breed_code  AND breeds.breed_name = 'rarest'"
    ],
    "gpt_answers2": [
      "SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id INNER JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment ASC; ",
      "SELECT d.name, t.date_of_treatment FROM dogs d, treatments t, breeds b WHERE d.dog_id = t.dog_id AND d.breed_code = b.breed_code AND b.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment ASC; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, treatments, breeds WHERE dogs.dog_id = treatments.dog_id AND dogs.breed_code = breeds.breed_code AND breeds.breed_code = (SELECT breed_code FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment ASC; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment ASC; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, treatments, breeds WHERE dogs.dog_id = treatments.dog_id AND dogs.breed_code = breeds.breed_code AND breeds.breed_name = (SELECT MIN(breed_name) FROM breeds) ORDER BY treatments.date_of_treatment ASC; ",
      "SELECT d.name, t.date_of_treatment FROM dogs AS d INNER JOIN treatments AS t ON d.dog_id = t.dog_id INNER JOIN breeds AS b ON d.breed_code = b.breed_code WHERE b.breed_code = (SELECT breed_code FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment ASC; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment ASC LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_code = (SELECT breed_code FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment ASC LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, treatments, breeds WHERE dogs.dog_id = treatments.dog_id AND dogs.breed_code = breeds.breed_code AND breeds.breed_code = (SELECT breed_code FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment ASC LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, treatments, breeds WHERE dogs.dog_id = treatments.dog_id AND dogs.breed_code = breeds.breed_code AND breeds.breed_name = (SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1) ORDER BY treatments.date_of_treatment ASC LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.name ORDER BY COUNT(breeds.breed_code) ASC LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs, breeds, treatments WHERE dogs.breed_code = breeds.breed_code AND treatments.dog_id = dogs.dog_id GROUP BY dogs.name HAVING COUNT(breeds.breed_code) <= 1 ORDER BY dogs.name ASC LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds USING (breed_code) JOIN treatments USING (dog_id) GROUP BY dogs.name HAVING COUNT(DISTINCT breeds.breed_code) = 1 ORDER BY dogs.name ASC LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_code IN ( SELECT breeds.breed_code FROM breeds JOIN dogs USING (breed_code) GROUP BY breeds.breed_code HAVING COUNT(DISTINCT dogs.name) <= 1 ) GROUP BY dogs.name LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_code IN ( SELECT breeds.breed_code FROM breeds JOIN dogs USING (breed_code) GROUP BY breeds.breed_code HAVING COUNT(*) = 1 ) GROUP BY dogs.name LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_code = ( SELECT breeds.breed_code FROM breeds JOIN dogs USING (breed_code) GROUP BY breeds.breed_code HAVING COUNT(*) = 1 ) GROUP BY dogs.name LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.name HAVING COUNT(DISTINCT breeds.breed_code) = 1 ORDER BY dogs.name ASC LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE dogs.breed_code IN ( SELECT dogs.breed_code FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY dogs.breed_code HAVING COUNT(*) = 1 ) GROUP BY dogs.name LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE dogs.breed_code IN ( SELECT breeds.breed_code FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breeds.breed_code HAVING COUNT(*) = 1 ) GROUP BY dogs.name LIMIT 10; ",
      "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY dogs.name ORDER BY COUNT(DISTINCT breeds.breed_code) ASC LIMIT 10;"
    ]
  },
  {
    "id": 958,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "gpt_answers1": [
      "SELECT owners.first_name, dogs.name  FROM owners  INNER JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name  FROM owners, dogs  WHERE owners.owner_id = dogs.owner_id  AND owners.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.street LIKE '%Virginia%'; ",
      "SELECT o.first_name, d.name  FROM owners o  INNER JOIN dogs d ON o.owner_id = d.owner_id  WHERE o.street LIKE '%Virginia%'; ",
      "SELECT o.first_name, d.name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE o.street LIKE '%Virginia%'; ",
      "SELECT o.first_name, d.name  FROM owners AS o  JOIN dogs AS d ON o.owner_id = d.owner_id  WHERE o.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs USING (owner_id)  WHERE owners.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name  FROM owners  LEFT JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name  FROM owners  LEFT OUTER JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.street LIKE '%Virginia%'; ",
      "SELECT o.first_name, d.name  FROM owners o, dogs d  WHERE o.owner_id = d.owner_id  AND o.street LIKE '%Virginia%';"
    ],
    "gpt_answers2": [
      "SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.street LIKE '%Virginia%' ",
      "SELECT o.first_name, d.name FROM owners o, dogs d WHERE o.owner_id = d.owner_id AND o.street LIKE '%Virginia%' ",
      "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.street LIKE '%Virginia%' ",
      "SELECT owners.first_name, dogs.name FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.street LIKE '%Virginia%' ",
      "SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.street LIKE '%Virginia%' ",
      "SELECT owners.first_name, dogs.name FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.street LIKE '%Virginia%' ",
      "SELECT first_name, d.name FROM owners o, dogs d WHERE o.owner_id = d.owner_id AND o.street LIKE '%Virginia%' ",
      "SELECT o.first_name, d.name FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id WHERE o.street LIKE '%Virginia%' ",
      "SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.street LIKE '%Virginia%' ",
      "SELECT o.first_name, d.name FROM owners AS o, dogs AS d WHERE o.owner_id = d.owner_id AND o.street LIKE '%Virginia%'"
    ],
    "gpt_answers3": [
      "SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.street LIKE '%Virginia%'; ",
      "SELECT o.first_name, d.name FROM owners o, dogs d WHERE o.owner_id = d.owner_id AND o.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.street LIKE '%Virginia%'; ",
      "SELECT first_name, dogs.name FROM owners JOIN dogs USING (owner_id) WHERE street LIKE '%Virginia%'; ",
      "SELECT o.first_name, d.name FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id WHERE o.street LIKE '%Virginia%'; ",
      "SELECT o.first_name, d.name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id WHERE o.street LIKE '%Virginia%'; ",
      "SELECT o.first_name, d.name FROM (owners o INNER JOIN dogs d ON o.owner_id = d.owner_id) WHERE o.street LIKE '%Virginia%'; ",
      "SELECT owners.first_name, dogs.name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.street LIKE '%Virginia%';"
    ]
  },
  {
    "id": 959,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "gpt_answers1": [
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT d.date_arrived, d.date_departed FROM dogs AS d INNER JOIN treatments AS t ON d.dog_id = t.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.dog_id IN (SELECT dog_id FROM treatments) ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id AND treatments.treatment_id IS NOT NULL ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id AND treatments.treatment_id IS NOT NULL ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.treatment_id IS NOT NULL LIMIT 10 ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id LIMIT 10"
    ],
    "gpt_answers2": [
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments  USING (dog_id) LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs LEFT OUTER JOIN treatments ON dogs.dog_id = treatments.dog_id LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs LEFT JOIN treatments  ON dogs.dog_id = treatments.dog_id LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs NATURAL JOIN treatments LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id IN (SELECT dog_id FROM treatments) LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs WHERE dogs.dog_id IN (SELECT dog_id FROM treatments) LIMIT 10; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs WHERE EXISTS (SELECT * FROM treatments WHERE dogs.dog_id = treatments.dog_id) LIMIT 10;"
    ],
    "gpt_answers3": [
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments) ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id ",
      "SELECT d.date_arrived, d.date_departed FROM dogs AS d INNER JOIN treatments AS t ON d.dog_id = t.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT date_arrived, date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id AND treatments.dog_id IS NOT NULL ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id AND treatments.dog_id IS NOT NULL ",
      "SELECT d.date_arrived, d.date_departed FROM dogs AS d, treatments AS t WHERE d.dog_id = t.dog_id AND t.dog_id IS NOT NULL ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id AND dogs.dog_id IN (SELECT dog_id FROM treatments)"
    ]
  },
  {
    "id": 960,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "gpt_answers1": [
      "SELECT d.date_arrived, d.date_departed FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs WHERE dogs.dog_id IN (SELECT dog_id FROM treatments); ",
      "SELECT d.date_arrived, d.date_departed FROM dogs d WHERE d.dog_id IN (SELECT t.dog_id FROM treatments t); ",
      "SELECT d.date_arrived, d.date_departed FROM dogs d WHERE EXISTS (SELECT 1 FROM treatments t WHERE t.dog_id = d.dog_id); ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id; ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id; ",
      "SELECT date_arrived, date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id; ",
      "SELECT date_arrived, date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id; ",
      "SELECT d.date_arrived, d.date_departed FROM dogs d, treatments t WHERE d.dog_id = t.dog_id; ",
      "SELECT d.date_arrived, d.date_departed FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id;"
    ],
    "gpt_answers2": [
      "SELECT dogs.date_arrived, dogs.date_departed FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id ",
      "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments) ",
      "SELECT d.date_arrived, d.date_departed FROM treatments t JOIN dogs d ON t.dog_id = d.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM treatments JOIN dogs ON dogs.dog_id = treatments.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments) ",
      "SELECT date_arrived, date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT date_arrived, date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id"
    ],
    "gpt_answers3": [
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id ",
      "SELECT date_arrived, date_departed FROM dogs WHERE dogs.dog_id IN (SELECT dog_id FROM treatments) ",
      "SELECT d.date_arrived, d.date_departed FROM dogs AS d, treatments AS t WHERE d.dog_id = t.dog_id ",
      "SELECT d.date_arrived, d.date_departed FROM dogs d, treatments t WHERE d.dog_id = t.dog_id ",
      "SELECT d.date_arrived, d.date_departed FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id ",
      "SELECT DISTINCT dogs.date_arrived, dogs.date_departed FROM dogs, treatments WHERE dogs.dog_id = treatments.dog_id ",
      "SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id"
    ]
  },
  {
    "id": 961,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "gpt_answers1": [
      "SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs));",
      "SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs);",
      "SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs) LIMIT 1);",
      "SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);",
      "SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs) ORDER BY age LIMIT 1);",
      "SELECT last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs));",
      "SELECT last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs) LIMIT 1);",
      "SELECT last_name FROM owners WHERE EXISTS (SELECT 1 FROM dogs WHERE age = (SELECT MIN(age) FROM dogs) AND owners.owner_id = dogs.owner_id);",
      "SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs) LIMIT 1;",
      "SELECT last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs) LIMIT 1);"
    ],
    "gpt_answers2": [
      "SELECT o.last_name  FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs); ",
      "SELECT o.last_name  FROM owners o WHERE o.owner_id = (SELECT owner_id  FROM dogs  WHERE age = (SELECT MIN(age) FROM dogs) LIMIT 1); ",
      "SELECT o.last_name  FROM owners o WHERE o.owner_id IN (SELECT owner_id  FROM dogs  WHERE age = (SELECT MIN(age) FROM dogs)); ",
      "SELECT o.last_name  FROM owners o, dogs d  WHERE o.owner_id = d.owner_id  AND d.age = (SELECT MIN(age) FROM dogs) LIMIT 1; ",
      "SELECT o.last_name  FROM owners o, dogs d  WHERE o.owner_id = d.owner_id  AND d.age = (SELECT MIN(age) FROM dogs) GROUP BY o.owner_id; ",
      "SELECT o.last_name  FROM owners o WHERE o.owner_id = (SELECT owner_id  FROM dogs  WHERE age = (SELECT MIN(age) FROM dogs) GROUP BY owner_id); ",
      "SELECT o.last_name  FROM owners o WHERE o.owner_id IN (SELECT owner_id  FROM dogs  WHERE age = (SELECT MIN(age) FROM dogs) GROUP BY owner_id); ",
      "SELECT o.last_name  FROM owners o WHERE EXISTS (SELECT 1  FROM dogs d  WHERE o.owner_id = d.owner_id  AND d.age = (SELECT MIN(age) FROM dogs)); ",
      "SELECT o.last_name  FROM owners o JOIN dogs d1 ON o.owner_id = d1.owner_id  JOIN dogs d2 ON o.owner_id = d2.owner_id  AND d1.age > d2.age WHERE d2.age = (SELECT MIN(age) FROM dogs); ",
      "SELECT o.last_name  FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs) GROUP BY o.owner_id;"
    ],
    "gpt_answers3": [
      "SELECT last_name FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  ORDER BY dogs.age ASC LIMIT 1;",
      "SELECT last_name FROM owners  WHERE owner_id IN (SELECT owner_id FROM dogs  WHERE age = (SELECT MIN(age) FROM dogs));",
      "SELECT last_name FROM owners  WHERE owner_id = (SELECT owner_id FROM dogs  WHERE age = (SELECT MIN(age) FROM dogs));",
      "SELECT last_name FROM owners  WHERE owner_id = (SELECT owner_id FROM dogs  ORDER BY age ASC LIMIT 1);",
      "SELECT last_name FROM owners  WHERE owner_id = (SELECT owner_id FROM dogs  WHERE age IN (SELECT MIN(age) FROM dogs));",
      "SELECT last_name FROM owners  WHERE owner_id = (SELECT owner_id FROM dogs  WHERE age = (SELECT MIN(age) FROM dogs  GROUP BY owner_id));",
      "SELECT last_name FROM owners, (SELECT owner_id, MIN(age) as min_age FROM dogs  GROUP BY owner_id) as youngest_dogs  WHERE owners.owner_id = youngest_dogs.owner_id  AND owners.owner_id = (SELECT owner_id FROM dogs  WHERE age = youngest_dogs.min_age);",
      "SELECT last_name FROM owners  WHERE owner_id = (SELECT owner_id FROM dogs  GROUP BY owner_id  HAVING age = MIN(age));",
      "SELECT last_name FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY last_name  HAVING MIN(dogs.age) = (SELECT MIN(age) FROM dogs);",
      "SELECT last_name FROM owners  WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs));"
    ]
  },
  {
    "id": 962,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "gpt_answers1": [
      "SELECT ow.last_name FROM owners ow INNER JOIN dogs dg ON ow.owner_id = dg.owner_id ORDER BY dg.date_of_birth ASC LIMIT 1;",
      "SELECT o.last_name FROM owners o WHERE o.owner_id = (SELECT d.owner_id FROM dogs d WHERE d.date_of_birth = (SELECT MIN(date_of_birth) FROM dogs));",
      "SELECT o.last_name FROM owners o WHERE o.owner_id = (SELECT d.owner_id FROM dogs d ORDER BY d.date_of_birth ASC LIMIT 1);",
      "SELECT o.last_name FROM owners o WHERE o.owner_id = (SELECT owner_id FROM dogs ORDER BY date_of_birth ASC LIMIT 1);",
      "SELECT o.last_name FROM owners o JOIN (SELECT owner_id FROM dogs ORDER BY date_of_birth ASC LIMIT 1) d ON d.owner_id = o.owner_id;",
      "SELECT last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE date_of_birth = (SELECT MIN(date_of_birth) FROM dogs));",
      "SELECT o.last_name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = (SELECT MIN(date_of_birth) FROM dogs);",
      "SELECT o.last_name FROM owners o WHERE o.owner_id IN (SELECT owner_id FROM dogs WHERE date_of_birth = (SELECT MIN(date_of_birth) FROM dogs));",
      "SELECT o.last_name FROM owners o WHERE o.owner_id = (SELECT owner_id FROM dogs WHERE date_of_birth = (SELECT MIN(date_of_birth) FROM dogs));",
      "SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE date_of_birth = (SELECT MIN(date_of_birth) FROM dogs));"
    ],
    "gpt_answers2": [
      "SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs); ",
      "SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs) LIMIT 1); ",
      "SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE date_of_birth = (SELECT MIN(date_of_birth) FROM dogs); ",
      "SELECT last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs)); ",
      "SELECT last_name FROM owners WHERE owner_id = (SELECT MIN(owner_id) FROM (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs) LIMIT 1)); ",
      "SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.date_of_birth = (SELECT MIN(date_of_birth) FROM dogs); ",
      "SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE age = (SELECT MIN(age) FROM dogs) LIMIT 1; ",
      "SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs)); ",
      "SELECT last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE age IN (SELECT MIN(age) FROM dogs)); ",
      "SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE breed_code = (SELECT breed_code FROM dogs WHERE age = (SELECT MIN(age) FROM dogs) LIMIT 1);"
    ],
    "gpt_answers3": [
      "SELECT last_name  FROM owners  WHERE owner_id = (SELECT owner_id  FROM dogs  WHERE date_of_birth = (SELECT MIN(date_of_birth)  FROM dogs)); ",
      "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE d.date_of_birth = (SELECT MIN(date_of_birth)  FROM dogs); ",
      "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  ORDER BY d.date_of_birth ASC  LIMIT 1; ",
      "SELECT last_name  FROM owners  WHERE owner_id IN (SELECT owner_id  FROM dogs  WHERE date_of_birth = (SELECT MIN(date_of_birth)  FROM dogs)); ",
      "SELECT last_name  FROM owners  WHERE owner_id = (SELECT owner_id  FROM dogs  ORDER BY date_of_birth ASC  LIMIT 1); ",
      "SELECT last_name  FROM owners  WHERE owner_id IN (SELECT owner_id  FROM dogs  ORDER BY date_of_birth ASC  LIMIT 1); ",
      "SELECT last_name  FROM owners  WHERE owner_id = (SELECT owner_id  FROM dogs  WHERE date_of_birth = (SELECT MIN(date_of_birth)  FROM dogs  ORDER BY date_of_birth ASC  LIMIT 1)); ",
      "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE d.date_of_birth = (SELECT MIN(date_of_birth)  FROM dogs  ORDER BY date_of_birth ASC  LIMIT 1); ",
      "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE d.date_of_birth = (SELECT MIN(date_of_birth)  FROM dogs  ORDER BY d.date_of_birth ASC  LIMIT 1); ",
      "SELECT o.last_name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id  WHERE d.date_of_birth = (SELECT MIN(date_of_birth)  FROM dogs  WHERE d.date_of_birth = (SELECT MIN(date_of_birth)  FROM dogs));"
    ]
  },
  {
    "id": 994,
    "db_id": "dog_kennels",
    "gold": "SELECT max(charge_amount) FROM Charges",
    "gpt_answers1": [
      "SELECT MAX(charge_amount) FROM charges; ",
      "SELECT MAX(charge_amount) FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges); ",
      "SELECT MAX(charge_amount) FROM charges GROUP BY charge_type; ",
      "SELECT charge_amount FROM charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM charges); ",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges) LIMIT 1; ",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT charge_type FROM charges GROUP BY charge_type HAVING MAX(charge_amount)) LIMIT 1; ",
      "SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1; ",
      "SELECT charge_amount FROM charges WHERE charge_id = (SELECT MAX(charge_id) FROM charges); ",
      "SELECT charge_amount FROM charges WHERE charge_id = (SELECT MAX(charge_id) FROM charges) GROUP BY charge_type; ",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT charge_type FROM charges GROUP BY charge_type HAVING MAX(charge_amount)) ORDER BY charge_amount DESC LIMIT 1;"
    ],
    "gpt_answers2": [
      "SELECT MAX(charge_amount) FROM charges;",
      "SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;",
      "SELECT charge_amount FROM charges WHERE charge_id = (SELECT MAX(charge_id) FROM charges);",
      "SELECT MAX(charge_amount) AS charge_amount FROM charges;",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges);",
      "SELECT charge_amount FROM charges WHERE charge_type IN (SELECT charge_type FROM charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM charges));",
      "SELECT MAX(charge_amount) FROM charges GROUP BY charge_type;",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT charge_type FROM charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM charges));",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT charge_type FROM charges WHERE charge_id = (SELECT MAX(charge_id) FROM charges));",
      "SELECT charge_amount FROM charges WHERE charge_id = (SELECT MAX(charge_id) FROM charges) LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT MAX(charge_amount) FROM charges ",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges) ",
      "SELECT MAX(charge_amount)  FROM charges  WHERE charge_type = (SELECT MAX(charge_type) FROM charges) ",
      "SELECT charge_amount FROM charges WHERE charge_id = (SELECT MAX(charge_id) FROM charges) ",
      "SELECT MAX(charge_amount) FROM charges WHERE charge_type = (SELECT charge_type FROM charges ORDER BY charge_amount DESC LIMIT 1) ",
      "SELECT charge_amount FROM charges WHERE charge_id = (SELECT charge_id FROM charges ORDER BY charge_amount DESC LIMIT 1) ",
      "SELECT MAX(charge_amount) FROM charges WHERE charge_type = (SELECT charge_type FROM charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM charges)) ",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT charge_type FROM charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM charges)) ",
      "SELECT MAX(charge_amount) FROM charges WHERE charge_type = (SELECT charge_type FROM charges GROUP BY charge_type HAVING charge_amount = MAX(charge_amount)) ",
      "SELECT charge_amount FROM charges WHERE charge_type = (SELECT charge_type FROM charges GROUP BY charge_type HAVING charge_amount = MAX(charge_amount))"
    ]
  },
  {
    "id": 997,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "gpt_answers1": [
      "SELECT breeds.breed_name, sizes.size_description  FROM breeds, sizes, dogs  WHERE dogs.breed_code = breeds.breed_code  AND dogs.size_code = sizes.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description  FROM breeds  JOIN dogs ON breeds.breed_code = dogs.breed_code  JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description  FROM breeds  INNER JOIN dogs ON breeds.breed_code = dogs.breed_code  INNER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description  FROM breeds, sizes, dogs  WHERE dogs.breed_code = breeds.breed_code  AND dogs.size_code = sizes.size_code  GROUP BY breeds.breed_name, sizes.size_description; ",
      "SELECT breeds.breed_name, sizes.size_description  FROM dogs  JOIN breeds USING (breed_code)  JOIN sizes USING (size_code); ",
      "SELECT breeds.breed_name, sizes.size_description  FROM breeds  LEFT JOIN dogs ON breeds.breed_code = dogs.breed_code  LEFT JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description  FROM breeds  CROSS JOIN sizes  WHERE EXISTS (SELECT * FROM dogs  WHERE dogs.breed_code = breeds.breed_code  AND dogs.size_code = sizes.size_code); ",
      "SELECT breeds.breed_name, sizes.size_description  FROM breeds  INNER JOIN sizes ON 1=1; ",
      "SELECT breeds.breed_name, sizes.size_description  FROM breeds  RIGHT JOIN dogs ON breeds.breed_code = dogs.breed_code  RIGHT JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description  FROM breeds  CROSS JOIN sizes  LEFT JOIN dogs ON breeds.breed_code = dogs.breed_code  AND dogs.size_code = sizes.size_code;"
    ],
    "gpt_answers2": [
      "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds INNER JOIN sizes ON dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM breeds, sizes ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds CROSS JOIN sizes ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds LEFT JOIN dogs ON breeds.breed_code = dogs.breed_code LEFT JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds LEFT JOIN (SELECT DISTINCT size_code FROM dogs) AS dogs ON breeds.breed_code = dogs.breed_code LEFT JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds LEFT JOIN dogs ON breeds.breed_code = dogs.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds LEFT JOIN dogs ON breeds.breed_code = dogs.breed_code FULL OUTER JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds RIGHT JOIN dogs ON breeds.breed_code = dogs.breed_code RIGHT JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code JOIN sizes ON dogs.size_code = sizes.size_code"
    ],
    "gpt_answers3": [
      "SELECT breeds.breed_name, sizes.size_description FROM breeds INNER JOIN dogs ON breeds.breed_code = dogs.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM breeds, sizes, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes, dogs WHERE breeds.breed_code = dogs.breed_code AND sizes.size_code = dogs.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs JOIN sizes ON dogs.size_code = sizes.size_code JOIN breeds ON dogs.breed_code = breeds.breed_code; ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs, breeds, sizes WHERE breeds.breed_code = dogs.breed_code AND sizes.size_code = dogs.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs LEFT JOIN breeds ON dogs.breed_code = breeds.breed_code LEFT JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs LEFT OUTER JOIN breeds ON dogs.breed_code = breeds.breed_code LEFT OUTER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs LEFT OUTER JOIN breeds USING (breed_code) LEFT OUTER JOIN sizes USING (size_code); ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs LEFT OUTER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs LEFT JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code;"
    ]
  },
  {
    "id": 998,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "gpt_answers1": [
      "SELECT DISTINCT breeds.breed_code, sizes.size_code FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT DISTINCT breed_code, size_code FROM dogs; ",
      "SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs; ",
      "SELECT breeds.breed_code, sizes.size_code FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code GROUP BY breeds.breed_code, sizes.size_code; ",
      "SELECT breed_code, size_code FROM dogs GROUP BY breed_code, size_code; ",
      "SELECT DISTINCT dogs.breed_code, sizes.size_code FROM dogs INNER JOIN breeds ON dogs.breed_code = breed.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT DISTINCT breed_code, size_code FROM dogs ORDER BY breed_code, size_code; ",
      "SELECT DISTINCT dogs.breed_code, sizes.size_code FROM dogs LEFT JOIN breeds ON dogs.breed_code = breeds.breed_code LEFT JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT DISTINCT breed_code, size_code FROM dogs WHERE breed_code IS NOT NULL AND size_code IS NOT NULL; ",
      "SELECT DISTINCT dogs.breed_code, sizes.size_code FROM dogs NATURAL JOIN breeds NATURAL JOIN sizes;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs, breeds, sizes WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code GROUP BY breeds.breed_name, sizes.size_description; ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs LEFT JOIN breeds ON dogs.breed_code = breeds.breed_code LEFT JOIN sizes ON dogs.size_code = sizes.size_code GROUP BY breeds.breed_name, sizes.size_description; ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs LEFT OUTER JOIN breeds ON dogs.breed_code = breeds.breed_code LEFT OUTER JOIN sizes ON dogs.size_code = sizes.size_code; ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs LEFT JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code GROUP BY breeds.breed_name, sizes.size_description; ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM breeds, sizes WHERE EXISTS (SELECT 1 FROM dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code); ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds USING (breed_code) JOIN sizes USING (size_code); ",
      "SELECT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code GROUP BY breeds.breed_name, sizes.size_description HAVING COUNT(*) >= 1; ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs NATURAL JOIN breeds NATURAL JOIN sizes;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT DISTINCT dogs.breed_code, sizes.size_description FROM dogs, sizes WHERE dogs.size_code = sizes.size_code ",
      "SELECT DISTINCT breeds.breed_name, dogs.size_code FROM breeds, dogs WHERE dogs.breed_code = breeds.breed_code ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs, breeds, sizes WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code ",
      "SELECT DISTINCT dogs.breed_code, sizes.size_description FROM dogs LEFT JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT DISTINCT breeds.breed_name, dogs.size_code FROM breeds INNER JOIN dogs ON breeds.breed_code = dogs.breed_code ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs LEFT JOIN breeds ON dogs.breed_code = breeds.breed_code LEFT JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT DISTINCT breeds.breed_name, sizes.size_description FROM breeds INNER JOIN dogs ON breeds.breed_code = dogs.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code ",
      "SELECT DISTINCT dogs.breed_code, sizes.size_description FROM dogs, sizes WHERE dogs.size_code = sizes.size_code"
    ]
  },
  {
    "id": 999,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "gpt_answers1": [
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p JOIN treatments AS t ON t.professional_id = p.professional_id JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id INNER JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals, treatment_types, treatments WHERE professionals.professional_id = treatments.professional_id AND treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals p, treatments t, treatment_types tt WHERE p.professional_id = t.professional_id AND tt.treatment_type_code = t.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id INNER JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id INNER JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p INNER JOIN treatments AS t ON t.professional_id = p.professional_id INNER JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code"
    ],
    "gpt_answers2": [
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals, treatments, treatment_types WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals p INNER JOIN treatments t ON t.professional_id = p.professional_id INNER JOIN treatment_types tt ON tt.treatment_type_code = t.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT first_name, treatment_type_description FROM professionals, treatments, treatment_types WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id LEFT JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p, treatments AS t, treatment_types AS tt WHERE p.professional_id = t.professional_id AND t.treatment_type_code = tt.treatment_type_code; ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals p LEFT JOIN treatments t ON t.professional_id = p.professional_id LEFT JOIN treatment_types tt ON tt.treatment_type_code = t.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT first_name, treatment_type_description FROM professionals, treatments, treatment_types WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code;"
    ],
    "gpt_answers3": [
      "SELECT p.first_name, tt.treatment_type_description  FROM professionals p  INNER JOIN treatments t ON p.professional_id = t.professional_id INNER JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals, treatments, treatment_types  WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description  FROM professionals AS p, treatments AS t, treatment_types AS tt  WHERE p.professional_id = t.professional_id AND t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  INNER JOIN treatments ON professionals.professional_id = treatments.professional_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals, treatments, treatment_types  WHERE professionals.professional_id = treatments.professional_id AND treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description  FROM professionals p  INNER JOIN treatments t ON t.professional_id = p.professional_id INNER JOIN treatment_types tt ON tt.treatment_type_code = t.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description  FROM professionals AS p  INNER JOIN treatments AS t ON t.professional_id = p.professional_id INNER JOIN treatment_types AS tt ON tt.treatment_type_code = t.treatment_type_code"
    ]
  },
  {
    "id": 1000,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "gpt_answers1": [
      "SELECT p.first_name, tt.treatment_type_description FROM professionals p, treatments t, treatment_types tt WHERE p.professional_id = t.professional_id AND t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p INNER JOIN treatments AS t ON p.professional_id = t.professional_id INNER JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id INNER JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p JOIN treatments AS t ON p.professional_id = t.professional_id JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id LEFT JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p LEFT JOIN treatments AS t ON p.professional_id = t.professional_id LEFT JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals RIGHT JOIN treatments ON treatments.professional_id = professionals.professional_id RIGHT JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p RIGHT JOIN treatments AS t ON p.professional_id = t.professional_id RIGHT JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals CROSS JOIN treatments CROSS JOIN treatment_types WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "gpt_answers2": [
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals, treatments, treatment_types WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT first_name, treatment_type_description FROM professionals, treatments, treatment_types WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p JOIN treatments AS t ON t.professional_id = p.professional_id JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code; ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals p JOIN treatments t ON t.professional_id = p.professional_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM treatments LEFT JOIN professionals ON treatments.professional_id = professionals.professional_id LEFT JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id LEFT JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals RIGHT JOIN treatments ON treatments.professional_id = professionals.professional_id RIGHT JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code; ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM treatments LEFT JOIN professionals ON treatments.professional_id = professionals.professional_id LEFT JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;"
    ],
    "gpt_answers3": [
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals, treatments, treatment_types WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals AS p JOIN treatments AS t ON t.professional_id = p.professional_id JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code ",
      "SELECT p.first_name, tt.treatment_type_description FROM professionals p, treatments t, treatment_types tt WHERE t.professional_id = p.professional_id AND t.treatment_type_code = tt.treatment_type_code ",
      "SELECT first_name, treatment_type_description FROM professionals, treatments, treatment_types WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id LEFT JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id INNER JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals LEFT JOIN treatments ON treatments.professional_id = professionals.professional_id LEFT JOIN treatment_types ON treatment_types.treatment_type_code = treatments.treatment_type_code ",
      "SELECT first_name, treatment_type_description FROM professionals JOIN treatments USING (professional_id) JOIN treatment_types USING (treatment_type_code) ",
      "SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types USING (treatment_type_code)"
    ]
  },
  {
    "id": 1008,
    "db_id": "singer",
    "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "gpt_answers1": [
      "SELECT name FROM singer WHERE citizenship != 'French';",
      "SELECT name FROM singer WHERE citizenship <> 'French';",
      "SELECT name FROM singer WHERE citizenship NOT LIKE 'French';",
      "SELECT name FROM singer WHERE citizenship NOT IN ('French');",
      "SELECT name FROM singer WHERE NOT citizenship = 'French';",
      "SELECT name FROM singer WHERE NOT citizenship LIKE 'French';",
      "SELECT name FROM singer WHERE NOT citizenship IN ('French');",
      "SELECT name FROM singer WHERE citizenship IS NOT 'French';",
      "SELECT name FROM singer WHERE citizenship IS NOT LIKE 'French';",
      "SELECT name FROM singer WHERE citizenship NOT IN ('French');"
    ],
    "gpt_answers2": [
      "SELECT name FROM singer WHERE citizenship != 'French';",
      "SELECT name FROM singer WHERE citizenship <> 'French';",
      "SELECT name FROM singer WHERE citizenship NOT LIKE 'French';",
      "SELECT name FROM singer WHERE citizenship NOT IN ('French');",
      "SELECT name FROM singer WHERE citizenship != 'French' OR citizenship IS NULL;",
      "SELECT name FROM singer WHERE citizenship != 'French' AND citizenship IS NOT NULL;",
      "SELECT name FROM singer WHERE citizenship != 'French' AND citizenship <> '';",
      "SELECT name FROM singer WHERE citizenship NOT LIKE 'French' OR citizenship IS NULL;",
      "SELECT name FROM singer WHERE citizenship NOT LIKE 'French' AND citizenship IS NOT NULL;",
      "SELECT name FROM singer WHERE citizenship NOT LIKE 'French' AND citizenship <> '';"
    ],
    "gpt_answers3": [
      "SELECT name FROM singer WHERE citizenship != 'French';",
      "SELECT name FROM singer WHERE citizenship <> 'French';",
      "SELECT name FROM singer WHERE citizenship NOT IN ('French');",
      "SELECT name FROM singer WHERE NOT citizenship = 'French';",
      "SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL;",
      "SELECT name FROM singer EXCEPT SELECT name FROM singer WHERE citizenship = 'French';",
      "SELECT name FROM singer WHERE citizenship NOT LIKE 'French';",
      "SELECT name FROM singer WHERE citizenship NOT GLOB 'French';",
      "SELECT name FROM singer WHERE citizenship NOT REGEXP 'French';",
      "SELECT name FROM singer WHERE citizenship NOT LIKE 'French%' AND citizenship NOT LIKE '%french';"
    ]
  },
  {
    "id": 1022,
    "db_id": "singer",
    "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "gpt_answers1": [
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000); ",
      "SELECT DISTINCT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000; ",
      "SELECT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000; ",
      "SELECT singer.name FROM singer, song WHERE singer.singer_id = song.singer_id AND song.sales > 300000; ",
      "SELECT name FROM singer WHERE EXISTS (SELECT * FROM song WHERE song.singer_id = singer.singer_id AND sales > 300000); ",
      "SELECT DISTINCT singer.name FROM singer, song WHERE singer.singer_id = song.singer_id AND sales > 300000; ",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING SUM(sales) > 300000); ",
      "SELECT DISTINCT singer.name FROM singer INNER JOIN (SELECT singer_id FROM song WHERE sales > 300000) AS sub_query ON singer.singer_id = sub_query.singer_id; ",
      "SELECT singer.name FROM singer INNER JOIN (SELECT DISTINCT singer_id FROM song WHERE sales > 300000) AS sub_query ON singer.singer_id = sub_query.singer_id; ",
      "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY name HAVING MAX(sales) > 300000;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT name  FROM singer INNER JOIN song ON singer.singer_id = song.singer_id  WHERE sales > 300000; ",
      "SELECT DISTINCT singer.name  FROM singer, song  WHERE singer.singer_id = song.singer_id  AND song.sales > 300000; ",
      "SELECT DISTINCT singer.name  FROM singer  WHERE singer.singer_id IN  (SELECT singer_id  FROM song  WHERE sales > 300000); ",
      "SELECT DISTINCT name  FROM singer  WHERE singer_id IN  (SELECT singer_id  FROM song  WHERE sales > 300000); ",
      "SELECT DISTINCT singer.name  FROM ( SELECT song.singer_id  FROM song  WHERE sales > 300000 ) AS subquery INNER JOIN singer ON singer.singer_id = subquery.singer_id; ",
      "SELECT DISTINCT name  FROM ( SELECT singer.name, singer.singer_id  FROM singer INNER JOIN song ON singer.singer_id = song.singer_id  WHERE song.sales > 300000 ) AS subquery; ",
      "SELECT DISTINCT name  FROM singer  WHERE EXISTS  (SELECT 1  FROM song  WHERE song.singer_id = singer.singer_id  AND sales > 300000); ",
      "SELECT DISTINCT name  FROM singer  WHERE singer.singer_id = ANY (SELECT singer_id  FROM song  WHERE sales > 300000); ",
      "SELECT DISTINCT name  FROM singer  WHERE singer.singer_id = ANY (SELECT singer_id  FROM song  WHERE sales > 300000); ",
      "SELECT DISTINCT name  FROM singer  INNER JOIN song ON singer.singer_id = song.singer_id  WHERE song.sales > 300000;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000; ",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE sales > 300000); ",
      "SELECT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000; ",
      "SELECT DISTINCT singer.name FROM singer, song WHERE singer.singer_id = song.singer_id AND song.sales > 300000; ",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE song.sales > 300000); ",
      "SELECT name FROM singer, song WHERE singer.singer_id = song.singer_id AND song.sales > 300000 GROUP BY name; ",
      "SELECT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000 GROUP BY name; ",
      "SELECT DISTINCT(singer.name) FROM singer, song WHERE singer.singer_id = song.singer_id AND song.sales > 300000; ",
      "SELECT DISTINCT name FROM singer NATURAL JOIN song WHERE sales > 300000; ",
      "SELECT name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;"
    ]
  },
  {
    "id": 1023,
    "db_id": "singer",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "gpt_answers1": [
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1); ",
      "SELECT s.name FROM singer s INNER JOIN song sg ON s.singer_id = sg.singer_id GROUP BY s.singer_id HAVING COUNT(sg.song_id) > 1; ",
      "SELECT name FROM singer WHERE EXISTS (SELECT 1 FROM song WHERE singer.singer_id = song.singer_id GROUP BY singer_id HAVING COUNT(song_id) > 1); ",
      "SELECT s.name FROM singer s, song sg WHERE s.singer_id = sg.singer_id GROUP BY s.singer_id HAVING COUNT(sg.song_id) > 1; ",
      "SELECT DISTINCT s.name FROM singer s, (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1) as sg WHERE s.singer_id = sg.singer_id; ",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1)); ",
      "SELECT DISTINCT s.name FROM singer s INNER JOIN song sg ON s.singer_id = sg.singer_id GROUP BY s.singer_id HAVING COUNT(sg.song_id) > 1; ",
      "SELECT s.name FROM singer s INNER JOIN song sg ON s.singer_id = sg.singer_id GROUP BY s.name HAVING COUNT(sg.song_id) > 1; ",
      "SELECT s.name FROM singer s WHERE s.singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1); ",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song WHERE singer_id IN (SELECT singer_id FROM song WHERE singer_id = singer.singer_id GROUP BY singer_id HAVING COUNT(song_id) > 1));"
    ],
    "gpt_answers2": [
      "SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1; ",
      "SELECT singer.name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1); ",
      "SELECT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(*) > 1; ",
      "SELECT DISTINCT singer.name FROM singer JOIN song on singer.singer_id = song.singer_id GROUP BY singer.singer_id, singer.name HAVING COUNT(*) > 1; ",
      "SELECT DISTINCT s.name FROM singer s, song so WHERE s.singer_id = so.singer_id GROUP BY s.singer_id, s.name HAVING COUNT(so.song_id) > 1; ",
      "SELECT singer.name FROM singer JOIN song on singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1; ",
      "SELECT name FROM singer WHERE singer_id IN (SELECT DISTINCT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1); ",
      "SELECT s.name FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name HAVING COUNT(so.song_id) > 1; ",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1); ",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);"
    ],
    "gpt_answers3": [
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);",
      "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(*) > 1;",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id WHERE COUNT(*) > 1);",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1);",
      "SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;",
      "SELECT singer.name FROM singer JOIN (SELECT singer_id, COUNT(*) as song_count FROM song GROUP BY singer_id) AS subquery ON singer.singer_id = subquery.singer_id WHERE subquery.song_count > 1;",
      "SELECT name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY name HAVING COUNT(*) > 1;",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING SUM(sales) > 1);",
      "SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(DISTINCT song.song_id) > 1;",
      "SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(DISTINCT title) > 1);"
    ]
  },
  {
    "id": 1030,
    "db_id": "singer",
    "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "gpt_answers1": [
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;",
      "SELECT DISTINCT citizenship FROM singer WHERE (birth_year < 1945 OR birth_year > 1955) GROUP BY citizenship;",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 GROUP BY citizenship;",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 AND citizenship IS NOT NULL;",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 AND citizenship <> \"\";",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 AND citizenship != \"\";",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 AND citizenship NOT LIKE \"\";",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955 GROUP BY citizenship;",
      "SELECT DISTINCT citizenship FROM singer WHERE (birth_year < 1945 OR birth_year > 1955) AND citizenship != \"\" GROUP BY citizenship;"
    ],
    "gpt_answers2": [
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;",
      "SELECT DISTINCT citizenship FROM singer WHERE (birth_year < 1945 OR birth_year > 1955) GROUP BY citizenship;",
      "SELECT citizenship FROM singer WHERE birth_year < 1945 AND citizenship IN (SELECT citizenship FROM singer WHERE birth_year > 1955);",
      "SELECT citizenship FROM singer WHERE birth_year < 1945 AND citizenship = ANY (SELECT citizenship FROM singer WHERE birth_year > 1955);",
      "SELECT citizenship FROM singer WHERE birth_year < 1945 AND EXISTS (SELECT * FROM singer WHERE birth_year > 1955 AND singer.citizenship = singer.citizenship);",
      "SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;",
      "SELECT citizenship FROM singer WHERE birth_year < 1945 AND citizenship = ALL (SELECT citizenship FROM singer WHERE birth_year > 1955);",
      "SELECT DISTINCT citizenship FROM singer s1 WHERE birth_year < 1945 AND EXISTS (SELECT * FROM singer s2 WHERE birth_year > 1955 AND s1.citizenship = s2.citizenship);",
      "SELECT DISTINCT citizenship FROM singer s1 JOIN singer s2 ON s1.citizenship = s2.citizenship WHERE s1.birth_year < 1945 AND s2.birth_year > 1955;",
      "SELECT DISTINCT citizenship FROM (SELECT * FROM singer WHERE birth_year < 1945 UNION SELECT * FROM singer WHERE birth_year > 1955) s;"
    ],
    "gpt_answers3": [
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955; ",
      "SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 GROUP BY citizenship; ",
      "SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955; ",
      "SELECT citizenship FROM singer WHERE birth_year < 1945 AND citizenship IN (SELECT citizenship FROM singer WHERE birth_year > 1955); ",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND citizenship IN (SELECT citizenship FROM singer WHERE birth_year > 1955); ",
      "SELECT DISTINCT citizenship FROM singer WHERE (birth_year < 1945 OR birth_year > 1955) GROUP BY citizenship; ",
      "SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND citizenship IN (SELECT citizenship FROM singer WHERE birth_year > 1955) ORDER BY citizenship; ",
      "SELECT citizenship FROM singer WHERE (birth_year < 1945 AND citizenship IN (SELECT citizenship FROM singer WHERE birth_year > 1955)) OR (birth_year > 1955 AND citizenship IN (SELECT citizenship FROM singer WHERE birth_year < 1945)); ",
      "SELECT citizenship FROM singer WHERE citizenship IN (SELECT citizenship FROM singer WHERE birth_year < 1945) AND citizenship IN (SELECT citizenship FROM singer WHERE birth_year > 1955); ",
      "SELECT citizenship FROM singer WHERE EXISTS (SELECT * FROM singer WHERE birth_year < 1945 AND citizenship = singer.citizenship) AND EXISTS (SELECT * FROM singer WHERE birth_year > 1955 AND citizenship = singer.citizenship);"
    ]
  },
  {
    "id": 1033,
    "db_id": "real_estate_properties",
    "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "gpt_answers1": [
      "SELECT ref_property_types.property_type_description FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code ",
      "SELECT ref_property_types.property_type_description FROM properties, ref_property_types WHERE properties.property_type_code = ref_property_types.property_type_code ",
      "SELECT ref_property_types.property_type_description FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types, properties WHERE ref_property_types.property_type_code = properties.property_type_code ",
      "SELECT property_type_description FROM ref_property_types WHERE property_type_code IN (SELECT property_type_code FROM properties) ",
      "SELECT property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties LIMIT 1) ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types WHERE EXISTS (SELECT 1 FROM properties WHERE properties.property_type_code = ref_property_types.property_type_code) ",
      "SELECT DISTINCT ref_property_types.property_type_description FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code ",
      "SELECT DISTINCT ref_property_types.property_type_description FROM properties LEFT JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code"
    ],
    "gpt_answers2": [
      "SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code WHERE properties.property_type_code = <property_type_code>; ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code AND properties.property_type_code = <property_type_code>; ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types WHERE ref_property_types.property_type_code = <property_type_code>; ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types WHERE property_type_code IN ( SELECT property_type_code FROM properties WHERE property_type_code = <property_type_code> ); ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types INNER JOIN properties ON ref_property_types.property_type_code = properties.property_type_code WHERE properties.property_type_code = <property_type_code>; ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types, properties WHERE ref_property_types.property_type_code = properties.property_type_code AND properties.property_type_code = <property_type_code>; ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types WHERE ref_property_types.property_type_code = ( SELECT property_type_code FROM properties WHERE property_type_code = <property_type_code> ); ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types WHERE ref_property_types.property_type_code = ( SELECT property_type_code FROM properties WHERE property_type_code = <property_type_code> LIMIT 1 ); ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code WHERE properties.property_type_code = <property_type_code> LIMIT 1; ",
      "SELECT ref_property_types.property_type_description FROM ref_property_types LEFT JOIN properties ON ref_property_types.property_type_code = properties.property_type_code WHERE properties.property_type_code = <property_type_code> LIMIT 1;"
    ],
    "gpt_answers3": [
      "SELECT ref_property_types.property_type_description  FROM ref_property_types  JOIN properties ON properties.property_type_code = ref_property_types.property_type_code  WHERE properties.property_type_code = 'code'; ",
      "SELECT ref_property_types.property_type_description  FROM ref_property_types, properties  WHERE properties.property_type_code = ref_property_types.property_type_code  AND properties.property_type_code = 'code'; ",
      "SELECT ref_property_types.property_type_description  FROM ref_property_types  INNER JOIN properties ON properties.property_type_code = ref_property_types.property_type_code  WHERE properties.property_type_code = 'code'; ",
      "SELECT property_type_description  FROM ref_property_types  WHERE property_type_code = (SELECT property_type_code  FROM properties  WHERE property_type_code = 'code'); ",
      "SELECT property_type_description  FROM ref_property_types  WHERE property_type_code = (SELECT property_type_code  FROM properties  WHERE property_type_code IN ('code')) ",
      "SELECT property_type_description  FROM ref_property_types  WHERE property_type_code = (SELECT property_type_code  FROM properties  WHERE property_type_code LIKE 'code'); ",
      "SELECT property_type_description  FROM ref_property_types  WHERE property_type_code IN (SELECT property_type_code  FROM properties  WHERE property_type_code = 'code'); ",
      "SELECT property_type_description  FROM ref_property_types  WHERE property_type_code IN (SELECT property_type_code  FROM properties  WHERE property_type_code LIKE 'code'); ",
      "SELECT property_type_description  FROM ref_property_types  WHERE property_type_code = (SELECT DISTINCT property_type_code  FROM properties  WHERE property_type_code = 'code'); ",
      "SELECT property_type_description  FROM ref_property_types, properties  WHERE ref_property_types.property_type_code = properties.property_type_code  AND ref_property_types.property_type_code = 'code';"
    ]
  },
  {
    "id": 1034,
    "db_id": "real_estate_properties",
    "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "gpt_answers1": [
      "SELECT properties.property_name FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description IN ('House', 'Apartment') AND properties.room_count > 1; ",
      "SELECT property_name FROM properties WHERE property_type_code IN (SELECT property_type_code FROM ref_property_types WHERE property_type_description IN ('House', 'Apartment')) AND room_count > 1; ",
      "SELECT properties.property_name FROM properties, ref_property_types WHERE properties.property_type_code = ref_property_types.property_type_code AND (ref_property_types.property_type_description = 'House' OR ref_property_types.property_type_description = 'Apartment') AND properties.room_count > 1; ",
      "SELECT properties.property_name FROM properties WHERE properties.property_type_code IN (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'House'  OR property_type_description = 'Apartment') AND properties.room_count > 1; ",
      "SELECT property_name FROM properties WHERE property_type_code = (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'House' UNION SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'Apartment') AND room_count > 1; ",
      "SELECT a.property_name FROM properties AS a JOIN ref_property_types AS b ON a.property_type_code = b.property_type_code WHERE b.property_type_description IN ('House', 'Apartment') AND a.room_count > 1; ",
      "SELECT MAX(property_name) FROM properties WHERE property_type_code IN (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'House' UNION SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'Apartment') AND room_count > 1; ",
      "SELECT DISTINCT properties.property_name FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description = 'House' OR ref_property_types.property_type_description = 'Apartment' AND properties.room_count > 1; ",
      "SELECT properties.property_name FROM properties, ref_property_types WHERE properties.property_type_code = ref_property_types.property_type_code AND (ref_property_types.property_type_description = 'House' OR ref_property_types.property_type_description = 'Apartment') AND properties.room_count > 1 GROUP BY properties.property_name; ",
      "SELECT properties.property_name FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description = 'House' OR ref_property_types.property_type_description = 'Apartment' HAVING properties.room_count > 1;"
    ],
    "gpt_answers2": [
      "SELECT property_name FROM properties WHERE property_type_code IN ('Apartment', 'House') AND room_count > 1;",
      "SELECT properties.property_name FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE (ref_property_types.property_type_description = 'Apartment' OR ref_property_types.property_type_description = 'House') AND properties.room_count > 1;",
      "SELECT property_name FROM properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House') AND room_count > 1;",
      "SELECT properties.property_name FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description IN ('Apartment', 'House') AND properties.room_count > 1;",
      "SELECT property_name FROM properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House') AND room_count > 1;",
      "SELECT property_name FROM properties WHERE property_type_code = 'Apartment' AND room_count > 1 UNION SELECT property_name FROM properties WHERE property_type_code = 'House' AND room_count > 1;",
      "SELECT property_name FROM properties WHERE (property_type_code = 'Apartment' AND room_count > 1) OR (property_type_code = 'House' AND room_count > 1);",
      "SELECT properties.property_name FROM properties LEFT JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE (ref_property_types.property_type_description = 'Apartment' OR ref_property_types.property_type_description = 'House') AND properties.room_count > 1;",
      "SELECT properties.property_name FROM properties, ref_property_types WHERE (properties.property_type_code = ref_property_types.property_type_code AND ref_property_types.property_type_description = 'Apartment' OR ref_property_types.property_type_description = 'House') AND properties.room_count > 1;",
      "SELECT properties.property_name FROM properties CROSS JOIN ref_property_types WHERE (properties.property_type_code = ref_property_types.property_type_code AND ref_property_types.property_type_description IN ('Apartment', 'House')) AND properties.room_count > 1;"
    ],
    "gpt_answers3": [
      "SELECT properties.property_name  FROM properties  JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description IN ('Apartment', 'House')  AND properties.room_count > 1; ",
      "SELECT property_name  FROM properties  WHERE property_type_code IN (SELECT property_type_code FROM ref_property_types WHERE property_type_description IN ('Apartment', 'House')) AND room_count > 1; ",
      "SELECT properties.property_name  FROM properties  WHERE properties.property_type_code IN (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'Apartment') OR properties.property_type_code IN (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'House') AND properties.room_count > 1; ",
      "SELECT properties.property_name  FROM properties  LEFT JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description IN ('Apartment', 'House')  AND properties.room_count > 1; ",
      "SELECT property_name  FROM properties  WHERE (property_type_code = (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'Apartment')  OR property_type_code = (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'House')) AND room_count > 1; ",
      "SELECT properties.property_name  FROM properties  WHERE (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'Apartment') = properties.property_type_code OR (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'House') = properties.property_type_code AND properties.room_count > 1; ",
      "SELECT properties.property_name  FROM properties  WHERE properties.property_type_code = (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'Apartment')  OR properties.property_type_code = (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'House')  AND properties.room_count > 1; ",
      "SELECT property_name  FROM properties  WHERE property_type_code IN (SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'Apartment'  UNION SELECT property_type_code FROM ref_property_types WHERE property_type_description = 'House') AND room_count > 1; ",
      "SELECT properties.property_name  FROM properties  WHERE properties.property_type_code = 'Apartment'  OR properties.property_type_code = 'House'  AND properties.room_count > 1; ",
      "SELECT properties.property_name  FROM properties  JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE (ref_property_types.property_type_description = 'Apartment' OR ref_property_types.property_type_description = 'House')  AND properties.room_count > 1;"
    ]
  }
]